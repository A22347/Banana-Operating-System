
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f1 7a 00 00       	call   c0007b11 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 22 02 c0       	mov    eax,0xc00222a8
c0000025:	3d a8 22 02 c0       	cmp    eax,0xc00222a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 22 02 c0       	push   0xc00222a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 22 02 c0       	mov    eax,0xc00222a8
c0000051:	2d a8 22 02 c0       	sub    eax,0xc00222a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 22 02 c0       	push   0xc00222a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c f2 01 c0       	mov    ebx,0xc001f24c
c0000097:	81 eb 48 f2 01 c0    	sub    ebx,0xc001f248
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 f2 01 c0       	mov    esi,0xc001f248
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 22 02 c0       	push   0xc00222a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 a8 22 02 c0       	push   0xc00222a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 47 45 01 00       	call   c00147f4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 2f a4 00 00       	call   c000a6f4 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 25 45 01 00       	call   c00147f4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 2e 4a 01 00       	call   c0014d1c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c9 50 01 00       	call   c00153c0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2d 04 01 00       	jmp    c00107ac <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0da0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0da0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0da0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0da0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0da0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0da0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 87 6a 00 00       	call   c000798c <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 e2 69 00 00       	call   c000798c <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 cc 69 00 00       	call   c000798c <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 ca 68 00 00       	call   c000798c <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 64 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c9c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 be 6a 01 00       	jmp    c0018898 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 e8 6a 01 00       	jmp    c00188d8 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 09 6b 01 00       	jmp    c0018918 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 c0 f4 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b40]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 c0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b40]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 7c f3 01 c0       	mov    edx,0xc001f37c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 82 f3 01 c0       	mov    eax,0xc001f382
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 40 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0bc0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 8b f3 01 c0       	mov    eax,0xc001f38b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 c0 f4 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0b40]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 10 f4 01 c0       	mov    eax,0xc001f410
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 00 f4 01 c0       	mov    ebx,0xc001f400
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 e0 f3 01 c0       	mov    eax,0xc001f3e0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 92 f3 01 c0       	mov    edx,0xc001f392
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 9e f3 01 c0       	mov    edx,0xc001f39e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba b2 f3 01 c0       	mov    edx,0xc001f3b2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 54 1e 00 00       	call   c0007ab7 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 4c 1e 00 00       	call   c0007ac7 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c e0 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f7e0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 e0 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f7e0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 20 f5 01 c0       	mov    eax,0xc001f520
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 e0 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b20]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 e0 f8 01 c0       	push   0xc001f8e0
c0006147:	e8 f0 30 01 00       	call   c001923c <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ee f8 01 c0       	push   0xc001f8ee
c000617f:	e8 b8 30 01 00       	call   c001923c <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 21 30 01 00       	call   c00191e0 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 fd f8 01 c0       	push   0xc001f8fd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 00 f9 01 c0       	push   0xc001f900
c000682f:	e8 08 2a 01 00       	call   c001923c <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 16 2a 01 00       	call   c0019258 <iso_kprintfd>
c0006842:	c7 04 24 05 f9 01 c0 	mov    DWORD PTR [esp],0xc001f905
c0006849:	e8 ee 29 01 00       	call   c001923c <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 fe 29 01 00       	call   c0019258 <iso_kprintfd>
c000685a:	c7 04 24 0b f9 01 c0 	mov    DWORD PTR [esp],0xc001f90b
c0006861:	e8 d6 29 01 00       	call   c001923c <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 e6 29 01 00       	call   c0019258 <iso_kprintfd>
c0006872:	c7 04 24 11 f9 01 c0 	mov    DWORD PTR [esp],0xc001f911
c0006879:	e8 be 29 01 00       	call   c001923c <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 ce 29 01 00       	call   c0019258 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 fd f8 01 c0       	push   0xc001f8fd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 1a f9 01 c0       	push   0xc001f91a
c0006a52:	e8 e5 27 01 00       	call   c001923c <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 25 f9 01 c0       	push   0xc001f925
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 2c f9 01 c0       	push   0xc001f92c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 33 f9 01 c0       	push   0xc001f933
c0006b69:	e8 ce 26 01 00       	call   c001923c <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 3e f9 01 c0       	push   0xc001f93e
c0006b84:	e8 b3 26 01 00       	call   c001923c <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 04 0f 00 00       	call   c0007ab7 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 f3 0e 00 00       	call   c0007ab7 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 de 0e 00 00       	call   c0007ab7 <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 c5 0e 00 00       	call   c0007ab7 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 a3 0e 00 00       	call   c0007ac7 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 95 0e 00 00       	call   c0007ac7 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 7b 0e 00 00       	call   c0007ac7 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 66 0e 00 00       	call   c0007ac7 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 20 52 00 00       	call   c000bebe <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 4f f9 01 c0       	push   0xc001f94f
c0006ccf:	e8 70 94 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 d7 0d 00 00       	call   c0007ab7 <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 68 f9 01 c0       	push   0xc001f968
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 4c de 00 00       	call   c0014b48 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 03 75 00 c0       	push   0xc0007503
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 5b e0 00 00       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 30 58 01 c0       	push   0xc0015830
c0006d20:	52                   	push   edx
c0006d21:	e8 46 e0 00 00       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 3e 9c 00 00       	call   c0010978 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 64 fa 01 c0       	push   0xc001fa64
c0006d42:	e8 fd 93 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0006d47:	e8 07 ef 00 00       	call   c0015c53 <Vm::initialise8086()>
c0006d4c:	e8 8f 3f 00 00       	call   c000ace0 <Fs::initVFS()>
c0006d51:	c7 04 24 75 f9 01 c0 	mov    DWORD PTR [esp],0xc001f975
c0006d58:	e8 e7 93 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 64 fa 01 c0       	push   0xc001fa64
c0006d7c:	e8 c3 93 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0006d81:	e8 9e 98 00 00       	call   c0010624 <Krnl::loadSystemEnv()>
c0006d86:	e8 fb 9a 00 00       	call   c0010886 <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 8f f9 01 c0       	push   0xc001f98f
c0006d95:	68 98 f9 01 c0       	push   0xc001f998
c0006d9a:	e8 d7 c0 00 00       	call   c0012e76 <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 71 4a 00 00       	call   c000b818 <User::loadClockSettings(int)>
c0006da7:	c7 04 24 88 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa88
c0006dae:	e8 91 93 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 f7 50 00 00       	call   c000bebc <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 a0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a0
c0006dcc:	e8 73 93 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 b1 f9 01 c0       	push   0xc001f9b1
c0006de0:	e8 6b d7 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 a2 d9 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 bd e3 00 00       	call   c00151b8 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 cd f9 01 c0       	push   0xc001f9cd
c0006e0f:	50                   	push   eax
c0006e10:	e8 23 51 00 00       	call   c000bf38 <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 37 73 01 00       	call   c001e246 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 0d 87 00 00       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 e6 86 00 00       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 c4 86 00 00       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 a2 86 00 00       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 af 85 00 00       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 8a 85 00 00       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 96 71 01 00       	call   c001e200 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 e4 6d 01 00       	call   c001de70 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 a0 85 00 00       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 d6 f9 01 c0       	push   0xc001f9d6
c00070fc:	e8 c0 96 00 00       	call   c00107c1 <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 dc f9 01 c0       	push   0xc001f9dc
c0007138:	e8 84 96 00 00       	call   c00107c1 <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 ef 7f 00 00       	jmp    c000f174 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 e2 f9 01 c0       	push   0xc001f9e2
c00071db:	0f 94 05 e0 1d 02 c0 	sete   BYTE PTR ds:0xc0021de0
c00071e2:	e8 5d 8f 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 c4 08 00 00       	call   c0007ab7 <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 eb 7a 00 00       	call   c000ece8 <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 94 4b 00 00       	call   c000bda0 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 fa f9 01 c0 	mov    DWORD PTR [esp],0xc001f9fa
c0007225:	e8 1a 8f 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 81 08 00 00       	call   c0007ab7 <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 d2 84 00 00       	call   c000f712 <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 51 4b 00 00       	call   c000bda0 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 14 fa 01 c0       	push   0xc001fa14
c000726c:	e8 d3 8e 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0007271:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007278:	e8 17 dc 00 00       	call   c0014e94 <setupMultitasking(void (*)())>
c000727d:	83 c4 14             	add    esp,0x14
c0007280:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007285:	5b                   	pop    ebx
c0007286:	5e                   	pop    esi
c0007287:	c3                   	ret    

c0007288 <Computer::disableNMI()>:
c0007288:	6a 00                	push   0x0
c000728a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728e:	50                   	push   eax
c000728f:	e8 1a ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c0007294:	5a                   	pop    edx
c0007295:	59                   	pop    ecx
c0007296:	c3                   	ret    
c0007297:	90                   	nop

c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007298:	53                   	push   ebx
c0007299:	b2 80                	mov    dl,0x80
c000729b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000729f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072a7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072ae:	74 02                	je     c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072b0:	31 d2                	xor    edx,edx
c00072b2:	09 d0                	or     eax,edx
c00072b4:	e6 70                	out    0x70,al
c00072b6:	88 c8                	mov    al,cl
c00072b8:	e6 71                	out    0x71,al
c00072ba:	5b                   	pop    ebx
c00072bb:	c3                   	ret    

c00072bc <Computer::handleNMI()>:
c00072bc:	56                   	push   esi
c00072bd:	53                   	push   ebx
c00072be:	83 ec 10             	sub    esp,0x10
c00072c1:	e4 92                	in     al,0x92
c00072c3:	89 c6                	mov    esi,eax
c00072c5:	e4 61                	in     al,0x61
c00072c7:	68 2f fa 01 c0       	push   0xc001fa2f
c00072cc:	88 c3                	mov    bl,al
c00072ce:	e8 6a 36 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00072d3:	83 c4 10             	add    esp,0x10
c00072d6:	83 e6 10             	and    esi,0x10
c00072d9:	75 10                	jne    c00072eb <Computer::handleNMI()+0x2f>
c00072db:	f6 c3 40             	test   bl,0x40
c00072de:	75 20                	jne    c0007300 <Computer::handleNMI()+0x44>
c00072e0:	80 e3 80             	and    bl,0x80
c00072e3:	75 30                	jne    c0007315 <Computer::handleNMI()+0x59>
c00072e5:	83 c4 04             	add    esp,0x4
c00072e8:	5b                   	pop    ebx
c00072e9:	5e                   	pop    esi
c00072ea:	c3                   	ret    
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 40 fa 01 c0       	push   0xc001fa40
c00072f3:	e8 c9 94 00 00       	call   c00107c1 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	f6 c3 40             	test   bl,0x40
c00072fe:	74 e0                	je     c00072e0 <Computer::handleNMI()+0x24>
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	68 4d fa 01 c0       	push   0xc001fa4d
c0007308:	e8 b4 94 00 00       	call   c00107c1 <KePanic(char const*)>
c000730d:	83 c4 10             	add    esp,0x10
c0007310:	80 e3 80             	and    bl,0x80
c0007313:	74 d0                	je     c00072e5 <Computer::handleNMI()+0x29>
c0007315:	c7 44 24 10 57 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa57
c000731d:	83 c4 04             	add    esp,0x4
c0007320:	5b                   	pop    ebx
c0007321:	5e                   	pop    esi
c0007322:	e9 9a 94 00 00       	jmp    c00107c1 <KePanic(char const*)>
c0007327:	90                   	nop

c0007328 <GDTEntry::setBase(unsigned int)>:
c0007328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000732c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007330:	89 c1                	mov    ecx,eax
c0007332:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007336:	c1 e9 10             	shr    ecx,0x10
c0007339:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000733c:	c1 e8 18             	shr    eax,0x18
c000733f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007342:	c3                   	ret    
c0007343:	90                   	nop

c0007344 <GDTEntry::setLimit(unsigned int)>:
c0007344:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007348:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000734f:	66 89 01             	mov    WORD PTR [ecx],ax
c0007352:	c1 e8 10             	shr    eax,0x10
c0007355:	83 e0 0f             	and    eax,0xf
c0007358:	83 e2 f0             	and    edx,0xfffffff0
c000735b:	09 d0                	or     eax,edx
c000735d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007360:	c3                   	ret    
c0007361:	90                   	nop

c0007362 <GDT::GDT()>:
c0007362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007366:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000736c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007370:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007376:	90                   	nop
c0007377:	c3                   	ret    

c0007378 <GDT::addEntry(GDTEntry)>:
c0007378:	53                   	push   ebx
c0007379:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000737d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007385:	8b 02                	mov    eax,DWORD PTR [edx]
c0007387:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000738b:	8d 48 01             	lea    ecx,[eax+0x1]
c000738e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007392:	c1 e0 03             	shl    eax,0x3
c0007395:	89 0a                	mov    DWORD PTR [edx],ecx
c0007397:	5b                   	pop    ebx
c0007398:	c3                   	ret    
c0007399:	90                   	nop

c000739a <GDT::getNumberOfEntries()>:
c000739a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000739e:	8b 00                	mov    eax,DWORD PTR [eax]
c00073a0:	c3                   	ret    
c00073a1:	90                   	nop

c00073a2 <GDT::flush()>:
c00073a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a8:	83 c0 04             	add    eax,0x4
c00073ab:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073b0:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073b7:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073be:	e9 97 8f ff ff       	jmp    c000035a <loadGDT>
c00073c3:	90                   	nop

c00073c4 <GDT::setup()>:
c00073c4:	57                   	push   edi
c00073c5:	56                   	push   esi
c00073c6:	53                   	push   ebx
c00073c7:	83 ec 30             	sub    esp,0x30
c00073ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073ce:	6a 00                	push   0x0
c00073d0:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073d4:	56                   	push   esi
c00073d5:	e8 4e ff ff ff       	call   c0007328 <GDTEntry::setBase(unsigned int)>
c00073da:	6a 00                	push   0x0
c00073dc:	56                   	push   esi
c00073dd:	e8 62 ff ff ff       	call   c0007344 <GDTEntry::setLimit(unsigned int)>
c00073e2:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073ea:	6a 00                	push   0x0
c00073ec:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073f0:	56                   	push   esi
c00073f1:	e8 32 ff ff ff       	call   c0007328 <GDTEntry::setBase(unsigned int)>
c00073f6:	68 ff ff ff 00       	push   0xffffff
c00073fb:	56                   	push   esi
c00073fc:	e8 43 ff ff ff       	call   c0007344 <GDTEntry::setLimit(unsigned int)>
c0007401:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007405:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007409:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000740e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007412:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007417:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000741b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000741f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007423:	89 f8                	mov    eax,edi
c0007425:	89 fa                	mov    edx,edi
c0007427:	80 e4 f7             	and    ah,0xf7
c000742a:	80 ce 60             	or     dh,0x60
c000742d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007431:	89 c7                	mov    edi,eax
c0007433:	80 cc 60             	or     ah,0x60
c0007436:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000743a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000743e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007442:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007446:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000744a:	83 c4 20             	add    esp,0x20
c000744d:	6a 00                	push   0x0
c000744f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007453:	50                   	push   eax
c0007454:	e8 cf fe ff ff       	call   c0007328 <GDTEntry::setBase(unsigned int)>
c0007459:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000745d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007461:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007465:	83 e0 3f             	and    eax,0x3f
c0007468:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000746c:	6a 00                	push   0x0
c000746e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007472:	50                   	push   eax
c0007473:	e8 b0 fe ff ff       	call   c0007328 <GDTEntry::setBase(unsigned int)>
c0007478:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000747c:	83 e0 3f             	and    eax,0x3f
c000747f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007483:	83 c4 0c             	add    esp,0xc
c0007486:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	53                   	push   ebx
c000748f:	e8 e4 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c0007494:	83 c4 0c             	add    esp,0xc
c0007497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000749b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000749f:	53                   	push   ebx
c00074a0:	e8 d3 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c00074a5:	83 c4 0c             	add    esp,0xc
c00074a8:	57                   	push   edi
c00074a9:	56                   	push   esi
c00074aa:	53                   	push   ebx
c00074ab:	e8 c8 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c00074b0:	83 c4 0c             	add    esp,0xc
c00074b3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074bb:	53                   	push   ebx
c00074bc:	e8 b7 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c00074c1:	83 c4 0c             	add    esp,0xc
c00074c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074cc:	53                   	push   ebx
c00074cd:	e8 a6 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c00074d2:	83 c4 0c             	add    esp,0xc
c00074d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074dd:	53                   	push   ebx
c00074de:	e8 95 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c00074e3:	83 c4 0c             	add    esp,0xc
c00074e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ee:	53                   	push   ebx
c00074ef:	e8 84 fe ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c00074f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f7:	e8 a6 fe ff ff       	call   c00073a2 <GDT::flush()>
c00074fc:	83 c4 40             	add    esp,0x40
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <idleFunction(void*)>:
c0007503:	83 ec 0c             	sub    esp,0xc
c0007506:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000750b:	48                   	dec    eax
c000750c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007511:	75 01                	jne    c0007514 <idleFunction(void*)+0x11>
c0007513:	fb                   	sti    
c0007514:	e8 df f5 00 00       	call   c0016af8 <HalSystemIdle()>
c0007519:	e8 e4 72 01 00       	call   c001e802 <idleCommon()>
c000751e:	eb f4                	jmp    c0007514 <idleFunction(void*)+0x11>

c0007520 <IDTEntry::IDTEntry(bool)>:
c0007520:	53                   	push   ebx
c0007521:	83 ec 04             	sub    esp,0x4
c0007524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007528:	88 04 24             	mov    BYTE PTR [esp],al
c000752b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007539:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000753d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007541:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007544:	83 e2 f0             	and    edx,0xfffffff0
c0007547:	83 ca 0e             	or     edx,0xe
c000754a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007551:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007554:	83 e2 ef             	and    edx,0xffffffef
c0007557:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000755a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755e:	85 c0                	test   eax,eax
c0007560:	74 06                	je     c0007568 <IDTEntry::IDTEntry(bool)+0x48>
c0007562:	b2 03                	mov    dl,0x3
c0007564:	eb 06                	jmp    c000756c <IDTEntry::IDTEntry(bool)+0x4c>
c0007566:	66 90                	xchg   ax,ax
c0007568:	b2 00                	mov    dl,0x0
c000756a:	66 90                	xchg   ax,ax
c000756c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007570:	83 e2 03             	and    edx,0x3
c0007573:	89 d3                	mov    ebx,edx
c0007575:	c1 e3 05             	shl    ebx,0x5
c0007578:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000757b:	83 e2 9f             	and    edx,0xffffff9f
c000757e:	88 d1                	mov    cl,dl
c0007580:	88 da                	mov    dl,bl
c0007582:	09 ca                	or     edx,ecx
c0007584:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007587:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758e:	83 ca 80             	or     edx,0xffffff80
c0007591:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007594:	90                   	nop
c0007595:	83 c4 04             	add    esp,0x4
c0007598:	5b                   	pop    ebx
c0007599:	c3                   	ret    

c000759a <IDTEntry::setOffset(unsigned int)>:
c000759a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075a2:	66 89 02             	mov    WORD PTR [edx],ax
c00075a5:	c1 e8 10             	shr    eax,0x10
c00075a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075ac:	c3                   	ret    
c00075ad:	90                   	nop
c00075ae:	66 90                	xchg   ax,ax

c00075b0 <IDT::IDT()>:
c00075b0:	90                   	nop
c00075b1:	c3                   	ret    

c00075b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b6:	83 c0 30             	add    eax,0x30
c00075b9:	c3                   	ret    

c00075ba <IDT::addEntry(IDTEntry, int)>:
c00075ba:	53                   	push   ebx
c00075bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075d2:	5b                   	pop    ebx
c00075d3:	c3                   	ret    

c00075d4 <IDT::addEntry(int, void (*)(), bool)>:
c00075d4:	53                   	push   ebx
c00075d5:	83 ec 10             	sub    esp,0x10
c00075d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075dd:	50                   	push   eax
c00075de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075e2:	53                   	push   ebx
c00075e3:	e8 38 ff ff ff       	call   c0007520 <IDTEntry::IDTEntry(bool)>
c00075e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075ec:	53                   	push   ebx
c00075ed:	e8 a8 ff ff ff       	call   c000759a <IDTEntry::setOffset(unsigned int)>
c00075f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007602:	e8 b3 ff ff ff       	call   c00075ba <IDT::addEntry(IDTEntry, int)>
c0007607:	83 c4 30             	add    esp,0x30
c000760a:	5b                   	pop    ebx
c000760b:	c3                   	ret    

c000760c <IDT::flush()>:
c000760c:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007619:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c000761e:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007625:	c3                   	ret    

c0007626 <IDT::setup()>:
c0007626:	57                   	push   edi
c0007627:	56                   	push   esi
c0007628:	53                   	push   ebx
c0007629:	83 ec 10             	sub    esp,0x10
c000762c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007630:	6a 00                	push   0x0
c0007632:	68 00 df 01 c0       	push   0xc001df00
c0007637:	6a 00                	push   0x0
c0007639:	53                   	push   ebx
c000763a:	e8 95 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	6a 00                	push   0x0
c0007641:	68 10 df 01 c0       	push   0xc001df10
c0007646:	6a 01                	push   0x1
c0007648:	53                   	push   ebx
c0007649:	e8 86 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000764e:	83 c4 20             	add    esp,0x20
c0007651:	6a 00                	push   0x0
c0007653:	68 1a df 01 c0       	push   0xc001df1a
c0007658:	6a 02                	push   0x2
c000765a:	53                   	push   ebx
c000765b:	e8 74 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	6a 00                	push   0x0
c0007662:	68 24 df 01 c0       	push   0xc001df24
c0007667:	6a 03                	push   0x3
c0007669:	53                   	push   ebx
c000766a:	e8 65 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000766f:	83 c4 20             	add    esp,0x20
c0007672:	6a 00                	push   0x0
c0007674:	68 2e df 01 c0       	push   0xc001df2e
c0007679:	6a 04                	push   0x4
c000767b:	53                   	push   ebx
c000767c:	e8 53 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	6a 00                	push   0x0
c0007683:	68 38 df 01 c0       	push   0xc001df38
c0007688:	6a 05                	push   0x5
c000768a:	53                   	push   ebx
c000768b:	e8 44 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007690:	83 c4 20             	add    esp,0x20
c0007693:	6a 00                	push   0x0
c0007695:	68 42 df 01 c0       	push   0xc001df42
c000769a:	6a 06                	push   0x6
c000769c:	53                   	push   ebx
c000769d:	e8 32 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	6a 00                	push   0x0
c00076a4:	68 4c df 01 c0       	push   0xc001df4c
c00076a9:	6a 07                	push   0x7
c00076ab:	53                   	push   ebx
c00076ac:	e8 23 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076b1:	83 c4 20             	add    esp,0x20
c00076b4:	6a 00                	push   0x0
c00076b6:	68 56 df 01 c0       	push   0xc001df56
c00076bb:	6a 08                	push   0x8
c00076bd:	53                   	push   ebx
c00076be:	e8 11 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	6a 00                	push   0x0
c00076c5:	68 5e df 01 c0       	push   0xc001df5e
c00076ca:	6a 09                	push   0x9
c00076cc:	53                   	push   ebx
c00076cd:	e8 02 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076d2:	83 c4 20             	add    esp,0x20
c00076d5:	6a 00                	push   0x0
c00076d7:	68 68 df 01 c0       	push   0xc001df68
c00076dc:	6a 0a                	push   0xa
c00076de:	53                   	push   ebx
c00076df:	e8 f0 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076e4:	6a 00                	push   0x0
c00076e6:	68 70 df 01 c0       	push   0xc001df70
c00076eb:	6a 0b                	push   0xb
c00076ed:	53                   	push   ebx
c00076ee:	e8 e1 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076f3:	83 c4 20             	add    esp,0x20
c00076f6:	6a 00                	push   0x0
c00076f8:	68 78 df 01 c0       	push   0xc001df78
c00076fd:	6a 0c                	push   0xc
c00076ff:	53                   	push   ebx
c0007700:	e8 cf fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007705:	6a 00                	push   0x0
c0007707:	68 80 df 01 c0       	push   0xc001df80
c000770c:	6a 0d                	push   0xd
c000770e:	53                   	push   ebx
c000770f:	e8 c0 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007714:	83 c4 20             	add    esp,0x20
c0007717:	6a 00                	push   0x0
c0007719:	68 9a df 01 c0       	push   0xc001df9a
c000771e:	6a 0e                	push   0xe
c0007720:	53                   	push   ebx
c0007721:	e8 ae fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007726:	6a 00                	push   0x0
c0007728:	68 a2 df 01 c0       	push   0xc001dfa2
c000772d:	6a 0f                	push   0xf
c000772f:	53                   	push   ebx
c0007730:	e8 9f fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	6a 00                	push   0x0
c000773a:	68 ac df 01 c0       	push   0xc001dfac
c000773f:	6a 10                	push   0x10
c0007741:	53                   	push   ebx
c0007742:	e8 8d fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007747:	6a 00                	push   0x0
c0007749:	68 b6 df 01 c0       	push   0xc001dfb6
c000774e:	6a 11                	push   0x11
c0007750:	53                   	push   ebx
c0007751:	e8 7e fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007756:	83 c4 20             	add    esp,0x20
c0007759:	6a 00                	push   0x0
c000775b:	68 c0 df 01 c0       	push   0xc001dfc0
c0007760:	6a 12                	push   0x12
c0007762:	53                   	push   ebx
c0007763:	e8 6c fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007768:	6a 01                	push   0x1
c000776a:	68 5a e0 01 c0       	push   0xc001e05a
c000776f:	6a 60                	push   0x60
c0007771:	53                   	push   ebx
c0007772:	e8 5d fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007777:	83 c4 20             	add    esp,0x20
c000777a:	6a 00                	push   0x0
c000777c:	68 61 e0 01 c0       	push   0xc001e061
c0007781:	6a 20                	push   0x20
c0007783:	53                   	push   ebx
c0007784:	e8 4b fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007789:	6a 00                	push   0x0
c000778b:	68 4c e0 01 c0       	push   0xc001e04c
c0007790:	6a 21                	push   0x21
c0007792:	53                   	push   ebx
c0007793:	e8 3c fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007798:	83 c4 20             	add    esp,0x20
c000779b:	6a 00                	push   0x0
c000779d:	68 53 e0 01 c0       	push   0xc001e053
c00077a2:	6a 22                	push   0x22
c00077a4:	53                   	push   ebx
c00077a5:	e8 2a fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077aa:	6a 00                	push   0x0
c00077ac:	68 ca df 01 c0       	push   0xc001dfca
c00077b1:	6a 23                	push   0x23
c00077b3:	53                   	push   ebx
c00077b4:	e8 1b fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077b9:	83 c4 20             	add    esp,0x20
c00077bc:	6a 00                	push   0x0
c00077be:	68 d4 df 01 c0       	push   0xc001dfd4
c00077c3:	6a 24                	push   0x24
c00077c5:	53                   	push   ebx
c00077c6:	e8 09 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077cb:	6a 00                	push   0x0
c00077cd:	68 de df 01 c0       	push   0xc001dfde
c00077d2:	6a 25                	push   0x25
c00077d4:	53                   	push   ebx
c00077d5:	e8 fa fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077da:	83 c4 20             	add    esp,0x20
c00077dd:	6a 00                	push   0x0
c00077df:	68 e8 df 01 c0       	push   0xc001dfe8
c00077e4:	6a 26                	push   0x26
c00077e6:	53                   	push   ebx
c00077e7:	e8 e8 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077ec:	6a 00                	push   0x0
c00077ee:	68 f2 df 01 c0       	push   0xc001dff2
c00077f3:	6a 27                	push   0x27
c00077f5:	53                   	push   ebx
c00077f6:	e8 d9 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077fb:	83 c4 20             	add    esp,0x20
c00077fe:	6a 00                	push   0x0
c0007800:	68 fc df 01 c0       	push   0xc001dffc
c0007805:	6a 28                	push   0x28
c0007807:	53                   	push   ebx
c0007808:	e8 c7 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000780d:	6a 00                	push   0x0
c000780f:	68 06 e0 01 c0       	push   0xc001e006
c0007814:	6a 29                	push   0x29
c0007816:	53                   	push   ebx
c0007817:	e8 b8 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000781c:	83 c4 20             	add    esp,0x20
c000781f:	6a 00                	push   0x0
c0007821:	68 10 e0 01 c0       	push   0xc001e010
c0007826:	6a 2a                	push   0x2a
c0007828:	53                   	push   ebx
c0007829:	e8 a6 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000782e:	6a 00                	push   0x0
c0007830:	68 1a e0 01 c0       	push   0xc001e01a
c0007835:	6a 2b                	push   0x2b
c0007837:	53                   	push   ebx
c0007838:	e8 97 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000783d:	83 c4 20             	add    esp,0x20
c0007840:	6a 00                	push   0x0
c0007842:	68 24 e0 01 c0       	push   0xc001e024
c0007847:	6a 2c                	push   0x2c
c0007849:	53                   	push   ebx
c000784a:	e8 85 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000784f:	6a 00                	push   0x0
c0007851:	68 2e e0 01 c0       	push   0xc001e02e
c0007856:	6a 2d                	push   0x2d
c0007858:	53                   	push   ebx
c0007859:	e8 76 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000785e:	83 c4 20             	add    esp,0x20
c0007861:	6a 00                	push   0x0
c0007863:	68 38 e0 01 c0       	push   0xc001e038
c0007868:	6a 2e                	push   0x2e
c000786a:	53                   	push   ebx
c000786b:	e8 64 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007870:	6a 00                	push   0x0
c0007872:	68 42 e0 01 c0       	push   0xc001e042
c0007877:	6a 2f                	push   0x2f
c0007879:	53                   	push   ebx
c000787a:	e8 55 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	6a 00                	push   0x0
c0007884:	68 9c e1 01 c0       	push   0xc001e19c
c0007889:	6a 30                	push   0x30
c000788b:	53                   	push   ebx
c000788c:	e8 43 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007891:	6a 00                	push   0x0
c0007893:	68 a6 e1 01 c0       	push   0xc001e1a6
c0007898:	6a 31                	push   0x31
c000789a:	53                   	push   ebx
c000789b:	e8 34 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078a0:	83 c4 20             	add    esp,0x20
c00078a3:	6a 00                	push   0x0
c00078a5:	68 b0 e1 01 c0       	push   0xc001e1b0
c00078aa:	6a 32                	push   0x32
c00078ac:	53                   	push   ebx
c00078ad:	e8 22 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078b2:	6a 00                	push   0x0
c00078b4:	68 ba e1 01 c0       	push   0xc001e1ba
c00078b9:	6a 33                	push   0x33
c00078bb:	53                   	push   ebx
c00078bc:	e8 13 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078c1:	83 c4 20             	add    esp,0x20
c00078c4:	6a 00                	push   0x0
c00078c6:	68 c4 e1 01 c0       	push   0xc001e1c4
c00078cb:	6a 34                	push   0x34
c00078cd:	53                   	push   ebx
c00078ce:	e8 01 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078d3:	6a 00                	push   0x0
c00078d5:	68 ce e1 01 c0       	push   0xc001e1ce
c00078da:	6a 35                	push   0x35
c00078dc:	53                   	push   ebx
c00078dd:	e8 f2 fc ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078e2:	83 c4 20             	add    esp,0x20
c00078e5:	6a 00                	push   0x0
c00078e7:	68 d8 e1 01 c0       	push   0xc001e1d8
c00078ec:	6a 36                	push   0x36
c00078ee:	53                   	push   ebx
c00078ef:	e8 e0 fc ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078f4:	6a 00                	push   0x0
c00078f6:	68 e2 e1 01 c0       	push   0xc001e1e2
c00078fb:	6a 37                	push   0x37
c00078fd:	53                   	push   ebx
c00078fe:	e8 d1 fc ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007903:	83 c4 1c             	add    esp,0x1c
c0007906:	6a 03                	push   0x3
c0007908:	6a 02                	push   0x2
c000790a:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007910:	e8 c7 24 00 00       	call   c0009ddc <VAS::allocatePages(int, int)>
c0007915:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000791c:	89 c6                	mov    esi,eax
c000791e:	e8 94 01 00 00       	call   c0007ab7 <malloc>
c0007923:	81 c6 00 20 00 00    	add    esi,0x2000
c0007929:	89 04 24             	mov    DWORD PTR [esp],eax
c000792c:	89 c7                	mov    edi,eax
c000792e:	e8 f5 15 00 00       	call   c0008f28 <TSS::TSS()>
c0007933:	83 c4 0c             	add    esp,0xc
c0007936:	68 56 df 01 c0       	push   0xc001df56
c000793b:	56                   	push   esi
c000793c:	57                   	push   edi
c000793d:	e8 2a 16 00 00       	call   c0008f6c <TSS::setup(unsigned long, unsigned long)>
c0007942:	89 c6                	mov    esi,eax
c0007944:	58                   	pop    eax
c0007945:	5a                   	pop    edx
c0007946:	6a 00                	push   0x0
c0007948:	8d 44 24 14          	lea    eax,[esp+0x14]
c000794c:	50                   	push   eax
c000794d:	e8 ce fb ff ff       	call   c0007520 <IDTEntry::IDTEntry(bool)>
c0007952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007956:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000795b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007962:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007966:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000796c:	80 ce 05             	or     dh,0x5
c000796f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007973:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007976:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000797a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000797d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007980:	e8 87 fc ff ff       	call   c000760c <IDT::flush()>
c0007985:	83 c4 20             	add    esp,0x20
c0007988:	5b                   	pop    ebx
c0007989:	5e                   	pop    esi
c000798a:	5f                   	pop    edi
c000798b:	c3                   	ret    

c000798c <sbrk>:
c000798c:	55                   	push   ebp
c000798d:	57                   	push   edi
c000798e:	56                   	push   esi
c000798f:	53                   	push   ebx
c0007990:	83 ec 1c             	sub    esp,0x1c
c0007993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007997:	85 c0                	test   eax,eax
c0007999:	74 66                	je     c0007a01 <sbrk+0x75>
c000799b:	78 6b                	js     c0007a08 <sbrk+0x7c>
c000799d:	8b 15 cc 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dcc
c00079a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a7:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079ad:	05 ff 0f 00 00       	add    eax,0xfff
c00079b2:	0f 49 e8             	cmovns ebp,eax
c00079b5:	c1 fd 0c             	sar    ebp,0xc
c00079b8:	bb 00 00 00 00       	mov    ebx,0x0
c00079bd:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079c3:	8b 3d cc 1d 02 c0    	mov    edi,DWORD PTR ds:0xc0021dcc
c00079c9:	e8 f4 03 00 00       	call   c0007dc2 <Phys::allocatePage()>
c00079ce:	68 01 04 00 00       	push   0x401
c00079d3:	57                   	push   edi
c00079d4:	50                   	push   eax
c00079d5:	56                   	push   esi
c00079d6:	e8 f5 22 00 00       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079db:	81 05 cc 1d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021dcc,0x1000
c00079e5:	83 c3 01             	add    ebx,0x1
c00079e8:	83 c4 10             	add    esp,0x10
c00079eb:	39 dd                	cmp    ebp,ebx
c00079ed:	75 ce                	jne    c00079bd <sbrk+0x31>
c00079ef:	0f 20 d8             	mov    eax,cr3
c00079f2:	0f 22 d8             	mov    cr3,eax
c00079f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f9:	83 c4 1c             	add    esp,0x1c
c00079fc:	5b                   	pop    ebx
c00079fd:	5e                   	pop    esi
c00079fe:	5f                   	pop    edi
c00079ff:	5d                   	pop    ebp
c0007a00:	c3                   	ret    
c0007a01:	a1 cc 1d 02 c0       	mov    eax,ds:0xc0021dcc
c0007a06:	eb f1                	jmp    c00079f9 <sbrk+0x6d>
c0007a08:	83 ec 08             	sub    esp,0x8
c0007a0b:	50                   	push   eax
c0007a0c:	68 d4 fa 01 c0       	push   0xc001fad4
c0007a11:	e8 27 2f 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0007a16:	83 c4 10             	add    esp,0x10
c0007a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a1e:	eb d9                	jmp    c00079f9 <sbrk+0x6d>

c0007a20 <mmap>:
c0007a20:	83 ec 18             	sub    esp,0x18
c0007a23:	68 04 fb 01 c0       	push   0xc001fb04
c0007a28:	e8 94 8d 00 00       	call   c00107c1 <KePanic(char const*)>
c0007a2d:	b8 00 00 00 00       	mov    eax,0x0
c0007a32:	83 c4 1c             	add    esp,0x1c
c0007a35:	c3                   	ret    

c0007a36 <munmap>:
c0007a36:	83 ec 18             	sub    esp,0x18
c0007a39:	68 09 fb 01 c0       	push   0xc001fb09
c0007a3e:	e8 7e 8d 00 00       	call   c00107c1 <KePanic(char const*)>
c0007a43:	b8 00 00 00 00       	mov    eax,0x0
c0007a48:	83 c4 1c             	add    esp,0x1c
c0007a4b:	c3                   	ret    

c0007a4c <liballoc_lock()>:
c0007a4c:	fa                   	cli    
c0007a4d:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a54:	b8 00 00 00 00       	mov    eax,0x0
c0007a59:	c3                   	ret    

c0007a5a <liballoc_unlock()>:
c0007a5a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a5f:	83 e8 01             	sub    eax,0x1
c0007a62:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a67:	75 01                	jne    c0007a6a <liballoc_unlock()+0x10>
c0007a69:	fb                   	sti    
c0007a6a:	b8 00 00 00 00       	mov    eax,0x0
c0007a6f:	c3                   	ret    

c0007a70 <liballoc_alloc(int)>:
c0007a70:	83 ec 10             	sub    esp,0x10
c0007a73:	6a 01                	push   0x1
c0007a75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a79:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a7f:	e8 58 23 00 00       	call   c0009ddc <VAS::allocatePages(int, int)>
c0007a84:	83 c4 1c             	add    esp,0x1c
c0007a87:	c3                   	ret    

c0007a88 <liballoc_free(void*, int)>:
c0007a88:	83 ec 14             	sub    esp,0x14
c0007a8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a95:	e8 7c 1f 00 00       	call   c0009a16 <VAS::freeAllocatedPages(unsigned long)>
c0007a9a:	b8 00 00 00 00       	mov    eax,0x0
c0007a9f:	83 c4 1c             	add    esp,0x1c
c0007aa2:	c3                   	ret    

c0007aa3 <realloc>:
c0007aa3:	83 ec 14             	sub    esp,0x14
c0007aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aae:	e8 6e 9b ff ff       	call   c0001621 <dlrealloc>
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <malloc>:
c0007ab7:	83 ec 18             	sub    esp,0x18
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	e8 21 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ac3:	83 c4 1c             	add    esp,0x1c
c0007ac6:	c3                   	ret    

c0007ac7 <free>:
c0007ac7:	83 ec 18             	sub    esp,0x18
c0007aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ace:	e8 b3 92 ff ff       	call   c0000d86 <dlfree>
c0007ad3:	83 c4 1c             	add    esp,0x1c
c0007ad6:	c3                   	ret    

c0007ad7 <rfree>:
c0007ad7:	83 ec 18             	sub    esp,0x18
c0007ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ade:	e8 a3 92 ff ff       	call   c0000d86 <dlfree>
c0007ae3:	83 c4 1c             	add    esp,0x1c
c0007ae6:	c3                   	ret    

c0007ae7 <calloc>:
c0007ae7:	56                   	push   esi
c0007ae8:	53                   	push   ebx
c0007ae9:	83 ec 10             	sub    esp,0x10
c0007aec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007af0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af5:	53                   	push   ebx
c0007af6:	e8 bc ff ff ff       	call   c0007ab7 <malloc>
c0007afb:	89 c6                	mov    esi,eax
c0007afd:	83 c4 0c             	add    esp,0xc
c0007b00:	53                   	push   ebx
c0007b01:	6a 00                	push   0x0
c0007b03:	50                   	push   eax
c0007b04:	e8 e7 89 ff ff       	call   c00004f0 <memset>
c0007b09:	89 f0                	mov    eax,esi
c0007b0b:	83 c4 14             	add    esp,0x14
c0007b0e:	5b                   	pop    ebx
c0007b0f:	5e                   	pop    esi
c0007b10:	c3                   	ret    

c0007b11 <KeEntryPoint>:
c0007b11:	57                   	push   edi
c0007b12:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b17:	56                   	push   esi
c0007b18:	31 f6                	xor    esi,esi
c0007b1a:	53                   	push   ebx
c0007b1b:	89 fa                	mov    edx,edi
c0007b1d:	83 ec 2c             	sub    esp,0x2c
c0007b20:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b25:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b2a:	89 f0                	mov    eax,esi
c0007b2c:	ee                   	out    dx,al
c0007b2d:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b32:	b0 80                	mov    al,0x80
c0007b34:	89 da                	mov    edx,ebx
c0007b36:	ee                   	out    dx,al
c0007b37:	b1 03                	mov    cl,0x3
c0007b39:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3e:	88 c8                	mov    al,cl
c0007b40:	ee                   	out    dx,al
c0007b41:	89 f0                	mov    eax,esi
c0007b43:	89 fa                	mov    edx,edi
c0007b45:	ee                   	out    dx,al
c0007b46:	88 c8                	mov    al,cl
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b0 c7                	mov    al,0xc7
c0007b4d:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b52:	ee                   	out    dx,al
c0007b53:	b0 0b                	mov    al,0xb
c0007b55:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b5a:	ee                   	out    dx,al
c0007b5b:	68 10 fb 01 c0       	push   0xc001fb10
c0007b60:	e8 d8 2d 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0007b65:	e8 65 85 00 00       	call   c00100cf <KeDisplaySplashScreen()>
c0007b6a:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6f:	05 ff 0f 00 00       	add    eax,0xfff
c0007b74:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7c:	e8 af 03 00 00       	call   c0007f30 <Phys::physicalMemorySetup(unsigned int)>
c0007b81:	e8 3f 1c 00 00       	call   c00097c5 <Virt::virtualMemorySetup()>
c0007b86:	58                   	pop    eax
c0007b87:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8b:	53                   	push   ebx
c0007b8c:	e8 07 1f 00 00       	call   c0009a98 <VAS::VAS()>
c0007b91:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b97:	e8 fe 6b 01 00       	call   c001e79a <_init>
c0007b9c:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba3:	e8 0f ff ff ff       	call   c0007ab7 <malloc>
c0007ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bab:	89 c6                	mov    esi,eax
c0007bad:	e8 4e f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bb2:	6a 00                	push   0x0
c0007bb4:	6a 00                	push   0x0
c0007bb6:	6a 00                	push   0x0
c0007bb8:	56                   	push   esi
c0007bb9:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bbf:	e8 02 f6 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bc4:	83 c4 14             	add    esp,0x14
c0007bc7:	53                   	push   ebx
c0007bc8:	e8 95 1f 00 00       	call   c0009b62 <VAS::~VAS()>
c0007bcd:	83 c4 30             	add    esp,0x30
c0007bd0:	5b                   	pop    ebx
c0007bd1:	5e                   	pop    esi
c0007bd2:	5f                   	pop    edi
c0007bd3:	c3                   	ret    

c0007bd4 <Phys::allocateDMA(unsigned long)>:
c0007bd4:	55                   	push   ebp
c0007bd5:	31 ed                	xor    ebp,ebp
c0007bd7:	57                   	push   edi
c0007bd8:	56                   	push   esi
c0007bd9:	31 f6                	xor    esi,esi
c0007bdb:	53                   	push   ebx
c0007bdc:	31 db                	xor    ebx,ebx
c0007bde:	83 ec 1c             	sub    esp,0x1c
c0007be1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be5:	05 ff 0f 00 00       	add    eax,0xfff
c0007bea:	c1 e8 0c             	shr    eax,0xc
c0007bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bf1:	31 c0                	xor    eax,eax
c0007bf3:	eb 1b                	jmp    c0007c10 <Phys::allocateDMA(unsigned long)+0x3c>
c0007bf5:	8d 78 01             	lea    edi,[eax+0x1]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	0f 44 eb             	cmove  ebp,ebx
c0007bfd:	0f 44 f3             	cmove  esi,ebx
c0007c00:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c04:	74 37                	je     c0007c3d <Phys::allocateDMA(unsigned long)+0x69>
c0007c06:	89 f8                	mov    eax,edi
c0007c08:	83 c3 01             	add    ebx,0x1
c0007c0b:	83 fb 0f             	cmp    ebx,0xf
c0007c0e:	7f 13                	jg     c0007c23 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c10:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c17:	74 dc                	je     c0007bf5 <Phys::allocateDMA(unsigned long)+0x21>
c0007c19:	31 c0                	xor    eax,eax
c0007c1b:	83 c3 01             	add    ebx,0x1
c0007c1e:	83 fb 0f             	cmp    ebx,0xf
c0007c21:	7e ed                	jle    c0007c10 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c23:	83 ec 0c             	sub    esp,0xc
c0007c26:	68 28 fb 01 c0       	push   0xc001fb28
c0007c2b:	e8 91 8b 00 00       	call   c00107c1 <KePanic(char const*)>
c0007c30:	83 c4 10             	add    esp,0x10
c0007c33:	31 c0                	xor    eax,eax
c0007c35:	83 c4 1c             	add    esp,0x1c
c0007c38:	5b                   	pop    ebx
c0007c39:	5e                   	pop    esi
c0007c3a:	5f                   	pop    edi
c0007c3b:	5d                   	pop    ebp
c0007c3c:	c3                   	ret    
c0007c3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c41:	89 f2                	mov    edx,esi
c0007c43:	c1 fa 04             	sar    edx,0x4
c0007c46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c4a:	01 f1                	add    ecx,esi
c0007c4c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4f:	83 e9 01             	sub    ecx,0x1
c0007c52:	0f 48 ca             	cmovs  ecx,edx
c0007c55:	c1 f9 04             	sar    ecx,0x4
c0007c58:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c5c:	74 06                	je     c0007c64 <Phys::allocateDMA(unsigned long)+0x90>
c0007c5e:	89 eb                	mov    ebx,ebp
c0007c60:	31 c0                	xor    eax,eax
c0007c62:	eb b7                	jmp    c0007c1b <Phys::allocateDMA(unsigned long)+0x47>
c0007c64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c68:	85 d2                	test   edx,edx
c0007c6a:	74 17                	je     c0007c83 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6c:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c72:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c79:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7c:	83 c2 01             	add    edx,0x1
c0007c7f:	39 d0                	cmp    eax,edx
c0007c81:	75 f6                	jne    c0007c79 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c83:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007c91:	01 c2                	add    edx,eax
c0007c93:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007c99:	85 c9                	test   ecx,ecx
c0007c9b:	74 17                	je     c0007cb4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007c9d:	83 ec 0c             	sub    esp,0xc
c0007ca0:	68 28 fb 01 c0       	push   0xc001fb28
c0007ca5:	e8 17 8b 00 00       	call   c00107c1 <KePanic(char const*)>
c0007caa:	83 c4 10             	add    esp,0x10
c0007cad:	89 f8                	mov    eax,edi
c0007caf:	e9 54 ff ff ff       	jmp    c0007c08 <Phys::allocateDMA(unsigned long)+0x34>
c0007cb4:	c1 e6 0c             	shl    esi,0xc
c0007cb7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cbd:	e9 73 ff ff ff       	jmp    c0007c35 <Phys::allocateDMA(unsigned long)+0x61>

c0007cc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ccc:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cd1:	c1 ea 0c             	shr    edx,0xc
c0007cd4:	29 d0                	sub    eax,edx
c0007cd6:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce4:	c1 e8 0c             	shr    eax,0xc
c0007ce7:	85 d2                	test   edx,edx
c0007ce9:	74 11                	je     c0007cfc <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ceb:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007cf0:	01 c2                	add    edx,eax
c0007cf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf5:	83 c0 01             	add    eax,0x1
c0007cf8:	39 d0                	cmp    eax,edx
c0007cfa:	75 f6                	jne    c0007cf2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cfc:	c3                   	ret    

c0007cfd <Phys::setPageState(unsigned long, bool)>:
c0007cfd:	57                   	push   edi
c0007cfe:	56                   	push   esi
c0007cff:	8b 35 d0 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021dd0
c0007d05:	53                   	push   ebx
c0007d06:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	0f b6 c0             	movzx  eax,al
c0007d1e:	d3 c3                	rol    ebx,cl
c0007d20:	01 d6                	add    esi,edx
c0007d22:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d25:	d3 e0                	shl    eax,cl
c0007d27:	21 fb                	and    ebx,edi
c0007d29:	88 1e                	mov    BYTE PTR [esi],bl
c0007d2b:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c0007d31:	01 da                	add    edx,ebx
c0007d33:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d35:	09 c8                	or     eax,ecx
c0007d37:	88 02                	mov    BYTE PTR [edx],al
c0007d39:	5b                   	pop    ebx
c0007d3a:	5e                   	pop    esi
c0007d3b:	5f                   	pop    edi
c0007d3c:	c3                   	ret    

c0007d3d <Phys::getPageState(unsigned long)>:
c0007d3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d41:	8b 15 d0 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dd0
c0007d47:	89 c8                	mov    eax,ecx
c0007d49:	83 e1 07             	and    ecx,0x7
c0007d4c:	c1 e8 03             	shr    eax,0x3
c0007d4f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d53:	d3 f8                	sar    eax,cl
c0007d55:	83 e0 01             	and    eax,0x1
c0007d58:	c3                   	ret    

c0007d59 <Phys::freePage(unsigned long)>:
c0007d59:	53                   	push   ebx
c0007d5a:	83 ec 08             	sub    esp,0x8
c0007d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d61:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6d:	76 41                	jbe    c0007db0 <Phys::freePage(unsigned long)+0x57>
c0007d6f:	c1 e8 0c             	shr    eax,0xc
c0007d72:	50                   	push   eax
c0007d73:	89 c3                	mov    ebx,eax
c0007d75:	e8 c3 ff ff ff       	call   c0007d3d <Phys::getPageState(unsigned long)>
c0007d7a:	5a                   	pop    edx
c0007d7b:	84 c0                	test   al,al
c0007d7d:	74 20                	je     c0007d9f <Phys::freePage(unsigned long)+0x46>
c0007d7f:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d84:	83 ec 08             	sub    esp,0x8
c0007d87:	6a 00                	push   0x0
c0007d89:	53                   	push   ebx
c0007d8a:	83 e8 01             	sub    eax,0x1
c0007d8d:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d92:	e8 66 ff ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 c4 08             	add    esp,0x8
c0007d9d:	5b                   	pop    ebx
c0007d9e:	c3                   	ret    
c0007d9f:	c7 44 24 10 cd fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbcd
c0007da7:	83 c4 08             	add    esp,0x8
c0007daa:	5b                   	pop    ebx
c0007dab:	e9 11 8a 00 00       	jmp    c00107c1 <KePanic(char const*)>
c0007db0:	68 00 10 00 00       	push   0x1000
c0007db5:	50                   	push   eax
c0007db6:	e8 07 ff ff ff       	call   c0007cc2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dbb:	59                   	pop    ecx
c0007dbc:	5b                   	pop    ebx
c0007dbd:	83 c4 08             	add    esp,0x8
c0007dc0:	5b                   	pop    ebx
c0007dc1:	c3                   	ret    

c0007dc2 <Phys::allocatePage()>:
c0007dc2:	56                   	push   esi
c0007dc3:	53                   	push   ebx
c0007dc4:	83 ec 14             	sub    esp,0x14
c0007dc7:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dcd:	89 f3                	mov    ebx,esi
c0007dcf:	eb 0a                	jmp    c0007ddb <Phys::allocatePage()+0x19>
c0007dd1:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dd7:	39 de                	cmp    esi,ebx
c0007dd9:	74 26                	je     c0007e01 <Phys::allocatePage()+0x3f>
c0007ddb:	53                   	push   ebx
c0007ddc:	e8 5c ff ff ff       	call   c0007d3d <Phys::getPageState(unsigned long)>
c0007de1:	5a                   	pop    edx
c0007de2:	84 c0                	test   al,al
c0007de4:	74 67                	je     c0007e4d <Phys::allocatePage()+0x8b>
c0007de6:	83 c3 01             	add    ebx,0x1
c0007de9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007def:	75 e0                	jne    c0007dd1 <Phys::allocatePage()+0xf>
c0007df1:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dfb:	31 db                	xor    ebx,ebx
c0007dfd:	39 de                	cmp    esi,ebx
c0007dff:	75 da                	jne    c0007ddb <Phys::allocatePage()+0x19>
c0007e01:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e06:	83 ec 0c             	sub    esp,0xc
c0007e09:	83 f0 01             	xor    eax,0x1
c0007e0c:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1f:	50                   	push   eax
c0007e20:	e8 e9 27 00 00       	call   c000a60e <VAS::scanForEviction()>
c0007e25:	83 c4 10             	add    esp,0x10
c0007e28:	85 c0                	test   eax,eax
c0007e2a:	75 48                	jne    c0007e74 <Phys::allocatePage()+0xb2>
c0007e2c:	83 ec 0c             	sub    esp,0xc
c0007e2f:	68 50 fb 01 c0       	push   0xc001fb50
c0007e34:	e8 88 89 00 00       	call   c00107c1 <KePanic(char const*)>
c0007e39:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e3f:	83 c4 10             	add    esp,0x10
c0007e42:	53                   	push   ebx
c0007e43:	e8 f5 fe ff ff       	call   c0007d3d <Phys::getPageState(unsigned long)>
c0007e48:	5a                   	pop    edx
c0007e49:	84 c0                	test   al,al
c0007e4b:	75 99                	jne    c0007de6 <Phys::allocatePage()+0x24>
c0007e4d:	6a 01                	push   0x1
c0007e4f:	53                   	push   ebx
c0007e50:	e8 a8 fe ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0007e55:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e5b:	59                   	pop    ecx
c0007e5c:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e61:	5b                   	pop    ebx
c0007e62:	83 c2 01             	add    edx,0x1
c0007e65:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e6b:	c1 e0 0c             	shl    eax,0xc
c0007e6e:	83 c4 14             	add    esp,0x14
c0007e71:	5b                   	pop    ebx
c0007e72:	5e                   	pop    esi
c0007e73:	c3                   	ret    
c0007e74:	83 ec 08             	sub    esp,0x8
c0007e77:	89 c2                	mov    edx,eax
c0007e79:	6a 01                	push   0x1
c0007e7b:	c1 ea 0c             	shr    edx,0xc
c0007e7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e82:	52                   	push   edx
c0007e83:	e8 75 fe ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0007e88:	83 c4 10             	add    esp,0x10
c0007e8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8f:	eb dd                	jmp    c0007e6e <Phys::allocatePage()+0xac>

c0007e91 <Phys::allocateContiguousPages(int)>:
c0007e91:	57                   	push   edi
c0007e92:	56                   	push   esi
c0007e93:	53                   	push   ebx
c0007e94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e98:	fa                   	cli    
c0007e99:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e9e:	31 db                	xor    ebx,ebx
c0007ea0:	83 c0 01             	add    eax,0x1
c0007ea3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ea8:	85 db                	test   ebx,ebx
c0007eaa:	75 11                	jne    c0007ebd <Phys::allocateContiguousPages(int)+0x2c>
c0007eac:	e8 11 ff ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0007eb1:	83 fe 01             	cmp    esi,0x1
c0007eb4:	89 c7                	mov    edi,eax
c0007eb6:	74 21                	je     c0007ed9 <Phys::allocateContiguousPages(int)+0x48>
c0007eb8:	bb 01 00 00 00       	mov    ebx,0x1
c0007ebd:	e8 00 ff ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0007ec2:	89 da                	mov    edx,ebx
c0007ec4:	c1 e2 0c             	shl    edx,0xc
c0007ec7:	01 fa                	add    edx,edi
c0007ec9:	39 c2                	cmp    edx,eax
c0007ecb:	74 22                	je     c0007eef <Phys::allocateContiguousPages(int)+0x5e>
c0007ecd:	83 fe 01             	cmp    esi,0x1
c0007ed0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed5:	89 c7                	mov    edi,eax
c0007ed7:	75 e4                	jne    c0007ebd <Phys::allocateContiguousPages(int)+0x2c>
c0007ed9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ede:	83 e8 01             	sub    eax,0x1
c0007ee1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ee6:	75 01                	jne    c0007ee9 <Phys::allocateContiguousPages(int)+0x58>
c0007ee8:	fb                   	sti    
c0007ee9:	5b                   	pop    ebx
c0007eea:	89 f8                	mov    eax,edi
c0007eec:	5e                   	pop    esi
c0007eed:	5f                   	pop    edi
c0007eee:	c3                   	ret    
c0007eef:	83 c3 01             	add    ebx,0x1
c0007ef2:	39 f3                	cmp    ebx,esi
c0007ef4:	75 b2                	jne    c0007ea8 <Phys::allocateContiguousPages(int)+0x17>
c0007ef6:	eb e1                	jmp    c0007ed9 <Phys::allocateContiguousPages(int)+0x48>

c0007ef8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef8:	56                   	push   esi
c0007ef9:	53                   	push   ebx
c0007efa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efe:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f04:	73 06                	jae    c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f06:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f10:	c1 eb 0c             	shr    ebx,0xc
c0007f13:	c1 e8 0c             	shr    eax,0xc
c0007f16:	39 d8                	cmp    eax,ebx
c0007f18:	73 13                	jae    c0007f2d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f1a:	6a 00                	push   0x0
c0007f1c:	50                   	push   eax
c0007f1d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f20:	e8 d8 fd ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0007f25:	39 f3                	cmp    ebx,esi
c0007f27:	89 f0                	mov    eax,esi
c0007f29:	5a                   	pop    edx
c0007f2a:	59                   	pop    ecx
c0007f2b:	75 ed                	jne    c0007f1a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2d:	5b                   	pop    ebx
c0007f2e:	5e                   	pop    esi
c0007f2f:	c3                   	ret    

c0007f30 <Phys::physicalMemorySetup(unsigned int)>:
c0007f30:	55                   	push   ebp
c0007f31:	57                   	push   edi
c0007f32:	56                   	push   esi
c0007f33:	53                   	push   ebx
c0007f34:	31 db                	xor    ebx,ebx
c0007f36:	83 ec 40             	sub    esp,0x40
c0007f39:	6a 10                	push   0x10
c0007f3b:	6a 00                	push   0x0
c0007f3d:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f42:	e8 a9 85 ff ff       	call   c00004f0 <memset>
c0007f47:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f50:	05 00 10 00 00       	add    eax,0x1000
c0007f55:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f59:	5a                   	pop    edx
c0007f5a:	59                   	pop    ecx
c0007f5b:	50                   	push   eax
c0007f5c:	68 e3 fb 01 c0       	push   0xc001fbe3
c0007f61:	e8 d7 29 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0007f66:	83 c4 10             	add    esp,0x10
c0007f69:	83 ec 08             	sub    esp,0x8
c0007f6c:	6a 01                	push   0x1
c0007f6e:	53                   	push   ebx
c0007f6f:	83 c3 01             	add    ebx,0x1
c0007f72:	e8 86 fd ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0007f77:	83 c4 10             	add    esp,0x10
c0007f7a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f80:	75 e7                	jne    c0007f69 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f82:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f8d:	85 c0                	test   eax,eax
c0007f8f:	0f 84 43 01 00 00    	je     c00080d8 <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007f95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f9d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fa2:	e9 82 00 00 00       	jmp    c0008029 <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fa7:	ba 00 00 08 00       	mov    edx,0x80000
c0007fac:	89 c1                	mov    ecx,eax
c0007fae:	39 f2                	cmp    edx,esi
c0007fb0:	19 f9                	sbb    ecx,edi
c0007fb2:	0f 82 c0 00 00 00    	jb     c0008078 <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fbc:	89 c5                	mov    ebp,eax
c0007fbe:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fc6:	19 cd                	sbb    ebp,ecx
c0007fc8:	0f 83 af 00 00 00    	jae    c000807d <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fce:	89 d6                	mov    esi,edx
c0007fd0:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fd5:	39 f2                	cmp    edx,esi
c0007fd7:	89 cf                	mov    edi,ecx
c0007fd9:	19 c8                	sbb    eax,ecx
c0007fdb:	73 07                	jae    c0007fe4 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007fdd:	be 00 00 0a 00       	mov    esi,0xa0000
c0007fe2:	31 ff                	xor    edi,edi
c0007fe4:	89 f2                	mov    edx,esi
c0007fe6:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007feb:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007ff1:	89 f9                	mov    ecx,edi
c0007ff3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ff7:	83 d1 ff             	adc    ecx,0xffffffff
c0007ffa:	39 d0                	cmp    eax,edx
c0007ffc:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008000:	b8 00 00 00 00       	mov    eax,0x0
c0008005:	19 c8                	sbb    eax,ecx
c0008007:	0f 82 9d 01 00 00    	jb     c00081aa <Phys::physicalMemorySetup(unsigned int)+0x27a>
c000800d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008011:	83 c3 18             	add    ebx,0x18
c0008014:	83 c6 01             	add    esi,0x1
c0008017:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000801b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000801f:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008023:	0f 84 bf 00 00 00    	je     c00080e8 <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008029:	8b 33                	mov    esi,DWORD PTR [ebx]
c000802b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000802e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008031:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008034:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008038:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000803b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000803f:	01 f0                	add    eax,esi
c0008041:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008045:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008049:	55                   	push   ebp
c000804a:	11 fa                	adc    edx,edi
c000804c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008050:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008058:	50                   	push   eax
c0008059:	56                   	push   esi
c000805a:	68 80 fb 01 c0       	push   0xc001fb80
c000805f:	e8 d9 28 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0008064:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008068:	83 c4 10             	add    esp,0x10
c000806b:	09 f8                	or     eax,edi
c000806d:	75 79                	jne    c00080e8 <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000806f:	83 fd 01             	cmp    ebp,0x1
c0008072:	0f 84 2f ff ff ff    	je     c0007fa7 <Phys::physicalMemorySetup(unsigned int)+0x77>
c0008078:	83 fd 01             	cmp    ebp,0x1
c000807b:	75 90                	jne    c000800d <Phys::physicalMemorySetup(unsigned int)+0xdd>
c000807d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008081:	31 d2                	xor    edx,edx
c0008083:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0008087:	89 c8                	mov    eax,ecx
c0008089:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000808d:	19 d1                	sbb    ecx,edx
c000808f:	0f 82 78 ff ff ff    	jb     c000800d <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008095:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000809a:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000809e:	b9 00 00 00 00       	mov    ecx,0x0
c00080a3:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080a7:	0f 83 60 ff ff ff    	jae    c000800d <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080ad:	39 c6                	cmp    esi,eax
c00080af:	19 d7                	sbb    edi,edx
c00080b1:	0f 83 ff 00 00 00    	jae    c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080bb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080bf:	29 c7                	sub    edi,eax
c00080c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080c5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080c9:	19 d5                	sbb    ebp,edx
c00080cb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080d3:	e9 de 00 00 00       	jmp    c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080d8:	83 ec 0c             	sub    esp,0xc
c00080db:	68 fb fb 01 c0       	push   0xc001fbfb
c00080e0:	e8 dc 86 00 00       	call   c00107c1 <KePanic(char const*)>
c00080e5:	83 c4 10             	add    esp,0x10
c00080e8:	83 ec 08             	sub    esp,0x8
c00080eb:	bb 60 00 00 00       	mov    ebx,0x60
c00080f0:	6a 00                	push   0x0
c00080f2:	6a 06                	push   0x6
c00080f4:	e8 04 fc ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c00080f9:	58                   	pop    eax
c00080fa:	5a                   	pop    edx
c00080fb:	6a 00                	push   0x0
c00080fd:	6a 07                	push   0x7
c00080ff:	e8 f9 fb ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0008104:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000810a:	83 c4 10             	add    esp,0x10
c000810d:	83 c1 02             	add    ecx,0x2
c0008110:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008116:	83 ec 08             	sub    esp,0x8
c0008119:	6a 00                	push   0x0
c000811b:	53                   	push   ebx
c000811c:	83 c3 01             	add    ebx,0x1
c000811f:	e8 d9 fb ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000812d:	75 e7                	jne    c0008116 <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c000812f:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008134:	bb 40 01 00 00       	mov    ebx,0x140
c0008139:	83 c0 20             	add    eax,0x20
c000813c:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008141:	eb 26                	jmp    c0008169 <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008143:	83 ec 08             	sub    esp,0x8
c0008146:	6a 00                	push   0x0
c0008148:	53                   	push   ebx
c0008149:	83 c3 01             	add    ebx,0x1
c000814c:	e8 ac fb ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c0008151:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008156:	83 c4 10             	add    esp,0x10
c0008159:	83 c0 01             	add    eax,0x1
c000815c:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008162:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008167:	74 07                	je     c0008170 <Phys::physicalMemorySetup(unsigned int)+0x240>
c0008169:	3d ff 03 00 00       	cmp    eax,0x3ff
c000816e:	7e d3                	jle    c0008143 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008170:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008175:	3d ff 07 00 00       	cmp    eax,0x7ff
c000817a:	7f 26                	jg     c00081a2 <Phys::physicalMemorySetup(unsigned int)+0x272>
c000817c:	83 ec 08             	sub    esp,0x8
c000817f:	6a 00                	push   0x0
c0008181:	53                   	push   ebx
c0008182:	83 c3 01             	add    ebx,0x1
c0008185:	e8 73 fb ff ff       	call   c0007cfd <Phys::setPageState(unsigned long, bool)>
c000818a:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000818f:	83 c4 10             	add    esp,0x10
c0008192:	83 c0 01             	add    eax,0x1
c0008195:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000819b:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081a0:	75 d3                	jne    c0008175 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081a2:	83 c4 3c             	add    esp,0x3c
c00081a5:	5b                   	pop    ebx
c00081a6:	5e                   	pop    esi
c00081a7:	5f                   	pop    edi
c00081a8:	5d                   	pop    ebp
c00081a9:	c3                   	ret    
c00081aa:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081ae:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081b6:	83 ec 04             	sub    esp,0x4
c00081b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081bd:	56                   	push   esi
c00081be:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081c2:	57                   	push   edi
c00081c3:	68 a4 fb 01 c0       	push   0xc001fba4
c00081c8:	e8 70 27 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00081cd:	5d                   	pop    ebp
c00081ce:	58                   	pop    eax
c00081cf:	56                   	push   esi
c00081d0:	57                   	push   edi
c00081d1:	e8 22 fd ff ff       	call   c0007ef8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081d6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081de:	83 c4 0c             	add    esp,0xc
c00081e1:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081e7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081eb:	01 f0                	add    eax,esi
c00081ed:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00081f9:	52                   	push   edx
c00081fa:	50                   	push   eax
c00081fb:	68 09 fc 01 c0       	push   0xc001fc09
c0008200:	e8 38 27 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	e9 00 fe ff ff       	jmp    c000800d <Phys::physicalMemorySetup(unsigned int)+0xdd>
c000820d:	90                   	nop

c000820e <Pipe::isAtty()>:
c000820e:	31 c0                	xor    eax,eax
c0008210:	c3                   	ret    
c0008211:	90                   	nop

c0008212 <Pipe::~Pipe()>:
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	ba 68 fc 01 c0       	mov    edx,0xc001fc68
c000821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821e:	89 10                	mov    DWORD PTR [eax],edx
c0008220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	50                   	push   eax
c0008228:	e8 5b 11 00 00       	call   c0009388 <UnixFile::~UnixFile()>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	90                   	nop
c0008231:	83 c4 0c             	add    esp,0xc
c0008234:	c3                   	ret    
c0008235:	90                   	nop

c0008236 <Pipe::~Pipe()>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 cd ff ff ff       	call   c0008212 <Pipe::~Pipe()>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 ec 08             	sub    esp,0x8
c000824b:	6a 20                	push   0x20
c000824d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008251:	e8 e9 25 00 00       	call   c000a83f <operator delete(void*, unsigned long)>
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	83 c4 0c             	add    esp,0xc
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <Pipe::write(unsigned long long, void*, int*)>:
c000825e:	55                   	push   ebp
c000825f:	57                   	push   edi
c0008260:	56                   	push   esi
c0008261:	53                   	push   ebx
c0008262:	83 ec 1c             	sub    esp,0x1c
c0008265:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008269:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000826d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008271:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008274:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008278:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000827b:	89 04 24             	mov    DWORD PTR [esp],eax
c000827e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008282:	89 d8                	mov    eax,ebx
c0008284:	89 d6                	mov    esi,edx
c0008286:	89 d7                	mov    edi,edx
c0008288:	c1 ff 1f             	sar    edi,0x1f
c000828b:	03 34 24             	add    esi,DWORD PTR [esp]
c000828e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008292:	c1 f8 1f             	sar    eax,0x1f
c0008295:	39 f3                	cmp    ebx,esi
c0008297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000829b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000829f:	19 f8                	sbb    eax,edi
c00082a1:	b8 01 00 00 00       	mov    eax,0x1
c00082a6:	72 72                	jb     c000831a <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082af:	01 d0                	add    eax,edx
c00082b1:	99                   	cdq    
c00082b2:	f7 fb                	idiv   ebx
c00082b4:	89 d8                	mov    eax,ebx
c00082b6:	29 d0                	sub    eax,edx
c00082b8:	89 d6                	mov    esi,edx
c00082ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082bd:	89 c3                	mov    ebx,eax
c00082bf:	c1 fb 1f             	sar    ebx,0x1f
c00082c2:	39 c2                	cmp    edx,eax
c00082c4:	19 df                	sbb    edi,ebx
c00082c6:	bb 00 00 00 00       	mov    ebx,0x0
c00082cb:	72 04                	jb     c00082d1 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082cd:	89 d3                	mov    ebx,edx
c00082cf:	29 c3                	sub    ebx,eax
c00082d1:	89 d0                	mov    eax,edx
c00082d3:	29 d8                	sub    eax,ebx
c00082d5:	74 0d                	je     c00082e4 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082d7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082da:	89 c1                	mov    ecx,eax
c00082dc:	01 f7                	add    edi,esi
c00082de:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e4:	85 db                	test   ebx,ebx
c00082e6:	74 0d                	je     c00082f5 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082e8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00082ec:	89 d9                	mov    ecx,ebx
c00082ee:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f1:	89 c6                	mov    esi,eax
c00082f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082f8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082fd:	75 10                	jne    c000830f <Pipe::write(unsigned long long, void*, int*)+0xb1>
c00082ff:	83 ec 0c             	sub    esp,0xc
c0008302:	68 25 fc 01 c0       	push   0xc001fc25
c0008307:	e8 b5 84 00 00       	call   c00107c1 <KePanic(char const*)>
c000830c:	83 c4 10             	add    esp,0x10
c000830f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008313:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008316:	89 08                	mov    DWORD PTR [eax],ecx
c0008318:	31 c0                	xor    eax,eax
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	5b                   	pop    ebx
c000831e:	5e                   	pop    esi
c000831f:	5f                   	pop    edi
c0008320:	5d                   	pop    ebp
c0008321:	c3                   	ret    

c0008322 <Pipe::read(unsigned long long, void*, int*)>:
c0008322:	55                   	push   ebp
c0008323:	57                   	push   edi
c0008324:	56                   	push   esi
c0008325:	53                   	push   ebx
c0008326:	83 ec 1c             	sub    esp,0x1c
c0008329:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000832d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008331:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008335:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008338:	89 c8                	mov    eax,ecx
c000833a:	99                   	cdq    
c000833b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000833f:	74 24                	je     c0008365 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008341:	39 f9                	cmp    ecx,edi
c0008343:	89 d1                	mov    ecx,edx
c0008345:	19 f1                	sbb    ecx,esi
c0008347:	73 1c                	jae    c0008365 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008349:	fa                   	cli    
c000834a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008350:	e8 63 cc 00 00       	call   c0014fb8 <schedule()>
c0008355:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000835a:	48                   	dec    eax
c000835b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008360:	75 d3                	jne    c0008335 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008362:	fb                   	sti    
c0008363:	eb d0                	jmp    c0008335 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008365:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008369:	39 f8                	cmp    eax,edi
c000836b:	89 d1                	mov    ecx,edx
c000836d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008371:	19 f1                	sbb    ecx,esi
c0008373:	73 08                	jae    c000837d <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008375:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008379:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000837d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008380:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008383:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0008387:	29 f7                	sub    edi,esi
c0008389:	89 f8                	mov    eax,edi
c000838b:	99                   	cdq    
c000838c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0008390:	89 d0                	mov    eax,edx
c0008392:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008396:	19 c2                	sbb    edx,eax
c0008398:	89 f8                	mov    eax,edi
c000839a:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000839f:	89 ea                	mov    edx,ebp
c00083a1:	29 c2                	sub    edx,eax
c00083a3:	85 c0                	test   eax,eax
c00083a5:	74 0b                	je     c00083b2 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083a7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083aa:	89 c1                	mov    ecx,eax
c00083ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083b2:	85 d2                	test   edx,edx
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083b6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ba:	89 d1                	mov    ecx,edx
c00083bc:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083bf:	89 c7                	mov    edi,eax
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083c6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083c9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083cc:	99                   	cdq    
c00083cd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083d1:	89 f7                	mov    edi,esi
c00083d3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083d7:	c1 ff 1f             	sar    edi,0x1f
c00083da:	57                   	push   edi
c00083db:	56                   	push   esi
c00083dc:	52                   	push   edx
c00083dd:	50                   	push   eax
c00083de:	e8 9d 62 01 00       	call   c001e680 <__umoddi3>
c00083e3:	83 c4 10             	add    esp,0x10
c00083e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083ee:	75 10                	jne    c0008400 <Pipe::read(unsigned long long, void*, int*)+0xde>
c00083f0:	83 ec 0c             	sub    esp,0xc
c00083f3:	68 42 fc 01 c0       	push   0xc001fc42
c00083f8:	e8 c4 83 00 00       	call   c00107c1 <KePanic(char const*)>
c00083fd:	83 c4 10             	add    esp,0x10
c0008400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008408:	89 10                	mov    DWORD PTR [eax],edx
c000840a:	83 c4 1c             	add    esp,0x1c
c000840d:	31 c0                	xor    eax,eax
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	5d                   	pop    ebp
c0008413:	c3                   	ret    

c0008414 <Pipe::Pipe(int)>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000841b:	83 ec 08             	sub    esp,0x8
c000841e:	6a 00                	push   0x0
c0008420:	50                   	push   eax
c0008421:	e8 7c 0d 00 00       	call   c00091a2 <UnixFile::UnixFile(int)>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	ba 68 fc 01 c0       	mov    edx,0xc001fc68
c000842e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000843c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008443:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008455:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008459:	83 ec 0c             	sub    esp,0xc
c000845c:	50                   	push   eax
c000845d:	e8 55 f6 ff ff       	call   c0007ab7 <malloc>
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	89 c2                	mov    edx,eax
c0008467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000846e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008472:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008476:	90                   	nop
c0008477:	83 c4 0c             	add    esp,0xc
c000847a:	c3                   	ret    
c000847b:	90                   	nop

c000847c <VgaText::isAtty()>:
c000847c:	b0 01                	mov    al,0x1
c000847e:	c3                   	ret    
c000847f:	90                   	nop

c0008480 <VgaText::~VgaText()>:
c0008480:	83 ec 0c             	sub    esp,0xc
c0008483:	ba b0 fc 01 c0       	mov    edx,0xc001fcb0
c0008488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848c:	89 10                	mov    DWORD PTR [eax],edx
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	83 ec 0c             	sub    esp,0xc
c0008495:	50                   	push   eax
c0008496:	e8 ed 0e 00 00       	call   c0009388 <UnixFile::~UnixFile()>
c000849b:	83 c4 10             	add    esp,0x10
c000849e:	90                   	nop
c000849f:	83 c4 0c             	add    esp,0xc
c00084a2:	c3                   	ret    
c00084a3:	90                   	nop

c00084a4 <VgaText::~VgaText()>:
c00084a4:	83 ec 0c             	sub    esp,0xc
c00084a7:	83 ec 0c             	sub    esp,0xc
c00084aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ae:	e8 cd ff ff ff       	call   c0008480 <VgaText::~VgaText()>
c00084b3:	83 c4 10             	add    esp,0x10
c00084b6:	83 ec 08             	sub    esp,0x8
c00084b9:	68 84 01 00 00       	push   0x184
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 78 23 00 00       	call   c000a83f <operator delete(void*, unsigned long)>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 c4 0c             	add    esp,0xc
c00084cd:	c3                   	ret    

c00084ce <VgaText::read(unsigned long long, void*, int*)>:
c00084ce:	83 ec 10             	sub    esp,0x10
c00084d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084dd:	e8 a0 47 00 00       	call   c000cc82 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e6:	89 02                	mov    DWORD PTR [edx],eax
c00084e8:	31 c0                	xor    eax,eax
c00084ea:	83 c4 1c             	add    esp,0x1c
c00084ed:	c3                   	ret    

c00084ee <setTerminalScrollLock(bool)>:
c00084ee:	c3                   	ret    

c00084ef <doTerminalCycle()>:
c00084ef:	c3                   	ret    

c00084f0 <addToTerminalCycle(VgaText*)>:
c00084f0:	c3                   	ret    

c00084f1 <scrollTerminalScrollLock(int)>:
c00084f1:	c3                   	ret    

c00084f2 <VgaText::updateTitle()>:
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::load()>:
c00084f4:	c3                   	ret    
c00084f5:	90                   	nop

c00084f6 <VgaText::updateCursor()>:
c00084f6:	83 ec 14             	sub    esp,0x14
c00084f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084fd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008500:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008503:	e8 c8 f7 00 00       	call   c0017cd0 <HalConsoleCursorUpdate(int, int)>
c0008508:	83 c4 1c             	add    esp,0x1c
c000850b:	c3                   	ret    

c000850c <VgaText::doANSI_SGR(int)>:
c000850c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008514:	85 d2                	test   edx,edx
c0008516:	75 0b                	jne    c0008523 <VgaText::doANSI_SGR(int)+0x17>
c0008518:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000851b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008521:	eb 59                	jmp    c000857c <VgaText::doANSI_SGR(int)+0x70>
c0008523:	83 fa 07             	cmp    edx,0x7
c0008526:	75 0b                	jne    c0008533 <VgaText::doANSI_SGR(int)+0x27>
c0008528:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000852b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000852e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008531:	eb 49                	jmp    c000857c <VgaText::doANSI_SGR(int)+0x70>
c0008533:	83 fa 1b             	cmp    edx,0x1b
c0008536:	74 e0                	je     c0008518 <VgaText::doANSI_SGR(int)+0xc>
c0008538:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000853b:	83 f9 07             	cmp    ecx,0x7
c000853e:	77 09                	ja     c0008549 <VgaText::doANSI_SGR(int)+0x3d>
c0008540:	8b 14 8d 00 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde200]
c0008547:	eb 20                	jmp    c0008569 <VgaText::doANSI_SGR(int)+0x5d>
c0008549:	8d 4a d8             	lea    ecx,[edx-0x28]
c000854c:	83 f9 07             	cmp    ecx,0x7
c000854f:	77 09                	ja     c000855a <VgaText::doANSI_SGR(int)+0x4e>
c0008551:	8b 14 8d 00 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde200]
c0008558:	eb 22                	jmp    c000857c <VgaText::doANSI_SGR(int)+0x70>
c000855a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000855d:	83 f9 07             	cmp    ecx,0x7
c0008560:	77 0b                	ja     c000856d <VgaText::doANSI_SGR(int)+0x61>
c0008562:	8b 14 95 b8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde348]
c0008569:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000856c:	c3                   	ret    
c000856d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008570:	83 f9 07             	cmp    ecx,0x7
c0008573:	77 0a                	ja     c000857f <VgaText::doANSI_SGR(int)+0x73>
c0008575:	8b 14 95 90 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde370]
c000857c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000857f:	c3                   	ret    

c0008580 <VgaText::setDefaultBgColour(VgaColour)>:
c0008580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008584:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008588:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000858b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000858e:	c3                   	ret    
c000858f:	90                   	nop

c0008590 <VgaText::setDefaultFgColour(VgaColour)>:
c0008590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008598:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000859b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859e:	c3                   	ret    
c000859f:	90                   	nop

c00085a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085a0:	53                   	push   ebx
c00085a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ad:	51                   	push   ecx
c00085ae:	e8 cd ff ff ff       	call   c0008580 <VgaText::setDefaultBgColour(VgaColour)>
c00085b3:	58                   	pop    eax
c00085b4:	5a                   	pop    edx
c00085b5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085bd:	5b                   	pop    ebx
c00085be:	eb d0                	jmp    c0008590 <VgaText::setDefaultFgColour(VgaColour)>

c00085c0 <VgaText::setTitleTextColour(VgaColour)>:
c00085c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085cb:	c3                   	ret    

c00085cc <VgaText::setTitleColour(VgaColour)>:
c00085cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085d7:	c3                   	ret    

c00085d8 <VgaText::setTitle(char*)>:
c00085d8:	c3                   	ret    
c00085d9:	90                   	nop

c00085da <VgaText::combineColours(unsigned char, unsigned char)>:
c00085da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085de:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e3:	83 e0 0f             	and    eax,0xf
c00085e6:	c1 e2 04             	shl    edx,0x4
c00085e9:	09 d0                	or     eax,edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::scrollScreen()>:
c00085ec:	55                   	push   ebp
c00085ed:	57                   	push   edi
c00085ee:	56                   	push   esi
c00085ef:	be 01 00 00 00       	mov    esi,0x1
c00085f4:	53                   	push   ebx
c00085f5:	83 ec 0c             	sub    esp,0xc
c00085f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085fc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085ff:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008605:	31 ff                	xor    edi,edi
c0008607:	01 e9                	add    ecx,ebp
c0008609:	8a 01                	mov    al,BYTE PTR [ecx]
c000860b:	83 fe 18             	cmp    esi,0x18
c000860e:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008614:	75 20                	jne    c0008636 <VgaText::scrollScreen()+0x4a>
c0008616:	f7 c7 01 00 00 00    	test   edi,0x1
c000861c:	74 15                	je     c0008633 <VgaText::scrollScreen()+0x47>
c000861e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008622:	50                   	push   eax
c0008623:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008627:	50                   	push   eax
c0008628:	e8 ad ff ff ff       	call   c00085da <VgaText::combineColours(unsigned char, unsigned char)>
c000862d:	5a                   	pop    edx
c000862e:	5a                   	pop    edx
c000862f:	88 01                	mov    BYTE PTR [ecx],al
c0008631:	eb 03                	jmp    c0008636 <VgaText::scrollScreen()+0x4a>
c0008633:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008636:	47                   	inc    edi
c0008637:	41                   	inc    ecx
c0008638:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000863e:	75 c9                	jne    c0008609 <VgaText::scrollScreen()+0x1d>
c0008640:	46                   	inc    esi
c0008641:	83 fe 19             	cmp    esi,0x19
c0008644:	75 b9                	jne    c00085ff <VgaText::scrollScreen()+0x13>
c0008646:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000864c:	75 1f                	jne    c000866d <VgaText::scrollScreen()+0x81>
c000864e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008652:	74 05                	je     c0008659 <VgaText::scrollScreen()+0x6d>
c0008654:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008657:	eb 14                	jmp    c000866d <VgaText::scrollScreen()+0x81>
c0008659:	50                   	push   eax
c000865a:	50                   	push   eax
c000865b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865f:	50                   	push   eax
c0008660:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008664:	50                   	push   eax
c0008665:	e8 fa f4 00 00       	call   c0017b64 <HalConsoleScroll(int, int)>
c000866a:	83 c4 10             	add    esp,0x10
c000866d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008671:	83 c4 0c             	add    esp,0xc
c0008674:	5b                   	pop    ebx
c0008675:	5e                   	pop    esi
c0008676:	5f                   	pop    edi
c0008677:	5d                   	pop    ebp
c0008678:	e9 79 fe ff ff       	jmp    c00084f6 <VgaText::updateCursor()>
c000867d:	90                   	nop

c000867e <VgaText::combineCharAndColour(char, unsigned char)>:
c000867e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008683:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008688:	c1 e0 08             	shl    eax,0x8
c000868b:	09 d0                	or     eax,edx
c000868d:	c3                   	ret    

c000868e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000868e:	55                   	push   ebp
c000868f:	57                   	push   edi
c0008690:	56                   	push   esi
c0008691:	53                   	push   ebx
c0008692:	83 ec 1c             	sub    esp,0x1c
c0008695:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008699:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000869d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086ad:	0f b6 c3             	movzx  eax,bl
c00086b0:	50                   	push   eax
c00086b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086b6:	50                   	push   eax
c00086b7:	e8 1e ff ff ff       	call   c00085da <VgaText::combineColours(unsigned char, unsigned char)>
c00086bc:	5a                   	pop    edx
c00086bd:	59                   	pop    ecx
c00086be:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086c3:	0f b6 c0             	movzx  eax,al
c00086c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086ca:	50                   	push   eax
c00086cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086cf:	e8 aa ff ff ff       	call   c000867e <VgaText::combineCharAndColour(char, unsigned char)>
c00086d4:	5a                   	pop    edx
c00086d5:	6b d7 50             	imul   edx,edi,0x50
c00086d8:	59                   	pop    ecx
c00086d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086dc:	01 f2                	add    edx,esi
c00086de:	0f b7 d2             	movzx  edx,dx
c00086e1:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086e5:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086eb:	75 28                	jne    c0008715 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086ed:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086f5:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008701:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008705:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008709:	83 c4 1c             	add    esp,0x1c
c000870c:	5b                   	pop    ebx
c000870d:	5e                   	pop    esi
c000870e:	5f                   	pop    edi
c000870f:	5d                   	pop    ebp
c0008710:	e9 57 f5 00 00       	jmp    c0017c6c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008715:	83 c4 1c             	add    esp,0x1c
c0008718:	5b                   	pop    ebx
c0008719:	5e                   	pop    esi
c000871a:	5f                   	pop    edi
c000871b:	5d                   	pop    ebp
c000871c:	c3                   	ret    
c000871d:	90                   	nop

c000871e <VgaText::getCursorX()>:
c000871e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008722:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008725:	c3                   	ret    

c0008726 <VgaText::getCursorY()>:
c0008726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000872a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000872d:	c3                   	ret    

c000872e <VgaText::setCursor(int, int)>:
c000872e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008736:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008739:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000873d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008740:	e9 b1 fd ff ff       	jmp    c00084f6 <VgaText::updateCursor()>

c0008745 <setActiveTerminal(VgaText*)>:
c0008745:	53                   	push   ebx
c0008746:	83 ec 08             	sub    esp,0x8
c0008749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874d:	85 db                	test   ebx,ebx
c000874f:	75 11                	jne    c0008762 <setActiveTerminal(VgaText*)+0x1d>
c0008751:	c7 44 24 10 7c fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc7c
c0008759:	83 c4 08             	add    esp,0x8
c000875c:	5b                   	pop    ebx
c000875d:	e9 5f 80 00 00       	jmp    c00107c1 <KePanic(char const*)>
c0008762:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <setActiveTerminal(VgaText*)+0x32>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 82 fd ff ff       	call   c00084f6 <VgaText::updateCursor()>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000877b:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008781:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008784:	53                   	push   ebx
c0008785:	e8 a4 ff ff ff       	call   c000872e <VgaText::setCursor(int, int)>
c000878a:	83 c4 18             	add    esp,0x18
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <VgaText::clearScreen()>:
c0008790:	57                   	push   edi
c0008791:	56                   	push   esi
c0008792:	31 f6                	xor    esi,esi
c0008794:	53                   	push   ebx
c0008795:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008799:	52                   	push   edx
c000879a:	6a 00                	push   0x0
c000879c:	6a 00                	push   0x0
c000879e:	53                   	push   ebx
c000879f:	e8 8a ff ff ff       	call   c000872e <VgaText::setCursor(int, int)>
c00087a4:	83 c4 10             	add    esp,0x10
c00087a7:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087ae:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087b1:	7e 20                	jle    c00087d3 <VgaText::clearScreen()+0x43>
c00087b3:	31 ff                	xor    edi,edi
c00087b5:	50                   	push   eax
c00087b6:	50                   	push   eax
c00087b7:	56                   	push   esi
c00087b8:	57                   	push   edi
c00087b9:	47                   	inc    edi
c00087ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087c0:	6a 20                	push   0x20
c00087c2:	53                   	push   ebx
c00087c3:	e8 c6 fe ff ff       	call   c000868e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087c8:	83 c4 20             	add    esp,0x20
c00087cb:	83 ff 50             	cmp    edi,0x50
c00087ce:	75 e5                	jne    c00087b5 <VgaText::clearScreen()+0x25>
c00087d0:	46                   	inc    esi
c00087d1:	eb db                	jmp    c00087ae <VgaText::clearScreen()+0x1e>
c00087d3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087da:	5b                   	pop    ebx
c00087db:	5e                   	pop    esi
c00087dc:	5f                   	pop    edi
c00087dd:	c3                   	ret    

c00087de <VgaText::setCursorX(int)>:
c00087de:	83 ec 10             	sub    esp,0x10
c00087e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087ec:	50                   	push   eax
c00087ed:	e8 3c ff ff ff       	call   c000872e <VgaText::setCursor(int, int)>
c00087f2:	83 c4 1c             	add    esp,0x1c
c00087f5:	c3                   	ret    

c00087f6 <VgaText::setCursorY(int)>:
c00087f6:	83 ec 10             	sub    esp,0x10
c00087f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008801:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008804:	50                   	push   eax
c0008805:	e8 24 ff ff ff       	call   c000872e <VgaText::setCursor(int, int)>
c000880a:	83 c4 1c             	add    esp,0x1c
c000880d:	c3                   	ret    

c000880e <VgaText::incrementCursor(bool)>:
c000880e:	56                   	push   esi
c000880f:	53                   	push   ebx
c0008810:	51                   	push   ecx
c0008811:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008815:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008819:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000881c:	40                   	inc    eax
c000881d:	83 f8 50             	cmp    eax,0x50
c0008820:	74 05                	je     c0008827 <VgaText::incrementCursor(bool)+0x19>
c0008822:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008825:	eb 24                	jmp    c000884b <VgaText::incrementCursor(bool)+0x3d>
c0008827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008831:	8d 50 01             	lea    edx,[eax+0x1]
c0008834:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008837:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000883a:	75 0f                	jne    c000884b <VgaText::incrementCursor(bool)+0x3d>
c000883c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000883f:	83 ec 0c             	sub    esp,0xc
c0008842:	53                   	push   ebx
c0008843:	e8 a4 fd ff ff       	call   c00085ec <VgaText::scrollScreen()>
c0008848:	83 c4 10             	add    esp,0x10
c000884b:	89 f0                	mov    eax,esi
c000884d:	84 c0                	test   al,al
c000884f:	74 0c                	je     c000885d <VgaText::incrementCursor(bool)+0x4f>
c0008851:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008855:	5a                   	pop    edx
c0008856:	5b                   	pop    ebx
c0008857:	5e                   	pop    esi
c0008858:	e9 99 fc ff ff       	jmp    c00084f6 <VgaText::updateCursor()>
c000885d:	58                   	pop    eax
c000885e:	5b                   	pop    ebx
c000885f:	5e                   	pop    esi
c0008860:	c3                   	ret    
c0008861:	90                   	nop

c0008862 <VgaText::decrementCursor(bool)>:
c0008862:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008866:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000886a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000886d:	85 c0                	test   eax,eax
c000886f:	74 04                	je     c0008875 <VgaText::decrementCursor(bool)+0x13>
c0008871:	48                   	dec    eax
c0008872:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008875:	84 c9                	test   cl,cl
c0008877:	74 09                	je     c0008882 <VgaText::decrementCursor(bool)+0x20>
c0008879:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000887d:	e9 74 fc ff ff       	jmp    c00084f6 <VgaText::updateCursor()>
c0008882:	c3                   	ret    
c0008883:	90                   	nop

c0008884 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008884:	53                   	push   ebx
c0008885:	83 ec 08             	sub    esp,0x8
c0008888:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000888d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008891:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008895:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008899:	83 f8 07             	cmp    eax,0x7
c000889c:	75 21                	jne    c00088bf <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c000889e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088a6:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ae:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088b6:	83 c4 08             	add    esp,0x8
c00088b9:	5b                   	pop    ebx
c00088ba:	e9 00 2f 00 00       	jmp    c000b7bf <Krnl::beep(int, int, bool)>
c00088bf:	83 f8 0d             	cmp    eax,0xd
c00088c2:	75 09                	jne    c00088cd <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088cb:	eb 2d                	jmp    c00088fa <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088cd:	83 f8 0a             	cmp    eax,0xa
c00088d0:	75 31                	jne    c0008903 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088dc:	8d 50 01             	lea    edx,[eax+0x1]
c00088df:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088e2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e5:	75 0f                	jne    c00088f6 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088e7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088ea:	83 ec 0c             	sub    esp,0xc
c00088ed:	53                   	push   ebx
c00088ee:	e8 f9 fc ff ff       	call   c00085ec <VgaText::scrollScreen()>
c00088f3:	83 c4 10             	add    esp,0x10
c00088f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088fa:	83 c4 08             	add    esp,0x8
c00088fd:	5b                   	pop    ebx
c00088fe:	e9 f3 fb ff ff       	jmp    c00084f6 <VgaText::updateCursor()>
c0008903:	83 f8 08             	cmp    eax,0x8
c0008906:	75 25                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008908:	50                   	push   eax
c0008909:	50                   	push   eax
c000890a:	6a 01                	push   0x1
c000890c:	53                   	push   ebx
c000890d:	e8 50 ff ff ff       	call   c0008862 <VgaText::decrementCursor(bool)>
c0008912:	5a                   	pop    edx
c0008913:	59                   	pop    ecx
c0008914:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008917:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000891a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008920:	6a 20                	push   0x20
c0008922:	53                   	push   ebx
c0008923:	e8 66 fd ff ff       	call   c000868e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008928:	83 c4 28             	add    esp,0x28
c000892b:	5b                   	pop    ebx
c000892c:	c3                   	ret    
c000892d:	83 ec 08             	sub    esp,0x8
c0008930:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008933:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008936:	51                   	push   ecx
c0008937:	52                   	push   edx
c0008938:	50                   	push   eax
c0008939:	53                   	push   ebx
c000893a:	e8 4f fd ff ff       	call   c000868e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008943:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000894b:	83 c4 28             	add    esp,0x28
c000894e:	5b                   	pop    ebx
c000894f:	e9 ba fe ff ff       	jmp    c000880e <VgaText::incrementCursor(bool)>

c0008954 <VgaText::putchar(char)>:
c0008954:	57                   	push   edi
c0008955:	56                   	push   esi
c0008956:	53                   	push   ebx
c0008957:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000895b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895f:	0f be c2             	movsx  eax,dl
c0008962:	83 f8 5b             	cmp    eax,0x5b
c0008965:	75 18                	jne    c000897f <VgaText::putchar(char)+0x2b>
c0008967:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000896b:	74 20                	je     c000898d <VgaText::putchar(char)+0x39>
c000896d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008973:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000897a:	e9 b8 00 00 00       	jmp    c0008a37 <VgaText::putchar(char)+0xe3>
c000897f:	83 f8 1b             	cmp    eax,0x1b
c0008982:	75 09                	jne    c000898d <VgaText::putchar(char)+0x39>
c0008984:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008988:	e9 aa 00 00 00       	jmp    c0008a37 <VgaText::putchar(char)+0xe3>
c000898d:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0008991:	89 f9                	mov    ecx,edi
c0008993:	84 c9                	test   cl,cl
c0008995:	0f 84 8c 00 00 00    	je     c0008a27 <VgaText::putchar(char)+0xd3>
c000899b:	8d 4a c0             	lea    ecx,[edx-0x40]
c000899e:	80 f9 3e             	cmp    cl,0x3e
c00089a1:	77 70                	ja     c0008a13 <VgaText::putchar(char)+0xbf>
c00089a3:	83 f8 6d             	cmp    eax,0x6d
c00089a6:	75 3f                	jne    c00089e7 <VgaText::putchar(char)+0x93>
c00089a8:	31 f6                	xor    esi,esi
c00089aa:	31 d2                	xor    edx,edx
c00089ac:	31 c0                	xor    eax,eax
c00089ae:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089b1:	7e 25                	jle    c00089d8 <VgaText::putchar(char)+0x84>
c00089b3:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089b8:	83 fa 3b             	cmp    edx,0x3b
c00089bb:	75 0f                	jne    c00089cc <VgaText::putchar(char)+0x78>
c00089bd:	50                   	push   eax
c00089be:	53                   	push   ebx
c00089bf:	e8 48 fb ff ff       	call   c000850c <VgaText::doANSI_SGR(int)>
c00089c4:	31 d2                	xor    edx,edx
c00089c6:	59                   	pop    ecx
c00089c7:	58                   	pop    eax
c00089c8:	31 c0                	xor    eax,eax
c00089ca:	eb 09                	jmp    c00089d5 <VgaText::putchar(char)+0x81>
c00089cc:	6b c0 0a             	imul   eax,eax,0xa
c00089cf:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089d3:	89 fa                	mov    edx,edi
c00089d5:	46                   	inc    esi
c00089d6:	eb d6                	jmp    c00089ae <VgaText::putchar(char)+0x5a>
c00089d8:	84 d2                	test   dl,dl
c00089da:	74 2f                	je     c0008a0b <VgaText::putchar(char)+0xb7>
c00089dc:	50                   	push   eax
c00089dd:	53                   	push   ebx
c00089de:	e8 29 fb ff ff       	call   c000850c <VgaText::doANSI_SGR(int)>
c00089e3:	58                   	pop    eax
c00089e4:	5a                   	pop    edx
c00089e5:	eb 24                	jmp    c0008a0b <VgaText::putchar(char)+0xb7>
c00089e7:	83 f8 4a             	cmp    eax,0x4a
c00089ea:	75 1f                	jne    c0008a0b <VgaText::putchar(char)+0xb7>
c00089ec:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089f0:	75 19                	jne    c0008a0b <VgaText::putchar(char)+0xb7>
c00089f2:	83 ec 0c             	sub    esp,0xc
c00089f5:	53                   	push   ebx
c00089f6:	e8 95 fd ff ff       	call   c0008790 <VgaText::clearScreen()>
c00089fb:	83 c4 0c             	add    esp,0xc
c00089fe:	6a 00                	push   0x0
c0008a00:	6a 00                	push   0x0
c0008a02:	53                   	push   ebx
c0008a03:	e8 26 fd ff ff       	call   c000872e <VgaText::setCursor(int, int)>
c0008a08:	83 c4 10             	add    esp,0x10
c0008a0b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a11:	eb 24                	jmp    c0008a37 <VgaText::putchar(char)+0xe3>
c0008a13:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a16:	83 f8 0e             	cmp    eax,0xe
c0008a19:	7f 1c                	jg     c0008a37 <VgaText::putchar(char)+0xe3>
c0008a1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a1e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a21:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a25:	eb 10                	jmp    c0008a37 <VgaText::putchar(char)+0xe3>
c0008a27:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a2a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a2d:	50                   	push   eax
c0008a2e:	53                   	push   ebx
c0008a2f:	e8 50 fe ff ff       	call   c0008884 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	5b                   	pop    ebx
c0008a38:	5e                   	pop    esi
c0008a39:	5f                   	pop    edi
c0008a3a:	c3                   	ret    
c0008a3b:	90                   	nop

c0008a3c <VgaText::putx(unsigned int)>:
c0008a3c:	57                   	push   edi
c0008a3d:	b9 11 00 00 00       	mov    ecx,0x11
c0008a42:	56                   	push   esi
c0008a43:	be 8a fc 01 c0       	mov    esi,0xc001fc8a
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 20             	sub    esp,0x20
c0008a4c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a50:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a54:	fc                   	cld    
c0008a55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a57:	be 08 00 00 00       	mov    esi,0x8
c0008a5c:	50                   	push   eax
c0008a5d:	50                   	push   eax
c0008a5e:	89 d8                	mov    eax,ebx
c0008a60:	c1 e8 1c             	shr    eax,0x1c
c0008a63:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a68:	c1 e3 04             	shl    ebx,0x4
c0008a6b:	50                   	push   eax
c0008a6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a70:	e8 df fe ff ff       	call   c0008954 <VgaText::putchar(char)>
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	4e                   	dec    esi
c0008a79:	75 e1                	jne    c0008a5c <VgaText::putx(unsigned int)+0x20>
c0008a7b:	83 c4 20             	add    esp,0x20
c0008a7e:	5b                   	pop    ebx
c0008a7f:	5e                   	pop    esi
c0008a80:	5f                   	pop    edi
c0008a81:	c3                   	ret    

c0008a82 <VgaText::puts(char const*)>:
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 08             	sub    esp,0x8
c0008a86:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a8d:	85 c0                	test   eax,eax
c0008a8f:	74 12                	je     c0008aa3 <VgaText::puts(char const*)+0x21>
c0008a91:	51                   	push   ecx
c0008a92:	43                   	inc    ebx
c0008a93:	51                   	push   ecx
c0008a94:	50                   	push   eax
c0008a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a99:	e8 b6 fe ff ff       	call   c0008954 <VgaText::putchar(char)>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	eb e7                	jmp    c0008a8a <VgaText::puts(char const*)+0x8>
c0008aa3:	83 c4 08             	add    esp,0x8
c0008aa6:	5b                   	pop    ebx
c0008aa7:	c3                   	ret    

c0008aa8 <VgaText::write(unsigned long long, void*, int*)>:
c0008aa8:	55                   	push   ebp
c0008aa9:	57                   	push   edi
c0008aaa:	56                   	push   esi
c0008aab:	53                   	push   ebx
c0008aac:	83 ec 0c             	sub    esp,0xc
c0008aaf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ab3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ab7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008abb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ac2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ac5:	39 eb                	cmp    ebx,ebp
c0008ac7:	74 13                	je     c0008adc <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ac9:	50                   	push   eax
c0008aca:	43                   	inc    ebx
c0008acb:	50                   	push   eax
c0008acc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ad0:	50                   	push   eax
c0008ad1:	56                   	push   esi
c0008ad2:	e8 7d fe ff ff       	call   c0008954 <VgaText::putchar(char)>
c0008ad7:	83 c4 10             	add    esp,0x10
c0008ada:	eb e9                	jmp    c0008ac5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008adc:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008ae3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ae7:	89 38                	mov    DWORD PTR [eax],edi
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	31 c0                	xor    eax,eax
c0008aee:	5b                   	pop    ebx
c0008aef:	5e                   	pop    esi
c0008af0:	5f                   	pop    edi
c0008af1:	5d                   	pop    ebp
c0008af2:	c3                   	ret    
c0008af3:	90                   	nop

c0008af4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008af4:	55                   	push   ebp
c0008af5:	57                   	push   edi
c0008af6:	56                   	push   esi
c0008af7:	53                   	push   ebx
c0008af8:	83 ec 0c             	sub    esp,0xc
c0008afb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008aff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b04:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b0b:	50                   	push   eax
c0008b0c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b11:	50                   	push   eax
c0008b12:	e8 c3 fa ff ff       	call   c00085da <VgaText::combineColours(unsigned char, unsigned char)>
c0008b17:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b1b:	5a                   	pop    edx
c0008b1c:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b1f:	59                   	pop    ecx
c0008b20:	0f b6 f8             	movzx  edi,al
c0008b23:	0f b7 db             	movzx  ebx,bx
c0008b26:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b2a:	01 db                	add    ebx,ebx
c0008b2c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b2f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b32:	85 c0                	test   eax,eax
c0008b34:	0f 84 ef 00 00 00    	je     c0008c29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b3a:	83 f8 0d             	cmp    eax,0xd
c0008b3d:	75 0c                	jne    c0008b4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b3f:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b46:	e9 d8 00 00 00       	jmp    c0008c23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b4b:	83 f8 0a             	cmp    eax,0xa
c0008b4e:	75 44                	jne    c0008b94 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b50:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b57:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b5d:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b60:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b63:	75 0f                	jne    c0008b74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b65:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	55                   	push   ebp
c0008b6c:	e8 7b fa ff ff       	call   c00085ec <VgaText::scrollScreen()>
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	83 ec 0c             	sub    esp,0xc
c0008b77:	55                   	push   ebp
c0008b78:	e8 79 f9 ff ff       	call   c00084f6 <VgaText::updateCursor()>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b84:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b87:	0f b7 db             	movzx  ebx,bx
c0008b8a:	01 db                	add    ebx,ebx
c0008b8c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b8f:	e9 8f 00 00 00       	jmp    c0008c23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b94:	83 f8 08             	cmp    eax,0x8
c0008b97:	75 34                	jne    c0008bcd <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008b99:	51                   	push   ecx
c0008b9a:	51                   	push   ecx
c0008b9b:	6a 01                	push   0x1
c0008b9d:	55                   	push   ebp
c0008b9e:	e8 bf fc ff ff       	call   c0008862 <VgaText::decrementCursor(bool)>
c0008ba3:	5b                   	pop    ebx
c0008ba4:	58                   	pop    eax
c0008ba5:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008ba8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bab:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bae:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bb1:	6a 20                	push   0x20
c0008bb3:	55                   	push   ebp
c0008bb4:	e8 d5 fa ff ff       	call   c000868e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bb9:	83 c4 20             	add    esp,0x20
c0008bbc:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bc0:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bc3:	0f b7 db             	movzx  ebx,bx
c0008bc6:	01 db                	add    ebx,ebx
c0008bc8:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bcb:	eb 56                	jmp    c0008c23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bcd:	52                   	push   edx
c0008bce:	52                   	push   edx
c0008bcf:	57                   	push   edi
c0008bd0:	50                   	push   eax
c0008bd1:	e8 a8 fa ff ff       	call   c000867e <VgaText::combineCharAndColour(char, unsigned char)>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bdc:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008be2:	75 1d                	jne    c0008c01 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008be4:	83 ec 0c             	sub    esp,0xc
c0008be7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bea:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bed:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bf1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bf5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008bf8:	50                   	push   eax
c0008bf9:	e8 6e f0 00 00       	call   c0017c6c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008bfe:	83 c4 20             	add    esp,0x20
c0008c01:	50                   	push   eax
c0008c02:	83 c3 02             	add    ebx,0x2
c0008c05:	50                   	push   eax
c0008c06:	6a 00                	push   0x0
c0008c08:	55                   	push   ebp
c0008c09:	e8 00 fc ff ff       	call   c000880e <VgaText::incrementCursor(bool)>
c0008c0e:	83 c4 10             	add    esp,0x10
c0008c11:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c15:	75 0c                	jne    c0008c23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c17:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c1b:	0f b7 db             	movzx  ebx,bx
c0008c1e:	01 db                	add    ebx,ebx
c0008c20:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c23:	46                   	inc    esi
c0008c24:	e9 06 ff ff ff       	jmp    c0008b2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c29:	83 ec 0c             	sub    esp,0xc
c0008c2c:	55                   	push   ebp
c0008c2d:	e8 c4 f8 ff ff       	call   c00084f6 <VgaText::updateCursor()>
c0008c32:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c39:	83 c4 1c             	add    esp,0x1c
c0008c3c:	5b                   	pop    ebx
c0008c3d:	5e                   	pop    esi
c0008c3e:	5f                   	pop    edi
c0008c3f:	5d                   	pop    ebp
c0008c40:	c3                   	ret    
c0008c41:	90                   	nop

c0008c42 <VgaText::VgaText(char const*)>:
c0008c42:	56                   	push   esi
c0008c43:	53                   	push   ebx
c0008c44:	83 ec 04             	sub    esp,0x4
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	83 ec 08             	sub    esp,0x8
c0008c4e:	6a 00                	push   0x0
c0008c50:	50                   	push   eax
c0008c51:	e8 4c 05 00 00       	call   c00091a2 <UnixFile::UnixFile(int)>
c0008c56:	83 c4 10             	add    esp,0x10
c0008c59:	ba b0 fc 01 c0       	mov    edx,0xc001fcb0
c0008c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c62:	89 10                	mov    DWORD PTR [eax],edx
c0008c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c68:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c73:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c99:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cba:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cc1:	83 ec 0c             	sub    esp,0xc
c0008cc4:	6a 01                	push   0x1
c0008cc6:	e8 26 09 00 00       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c0008ccb:	83 c4 10             	add    esp,0x10
c0008cce:	89 c2                	mov    edx,eax
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cd7:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008ce4:	89 c6                	mov    esi,eax
c0008ce6:	e8 d7 f0 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0008ceb:	68 05 0c 00 00       	push   0xc05
c0008cf0:	56                   	push   esi
c0008cf1:	50                   	push   eax
c0008cf2:	53                   	push   ebx
c0008cf3:	e8 d8 0f 00 00       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008cf8:	83 c4 10             	add    esp,0x10
c0008cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d02:	83 ec 04             	sub    esp,0x4
c0008d05:	68 a0 0f 00 00       	push   0xfa0
c0008d0a:	6a 00                	push   0x0
c0008d0c:	50                   	push   eax
c0008d0d:	e8 de 77 ff ff       	call   c00004f0 <memset>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	83 ec 04             	sub    esp,0x4
c0008d18:	6a 00                	push   0x0
c0008d1a:	6a 07                	push   0x7
c0008d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d20:	e8 7b f8 ff ff       	call   c00085a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d25:	83 c4 10             	add    esp,0x10
c0008d28:	83 ec 04             	sub    esp,0x4
c0008d2b:	6a 00                	push   0x0
c0008d2d:	6a 00                	push   0x0
c0008d2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d33:	e8 f6 f9 ff ff       	call   c000872e <VgaText::setCursor(int, int)>
c0008d38:	83 c4 10             	add    esp,0x10
c0008d3b:	83 ec 0c             	sub    esp,0xc
c0008d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d42:	e8 49 fa ff ff       	call   c0008790 <VgaText::clearScreen()>
c0008d47:	83 c4 10             	add    esp,0x10
c0008d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d4e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d56:	05 82 00 00 00       	add    eax,0x82
c0008d5b:	83 ec 04             	sub    esp,0x4
c0008d5e:	68 80 00 00 00       	push   0x80
c0008d63:	6a 00                	push   0x0
c0008d65:	50                   	push   eax
c0008d66:	e8 85 77 ff ff       	call   c00004f0 <memset>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	05 02 01 00 00       	add    eax,0x102
c0008d77:	83 ec 04             	sub    esp,0x4
c0008d7a:	68 80 00 00 00       	push   0x80
c0008d7f:	6a 00                	push   0x0
c0008d81:	50                   	push   eax
c0008d82:	e8 69 77 ff ff       	call   c00004f0 <memset>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	90                   	nop
c0008d8b:	83 c4 04             	add    esp,0x4
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    
c0008d91:	90                   	nop

c0008d92 <VgaText::receiveKey(unsigned char)>:
c0008d92:	55                   	push   ebp
c0008d93:	57                   	push   edi
c0008d94:	56                   	push   esi
c0008d95:	53                   	push   ebx
c0008d96:	83 ec 2c             	sub    esp,0x2c
c0008d99:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008d9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008da1:	89 fd                	mov    ebp,edi
c0008da3:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008da9:	0f 84 48 01 00 00    	je     c0008ef7 <VgaText::receiveKey(unsigned char)+0x165>
c0008daf:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008db5:	83 fd 08             	cmp    ebp,0x8
c0008db8:	75 6a                	jne    c0008e24 <VgaText::receiveKey(unsigned char)+0x92>
c0008dba:	83 ec 0c             	sub    esp,0xc
c0008dbd:	56                   	push   esi
c0008dbe:	e8 bd 77 ff ff       	call   c0000580 <strlen>
c0008dc3:	83 c4 10             	add    esp,0x10
c0008dc6:	85 c0                	test   eax,eax
c0008dc8:	0f 84 ef 00 00 00    	je     c0008ebd <VgaText::receiveKey(unsigned char)+0x12b>
c0008dce:	50                   	push   eax
c0008dcf:	50                   	push   eax
c0008dd0:	6a 08                	push   0x8
c0008dd2:	53                   	push   ebx
c0008dd3:	e8 7c fb ff ff       	call   c0008954 <VgaText::putchar(char)>
c0008dd8:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ddb:	e8 a0 77 ff ff       	call   c0000580 <strlen>
c0008de0:	83 c4 10             	add    esp,0x10
c0008de3:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008deb:	83 fa 1f             	cmp    edx,0x1f
c0008dee:	89 d0                	mov    eax,edx
c0008df0:	7f 1c                	jg     c0008e0e <VgaText::receiveKey(unsigned char)+0x7c>
c0008df2:	83 e8 08             	sub    eax,0x8
c0008df5:	3c 02                	cmp    al,0x2
c0008df7:	76 15                	jbe    c0008e0e <VgaText::receiveKey(unsigned char)+0x7c>
c0008df9:	83 fa 0d             	cmp    edx,0xd
c0008dfc:	74 10                	je     c0008e0e <VgaText::receiveKey(unsigned char)+0x7c>
c0008dfe:	57                   	push   edi
c0008dff:	57                   	push   edi
c0008e00:	68 9b fc 01 c0       	push   0xc001fc9b
c0008e05:	53                   	push   ebx
c0008e06:	e8 77 fc ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0008e0b:	83 c4 10             	add    esp,0x10
c0008e0e:	83 ec 0c             	sub    esp,0xc
c0008e11:	56                   	push   esi
c0008e12:	e8 69 77 ff ff       	call   c0000580 <strlen>
c0008e17:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e1f:	e9 96 00 00 00       	jmp    c0008eba <VgaText::receiveKey(unsigned char)+0x128>
c0008e24:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e2a:	83 ec 0c             	sub    esp,0xc
c0008e2d:	50                   	push   eax
c0008e2e:	e8 4d 77 ff ff       	call   c0000580 <strlen>
c0008e33:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e3a:	e8 41 77 ff ff       	call   c0000580 <strlen>
c0008e3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e4a:	3d 80 00 00 00       	cmp    eax,0x80
c0008e4f:	0f 87 a2 00 00 00    	ja     c0008ef7 <VgaText::receiveKey(unsigned char)+0x165>
c0008e55:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e58:	3c 1e                	cmp    al,0x1e
c0008e5a:	77 35                	ja     c0008e91 <VgaText::receiveKey(unsigned char)+0xff>
c0008e5c:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e5f:	3c 01                	cmp    al,0x1
c0008e61:	76 2e                	jbe    c0008e91 <VgaText::receiveKey(unsigned char)+0xff>
c0008e63:	83 fd 0d             	cmp    ebp,0xd
c0008e66:	74 29                	je     c0008e91 <VgaText::receiveKey(unsigned char)+0xff>
c0008e68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e6b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e6e:	68 a1 fc 01 c0       	push   0xc001fca1
c0008e73:	53                   	push   ebx
c0008e74:	e8 7b fc ff ff       	call   c0008af4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e79:	8d 47 40             	lea    eax,[edi+0x40]
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	0f b6 c0             	movzx  eax,al
c0008e82:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e85:	50                   	push   eax
c0008e86:	53                   	push   ebx
c0008e87:	e8 f8 f9 ff ff       	call   c0008884 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e8c:	83 c4 20             	add    esp,0x20
c0008e8f:	eb 11                	jmp    c0008ea2 <VgaText::receiveKey(unsigned char)+0x110>
c0008e91:	51                   	push   ecx
c0008e92:	89 f8                	mov    eax,edi
c0008e94:	51                   	push   ecx
c0008e95:	0f be c0             	movsx  eax,al
c0008e98:	50                   	push   eax
c0008e99:	53                   	push   ebx
c0008e9a:	e8 b5 fa ff ff       	call   c0008954 <VgaText::putchar(char)>
c0008e9f:	83 c4 10             	add    esp,0x10
c0008ea2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ea7:	89 f8                	mov    eax,edi
c0008ea9:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ead:	52                   	push   edx
c0008eae:	52                   	push   edx
c0008eaf:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eb3:	50                   	push   eax
c0008eb4:	56                   	push   esi
c0008eb5:	e8 b6 79 ff ff       	call   c0000870 <strcat>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ec4:	75 0f                	jne    c0008ed5 <VgaText::receiveKey(unsigned char)+0x143>
c0008ec6:	83 fd 1c             	cmp    ebp,0x1c
c0008ec9:	77 2c                	ja     c0008ef7 <VgaText::receiveKey(unsigned char)+0x165>
c0008ecb:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ed0:	0f a3 e8             	bt     eax,ebp
c0008ed3:	73 22                	jae    c0008ef7 <VgaText::receiveKey(unsigned char)+0x165>
c0008ed5:	50                   	push   eax
c0008ed6:	81 c3 02 01 00 00    	add    ebx,0x102
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	53                   	push   ebx
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 0c             	add    esp,0xc
c0008ee7:	68 80 00 00 00       	push   0x80
c0008eec:	6a 00                	push   0x0
c0008eee:	56                   	push   esi
c0008eef:	e8 fc 75 ff ff       	call   c00004f0 <memset>
c0008ef4:	83 c4 10             	add    esp,0x10
c0008ef7:	83 c4 2c             	add    esp,0x2c
c0008efa:	5b                   	pop    ebx
c0008efb:	5e                   	pop    esi
c0008efc:	5f                   	pop    edi
c0008efd:	5d                   	pop    ebp
c0008efe:	c3                   	ret    
c0008eff:	90                   	nop

c0008f00 <VgaText::doUpdate()>:
c0008f00:	c3                   	ret    

c0008f01 <newTerminal(char*)>:
c0008f01:	83 ec 28             	sub    esp,0x28
c0008f04:	68 84 01 00 00       	push   0x184
c0008f09:	e8 a9 eb ff ff       	call   c0007ab7 <malloc>
c0008f0e:	5a                   	pop    edx
c0008f0f:	59                   	pop    ecx
c0008f10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f14:	50                   	push   eax
c0008f15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f19:	e8 24 fd ff ff       	call   c0008c42 <VgaText::VgaText(char const*)>
c0008f1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f22:	83 c4 2c             	add    esp,0x2c
c0008f25:	c3                   	ret    
c0008f26:	66 90                	xchg   ax,ax

c0008f28 <TSS::TSS()>:
c0008f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f33:	90                   	nop
c0008f34:	c3                   	ret    
c0008f35:	90                   	nop
c0008f36:	66 90                	xchg   ax,ax

c0008f38 <TSS::setESP(unsigned long)>:
c0008f38:	55                   	push   ebp
c0008f39:	89 e5                	mov    ebp,esp
c0008f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f41:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f47:	90                   	nop
c0008f48:	5d                   	pop    ebp
c0008f49:	c3                   	ret    
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::flush()>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	83 ec 10             	sub    esp,0x10
c0008f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f55:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f57:	83 c8 03             	or     eax,0x3
c0008f5a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f5e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f62:	66 89 d0             	mov    ax,dx
c0008f65:	0f 00 d8             	ltr    ax
c0008f68:	90                   	nop
c0008f69:	c9                   	leave  
c0008f6a:	c3                   	ret    
c0008f6b:	90                   	nop

c0008f6c <TSS::setup(unsigned long, unsigned long)>:
c0008f6c:	55                   	push   ebp
c0008f6d:	89 e5                	mov    ebp,esp
c0008f6f:	83 ec 18             	sub    esp,0x18
c0008f72:	83 ec 0c             	sub    esp,0xc
c0008f75:	6a 68                	push   0x68
c0008f77:	e8 3b eb ff ff       	call   c0007ab7 <malloc>
c0008f7c:	83 c4 10             	add    esp,0x10
c0008f7f:	89 c2                	mov    edx,eax
c0008f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f8d:	83 ec 04             	sub    esp,0x4
c0008f90:	6a 68                	push   0x68
c0008f92:	6a 00                	push   0x0
c0008f94:	50                   	push   eax
c0008f95:	e8 56 75 ff ff       	call   c00004f0 <memset>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008faf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008feb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009003:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009012:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000901e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009027:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000902e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009031:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009034:	0f 20 da             	mov    edx,cr3
c0009037:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000903d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009043:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009046:	83 ec 08             	sub    esp,0x8
c0009049:	50                   	push   eax
c000904a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000904d:	50                   	push   eax
c000904e:	e8 d5 e2 ff ff       	call   c0007328 <GDTEntry::setBase(unsigned int)>
c0009053:	83 c4 10             	add    esp,0x10
c0009056:	83 ec 08             	sub    esp,0x8
c0009059:	6a 68                	push   0x68
c000905b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000905e:	50                   	push   eax
c000905f:	e8 e0 e2 ff ff       	call   c0007344 <GDTEntry::setLimit(unsigned int)>
c0009064:	83 c4 10             	add    esp,0x10
c0009067:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000906e:	83 e0 0f             	and    eax,0xf
c0009071:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009074:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009077:	83 c8 40             	or     eax,0x40
c000907a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000907d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009082:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009088:	05 78 01 00 00       	add    eax,0x178
c000908d:	83 ec 04             	sub    esp,0x4
c0009090:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009093:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009096:	50                   	push   eax
c0009097:	e8 dc e2 ff ff       	call   c0007378 <GDT::addEntry(GDTEntry)>
c000909c:	83 c4 10             	add    esp,0x10
c000909f:	89 c2                	mov    edx,eax
c00090a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a4:	89 10                	mov    DWORD PTR [eax],edx
c00090a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b1:	05 78 01 00 00       	add    eax,0x178
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	50                   	push   eax
c00090ba:	e8 e3 e2 ff ff       	call   c00073a2 <GDT::flush()>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090c7:	c9                   	leave  
c00090c8:	c3                   	ret    
c00090c9:	90                   	nop

c00090ca <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090da:	75 08                	jne    c00090e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e2:	eb 38                	jmp    c000911c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090e9:	75 17                	jne    c0009102 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00090fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090ff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009102:	89 c1                	mov    ecx,eax
c0009104:	83 e1 fd             	and    ecx,0xfffffffd
c0009107:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000910d:	74 cd                	je     c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000910f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009114:	83 e0 ef             	and    eax,0xffffffef
c0009117:	83 f8 08             	cmp    eax,0x8
c000911a:	76 c0                	jbe    c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000911c:	31 c0                	xor    eax,eax
c000911e:	c3                   	ret    
c000911f:	90                   	nop

c0009120 <ReservedFilename::isAtty()>:
c0009120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009124:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009127:	31 c0                	xor    eax,eax
c0009129:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000912f:	74 09                	je     c000913a <ReservedFilename::isAtty()+0x1a>
c0009131:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009137:	0f 94 c0             	sete   al
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009144:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009150:	75 08                	jne    c000915a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009152:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009158:	eb 3d                	jmp    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000915f:	75 17                	jne    c0009178 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009166:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009169:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000916f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009175:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009178:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000917d:	75 04                	jne    c0009183 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000917f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009181:	eb 14                	jmp    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009183:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009188:	74 c8                	je     c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000918f:	83 e0 ef             	and    eax,0xffffffef
c0009192:	83 f8 08             	cmp    eax,0x8
c0009195:	76 bb                	jbe    c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009197:	31 c0                	xor    eax,eax
c0009199:	c3                   	ret    

c000919a <UnixFile::getFileDescriptor()>:
c000919a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000919e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a1:	c3                   	ret    

c00091a2 <UnixFile::UnixFile(int)>:
c00091a2:	53                   	push   ebx
c00091a3:	83 ec 28             	sub    esp,0x28
c00091a6:	ba 78 fd 01 c0       	mov    edx,0xc001fd78
c00091ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091af:	89 10                	mov    DWORD PTR [eax],edx
c00091b1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091b9:	0f 8f 90 01 00 00    	jg     c000934f <UnixFile::UnixFile(int)+0x1ad>
c00091bf:	a1 40 1e 02 c0       	mov    eax,ds:0xc0021e40
c00091c4:	8d 50 01             	lea    edx,[eax+0x1]
c00091c7:	89 15 40 1e 02 c0    	mov    DWORD PTR ds:0xc0021e40,edx
c00091cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d4:	83 ec 08             	sub    esp,0x8
c00091d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091db:	68 98 4f 02 c0       	push   0xc0024f98
c00091e0:	e8 83 56 01 00       	call   c001e868 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e5:	83 c4 10             	add    esp,0x10
c00091e8:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c00091ed:	83 f0 01             	xor    eax,0x1
c00091f0:	0f b6 c0             	movzx  eax,al
c00091f3:	85 c0                	test   eax,eax
c00091f5:	0f 84 55 01 00 00    	je     c0009350 <UnixFile::UnixFile(int)+0x1ae>
c00091fb:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009202:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920a:	83 ec 0c             	sub    esp,0xc
c000920d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009211:	e8 a1 e8 ff ff       	call   c0007ab7 <malloc>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	89 c3                	mov    ebx,eax
c000921b:	83 ec 08             	sub    esp,0x8
c000921e:	68 03 ff ff 0f       	push   0xfffff03
c0009223:	53                   	push   ebx
c0009224:	e8 2d 01 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009229:	83 c4 10             	add    esp,0x10
c000922c:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009232:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923a:	83 ec 0c             	sub    esp,0xc
c000923d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009241:	e8 71 e8 ff ff       	call   c0007ab7 <malloc>
c0009246:	83 c4 10             	add    esp,0x10
c0009249:	89 c3                	mov    ebx,eax
c000924b:	83 ec 08             	sub    esp,0x8
c000924e:	68 01 ff ff 0f       	push   0xfffff01
c0009253:	53                   	push   ebx
c0009254:	e8 fd 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009259:	83 c4 10             	add    esp,0x10
c000925c:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009262:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926a:	83 ec 0c             	sub    esp,0xc
c000926d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009271:	e8 41 e8 ff ff       	call   c0007ab7 <malloc>
c0009276:	83 c4 10             	add    esp,0x10
c0009279:	89 c3                	mov    ebx,eax
c000927b:	83 ec 08             	sub    esp,0x8
c000927e:	68 00 ff ff 0f       	push   0xfffff00
c0009283:	53                   	push   ebx
c0009284:	e8 cd 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009289:	83 c4 10             	add    esp,0x10
c000928c:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c0009292:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929a:	83 ec 0c             	sub    esp,0xc
c000929d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a1:	e8 11 e8 ff ff       	call   c0007ab7 <malloc>
c00092a6:	83 c4 10             	add    esp,0x10
c00092a9:	89 c3                	mov    ebx,eax
c00092ab:	83 ec 08             	sub    esp,0x8
c00092ae:	68 02 ff ff 0f       	push   0xfffff02
c00092b3:	53                   	push   ebx
c00092b4:	e8 9d 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c00092b9:	83 c4 10             	add    esp,0x10
c00092bc:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092c2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ca:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092cf:	7f 7f                	jg     c0009350 <UnixFile::UnixFile(int)+0x1ae>
c00092d1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092d9:	83 ec 0c             	sub    esp,0xc
c00092dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e0:	e8 d2 e7 ff ff       	call   c0007ab7 <malloc>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 c3                	mov    ebx,eax
c00092ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092ee:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f3:	83 ec 08             	sub    esp,0x8
c00092f6:	50                   	push   eax
c00092f7:	53                   	push   ebx
c00092f8:	e8 59 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c00092fd:	83 c4 10             	add    esp,0x10
c0009300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009304:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000930b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009313:	83 ec 0c             	sub    esp,0xc
c0009316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931a:	e8 98 e7 ff ff       	call   c0007ab7 <malloc>
c000931f:	83 c4 10             	add    esp,0x10
c0009322:	89 c3                	mov    ebx,eax
c0009324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009328:	05 20 ff ff 0f       	add    eax,0xfffff20
c000932d:	83 ec 08             	sub    esp,0x8
c0009330:	50                   	push   eax
c0009331:	53                   	push   ebx
c0009332:	e8 1f 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009337:	83 c4 10             	add    esp,0x10
c000933a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933e:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009345:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934a:	e9 7b ff ff ff       	jmp    c00092ca <UnixFile::UnixFile(int)+0x128>
c000934f:	90                   	nop
c0009350:	83 c4 28             	add    esp,0x28
c0009353:	5b                   	pop    ebx
c0009354:	c3                   	ret    
c0009355:	90                   	nop

c0009356 <ReservedFilename::ReservedFilename(int)>:
c0009356:	83 ec 0c             	sub    esp,0xc
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	83 ec 08             	sub    esp,0x8
c0009360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009364:	50                   	push   eax
c0009365:	e8 38 fe ff ff       	call   c00091a2 <UnixFile::UnixFile(int)>
c000936a:	83 c4 10             	add    esp,0x10
c000936d:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c0009372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009376:	89 10                	mov    DWORD PTR [eax],edx
c0009378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009380:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009383:	90                   	nop
c0009384:	83 c4 0c             	add    esp,0xc
c0009387:	c3                   	ret    

c0009388 <UnixFile::~UnixFile()>:
c0009388:	83 ec 1c             	sub    esp,0x1c
c000938b:	ba 78 fd 01 c0       	mov    edx,0xc001fd78
c0009390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009394:	89 10                	mov    DWORD PTR [eax],edx
c0009396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a2:	7f 76                	jg     c000941a <UnixFile::~UnixFile()+0x92>
c00093a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093ac:	83 ec 0c             	sub    esp,0xc
c00093af:	68 98 4f 02 c0       	push   0xc0024f98
c00093b4:	e8 83 55 01 00       	call   c001e93c <LinkedList<UnixFile>::getFirstElement()>
c00093b9:	83 c4 10             	add    esp,0x10
c00093bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 77 55 01 00       	call   c001e944 <LinkedList<UnixFile>::removeFirst()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093d8:	74 43                	je     c000941d <UnixFile::~UnixFile()+0x95>
c00093da:	83 ec 08             	sub    esp,0x8
c00093dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e1:	68 98 4f 02 c0       	push   0xc0024f98
c00093e6:	e8 7d 54 01 00       	call   c001e868 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f2:	8d 50 01             	lea    edx,[eax+0x1]
c00093f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093f9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00093fe:	0f 94 c0             	sete   al
c0009401:	0f b6 c0             	movzx  eax,al
c0009404:	85 c0                	test   eax,eax
c0009406:	74 a4                	je     c00093ac <UnixFile::~UnixFile()+0x24>
c0009408:	83 ec 0c             	sub    esp,0xc
c000940b:	68 50 fd 01 c0       	push   0xc001fd50
c0009410:	e8 ac 73 00 00       	call   c00107c1 <KePanic(char const*)>
c0009415:	83 c4 10             	add    esp,0x10
c0009418:	eb 92                	jmp    c00093ac <UnixFile::~UnixFile()+0x24>
c000941a:	90                   	nop
c000941b:	eb 01                	jmp    c000941e <UnixFile::~UnixFile()+0x96>
c000941d:	90                   	nop
c000941e:	90                   	nop
c000941f:	83 c4 1c             	add    esp,0x1c
c0009422:	c3                   	ret    
c0009423:	90                   	nop

c0009424 <UnixFile::~UnixFile()>:
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	83 ec 0c             	sub    esp,0xc
c000942a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000942e:	e8 55 ff ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c0009433:	83 c4 10             	add    esp,0x10
c0009436:	83 ec 08             	sub    esp,0x8
c0009439:	6a 0c                	push   0xc
c000943b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943f:	e8 fb 13 00 00       	call   c000a83f <operator delete(void*, unsigned long)>
c0009444:	83 c4 10             	add    esp,0x10
c0009447:	83 c4 0c             	add    esp,0xc
c000944a:	c3                   	ret    
c000944b:	90                   	nop

c000944c <ReservedFilename::~ReservedFilename()>:
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c0009454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009458:	89 10                	mov    DWORD PTR [eax],edx
c000945a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945e:	83 ec 0c             	sub    esp,0xc
c0009461:	50                   	push   eax
c0009462:	e8 21 ff ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	90                   	nop
c000946b:	83 c4 0c             	add    esp,0xc
c000946e:	c3                   	ret    
c000946f:	90                   	nop

c0009470 <ReservedFilename::~ReservedFilename()>:
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	83 ec 0c             	sub    esp,0xc
c0009476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947a:	e8 cd ff ff ff       	call   c000944c <ReservedFilename::~ReservedFilename()>
c000947f:	83 c4 10             	add    esp,0x10
c0009482:	83 ec 08             	sub    esp,0x8
c0009485:	6a 0c                	push   0xc
c0009487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948b:	e8 af 13 00 00       	call   c000a83f <operator delete(void*, unsigned long)>
c0009490:	83 c4 10             	add    esp,0x10
c0009493:	83 c4 0c             	add    esp,0xc
c0009496:	c3                   	ret    

c0009497 <getFromFileDescriptor(int)>:
c0009497:	53                   	push   ebx
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000949f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094ab:	7f 2c                	jg     c00094d9 <getFromFileDescriptor(int)+0x42>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 98 4f 02 c0       	push   0xc0024f98
c00094b5:	e8 82 54 01 00       	call   c001e93c <LinkedList<UnixFile>::getFirstElement()>
c00094ba:	83 c4 10             	add    esp,0x10
c00094bd:	85 c0                	test   eax,eax
c00094bf:	75 04                	jne    c00094c5 <getFromFileDescriptor(int)+0x2e>
c00094c1:	31 c0                	xor    eax,eax
c00094c3:	eb 6e                	jmp    c0009533 <getFromFileDescriptor(int)+0x9c>
c00094c5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094c8:	74 69                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	50                   	push   eax
c00094cd:	68 98 4f 02 c0       	push   0xc0024f98
c00094d2:	e8 0f 55 01 00       	call   c001e9e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094d7:	eb e1                	jmp    c00094ba <getFromFileDescriptor(int)+0x23>
c00094d9:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094df:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094e4:	74 4d                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c00094e6:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094ec:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c00094f1:	74 40                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c00094f3:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094f9:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c00094fe:	74 33                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c0009500:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009506:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000950b:	74 26                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c000950d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009513:	83 f8 08             	cmp    eax,0x8
c0009516:	77 09                	ja     c0009521 <getFromFileDescriptor(int)+0x8a>
c0009518:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000951f:	eb 12                	jmp    c0009533 <getFromFileDescriptor(int)+0x9c>
c0009521:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009527:	83 fb 08             	cmp    ebx,0x8
c000952a:	77 95                	ja     c00094c1 <getFromFileDescriptor(int)+0x2a>
c000952c:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009533:	83 c4 08             	add    esp,0x8
c0009536:	5b                   	pop    ebx
c0009537:	c3                   	ret    

c0009538 <__static_initialization_and_destruction_0(int, int)>:
c0009538:	83 ec 0c             	sub    esp,0xc
c000953b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009540:	75 34                	jne    c0009576 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009542:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954a:	75 2a                	jne    c0009576 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	68 98 4f 02 c0       	push   0xc0024f98
c0009554:	e8 cd 52 01 00       	call   c001e826 <LinkedList<UnixFile>::LinkedList()>
c0009559:	83 c4 10             	add    esp,0x10
c000955c:	83 ec 04             	sub    esp,0x4
c000955f:	68 c8 1d 02 c0       	push   0xc0021dc8
c0009564:	68 98 4f 02 c0       	push   0xc0024f98
c0009569:	68 24 e8 01 c0       	push   0xc001e824
c000956e:	e8 7c 12 00 00       	call   c000a7ef <__cxa_atexit>
c0009573:	83 c4 10             	add    esp,0x10
c0009576:	90                   	nop
c0009577:	83 c4 0c             	add    esp,0xc
c000957a:	c3                   	ret    

c000957b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957b:	83 ec 0c             	sub    esp,0xc
c000957e:	83 ec 08             	sub    esp,0x8
c0009581:	68 ff ff 00 00       	push   0xffff
c0009586:	6a 01                	push   0x1
c0009588:	e8 ab ff ff ff       	call   c0009538 <__static_initialization_and_destruction_0(int, int)>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	83 c4 0c             	add    esp,0xc
c0009593:	c3                   	ret    

c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009594:	53                   	push   ebx
c0009595:	8b 15 48 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e48
c000959b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000959f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095a9:	89 d8                	mov    eax,ebx
c00095ab:	d1 e8                	shr    eax,1
c00095ad:	01 d0                	add    eax,edx
c00095af:	80 e3 01             	and    bl,0x1
c00095b2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b4:	75 09                	jne    c00095bf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095b6:	83 e2 f0             	and    edx,0xfffffff0
c00095b9:	09 ca                	or     edx,ecx
c00095bb:	88 10                	mov    BYTE PTR [eax],dl
c00095bd:	5b                   	pop    ebx
c00095be:	c3                   	ret    
c00095bf:	0f b6 c9             	movzx  ecx,cl
c00095c2:	83 e2 0f             	and    edx,0xf
c00095c5:	c1 e1 04             	shl    ecx,0x4
c00095c8:	09 ca                	or     edx,ecx
c00095ca:	88 10                	mov    BYTE PTR [eax],dl
c00095cc:	5b                   	pop    ebx
c00095cd:	c3                   	ret    

c00095ce <Virt::getPageState(unsigned long)>:
c00095ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d2:	8b 0d 48 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e48
c00095d8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095de:	89 d0                	mov    eax,edx
c00095e0:	d1 e8                	shr    eax,1
c00095e2:	80 e2 01             	and    dl,0x1
c00095e5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095e8:	74 03                	je     c00095ed <Virt::getPageState(unsigned long)+0x1f>
c00095ea:	c1 e8 04             	shr    eax,0x4
c00095ed:	83 e0 0f             	and    eax,0xf
c00095f0:	c3                   	ret    

c00095f1 <Virt::allocateKernelVirtualPages(int)>:
c00095f1:	55                   	push   ebp
c00095f2:	57                   	push   edi
c00095f3:	56                   	push   esi
c00095f4:	31 f6                	xor    esi,esi
c00095f6:	53                   	push   ebx
c00095f7:	31 db                	xor    ebx,ebx
c00095f9:	83 ec 1c             	sub    esp,0x1c
c00095fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009601:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009605:	8b 2d 44 1e 02 c0    	mov    ebp,DWORD PTR ds:0xc0021e44
c000960b:	55                   	push   ebp
c000960c:	e8 bd ff ff ff       	call   c00095ce <Virt::getPageState(unsigned long)>
c0009611:	5a                   	pop    edx
c0009612:	84 c0                	test   al,al
c0009614:	75 3d                	jne    c0009653 <Virt::allocateKernelVirtualPages(int)+0x62>
c0009616:	85 db                	test   ebx,ebx
c0009618:	0f 44 f5             	cmove  esi,ebp
c000961b:	83 c3 01             	add    ebx,0x1
c000961e:	39 fb                	cmp    ebx,edi
c0009620:	74 5e                	je     c0009680 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009622:	83 c5 01             	add    ebp,0x1
c0009625:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962b:	76 33                	jbe    c0009660 <Virt::allocateKernelVirtualPages(int)+0x6f>
c000962d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009632:	c7 05 44 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e44,0xc8000
c000963c:	75 2a                	jne    c0009668 <Virt::allocateKernelVirtualPages(int)+0x77>
c000963e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009643:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009648:	55                   	push   ebp
c0009649:	e8 80 ff ff ff       	call   c00095ce <Virt::getPageState(unsigned long)>
c000964e:	5a                   	pop    edx
c000964f:	84 c0                	test   al,al
c0009651:	74 c3                	je     c0009616 <Virt::allocateKernelVirtualPages(int)+0x25>
c0009653:	83 c5 01             	add    ebp,0x1
c0009656:	31 db                	xor    ebx,ebx
c0009658:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000965e:	77 cd                	ja     c000962d <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009660:	89 2d 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,ebp
c0009666:	eb a3                	jmp    c000960b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009668:	83 ec 0c             	sub    esp,0xc
c000966b:	68 a8 fd 01 c0       	push   0xc001fda8
c0009670:	e8 4c 71 00 00       	call   c00107c1 <KePanic(char const*)>
c0009675:	8b 2d 44 1e 02 c0    	mov    ebp,DWORD PTR ds:0xc0021e44
c000967b:	83 c4 10             	add    esp,0x10
c000967e:	eb 8b                	jmp    c000960b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009680:	89 35 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,esi
c0009686:	83 fb 01             	cmp    ebx,0x1
c0009689:	74 63                	je     c00096ee <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968b:	85 ff                	test   edi,edi
c000968d:	74 41                	je     c00096d0 <Virt::allocateKernelVirtualPages(int)+0xdf>
c000968f:	89 f0                	mov    eax,esi
c0009691:	31 db                	xor    ebx,ebx
c0009693:	8d 6f ff             	lea    ebp,[edi-0x1]
c0009696:	eb 16                	jmp    c00096ae <Virt::allocateKernelVirtualPages(int)+0xbd>
c0009698:	6a 01                	push   0x1
c000969a:	83 c3 01             	add    ebx,0x1
c000969d:	50                   	push   eax
c000969e:	e8 f1 fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	39 fb                	cmp    ebx,edi
c00096a5:	58                   	pop    eax
c00096a6:	5a                   	pop    edx
c00096a7:	74 27                	je     c00096d0 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a9:	a1 44 1e 02 c0       	mov    eax,ds:0xc0021e44
c00096ae:	8d 50 01             	lea    edx,[eax+0x1]
c00096b1:	85 db                	test   ebx,ebx
c00096b3:	89 15 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,edx
c00096b9:	74 22                	je     c00096dd <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bb:	39 dd                	cmp    ebp,ebx
c00096bd:	75 d9                	jne    c0009698 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096bf:	6a 03                	push   0x3
c00096c1:	83 c3 01             	add    ebx,0x1
c00096c4:	50                   	push   eax
c00096c5:	e8 ca fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ca:	39 fb                	cmp    ebx,edi
c00096cc:	59                   	pop    ecx
c00096cd:	58                   	pop    eax
c00096ce:	75 d9                	jne    c00096a9 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d0:	83 c4 1c             	add    esp,0x1c
c00096d3:	89 f0                	mov    eax,esi
c00096d5:	5b                   	pop    ebx
c00096d6:	c1 e0 0c             	shl    eax,0xc
c00096d9:	5e                   	pop    esi
c00096da:	5f                   	pop    edi
c00096db:	5d                   	pop    ebp
c00096dc:	c3                   	ret    
c00096dd:	6a 02                	push   0x2
c00096df:	bb 01 00 00 00       	mov    ebx,0x1
c00096e4:	50                   	push   eax
c00096e5:	e8 aa fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ea:	58                   	pop    eax
c00096eb:	5a                   	pop    edx
c00096ec:	eb bb                	jmp    c00096a9 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096ee:	6a 04                	push   0x4
c00096f0:	56                   	push   esi
c00096f1:	8d 46 01             	lea    eax,[esi+0x1]
c00096f4:	a3 44 1e 02 c0       	mov    ds:0xc0021e44,eax
c00096f9:	e8 96 fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	89 f0                	mov    eax,esi
c0009700:	59                   	pop    ecx
c0009701:	c1 e0 0c             	shl    eax,0xc
c0009704:	5b                   	pop    ebx
c0009705:	83 c4 1c             	add    esp,0x1c
c0009708:	5b                   	pop    ebx
c0009709:	5e                   	pop    esi
c000970a:	5f                   	pop    edi
c000970b:	5d                   	pop    ebp
c000970c:	c3                   	ret    

c000970d <Virt::freeSwapfilePage(unsigned long)>:
c000970d:	53                   	push   ebx
c000970e:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009714:	b8 01 00 00 00       	mov    eax,0x1
c0009719:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000971d:	d3 e0                	shl    eax,cl
c000971f:	89 cb                	mov    ebx,ecx
c0009721:	c1 eb 05             	shr    ebx,0x5
c0009724:	f7 d0                	not    eax
c0009726:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009729:	21 c1                	and    ecx,eax
c000972b:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c000972e:	5b                   	pop    ebx
c000972f:	c3                   	ret    

c0009730 <Virt::swapIDToSector(unsigned long)>:
c0009730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009734:	8b 15 4c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e4c
c000973a:	8b 0d 54 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e54
c0009740:	0f af c2             	imul   eax,edx
c0009743:	01 c8                	add    eax,ecx
c0009745:	c3                   	ret    

c0009746 <Virt::allocateSwapfilePage()>:
c0009746:	55                   	push   ebp
c0009747:	31 d2                	xor    edx,edx
c0009749:	57                   	push   edi
c000974a:	56                   	push   esi
c000974b:	53                   	push   ebx
c000974c:	83 ec 0c             	sub    esp,0xc
c000974f:	8b 1d 50 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e50
c0009755:	8b 0d 4c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e4c
c000975b:	89 d8                	mov    eax,ebx
c000975d:	f7 f1                	div    ecx
c000975f:	39 cb                	cmp    ebx,ecx
c0009761:	72 2f                	jb     c0009792 <Virt::allocateSwapfilePage()+0x4c>
c0009763:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009769:	8b 16                	mov    edx,DWORD PTR [esi]
c000976b:	f6 c2 01             	test   dl,0x1
c000976e:	74 3e                	je     c00097ae <Virt::allocateSwapfilePage()+0x68>
c0009770:	31 c9                	xor    ecx,ecx
c0009772:	bf 01 00 00 00       	mov    edi,0x1
c0009777:	eb 12                	jmp    c000978b <Virt::allocateSwapfilePage()+0x45>
c0009779:	89 ca                	mov    edx,ecx
c000977b:	89 fd                	mov    ebp,edi
c000977d:	c1 ea 05             	shr    edx,0x5
c0009780:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009783:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009785:	d3 e5                	shl    ebp,cl
c0009787:	85 ea                	test   edx,ebp
c0009789:	74 2c                	je     c00097b7 <Virt::allocateSwapfilePage()+0x71>
c000978b:	83 c1 01             	add    ecx,0x1
c000978e:	39 c8                	cmp    eax,ecx
c0009790:	77 e7                	ja     c0009779 <Virt::allocateSwapfilePage()+0x33>
c0009792:	83 ec 0c             	sub    esp,0xc
c0009795:	68 0f ff 01 c0       	push   0xc001ff0f
c000979a:	e8 22 70 00 00       	call   c00107c1 <KePanic(char const*)>
c000979f:	83 c4 10             	add    esp,0x10
c00097a2:	31 c9                	xor    ecx,ecx
c00097a4:	83 c4 0c             	add    esp,0xc
c00097a7:	89 c8                	mov    eax,ecx
c00097a9:	5b                   	pop    ebx
c00097aa:	5e                   	pop    esi
c00097ab:	5f                   	pop    edi
c00097ac:	5d                   	pop    ebp
c00097ad:	c3                   	ret    
c00097ae:	89 f3                	mov    ebx,esi
c00097b0:	bd 01 00 00 00       	mov    ebp,0x1
c00097b5:	31 c9                	xor    ecx,ecx
c00097b7:	09 ea                	or     edx,ebp
c00097b9:	89 c8                	mov    eax,ecx
c00097bb:	89 13                	mov    DWORD PTR [ebx],edx
c00097bd:	83 c4 0c             	add    esp,0xc
c00097c0:	5b                   	pop    ebx
c00097c1:	5e                   	pop    esi
c00097c2:	5f                   	pop    edi
c00097c3:	5d                   	pop    ebp
c00097c4:	c3                   	ret    

c00097c5 <Virt::virtualMemorySetup()>:
c00097c5:	53                   	push   ebx
c00097c6:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cb:	6a 0f                	push   0xf
c00097cd:	53                   	push   ebx
c00097ce:	83 c3 01             	add    ebx,0x1
c00097d1:	e8 be fd ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097d6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097dc:	58                   	pop    eax
c00097dd:	5a                   	pop    edx
c00097de:	75 eb                	jne    c00097cb <Virt::virtualMemorySetup()+0x6>
c00097e0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e5:	6a 00                	push   0x0
c00097e7:	53                   	push   ebx
c00097e8:	83 c3 01             	add    ebx,0x1
c00097eb:	e8 a4 fd ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f6:	59                   	pop    ecx
c00097f7:	58                   	pop    eax
c00097f8:	75 eb                	jne    c00097e5 <Virt::virtualMemorySetup()+0x20>
c00097fa:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00097ff:	6a 0f                	push   0xf
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 8a fd ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009810:	58                   	pop    eax
c0009811:	5a                   	pop    edx
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x3a>
c0009814:	5b                   	pop    ebx
c0009815:	c3                   	ret    

c0009816 <Virt::setupPageSwapping(int)>:
c0009816:	53                   	push   ebx
c0009817:	83 ec 0c             	sub    esp,0xc
c000981a:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c000981f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009823:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009829:	8b 10                	mov    edx,DWORD PTR [eax]
c000982b:	53                   	push   ebx
c000982c:	68 26 ff 01 c0       	push   0xc001ff26
c0009831:	50                   	push   eax
c0009832:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009835:	c1 e3 0b             	shl    ebx,0xb
c0009838:	89 1d 50 1e 02 c0    	mov    DWORD PTR ds:0xc0021e50,ebx
c000983e:	c1 eb 08             	shr    ebx,0x8
c0009841:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009844:	c6 05 58 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e58,0x43
c000984b:	c7 05 4c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e4c,0x8
c0009855:	a3 54 1e 02 c0       	mov    ds:0xc0021e54,eax
c000985a:	e8 58 e2 ff ff       	call   c0007ab7 <malloc>
c000985f:	31 d2                	xor    edx,edx
c0009861:	83 c4 0c             	add    esp,0xc
c0009864:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009869:	89 c1                	mov    ecx,eax
c000986b:	a1 50 1e 02 c0       	mov    eax,ds:0xc0021e50
c0009870:	f7 35 4c 1e 02 c0    	div    DWORD PTR ds:0xc0021e4c
c0009876:	c1 e8 05             	shr    eax,0x5
c0009879:	50                   	push   eax
c000987a:	6a 00                	push   0x0
c000987c:	51                   	push   ecx
c000987d:	e8 6e 6c ff ff       	call   c00004f0 <memset>
c0009882:	83 c4 18             	add    esp,0x18
c0009885:	5b                   	pop    ebx
c0009886:	c3                   	ret    
c0009887:	90                   	nop

c0009888 <VAS::VAS(VAS*)>:
c0009888:	83 ec 0c             	sub    esp,0xc
c000988b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000989a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a1:	83 ec 0c             	sub    esp,0xc
c00098a4:	68 c8 fd 01 c0       	push   0xc001fdc8
c00098a9:	e8 13 6f 00 00       	call   c00107c1 <KePanic(char const*)>
c00098ae:	83 c4 10             	add    esp,0x10
c00098b1:	90                   	nop
c00098b2:	83 c4 0c             	add    esp,0xc
c00098b5:	c3                   	ret    

c00098b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ba:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098bf:	89 c2                	mov    edx,eax
c00098c1:	c1 ea 16             	shr    edx,0x16
c00098c4:	c1 e8 0a             	shr    eax,0xa
c00098c7:	83 f9 01             	cmp    ecx,0x1
c00098ca:	19 c9                	sbb    ecx,ecx
c00098cc:	25 fc 0f 00 00       	and    eax,0xffc
c00098d1:	c1 e2 0c             	shl    edx,0xc
c00098d4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098da:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e1:	01 d0                	add    eax,edx
c00098e3:	c3                   	ret    

c00098e4 <VAS::getPageTableEntry(unsigned long)>:
c00098e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098e8:	89 ca                	mov    edx,ecx
c00098ea:	c1 ea 16             	shr    edx,0x16
c00098ed:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f3:	c1 e9 0a             	shr    ecx,0xa
c00098f6:	c1 e0 0c             	shl    eax,0xc
c00098f9:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00098ff:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009902:	c3                   	ret    

c0009903 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009903:	55                   	push   ebp
c0009904:	57                   	push   edi
c0009905:	bf 01 00 00 00       	mov    edi,0x1
c000990a:	56                   	push   esi
c000990b:	53                   	push   ebx
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009913:	c1 ee 0c             	shr    esi,0xc
c0009916:	eb 3a                	jmp    c0009952 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c0009918:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000991d:	83 ec 08             	sub    esp,0x8
c0009920:	55                   	push   ebp
c0009921:	50                   	push   eax
c0009922:	e8 bd ff ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009927:	83 c4 10             	add    esp,0x10
c000992a:	8b 00                	mov    eax,DWORD PTR [eax]
c000992c:	f6 c4 04             	test   ah,0x4
c000992f:	75 5a                	jne    c000998b <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009931:	83 fb 04             	cmp    ebx,0x4
c0009934:	74 6b                	je     c00099a1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009936:	83 fb 02             	cmp    ebx,0x2
c0009939:	74 7f                	je     c00099ba <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000993b:	83 fb 03             	cmp    ebx,0x3
c000993e:	0f 84 a3 00 00 00    	je     c00099e7 <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009944:	83 fb 01             	cmp    ebx,0x1
c0009947:	0f 84 87 00 00 00    	je     c00099d4 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c000994d:	83 c6 01             	add    esi,0x1
c0009950:	31 ff                	xor    edi,edi
c0009952:	56                   	push   esi
c0009953:	89 f5                	mov    ebp,esi
c0009955:	e8 74 fc ff ff       	call   c00095ce <Virt::getPageState(unsigned long)>
c000995a:	c1 e5 0c             	shl    ebp,0xc
c000995d:	5a                   	pop    edx
c000995e:	0f b6 d8             	movzx  ebx,al
c0009961:	85 db                	test   ebx,ebx
c0009963:	75 b3                	jne    c0009918 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009965:	83 ec 0c             	sub    esp,0xc
c0009968:	68 3d ff 01 c0       	push   0xc001ff3d
c000996d:	e8 4f 6e 00 00       	call   c00107c1 <KePanic(char const*)>
c0009972:	5a                   	pop    edx
c0009973:	59                   	pop    ecx
c0009974:	55                   	push   ebp
c0009975:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000997b:	55                   	push   ebp
c000997c:	e8 63 ff ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009981:	83 c4 10             	add    esp,0x10
c0009984:	8b 00                	mov    eax,DWORD PTR [eax]
c0009986:	f6 c4 04             	test   ah,0x4
c0009989:	74 c2                	je     c000994d <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000998b:	83 ec 0c             	sub    esp,0xc
c000998e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009993:	50                   	push   eax
c0009994:	e8 c0 e3 ff ff       	call   c0007d59 <Phys::freePage(unsigned long)>
c0009999:	83 c4 10             	add    esp,0x10
c000999c:	83 fb 04             	cmp    ebx,0x4
c000999f:	75 95                	jne    c0009936 <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099a1:	83 e7 01             	and    edi,0x1
c00099a4:	75 46                	jne    c00099ec <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099a6:	c7 44 24 20 ec fd 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fdec
c00099ae:	83 c4 0c             	add    esp,0xc
c00099b1:	5b                   	pop    ebx
c00099b2:	5e                   	pop    esi
c00099b3:	5f                   	pop    edi
c00099b4:	5d                   	pop    ebp
c00099b5:	e9 07 6e 00 00       	jmp    c00107c1 <KePanic(char const*)>
c00099ba:	83 e7 01             	and    edi,0x1
c00099bd:	75 15                	jne    c00099d4 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099bf:	83 ec 0c             	sub    esp,0xc
c00099c2:	68 59 ff 01 c0       	push   0xc001ff59
c00099c7:	e8 f5 6d 00 00       	call   c00107c1 <KePanic(char const*)>
c00099cc:	83 c4 10             	add    esp,0x10
c00099cf:	e9 79 ff ff ff       	jmp    c000994d <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099d4:	83 ec 08             	sub    esp,0x8
c00099d7:	6a 00                	push   0x0
c00099d9:	56                   	push   esi
c00099da:	e8 b5 fb ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099df:	83 c4 10             	add    esp,0x10
c00099e2:	e9 66 ff ff ff       	jmp    c000994d <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e7:	83 e7 01             	and    edi,0x1
c00099ea:	75 16                	jne    c0009a02 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c00099ec:	83 ec 08             	sub    esp,0x8
c00099ef:	6a 00                	push   0x0
c00099f1:	56                   	push   esi
c00099f2:	e8 9d fb ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f7:	83 c4 10             	add    esp,0x10
c00099fa:	83 c4 0c             	add    esp,0xc
c00099fd:	5b                   	pop    ebx
c00099fe:	5e                   	pop    esi
c00099ff:	5f                   	pop    edi
c0009a00:	5d                   	pop    ebp
c0009a01:	c3                   	ret    
c0009a02:	c7 44 24 20 75 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ff75
c0009a0a:	83 c4 0c             	add    esp,0xc
c0009a0d:	5b                   	pop    ebx
c0009a0e:	5e                   	pop    esi
c0009a0f:	5f                   	pop    edi
c0009a10:	5d                   	pop    ebp
c0009a11:	e9 ab 6d 00 00       	jmp    c00107c1 <KePanic(char const*)>

c0009a16 <VAS::freeAllocatedPages(unsigned long)>:
c0009a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a1e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a22:	74 09                	je     c0009a2d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a24:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a28:	e9 d6 fe ff ff       	jmp    c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a2d:	c7 44 24 04 10 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe10
c0009a35:	e9 03 0f 00 00       	jmp    c000a93d <Dbg::kprintf(char const*, ...)>

c0009a3a <VAS::virtualToPhysical(unsigned long)>:
c0009a3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3e:	50                   	push   eax
c0009a3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a43:	52                   	push   edx
c0009a44:	e8 9b fe ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009a49:	59                   	pop    ecx
c0009a4a:	5a                   	pop    edx
c0009a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a52:	c3                   	ret    
c0009a53:	90                   	nop

c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a54:	55                   	push   ebp
c0009a55:	57                   	push   edi
c0009a56:	56                   	push   esi
c0009a57:	53                   	push   ebx
c0009a58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a60:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a64:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a68:	89 c3                	mov    ebx,eax
c0009a6a:	c1 e3 0c             	shl    ebx,0xc
c0009a6d:	01 f3                	add    ebx,esi
c0009a6f:	85 c0                	test   eax,eax
c0009a71:	7e 1f                	jle    c0009a92 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a73:	56                   	push   esi
c0009a74:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a7a:	55                   	push   ebp
c0009a7b:	e8 64 fe ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009a80:	5a                   	pop    edx
c0009a81:	59                   	pop    ecx
c0009a82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a88:	21 f9                	and    ecx,edi
c0009a8a:	09 d1                	or     ecx,edx
c0009a8c:	39 f3                	cmp    ebx,esi
c0009a8e:	89 08                	mov    DWORD PTR [eax],ecx
c0009a90:	75 e1                	jne    c0009a73 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009a92:	5b                   	pop    ebx
c0009a93:	5e                   	pop    esi
c0009a94:	5f                   	pop    edi
c0009a95:	5d                   	pop    ebp
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <VAS::VAS()>:
c0009a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aa7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab2:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009abf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ad1:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009ad6:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009adb:	29 c2                	sub    edx,eax
c0009add:	89 d0                	mov    eax,edx
c0009adf:	05 ff 0f 00 00       	add    eax,0xfff
c0009ae4:	c1 e8 0c             	shr    eax,0xc
c0009ae7:	89 c2                	mov    edx,eax
c0009ae9:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aee:	6a 04                	push   0x4
c0009af0:	6a ff                	push   0xffffffff
c0009af2:	52                   	push   edx
c0009af3:	50                   	push   eax
c0009af4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009af8:	e8 57 ff ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c0009afd:	83 c4 14             	add    esp,0x14
c0009b00:	90                   	nop
c0009b01:	c3                   	ret    

c0009b02 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b02:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b0d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b14:	75 01                	jne    c0009b17 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b16:	c3                   	ret    
c0009b17:	68 80 00 00 00       	push   0x80
c0009b1c:	6a ff                	push   0xffffffff
c0009b1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b22:	50                   	push   eax
c0009b23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b27:	52                   	push   edx
c0009b28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b2c:	51                   	push   ecx
c0009b2d:	e8 22 ff ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b32:	83 c4 14             	add    esp,0x14
c0009b35:	c3                   	ret    

c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b41:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b49:	83 f8 01             	cmp    eax,0x1
c0009b4c:	19 c0                	sbb    eax,eax
c0009b4e:	83 ca 03             	or     edx,0x3
c0009b51:	83 e0 fc             	and    eax,0xfffffffc
c0009b54:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b5b:	0f 20 d8             	mov    eax,cr3
c0009b5e:	0f 22 d8             	mov    cr3,eax
c0009b61:	c3                   	ret    

c0009b62 <VAS::~VAS()>:
c0009b62:	83 ec 2c             	sub    esp,0x2c
c0009b65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b6d:	fa                   	cli    
c0009b6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b73:	83 c0 01             	add    eax,0x1
c0009b76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b85:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009b8f:	6a 01                	push   0x1
c0009b91:	50                   	push   eax
c0009b92:	e8 9f ff ff ff       	call   c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>
c0009b97:	83 c4 0c             	add    esp,0xc
c0009b9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009ba2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009baa:	0f 8f d8 00 00 00    	jg     c0009c88 <VAS::~VAS()+0x126>
c0009bb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bbb:	c1 e2 02             	shl    edx,0x2
c0009bbe:	01 d0                	add    eax,edx
c0009bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bca:	83 e0 01             	and    eax,0x1
c0009bcd:	0f 84 ab 00 00 00    	je     c0009c7e <VAS::~VAS()+0x11c>
c0009bd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bdb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009be3:	7f 74                	jg     c0009c59 <VAS::~VAS()+0xf7>
c0009be5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009be9:	c1 e0 0a             	shl    eax,0xa
c0009bec:	89 c2                	mov    edx,eax
c0009bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	c1 e0 0c             	shl    eax,0xc
c0009bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bfb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c05:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c0f:	6a 01                	push   0x1
c0009c11:	50                   	push   eax
c0009c12:	e8 9f fc ff ff       	call   c00098b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c17:	83 c4 0c             	add    esp,0xc
c0009c1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2c:	25 01 04 00 00       	and    eax,0x401
c0009c31:	3d 01 04 00 00       	cmp    eax,0x401
c0009c36:	75 1a                	jne    c0009c52 <VAS::~VAS()+0xf0>
c0009c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c41:	83 ec 0c             	sub    esp,0xc
c0009c44:	50                   	push   eax
c0009c45:	e8 0f e1 ff ff       	call   c0007d59 <Phys::freePage(unsigned long)>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c52:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c57:	eb 82                	jmp    c0009bdb <VAS::~VAS()+0x79>
c0009c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5d:	25 00 04 00 00       	and    eax,0x400
c0009c62:	74 1a                	je     c0009c7e <VAS::~VAS()+0x11c>
c0009c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6d:	83 ec 0c             	sub    esp,0xc
c0009c70:	50                   	push   eax
c0009c71:	e8 e3 e0 ff ff       	call   c0007d59 <Phys::freePage(unsigned long)>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c7e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c83:	e9 1a ff ff ff       	jmp    c0009ba2 <VAS::~VAS()+0x40>
c0009c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c8f:	83 ec 0c             	sub    esp,0xc
c0009c92:	50                   	push   eax
c0009c93:	e8 6b fc ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca2:	83 ec 0c             	sub    esp,0xc
c0009ca5:	50                   	push   eax
c0009ca6:	e8 ae e0 ff ff       	call   c0007d59 <Phys::freePage(unsigned long)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cb8:	83 e8 01             	sub    eax,0x1
c0009cbb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cc5:	85 c0                	test   eax,eax
c0009cc7:	75 01                	jne    c0009cca <VAS::~VAS()+0x168>
c0009cc9:	fb                   	sti    
c0009cca:	90                   	nop
c0009ccb:	83 c4 2c             	add    esp,0x2c
c0009cce:	c3                   	ret    
c0009ccf:	90                   	nop

c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cd0:	55                   	push   ebp
c0009cd1:	57                   	push   edi
c0009cd2:	56                   	push   esi
c0009cd3:	53                   	push   ebx
c0009cd4:	83 ec 1c             	sub    esp,0x1c
c0009cd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cdb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cdf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ce3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009ce9:	77 0b                	ja     c0009cf6 <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009ceb:	0f 20 d8             	mov    eax,cr3
c0009cee:	0f 20 d8             	mov    eax,cr3
c0009cf1:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009cf4:	75 43                	jne    c0009d39 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009cf6:	89 d8                	mov    eax,ebx
c0009cf8:	09 f8                	or     eax,edi
c0009cfa:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cff:	75 53                	jne    c0009d54 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d04:	89 de                	mov    esi,ebx
c0009d06:	c1 ee 16             	shr    esi,0x16
c0009d09:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d10:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d14:	74 50                	je     c0009d66 <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d1a:	c1 eb 0a             	shr    ebx,0xa
c0009d1d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d23:	c1 e6 0c             	shl    esi,0xc
c0009d26:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d2c:	09 c7                	or     edi,eax
c0009d2e:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d31:	83 c4 1c             	add    esp,0x1c
c0009d34:	5b                   	pop    ebx
c0009d35:	5e                   	pop    esi
c0009d36:	5f                   	pop    edi
c0009d37:	5d                   	pop    ebp
c0009d38:	c3                   	ret    
c0009d39:	83 ec 0c             	sub    esp,0xc
c0009d3c:	68 34 fe 01 c0       	push   0xc001fe34
c0009d41:	e8 f7 0b 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0009d46:	89 d8                	mov    eax,ebx
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	09 f8                	or     eax,edi
c0009d4d:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d52:	74 ad                	je     c0009d01 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d54:	83 ec 0c             	sub    esp,0xc
c0009d57:	68 9c fe 01 c0       	push   0xc001fe9c
c0009d5c:	e8 60 6a 00 00       	call   c00107c1 <KePanic(char const*)>
c0009d61:	83 c4 10             	add    esp,0x10
c0009d64:	eb 9b                	jmp    c0009d01 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d6a:	e8 53 e0 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0009d6f:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d75:	83 ec 0c             	sub    esp,0xc
c0009d78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d80:	6a 01                	push   0x1
c0009d82:	e8 6a f8 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c0009d87:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d8e:	6a 01                	push   0x1
c0009d90:	50                   	push   eax
c0009d91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d95:	52                   	push   edx
c0009d96:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d9a:	51                   	push   ecx
c0009d9b:	e8 4a 02 00 00       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009da0:	83 c4 1c             	add    esp,0x1c
c0009da3:	68 00 10 00 00       	push   0x1000
c0009da8:	6a 00                	push   0x0
c0009daa:	50                   	push   eax
c0009dab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009daf:	e8 3c 67 ff ff       	call   c00004f0 <memset>
c0009db4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009db8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dbb:	e8 43 fb ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc8:	83 c4 10             	add    esp,0x10
c0009dcb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009dce:	0d 07 04 00 00       	or     eax,0x407
c0009dd3:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dd6:	e9 3b ff ff ff       	jmp    c0009d16 <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009ddb:	90                   	nop

c0009ddc <VAS::allocatePages(int, int)>:
c0009ddc:	55                   	push   ebp
c0009ddd:	57                   	push   edi
c0009dde:	56                   	push   esi
c0009ddf:	53                   	push   ebx
c0009de0:	83 ec 1c             	sub    esp,0x1c
c0009de3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009de8:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009dec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009df2:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009df8:	83 e0 01             	and    eax,0x1
c0009dfb:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009dff:	89 c7                	mov    edi,eax
c0009e01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e05:	0f 85 d6 00 00 00    	jne    c0009ee1 <VAS::allocatePages(int, int)+0x105>
c0009e0b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e12:	85 c0                	test   eax,eax
c0009e14:	0f 84 ab 00 00 00    	je     c0009ec5 <VAS::allocatePages(int, int)+0xe9>
c0009e1a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e1e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e26:	c1 e6 0c             	shl    esi,0xc
c0009e29:	01 de                	add    esi,ebx
c0009e2b:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e2e:	85 c0                	test   eax,eax
c0009e30:	7e 3a                	jle    c0009e6c <VAS::allocatePages(int, int)+0x90>
c0009e32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e36:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e3a:	80 cc 04             	or     ah,0x4
c0009e3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e41:	89 f8                	mov    eax,edi
c0009e43:	0f b6 f8             	movzx  edi,al
c0009e46:	e8 77 df ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0009e4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e4f:	52                   	push   edx
c0009e50:	53                   	push   ebx
c0009e51:	50                   	push   eax
c0009e52:	55                   	push   ebp
c0009e53:	e8 78 fe ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e58:	83 c4 10             	add    esp,0x10
c0009e5b:	85 ff                	test   edi,edi
c0009e5d:	74 03                	je     c0009e62 <VAS::allocatePages(int, int)+0x86>
c0009e5f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e62:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e68:	39 de                	cmp    esi,ebx
c0009e6a:	75 da                	jne    c0009e46 <VAS::allocatePages(int, int)+0x6a>
c0009e6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e70:	85 c9                	test   ecx,ecx
c0009e72:	75 12                	jne    c0009e86 <VAS::allocatePages(int, int)+0xaa>
c0009e74:	0f 20 d8             	mov    eax,cr3
c0009e77:	0f 22 d8             	mov    cr3,eax
c0009e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e7e:	83 c4 1c             	add    esp,0x1c
c0009e81:	5b                   	pop    ebx
c0009e82:	5e                   	pop    esi
c0009e83:	5f                   	pop    edi
c0009e84:	5d                   	pop    ebp
c0009e85:	c3                   	ret    
c0009e86:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e8a:	c1 ee 0a             	shr    esi,0xa
c0009e8d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009e93:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009e99:	c1 eb 0a             	shr    ebx,0xa
c0009e9c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ea2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ea8:	39 c3                	cmp    ebx,eax
c0009eaa:	77 ce                	ja     c0009e7a <VAS::allocatePages(int, int)+0x9e>
c0009eac:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009eaf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eb5:	39 d8                	cmp    eax,ebx
c0009eb7:	73 f3                	jae    c0009eac <VAS::allocatePages(int, int)+0xd0>
c0009eb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ebd:	83 c4 1c             	add    esp,0x1c
c0009ec0:	5b                   	pop    ebx
c0009ec1:	5e                   	pop    esi
c0009ec2:	5f                   	pop    edi
c0009ec3:	5d                   	pop    ebp
c0009ec4:	c3                   	ret    
c0009ec5:	83 ec 0c             	sub    esp,0xc
c0009ec8:	68 c0 fe 01 c0       	push   0xc001fec0
c0009ecd:	e8 ef 68 00 00       	call   c00107c1 <KePanic(char const*)>
c0009ed2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ed5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	e9 39 ff ff ff       	jmp    c0009e1a <VAS::allocatePages(int, int)+0x3e>
c0009ee1:	83 ec 0c             	sub    esp,0xc
c0009ee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ee8:	50                   	push   eax
c0009ee9:	e8 03 f7 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c0009eee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ef2:	83 c4 10             	add    esp,0x10
c0009ef5:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009efa:	0f 87 a4 00 00 00    	ja     c0009fa4 <VAS::allocatePages(int, int)+0x1c8>
c0009f00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f04:	85 c0                	test   eax,eax
c0009f06:	7e 44                	jle    c0009f4c <VAS::allocatePages(int, int)+0x170>
c0009f08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f0c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f10:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f14:	c1 e0 0c             	shl    eax,0xc
c0009f17:	01 d8                	add    eax,ebx
c0009f19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f1d:	89 f8                	mov    eax,edi
c0009f1f:	81 ce 00 04 00 00    	or     esi,0x400
c0009f25:	0f b6 f8             	movzx  edi,al
c0009f28:	e8 95 de ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0009f2d:	56                   	push   esi
c0009f2e:	53                   	push   ebx
c0009f2f:	50                   	push   eax
c0009f30:	55                   	push   ebp
c0009f31:	e8 9a fd ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f36:	83 c4 10             	add    esp,0x10
c0009f39:	85 ff                	test   edi,edi
c0009f3b:	74 03                	je     c0009f40 <VAS::allocatePages(int, int)+0x164>
c0009f3d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f40:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f46:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f4a:	75 dc                	jne    c0009f28 <VAS::allocatePages(int, int)+0x14c>
c0009f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f50:	85 c0                	test   eax,eax
c0009f52:	0f 84 1c ff ff ff    	je     c0009e74 <VAS::allocatePages(int, int)+0x98>
c0009f58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f60:	c1 e0 0c             	shl    eax,0xc
c0009f63:	01 d0                	add    eax,edx
c0009f65:	89 d3                	mov    ebx,edx
c0009f67:	c1 eb 0a             	shr    ebx,0xa
c0009f6a:	c1 e8 0a             	shr    eax,0xa
c0009f6d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f78:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f7e:	2d 00 00 40 00       	sub    eax,0x400000
c0009f83:	39 c3                	cmp    ebx,eax
c0009f85:	0f 87 ef fe ff ff    	ja     c0009e7a <VAS::allocatePages(int, int)+0x9e>
c0009f8b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f8e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f94:	39 d8                	cmp    eax,ebx
c0009f96:	73 f3                	jae    c0009f8b <VAS::allocatePages(int, int)+0x1af>
c0009f98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f9c:	83 c4 1c             	add    esp,0x1c
c0009f9f:	5b                   	pop    ebx
c0009fa0:	5e                   	pop    esi
c0009fa1:	5f                   	pop    edi
c0009fa2:	5d                   	pop    ebp
c0009fa3:	c3                   	ret    
c0009fa4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fa9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009faf:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fb6:	0f 84 44 ff ff ff    	je     c0009f00 <VAS::allocatePages(int, int)+0x124>
c0009fbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fc0:	80 cc 01             	or     ah,0x1
c0009fc3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fc7:	e9 34 ff ff ff       	jmp    c0009f00 <VAS::allocatePages(int, int)+0x124>

c0009fcc <VAS::setCPUSpecific(unsigned long)>:
c0009fcc:	83 ec 0c             	sub    esp,0xc
c0009fcf:	6a 05                	push   0x5
c0009fd1:	68 00 00 40 c2       	push   0xc2400000
c0009fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fda:	50                   	push   eax
c0009fdb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009fdf:	52                   	push   edx
c0009fe0:	e8 eb fc ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fe5:	83 c4 1c             	add    esp,0x1c
c0009fe8:	c3                   	ret    
c0009fe9:	90                   	nop

c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009fea:	55                   	push   ebp
c0009feb:	57                   	push   edi
c0009fec:	56                   	push   esi
c0009fed:	53                   	push   ebx
c0009fee:	83 ec 1c             	sub    esp,0x1c
c0009ff1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ff6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009ffa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ffe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a002:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a008:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a00e:	83 e0 01             	and    eax,0x1
c000a011:	85 c9                	test   ecx,ecx
c000a013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a017:	7e 3e                	jle    c000a057 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a019:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a01d:	89 f3                	mov    ebx,esi
c000a01f:	0f b6 f8             	movzx  edi,al
c000a022:	c1 e2 0c             	shl    edx,0xc
c000a025:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a028:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a02c:	55                   	push   ebp
c000a02d:	53                   	push   ebx
c000a02e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a032:	29 f0                	sub    eax,esi
c000a034:	01 d8                	add    eax,ebx
c000a036:	50                   	push   eax
c000a037:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a03b:	52                   	push   edx
c000a03c:	e8 8f fc ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	85 ff                	test   edi,edi
c000a046:	74 03                	je     c000a04b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a048:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a04b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a051:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a055:	75 d5                	jne    c000a02c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a057:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a05b:	85 c0                	test   eax,eax
c000a05d:	75 10                	jne    c000a06f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a05f:	0f 20 d8             	mov    eax,cr3
c000a062:	0f 22 d8             	mov    cr3,eax
c000a065:	83 c4 1c             	add    esp,0x1c
c000a068:	89 f0                	mov    eax,esi
c000a06a:	5b                   	pop    ebx
c000a06b:	5e                   	pop    esi
c000a06c:	5f                   	pop    edi
c000a06d:	5d                   	pop    ebp
c000a06e:	c3                   	ret    
c000a06f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a073:	89 f3                	mov    ebx,esi
c000a075:	c1 eb 0a             	shr    ebx,0xa
c000a078:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a07e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a084:	c1 e0 0c             	shl    eax,0xc
c000a087:	01 f0                	add    eax,esi
c000a089:	c1 e8 0a             	shr    eax,0xa
c000a08c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a091:	2d 00 00 40 00       	sub    eax,0x400000
c000a096:	39 c3                	cmp    ebx,eax
c000a098:	77 cb                	ja     c000a065 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a09a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a09d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0a3:	39 d8                	cmp    eax,ebx
c000a0a5:	73 f3                	jae    c000a09a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0a7:	83 c4 1c             	add    esp,0x1c
c000a0aa:	89 f0                	mov    eax,esi
c000a0ac:	5b                   	pop    ebx
c000a0ad:	5e                   	pop    esi
c000a0ae:	5f                   	pop    edi
c000a0af:	5d                   	pop    ebp
c000a0b0:	c3                   	ret    
c000a0b1:	90                   	nop

c000a0b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0b2:	55                   	push   ebp
c000a0b3:	57                   	push   edi
c000a0b4:	56                   	push   esi
c000a0b5:	53                   	push   ebx
c000a0b6:	83 ec 1c             	sub    esp,0x1c
c000a0b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0c1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0cd:	09 d8                	or     eax,ebx
c000a0cf:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0d4:	75 4b                	jne    c000a121 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0d6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0d9:	89 de                	mov    esi,ebx
c000a0db:	c1 ee 16             	shr    esi,0x16
c000a0de:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0e5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0e9:	74 48                	je     c000a133 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0eb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a0f0:	c1 eb 0a             	shr    ebx,0xa
c000a0f3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a0f7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a0fb:	83 ff 01             	cmp    edi,0x1
c000a0fe:	19 c0                	sbb    eax,eax
c000a100:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a106:	c1 e6 0c             	shl    esi,0xc
c000a109:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a10e:	01 f3                	add    ebx,esi
c000a110:	09 ca                	or     edx,ecx
c000a112:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a119:	83 c4 1c             	add    esp,0x1c
c000a11c:	5b                   	pop    ebx
c000a11d:	5e                   	pop    esi
c000a11e:	5f                   	pop    edi
c000a11f:	5d                   	pop    ebp
c000a120:	c3                   	ret    
c000a121:	83 ec 0c             	sub    esp,0xc
c000a124:	68 ec fe 01 c0       	push   0xc001feec
c000a129:	e8 93 66 00 00       	call   c00107c1 <KePanic(char const*)>
c000a12e:	83 c4 10             	add    esp,0x10
c000a131:	eb a3                	jmp    c000a0d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a133:	e8 8a dc ff ff       	call   c0007dc2 <Phys::allocatePage()>
c000a138:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a13e:	83 ec 0c             	sub    esp,0xc
c000a141:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a145:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a149:	6a 01                	push   0x1
c000a14b:	e8 a1 f4 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000a150:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a157:	6a 01                	push   0x1
c000a159:	50                   	push   eax
c000a15a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a15e:	50                   	push   eax
c000a15f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a163:	51                   	push   ecx
c000a164:	e8 81 fe ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a169:	83 c4 1c             	add    esp,0x1c
c000a16c:	68 00 10 00 00       	push   0x1000
c000a171:	6a 00                	push   0x0
c000a173:	50                   	push   eax
c000a174:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a178:	e8 73 63 ff ff       	call   c00004f0 <memset>
c000a17d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a181:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a184:	e8 7a f7 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c000a189:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a18d:	83 c4 10             	add    esp,0x10
c000a190:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a193:	81 ca 07 04 00 00    	or     edx,0x407
c000a199:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a19c:	e9 4a ff ff ff       	jmp    c000a0eb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1a1:	90                   	nop

c000a1a2 <VAS::VAS(bool)>:
c000a1a2:	53                   	push   ebx
c000a1a3:	83 ec 28             	sub    esp,0x28
c000a1a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1aa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1cc:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1cf:	e8 ee db ff ff       	call   c0007dc2 <Phys::allocatePage()>
c000a1d4:	89 c2                	mov    edx,eax
c000a1d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1dd:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1e3:	83 ec 0c             	sub    esp,0xc
c000a1e6:	6a 01                	push   0x1
c000a1e8:	e8 04 f4 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	89 c2                	mov    edx,eax
c000a1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1f9:	83 ec 0c             	sub    esp,0xc
c000a1fc:	6a 03                	push   0x3
c000a1fe:	6a 01                	push   0x1
c000a200:	52                   	push   edx
c000a201:	50                   	push   eax
c000a202:	53                   	push   ebx
c000a203:	e8 e2 fd ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a208:	83 c4 20             	add    esp,0x20
c000a20b:	89 c2                	mov    edx,eax
c000a20d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a211:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a214:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a21c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a224:	7f 1d                	jg     c000a243 <VAS::VAS(bool)+0xa1>
c000a226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a22a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a22d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a231:	c1 e2 02             	shl    edx,0x2
c000a234:	01 d0                	add    eax,edx
c000a236:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a23c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a241:	eb d9                	jmp    c000a21c <VAS::VAS(bool)+0x7a>
c000a243:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a24b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a253:	7f 7e                	jg     c000a2d3 <VAS::VAS(bool)+0x131>
c000a255:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a259:	2d 00 02 00 00       	sub    eax,0x200
c000a25e:	c1 e0 0c             	shl    eax,0xc
c000a261:	83 c8 05             	or     eax,0x5
c000a264:	89 c2                	mov    edx,eax
c000a266:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a26b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a271:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a277:	83 e0 10             	and    eax,0x10
c000a27a:	0f b6 c0             	movzx  eax,al
c000a27d:	85 c0                	test   eax,eax
c000a27f:	74 07                	je     c000a288 <VAS::VAS(bool)+0xe6>
c000a281:	b8 00 01 00 00       	mov    eax,0x100
c000a286:	eb 05                	jmp    c000a28d <VAS::VAS(bool)+0xeb>
c000a288:	b8 00 00 00 00       	mov    eax,0x0
c000a28d:	09 d0                	or     eax,edx
c000a28f:	89 c1                	mov    ecx,eax
c000a291:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a295:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a298:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a29c:	c1 e2 02             	shl    edx,0x2
c000a29f:	01 d0                	add    eax,edx
c000a2a1:	89 ca                	mov    edx,ecx
c000a2a3:	89 10                	mov    DWORD PTR [eax],edx
c000a2a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2a9:	2d 40 03 00 00       	sub    eax,0x340
c000a2ae:	83 f8 7f             	cmp    eax,0x7f
c000a2b1:	77 16                	ja     c000a2c9 <VAS::VAS(bool)+0x127>
c000a2b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2be:	c1 e2 02             	shl    edx,0x2
c000a2c1:	01 d0                	add    eax,edx
c000a2c3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2c9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2ce:	e9 78 ff ff ff       	jmp    c000a24b <VAS::VAS(bool)+0xa9>
c000a2d3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2de:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2e4:	83 e0 10             	and    eax,0x10
c000a2e7:	0f b6 c0             	movzx  eax,al
c000a2ea:	85 c0                	test   eax,eax
c000a2ec:	74 07                	je     c000a2f5 <VAS::VAS(bool)+0x153>
c000a2ee:	b8 03 41 00 00       	mov    eax,0x4103
c000a2f3:	eb 05                	jmp    c000a2fa <VAS::VAS(bool)+0x158>
c000a2f5:	b8 03 40 00 00       	mov    eax,0x4003
c000a2fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a2fe:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a301:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a307:	89 02                	mov    DWORD PTR [edx],eax
c000a309:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a30e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a314:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a31a:	83 ec 08             	sub    esp,0x8
c000a31d:	50                   	push   eax
c000a31e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a322:	e8 a5 fc ff ff       	call   c0009fcc <VAS::setCPUSpecific(unsigned long)>
c000a327:	83 c4 10             	add    esp,0x10
c000a32a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a32e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a331:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a336:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a33c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a342:	83 e0 10             	and    eax,0x10
c000a345:	0f b6 c0             	movzx  eax,al
c000a348:	85 c0                	test   eax,eax
c000a34a:	74 07                	je     c000a353 <VAS::VAS(bool)+0x1b1>
c000a34c:	b8 00 01 00 00       	mov    eax,0x100
c000a351:	eb 05                	jmp    c000a358 <VAS::VAS(bool)+0x1b6>
c000a353:	b8 00 00 00 00       	mov    eax,0x0
c000a358:	09 c2                	or     edx,eax
c000a35a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a35e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a361:	05 fc 0f 00 00       	add    eax,0xffc
c000a366:	83 ca 03             	or     edx,0x3
c000a369:	89 10                	mov    DWORD PTR [eax],edx
c000a36b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a370:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a376:	83 ec 0c             	sub    esp,0xc
c000a379:	50                   	push   eax
c000a37a:	e8 b5 1c 00 00       	call   c000c034 <Device::getName()>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	83 ec 08             	sub    esp,0x8
c000a385:	68 8f ff 01 c0       	push   0xc001ff8f
c000a38a:	50                   	push   eax
c000a38b:	e8 f0 63 ff ff       	call   c0000780 <strcmp>
c000a390:	83 c4 10             	add    esp,0x10
c000a393:	85 c0                	test   eax,eax
c000a395:	0f 94 c0             	sete   al
c000a398:	0f b6 c0             	movzx  eax,al
c000a39b:	85 c0                	test   eax,eax
c000a39d:	0f 84 8b 00 00 00    	je     c000a42e <VAS::VAS(bool)+0x28c>
c000a3a3:	fa                   	cli    
c000a3a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3a9:	83 c0 01             	add    eax,0x1
c000a3ac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3b1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3bc:	05 7c 09 00 00       	add    eax,0x97c
c000a3c1:	83 ec 0c             	sub    esp,0xc
c000a3c4:	50                   	push   eax
c000a3c5:	e8 e8 d1 ff ff       	call   c00075b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3ca:	83 c4 10             	add    esp,0x10
c000a3cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3d2:	89 c3                	mov    ebx,eax
c000a3d4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3df:	05 7c 09 00 00       	add    eax,0x97c
c000a3e4:	83 ec 0c             	sub    esp,0xc
c000a3e7:	50                   	push   eax
c000a3e8:	e8 c5 d1 ff ff       	call   c00075b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	50                   	push   eax
c000a3f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a3f8:	e8 e7 f4 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a3fd:	83 c4 10             	add    esp,0x10
c000a400:	8b 00                	mov    eax,DWORD PTR [eax]
c000a402:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a407:	6a 11                	push   0x11
c000a409:	53                   	push   ebx
c000a40a:	50                   	push   eax
c000a40b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40f:	e8 bc f8 ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a414:	83 c4 10             	add    esp,0x10
c000a417:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a41c:	83 e8 01             	sub    eax,0x1
c000a41f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a424:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a429:	85 c0                	test   eax,eax
c000a42b:	75 01                	jne    c000a42e <VAS::VAS(bool)+0x28c>
c000a42d:	fb                   	sti    
c000a42e:	90                   	nop
c000a42f:	83 c4 28             	add    esp,0x28
c000a432:	5b                   	pop    ebx
c000a433:	c3                   	ret    

c000a434 <VAS::evict(unsigned long)>:
c000a434:	55                   	push   ebp
c000a435:	57                   	push   edi
c000a436:	56                   	push   esi
c000a437:	53                   	push   ebx
c000a438:	83 ec 1c             	sub    esp,0x1c
c000a43b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a43f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a447:	e8 fa f2 ff ff       	call   c0009746 <Virt::allocateSwapfilePage()>
c000a44c:	89 c7                	mov    edi,eax
c000a44e:	a1 4c 1e 02 c0       	mov    eax,ds:0xc0021e4c
c000a453:	85 c0                	test   eax,eax
c000a455:	7e 40                	jle    c000a497 <VAS::evict(unsigned long)+0x63>
c000a457:	89 ee                	mov    esi,ebp
c000a459:	31 db                	xor    ebx,ebx
c000a45b:	83 ec 0c             	sub    esp,0xc
c000a45e:	57                   	push   edi
c000a45f:	e8 cc f2 ff ff       	call   c0009730 <Virt::swapIDToSector(unsigned long)>
c000a464:	31 d2                	xor    edx,edx
c000a466:	89 34 24             	mov    DWORD PTR [esp],esi
c000a469:	81 c6 00 02 00 00    	add    esi,0x200
c000a46f:	6a 01                	push   0x1
c000a471:	52                   	push   edx
c000a472:	01 d8                	add    eax,ebx
c000a474:	83 c3 01             	add    ebx,0x1
c000a477:	50                   	push   eax
c000a478:	0f be 05 58 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e58
c000a47f:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a486:	50                   	push   eax
c000a487:	e8 6a 2d 00 00       	call   c000d1f6 <LogicalDisk::write(unsigned long long, int, void*)>
c000a48c:	83 c4 20             	add    esp,0x20
c000a48f:	39 1d 4c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e4c,ebx
c000a495:	7f c4                	jg     c000a45b <VAS::evict(unsigned long)+0x27>
c000a497:	c1 e7 0b             	shl    edi,0xb
c000a49a:	83 ec 08             	sub    esp,0x8
c000a49d:	55                   	push   ebp
c000a49e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4a2:	50                   	push   eax
c000a4a3:	e8 3c f4 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a4a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4aa:	89 d1                	mov    ecx,edx
c000a4ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4b2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4b8:	09 cf                	or     edi,ecx
c000a4ba:	89 38                	mov    DWORD PTR [eax],edi
c000a4bc:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4bf:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4c5:	83 c1 01             	add    ecx,0x1
c000a4c8:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4ce:	e8 86 d8 ff ff       	call   c0007d59 <Phys::freePage(unsigned long)>
c000a4d3:	0f 20 d8             	mov    eax,cr3
c000a4d6:	0f 22 d8             	mov    cr3,eax
c000a4d9:	c7 44 24 40 9d ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ff9d
c000a4e1:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a4e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4ea:	8d 50 01             	lea    edx,[eax+0x1]
c000a4ed:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a4f3:	83 c4 2c             	add    esp,0x2c
c000a4f6:	5b                   	pop    ebx
c000a4f7:	5e                   	pop    esi
c000a4f8:	5f                   	pop    edi
c000a4f9:	5d                   	pop    ebp
c000a4fa:	e9 3e 04 00 00       	jmp    c000a93d <Dbg::kprintf(char const*, ...)>
c000a4ff:	90                   	nop

c000a500 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a500:	55                   	push   ebp
c000a501:	57                   	push   edi
c000a502:	56                   	push   esi
c000a503:	53                   	push   ebx
c000a504:	83 ec 24             	sub    esp,0x24
c000a507:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a50b:	53                   	push   ebx
c000a50c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a512:	68 ae ff 01 c0       	push   0xc001ffae
c000a517:	e8 21 04 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a51c:	58                   	pop    eax
c000a51d:	5a                   	pop    edx
c000a51e:	53                   	push   ebx
c000a51f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a523:	51                   	push   ecx
c000a524:	e8 bb f3 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a529:	83 c4 10             	add    esp,0x10
c000a52c:	85 c0                	test   eax,eax
c000a52e:	89 c6                	mov    esi,eax
c000a530:	0f 95 c0             	setne  al
c000a533:	85 db                	test   ebx,ebx
c000a535:	0f 95 c2             	setne  dl
c000a538:	21 d0                	and    eax,edx
c000a53a:	a8 01                	test   al,0x1
c000a53c:	89 c5                	mov    ebp,eax
c000a53e:	75 0a                	jne    c000a54a <VAS::tryLoadBackOffDisk(unsigned long)+0x4a>
c000a540:	83 c4 1c             	add    esp,0x1c
c000a543:	89 e8                	mov    eax,ebp
c000a545:	5b                   	pop    ebx
c000a546:	5e                   	pop    esi
c000a547:	5f                   	pop    edi
c000a548:	5d                   	pop    ebp
c000a549:	c3                   	ret    
c000a54a:	8b 06                	mov    eax,DWORD PTR [esi]
c000a54c:	a8 01                	test   al,0x1
c000a54e:	74 0c                	je     c000a55c <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c000a550:	83 c4 1c             	add    esp,0x1c
c000a553:	31 ed                	xor    ebp,ebp
c000a555:	5b                   	pop    ebx
c000a556:	89 e8                	mov    eax,ebp
c000a558:	5e                   	pop    esi
c000a559:	5f                   	pop    edi
c000a55a:	5d                   	pop    ebp
c000a55b:	c3                   	ret    
c000a55c:	c1 e8 0b             	shr    eax,0xb
c000a55f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a563:	e8 5a d8 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c000a568:	8b 16                	mov    edx,DWORD PTR [esi]
c000a56a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a570:	09 c2                	or     edx,eax
c000a572:	81 ca 01 08 00 00    	or     edx,0x801
c000a578:	89 16                	mov    DWORD PTR [esi],edx
c000a57a:	a1 4c 1e 02 c0       	mov    eax,ds:0xc0021e4c
c000a57f:	85 c0                	test   eax,eax
c000a581:	7e 44                	jle    c000a5c7 <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a583:	89 df                	mov    edi,ebx
c000a585:	31 f6                	xor    esi,esi
c000a587:	83 ec 0c             	sub    esp,0xc
c000a58a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a58e:	51                   	push   ecx
c000a58f:	e8 9c f1 ff ff       	call   c0009730 <Virt::swapIDToSector(unsigned long)>
c000a594:	31 d2                	xor    edx,edx
c000a596:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a599:	81 c7 00 02 00 00    	add    edi,0x200
c000a59f:	6a 01                	push   0x1
c000a5a1:	52                   	push   edx
c000a5a2:	01 f0                	add    eax,esi
c000a5a4:	83 c6 01             	add    esi,0x1
c000a5a7:	50                   	push   eax
c000a5a8:	0f be 05 58 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e58
c000a5af:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5b6:	50                   	push   eax
c000a5b7:	e8 ce 2b 00 00       	call   c000d18a <LogicalDisk::read(unsigned long long, int, void*)>
c000a5bc:	83 c4 20             	add    esp,0x20
c000a5bf:	39 35 4c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e4c,esi
c000a5c5:	7f c0                	jg     c000a587 <VAS::tryLoadBackOffDisk(unsigned long)+0x87>
c000a5c7:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5cc:	83 ec 04             	sub    esp,0x4
c000a5cf:	83 e8 01             	sub    eax,0x1
c000a5d2:	50                   	push   eax
c000a5d3:	53                   	push   ebx
c000a5d4:	68 c1 ff 01 c0       	push   0xc001ffc1
c000a5d9:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a5de:	e8 5a 03 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a5e3:	58                   	pop    eax
c000a5e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5e8:	52                   	push   edx
c000a5e9:	e8 1f f1 ff ff       	call   c000970d <Virt::freeSwapfilePage(unsigned long)>
c000a5ee:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a5f3:	83 c4 10             	add    esp,0x10
c000a5f6:	83 e8 01             	sub    eax,0x1
c000a5f9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a5fe:	85 c0                	test   eax,eax
c000a600:	75 01                	jne    c000a603 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c000a602:	fb                   	sti    
c000a603:	0f 20 d8             	mov    eax,cr3
c000a606:	0f 22 d8             	mov    cr3,eax
c000a609:	e9 32 ff ff ff       	jmp    c000a540 <VAS::tryLoadBackOffDisk(unsigned long)+0x40>

c000a60e <VAS::scanForEviction()>:
c000a60e:	57                   	push   edi
c000a60f:	31 ff                	xor    edi,edi
c000a611:	56                   	push   esi
c000a612:	53                   	push   ebx
c000a613:	83 ec 10             	sub    esp,0x10
c000a616:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a61a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a61d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a623:	75 0e                	jne    c000a633 <VAS::scanForEviction()+0x25>
c000a625:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a628:	89 da                	mov    edx,ebx
c000a62a:	c1 ea 16             	shr    edx,0x16
c000a62d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a631:	74 50                	je     c000a683 <VAS::scanForEviction()+0x75>
c000a633:	53                   	push   ebx
c000a634:	56                   	push   esi
c000a635:	e8 aa f2 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a63a:	5a                   	pop    edx
c000a63b:	59                   	pop    ecx
c000a63c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a63e:	89 d1                	mov    ecx,edx
c000a640:	81 e1 01 08 00 00    	and    ecx,0x801
c000a646:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a64c:	74 40                	je     c000a68e <VAS::scanForEviction()+0x80>
c000a64e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a654:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a65a:	76 2d                	jbe    c000a689 <VAS::scanForEviction()+0x7b>
c000a65c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a663:	83 c7 01             	add    edi,0x1
c000a666:	83 ff 03             	cmp    edi,0x3
c000a669:	74 32                	je     c000a69d <VAS::scanForEviction()+0x8f>
c000a66b:	31 db                	xor    ebx,ebx
c000a66d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a673:	75 be                	jne    c000a633 <VAS::scanForEviction()+0x25>
c000a675:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a678:	89 da                	mov    edx,ebx
c000a67a:	c1 ea 16             	shr    edx,0x16
c000a67d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a681:	75 b0                	jne    c000a633 <VAS::scanForEviction()+0x25>
c000a683:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a689:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a68c:	eb 8f                	jmp    c000a61d <VAS::scanForEviction()+0xf>
c000a68e:	f6 c2 20             	test   dl,0x20
c000a691:	74 13                	je     c000a6a6 <VAS::scanForEviction()+0x98>
c000a693:	83 e2 df             	and    edx,0xffffffdf
c000a696:	89 10                	mov    DWORD PTR [eax],edx
c000a698:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a69b:	eb b1                	jmp    c000a64e <VAS::scanForEviction()+0x40>
c000a69d:	83 c4 10             	add    esp,0x10
c000a6a0:	31 c0                	xor    eax,eax
c000a6a2:	5b                   	pop    ebx
c000a6a3:	5e                   	pop    esi
c000a6a4:	5f                   	pop    edi
c000a6a5:	c3                   	ret    
c000a6a6:	89 d0                	mov    eax,edx
c000a6a8:	83 ec 08             	sub    esp,0x8
c000a6ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6b4:	53                   	push   ebx
c000a6b5:	68 d6 ff 01 c0       	push   0xc001ffd6
c000a6ba:	e8 7e 02 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a6bf:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6c2:	58                   	pop    eax
c000a6c3:	5a                   	pop    edx
c000a6c4:	51                   	push   ecx
c000a6c5:	56                   	push   esi
c000a6c6:	e8 69 fd ff ff       	call   c000a434 <VAS::evict(unsigned long)>
c000a6cb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6ce:	5b                   	pop    ebx
c000a6cf:	5f                   	pop    edi
c000a6d0:	50                   	push   eax
c000a6d1:	68 ea ff 01 c0       	push   0xc001ffea
c000a6d6:	e8 62 02 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a6db:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6de:	83 c4 10             	add    esp,0x10
c000a6e1:	05 00 10 00 00       	add    eax,0x1000
c000a6e6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ed:	83 c4 10             	add    esp,0x10
c000a6f0:	5b                   	pop    ebx
c000a6f1:	5e                   	pop    esi
c000a6f2:	5f                   	pop    edi
c000a6f3:	c3                   	ret    

c000a6f4 <mapVASFirstTime>:
c000a6f4:	55                   	push   ebp
c000a6f5:	57                   	push   edi
c000a6f6:	56                   	push   esi
c000a6f7:	53                   	push   ebx
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a700:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a703:	83 fa 01             	cmp    edx,0x1
c000a706:	0f 84 cb 00 00 00    	je     c000a7d7 <mapVASFirstTime+0xe3>
c000a70c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a70f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a714:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a719:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a71c:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a722:	c1 e5 15             	shl    ebp,0x15
c000a725:	29 eb                	sub    ebx,ebp
c000a727:	29 ef                	sub    edi,ebp
c000a729:	e8 94 d6 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c000a72e:	83 ec 0c             	sub    esp,0xc
c000a731:	68 03 04 00 00       	push   0x403
c000a736:	6a 01                	push   0x1
c000a738:	53                   	push   ebx
c000a739:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a73f:	50                   	push   eax
c000a740:	56                   	push   esi
c000a741:	e8 a4 f8 ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a746:	83 c4 20             	add    esp,0x20
c000a749:	39 fb                	cmp    ebx,edi
c000a74b:	75 dc                	jne    c000a729 <mapVASFirstTime+0x35>
c000a74d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a752:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a757:	29 eb                	sub    ebx,ebp
c000a759:	29 ef                	sub    edi,ebp
c000a75b:	e8 62 d6 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c000a760:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a764:	83 fa 01             	cmp    edx,0x1
c000a767:	19 d2                	sbb    edx,edx
c000a769:	83 ec 0c             	sub    esp,0xc
c000a76c:	83 e2 04             	and    edx,0x4
c000a76f:	81 c2 03 04 00 00    	add    edx,0x403
c000a775:	52                   	push   edx
c000a776:	6a 01                	push   0x1
c000a778:	53                   	push   ebx
c000a779:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a77f:	50                   	push   eax
c000a780:	56                   	push   esi
c000a781:	e8 64 f8 ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a786:	83 c4 20             	add    esp,0x20
c000a789:	39 df                	cmp    edi,ebx
c000a78b:	75 ce                	jne    c000a75b <mapVASFirstTime+0x67>
c000a78d:	83 ec 0c             	sub    esp,0xc
c000a790:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a795:	6a 04                	push   0x4
c000a797:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a79d:	6a ff                	push   0xffffffff
c000a79f:	c1 eb 0c             	shr    ebx,0xc
c000a7a2:	53                   	push   ebx
c000a7a3:	68 00 30 02 c0       	push   0xc0023000
c000a7a8:	56                   	push   esi
c000a7a9:	e8 a6 f2 ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7ae:	83 c4 14             	add    esp,0x14
c000a7b1:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7b6:	6a 04                	push   0x4
c000a7b8:	6a ff                	push   0xffffffff
c000a7ba:	53                   	push   ebx
c000a7bb:	68 00 30 02 c0       	push   0xc0023000
c000a7c0:	50                   	push   eax
c000a7c1:	e8 8e f2 ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7c6:	0f 20 d8             	mov    eax,cr3
c000a7c9:	0f 22 d8             	mov    cr3,eax
c000a7cc:	83 c4 20             	add    esp,0x20
c000a7cf:	83 c4 0c             	add    esp,0xc
c000a7d2:	5b                   	pop    ebx
c000a7d3:	5e                   	pop    esi
c000a7d4:	5f                   	pop    edi
c000a7d5:	5d                   	pop    ebp
c000a7d6:	c3                   	ret    
c000a7d7:	83 ec 0c             	sub    esp,0xc
c000a7da:	68 fd ff 01 c0       	push   0xc001fffd
c000a7df:	e8 59 01 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a7e4:	83 c4 10             	add    esp,0x10
c000a7e7:	83 c4 0c             	add    esp,0xc
c000a7ea:	5b                   	pop    ebx
c000a7eb:	5e                   	pop    esi
c000a7ec:	5f                   	pop    edi
c000a7ed:	5d                   	pop    ebp
c000a7ee:	c3                   	ret    

c000a7ef <__cxa_atexit>:
c000a7ef:	31 c0                	xor    eax,eax
c000a7f1:	c3                   	ret    

c000a7f2 <__cxa_finalize>:
c000a7f2:	c3                   	ret    

c000a7f3 <__stack_chk_fail>:
c000a7f3:	55                   	push   ebp
c000a7f4:	89 e5                	mov    ebp,esp
c000a7f6:	83 ec 10             	sub    esp,0x10
c000a7f9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7fc:	68 16 00 02 c0       	push   0xc0020016
c000a801:	e8 37 01 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a806:	58                   	pop    eax
c000a807:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a80a:	5a                   	pop    edx
c000a80b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a80e:	68 16 00 02 c0       	push   0xc0020016
c000a813:	e8 25 01 00 00       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000a818:	c7 04 24 1e 00 02 c0 	mov    DWORD PTR [esp],0xc002001e
c000a81f:	e8 9d 5f 00 00       	call   c00107c1 <KePanic(char const*)>
c000a824:	83 c4 10             	add    esp,0x10
c000a827:	c9                   	leave  
c000a828:	c3                   	ret    

c000a829 <__cxa_pure_virtual>:
c000a829:	83 ec 18             	sub    esp,0x18
c000a82c:	68 36 00 02 c0       	push   0xc0020036
c000a831:	e8 8b 5f 00 00       	call   c00107c1 <KePanic(char const*)>
c000a836:	83 c4 1c             	add    esp,0x1c
c000a839:	c3                   	ret    

c000a83a <operator new[](unsigned long)>:
c000a83a:	e9 78 d2 ff ff       	jmp    c0007ab7 <malloc>

c000a83f <operator delete(void*, unsigned long)>:
c000a83f:	e9 93 d2 ff ff       	jmp    c0007ad7 <rfree>

c000a844 <operator delete[](void*)>:
c000a844:	e9 8e d2 ff ff       	jmp    c0007ad7 <rfree>

c000a849 <operator delete[](void*, unsigned long)>:
c000a849:	e9 89 d2 ff ff       	jmp    c0007ad7 <rfree>

c000a84e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a84e:	55                   	push   ebp
c000a84f:	57                   	push   edi
c000a850:	56                   	push   esi
c000a851:	53                   	push   ebx
c000a852:	83 ec 20             	sub    esp,0x20
c000a855:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a859:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a861:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a865:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a86d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a871:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a879:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a881:	89 f7                	mov    edi,esi
c000a883:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a888:	89 eb                	mov    ebx,ebp
c000a88a:	eb 02                	jmp    c000a88e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a88c:	89 c7                	mov    edi,eax
c000a88e:	31 d2                	xor    edx,edx
c000a890:	89 f8                	mov    eax,edi
c000a892:	f7 f1                	div    ecx
c000a894:	83 c3 01             	add    ebx,0x1
c000a897:	39 cf                	cmp    edi,ecx
c000a899:	73 f1                	jae    c000a88c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a89b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a89e:	eb 02                	jmp    c000a8a2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a8a0:	89 c6                	mov    esi,eax
c000a8a2:	31 d2                	xor    edx,edx
c000a8a4:	89 f0                	mov    eax,esi
c000a8a6:	f7 f1                	div    ecx
c000a8a8:	83 eb 01             	sub    ebx,0x1
c000a8ab:	39 ce                	cmp    esi,ecx
c000a8ad:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8b1:	88 13                	mov    BYTE PTR [ebx],dl
c000a8b3:	73 eb                	jae    c000a8a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8b5:	83 c4 20             	add    esp,0x20
c000a8b8:	89 e8                	mov    eax,ebp
c000a8ba:	5b                   	pop    ebx
c000a8bb:	5e                   	pop    esi
c000a8bc:	5f                   	pop    edi
c000a8bd:	5d                   	pop    ebp
c000a8be:	c3                   	ret    

c000a8bf <Dbg::logc(char)>:
c000a8bf:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8ca:	75 12                	jne    c000a8de <Dbg::logc(char)+0x1f>
c000a8cc:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d1:	ec                   	in     al,dx
c000a8d2:	a8 20                	test   al,0x20
c000a8d4:	74 fb                	je     c000a8d1 <Dbg::logc(char)+0x12>
c000a8d6:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8db:	88 c8                	mov    al,cl
c000a8dd:	ee                   	out    dx,al
c000a8de:	c3                   	ret    

c000a8df <Dbg::logs(char*)>:
c000a8df:	53                   	push   ebx
c000a8e0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e7:	85 c0                	test   eax,eax
c000a8e9:	74 11                	je     c000a8fc <Dbg::logs(char*)+0x1d>
c000a8eb:	50                   	push   eax
c000a8ec:	83 c3 01             	add    ebx,0x1
c000a8ef:	e8 cb ff ff ff       	call   c000a8bf <Dbg::logc(char)>
c000a8f4:	58                   	pop    eax
c000a8f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f8:	85 c0                	test   eax,eax
c000a8fa:	75 ef                	jne    c000a8eb <Dbg::logs(char*)+0xc>
c000a8fc:	5b                   	pop    ebx
c000a8fd:	c3                   	ret    

c000a8fe <Dbg::logWriteInt(unsigned int)>:
c000a8fe:	83 ec 10             	sub    esp,0x10
c000a901:	6a 0a                	push   0xa
c000a903:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a907:	50                   	push   eax
c000a908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90c:	50                   	push   eax
c000a90d:	e8 3c ff ff ff       	call   c000a84e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a912:	50                   	push   eax
c000a913:	e8 c7 ff ff ff       	call   c000a8df <Dbg::logs(char*)>
c000a918:	83 c4 20             	add    esp,0x20
c000a91b:	c3                   	ret    

c000a91c <Dbg::logWriteIntBase(unsigned int, int)>:
c000a91c:	83 ec 10             	sub    esp,0x10
c000a91f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a923:	50                   	push   eax
c000a924:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a928:	50                   	push   eax
c000a929:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a92d:	52                   	push   edx
c000a92e:	e8 1b ff ff ff       	call   c000a84e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a933:	50                   	push   eax
c000a934:	e8 a6 ff ff ff       	call   c000a8df <Dbg::logs(char*)>
c000a939:	83 c4 20             	add    esp,0x20
c000a93c:	c3                   	ret    

c000a93d <Dbg::kprintf(char const*, ...)>:
c000a93d:	55                   	push   ebp
c000a93e:	57                   	push   edi
c000a93f:	56                   	push   esi
c000a940:	53                   	push   ebx
c000a941:	83 ec 0c             	sub    esp,0xc
c000a944:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a94b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a94f:	74 08                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x1c>
c000a951:	83 c4 0c             	add    esp,0xc
c000a954:	5b                   	pop    ebx
c000a955:	5e                   	pop    esi
c000a956:	5f                   	pop    edi
c000a957:	5d                   	pop    ebp
c000a958:	c3                   	ret    
c000a959:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a95d:	31 ff                	xor    edi,edi
c000a95f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a963:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a966:	85 c0                	test   eax,eax
c000a968:	74 e7                	je     c000a951 <Dbg::kprintf(char const*, ...)+0x14>
c000a96a:	8d 77 01             	lea    esi,[edi+0x1]
c000a96d:	83 f8 25             	cmp    eax,0x25
c000a970:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a973:	75 47                	jne    c000a9bc <Dbg::kprintf(char const*, ...)+0x7f>
c000a975:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a978:	83 c7 02             	add    edi,0x2
c000a97b:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97e:	83 e8 25             	sub    eax,0x25
c000a981:	0f b6 c0             	movzx  eax,al
c000a984:	83 f8 53             	cmp    eax,0x53
c000a987:	0f 87 ce 00 00 00    	ja     c000aa5b <Dbg::kprintf(char const*, ...)+0x11e>
c000a98d:	ff 24 85 4c 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdffb4]
c000a994:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a998:	89 c8                	mov    eax,ecx
c000a99a:	83 c1 04             	add    ecx,0x4
c000a99d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a1:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9a3:	55                   	push   ebp
c000a9a4:	e8 55 ff ff ff       	call   c000a8fe <Dbg::logWriteInt(unsigned int)>
c000a9a9:	58                   	pop    eax
c000a9aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9ad:	85 c0                	test   eax,eax
c000a9af:	74 a0                	je     c000a951 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b1:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b4:	83 f8 25             	cmp    eax,0x25
c000a9b7:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ba:	74 b9                	je     c000a975 <Dbg::kprintf(char const*, ...)+0x38>
c000a9bc:	50                   	push   eax
c000a9bd:	89 f7                	mov    edi,esi
c000a9bf:	e8 fb fe ff ff       	call   c000a8bf <Dbg::logc(char)>
c000a9c4:	89 ee                	mov    esi,ebp
c000a9c6:	58                   	pop    eax
c000a9c7:	eb e1                	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9cd:	89 c8                	mov    eax,ecx
c000a9cf:	83 c1 04             	add    ecx,0x4
c000a9d2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d8:	50                   	push   eax
c000a9d9:	e8 01 ff ff ff       	call   c000a8df <Dbg::logs(char*)>
c000a9de:	58                   	pop    eax
c000a9df:	eb c9                	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e5:	89 d0                	mov    eax,edx
c000a9e7:	83 c2 04             	add    edx,0x4
c000a9ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f0:	50                   	push   eax
c000a9f1:	e8 08 ff ff ff       	call   c000a8fe <Dbg::logWriteInt(unsigned int)>
c000a9f6:	58                   	pop    eax
c000a9f7:	eb b1                	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9fd:	89 d0                	mov    eax,edx
c000a9ff:	83 c2 04             	add    edx,0x4
c000aa02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa06:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa09:	50                   	push   eax
c000aa0a:	e8 b0 fe ff ff       	call   c000a8bf <Dbg::logc(char)>
c000aa0f:	58                   	pop    eax
c000aa10:	eb 98                	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000aa12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa16:	89 c8                	mov    eax,ecx
c000aa18:	83 c1 04             	add    ecx,0x4
c000aa1b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1f:	6a 10                	push   0x10
c000aa21:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa23:	51                   	push   ecx
c000aa24:	e8 f3 fe ff ff       	call   c000a91c <Dbg::logWriteIntBase(unsigned int, int)>
c000aa29:	5d                   	pop    ebp
c000aa2a:	58                   	pop    eax
c000aa2b:	e9 7a ff ff ff       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000aa30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa34:	89 d0                	mov    eax,edx
c000aa36:	83 c2 08             	add    edx,0x8
c000aa39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa3d:	6a 10                	push   0x10
c000aa3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa41:	50                   	push   eax
c000aa42:	e8 d5 fe ff ff       	call   c000a91c <Dbg::logWriteIntBase(unsigned int, int)>
c000aa47:	58                   	pop    eax
c000aa48:	5a                   	pop    edx
c000aa49:	e9 5c ff ff ff       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4e:	6a 25                	push   0x25
c000aa50:	e8 6a fe ff ff       	call   c000a8bf <Dbg::logc(char)>
c000aa55:	5a                   	pop    edx
c000aa56:	e9 4f ff ff ff       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000aa5b:	6a 25                	push   0x25
c000aa5d:	e8 5d fe ff ff       	call   c000a8bf <Dbg::logc(char)>
c000aa62:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa66:	50                   	push   eax
c000aa67:	e8 53 fe ff ff       	call   c000a8bf <Dbg::logc(char)>
c000aa6c:	5a                   	pop    edx
c000aa6d:	59                   	pop    ecx
c000aa6e:	e9 37 ff ff ff       	jmp    c000a9aa <Dbg::kprintf(char const*, ...)+0x6d>
c000aa73:	90                   	nop

c000aa74 <File::read(unsigned long long, void*, int*)>:
c000aa74:	53                   	push   ebx
c000aa75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa7d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa84:	83 f8 19             	cmp    eax,0x19
c000aa87:	77 35                	ja     c000aabe <File::read(unsigned long long, void*, int*)+0x4a>
c000aa89:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aa90:	85 c0                	test   eax,eax
c000aa92:	74 2a                	je     c000aabe <File::read(unsigned long long, void*, int*)+0x4a>
c000aa94:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aa9a:	85 c0                	test   eax,eax
c000aa9c:	74 20                	je     c000aabe <File::read(unsigned long long, void*, int*)+0x4a>
c000aa9e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aaa2:	74 21                	je     c000aac5 <File::read(unsigned long long, void*, int*)+0x51>
c000aaa4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaa6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aaaa:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aab4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab8:	5b                   	pop    ebx
c000aab9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aabc:	ff e0                	jmp    eax
c000aabe:	b8 0b 00 00 00       	mov    eax,0xb
c000aac3:	eb 05                	jmp    c000aaca <File::read(unsigned long long, void*, int*)+0x56>
c000aac5:	b8 05 00 00 00       	mov    eax,0x5
c000aaca:	5b                   	pop    ebx
c000aacb:	c3                   	ret    

c000aacc <File::write(unsigned long long, void*, int*)>:
c000aacc:	53                   	push   ebx
c000aacd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aad5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aadc:	83 f8 19             	cmp    eax,0x19
c000aadf:	77 35                	ja     c000ab16 <File::write(unsigned long long, void*, int*)+0x4a>
c000aae1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aae8:	85 c0                	test   eax,eax
c000aaea:	74 2a                	je     c000ab16 <File::write(unsigned long long, void*, int*)+0x4a>
c000aaec:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aaf2:	85 c0                	test   eax,eax
c000aaf4:	74 20                	je     c000ab16 <File::write(unsigned long long, void*, int*)+0x4a>
c000aaf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aafa:	74 21                	je     c000ab1d <File::write(unsigned long long, void*, int*)+0x51>
c000aafc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aafe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab02:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab10:	5b                   	pop    ebx
c000ab11:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab14:	ff e0                	jmp    eax
c000ab16:	b8 0b 00 00 00       	mov    eax,0xb
c000ab1b:	eb 05                	jmp    c000ab22 <File::write(unsigned long long, void*, int*)+0x56>
c000ab1d:	b8 05 00 00 00       	mov    eax,0x5
c000ab22:	5b                   	pop    ebx
c000ab23:	c3                   	ret    

c000ab24 <Directory::read(unsigned long long, void*, int*)>:
c000ab24:	53                   	push   ebx
c000ab25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab2d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab34:	83 f8 19             	cmp    eax,0x19
c000ab37:	77 35                	ja     c000ab6e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab39:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab40:	85 c0                	test   eax,eax
c000ab42:	74 2a                	je     c000ab6e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab44:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab4a:	85 c0                	test   eax,eax
c000ab4c:	74 20                	je     c000ab6e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab52:	74 21                	je     c000ab75 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab54:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab56:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab5a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab68:	5b                   	pop    ebx
c000ab69:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab6c:	ff e0                	jmp    eax
c000ab6e:	b8 0b 00 00 00       	mov    eax,0xb
c000ab73:	eb 05                	jmp    c000ab7a <Directory::read(unsigned long long, void*, int*)+0x56>
c000ab75:	b8 05 00 00 00       	mov    eax,0x5
c000ab7a:	5b                   	pop    ebx
c000ab7b:	c3                   	ret    

c000ab7c <Directory::write(unsigned long long, void*, int*)>:
c000ab7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab80:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ab87:	b8 0b 00 00 00       	mov    eax,0xb
c000ab8c:	83 fa 19             	cmp    edx,0x19
c000ab8f:	77 18                	ja     c000aba9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ab91:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ab98:	85 d2                	test   edx,edx
c000ab9a:	74 0d                	je     c000aba9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ab9c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000aba3:	19 c0                	sbb    eax,eax
c000aba5:	83 e0 0a             	and    eax,0xa
c000aba8:	40                   	inc    eax
c000aba9:	c3                   	ret    

c000abaa <File::isAtty()>:
c000abaa:	31 c0                	xor    eax,eax
c000abac:	c3                   	ret    
c000abad:	90                   	nop

c000abae <Directory::isAtty()>:
c000abae:	31 c0                	xor    eax,eax
c000abb0:	c3                   	ret    
c000abb1:	90                   	nop

c000abb2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abb2:	b8 0a 00 00 00       	mov    eax,0xa
c000abb7:	c3                   	ret    

c000abb8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abb8:	b8 0a 00 00 00       	mov    eax,0xa
c000abbd:	c3                   	ret    

c000abbe <Filesystem::allocateSwapfile(char const*, int)>:
c000abbe:	31 c0                	xor    eax,eax
c000abc0:	31 d2                	xor    edx,edx
c000abc2:	c3                   	ret    
c000abc3:	90                   	nop

c000abc4 <File::~File()>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	ba 0c 02 02 c0       	mov    edx,0xc002020c
c000abcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd0:	89 10                	mov    DWORD PTR [eax],edx
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	83 ec 0c             	sub    esp,0xc
c000abd9:	50                   	push   eax
c000abda:	e8 a9 e7 ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c000abdf:	83 c4 10             	add    esp,0x10
c000abe2:	90                   	nop
c000abe3:	83 c4 0c             	add    esp,0xc
c000abe6:	c3                   	ret    
c000abe7:	90                   	nop

c000abe8 <File::~File()>:
c000abe8:	83 ec 0c             	sub    esp,0xc
c000abeb:	83 ec 0c             	sub    esp,0xc
c000abee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf2:	e8 cd ff ff ff       	call   c000abc4 <File::~File()>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	83 ec 08             	sub    esp,0x8
c000abfd:	68 14 01 00 00       	push   0x114
c000ac02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac06:	e8 34 fc ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	83 c4 0c             	add    esp,0xc
c000ac11:	c3                   	ret    

c000ac12 <Directory::~Directory()>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	ba 28 02 02 c0       	mov    edx,0xc0020228
c000ac1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac1e:	89 10                	mov    DWORD PTR [eax],edx
c000ac20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	50                   	push   eax
c000ac28:	e8 5b e7 ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c000ac2d:	83 c4 10             	add    esp,0x10
c000ac30:	90                   	nop
c000ac31:	83 c4 0c             	add    esp,0xc
c000ac34:	c3                   	ret    
c000ac35:	90                   	nop

c000ac36 <Directory::~Directory()>:
c000ac36:	83 ec 0c             	sub    esp,0xc
c000ac39:	83 ec 0c             	sub    esp,0xc
c000ac3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac40:	e8 cd ff ff ff       	call   c000ac12 <Directory::~Directory()>
c000ac45:	83 c4 10             	add    esp,0x10
c000ac48:	83 ec 08             	sub    esp,0x8
c000ac4b:	68 14 01 00 00       	push   0x114
c000ac50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac54:	e8 e6 fb ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000ac59:	83 c4 10             	add    esp,0x10
c000ac5c:	83 c4 0c             	add    esp,0xc
c000ac5f:	c3                   	ret    

c000ac60 <Filesystem::Filesystem()>:
c000ac60:	ba a4 01 02 c0       	mov    edx,0xc00201a4
c000ac65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac69:	89 10                	mov    DWORD PTR [eax],edx
c000ac6b:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ac71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac75:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac7c:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ac81:	90                   	nop
c000ac82:	c3                   	ret    
c000ac83:	90                   	nop

c000ac84 <Filesystem::~Filesystem()>:
c000ac84:	ba a4 01 02 c0       	mov    edx,0xc00201a4
c000ac89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac8d:	89 10                	mov    DWORD PTR [eax],edx
c000ac8f:	90                   	nop
c000ac90:	c3                   	ret    
c000ac91:	90                   	nop

c000ac92 <Filesystem::~Filesystem()>:
c000ac92:	83 ec 0c             	sub    esp,0xc
c000ac95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac99:	e8 e6 ff ff ff       	call   c000ac84 <Filesystem::~Filesystem()>
c000ac9e:	83 c4 04             	add    esp,0x4
c000aca1:	83 ec 08             	sub    esp,0x8
c000aca4:	6a 08                	push   0x8
c000aca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acaa:	e8 90 fb ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000acaf:	83 c4 10             	add    esp,0x10
c000acb2:	83 c4 0c             	add    esp,0xc
c000acb5:	c3                   	ret    

c000acb6 <Fs::getcwd(Process*, char*, int)>:
c000acb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acba:	31 c0                	xor    eax,eax
c000acbc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000acc0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000acc3:	7d 15                	jge    c000acda <Fs::getcwd(Process*, char*, int)+0x24>
c000acc5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000acd0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000acd3:	84 c9                	test   cl,cl
c000acd5:	74 06                	je     c000acdd <Fs::getcwd(Process*, char*, int)+0x27>
c000acd7:	40                   	inc    eax
c000acd8:	eb e2                	jmp    c000acbc <Fs::getcwd(Process*, char*, int)+0x6>
c000acda:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000acdd:	31 c0                	xor    eax,eax
c000acdf:	c3                   	ret    

c000ace0 <Fs::initVFS()>:
c000ace0:	83 ec 18             	sub    esp,0x18
c000ace3:	6a 08                	push   0x8
c000ace5:	e8 cd cd ff ff       	call   c0007ab7 <malloc>
c000acea:	89 04 24             	mov    DWORD PTR [esp],eax
c000aced:	e8 46 dd 00 00       	call   c0018a38 <FAT::FAT()>
c000acf2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000acf9:	e8 b9 cd ff ff       	call   c0007ab7 <malloc>
c000acfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad01:	e8 5a ec 00 00       	call   c0019960 <ISO9660::ISO9660()>
c000ad06:	83 c4 1c             	add    esp,0x1c
c000ad09:	c3                   	ret    

c000ad0a <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad0a:	55                   	push   ebp
c000ad0b:	57                   	push   edi
c000ad0c:	56                   	push   esi
c000ad0d:	53                   	push   ebx
c000ad0e:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad14:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad1b:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad22:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad29:	68 00 04 00 00       	push   0x400
c000ad2e:	6a 00                	push   0x0
c000ad30:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ad34:	56                   	push   esi
c000ad35:	e8 b6 57 ff ff       	call   c00004f0 <memset>
c000ad3a:	83 c4 10             	add    esp,0x10
c000ad3d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad41:	75 0b                	jne    c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad43:	50                   	push   eax
c000ad44:	50                   	push   eax
c000ad45:	57                   	push   edi
c000ad46:	56                   	push   esi
c000ad47:	e8 04 59 ff ff       	call   c0000650 <strcpy>
c000ad4c:	eb 45                	jmp    c000ad93 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000ad4e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad51:	83 f8 2f             	cmp    eax,0x2f
c000ad54:	74 05                	je     c000ad5b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad56:	83 f8 5c             	cmp    eax,0x5c
c000ad59:	75 19                	jne    c000ad74 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000ad5b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad5e:	3c 60                	cmp    al,0x60
c000ad60:	7e 03                	jle    c000ad65 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ad62:	83 e8 20             	sub    eax,0x20
c000ad65:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ad69:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ad70:	50                   	push   eax
c000ad71:	50                   	push   eax
c000ad72:	eb 18                	jmp    c000ad8c <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000ad74:	50                   	push   eax
c000ad75:	50                   	push   eax
c000ad76:	55                   	push   ebp
c000ad77:	56                   	push   esi
c000ad78:	e8 d3 58 ff ff       	call   c0000650 <strcpy>
c000ad7d:	5a                   	pop    edx
c000ad7e:	59                   	pop    ecx
c000ad7f:	68 fb 10 02 c0       	push   0xc00210fb
c000ad84:	56                   	push   esi
c000ad85:	e8 e6 5a ff ff       	call   c0000870 <strcat>
c000ad8a:	5d                   	pop    ebp
c000ad8b:	58                   	pop    eax
c000ad8c:	57                   	push   edi
c000ad8d:	56                   	push   esi
c000ad8e:	e8 dd 5a ff ff       	call   c0000870 <strcat>
c000ad93:	83 c4 10             	add    esp,0x10
c000ad96:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000ad9a:	3c 60                	cmp    al,0x60
c000ad9c:	7e 03                	jle    c000ada1 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000ad9e:	83 e8 20             	sub    eax,0x20
c000ada1:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ada5:	88 03                	mov    BYTE PTR [ebx],al
c000ada7:	b8 03 00 00 00       	mov    eax,0x3
c000adac:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000adb3:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adb9:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000adbd:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000adc5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000adc9:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000adce:	89 fa                	mov    edx,edi
c000add0:	0f be ea             	movsx  ebp,dl
c000add3:	85 ed                	test   ebp,ebp
c000add5:	0f 84 af 00 00 00    	je     c000ae8a <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000addb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000addf:	42                   	inc    edx
c000ade0:	83 fd 2f             	cmp    ebp,0x2f
c000ade3:	74 05                	je     c000adea <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000ade5:	83 fd 5c             	cmp    ebp,0x5c
c000ade8:	75 14                	jne    c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000adea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000adef:	89 c5                	mov    ebp,eax
c000adf1:	74 0b                	je     c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000adf3:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000adf7:	40                   	inc    eax
c000adf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adfc:	eb c7                	jmp    c000adc5 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000adfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae02:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae07:	89 f9                	mov    ecx,edi
c000ae09:	0f be e9             	movsx  ebp,cl
c000ae0c:	75 63                	jne    c000ae71 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae0e:	83 fd 2e             	cmp    ebp,0x2e
c000ae11:	75 5e                	jne    c000ae71 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae17:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae1c:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae21:	74 18                	je     c000ae3b <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae23:	83 fd 2e             	cmp    ebp,0x2e
c000ae26:	74 57                	je     c000ae7f <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae28:	89 ca                	mov    edx,ecx
c000ae2a:	42                   	inc    edx
c000ae2b:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae2f:	83 f9 2f             	cmp    ecx,0x2f
c000ae32:	74 f6                	je     c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae34:	83 f9 5c             	cmp    ecx,0x5c
c000ae37:	74 f1                	je     c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae39:	eb bd                	jmp    c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae3b:	83 fd 2e             	cmp    ebp,0x2e
c000ae3e:	74 3f                	je     c000ae7f <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae40:	83 f8 03             	cmp    eax,0x3
c000ae43:	74 b3                	je     c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae45:	42                   	inc    edx
c000ae46:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae4a:	83 f9 2f             	cmp    ecx,0x2f
c000ae4d:	74 f6                	je     c000ae45 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae4f:	83 f9 5c             	cmp    ecx,0x5c
c000ae52:	74 f1                	je     c000ae45 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae54:	48                   	dec    eax
c000ae55:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae59:	75 06                	jne    c000ae61 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae5b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae5f:	eb f3                	jmp    c000ae54 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae61:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae65:	74 07                	je     c000ae6e <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000ae67:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae6b:	48                   	dec    eax
c000ae6c:	eb f3                	jmp    c000ae61 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae6e:	40                   	inc    eax
c000ae6f:	eb 87                	jmp    c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae71:	83 fd 2f             	cmp    ebp,0x2f
c000ae74:	74 82                	je     c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae76:	83 fd 5c             	cmp    ebp,0x5c
c000ae79:	0f 84 79 ff ff ff    	je     c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae7f:	89 f9                	mov    ecx,edi
c000ae81:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ae84:	40                   	inc    eax
c000ae85:	e9 6e ff ff ff       	jmp    c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae8a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae8e:	83 ec 0c             	sub    esp,0xc
c000ae91:	53                   	push   ebx
c000ae92:	e8 e9 56 ff ff       	call   c0000580 <strlen>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ae9f:	75 26                	jne    c000aec7 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	53                   	push   ebx
c000aea5:	e8 d6 56 ff ff       	call   c0000580 <strlen>
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aeb2:	74 26                	je     c000aeda <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000aeb4:	83 ec 0c             	sub    esp,0xc
c000aeb7:	53                   	push   ebx
c000aeb8:	e8 c3 56 ff ff       	call   c0000580 <strlen>
c000aebd:	83 c4 10             	add    esp,0x10
c000aec0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aec5:	eb c7                	jmp    c000ae8e <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000aec7:	83 ec 0c             	sub    esp,0xc
c000aeca:	53                   	push   ebx
c000aecb:	e8 b0 56 ff ff       	call   c0000580 <strlen>
c000aed0:	83 c4 10             	add    esp,0x10
c000aed3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aed8:	74 c7                	je     c000aea1 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000aeda:	81 c4 1c 04 00 00    	add    esp,0x41c
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	5d                   	pop    ebp
c000aee4:	c3                   	ret    
c000aee5:	90                   	nop

c000aee6 <File::File(char const*, Process*)>:
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeed:	83 ec 08             	sub    esp,0x8
c000aef0:	6a 00                	push   0x0
c000aef2:	50                   	push   eax
c000aef3:	e8 aa e2 ff ff       	call   c00091a2 <UnixFile::UnixFile(int)>
c000aef8:	83 c4 10             	add    esp,0x10
c000aefb:	ba 0c 02 02 c0       	mov    edx,0xc002020c
c000af00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af04:	89 10                	mov    DWORD PTR [eax],edx
c000af06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af0a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af14:	83 c0 0d             	add    eax,0xd
c000af17:	83 ec 04             	sub    esp,0x4
c000af1a:	52                   	push   edx
c000af1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af1f:	50                   	push   eax
c000af20:	e8 e5 fd ff ff       	call   c000ad0a <Fs::standardiseFiles(char*, char const*, char const*)>
c000af25:	83 c4 10             	add    esp,0x10
c000af28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af2f:	83 e8 41             	sub    eax,0x41
c000af32:	88 c2                	mov    dl,al
c000af34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af38:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af42:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af50:	0f b6 c0             	movzx  eax,al
c000af53:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af5a:	85 c0                	test   eax,eax
c000af5c:	74 3e                	je     c000af9c <File::File(char const*, Process*)+0xb6>
c000af5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af62:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af68:	0f b6 c0             	movzx  eax,al
c000af6b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af72:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000af78:	85 c0                	test   eax,eax
c000af7a:	75 20                	jne    c000af9c <File::File(char const*, Process*)+0xb6>
c000af7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af80:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af86:	0f b6 c0             	movzx  eax,al
c000af89:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af90:	83 ec 0c             	sub    esp,0xc
c000af93:	50                   	push   eax
c000af94:	e8 2f 21 00 00       	call   c000d0c8 <LogicalDisk::mount()>
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	90                   	nop
c000af9d:	83 c4 0c             	add    esp,0xc
c000afa0:	c3                   	ret    
c000afa1:	90                   	nop

c000afa2 <File::open(FileOpenMode)>:
c000afa2:	53                   	push   ebx
c000afa3:	b8 0b 00 00 00       	mov    eax,0xb
c000afa8:	83 ec 08             	sub    esp,0x8
c000afab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afaf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afb6:	83 fa 19             	cmp    edx,0x19
c000afb9:	77 40                	ja     c000affb <File::open(FileOpenMode)+0x59>
c000afbb:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afc2:	85 d2                	test   edx,edx
c000afc4:	74 35                	je     c000affb <File::open(FileOpenMode)+0x59>
c000afc6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000afcc:	85 d2                	test   edx,edx
c000afce:	74 2b                	je     c000affb <File::open(FileOpenMode)+0x59>
c000afd0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afd4:	b8 06 00 00 00       	mov    eax,0x6
c000afd9:	75 20                	jne    c000affb <File::open(FileOpenMode)+0x59>
c000afdb:	8b 02                	mov    eax,DWORD PTR [edx]
c000afdd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000afe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe7:	51                   	push   ecx
c000afe8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000afeb:	51                   	push   ecx
c000afec:	52                   	push   edx
c000afed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	85 c0                	test   eax,eax
c000aff5:	75 04                	jne    c000affb <File::open(FileOpenMode)+0x59>
c000aff7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000affb:	83 c4 08             	add    esp,0x8
c000affe:	5b                   	pop    ebx
c000afff:	c3                   	ret    

c000b000 <File::close()>:
c000b000:	53                   	push   ebx
c000b001:	b8 0b 00 00 00       	mov    eax,0xb
c000b006:	83 ec 08             	sub    esp,0x8
c000b009:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b00d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b014:	83 f9 19             	cmp    ecx,0x19
c000b017:	77 41                	ja     c000b05a <File::close()+0x5a>
c000b019:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b020:	85 db                	test   ebx,ebx
c000b022:	74 36                	je     c000b05a <File::close()+0x5a>
c000b024:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b02b:	74 2d                	je     c000b05a <File::close()+0x5a>
c000b02d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b031:	b8 05 00 00 00       	mov    eax,0x5
c000b036:	74 22                	je     c000b05a <File::close()+0x5a>
c000b038:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b03c:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b043:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b049:	53                   	push   ebx
c000b04a:	53                   	push   ebx
c000b04b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b04d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b053:	50                   	push   eax
c000b054:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	83 c4 08             	add    esp,0x8
c000b05d:	5b                   	pop    ebx
c000b05e:	c3                   	ret    
c000b05f:	90                   	nop

c000b060 <File::seek(unsigned long long)>:
c000b060:	56                   	push   esi
c000b061:	b8 0b 00 00 00       	mov    eax,0xb
c000b066:	53                   	push   ebx
c000b067:	51                   	push   ecx
c000b068:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b06c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b070:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b074:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b07b:	83 fa 19             	cmp    edx,0x19
c000b07e:	77 31                	ja     c000b0b1 <File::seek(unsigned long long)+0x51>
c000b080:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b087:	85 d2                	test   edx,edx
c000b089:	74 26                	je     c000b0b1 <File::seek(unsigned long long)+0x51>
c000b08b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b091:	85 d2                	test   edx,edx
c000b093:	74 1c                	je     c000b0b1 <File::seek(unsigned long long)+0x51>
c000b095:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b099:	b8 05 00 00 00       	mov    eax,0x5
c000b09e:	74 11                	je     c000b0b1 <File::seek(unsigned long long)+0x51>
c000b0a0:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0a2:	53                   	push   ebx
c000b0a3:	51                   	push   ecx
c000b0a4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0aa:	52                   	push   edx
c000b0ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	5a                   	pop    edx
c000b0b2:	5b                   	pop    ebx
c000b0b3:	5e                   	pop    esi
c000b0b4:	c3                   	ret    
c000b0b5:	90                   	nop

c000b0b6 <File::tell(unsigned long long*)>:
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b0be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0c2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0c9:	83 fa 19             	cmp    edx,0x19
c000b0cc:	77 34                	ja     c000b102 <File::tell(unsigned long long*)+0x4c>
c000b0ce:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0d5:	85 d2                	test   edx,edx
c000b0d7:	74 29                	je     c000b102 <File::tell(unsigned long long*)+0x4c>
c000b0d9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0df:	85 d2                	test   edx,edx
c000b0e1:	74 1f                	je     c000b102 <File::tell(unsigned long long*)+0x4c>
c000b0e3:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0e7:	b8 05 00 00 00       	mov    eax,0x5
c000b0ec:	74 14                	je     c000b102 <File::tell(unsigned long long*)+0x4c>
c000b0ee:	50                   	push   eax
c000b0ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0f5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0fb:	52                   	push   edx
c000b0fc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	83 c4 0c             	add    esp,0xc
c000b105:	c3                   	ret    

c000b106 <File::rewind()>:
c000b106:	83 ec 10             	sub    esp,0x10
c000b109:	6a 00                	push   0x0
c000b10b:	6a 00                	push   0x0
c000b10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b111:	e8 4a ff ff ff       	call   c000b060 <File::seek(unsigned long long)>
c000b116:	83 c4 1c             	add    esp,0x1c
c000b119:	c3                   	ret    

c000b11a <File::unlink()>:
c000b11a:	83 ec 0c             	sub    esp,0xc
c000b11d:	b8 0b 00 00 00       	mov    eax,0xb
c000b122:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b126:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b12d:	83 f9 19             	cmp    ecx,0x19
c000b130:	77 2f                	ja     c000b161 <File::unlink()+0x47>
c000b132:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b139:	85 c9                	test   ecx,ecx
c000b13b:	74 24                	je     c000b161 <File::unlink()+0x47>
c000b13d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b143:	85 c9                	test   ecx,ecx
c000b145:	74 1a                	je     c000b161 <File::unlink()+0x47>
c000b147:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b14b:	b8 06 00 00 00       	mov    eax,0x6
c000b150:	75 0f                	jne    c000b161 <File::unlink()+0x47>
c000b152:	50                   	push   eax
c000b153:	83 c2 0d             	add    edx,0xd
c000b156:	50                   	push   eax
c000b157:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b159:	52                   	push   edx
c000b15a:	51                   	push   ecx
c000b15b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b15e:	83 c4 10             	add    esp,0x10
c000b161:	83 c4 0c             	add    esp,0xc
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <File::rename(char const*)>:
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	b8 0b 00 00 00       	mov    eax,0xb
c000b16e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b172:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b179:	83 f9 19             	cmp    ecx,0x19
c000b17c:	77 32                	ja     c000b1b0 <File::rename(char const*)+0x4a>
c000b17e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b185:	85 c9                	test   ecx,ecx
c000b187:	74 27                	je     c000b1b0 <File::rename(char const*)+0x4a>
c000b189:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b18f:	85 c9                	test   ecx,ecx
c000b191:	74 1d                	je     c000b1b0 <File::rename(char const*)+0x4a>
c000b193:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b197:	b8 06 00 00 00       	mov    eax,0x6
c000b19c:	75 12                	jne    c000b1b0 <File::rename(char const*)+0x4a>
c000b19e:	50                   	push   eax
c000b19f:	83 c2 0d             	add    edx,0xd
c000b1a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1a8:	52                   	push   edx
c000b1a9:	51                   	push   ecx
c000b1aa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1ad:	83 c4 10             	add    esp,0x10
c000b1b0:	83 c4 0c             	add    esp,0xc
c000b1b3:	c3                   	ret    

c000b1b4 <File::chfatattr(unsigned char, unsigned char)>:
c000b1b4:	57                   	push   edi
c000b1b5:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ba:	56                   	push   esi
c000b1bb:	53                   	push   ebx
c000b1bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1cf:	83 f9 19             	cmp    ecx,0x19
c000b1d2:	77 37                	ja     c000b20b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1d4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1db:	85 c9                	test   ecx,ecx
c000b1dd:	74 2c                	je     c000b20b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1e5:	85 c9                	test   ecx,ecx
c000b1e7:	74 22                	je     c000b20b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ed:	b8 06 00 00 00       	mov    eax,0x6
c000b1f2:	75 17                	jne    c000b20b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1f4:	89 f0                	mov    eax,esi
c000b1f6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b1f8:	0f b6 db             	movzx  ebx,bl
c000b1fb:	0f b6 f0             	movzx  esi,al
c000b1fe:	83 c2 0d             	add    edx,0xd
c000b201:	56                   	push   esi
c000b202:	53                   	push   ebx
c000b203:	52                   	push   edx
c000b204:	51                   	push   ecx
c000b205:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	5b                   	pop    ebx
c000b20c:	5e                   	pop    esi
c000b20d:	5f                   	pop    edi
c000b20e:	c3                   	ret    
c000b20f:	90                   	nop

c000b210 <File::exists()>:
c000b210:	83 ec 0c             	sub    esp,0xc
c000b213:	31 c0                	xor    eax,eax
c000b215:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b219:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b220:	83 f9 19             	cmp    ecx,0x19
c000b223:	77 24                	ja     c000b249 <File::exists()+0x39>
c000b225:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b22c:	85 c9                	test   ecx,ecx
c000b22e:	74 19                	je     c000b249 <File::exists()+0x39>
c000b230:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b236:	85 c9                	test   ecx,ecx
c000b238:	74 0f                	je     c000b249 <File::exists()+0x39>
c000b23a:	50                   	push   eax
c000b23b:	83 c2 0d             	add    edx,0xd
c000b23e:	50                   	push   eax
c000b23f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b241:	52                   	push   edx
c000b242:	51                   	push   ecx
c000b243:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	83 c4 0c             	add    esp,0xc
c000b24c:	c3                   	ret    
c000b24d:	90                   	nop

c000b24e <File::stat(unsigned long long*, bool*)>:
c000b24e:	56                   	push   esi
c000b24f:	53                   	push   ebx
c000b250:	50                   	push   eax
c000b251:	b8 0b 00 00 00       	mov    eax,0xb
c000b256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b25a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b25e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b262:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b269:	83 f9 19             	cmp    ecx,0x19
c000b26c:	77 3d                	ja     c000b2ab <File::stat(unsigned long long*, bool*)+0x5d>
c000b26e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b275:	85 c9                	test   ecx,ecx
c000b277:	74 32                	je     c000b2ab <File::stat(unsigned long long*, bool*)+0x5d>
c000b279:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b27f:	85 c9                	test   ecx,ecx
c000b281:	74 28                	je     c000b2ab <File::stat(unsigned long long*, bool*)+0x5d>
c000b283:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b287:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b289:	74 13                	je     c000b29e <File::stat(unsigned long long*, bool*)+0x50>
c000b28b:	83 ec 04             	sub    esp,0x4
c000b28e:	56                   	push   esi
c000b28f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b295:	51                   	push   ecx
c000b296:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b299:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b29c:	eb 0a                	jmp    c000b2a8 <File::stat(unsigned long long*, bool*)+0x5a>
c000b29e:	53                   	push   ebx
c000b29f:	83 c2 0d             	add    edx,0xd
c000b2a2:	56                   	push   esi
c000b2a3:	52                   	push   edx
c000b2a4:	51                   	push   ecx
c000b2a5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	5a                   	pop    edx
c000b2ac:	5b                   	pop    ebx
c000b2ad:	5e                   	pop    esi
c000b2ae:	c3                   	ret    

c000b2af <Fs::setcwd(Process*, char*)>:
c000b2af:	55                   	push   ebp
c000b2b0:	57                   	push   edi
c000b2b1:	56                   	push   esi
c000b2b2:	53                   	push   ebx
c000b2b3:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2b9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2c6:	57                   	push   edi
c000b2c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b2ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b2d2:	56                   	push   esi
c000b2d3:	e8 32 fa ff ff       	call   c000ad0a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b2d8:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2db:	e8 a0 52 ff ff       	call   c0000580 <strlen>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 f8 02             	cmp    eax,0x2
c000b2e6:	77 15                	ja     c000b2fd <Fs::setcwd(Process*, char*)+0x4e>
c000b2e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b2ed:	83 eb 41             	sub    ebx,0x41
c000b2f0:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b2f7:	85 c0                	test   eax,eax
c000b2f9:	75 1c                	jne    c000b317 <Fs::setcwd(Process*, char*)+0x68>
c000b2fb:	eb 2f                	jmp    c000b32c <Fs::setcwd(Process*, char*)+0x7d>
c000b2fd:	83 ec 0c             	sub    esp,0xc
c000b300:	56                   	push   esi
c000b301:	e8 7a 52 ff ff       	call   c0000580 <strlen>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	83 f8 03             	cmp    eax,0x3
c000b30c:	75 57                	jne    c000b365 <Fs::setcwd(Process*, char*)+0xb6>
c000b30e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b313:	75 50                	jne    c000b365 <Fs::setcwd(Process*, char*)+0xb6>
c000b315:	eb d1                	jmp    c000b2e8 <Fs::setcwd(Process*, char*)+0x39>
c000b317:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b31e:	75 0c                	jne    c000b32c <Fs::setcwd(Process*, char*)+0x7d>
c000b320:	83 ec 0c             	sub    esp,0xc
c000b323:	50                   	push   eax
c000b324:	e8 9f 1d 00 00       	call   c000d0c8 <LogicalDisk::mount()>
c000b329:	83 c4 10             	add    esp,0x10
c000b32c:	83 fb 19             	cmp    ebx,0x19
c000b32f:	b8 03 00 00 00       	mov    eax,0x3
c000b334:	0f 87 c6 00 00 00    	ja     c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b33a:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b341:	b8 05 00 00 00       	mov    eax,0x5
c000b346:	85 d2                	test   edx,edx
c000b348:	0f 84 b2 00 00 00    	je     c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b34e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b355:	b8 06 00 00 00       	mov    eax,0x6
c000b35a:	0f 85 92 00 00 00    	jne    c000b3f2 <Fs::setcwd(Process*, char*)+0x143>
c000b360:	e9 9b 00 00 00       	jmp    c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b365:	83 ec 0c             	sub    esp,0xc
c000b368:	68 14 01 00 00       	push   0x114
c000b36d:	e8 45 c7 ff ff       	call   c0007ab7 <malloc>
c000b372:	83 c4 0c             	add    esp,0xc
c000b375:	55                   	push   ebp
c000b376:	56                   	push   esi
c000b377:	50                   	push   eax
c000b378:	89 c3                	mov    ebx,eax
c000b37a:	e8 67 fb ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c000b37f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b384:	83 c4 0c             	add    esp,0xc
c000b387:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b38b:	50                   	push   eax
c000b38c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b390:	50                   	push   eax
c000b391:	53                   	push   ebx
c000b392:	e8 b7 fe ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c000b397:	83 c4 10             	add    esp,0x10
c000b39a:	83 f8 02             	cmp    eax,0x2
c000b39d:	74 27                	je     c000b3c6 <Fs::setcwd(Process*, char*)+0x117>
c000b39f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3a4:	75 1c                	jne    c000b3c2 <Fs::setcwd(Process*, char*)+0x113>
c000b3a6:	85 db                	test   ebx,ebx
c000b3a8:	b8 02 00 00 00       	mov    eax,0x2
c000b3ad:	74 51                	je     c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b3af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3b1:	83 ec 0c             	sub    esp,0xc
c000b3b4:	53                   	push   ebx
c000b3b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	b8 02 00 00 00       	mov    eax,0x2
c000b3c0:	eb 3e                	jmp    c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b3c2:	85 c0                	test   eax,eax
c000b3c4:	74 1c                	je     c000b3e2 <Fs::setcwd(Process*, char*)+0x133>
c000b3c6:	85 db                	test   ebx,ebx
c000b3c8:	b8 01 00 00 00       	mov    eax,0x1
c000b3cd:	74 31                	je     c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b3cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3d1:	83 ec 0c             	sub    esp,0xc
c000b3d4:	53                   	push   ebx
c000b3d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3d8:	83 c4 10             	add    esp,0x10
c000b3db:	b8 01 00 00 00       	mov    eax,0x1
c000b3e0:	eb 1e                	jmp    c000b400 <Fs::setcwd(Process*, char*)+0x151>
c000b3e2:	85 db                	test   ebx,ebx
c000b3e4:	74 0c                	je     c000b3f2 <Fs::setcwd(Process*, char*)+0x143>
c000b3e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e8:	83 ec 0c             	sub    esp,0xc
c000b3eb:	53                   	push   ebx
c000b3ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ef:	83 c4 10             	add    esp,0x10
c000b3f2:	50                   	push   eax
c000b3f3:	50                   	push   eax
c000b3f4:	56                   	push   esi
c000b3f5:	57                   	push   edi
c000b3f6:	e8 55 52 ff ff       	call   c0000650 <strcpy>
c000b3fb:	83 c4 10             	add    esp,0x10
c000b3fe:	31 c0                	xor    eax,eax
c000b400:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b406:	5b                   	pop    ebx
c000b407:	5e                   	pop    esi
c000b408:	5f                   	pop    edi
c000b409:	5d                   	pop    ebp
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <Directory::Directory(char const*, Process*)>:
c000b40c:	83 ec 0c             	sub    esp,0xc
c000b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b413:	83 ec 08             	sub    esp,0x8
c000b416:	6a 00                	push   0x0
c000b418:	50                   	push   eax
c000b419:	e8 84 dd ff ff       	call   c00091a2 <UnixFile::UnixFile(int)>
c000b41e:	83 c4 10             	add    esp,0x10
c000b421:	ba 28 02 02 c0       	mov    edx,0xc0020228
c000b426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42a:	89 10                	mov    DWORD PTR [eax],edx
c000b42c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b430:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43a:	83 c0 0d             	add    eax,0xd
c000b43d:	83 ec 04             	sub    esp,0x4
c000b440:	52                   	push   edx
c000b441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b445:	50                   	push   eax
c000b446:	e8 bf f8 ff ff       	call   c000ad0a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b455:	83 e8 41             	sub    eax,0x41
c000b458:	88 c2                	mov    dl,al
c000b45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b468:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b476:	0f b6 c0             	movzx  eax,al
c000b479:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b480:	85 c0                	test   eax,eax
c000b482:	74 3e                	je     c000b4c2 <Directory::Directory(char const*, Process*)+0xb6>
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b48e:	0f b6 c0             	movzx  eax,al
c000b491:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b498:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b49e:	85 c0                	test   eax,eax
c000b4a0:	75 20                	jne    c000b4c2 <Directory::Directory(char const*, Process*)+0xb6>
c000b4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4ac:	0f b6 c0             	movzx  eax,al
c000b4af:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	50                   	push   eax
c000b4ba:	e8 09 1c 00 00       	call   c000d0c8 <LogicalDisk::mount()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	90                   	nop
c000b4c3:	83 c4 0c             	add    esp,0xc
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <Directory::open()>:
c000b4c8:	53                   	push   ebx
c000b4c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b4ce:	83 ec 08             	sub    esp,0x8
c000b4d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4d5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4dc:	83 fa 19             	cmp    edx,0x19
c000b4df:	77 3d                	ja     c000b51e <Directory::open()+0x56>
c000b4e1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b4e8:	85 d2                	test   edx,edx
c000b4ea:	74 32                	je     c000b51e <Directory::open()+0x56>
c000b4ec:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b4f2:	85 d2                	test   edx,edx
c000b4f4:	74 28                	je     c000b51e <Directory::open()+0x56>
c000b4f6:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b4fa:	b8 06 00 00 00       	mov    eax,0x6
c000b4ff:	75 1d                	jne    c000b51e <Directory::open()+0x56>
c000b501:	50                   	push   eax
c000b502:	8b 02                	mov    eax,DWORD PTR [edx]
c000b504:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b50a:	51                   	push   ecx
c000b50b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b50e:	51                   	push   ecx
c000b50f:	52                   	push   edx
c000b510:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b513:	83 c4 10             	add    esp,0x10
c000b516:	85 c0                	test   eax,eax
c000b518:	75 04                	jne    c000b51e <Directory::open()+0x56>
c000b51a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b51e:	83 c4 08             	add    esp,0x8
c000b521:	5b                   	pop    ebx
c000b522:	c3                   	ret    
c000b523:	90                   	nop

c000b524 <Directory::close()>:
c000b524:	53                   	push   ebx
c000b525:	b8 0b 00 00 00       	mov    eax,0xb
c000b52a:	83 ec 08             	sub    esp,0x8
c000b52d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b531:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b538:	83 f9 19             	cmp    ecx,0x19
c000b53b:	77 41                	ja     c000b57e <Directory::close()+0x5a>
c000b53d:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b544:	85 db                	test   ebx,ebx
c000b546:	74 36                	je     c000b57e <Directory::close()+0x5a>
c000b548:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b54f:	74 2d                	je     c000b57e <Directory::close()+0x5a>
c000b551:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b555:	b8 05 00 00 00       	mov    eax,0x5
c000b55a:	74 22                	je     c000b57e <Directory::close()+0x5a>
c000b55c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b560:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b567:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b56d:	53                   	push   ebx
c000b56e:	53                   	push   ebx
c000b56f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b571:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b577:	50                   	push   eax
c000b578:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	83 c4 08             	add    esp,0x8
c000b581:	5b                   	pop    ebx
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <Directory::unlink()>:
c000b584:	83 ec 0c             	sub    esp,0xc
c000b587:	b8 0b 00 00 00       	mov    eax,0xb
c000b58c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b590:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b597:	83 f9 19             	cmp    ecx,0x19
c000b59a:	77 2f                	ja     c000b5cb <Directory::unlink()+0x47>
c000b59c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5a3:	85 c9                	test   ecx,ecx
c000b5a5:	74 24                	je     c000b5cb <Directory::unlink()+0x47>
c000b5a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5ad:	85 c9                	test   ecx,ecx
c000b5af:	74 1a                	je     c000b5cb <Directory::unlink()+0x47>
c000b5b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b5:	b8 06 00 00 00       	mov    eax,0x6
c000b5ba:	75 0f                	jne    c000b5cb <Directory::unlink()+0x47>
c000b5bc:	50                   	push   eax
c000b5bd:	83 c2 0d             	add    edx,0xd
c000b5c0:	50                   	push   eax
c000b5c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5c3:	52                   	push   edx
c000b5c4:	51                   	push   ecx
c000b5c5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5c8:	83 c4 10             	add    esp,0x10
c000b5cb:	83 c4 0c             	add    esp,0xc
c000b5ce:	c3                   	ret    
c000b5cf:	90                   	nop

c000b5d0 <Directory::rename(char const*)>:
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	b8 0b 00 00 00       	mov    eax,0xb
c000b5d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5e3:	83 f9 19             	cmp    ecx,0x19
c000b5e6:	77 32                	ja     c000b61a <Directory::rename(char const*)+0x4a>
c000b5e8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5ef:	85 c9                	test   ecx,ecx
c000b5f1:	74 27                	je     c000b61a <Directory::rename(char const*)+0x4a>
c000b5f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5f9:	85 c9                	test   ecx,ecx
c000b5fb:	74 1d                	je     c000b61a <Directory::rename(char const*)+0x4a>
c000b5fd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b601:	b8 06 00 00 00       	mov    eax,0x6
c000b606:	75 12                	jne    c000b61a <Directory::rename(char const*)+0x4a>
c000b608:	50                   	push   eax
c000b609:	83 c2 0d             	add    edx,0xd
c000b60c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b60e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b612:	52                   	push   edx
c000b613:	51                   	push   ecx
c000b614:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	83 c4 0c             	add    esp,0xc
c000b61d:	c3                   	ret    

c000b61e <Directory::exists()>:
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	31 c0                	xor    eax,eax
c000b623:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b627:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b62e:	83 f9 19             	cmp    ecx,0x19
c000b631:	77 24                	ja     c000b657 <Directory::exists()+0x39>
c000b633:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b63a:	85 c9                	test   ecx,ecx
c000b63c:	74 19                	je     c000b657 <Directory::exists()+0x39>
c000b63e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b644:	85 c9                	test   ecx,ecx
c000b646:	74 0f                	je     c000b657 <Directory::exists()+0x39>
c000b648:	50                   	push   eax
c000b649:	83 c2 0d             	add    edx,0xd
c000b64c:	50                   	push   eax
c000b64d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b64f:	52                   	push   edx
c000b650:	51                   	push   ecx
c000b651:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b654:	83 c4 10             	add    esp,0x10
c000b657:	83 c4 0c             	add    esp,0xc
c000b65a:	c3                   	ret    
c000b65b:	90                   	nop

c000b65c <Directory::read(dirent*)>:
c000b65c:	83 ec 1c             	sub    esp,0x1c
c000b65f:	b8 0b 00 00 00       	mov    eax,0xb
c000b664:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b668:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b66f:	83 f9 19             	cmp    ecx,0x19
c000b672:	77 30                	ja     c000b6a4 <Directory::read(dirent*)+0x48>
c000b674:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b67b:	85 c9                	test   ecx,ecx
c000b67d:	74 25                	je     c000b6a4 <Directory::read(dirent*)+0x48>
c000b67f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b686:	74 1c                	je     c000b6a4 <Directory::read(dirent*)+0x48>
c000b688:	83 ec 0c             	sub    esp,0xc
c000b68b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b68d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b691:	51                   	push   ecx
c000b692:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b696:	6a 00                	push   0x0
c000b698:	68 10 01 00 00       	push   0x110
c000b69d:	52                   	push   edx
c000b69e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6a1:	83 c4 20             	add    esp,0x20
c000b6a4:	83 c4 1c             	add    esp,0x1c
c000b6a7:	c3                   	ret    

c000b6a8 <Directory::create()>:
c000b6a8:	83 ec 0c             	sub    esp,0xc
c000b6ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b6b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6bb:	83 f9 19             	cmp    ecx,0x19
c000b6be:	77 2f                	ja     c000b6ef <Directory::create()+0x47>
c000b6c0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6c7:	85 c9                	test   ecx,ecx
c000b6c9:	74 24                	je     c000b6ef <Directory::create()+0x47>
c000b6cb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6d1:	85 c9                	test   ecx,ecx
c000b6d3:	74 1a                	je     c000b6ef <Directory::create()+0x47>
c000b6d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6d9:	b8 06 00 00 00       	mov    eax,0x6
c000b6de:	75 0f                	jne    c000b6ef <Directory::create()+0x47>
c000b6e0:	50                   	push   eax
c000b6e1:	83 c2 0d             	add    edx,0xd
c000b6e4:	50                   	push   eax
c000b6e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6e7:	52                   	push   edx
c000b6e8:	51                   	push   ecx
c000b6e9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	83 c4 0c             	add    esp,0xc
c000b6f2:	c3                   	ret    
c000b6f3:	90                   	nop

c000b6f4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b6f4:	b8 0a 00 00 00       	mov    eax,0xa
c000b6f9:	c3                   	ret    
c000b6fa:	66 90                	xchg   ax,ax

c000b6fc <Bus::Bus(char const*)>:
c000b6fc:	83 ec 0c             	sub    esp,0xc
c000b6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b703:	83 ec 08             	sub    esp,0x8
c000b706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b70a:	50                   	push   eax
c000b70b:	e8 28 08 00 00       	call   c000bf38 <Device::Device(char const*)>
c000b710:	83 c4 10             	add    esp,0x10
c000b713:	ba 44 02 02 c0       	mov    edx,0xc0020244
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	89 10                	mov    DWORD PTR [eax],edx
c000b71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b722:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b72c:	90                   	nop
c000b72d:	83 c4 0c             	add    esp,0xc
c000b730:	c3                   	ret    
c000b731:	90                   	nop
c000b732:	66 90                	xchg   ax,ax

c000b734 <Bus::~Bus()>:
c000b734:	83 ec 0c             	sub    esp,0xc
c000b737:	ba 44 02 02 c0       	mov    edx,0xc0020244
c000b73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b740:	89 10                	mov    DWORD PTR [eax],edx
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	50                   	push   eax
c000b74a:	e8 53 05 00 00       	call   c000bca2 <Device::~Device()>
c000b74f:	83 c4 10             	add    esp,0x10
c000b752:	90                   	nop
c000b753:	83 c4 0c             	add    esp,0xc
c000b756:	c3                   	ret    
c000b757:	90                   	nop

c000b758 <Bus::~Bus()>:
c000b758:	83 ec 0c             	sub    esp,0xc
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b762:	e8 cd ff ff ff       	call   c000b734 <Bus::~Bus()>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	83 ec 08             	sub    esp,0x8
c000b76d:	68 58 01 00 00       	push   0x158
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	e8 c4 f0 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	83 c4 0c             	add    esp,0xc
c000b781:	c3                   	ret    

c000b782 <beepThread(void*)>:
c000b782:	83 ec 0c             	sub    esp,0xc
c000b785:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b78a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b78e:	48                   	dec    eax
c000b78f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b794:	75 01                	jne    c000b797 <beepThread(void*)+0x15>
c000b796:	fb                   	sti    
c000b797:	6b c2 0a             	imul   eax,edx,0xa
c000b79a:	83 ec 0c             	sub    esp,0xc
c000b79d:	50                   	push   eax
c000b79e:	e8 31 9b 00 00       	call   c00152d4 <milliTenthSleep(unsigned int)>
c000b7a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7aa:	e8 f5 b9 00 00       	call   c00171a4 <HalMakeBeep(int)>
c000b7af:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7b7:	83 c4 1c             	add    esp,0x1c
c000b7ba:	e9 f9 99 00 00       	jmp    c00151b8 <blockTask(TaskState)>

c000b7bf <Krnl::beep(int, int, bool)>:
c000b7bf:	56                   	push   esi
c000b7c0:	53                   	push   ebx
c000b7c1:	83 ec 10             	sub    esp,0x10
c000b7c4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d0:	e8 cf b9 00 00       	call   c00171a4 <HalMakeBeep(int)>
c000b7d5:	89 f0                	mov    eax,esi
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	84 c0                	test   al,al
c000b7dc:	74 1e                	je     c000b7fc <Krnl::beep(int, int, bool)+0x3d>
c000b7de:	6b db 0a             	imul   ebx,ebx,0xa
c000b7e1:	83 ec 0c             	sub    esp,0xc
c000b7e4:	53                   	push   ebx
c000b7e5:	e8 ea 9a 00 00       	call   c00152d4 <milliTenthSleep(unsigned int)>
c000b7ea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b7f2:	83 c4 14             	add    esp,0x14
c000b7f5:	5b                   	pop    ebx
c000b7f6:	5e                   	pop    esi
c000b7f7:	e9 a8 b9 00 00       	jmp    c00171a4 <HalMakeBeep(int)>
c000b7fc:	68 e6 00 00 00       	push   0xe6
c000b801:	53                   	push   ebx
c000b802:	68 82 b7 00 c0       	push   0xc000b782
c000b807:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b80d:	e8 5a 95 00 00       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c000b812:	83 c4 14             	add    esp,0x14
c000b815:	5b                   	pop    ebx
c000b816:	5e                   	pop    esi
c000b817:	c3                   	ret    

c000b818 <User::loadClockSettings(int)>:
c000b818:	53                   	push   ebx
c000b819:	83 ec 14             	sub    esp,0x14
c000b81c:	68 14 01 00 00       	push   0x114
c000b821:	e8 91 c2 ff ff       	call   c0007ab7 <malloc>
c000b826:	83 c4 0c             	add    esp,0xc
c000b829:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b82f:	68 68 02 02 c0       	push   0xc0020268
c000b834:	50                   	push   eax
c000b835:	89 c3                	mov    ebx,eax
c000b837:	e8 aa f6 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c000b83c:	58                   	pop    eax
c000b83d:	5a                   	pop    edx
c000b83e:	6a 01                	push   0x1
c000b840:	53                   	push   ebx
c000b841:	e8 5c f7 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c000b846:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b849:	e8 b2 f7 ff ff       	call   c000b000 <File::close()>
c000b84e:	83 c4 10             	add    esp,0x10
c000b851:	85 db                	test   ebx,ebx
c000b853:	74 0f                	je     c000b864 <User::loadClockSettings(int)+0x4c>
c000b855:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b857:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b85b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b85e:	83 c4 08             	add    esp,0x8
c000b861:	5b                   	pop    ebx
c000b862:	ff e0                	jmp    eax
c000b864:	83 c4 08             	add    esp,0x8
c000b867:	5b                   	pop    ebx
c000b868:	c3                   	ret    
c000b869:	90                   	nop

c000b86a <Clock::Clock(char const*)>:
c000b86a:	83 ec 0c             	sub    esp,0xc
c000b86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b871:	83 ec 08             	sub    esp,0x8
c000b874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b878:	50                   	push   eax
c000b879:	e8 ba 06 00 00       	call   c000bf38 <Device::Device(char const*)>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	ba 90 02 02 c0       	mov    edx,0xc0020290
c000b886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88a:	89 10                	mov    DWORD PTR [eax],edx
c000b88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b890:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b89a:	90                   	nop
c000b89b:	83 c4 0c             	add    esp,0xc
c000b89e:	c3                   	ret    
c000b89f:	90                   	nop

c000b8a0 <Clock::~Clock()>:
c000b8a0:	83 ec 0c             	sub    esp,0xc
c000b8a3:	ba 90 02 02 c0       	mov    edx,0xc0020290
c000b8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ac:	89 10                	mov    DWORD PTR [eax],edx
c000b8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b2:	83 ec 0c             	sub    esp,0xc
c000b8b5:	50                   	push   eax
c000b8b6:	e8 e7 03 00 00       	call   c000bca2 <Device::~Device()>
c000b8bb:	83 c4 10             	add    esp,0x10
c000b8be:	90                   	nop
c000b8bf:	83 c4 0c             	add    esp,0xc
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <Clock::~Clock()>:
c000b8c4:	83 ec 0c             	sub    esp,0xc
c000b8c7:	83 ec 0c             	sub    esp,0xc
c000b8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ce:	e8 cd ff ff ff       	call   c000b8a0 <Clock::~Clock()>
c000b8d3:	83 c4 10             	add    esp,0x10
c000b8d6:	83 ec 08             	sub    esp,0x8
c000b8d9:	68 58 01 00 00       	push   0x158
c000b8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e2:	e8 58 ef ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000b8e7:	83 c4 10             	add    esp,0x10
c000b8ea:	83 c4 0c             	add    esp,0xc
c000b8ed:	c3                   	ret    

c000b8ee <Clock::timeInSecondsLocal()>:
c000b8ee:	53                   	push   ebx
c000b8ef:	83 ec 14             	sub    esp,0x14
c000b8f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b8f6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8f8:	50                   	push   eax
c000b8f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8fc:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b903:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b909:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b90f:	89 cb                	mov    ebx,ecx
c000b911:	c1 fb 1f             	sar    ebx,0x1f
c000b914:	01 c8                	add    eax,ecx
c000b916:	11 da                	adc    edx,ebx
c000b918:	83 c4 10             	add    esp,0x10
c000b91b:	31 c9                	xor    ecx,ecx
c000b91d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b924:	74 05                	je     c000b92b <Clock::timeInSecondsLocal()+0x3d>
c000b926:	b9 08 07 00 00       	mov    ecx,0x708
c000b92b:	31 db                	xor    ebx,ebx
c000b92d:	01 c8                	add    eax,ecx
c000b92f:	11 da                	adc    edx,ebx
c000b931:	83 c4 08             	add    esp,0x8
c000b934:	5b                   	pop    ebx
c000b935:	c3                   	ret    

c000b936 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b936:	57                   	push   edi
c000b937:	56                   	push   esi
c000b938:	53                   	push   ebx
c000b939:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b93d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b941:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b945:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b947:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b94a:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b951:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b957:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b95d:	99                   	cdq    
c000b95e:	29 c6                	sub    esi,eax
c000b960:	19 d7                	sbb    edi,edx
c000b962:	89 f0                	mov    eax,esi
c000b964:	31 f6                	xor    esi,esi
c000b966:	89 fa                	mov    edx,edi
c000b968:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b96f:	74 05                	je     c000b976 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b971:	be 08 07 00 00       	mov    esi,0x708
c000b976:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b97a:	31 ff                	xor    edi,edi
c000b97c:	29 f0                	sub    eax,esi
c000b97e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b982:	19 fa                	sbb    edx,edi
c000b984:	89 d8                	mov    eax,ebx
c000b986:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b98a:	5b                   	pop    ebx
c000b98b:	5e                   	pop    esi
c000b98c:	5f                   	pop    edi
c000b98d:	ff e0                	jmp    eax

c000b98f <datetimeToSeconds(datetime_t)>:
c000b98f:	55                   	push   ebp
c000b990:	57                   	push   edi
c000b991:	56                   	push   esi
c000b992:	53                   	push   ebx
c000b993:	83 ec 0c             	sub    esp,0xc
c000b996:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b99a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b99e:	89 f7                	mov    edi,esi
c000b9a0:	89 f0                	mov    eax,esi
c000b9a2:	0f b6 cf             	movzx  ecx,bh
c000b9a5:	0f b6 c4             	movzx  eax,ah
c000b9a8:	c1 ef 10             	shr    edi,0x10
c000b9ab:	89 da                	mov    edx,ebx
c000b9ad:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000b9b0:	89 f9                	mov    ecx,edi
c000b9b2:	0f b6 f9             	movzx  edi,cl
c000b9b5:	89 f1                	mov    ecx,esi
c000b9b7:	6b c0 3c             	imul   eax,eax,0x3c
c000b9ba:	0f b6 f1             	movzx  esi,cl
c000b9bd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000b9c3:	0f b6 db             	movzx  ebx,bl
c000b9c6:	c1 ea 10             	shr    edx,0x10
c000b9c9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000b9cf:	01 f8                	add    eax,edi
c000b9d1:	01 f0                	add    eax,esi
c000b9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9d6:	c1 f8 1f             	sar    eax,0x1f
c000b9d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9dd:	89 e8                	mov    eax,ebp
c000b9df:	0f b6 c0             	movzx  eax,al
c000b9e2:	8b 0c 85 e0 02 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfd20]
c000b9e9:	83 f8 01             	cmp    eax,0x1
c000b9ec:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000b9f0:	0f b7 da             	movzx  ebx,dx
c000b9f3:	76 27                	jbe    c000ba1c <datetimeToSeconds(datetime_t)+0x8d>
c000b9f5:	80 e2 03             	and    dl,0x3
c000b9f8:	75 22                	jne    c000ba1c <datetimeToSeconds(datetime_t)+0x8d>
c000b9fa:	31 d2                	xor    edx,edx
c000b9fc:	be 64 00 00 00       	mov    esi,0x64
c000ba01:	89 d8                	mov    eax,ebx
c000ba03:	f7 f6                	div    esi
c000ba05:	85 d2                	test   edx,edx
c000ba07:	75 12                	jne    c000ba1b <datetimeToSeconds(datetime_t)+0x8c>
c000ba09:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba0f:	be 90 01 00 00       	mov    esi,0x190
c000ba14:	99                   	cdq    
c000ba15:	f7 fe                	idiv   esi
c000ba17:	85 d2                	test   edx,edx
c000ba19:	75 01                	jne    c000ba1c <datetimeToSeconds(datetime_t)+0x8d>
c000ba1b:	41                   	inc    ecx
c000ba1c:	83 fb 46             	cmp    ebx,0x46
c000ba1f:	76 48                	jbe    c000ba69 <datetimeToSeconds(datetime_t)+0xda>
c000ba21:	be 46 00 00 00       	mov    esi,0x46
c000ba26:	bf 64 00 00 00       	mov    edi,0x64
c000ba2b:	bd 90 01 00 00       	mov    ebp,0x190
c000ba30:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba36:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba3b:	75 23                	jne    c000ba60 <datetimeToSeconds(datetime_t)+0xd1>
c000ba3d:	89 f0                	mov    eax,esi
c000ba3f:	99                   	cdq    
c000ba40:	f7 ff                	idiv   edi
c000ba42:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba47:	85 d2                	test   edx,edx
c000ba49:	75 15                	jne    c000ba60 <datetimeToSeconds(datetime_t)+0xd1>
c000ba4b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba51:	99                   	cdq    
c000ba52:	f7 fd                	idiv   ebp
c000ba54:	83 fa 01             	cmp    edx,0x1
c000ba57:	19 c0                	sbb    eax,eax
c000ba59:	f7 d0                	not    eax
c000ba5b:	05 6e 01 00 00       	add    eax,0x16e
c000ba60:	46                   	inc    esi
c000ba61:	01 c1                	add    ecx,eax
c000ba63:	39 de                	cmp    esi,ebx
c000ba65:	7c c9                	jl     c000ba30 <datetimeToSeconds(datetime_t)+0xa1>
c000ba67:	eb 34                	jmp    c000ba9d <datetimeToSeconds(datetime_t)+0x10e>
c000ba69:	74 32                	je     c000ba9d <datetimeToSeconds(datetime_t)+0x10e>
c000ba6b:	b8 45 00 00 00       	mov    eax,0x45
c000ba70:	89 c2                	mov    edx,eax
c000ba72:	83 e2 03             	and    edx,0x3
c000ba75:	39 d8                	cmp    eax,ebx
c000ba77:	7e 0f                	jle    c000ba88 <datetimeToSeconds(datetime_t)+0xf9>
c000ba79:	83 fa 01             	cmp    edx,0x1
c000ba7c:	19 d2                	sbb    edx,edx
c000ba7e:	48                   	dec    eax
c000ba7f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ba86:	eb e8                	jmp    c000ba70 <datetimeToSeconds(datetime_t)+0xe1>
c000ba88:	85 d2                	test   edx,edx
c000ba8a:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba8f:	75 0a                	jne    c000ba9b <datetimeToSeconds(datetime_t)+0x10c>
c000ba91:	83 fb 01             	cmp    ebx,0x1
c000ba94:	19 c0                	sbb    eax,eax
c000ba96:	05 6e 01 00 00       	add    eax,0x16e
c000ba9b:	29 c1                	sub    ecx,eax
c000ba9d:	b8 80 51 01 00       	mov    eax,0x15180
c000baa2:	f7 e9                	imul   ecx
c000baa4:	03 04 24             	add    eax,DWORD PTR [esp]
c000baa7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000baab:	83 c4 0c             	add    esp,0xc
c000baae:	5b                   	pop    ebx
c000baaf:	5e                   	pop    esi
c000bab0:	5f                   	pop    edi
c000bab1:	5d                   	pop    ebp
c000bab2:	c3                   	ret    
c000bab3:	90                   	nop

c000bab4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bab4:	57                   	push   edi
c000bab5:	56                   	push   esi
c000bab6:	53                   	push   ebx
c000bab7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000babb:	8b 06                	mov    eax,DWORD PTR [esi]
c000babd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bac8:	e8 c2 fe ff ff       	call   c000b98f <datetimeToSeconds(datetime_t)>
c000bacd:	59                   	pop    ecx
c000bace:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bad5:	5b                   	pop    ebx
c000bad6:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000badc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bae2:	89 cb                	mov    ebx,ecx
c000bae4:	c1 fb 1f             	sar    ebx,0x1f
c000bae7:	29 c8                	sub    eax,ecx
c000bae9:	19 da                	sbb    edx,ebx
c000baeb:	31 c9                	xor    ecx,ecx
c000baed:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000baf4:	74 05                	je     c000bafb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000baf6:	b9 08 07 00 00       	mov    ecx,0x708
c000bafb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000baff:	31 db                	xor    ebx,ebx
c000bb01:	29 c8                	sub    eax,ecx
c000bb03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb07:	19 da                	sbb    edx,ebx
c000bb09:	89 f8                	mov    eax,edi
c000bb0b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb0f:	5b                   	pop    ebx
c000bb10:	5e                   	pop    esi
c000bb11:	5f                   	pop    edi
c000bb12:	ff e0                	jmp    eax

c000bb14 <secondsToDatetime(unsigned long long)>:
c000bb14:	55                   	push   ebp
c000bb15:	57                   	push   edi
c000bb16:	56                   	push   esi
c000bb17:	53                   	push   ebx
c000bb18:	83 ec 1c             	sub    esp,0x1c
c000bb1b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb1f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb27:	6a 00                	push   0x0
c000bb29:	68 80 51 01 00       	push   0x15180
c000bb2e:	55                   	push   ebp
c000bb2f:	57                   	push   edi
c000bb30:	e8 4b 2a 01 00       	call   c001e580 <__udivdi3>
c000bb35:	83 c4 10             	add    esp,0x10
c000bb38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb3c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb42:	6a 00                	push   0x0
c000bb44:	68 80 51 01 00       	push   0x15180
c000bb49:	55                   	push   ebp
c000bb4a:	57                   	push   edi
c000bb4b:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb50:	e8 2b 2b 01 00       	call   c001e680 <__umoddi3>
c000bb55:	83 c4 10             	add    esp,0x10
c000bb58:	99                   	cdq    
c000bb59:	f7 ff                	idiv   edi
c000bb5b:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb60:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb63:	89 d0                	mov    eax,edx
c000bb65:	99                   	cdq    
c000bb66:	f7 ff                	idiv   edi
c000bb68:	85 db                	test   ebx,ebx
c000bb6a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb6d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb70:	79 11                	jns    c000bb83 <secondsToDatetime(unsigned long long)+0x6f>
c000bb72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb76:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb7c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb81:	eb 07                	jmp    c000bb8a <secondsToDatetime(unsigned long long)+0x76>
c000bb83:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb88:	89 d8                	mov    eax,ebx
c000bb8a:	99                   	cdq    
c000bb8b:	bf b4 05 00 00       	mov    edi,0x5b4
c000bb90:	f7 f9                	idiv   ecx
c000bb92:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bb97:	31 d2                	xor    edx,edx
c000bb99:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bb9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bba2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbaa:	01 c3                	add    ebx,eax
c000bbac:	89 d8                	mov    eax,ebx
c000bbae:	f7 f1                	div    ecx
c000bbb0:	31 d2                	xor    edx,edx
c000bbb2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbb5:	89 d8                	mov    eax,ebx
c000bbb7:	f7 f7                	div    edi
c000bbb9:	31 d2                	xor    edx,edx
c000bbbb:	29 c1                	sub    ecx,eax
c000bbbd:	89 d8                	mov    eax,ebx
c000bbbf:	f7 f5                	div    ebp
c000bbc1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbc6:	31 d2                	xor    edx,edx
c000bbc8:	29 c1                	sub    ecx,eax
c000bbca:	89 c8                	mov    eax,ecx
c000bbcc:	f7 f5                	div    ebp
c000bbce:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbd3:	31 d2                	xor    edx,edx
c000bbd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbd9:	89 c8                	mov    eax,ecx
c000bbdb:	f7 f5                	div    ebp
c000bbdd:	31 d2                	xor    edx,edx
c000bbdf:	01 c3                	add    ebx,eax
c000bbe1:	89 c8                	mov    eax,ecx
c000bbe3:	f7 f7                	div    edi
c000bbe5:	bf 99 00 00 00       	mov    edi,0x99
c000bbea:	31 d2                	xor    edx,edx
c000bbec:	29 c3                	sub    ebx,eax
c000bbee:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bbf6:	29 c3                	sub    ebx,eax
c000bbf8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bbfb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bbfe:	83 c1 02             	add    ecx,0x2
c000bc01:	89 c8                	mov    eax,ecx
c000bc03:	bb 05 00 00 00       	mov    ebx,0x5
c000bc08:	f7 f7                	div    edi
c000bc0a:	31 d2                	xor    edx,edx
c000bc0c:	89 c7                	mov    edi,eax
c000bc0e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc14:	83 c0 02             	add    eax,0x2
c000bc17:	f7 f3                	div    ebx
c000bc19:	89 eb                	mov    ebx,ebp
c000bc1b:	29 c3                	sub    ebx,eax
c000bc1d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc23:	88 1e                	mov    BYTE PTR [esi],bl
c000bc25:	19 c0                	sbb    eax,eax
c000bc27:	31 d2                	xor    edx,edx
c000bc29:	83 e0 0c             	and    eax,0xc
c000bc2c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc30:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc38:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc3c:	83 f9 01             	cmp    ecx,0x1
c000bc3f:	0f 96 c2             	setbe  dl
c000bc42:	41                   	inc    ecx
c000bc43:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc46:	01 d0                	add    eax,edx
c000bc48:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc4c:	83 c4 1c             	add    esp,0x1c
c000bc4f:	89 f0                	mov    eax,esi
c000bc51:	5b                   	pop    ebx
c000bc52:	5e                   	pop    esi
c000bc53:	5f                   	pop    edi
c000bc54:	5d                   	pop    ebp
c000bc55:	c2 04 00             	ret    0x4

c000bc58 <Clock::timeInDatetimeLocal()>:
c000bc58:	53                   	push   ebx
c000bc59:	83 ec 14             	sub    esp,0x14
c000bc5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc64:	e8 85 fc ff ff       	call   c000b8ee <Clock::timeInSecondsLocal()>
c000bc69:	83 c4 0c             	add    esp,0xc
c000bc6c:	52                   	push   edx
c000bc6d:	50                   	push   eax
c000bc6e:	53                   	push   ebx
c000bc6f:	e8 a0 fe ff ff       	call   c000bb14 <secondsToDatetime(unsigned long long)>
c000bc74:	89 d8                	mov    eax,ebx
c000bc76:	83 c4 14             	add    esp,0x14
c000bc79:	5b                   	pop    ebx
c000bc7a:	c2 04 00             	ret    0x4
c000bc7d:	90                   	nop

c000bc7e <Device::hibernate()>:
c000bc7e:	c3                   	ret    
c000bc7f:	90                   	nop

c000bc80 <Device::wake()>:
c000bc80:	c3                   	ret    
c000bc81:	90                   	nop

c000bc82 <Device::detect()>:
c000bc82:	c3                   	ret    
c000bc83:	90                   	nop

c000bc84 <Device::disableLegacy()>:
c000bc84:	c3                   	ret    
c000bc85:	90                   	nop

c000bc86 <Device::powerSaving(PowerSavingLevel)>:
c000bc86:	c3                   	ret    
c000bc87:	90                   	nop

c000bc88 <DriverlessDevice::close(int, int, void*)>:
c000bc88:	31 c0                	xor    eax,eax
c000bc8a:	c3                   	ret    
c000bc8b:	90                   	nop

c000bc8c <DriverlessDevice::detect()>:
c000bc8c:	c3                   	ret    
c000bc8d:	90                   	nop

c000bc8e <DriverlessDevice::open(int, int, void*)>:
c000bc8e:	83 ec 18             	sub    esp,0x18
c000bc91:	68 10 03 02 c0       	push   0xc0020310
c000bc96:	e8 26 4b 00 00       	call   c00107c1 <KePanic(char const*)>
c000bc9b:	83 c8 ff             	or     eax,0xffffffff
c000bc9e:	83 c4 1c             	add    esp,0x1c
c000bca1:	c3                   	ret    

c000bca2 <Device::~Device()>:
c000bca2:	ba 70 03 02 c0       	mov    edx,0xc0020370
c000bca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcab:	89 10                	mov    DWORD PTR [eax],edx
c000bcad:	90                   	nop
c000bcae:	c3                   	ret    
c000bcaf:	90                   	nop

c000bcb0 <Device::~Device()>:
c000bcb0:	83 ec 0c             	sub    esp,0xc
c000bcb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bcb7:	e8 e6 ff ff ff       	call   c000bca2 <Device::~Device()>
c000bcbc:	83 c4 04             	add    esp,0x4
c000bcbf:	83 ec 08             	sub    esp,0x8
c000bcc2:	68 58 01 00 00       	push   0x158
c000bcc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccb:	e8 6f eb ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	83 c4 0c             	add    esp,0xc
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <Device::findAndLoadDriver()>:
c000bcd8:	c7 44 24 04 2e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002032e
c000bce0:	e9 58 ec ff ff       	jmp    c000a93d <Dbg::kprintf(char const*, ...)>
c000bce5:	90                   	nop

c000bce6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bce6:	57                   	push   edi
c000bce7:	b9 09 00 00 00       	mov    ecx,0x9
c000bcec:	56                   	push   esi
c000bced:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bcf1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bcf5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bcff:	81 c7 18 01 00 00    	add    edi,0x118
c000bd05:	fc                   	cld    
c000bd06:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd08:	5e                   	pop    esi
c000bd09:	5f                   	pop    edi
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <Device::preOpenACPI(void*, char*, char*)>:
c000bd0c:	57                   	push   edi
c000bd0d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd12:	56                   	push   esi
c000bd13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd1b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd1f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd29:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd2f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd37:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd3d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd41:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd48:	5e                   	pop    esi
c000bd49:	5f                   	pop    edi
c000bd4a:	c3                   	ret    
c000bd4b:	90                   	nop

c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd4c:	53                   	push   ebx
c000bd4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd5d:	0f b6 c0             	movzx  eax,al
c000bd60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd68:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd70:	5b                   	pop    ebx
c000bd71:	e9 aa 05 00 00       	jmp    c000c320 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd76 <Device::getParent()>:
c000bd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd7a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd80:	c3                   	ret    
c000bd81:	90                   	nop

c000bd82 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bd8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd93:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd9b:	e9 f7 06 00 00       	jmp    c000c497 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bda0 <Device::addChild(Device*)>:
c000bda0:	53                   	push   ebx
c000bda1:	83 ec 08             	sub    esp,0x8
c000bda4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdac:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bdb2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bdb8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdba:	85 d2                	test   edx,edx
c000bdbc:	74 04                	je     c000bdc2 <Device::addChild(Device*)+0x22>
c000bdbe:	89 d3                	mov    ebx,edx
c000bdc0:	eb f6                	jmp    c000bdb8 <Device::addChild(Device*)+0x18>
c000bdc2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bdc5:	83 ec 0c             	sub    esp,0xc
c000bdc8:	6a 08                	push   0x8
c000bdca:	e8 e8 bc ff ff       	call   c0007ab7 <malloc>
c000bdcf:	89 03                	mov    DWORD PTR [ebx],eax
c000bdd1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdde:	83 c4 18             	add    esp,0x18
c000bde1:	5b                   	pop    ebx
c000bde2:	c3                   	ret    
c000bde3:	90                   	nop

c000bde4 <Device::removeAllChildren()>:
c000bde4:	56                   	push   esi
c000bde5:	53                   	push   ebx
c000bde6:	52                   	push   edx
c000bde7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdeb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bdf1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdf4:	74 17                	je     c000be0d <Device::removeAllChildren()+0x29>
c000bdf6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bdf9:	85 c0                	test   eax,eax
c000bdfb:	74 0c                	je     c000be09 <Device::removeAllChildren()+0x25>
c000bdfd:	8b 10                	mov    edx,DWORD PTR [eax]
c000bdff:	83 ec 0c             	sub    esp,0xc
c000be02:	50                   	push   eax
c000be03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be06:	83 c4 10             	add    esp,0x10
c000be09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be0b:	eb e4                	jmp    c000bdf1 <Device::removeAllChildren()+0xd>
c000be0d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be19:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be26:	58                   	pop    eax
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	c3                   	ret    

c000be2a <Device::hibernateAll()>:
c000be2a:	53                   	push   ebx
c000be2b:	83 ec 14             	sub    esp,0x14
c000be2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be34:	53                   	push   ebx
c000be35:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be3e:	83 c4 10             	add    esp,0x10
c000be41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be44:	74 0f                	je     c000be55 <Device::hibernateAll()+0x2b>
c000be46:	83 ec 0c             	sub    esp,0xc
c000be49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be4c:	e8 d9 ff ff ff       	call   c000be2a <Device::hibernateAll()>
c000be51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be53:	eb e9                	jmp    c000be3e <Device::hibernateAll()+0x14>
c000be55:	83 c4 08             	add    esp,0x8
c000be58:	5b                   	pop    ebx
c000be59:	c3                   	ret    

c000be5a <Device::wakeAll()>:
c000be5a:	53                   	push   ebx
c000be5b:	83 ec 14             	sub    esp,0x14
c000be5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be64:	53                   	push   ebx
c000be65:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be6e:	83 c4 10             	add    esp,0x10
c000be71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be74:	74 0f                	je     c000be85 <Device::wakeAll()+0x2b>
c000be76:	83 ec 0c             	sub    esp,0xc
c000be79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be7c:	e8 d9 ff ff ff       	call   c000be5a <Device::wakeAll()>
c000be81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be83:	eb e9                	jmp    c000be6e <Device::wakeAll()+0x14>
c000be85:	83 c4 08             	add    esp,0x8
c000be88:	5b                   	pop    ebx
c000be89:	c3                   	ret    

c000be8a <Device::detectAll()>:
c000be8a:	53                   	push   ebx
c000be8b:	83 ec 14             	sub    esp,0x14
c000be8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be94:	53                   	push   ebx
c000be95:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000be98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bea4:	74 0f                	je     c000beb5 <Device::detectAll()+0x2b>
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beac:	e8 d9 ff ff ff       	call   c000be8a <Device::detectAll()>
c000beb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beb3:	eb e9                	jmp    c000be9e <Device::detectAll()+0x14>
c000beb5:	83 c4 08             	add    esp,0x8
c000beb8:	5b                   	pop    ebx
c000beb9:	c3                   	ret    

c000beba <Device::disableLegacyAll()>:
c000beba:	c3                   	ret    
c000bebb:	90                   	nop

c000bebc <Device::loadDriversForAll()>:
c000bebc:	c3                   	ret    
c000bebd:	90                   	nop

c000bebe <Device::closeAll()>:
c000bebe:	53                   	push   ebx
c000bebf:	83 ec 08             	sub    esp,0x8
c000bec2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bec6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bec8:	6a 00                	push   0x0
c000beca:	6a 00                	push   0x0
c000becc:	6a 00                	push   0x0
c000bece:	53                   	push   ebx
c000becf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bed2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bed8:	83 c4 10             	add    esp,0x10
c000bedb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bede:	74 0f                	je     c000beef <Device::closeAll()+0x31>
c000bee0:	83 ec 0c             	sub    esp,0xc
c000bee3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bee6:	e8 d3 ff ff ff       	call   c000bebe <Device::closeAll()>
c000beeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beed:	eb e9                	jmp    c000bed8 <Device::closeAll()+0x1a>
c000beef:	83 c4 08             	add    esp,0x8
c000bef2:	5b                   	pop    ebx
c000bef3:	c3                   	ret    

c000bef4 <Device::powerSavingAll(PowerSavingLevel)>:
c000bef4:	56                   	push   esi
c000bef5:	53                   	push   ebx
c000bef6:	83 ec 0c             	sub    esp,0xc
c000bef9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000befd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf01:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf03:	56                   	push   esi
c000bf04:	53                   	push   ebx
c000bf05:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf0e:	83 c4 10             	add    esp,0x10
c000bf11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf14:	74 0f                	je     c000bf25 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf16:	52                   	push   edx
c000bf17:	52                   	push   edx
c000bf18:	56                   	push   esi
c000bf19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf1c:	e8 d3 ff ff ff       	call   c000bef4 <Device::powerSavingAll(PowerSavingLevel)>
c000bf21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf23:	eb e9                	jmp    c000bf0e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf25:	58                   	pop    eax
c000bf26:	5b                   	pop    ebx
c000bf27:	5e                   	pop    esi
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <Device::setName(char const*)>:
c000bf2a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf32:	e9 19 47 ff ff       	jmp    c0000650 <strcpy>
c000bf37:	90                   	nop

c000bf38 <Device::Device(char const*)>:
c000bf38:	83 ec 1c             	sub    esp,0x1c
c000bf3b:	ba 70 03 02 c0       	mov    edx,0xc0020370
c000bf40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf44:	89 10                	mov    DWORD PTR [eax],edx
c000bf46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf4a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf58:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf66:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf74:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf7e:	83 ec 08             	sub    esp,0x8
c000bf81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf89:	e8 9c ff ff ff       	call   c000bf2a <Device::setName(char const*)>
c000bf8e:	83 c4 10             	add    esp,0x10
c000bf91:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bf99:	83 ec 0c             	sub    esp,0xc
c000bf9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfa0:	e8 12 bb ff ff       	call   c0007ab7 <malloc>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfb9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bfeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfef:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c008:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c016:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c024:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c02e:	90                   	nop
c000c02f:	83 c4 1c             	add    esp,0x1c
c000c032:	c3                   	ret    
c000c033:	90                   	nop

c000c034 <Device::getName()>:
c000c034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c038:	05 d0 00 00 00       	add    eax,0xd0
c000c03d:	c3                   	ret    

c000c03e <DriverlessDevice::DriverlessDevice(char const*)>:
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c045:	83 ec 08             	sub    esp,0x8
c000c048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04c:	50                   	push   eax
c000c04d:	e8 e6 fe ff ff       	call   c000bf38 <Device::Device(char const*)>
c000c052:	83 c4 10             	add    esp,0x10
c000c055:	ba 9c 03 02 c0       	mov    edx,0xc002039c
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	89 10                	mov    DWORD PTR [eax],edx
c000c060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c064:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c06e:	90                   	nop
c000c06f:	83 c4 0c             	add    esp,0xc
c000c072:	c3                   	ret    
c000c073:	90                   	nop

c000c074 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c074:	57                   	push   edi
c000c075:	56                   	push   esi
c000c076:	53                   	push   ebx
c000c077:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c07b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c07f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c083:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c089:	75 0c                	jne    c000c097 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c08b:	52                   	push   edx
c000c08c:	52                   	push   edx
c000c08d:	53                   	push   ebx
c000c08e:	56                   	push   esi
c000c08f:	e8 9e 29 01 00       	call   c001ea32 <LinkedList<Device>::addElement(Device*)>
c000c094:	83 c4 10             	add    esp,0x10
c000c097:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c09d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0a0:	74 12                	je     c000c0b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0a2:	50                   	push   eax
c000c0a3:	57                   	push   edi
c000c0a4:	56                   	push   esi
c000c0a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0a8:	e8 c7 ff ff ff       	call   c000c074 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0af:	83 c4 10             	add    esp,0x10
c000c0b2:	eb e9                	jmp    c000c09d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0b4:	5b                   	pop    ebx
c000c0b5:	5e                   	pop    esi
c000c0b6:	5f                   	pop    edi
c000c0b7:	c3                   	ret    

c000c0b8 <getDevicesOfType(DeviceType)>:
c000c0b8:	53                   	push   ebx
c000c0b9:	83 ec 14             	sub    esp,0x14
c000c0bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c0:	53                   	push   ebx
c000c0c1:	e8 48 2a 01 00       	call   c001eb0e <LinkedList<Device>::LinkedList()>
c000c0c6:	83 c4 0c             	add    esp,0xc
c000c0c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0cd:	53                   	push   ebx
c000c0ce:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0d4:	e8 9b ff ff ff       	call   c000c074 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0d9:	83 c4 18             	add    esp,0x18
c000c0dc:	89 d8                	mov    eax,ebx
c000c0de:	5b                   	pop    ebx
c000c0df:	c2 04 00             	ret    0x4
c000c0e2:	66 90                	xchg   ax,ax

c000c0e4 <HardDiskController::HardDiskController(char const*)>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0eb:	83 ec 08             	sub    esp,0x8
c000c0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f2:	50                   	push   eax
c000c0f3:	e8 40 fe ff ff       	call   c000bf38 <Device::Device(char const*)>
c000c0f8:	83 c4 10             	add    esp,0x10
c000c0fb:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000c100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c104:	89 10                	mov    DWORD PTR [eax],edx
c000c106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c114:	90                   	nop
c000c115:	83 c4 0c             	add    esp,0xc
c000c118:	c3                   	ret    
c000c119:	90                   	nop
c000c11a:	66 90                	xchg   ax,ax

c000c11c <HardDiskController::~HardDiskController()>:
c000c11c:	83 ec 0c             	sub    esp,0xc
c000c11f:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000c124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c128:	89 10                	mov    DWORD PTR [eax],edx
c000c12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	50                   	push   eax
c000c132:	e8 6b fb ff ff       	call   c000bca2 <Device::~Device()>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	90                   	nop
c000c13b:	83 c4 0c             	add    esp,0xc
c000c13e:	c3                   	ret    
c000c13f:	90                   	nop

c000c140 <HardDiskController::~HardDiskController()>:
c000c140:	83 ec 0c             	sub    esp,0xc
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	e8 cd ff ff ff       	call   c000c11c <HardDiskController::~HardDiskController()>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	83 ec 08             	sub    esp,0x8
c000c155:	68 58 01 00 00       	push   0x158
c000c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15e:	e8 dc e6 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 c4 0c             	add    esp,0xc
c000c169:	c3                   	ret    

c000c16a <PhysicalDisk::eject()>:
c000c16a:	83 c8 ff             	or     eax,0xffffffff
c000c16d:	c3                   	ret    

c000c16e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c16e:	83 ec 0c             	sub    esp,0xc
c000c171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c175:	83 ec 08             	sub    esp,0x8
c000c178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17c:	50                   	push   eax
c000c17d:	e8 b6 fd ff ff       	call   c000bf38 <Device::Device(char const*)>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba f4 03 02 c0       	mov    edx,0xc00203f4
c000c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c18e:	89 10                	mov    DWORD PTR [eax],edx
c000c190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c194:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1aa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1bc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1d0:	90                   	nop
c000c1d1:	83 c4 0c             	add    esp,0xc
c000c1d4:	c3                   	ret    
c000c1d5:	90                   	nop

c000c1d6 <PhysicalDisk::startCache()>:
c000c1d6:	56                   	push   esi
c000c1d7:	53                   	push   ebx
c000c1d8:	83 ec 10             	sub    esp,0x10
c000c1db:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1df:	6a 44                	push   0x44
c000c1e1:	e8 d1 b8 ff ff       	call   c0007ab7 <malloc>
c000c1e6:	89 c6                	mov    esi,eax
c000c1e8:	58                   	pop    eax
c000c1e9:	5a                   	pop    edx
c000c1ea:	53                   	push   ebx
c000c1eb:	56                   	push   esi
c000c1ec:	e8 83 17 00 00       	call   c000d974 <VCache::VCache(PhysicalDisk*)>
c000c1f1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c1f7:	83 c4 14             	add    esp,0x14
c000c1fa:	5b                   	pop    ebx
c000c1fb:	5e                   	pop    esi
c000c1fc:	c3                   	ret    
c000c1fd:	90                   	nop

c000c1fe <PhysicalDisk::~PhysicalDisk()>:
c000c1fe:	83 ec 0c             	sub    esp,0xc
c000c201:	ba f4 03 02 c0       	mov    edx,0xc00203f4
c000c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20a:	89 10                	mov    DWORD PTR [eax],edx
c000c20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c210:	83 ec 0c             	sub    esp,0xc
c000c213:	50                   	push   eax
c000c214:	e8 89 fa ff ff       	call   c000bca2 <Device::~Device()>
c000c219:	83 c4 10             	add    esp,0x10
c000c21c:	90                   	nop
c000c21d:	83 c4 0c             	add    esp,0xc
c000c220:	c3                   	ret    
c000c221:	90                   	nop

c000c222 <PhysicalDisk::~PhysicalDisk()>:
c000c222:	83 ec 0c             	sub    esp,0xc
c000c225:	83 ec 0c             	sub    esp,0xc
c000c228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22c:	e8 cd ff ff ff       	call   c000c1fe <PhysicalDisk::~PhysicalDisk()>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	83 ec 08             	sub    esp,0x8
c000c237:	68 6c 01 00 00       	push   0x16c
c000c23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c240:	e8 fa e5 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	83 c4 0c             	add    esp,0xc
c000c24b:	c3                   	ret    

c000c24c <int_handler>:
c000c24c:	55                   	push   ebp
c000c24d:	57                   	push   edi
c000c24e:	56                   	push   esi
c000c24f:	53                   	push   ebx
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c25a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c25e:	74 0b                	je     c000c26b <int_handler+0x1f>
c000c260:	fa                   	cli    
c000c261:	f4                   	hlt    
c000c262:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c269:	75 f5                	jne    c000c260 <int_handler+0x14>
c000c26b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c26e:	8d 46 e0             	lea    eax,[esi-0x20]
c000c271:	83 f8 17             	cmp    eax,0x17
c000c274:	76 40                	jbe    c000c2b6 <int_handler+0x6a>
c000c276:	c1 e6 04             	shl    esi,0x4
c000c279:	31 db                	xor    ebx,ebx
c000c27b:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c281:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c287:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c28b:	85 c0                	test   eax,eax
c000c28d:	74 13                	je     c000c2a2 <int_handler+0x56>
c000c28f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c293:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c296:	74 2c                	je     c000c2c4 <int_handler+0x78>
c000c298:	83 ec 08             	sub    esp,0x8
c000c29b:	52                   	push   edx
c000c29c:	57                   	push   edi
c000c29d:	ff d0                	call   eax
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	83 c3 01             	add    ebx,0x1
c000c2a5:	83 fb 04             	cmp    ebx,0x4
c000c2a8:	75 dd                	jne    c000c287 <int_handler+0x3b>
c000c2aa:	83 c4 0c             	add    esp,0xc
c000c2ad:	31 c0                	xor    eax,eax
c000c2af:	5b                   	pop    ebx
c000c2b0:	31 d2                	xor    edx,edx
c000c2b2:	5e                   	pop    esi
c000c2b3:	5f                   	pop    edi
c000c2b4:	5d                   	pop    ebp
c000c2b5:	c3                   	ret    
c000c2b6:	83 ec 0c             	sub    esp,0xc
c000c2b9:	50                   	push   eax
c000c2ba:	e8 22 af 00 00       	call   c00171e1 <HalEndOfInterrupt(int)>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	eb b2                	jmp    c000c276 <int_handler+0x2a>
c000c2c4:	83 ec 08             	sub    esp,0x8
c000c2c7:	52                   	push   edx
c000c2c8:	57                   	push   edi
c000c2c9:	ff d0                	call   eax
c000c2cb:	83 c4 10             	add    esp,0x10
c000c2ce:	83 c4 0c             	add    esp,0xc
c000c2d1:	5b                   	pop    ebx
c000c2d2:	5e                   	pop    esi
c000c2d3:	5f                   	pop    edi
c000c2d4:	5d                   	pop    ebp
c000c2d5:	c3                   	ret    

c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2d6:	56                   	push   esi
c000c2d7:	31 c0                	xor    eax,eax
c000c2d9:	53                   	push   ebx
c000c2da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2e6:	89 ca                	mov    edx,ecx
c000c2e8:	c1 e2 04             	shl    edx,0x4
c000c2eb:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c2f3:	74 17                	je     c000c30c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c2f5:	83 c0 01             	add    eax,0x1
c000c2f8:	83 f8 04             	cmp    eax,0x4
c000c2fb:	75 ee                	jne    c000c2eb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c2fd:	c7 44 24 0c 24 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020424
c000c305:	5b                   	pop    ebx
c000c306:	5e                   	pop    esi
c000c307:	e9 b5 44 00 00       	jmp    c00107c1 <KePanic(char const*)>
c000c30c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c30f:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c316:	5b                   	pop    ebx
c000c317:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c31e:	5e                   	pop    esi
c000c31f:	c3                   	ret    

c000c320 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c320:	55                   	push   ebp
c000c321:	57                   	push   edi
c000c322:	56                   	push   esi
c000c323:	53                   	push   ebx
c000c324:	83 ec 0c             	sub    esp,0xc
c000c327:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c32d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c331:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c335:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c33c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c33f:	74 57                	je     c000c398 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c341:	84 c0                	test   al,al
c000c343:	89 c7                	mov    edi,eax
c000c345:	74 1d                	je     c000c364 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c347:	83 fe 0f             	cmp    esi,0xf
c000c34a:	0f 8f d9 00 00 00    	jg     c000c429 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c350:	0f b6 b6 60 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde1a0]
c000c357:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c35f:	d1 ef                	shr    edi,1
c000c361:	83 e7 01             	and    edi,0x1
c000c364:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c369:	83 ec 08             	sub    esp,0x8
c000c36c:	31 db                	xor    ebx,ebx
c000c36e:	50                   	push   eax
c000c36f:	68 31 04 02 c0       	push   0xc0020431
c000c374:	e8 c4 e5 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000c379:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c37e:	83 c4 10             	add    esp,0x10
c000c381:	85 c0                	test   eax,eax
c000c383:	7f 59                	jg     c000c3de <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c385:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	68 48 04 02 c0       	push   0xc0020448
c000c390:	e8 2c 44 00 00       	call   c00107c1 <KePanic(char const*)>
c000c395:	83 c4 10             	add    esp,0x10
c000c398:	89 e8                	mov    eax,ebp
c000c39a:	31 d2                	xor    edx,edx
c000c39c:	c1 e0 04             	shl    eax,0x4
c000c39f:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3a6:	85 c9                	test   ecx,ecx
c000c3a8:	0f 84 92 00 00 00    	je     c000c440 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c3ae:	83 c2 01             	add    edx,0x1
c000c3b1:	83 fa 04             	cmp    edx,0x4
c000c3b4:	75 e9                	jne    c000c39f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c3b6:	83 ec 0c             	sub    esp,0xc
c000c3b9:	68 9c 04 02 c0       	push   0xc002049c
c000c3be:	e8 fe 43 00 00       	call   c00107c1 <KePanic(char const*)>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3cb:	83 c4 0c             	add    esp,0xc
c000c3ce:	5b                   	pop    ebx
c000c3cf:	5e                   	pop    esi
c000c3d0:	5f                   	pop    edi
c000c3d1:	5d                   	pop    ebp
c000c3d2:	c3                   	ret    
c000c3d3:	83 c3 01             	add    ebx,0x1
c000c3d6:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3dc:	7e a7                	jle    c000c385 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c3de:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c3e5:	83 ec 08             	sub    esp,0x8
c000c3e8:	56                   	push   esi
c000c3e9:	55                   	push   ebp
c000c3ea:	e8 69 15 01 00       	call   c001d958 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	84 c0                	test   al,al
c000c3f4:	74 dd                	je     c000c3d3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c3f6:	89 f8                	mov    eax,edi
c000c3f8:	83 ec 04             	sub    esp,0x4
c000c3fb:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c402:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c405:	0f b6 f8             	movzx  edi,al
c000c408:	57                   	push   edi
c000c409:	89 e8                	mov    eax,ebp
c000c40b:	6a 00                	push   0x0
c000c40d:	0f b6 c0             	movzx  eax,al
c000c410:	50                   	push   eax
c000c411:	89 f0                	mov    eax,esi
c000c413:	6a 00                	push   0x0
c000c415:	0f b6 c0             	movzx  eax,al
c000c418:	6a 00                	push   0x0
c000c41a:	50                   	push   eax
c000c41b:	53                   	push   ebx
c000c41c:	e8 a3 16 01 00       	call   c001dac4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c421:	83 c4 20             	add    esp,0x20
c000c424:	e9 6f ff ff ff       	jmp    c000c398 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c429:	83 ec 0c             	sub    esp,0xc
c000c42c:	31 ff                	xor    edi,edi
c000c42e:	68 64 04 02 c0       	push   0xc0020464
c000c433:	e8 89 43 00 00       	call   c00107c1 <KePanic(char const*)>
c000c438:	83 c4 10             	add    esp,0x10
c000c43b:	e9 24 ff ff ff       	jmp    c000c364 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c440:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c443:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c447:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c44e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c452:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c459:	83 c4 0c             	add    esp,0xc
c000c45c:	89 f0                	mov    eax,esi
c000c45e:	5b                   	pop    ebx
c000c45f:	5e                   	pop    esi
c000c460:	5f                   	pop    edi
c000c461:	5d                   	pop    ebp
c000c462:	c3                   	ret    

c000c463 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c467:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c46b:	c1 e0 04             	shl    eax,0x4
c000c46e:	8d 50 10             	lea    edx,[eax+0x10]
c000c471:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c477:	74 08                	je     c000c481 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c479:	83 c0 04             	add    eax,0x4
c000c47c:	39 d0                	cmp    eax,edx
c000c47e:	75 f1                	jne    c000c471 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c480:	c3                   	ret    
c000c481:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c48b:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c495:	eb e2                	jmp    c000c479 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c497 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c497:	56                   	push   esi
c000c498:	53                   	push   ebx
c000c499:	83 ec 04             	sub    esp,0x4
c000c49c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4a9:	74 0e                	je     c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4b0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4b7:	75 34                	jne    c000c4ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c4b9:	8d 43 20             	lea    eax,[ebx+0x20]
c000c4bc:	c1 e0 04             	shl    eax,0x4
c000c4bf:	8d 50 10             	lea    edx,[eax+0x10]
c000c4c2:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c4c8:	74 0d                	je     c000c4d7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c4ca:	83 c0 04             	add    eax,0x4
c000c4cd:	39 d0                	cmp    eax,edx
c000c4cf:	75 f1                	jne    c000c4c2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c4d1:	83 c4 04             	add    esp,0x4
c000c4d4:	5b                   	pop    ebx
c000c4d5:	5e                   	pop    esi
c000c4d6:	c3                   	ret    
c000c4d7:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4e1:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4eb:	eb dd                	jmp    c000c4ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c4ed:	83 fb 0f             	cmp    ebx,0xf
c000c4f0:	7f 09                	jg     c000c4fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c4f2:	0f b6 9b 60 1e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde1a0]
c000c4f9:	eb be                	jmp    c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4fb:	83 ec 0c             	sub    esp,0xc
c000c4fe:	68 55 04 02 c0       	push   0xc0020455
c000c503:	e8 b9 42 00 00       	call   c00107c1 <KePanic(char const*)>
c000c508:	83 c4 10             	add    esp,0x10
c000c50b:	eb ac                	jmp    c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c50d <setupINTS()>:
c000c50d:	31 c0                	xor    eax,eax
c000c50f:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c519:	83 c0 10             	add    eax,0x10
c000c51c:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c526:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c530:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c53a:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c544:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c54e:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c558:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c562:	3d 00 10 00 00       	cmp    eax,0x1000
c000c567:	75 a6                	jne    c000c50f <setupINTS()+0x2>
c000c569:	c3                   	ret    

c000c56a <convertLegacyIRQNumber(int)>:
c000c56a:	83 ec 0c             	sub    esp,0xc
c000c56d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c577:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c57e:	74 0c                	je     c000c58c <convertLegacyIRQNumber(int)+0x22>
c000c580:	83 f8 0f             	cmp    eax,0xf
c000c583:	7f 0b                	jg     c000c590 <convertLegacyIRQNumber(int)+0x26>
c000c585:	0f b6 80 60 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde1a0]
c000c58c:	83 c4 0c             	add    esp,0xc
c000c58f:	c3                   	ret    
c000c590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c594:	83 ec 0c             	sub    esp,0xc
c000c597:	68 64 04 02 c0       	push   0xc0020464
c000c59c:	e8 20 42 00 00       	call   c00107c1 <KePanic(char const*)>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5a8:	83 c4 0c             	add    esp,0xc
c000c5ab:	c3                   	ret    

c000c5ac <startGUI(void*)>:
c000c5ac:	55                   	push   ebp
c000c5ad:	89 e5                	mov    ebp,esp
c000c5af:	53                   	push   ebx
c000c5b0:	83 ec 04             	sub    esp,0x4
c000c5b3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5b8:	83 e8 01             	sub    eax,0x1
c000c5bb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5c0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5c5:	85 c0                	test   eax,eax
c000c5c7:	75 01                	jne    c000c5ca <startGUI(void*)+0x1e>
c000c5c9:	fb                   	sti    
c000c5ca:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5d0:	83 ec 08             	sub    esp,0x8
c000c5d3:	6a 01                	push   0x1
c000c5d5:	68 c1 04 02 c0       	push   0xc00204c1
c000c5da:	e8 71 7f 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000c5df:	83 c4 10             	add    esp,0x10
c000c5e2:	83 ec 08             	sub    esp,0x8
c000c5e5:	53                   	push   ebx
c000c5e6:	50                   	push   eax
c000c5e7:	e8 a4 81 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000c5ec:	83 c4 10             	add    esp,0x10
c000c5ef:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5f5:	83 ec 08             	sub    esp,0x8
c000c5f8:	6a 01                	push   0x1
c000c5fa:	68 db 04 02 c0       	push   0xc00204db
c000c5ff:	e8 4c 7f 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000c604:	83 c4 10             	add    esp,0x10
c000c607:	83 ec 08             	sub    esp,0x8
c000c60a:	53                   	push   ebx
c000c60b:	50                   	push   eax
c000c60c:	e8 7f 81 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	90                   	nop
c000c615:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c618:	c9                   	leave  
c000c619:	c3                   	ret    

c000c61a <startGUIVESA(void*)>:
c000c61a:	55                   	push   ebp
c000c61b:	89 e5                	mov    ebp,esp
c000c61d:	53                   	push   ebx
c000c61e:	83 ec 04             	sub    esp,0x4
c000c621:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c626:	83 e8 01             	sub    eax,0x1
c000c629:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c62e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c633:	85 c0                	test   eax,eax
c000c635:	75 01                	jne    c000c638 <startGUIVESA(void*)+0x1e>
c000c637:	fb                   	sti    
c000c638:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c63e:	83 ec 08             	sub    esp,0x8
c000c641:	6a 01                	push   0x1
c000c643:	68 f9 04 02 c0       	push   0xc00204f9
c000c648:	e8 03 7f 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	83 ec 08             	sub    esp,0x8
c000c653:	53                   	push   ebx
c000c654:	50                   	push   eax
c000c655:	e8 36 81 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c663:	83 ec 08             	sub    esp,0x8
c000c666:	6a 01                	push   0x1
c000c668:	68 db 04 02 c0       	push   0xc00204db
c000c66d:	e8 de 7e 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000c672:	83 c4 10             	add    esp,0x10
c000c675:	83 ec 08             	sub    esp,0x8
c000c678:	53                   	push   ebx
c000c679:	50                   	push   eax
c000c67a:	e8 11 81 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000c67f:	83 c4 10             	add    esp,0x10
c000c682:	90                   	nop
c000c683:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c686:	c9                   	leave  
c000c687:	c3                   	ret    

c000c688 <sendKeyToTerminal(unsigned char)>:
c000c688:	55                   	push   ebp
c000c689:	89 e5                	mov    ebp,esp
c000c68b:	83 ec 28             	sub    esp,0x28
c000c68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c691:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c694:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c699:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c69d:	83 ec 08             	sub    esp,0x8
c000c6a0:	52                   	push   edx
c000c6a1:	50                   	push   eax
c000c6a2:	e8 eb c6 ff ff       	call   c0008d92 <VgaText::receiveKey(unsigned char)>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6ae:	83 f8 0a             	cmp    eax,0xa
c000c6b1:	74 16                	je     c000c6c9 <sendKeyToTerminal(unsigned char)+0x41>
c000c6b3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6b7:	83 f8 03             	cmp    eax,0x3
c000c6ba:	74 0d                	je     c000c6c9 <sendKeyToTerminal(unsigned char)+0x41>
c000c6bc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6c0:	83 f8 1c             	cmp    eax,0x1c
c000c6c3:	0f 85 97 00 00 00    	jne    c000c760 <sendKeyToTerminal(unsigned char)+0xd8>
c000c6c9:	fa                   	cli    
c000c6ca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6cf:	83 c0 01             	add    eax,0x1
c000c6d2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6d7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6dc:	83 c0 01             	add    eax,0x1
c000c6df:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6e4:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c6e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6ec:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c6f6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c6fa:	74 1f                	je     c000c71b <sendKeyToTerminal(unsigned char)+0x93>
c000c6fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c6ff:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c702:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c705:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c70b:	83 ec 0c             	sub    esp,0xc
c000c70e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c711:	e8 9a 8d 00 00       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c000c716:	83 c4 10             	add    esp,0x10
c000c719:	eb db                	jmp    c000c6f6 <sendKeyToTerminal(unsigned char)+0x6e>
c000c71b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c720:	83 e8 01             	sub    eax,0x1
c000c723:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c728:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c72d:	85 c0                	test   eax,eax
c000c72f:	75 18                	jne    c000c749 <sendKeyToTerminal(unsigned char)+0xc1>
c000c731:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c736:	85 c0                	test   eax,eax
c000c738:	74 0f                	je     c000c749 <sendKeyToTerminal(unsigned char)+0xc1>
c000c73a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c744:	e8 6f 88 00 00       	call   c0014fb8 <schedule()>
c000c749:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c74e:	83 e8 01             	sub    eax,0x1
c000c751:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c756:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c75b:	85 c0                	test   eax,eax
c000c75d:	75 01                	jne    c000c760 <sendKeyToTerminal(unsigned char)+0xd8>
c000c75f:	fb                   	sti    
c000c760:	90                   	nop
c000c761:	c9                   	leave  
c000c762:	c3                   	ret    

c000c763 <sendKeyboardToken(KeyboardToken)>:
c000c763:	55                   	push   ebp
c000c764:	89 e5                	mov    ebp,esp
c000c766:	83 ec 18             	sub    esp,0x18
c000c769:	e8 a3 40 00 00       	call   c0010811 <Krnl::userIOReceived()>
c000c76e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c774:	0f b7 c0             	movzx  eax,ax
c000c777:	83 f2 01             	xor    edx,0x1
c000c77a:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c780:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c785:	85 c0                	test   eax,eax
c000c787:	74 24                	je     c000c7ad <sendKeyboardToken(KeyboardToken)+0x4a>
c000c789:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c78f:	83 ec 04             	sub    esp,0x4
c000c792:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c797:	83 ec 08             	sub    esp,0x8
c000c79a:	89 e0                	mov    eax,esp
c000c79c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c79f:	89 08                	mov    DWORD PTR [eax],ecx
c000c7a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c7a4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c7a8:	ff d2                	call   edx
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7b1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7b4:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7b9:	0f b6 d2             	movzx  edx,dl
c000c7bc:	0f b6 c0             	movzx  eax,al
c000c7bf:	39 c2                	cmp    edx,eax
c000c7c1:	74 1c                	je     c000c7df <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7c3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7c6:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7cb:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7d0:	0f b6 c0             	movzx  eax,al
c000c7d3:	83 ec 0c             	sub    esp,0xc
c000c7d6:	50                   	push   eax
c000c7d7:	e8 12 bd ff ff       	call   c00084ee <setTerminalScrollLock(bool)>
c000c7dc:	83 c4 10             	add    esp,0x10
c000c7df:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c7e2:	0f b6 c0             	movzx  eax,al
c000c7e5:	85 c0                	test   eax,eax
c000c7e7:	0f 84 da 00 00 00    	je     c000c8c7 <sendKeyboardToken(KeyboardToken)+0x164>
c000c7ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f0:	0f b7 c0             	movzx  eax,ax
c000c7f3:	3d 18 03 00 00       	cmp    eax,0x318
c000c7f8:	75 06                	jne    c000c800 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c7fa:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c803:	0f b7 c0             	movzx  eax,ax
c000c806:	3d 19 03 00 00       	cmp    eax,0x319
c000c80b:	75 06                	jne    c000c813 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c80d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c816:	0f b7 c0             	movzx  eax,ax
c000c819:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c81e:	75 06                	jne    c000c826 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c820:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c829:	0f b7 c0             	movzx  eax,ax
c000c82c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c831:	75 06                	jne    c000c839 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c833:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83c:	0f b7 c0             	movzx  eax,ax
c000c83f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c844:	75 06                	jne    c000c84c <sendKeyboardToken(KeyboardToken)+0xe9>
c000c846:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c84c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84f:	0f b7 c0             	movzx  eax,ax
c000c852:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c857:	75 06                	jne    c000c85f <sendKeyboardToken(KeyboardToken)+0xfc>
c000c859:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c85f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c862:	0f b7 c0             	movzx  eax,ax
c000c865:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c86a:	75 06                	jne    c000c872 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c86c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c875:	0f b7 c0             	movzx  eax,ax
c000c878:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c87d:	75 06                	jne    c000c885 <sendKeyboardToken(KeyboardToken)+0x122>
c000c87f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c888:	0f b7 c0             	movzx  eax,ax
c000c88b:	3d 20 03 00 00       	cmp    eax,0x320
c000c890:	75 06                	jne    c000c898 <sendKeyboardToken(KeyboardToken)+0x135>
c000c892:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89b:	0f b7 c0             	movzx  eax,ax
c000c89e:	3d 21 03 00 00       	cmp    eax,0x321
c000c8a3:	75 06                	jne    c000c8ab <sendKeyboardToken(KeyboardToken)+0x148>
c000c8a5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ae:	0f b7 c0             	movzx  eax,ax
c000c8b1:	3d 22 03 00 00       	cmp    eax,0x322
c000c8b6:	0f 85 f1 00 00 00    	jne    c000c9ad <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8bc:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8c2:	e9 e6 00 00 00       	jmp    c000c9ad <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ca:	0f b7 c0             	movzx  eax,ax
c000c8cd:	3d 18 03 00 00       	cmp    eax,0x318
c000c8d2:	75 0a                	jne    c000c8de <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8d4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e1:	0f b7 c0             	movzx  eax,ax
c000c8e4:	3d 19 03 00 00       	cmp    eax,0x319
c000c8e9:	75 0a                	jne    c000c8f5 <sendKeyboardToken(KeyboardToken)+0x192>
c000c8eb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c8f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f8:	0f b7 c0             	movzx  eax,ax
c000c8fb:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c900:	75 0a                	jne    c000c90c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c902:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c908:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c90c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90f:	0f b7 c0             	movzx  eax,ax
c000c912:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c917:	75 0a                	jne    c000c923 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c919:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c91f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c926:	0f b7 c0             	movzx  eax,ax
c000c929:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c92e:	75 0a                	jne    c000c93a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c930:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c936:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c93a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93d:	0f b7 c0             	movzx  eax,ax
c000c940:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c945:	75 0a                	jne    c000c951 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c947:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c94d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c954:	0f b7 c0             	movzx  eax,ax
c000c957:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c95c:	75 0a                	jne    c000c968 <sendKeyboardToken(KeyboardToken)+0x205>
c000c95e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c964:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96b:	0f b7 c0             	movzx  eax,ax
c000c96e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c973:	75 0a                	jne    c000c97f <sendKeyboardToken(KeyboardToken)+0x21c>
c000c975:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c97b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c97f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c982:	0f b7 c0             	movzx  eax,ax
c000c985:	3d 20 03 00 00       	cmp    eax,0x320
c000c98a:	75 0a                	jne    c000c996 <sendKeyboardToken(KeyboardToken)+0x233>
c000c98c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c992:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c999:	0f b7 c0             	movzx  eax,ax
c000c99c:	3d 21 03 00 00       	cmp    eax,0x321
c000c9a1:	75 0a                	jne    c000c9ad <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9a3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b0:	0f b7 c0             	movzx  eax,ax
c000c9b3:	3d 00 02 00 00       	cmp    eax,0x200
c000c9b8:	75 2f                	jne    c000c9e9 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9ba:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9bf:	83 f0 01             	xor    eax,0x1
c000c9c2:	0f b6 c0             	movzx  eax,al
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	74 20                	je     c000c9e9 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9c9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9ce:	6a 01                	push   0x1
c000c9d0:	6a 00                	push   0x0
c000c9d2:	68 ac c5 00 c0       	push   0xc000c5ac
c000c9d7:	50                   	push   eax
c000c9d8:	e8 8f 83 00 00       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9e7:	eb 3a                	jmp    c000ca23 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ec:	0f b7 c0             	movzx  eax,ax
c000c9ef:	3d 01 02 00 00       	cmp    eax,0x201
c000c9f4:	75 2d                	jne    c000ca23 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9f6:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9fb:	83 f0 01             	xor    eax,0x1
c000c9fe:	0f b6 c0             	movzx  eax,al
c000ca01:	85 c0                	test   eax,eax
c000ca03:	74 1e                	je     c000ca23 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca05:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca0a:	6a 01                	push   0x1
c000ca0c:	6a 00                	push   0x0
c000ca0e:	68 1a c6 00 c0       	push   0xc000c61a
c000ca13:	50                   	push   eax
c000ca14:	e8 53 83 00 00       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca26:	0f b7 c0             	movzx  eax,ax
c000ca29:	3d 25 03 00 00       	cmp    eax,0x325
c000ca2e:	75 06                	jne    c000ca36 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca30:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca39:	0f b7 c0             	movzx  eax,ax
c000ca3c:	3d 24 03 00 00       	cmp    eax,0x324
c000ca41:	75 06                	jne    c000ca49 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca43:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4c:	0f b7 c0             	movzx  eax,ax
c000ca4f:	3d 23 03 00 00       	cmp    eax,0x323
c000ca54:	75 06                	jne    c000ca5c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca56:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5f:	0f b7 c0             	movzx  eax,ax
c000ca62:	3d 26 03 00 00       	cmp    eax,0x326
c000ca67:	75 06                	jne    c000ca6f <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca69:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca72:	0f b7 c0             	movzx  eax,ax
c000ca75:	3d 27 03 00 00       	cmp    eax,0x327
c000ca7a:	75 06                	jne    c000ca82 <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca7c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca85:	0f b7 c0             	movzx  eax,ax
c000ca88:	3d 22 03 00 00       	cmp    eax,0x322
c000ca8d:	75 06                	jne    c000ca95 <sendKeyboardToken(KeyboardToken)+0x332>
c000ca8f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ca95:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ca99:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ca9c:	83 f0 01             	xor    eax,0x1
c000ca9f:	0f b6 c0             	movzx  eax,al
c000caa2:	85 c0                	test   eax,eax
c000caa4:	74 7c                	je     c000cb22 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000caa6:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000caab:	0f b6 c0             	movzx  eax,al
c000caae:	85 c0                	test   eax,eax
c000cab0:	74 43                	je     c000caf5 <sendKeyboardToken(KeyboardToken)+0x392>
c000cab2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cab6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000caba:	85 c0                	test   eax,eax
c000cabc:	74 2b                	je     c000cae9 <sendKeyboardToken(KeyboardToken)+0x386>
c000cabe:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cac4:	89 d0                	mov    eax,edx
c000cac6:	c1 e0 02             	shl    eax,0x2
c000cac9:	01 d0                	add    eax,edx
c000cacb:	d1 e0                	shl    eax,1
c000cacd:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad5:	0f b7 c0             	movzx  eax,ax
c000cad8:	8d 50 d0             	lea    edx,[eax-0x30]
c000cadb:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cae0:	01 d0                	add    eax,edx
c000cae2:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cae7:	eb 71                	jmp    c000cb5a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cae9:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000caf3:	eb 65                	jmp    c000cb5a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000caf5:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cafa:	85 c0                	test   eax,eax
c000cafc:	74 18                	je     c000cb16 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cafe:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb03:	0f b6 c0             	movzx  eax,al
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	50                   	push   eax
c000cb0a:	e8 79 fb ff ff       	call   c000c688 <sendKeyToTerminal(unsigned char)>
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb16:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb20:	eb 38                	jmp    c000cb5a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb25:	0f b7 c0             	movzx  eax,ax
c000cb28:	3d 01 01 00 00       	cmp    eax,0x101
c000cb2d:	75 2b                	jne    c000cb5a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb2f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb34:	85 c0                	test   eax,eax
c000cb36:	74 18                	je     c000cb50 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb38:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb3d:	0f b6 c0             	movzx  eax,al
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	50                   	push   eax
c000cb44:	e8 3f fb ff ff       	call   c000c688 <sendKeyToTerminal(unsigned char)>
c000cb49:	83 c4 10             	add    esp,0x10
c000cb4c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb50:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb5a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb5d:	83 f0 01             	xor    eax,0x1
c000cb60:	0f b6 c0             	movzx  eax,al
c000cb63:	85 c0                	test   eax,eax
c000cb65:	74 5a                	je     c000cbc1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb67:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb6a:	83 f0 01             	xor    eax,0x1
c000cb6d:	0f b6 c0             	movzx  eax,al
c000cb70:	85 c0                	test   eax,eax
c000cb72:	74 4d                	je     c000cbc1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb74:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb79:	83 f0 01             	xor    eax,0x1
c000cb7c:	0f b6 c0             	movzx  eax,al
c000cb7f:	85 c0                	test   eax,eax
c000cb81:	74 3e                	je     c000cbc1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb86:	0f b7 c0             	movzx  eax,ax
c000cb89:	83 f8 1f             	cmp    eax,0x1f
c000cb8c:	76 0b                	jbe    c000cb99 <sendKeyboardToken(KeyboardToken)+0x436>
c000cb8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb91:	0f b7 c0             	movzx  eax,ax
c000cb94:	83 f8 7e             	cmp    eax,0x7e
c000cb97:	76 16                	jbe    c000cbaf <sendKeyboardToken(KeyboardToken)+0x44c>
c000cb99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9c:	0f b7 c0             	movzx  eax,ax
c000cb9f:	83 f8 0a             	cmp    eax,0xa
c000cba2:	74 0b                	je     c000cbaf <sendKeyboardToken(KeyboardToken)+0x44c>
c000cba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba7:	0f b7 c0             	movzx  eax,ax
c000cbaa:	83 f8 08             	cmp    eax,0x8
c000cbad:	75 12                	jne    c000cbc1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb2:	0f b6 c0             	movzx  eax,al
c000cbb5:	83 ec 0c             	sub    esp,0xc
c000cbb8:	50                   	push   eax
c000cbb9:	e8 ca fa ff ff       	call   c000c688 <sendKeyToTerminal(unsigned char)>
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbc4:	83 f0 01             	xor    eax,0x1
c000cbc7:	0f b6 c0             	movzx  eax,al
c000cbca:	85 c0                	test   eax,eax
c000cbcc:	74 5d                	je     c000cc2b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbce:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbd1:	83 f0 01             	xor    eax,0x1
c000cbd4:	0f b6 c0             	movzx  eax,al
c000cbd7:	85 c0                	test   eax,eax
c000cbd9:	74 50                	je     c000cc2b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbdb:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbe0:	0f b6 c0             	movzx  eax,al
c000cbe3:	85 c0                	test   eax,eax
c000cbe5:	74 44                	je     c000cc2b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbea:	0f b7 c0             	movzx  eax,ax
c000cbed:	83 f8 3f             	cmp    eax,0x3f
c000cbf0:	76 39                	jbe    c000cc2b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf5:	0f b7 c0             	movzx  eax,ax
c000cbf8:	83 f8 7f             	cmp    eax,0x7f
c000cbfb:	77 2e                	ja     c000cc2b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc00:	88 c2                	mov    dl,al
c000cc02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc05:	0f b7 c0             	movzx  eax,ax
c000cc08:	83 f8 5f             	cmp    eax,0x5f
c000cc0b:	76 04                	jbe    c000cc11 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc0d:	b0 20                	mov    al,0x20
c000cc0f:	eb 02                	jmp    c000cc13 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc11:	b0 00                	mov    al,0x0
c000cc13:	89 d1                	mov    ecx,edx
c000cc15:	29 c1                	sub    ecx,eax
c000cc17:	89 c8                	mov    eax,ecx
c000cc19:	83 e8 40             	sub    eax,0x40
c000cc1c:	0f b6 c0             	movzx  eax,al
c000cc1f:	83 ec 0c             	sub    esp,0xc
c000cc22:	50                   	push   eax
c000cc23:	e8 60 fa ff ff       	call   c000c688 <sendKeyToTerminal(unsigned char)>
c000cc28:	83 c4 10             	add    esp,0x10
c000cc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2e:	0f b7 c0             	movzx  eax,ax
c000cc31:	3d 00 03 00 00       	cmp    eax,0x300
c000cc36:	75 12                	jne    c000cc4a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc38:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc3b:	83 f0 01             	xor    eax,0x1
c000cc3e:	0f b6 c0             	movzx  eax,al
c000cc41:	85 c0                	test   eax,eax
c000cc43:	74 05                	je     c000cc4a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc45:	e8 a5 b8 ff ff       	call   c00084ef <doTerminalCycle()>
c000cc4a:	90                   	nop
c000cc4b:	c9                   	leave  
c000cc4c:	c3                   	ret    

c000cc4d <clearInternalKeybuffer(VgaText*)>:
c000cc4d:	55                   	push   ebp
c000cc4e:	89 e5                	mov    ebp,esp
c000cc50:	83 ec 08             	sub    esp,0x8
c000cc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc56:	05 02 01 00 00       	add    eax,0x102
c000cc5b:	83 ec 0c             	sub    esp,0xc
c000cc5e:	50                   	push   eax
c000cc5f:	e8 1c 39 ff ff       	call   c0000580 <strlen>
c000cc64:	83 c4 10             	add    esp,0x10
c000cc67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc6a:	81 c2 02 01 00 00    	add    edx,0x102
c000cc70:	83 ec 04             	sub    esp,0x4
c000cc73:	50                   	push   eax
c000cc74:	6a 00                	push   0x0
c000cc76:	52                   	push   edx
c000cc77:	e8 74 38 ff ff       	call   c00004f0 <memset>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	90                   	nop
c000cc80:	c9                   	leave  
c000cc81:	c3                   	ret    

c000cc82 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc82:	55                   	push   ebp
c000cc83:	89 e5                	mov    ebp,esp
c000cc85:	83 ec 18             	sub    esp,0x18
c000cc88:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc8d:	85 c0                	test   eax,eax
c000cc8f:	74 2a                	je     c000ccbb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cc91:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cc97:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000cc9d:	83 ec 04             	sub    esp,0x4
c000cca0:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cca5:	83 ec 08             	sub    esp,0x8
c000cca8:	89 e0                	mov    eax,esp
c000ccaa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000ccad:	89 08                	mov    DWORD PTR [eax],ecx
c000ccaf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000ccb2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ccb6:	ff d2                	call   edx
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	fb                   	sti    
c000ccbc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ccc3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ccc7:	0f 84 0d 01 00 00    	je     c000cdda <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccd0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ccd6:	0f be c0             	movsx  eax,al
c000ccd9:	85 c0                	test   eax,eax
c000ccdb:	75 2c                	jne    c000cd09 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000ccdd:	fa                   	cli    
c000ccde:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cce3:	83 c0 01             	add    eax,0x1
c000cce6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cceb:	e8 c8 82 00 00       	call   c0014fb8 <schedule()>
c000ccf0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccf5:	83 e8 01             	sub    eax,0x1
c000ccf8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccfd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd02:	85 c0                	test   eax,eax
c000cd04:	75 c7                	jne    c000cccd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd06:	fb                   	sti    
c000cd07:	eb c4                	jmp    c000cccd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd0c:	8d 50 01             	lea    edx,[eax+0x1]
c000cd0f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd12:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd15:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd1b:	88 10                	mov    BYTE PTR [eax],dl
c000cd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd20:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd26:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd29:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd2d:	83 f8 03             	cmp    eax,0x3
c000cd30:	75 1e                	jne    c000cd50 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd37:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd3c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd42:	83 ec 08             	sub    esp,0x8
c000cd45:	6a 02                	push   0x2
c000cd47:	50                   	push   eax
c000cd48:	e8 0e 3f 00 00       	call   c0010c5b <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd54:	83 f8 1c             	cmp    eax,0x1c
c000cd57:	75 1e                	jne    c000cd77 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd59:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd63:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd69:	83 ec 08             	sub    esp,0x8
c000cd6c:	6a 09                	push   0x9
c000cd6e:	50                   	push   eax
c000cd6f:	e8 e7 3e 00 00       	call   c0010c5b <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7a:	05 02 01 00 00       	add    eax,0x102
c000cd7f:	83 ec 0c             	sub    esp,0xc
c000cd82:	50                   	push   eax
c000cd83:	e8 f8 37 ff ff       	call   c0000580 <strlen>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd8e:	81 c2 02 01 00 00    	add    edx,0x102
c000cd94:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd9a:	81 c2 02 01 00 00    	add    edx,0x102
c000cda0:	83 ec 04             	sub    esp,0x4
c000cda3:	50                   	push   eax
c000cda4:	51                   	push   ecx
c000cda5:	52                   	push   edx
c000cda6:	e8 25 36 ff ff       	call   c00003d0 <memmove>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cdb2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cdb6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdba:	83 f8 0a             	cmp    eax,0xa
c000cdbd:	74 16                	je     c000cdd5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdbf:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdc3:	83 f8 03             	cmp    eax,0x3
c000cdc6:	74 0d                	je     c000cdd5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdc8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdcc:	83 f8 1c             	cmp    eax,0x1c
c000cdcf:	0f 85 ee fe ff ff    	jne    c000ccc3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cdd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdd8:	eb 03                	jmp    c000cddd <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cdda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cddd:	c9                   	leave  
c000cdde:	c3                   	ret    
c000cddf:	90                   	nop

c000cde0 <Keyboard::Keyboard(char const*)>:
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde7:	83 ec 08             	sub    esp,0x8
c000cdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdee:	50                   	push   eax
c000cdef:	e8 44 f1 ff ff       	call   c000bf38 <Device::Device(char const*)>
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000cdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce00:	89 10                	mov    DWORD PTR [eax],edx
c000ce02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce06:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce10:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce17:	90                   	nop
c000ce18:	83 c4 0c             	add    esp,0xc
c000ce1b:	c3                   	ret    

c000ce1c <Keyboard::~Keyboard()>:
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce28:	89 10                	mov    DWORD PTR [eax],edx
c000ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2e:	83 ec 0c             	sub    esp,0xc
c000ce31:	50                   	push   eax
c000ce32:	e8 6b ee ff ff       	call   c000bca2 <Device::~Device()>
c000ce37:	83 c4 10             	add    esp,0x10
c000ce3a:	90                   	nop
c000ce3b:	83 c4 0c             	add    esp,0xc
c000ce3e:	c3                   	ret    
c000ce3f:	90                   	nop

c000ce40 <Keyboard::~Keyboard()>:
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	83 ec 0c             	sub    esp,0xc
c000ce46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4a:	e8 cd ff ff ff       	call   c000ce1c <Keyboard::~Keyboard()>
c000ce4f:	83 c4 10             	add    esp,0x10
c000ce52:	83 ec 08             	sub    esp,0x8
c000ce55:	68 5c 01 00 00       	push   0x15c
c000ce5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5e:	e8 dc d9 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000ce63:	83 c4 10             	add    esp,0x10
c000ce66:	83 c4 0c             	add    esp,0xc
c000ce69:	c3                   	ret    

c000ce6a <LogicalDisk::close(int, int, void*)>:
c000ce6a:	83 c8 ff             	or     eax,0xffffffff
c000ce6d:	c3                   	ret    

c000ce6e <LogicalDisk::~LogicalDisk()>:
c000ce6e:	83 ec 0c             	sub    esp,0xc
c000ce71:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000ce76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7a:	89 10                	mov    DWORD PTR [eax],edx
c000ce7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	50                   	push   eax
c000ce84:	e8 19 ee ff ff       	call   c000bca2 <Device::~Device()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	90                   	nop
c000ce8d:	83 c4 0c             	add    esp,0xc
c000ce90:	c3                   	ret    
c000ce91:	90                   	nop

c000ce92 <LogicalDisk::~LogicalDisk()>:
c000ce92:	83 ec 0c             	sub    esp,0xc
c000ce95:	83 ec 0c             	sub    esp,0xc
c000ce98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9c:	e8 cd ff ff ff       	call   c000ce6e <LogicalDisk::~LogicalDisk()>
c000cea1:	83 c4 10             	add    esp,0x10
c000cea4:	83 ec 08             	sub    esp,0x8
c000cea7:	68 78 01 00 00       	push   0x178
c000ceac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb0:	e8 8a d9 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	83 c4 0c             	add    esp,0xc
c000cebb:	c3                   	ret    

c000cebc <LogicalDisk::open(int, int, void*)>:
c000cebc:	83 ec 18             	sub    esp,0x18
c000cebf:	68 48 05 02 c0       	push   0xc0020548
c000cec4:	e8 f8 38 00 00       	call   c00107c1 <KePanic(char const*)>
c000cec9:	83 c8 ff             	or     eax,0xffffffff
c000cecc:	83 c4 1c             	add    esp,0x1c
c000cecf:	c3                   	ret    

c000ced0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ced0:	53                   	push   ebx
c000ced1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ced5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ced9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cedd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cee3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cee9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ceef:	77 10                	ja     c000cf01 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cef1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cef7:	89 d3                	mov    ebx,edx
c000cef9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ceff:	72 05                	jb     c000cf06 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf01:	83 c8 ff             	or     eax,0xffffffff
c000cf04:	89 c2                	mov    edx,eax
c000cf06:	5b                   	pop    ebx
c000cf07:	c3                   	ret    

c000cf08 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf08:	56                   	push   esi
c000cf09:	83 c8 ff             	or     eax,0xffffffff
c000cf0c:	53                   	push   ebx
c000cf0d:	89 c2                	mov    edx,eax
c000cf0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf13:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf1b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf21:	77 27                	ja     c000cf4a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf23:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf29:	89 d8                	mov    eax,ebx
c000cf2b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf36:	89 c2                	mov    edx,eax
c000cf38:	73 10                	jae    c000cf4a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf3a:	89 c8                	mov    eax,ecx
c000cf3c:	89 da                	mov    edx,ebx
c000cf3e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf44:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf4a:	5b                   	pop    ebx
c000cf4b:	5e                   	pop    esi
c000cf4c:	c3                   	ret    
c000cf4d:	90                   	nop

c000cf4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf4e:	83 ec 1c             	sub    esp,0x1c
c000cf51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf65:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf74:	83 ec 08             	sub    esp,0x8
c000cf77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf7b:	50                   	push   eax
c000cf7c:	e8 b7 ef ff ff       	call   c000bf38 <Device::Device(char const*)>
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000cf89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf8d:	89 10                	mov    DWORD PTR [eax],edx
c000cf8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf93:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf9e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfbe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfca:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cfd0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cfd6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfda:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cfdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfe1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cfe7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cff5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfff:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d009:	90                   	nop
c000d00a:	83 c4 1c             	add    esp,0x1c
c000d00d:	c3                   	ret    

c000d00e <LogicalDisk::assignDriveLetter()>:
c000d00e:	55                   	push   ebp
c000d00f:	57                   	push   edi
c000d010:	56                   	push   esi
c000d011:	53                   	push   ebx
c000d012:	83 ec 14             	sub    esp,0x14
c000d015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d019:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d01f:	b0 41                	mov    al,0x41
c000d021:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d027:	84 d2                	test   dl,dl
c000d029:	75 02                	jne    c000d02d <LogicalDisk::assignDriveLetter()+0x1f>
c000d02b:	b0 43                	mov    al,0x43
c000d02d:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d033:	0f b6 ca             	movzx  ecx,dl
c000d036:	0f be e8             	movsx  ebp,al
c000d039:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d03d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d041:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d047:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d04b:	3c 43                	cmp    al,0x43
c000d04d:	75 10                	jne    c000d05f <LogicalDisk::assignDriveLetter()+0x51>
c000d04f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d056:	75 5a                	jne    c000d0b2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d058:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d05d:	75 53                	jne    c000d0b2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d05f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d062:	ba 01 00 00 00       	mov    edx,0x1
c000d067:	89 34 24             	mov    DWORD PTR [esp],esi
c000d06a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d06d:	d3 e2                	shl    edx,cl
c000d06f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d073:	89 d7                	mov    edi,edx
c000d075:	89 d6                	mov    esi,edx
c000d077:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d07b:	c1 ff 1f             	sar    edi,0x1f
c000d07e:	21 f9                	and    ecx,edi
c000d080:	09 d1                	or     ecx,edx
c000d082:	75 2e                	jne    c000d0b2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d084:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d088:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d08c:	09 f2                	or     edx,esi
c000d08e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d091:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d097:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d09b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0a1:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0a8:	09 fa                	or     edx,edi
c000d0aa:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0b0:	eb 0d                	jmp    c000d0bf <LogicalDisk::assignDriveLetter()+0xb1>
c000d0b2:	8d 50 01             	lea    edx,[eax+0x1]
c000d0b5:	45                   	inc    ebp
c000d0b6:	80 fa 5b             	cmp    dl,0x5b
c000d0b9:	88 d0                	mov    al,dl
c000d0bb:	75 8e                	jne    c000d04b <LogicalDisk::assignDriveLetter()+0x3d>
c000d0bd:	31 c0                	xor    eax,eax
c000d0bf:	83 c4 14             	add    esp,0x14
c000d0c2:	5b                   	pop    ebx
c000d0c3:	5e                   	pop    esi
c000d0c4:	5f                   	pop    edi
c000d0c5:	5d                   	pop    ebp
c000d0c6:	c3                   	ret    
c000d0c7:	90                   	nop

c000d0c8 <LogicalDisk::mount()>:
c000d0c8:	56                   	push   esi
c000d0c9:	53                   	push   ebx
c000d0ca:	53                   	push   ebx
c000d0cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0cf:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0d5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0df:	85 db                	test   ebx,ebx
c000d0e1:	74 27                	je     c000d10a <LogicalDisk::mount()+0x42>
c000d0e3:	51                   	push   ecx
c000d0e4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d0eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d0ed:	83 e8 41             	sub    eax,0x41
c000d0f0:	50                   	push   eax
c000d0f1:	56                   	push   esi
c000d0f2:	53                   	push   ebx
c000d0f3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d0f6:	83 c4 10             	add    esp,0x10
c000d0f9:	84 c0                	test   al,al
c000d0fb:	74 08                	je     c000d105 <LogicalDisk::mount()+0x3d>
c000d0fd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d103:	eb 07                	jmp    c000d10c <LogicalDisk::mount()+0x44>
c000d105:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d108:	eb d5                	jmp    c000d0df <LogicalDisk::mount()+0x17>
c000d10a:	31 c0                	xor    eax,eax
c000d10c:	5a                   	pop    edx
c000d10d:	5b                   	pop    ebx
c000d10e:	5e                   	pop    esi
c000d10f:	c3                   	ret    

c000d110 <LogicalDisk::unmount()>:
c000d110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d114:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d11e:	c3                   	ret    
c000d11f:	90                   	nop

c000d120 <LogicalDisk::eject()>:
c000d120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d124:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d12a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d12c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d130:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d133:	90                   	nop

c000d134 <LogicalDisk::unassignDriveLetter()>:
c000d134:	57                   	push   edi
c000d135:	56                   	push   esi
c000d136:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d13a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d141:	85 c9                	test   ecx,ecx
c000d143:	75 0f                	jne    c000d154 <LogicalDisk::unassignDriveLetter()+0x20>
c000d145:	c7 44 24 0c 6c 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc002056c
c000d14d:	5e                   	pop    esi
c000d14e:	5f                   	pop    edi
c000d14f:	e9 6d 36 00 00       	jmp    c00107c1 <KePanic(char const*)>
c000d154:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d15b:	83 e9 41             	sub    ecx,0x41
c000d15e:	b8 01 00 00 00       	mov    eax,0x1
c000d163:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d16e:	d3 e0                	shl    eax,cl
c000d170:	89 c7                	mov    edi,eax
c000d172:	f7 d0                	not    eax
c000d174:	c1 ff 1f             	sar    edi,0x1f
c000d177:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d17d:	89 fe                	mov    esi,edi
c000d17f:	f7 d6                	not    esi
c000d181:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d187:	5e                   	pop    esi
c000d188:	5f                   	pop    edi
c000d189:	c3                   	ret    

c000d18a <LogicalDisk::read(unsigned long long, int, void*)>:
c000d18a:	57                   	push   edi
c000d18b:	56                   	push   esi
c000d18c:	53                   	push   ebx
c000d18d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d195:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d19d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1a3:	77 41                	ja     c000d1e6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1a5:	99                   	cdq    
c000d1a6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1ac:	01 c8                	add    eax,ecx
c000d1ae:	11 da                	adc    edx,ebx
c000d1b0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1b6:	19 d7                	sbb    edi,edx
c000d1b8:	72 33                	jb     c000d1ed <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1ba:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1c0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1ca:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1ce:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1de:	5b                   	pop    ebx
c000d1df:	5e                   	pop    esi
c000d1e0:	5f                   	pop    edi
c000d1e1:	e9 d4 0a 00 00       	jmp    c000dcba <VCache::read(unsigned long long, int, void*)>
c000d1e6:	b8 05 00 00 00       	mov    eax,0x5
c000d1eb:	eb 05                	jmp    c000d1f2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d1ed:	b8 07 00 00 00       	mov    eax,0x7
c000d1f2:	5b                   	pop    ebx
c000d1f3:	5e                   	pop    esi
c000d1f4:	5f                   	pop    edi
c000d1f5:	c3                   	ret    

c000d1f6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d1f6:	57                   	push   edi
c000d1f7:	56                   	push   esi
c000d1f8:	53                   	push   ebx
c000d1f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d201:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d205:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d209:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d20f:	77 41                	ja     c000d252 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d211:	99                   	cdq    
c000d212:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d218:	01 c8                	add    eax,ecx
c000d21a:	11 da                	adc    edx,ebx
c000d21c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d222:	19 d7                	sbb    edi,edx
c000d224:	72 33                	jb     c000d259 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d226:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d22c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d232:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d236:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d23a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d240:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d246:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d24a:	5b                   	pop    ebx
c000d24b:	5e                   	pop    esi
c000d24c:	5f                   	pop    edi
c000d24d:	e9 6e 09 00 00       	jmp    c000dbc0 <VCache::write(unsigned long long, int, void*)>
c000d252:	b8 05 00 00 00       	mov    eax,0x5
c000d257:	eb 05                	jmp    c000d25e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d259:	b8 07 00 00 00       	mov    eax,0x7
c000d25e:	5b                   	pop    ebx
c000d25f:	5e                   	pop    esi
c000d260:	5f                   	pop    edi
c000d261:	c3                   	ret    
c000d262:	66 90                	xchg   ax,ax

c000d264 <Mouse::Mouse(char const*)>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26b:	83 ec 08             	sub    esp,0x8
c000d26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d272:	50                   	push   eax
c000d273:	e8 c0 ec ff ff       	call   c000bf38 <Device::Device(char const*)>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000d280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d284:	89 10                	mov    DWORD PTR [eax],edx
c000d286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d294:	90                   	nop
c000d295:	83 c4 0c             	add    esp,0xc
c000d298:	c3                   	ret    
c000d299:	90                   	nop
c000d29a:	66 90                	xchg   ax,ax

c000d29c <Mouse::~Mouse()>:
c000d29c:	83 ec 0c             	sub    esp,0xc
c000d29f:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000d2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a8:	89 10                	mov    DWORD PTR [eax],edx
c000d2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ae:	83 ec 0c             	sub    esp,0xc
c000d2b1:	50                   	push   eax
c000d2b2:	e8 eb e9 ff ff       	call   c000bca2 <Device::~Device()>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	90                   	nop
c000d2bb:	83 c4 0c             	add    esp,0xc
c000d2be:	c3                   	ret    
c000d2bf:	90                   	nop

c000d2c0 <Mouse::~Mouse()>:
c000d2c0:	83 ec 0c             	sub    esp,0xc
c000d2c3:	83 ec 0c             	sub    esp,0xc
c000d2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ca:	e8 cd ff ff ff       	call   c000d29c <Mouse::~Mouse()>
c000d2cf:	83 c4 10             	add    esp,0x10
c000d2d2:	83 ec 08             	sub    esp,0x8
c000d2d5:	68 58 01 00 00       	push   0x158
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	e8 5c d5 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 c4 0c             	add    esp,0xc
c000d2e9:	c3                   	ret    

c000d2ea <NIC::getMAC()>:
c000d2ea:	31 c0                	xor    eax,eax
c000d2ec:	31 d2                	xor    edx,edx
c000d2ee:	c3                   	ret    
c000d2ef:	90                   	nop

c000d2f0 <NIC::write(int, unsigned char*, int*)>:
c000d2f0:	b8 01 00 00 00       	mov    eax,0x1
c000d2f5:	c3                   	ret    

c000d2f6 <NIC::NIC(char const*)>:
c000d2f6:	83 ec 0c             	sub    esp,0xc
c000d2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fd:	83 ec 08             	sub    esp,0x8
c000d300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d304:	50                   	push   eax
c000d305:	e8 2e ec ff ff       	call   c000bf38 <Device::Device(char const*)>
c000d30a:	83 c4 10             	add    esp,0x10
c000d30d:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000d312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d316:	89 10                	mov    DWORD PTR [eax],edx
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <NIC::~NIC()>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000d334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d338:	89 10                	mov    DWORD PTR [eax],edx
c000d33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d33e:	83 ec 0c             	sub    esp,0xc
c000d341:	50                   	push   eax
c000d342:	e8 5b e9 ff ff       	call   c000bca2 <Device::~Device()>
c000d347:	83 c4 10             	add    esp,0x10
c000d34a:	90                   	nop
c000d34b:	83 c4 0c             	add    esp,0xc
c000d34e:	c3                   	ret    
c000d34f:	90                   	nop

c000d350 <NIC::~NIC()>:
c000d350:	83 ec 0c             	sub    esp,0xc
c000d353:	83 ec 0c             	sub    esp,0xc
c000d356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35a:	e8 cd ff ff ff       	call   c000d32c <NIC::~NIC()>
c000d35f:	83 c4 10             	add    esp,0x10
c000d362:	83 ec 08             	sub    esp,0x8
c000d365:	68 58 01 00 00       	push   0x158
c000d36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36e:	e8 cc d4 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	83 c4 0c             	add    esp,0xc
c000d379:	c3                   	ret    

c000d37a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d37a:	55                   	push   ebp
c000d37b:	57                   	push   edi
c000d37c:	56                   	push   esi
c000d37d:	53                   	push   ebx
c000d37e:	81 ec 28 01 00 00    	sub    esp,0x128
c000d384:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d38b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d392:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d399:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d3a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3a4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3a8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3af:	e8 80 ec ff ff       	call   c000c034 <Device::getName()>
c000d3b4:	5a                   	pop    edx
c000d3b5:	59                   	pop    ecx
c000d3b6:	50                   	push   eax
c000d3b7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3bb:	55                   	push   ebp
c000d3bc:	e8 8f 32 ff ff       	call   c0000650 <strcpy>
c000d3c1:	5b                   	pop    ebx
c000d3c2:	58                   	pop    eax
c000d3c3:	68 18 06 02 c0       	push   0xc0020618
c000d3c8:	55                   	push   ebp
c000d3c9:	e8 a2 34 ff ff       	call   c0000870 <strcat>
c000d3ce:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3d5:	e8 dd a6 ff ff       	call   c0007ab7 <malloc>
c000d3da:	83 c4 0c             	add    esp,0xc
c000d3dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3e5:	89 c3                	mov    ebx,eax
c000d3e7:	57                   	push   edi
c000d3e8:	56                   	push   esi
c000d3e9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3f0:	55                   	push   ebp
c000d3f1:	50                   	push   eax
c000d3f2:	e8 57 fb ff ff       	call   c000cf4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d3f7:	83 c4 14             	add    esp,0x14
c000d3fa:	53                   	push   ebx
c000d3fb:	e8 0e fc ff ff       	call   c000d00e <LogicalDisk::assignDriveLetter()>
c000d400:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d403:	e8 c0 fc ff ff       	call   c000d0c8 <LogicalDisk::mount()>
c000d408:	58                   	pop    eax
c000d409:	5a                   	pop    edx
c000d40a:	53                   	push   ebx
c000d40b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d412:	e8 89 e9 ff ff       	call   c000bda0 <Device::addChild(Device*)>
c000d417:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d41d:	5b                   	pop    ebx
c000d41e:	5e                   	pop    esi
c000d41f:	5f                   	pop    edi
c000d420:	5d                   	pop    ebp
c000d421:	c3                   	ret    

c000d422 <createPartitionsForDisk(PhysicalDisk*)>:
c000d422:	55                   	push   ebp
c000d423:	57                   	push   edi
c000d424:	56                   	push   esi
c000d425:	53                   	push   ebx
c000d426:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d42c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d433:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d439:	3d 00 02 00 00       	cmp    eax,0x200
c000d43e:	74 27                	je     c000d467 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d440:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d446:	83 ec 10             	sub    esp,0x10
c000d449:	99                   	cdq    
c000d44a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d450:	52                   	push   edx
c000d451:	50                   	push   eax
c000d452:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d456:	c1 e6 0a             	shl    esi,0xa
c000d459:	89 fd                	mov    ebp,edi
c000d45b:	55                   	push   ebp
c000d45c:	56                   	push   esi
c000d45d:	e8 1e 11 01 00       	call   c001e580 <__udivdi3>
c000d462:	e9 b9 00 00 00       	jmp    c000d520 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d467:	83 ec 0c             	sub    esp,0xc
c000d46a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d46c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d470:	56                   	push   esi
c000d471:	6a 01                	push   0x1
c000d473:	6a 00                	push   0x0
c000d475:	6a 00                	push   0x0
c000d477:	53                   	push   ebx
c000d478:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d47b:	83 c4 20             	add    esp,0x20
c000d47e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d486:	75 0a                	jne    c000d492 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d488:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d490:	74 2c                	je     c000d4be <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d492:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d498:	83 ec 10             	sub    esp,0x10
c000d49b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4a7:	89 f7                	mov    edi,esi
c000d4a9:	c1 ff 1f             	sar    edi,0x1f
c000d4ac:	57                   	push   edi
c000d4ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4b1:	56                   	push   esi
c000d4b2:	c1 e0 0a             	shl    eax,0xa
c000d4b5:	52                   	push   edx
c000d4b6:	50                   	push   eax
c000d4b7:	e8 c4 10 01 00       	call   c001e580 <__udivdi3>
c000d4bc:	eb 62                	jmp    c000d520 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4be:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4c5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4cc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4d3:	89 cf                	mov    edi,ecx
c000d4d5:	83 e2 7f             	and    edx,0x7f
c000d4d8:	83 e7 7f             	and    edi,0x7f
c000d4db:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4de:	83 e0 7f             	and    eax,0x7f
c000d4e1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d4e4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4eb:	83 e0 7f             	and    eax,0x7f
c000d4ee:	01 d0                	add    eax,edx
c000d4f0:	84 c0                	test   al,al
c000d4f2:	89 c5                	mov    ebp,eax
c000d4f4:	74 41                	je     c000d537 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d4f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4fc:	83 ec 10             	sub    esp,0x10
c000d4ff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d505:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d50b:	89 f7                	mov    edi,esi
c000d50d:	c1 ff 1f             	sar    edi,0x1f
c000d510:	57                   	push   edi
c000d511:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d515:	56                   	push   esi
c000d516:	c1 e0 0a             	shl    eax,0xa
c000d519:	52                   	push   edx
c000d51a:	50                   	push   eax
c000d51b:	e8 60 10 01 00       	call   c001e580 <__udivdi3>
c000d520:	83 c4 14             	add    esp,0x14
c000d523:	52                   	push   edx
c000d524:	50                   	push   eax
c000d525:	6a 00                	push   0x0
c000d527:	6a 00                	push   0x0
c000d529:	53                   	push   ebx
c000d52a:	e8 4b fe ff ff       	call   c000d37a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d52f:	83 c4 20             	add    esp,0x20
c000d532:	e9 73 01 00 00       	jmp    c000d6aa <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d537:	89 f0                	mov    eax,esi
c000d539:	31 c9                	xor    ecx,ecx
c000d53b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d542:	75 02                	jne    c000d546 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d544:	89 cd                	mov    ebp,ecx
c000d546:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d54e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d555:	83 c0 10             	add    eax,0x10
c000d558:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d560:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d567:	c1 e2 08             	shl    edx,0x8
c000d56a:	c1 e6 10             	shl    esi,0x10
c000d56d:	09 f2                	or     edx,esi
c000d56f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d576:	09 f2                	or     edx,esi
c000d578:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d57f:	c1 e6 18             	shl    esi,0x18
c000d582:	09 f2                	or     edx,esi
c000d584:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d58b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d58f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d596:	c1 e6 10             	shl    esi,0x10
c000d599:	c1 e2 08             	shl    edx,0x8
c000d59c:	09 f2                	or     edx,esi
c000d59e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5a5:	09 f2                	or     edx,esi
c000d5a7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5ae:	c1 e6 18             	shl    esi,0x18
c000d5b1:	09 f2                	or     edx,esi
c000d5b3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5b7:	41                   	inc    ecx
c000d5b8:	83 f9 04             	cmp    ecx,0x4
c000d5bb:	0f 85 7a ff ff ff    	jne    c000d53b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c5:	83 f0 01             	xor    eax,0x1
c000d5c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5cc:	75 4f                	jne    c000d61d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5d2:	83 f0 01             	xor    eax,0x1
c000d5d5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5d9:	75 42                	jne    c000d61d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5db:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d5f7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5fd:	89 f7                	mov    edi,esi
c000d5ff:	c1 ff 1f             	sar    edi,0x1f
c000d602:	57                   	push   edi
c000d603:	56                   	push   esi
c000d604:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d608:	52                   	push   edx
c000d609:	c1 e0 0a             	shl    eax,0xa
c000d60c:	50                   	push   eax
c000d60d:	e8 6e 0f 01 00       	call   c001e580 <__udivdi3>
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d619:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d61d:	89 e8                	mov    eax,ebp
c000d61f:	0f b6 e8             	movzx  ebp,al
c000d622:	85 ed                	test   ebp,ebp
c000d624:	74 50                	je     c000d676 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d62a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d62e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d632:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d636:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d63a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d63e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d642:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d64e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d652:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d656:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d65a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d65e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d662:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d666:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d66a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d66e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d672:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d676:	31 ed                	xor    ebp,ebp
c000d678:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d67c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d680:	89 f8                	mov    eax,edi
c000d682:	09 f0                	or     eax,esi
c000d684:	74 1e                	je     c000d6a4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d686:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d68a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d68e:	89 d1                	mov    ecx,edx
c000d690:	09 c1                	or     ecx,eax
c000d692:	74 10                	je     c000d6a4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	57                   	push   edi
c000d698:	56                   	push   esi
c000d699:	52                   	push   edx
c000d69a:	50                   	push   eax
c000d69b:	53                   	push   ebx
c000d69c:	e8 d9 fc ff ff       	call   c000d37a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6a1:	83 c4 20             	add    esp,0x20
c000d6a4:	45                   	inc    ebp
c000d6a5:	83 fd 04             	cmp    ebp,0x4
c000d6a8:	75 ce                	jne    c000d678 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6aa:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6b0:	5b                   	pop    ebx
c000d6b1:	5e                   	pop    esi
c000d6b2:	5f                   	pop    edi
c000d6b3:	5d                   	pop    ebp
c000d6b4:	c3                   	ret    
c000d6b5:	66 90                	xchg   ax,ax
c000d6b7:	90                   	nop

c000d6b8 <Serial::Serial(char const*)>:
c000d6b8:	83 ec 0c             	sub    esp,0xc
c000d6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6bf:	83 ec 08             	sub    esp,0x8
c000d6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c6:	50                   	push   eax
c000d6c7:	e8 6c e8 ff ff       	call   c000bf38 <Device::Device(char const*)>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d8:	89 10                	mov    DWORD PTR [eax],edx
c000d6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6de:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6e8:	90                   	nop
c000d6e9:	83 c4 0c             	add    esp,0xc
c000d6ec:	c3                   	ret    
c000d6ed:	90                   	nop
c000d6ee:	66 90                	xchg   ax,ax

c000d6f0 <Serial::~Serial()>:
c000d6f0:	83 ec 0c             	sub    esp,0xc
c000d6f3:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fc:	89 10                	mov    DWORD PTR [eax],edx
c000d6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d702:	83 ec 0c             	sub    esp,0xc
c000d705:	50                   	push   eax
c000d706:	e8 97 e5 ff ff       	call   c000bca2 <Device::~Device()>
c000d70b:	83 c4 10             	add    esp,0x10
c000d70e:	90                   	nop
c000d70f:	83 c4 0c             	add    esp,0xc
c000d712:	c3                   	ret    
c000d713:	90                   	nop

c000d714 <Serial::~Serial()>:
c000d714:	83 ec 0c             	sub    esp,0xc
c000d717:	83 ec 0c             	sub    esp,0xc
c000d71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71e:	e8 cd ff ff ff       	call   c000d6f0 <Serial::~Serial()>
c000d723:	83 c4 10             	add    esp,0x10
c000d726:	83 ec 08             	sub    esp,0x8
c000d729:	68 58 01 00 00       	push   0x158
c000d72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d732:	e8 08 d1 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	83 c4 0c             	add    esp,0xc
c000d73d:	c3                   	ret    
c000d73e:	66 90                	xchg   ax,ax

c000d740 <Timer::Timer(char const*)>:
c000d740:	83 ec 0c             	sub    esp,0xc
c000d743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d747:	83 ec 08             	sub    esp,0x8
c000d74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74e:	50                   	push   eax
c000d74f:	e8 e4 e7 ff ff       	call   c000bf38 <Device::Device(char const*)>
c000d754:	83 c4 10             	add    esp,0x10
c000d757:	ba 70 06 02 c0       	mov    edx,0xc0020670
c000d75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d760:	89 10                	mov    DWORD PTR [eax],edx
c000d762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d766:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d770:	90                   	nop
c000d771:	83 c4 0c             	add    esp,0xc
c000d774:	c3                   	ret    
c000d775:	90                   	nop
c000d776:	66 90                	xchg   ax,ax

c000d778 <Timer::~Timer()>:
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	ba 70 06 02 c0       	mov    edx,0xc0020670
c000d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d784:	89 10                	mov    DWORD PTR [eax],edx
c000d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	50                   	push   eax
c000d78e:	e8 0f e5 ff ff       	call   c000bca2 <Device::~Device()>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	90                   	nop
c000d797:	83 c4 0c             	add    esp,0xc
c000d79a:	c3                   	ret    
c000d79b:	90                   	nop

c000d79c <Timer::~Timer()>:
c000d79c:	83 ec 0c             	sub    esp,0xc
c000d79f:	83 ec 0c             	sub    esp,0xc
c000d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a6:	e8 cd ff ff ff       	call   c000d778 <Timer::~Timer()>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	83 ec 08             	sub    esp,0x8
c000d7b1:	68 5c 01 00 00       	push   0x15c
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	e8 80 d0 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	83 c4 0c             	add    esp,0xc
c000d7c5:	c3                   	ret    

c000d7c6 <Timer::read()>:
c000d7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7d0:	c3                   	ret    

c000d7d1 <setupTimer(int)>:
c000d7d1:	53                   	push   ebx
c000d7d2:	83 ec 14             	sub    esp,0x14
c000d7d5:	68 5c 01 00 00       	push   0x15c
c000d7da:	e8 d8 a2 ff ff       	call   c0007ab7 <malloc>
c000d7df:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7e2:	89 c3                	mov    ebx,eax
c000d7e4:	e8 f7 05 01 00       	call   c001dde0 <PIT::PIT()>
c000d7e9:	58                   	pop    eax
c000d7ea:	5a                   	pop    edx
c000d7eb:	53                   	push   ebx
c000d7ec:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d7f2:	e8 a9 e5 ff ff       	call   c000bda0 <Device::addChild(Device*)>
c000d7f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7f9:	6a 00                	push   0x0
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d801:	53                   	push   ebx
c000d802:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d805:	83 c4 28             	add    esp,0x28
c000d808:	89 d8                	mov    eax,ebx
c000d80a:	5b                   	pop    ebx
c000d80b:	c3                   	ret    

c000d80c <timerHandler(unsigned int)>:
c000d80c:	56                   	push   esi
c000d80d:	53                   	push   ebx
c000d80e:	51                   	push   ecx
c000d80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d813:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d819:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d820:	0f 84 4a 01 00 00    	je     c000d970 <timerHandler(unsigned int)+0x164>
c000d826:	fa                   	cli    
c000d827:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d82d:	83 ec 0c             	sub    esp,0xc
c000d830:	68 78 81 02 c0       	push   0xc0028178
c000d835:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d83b:	e8 10 13 01 00       	call   c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	84 c0                	test   al,al
c000d845:	0f 85 a1 00 00 00    	jne    c000d8ec <timerHandler(unsigned int)+0xe0>
c000d84b:	83 ec 0c             	sub    esp,0xc
c000d84e:	68 78 81 02 c0       	push   0xc0028178
c000d853:	e8 14 13 01 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d858:	83 c4 10             	add    esp,0x10
c000d85b:	89 c6                	mov    esi,eax
c000d85d:	8d 76 00             	lea    esi,[esi+0x0]
c000d860:	83 ec 0c             	sub    esp,0xc
c000d863:	68 78 81 02 c0       	push   0xc0028178
c000d868:	e8 ff 12 01 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d86d:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d874:	89 c3                	mov    ebx,eax
c000d876:	e8 f9 12 01 00       	call   c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d87b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d87e:	83 c4 10             	add    esp,0x10
c000d881:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d887:	77 23                	ja     c000d8ac <timerHandler(unsigned int)+0xa0>
c000d889:	83 ec 0c             	sub    esp,0xc
c000d88c:	53                   	push   ebx
c000d88d:	e8 1e 7c 00 00       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	39 de                	cmp    esi,ebx
c000d897:	75 27                	jne    c000d8c0 <timerHandler(unsigned int)+0xb4>
c000d899:	83 ec 0c             	sub    esp,0xc
c000d89c:	68 78 81 02 c0       	push   0xc0028178
c000d8a1:	e8 c6 12 01 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8a6:	89 c6                	mov    esi,eax
c000d8a8:	eb 12                	jmp    c000d8bc <timerHandler(unsigned int)+0xb0>
c000d8aa:	66 90                	xchg   ax,ax
c000d8ac:	52                   	push   edx
c000d8ad:	52                   	push   edx
c000d8ae:	53                   	push   ebx
c000d8af:	68 78 81 02 c0       	push   0xc0028178
c000d8b4:	e8 77 13 01 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	90                   	nop
c000d8c0:	83 ec 0c             	sub    esp,0xc
c000d8c3:	68 78 81 02 c0       	push   0xc0028178
c000d8c8:	e8 83 12 01 00       	call   c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8cd:	83 c4 10             	add    esp,0x10
c000d8d0:	84 c0                	test   al,al
c000d8d2:	75 18                	jne    c000d8ec <timerHandler(unsigned int)+0xe0>
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	68 78 81 02 c0       	push   0xc0028178
c000d8dc:	e8 8b 12 01 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8e1:	83 c4 10             	add    esp,0x10
c000d8e4:	39 f0                	cmp    eax,esi
c000d8e6:	0f 85 74 ff ff ff    	jne    c000d860 <timerHandler(unsigned int)+0x54>
c000d8ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8f1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d8f5:	74 41                	je     c000d938 <timerHandler(unsigned int)+0x12c>
c000d8f7:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d8fe:	74 38                	je     c000d938 <timerHandler(unsigned int)+0x12c>
c000d900:	fa                   	cli    
c000d901:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d907:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d90c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d912:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d915:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d91b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d91e:	72 08                	jb     c000d928 <timerHandler(unsigned int)+0x11c>
c000d920:	e8 93 76 00 00       	call   c0014fb8 <schedule()>
c000d925:	8d 76 00             	lea    esi,[esi+0x0]
c000d928:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d92d:	48                   	dec    eax
c000d92e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d933:	75 03                	jne    c000d938 <timerHandler(unsigned int)+0x12c>
c000d935:	fb                   	sti    
c000d936:	66 90                	xchg   ax,ax
c000d938:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d93d:	48                   	dec    eax
c000d93e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d943:	75 1b                	jne    c000d960 <timerHandler(unsigned int)+0x154>
c000d945:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d94c:	74 12                	je     c000d960 <timerHandler(unsigned int)+0x154>
c000d94e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d958:	e8 5b 76 00 00       	call   c0014fb8 <schedule()>
c000d95d:	8d 76 00             	lea    esi,[esi+0x0]
c000d960:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d965:	48                   	dec    eax
c000d966:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d96b:	75 03                	jne    c000d970 <timerHandler(unsigned int)+0x164>
c000d96d:	fb                   	sti    
c000d96e:	66 90                	xchg   ax,ax
c000d970:	58                   	pop    eax
c000d971:	5b                   	pop    ebx
c000d972:	5e                   	pop    esi
c000d973:	c3                   	ret    

c000d974 <VCache::VCache(PhysicalDisk*)>:
c000d974:	53                   	push   ebx
c000d975:	83 ec 18             	sub    esp,0x18
c000d978:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d981:	89 10                	mov    DWORD PTR [eax],edx
c000d983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d987:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d992:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9af:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9db:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da05:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da0d:	83 ec 0c             	sub    esp,0xc
c000da10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da14:	e8 9e a0 ff ff       	call   c0007ab7 <malloc>
c000da19:	83 c4 10             	add    esp,0x10
c000da1c:	89 c3                	mov    ebx,eax
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	53                   	push   ebx
c000da22:	e8 31 73 00 00       	call   c0014d58 <Mutex::Mutex()>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da4b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da5c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da6c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da6f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da76:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da84:	05 00 02 00 00       	add    eax,0x200
c000da89:	c1 e0 03             	shl    eax,0x3
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	50                   	push   eax
c000da90:	e8 22 a0 ff ff       	call   c0007ab7 <malloc>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	89 c2                	mov    edx,eax
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dab4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dab8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dabe:	89 d0                	mov    eax,edx
c000dac0:	c1 e0 02             	shl    eax,0x2
c000dac3:	01 d0                	add    eax,edx
c000dac5:	c1 e0 04             	shl    eax,0x4
c000dac8:	83 ec 0c             	sub    esp,0xc
c000dacb:	50                   	push   eax
c000dacc:	e8 e6 9f ff ff       	call   c0007ab7 <malloc>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	89 c2                	mov    edx,eax
c000dad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dada:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dadd:	90                   	nop
c000dade:	83 c4 18             	add    esp,0x18
c000dae1:	5b                   	pop    ebx
c000dae2:	c3                   	ret    
c000dae3:	90                   	nop

c000dae4 <VCache::invalidateReadBuffer()>:
c000dae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dae8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000daee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daf2:	c3                   	ret    
c000daf3:	90                   	nop

c000daf4 <VCache::writeWriteBuffer()>:
c000daf4:	53                   	push   ebx
c000daf5:	83 ec 08             	sub    esp,0x8
c000daf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dafc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db00:	74 1e                	je     c000db20 <VCache::writeWriteBuffer()+0x2c>
c000db02:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db05:	83 ec 0c             	sub    esp,0xc
c000db08:	8b 10                	mov    edx,DWORD PTR [eax]
c000db0a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db10:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db16:	50                   	push   eax
c000db17:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db1a:	83 c4 20             	add    esp,0x20
c000db1d:	8d 76 00             	lea    esi,[esi+0x0]
c000db20:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db27:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db2e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db32:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db39:	83 c4 08             	add    esp,0x8
c000db3c:	5b                   	pop    ebx
c000db3d:	c3                   	ret    
c000db3e:	66 90                	xchg   ax,ax

c000db40 <VCache::~VCache()>:
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000db48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4c:	89 10                	mov    DWORD PTR [eax],edx
c000db4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db52:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db55:	0f b6 c0             	movzx  eax,al
c000db58:	85 c0                	test   eax,eax
c000db5a:	74 10                	je     c000db6c <VCache::~VCache()+0x2c>
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db63:	e8 8c ff ff ff       	call   c000daf4 <VCache::writeWriteBuffer()>
c000db68:	83 c4 10             	add    esp,0x10
c000db6b:	90                   	nop
c000db6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db70:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db73:	83 ec 0c             	sub    esp,0xc
c000db76:	50                   	push   eax
c000db77:	e8 4b 9f ff ff       	call   c0007ac7 <free>
c000db7c:	83 c4 10             	add    esp,0x10
c000db7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db86:	83 ec 0c             	sub    esp,0xc
c000db89:	50                   	push   eax
c000db8a:	e8 38 9f ff ff       	call   c0007ac7 <free>
c000db8f:	83 c4 10             	add    esp,0x10
c000db92:	90                   	nop
c000db93:	83 c4 0c             	add    esp,0xc
c000db96:	c3                   	ret    
c000db97:	90                   	nop

c000db98 <VCache::~VCache()>:
c000db98:	83 ec 0c             	sub    esp,0xc
c000db9b:	83 ec 0c             	sub    esp,0xc
c000db9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba2:	e8 99 ff ff ff       	call   c000db40 <VCache::~VCache()>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	83 ec 08             	sub    esp,0x8
c000dbad:	6a 44                	push   0x44
c000dbaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb3:	e8 87 cc ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000dbb8:	83 c4 10             	add    esp,0x10
c000dbbb:	83 c4 0c             	add    esp,0xc
c000dbbe:	c3                   	ret    
c000dbbf:	90                   	nop

c000dbc0 <VCache::write(unsigned long long, int, void*)>:
c000dbc0:	55                   	push   ebp
c000dbc1:	57                   	push   edi
c000dbc2:	56                   	push   esi
c000dbc3:	53                   	push   ebx
c000dbc4:	83 ec 1c             	sub    esp,0x1c
c000dbc7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbcf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dbd3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbd7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbdf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbe3:	74 0f                	je     c000dbf4 <VCache::write(unsigned long long, int, void*)+0x34>
c000dbe5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbe9:	53                   	push   ebx
c000dbea:	e8 f5 fe ff ff       	call   c000dae4 <VCache::invalidateReadBuffer()>
c000dbef:	58                   	pop    eax
c000dbf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbf4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbf8:	74 66                	je     c000dc60 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dbfa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dbfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc01:	99                   	cdq    
c000dc02:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc05:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc08:	89 c6                	mov    esi,eax
c000dc0a:	31 ce                	xor    esi,ecx
c000dc0c:	89 d0                	mov    eax,edx
c000dc0e:	31 e8                	xor    eax,ebp
c000dc10:	09 c6                	or     esi,eax
c000dc12:	75 38                	jne    c000dc4c <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc14:	83 ff 01             	cmp    edi,0x1
c000dc17:	75 33                	jne    c000dc4c <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc20:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc24:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc2a:	0f af f9             	imul   edi,ecx
c000dc2d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc32:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc35:	40                   	inc    eax
c000dc36:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc39:	83 f8 50             	cmp    eax,0x50
c000dc3c:	75 72                	jne    c000dcb0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc3e:	83 ec 0c             	sub    esp,0xc
c000dc41:	53                   	push   ebx
c000dc42:	e8 ad fe ff ff       	call   c000daf4 <VCache::writeWriteBuffer()>
c000dc47:	83 c4 10             	add    esp,0x10
c000dc4a:	eb 64                	jmp    c000dcb0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc50:	83 ec 0c             	sub    esp,0xc
c000dc53:	53                   	push   ebx
c000dc54:	e8 9b fe ff ff       	call   c000daf4 <VCache::writeWriteBuffer()>
c000dc59:	83 c4 10             	add    esp,0x10
c000dc5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc60:	83 ff 4f             	cmp    edi,0x4f
c000dc63:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc66:	7f 20                	jg     c000dc88 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dc68:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc6b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc6f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dc72:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc75:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc78:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc7c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc84:	eb 2a                	jmp    c000dcb0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc86:	66 90                	xchg   ax,ax
c000dc88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc8c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc8e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dc92:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dc96:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc9a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dc9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dca2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dca5:	83 c4 1c             	add    esp,0x1c
c000dca8:	5b                   	pop    ebx
c000dca9:	5e                   	pop    esi
c000dcaa:	5f                   	pop    edi
c000dcab:	5d                   	pop    ebp
c000dcac:	ff e0                	jmp    eax
c000dcae:	66 90                	xchg   ax,ax
c000dcb0:	83 c4 1c             	add    esp,0x1c
c000dcb3:	31 c0                	xor    eax,eax
c000dcb5:	5b                   	pop    ebx
c000dcb6:	5e                   	pop    esi
c000dcb7:	5f                   	pop    edi
c000dcb8:	5d                   	pop    ebp
c000dcb9:	c3                   	ret    

c000dcba <VCache::read(unsigned long long, int, void*)>:
c000dcba:	55                   	push   ebp
c000dcbb:	57                   	push   edi
c000dcbc:	56                   	push   esi
c000dcbd:	53                   	push   ebx
c000dcbe:	83 ec 1c             	sub    esp,0x1c
c000dcc1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dcc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dccd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dcd1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dcd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcd9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcdd:	74 0d                	je     c000dcec <VCache::read(unsigned long long, int, void*)+0x32>
c000dcdf:	83 ec 0c             	sub    esp,0xc
c000dce2:	57                   	push   edi
c000dce3:	e8 0c fe ff ff       	call   c000daf4 <VCache::writeWriteBuffer()>
c000dce8:	83 c4 10             	add    esp,0x10
c000dceb:	90                   	nop
c000dcec:	83 fd 01             	cmp    ebp,0x1
c000dcef:	0f 85 93 00 00 00    	jne    c000dd88 <VCache::read(unsigned long long, int, void*)+0xce>
c000dcf5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dcf8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dcff:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd02:	0f 85 80 00 00 00    	jne    c000dd88 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd08:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd0b:	89 cd                	mov    ebp,ecx
c000dd0d:	f7 dd                	neg    ebp
c000dd0f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd13:	89 e8                	mov    eax,ebp
c000dd15:	21 dd                	and    ebp,ebx
c000dd17:	c1 f8 1f             	sar    eax,0x1f
c000dd1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd1e:	89 e8                	mov    eax,ebp
c000dd20:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd24:	21 f5                	and    ebp,esi
c000dd26:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd2a:	89 ea                	mov    edx,ebp
c000dd2c:	74 2e                	je     c000dd5c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd2e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd31:	75 29                	jne    c000dd5c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd33:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd36:	75 24                	jne    c000dd5c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd38:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd3b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd41:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd44:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd47:	21 f3                	and    ebx,esi
c000dd49:	0f af d9             	imul   ebx,ecx
c000dd4c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd4f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd53:	89 de                	mov    esi,ebx
c000dd55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd57:	31 c0                	xor    eax,eax
c000dd59:	eb 61                	jmp    c000ddbc <VCache::read(unsigned long long, int, void*)+0x102>
c000dd5b:	90                   	nop
c000dd5c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd60:	83 ec 0c             	sub    esp,0xc
c000dd63:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd66:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd6a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd6d:	8b 36                	mov    esi,DWORD PTR [esi]
c000dd6f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd72:	51                   	push   ecx
c000dd73:	52                   	push   edx
c000dd74:	50                   	push   eax
c000dd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd79:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dd7c:	83 c4 20             	add    esp,0x20
c000dd7f:	85 c0                	test   eax,eax
c000dd81:	75 39                	jne    c000ddbc <VCache::read(unsigned long long, int, void*)+0x102>
c000dd83:	eb b3                	jmp    c000dd38 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd85:	8d 76 00             	lea    esi,[esi+0x0]
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	57                   	push   edi
c000dd8c:	e8 53 fd ff ff       	call   c000dae4 <VCache::invalidateReadBuffer()>
c000dd91:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd98:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd9a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dd9e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dda2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dda6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddaa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddae:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddb1:	83 c4 2c             	add    esp,0x2c
c000ddb4:	5b                   	pop    ebx
c000ddb5:	5e                   	pop    esi
c000ddb6:	5f                   	pop    edi
c000ddb7:	5d                   	pop    ebp
c000ddb8:	ff e0                	jmp    eax
c000ddba:	66 90                	xchg   ax,ax
c000ddbc:	83 c4 1c             	add    esp,0x1c
c000ddbf:	5b                   	pop    ebx
c000ddc0:	5e                   	pop    esi
c000ddc1:	5f                   	pop    edi
c000ddc2:	5d                   	pop    ebp
c000ddc3:	c3                   	ret    

c000ddc4 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddc4:	55                   	push   ebp
c000ddc5:	57                   	push   edi
c000ddc6:	56                   	push   esi
c000ddc7:	53                   	push   ebx
c000ddc8:	83 ec 1c             	sub    esp,0x1c
c000ddcb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddd3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddd7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000dddb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dddf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dde3:	01 df                	add    edi,ebx
c000dde5:	39 fb                	cmp    ebx,edi
c000dde7:	7d 1f                	jge    c000de08 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dde9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dded:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ddf1:	7d 12                	jge    c000de05 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ddf3:	8b 16                	mov    edx,DWORD PTR [esi]
c000ddf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddf9:	53                   	push   ebx
c000ddfa:	55                   	push   ebp
c000ddfb:	45                   	inc    ebp
c000ddfc:	56                   	push   esi
c000ddfd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de00:	83 c4 10             	add    esp,0x10
c000de03:	eb e8                	jmp    c000dded <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de05:	43                   	inc    ebx
c000de06:	eb dd                	jmp    c000dde5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de08:	83 c4 1c             	add    esp,0x1c
c000de0b:	5b                   	pop    ebx
c000de0c:	5e                   	pop    esi
c000de0d:	5f                   	pop    edi
c000de0e:	5d                   	pop    ebp
c000de0f:	c3                   	ret    

c000de10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de10:	55                   	push   ebp
c000de11:	57                   	push   edi
c000de12:	31 ff                	xor    edi,edi
c000de14:	56                   	push   esi
c000de15:	53                   	push   ebx
c000de16:	83 ec 1c             	sub    esp,0x1c
c000de19:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de21:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de28:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de35:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de39:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de40:	01 f9                	add    ecx,edi
c000de42:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de46:	7d 2f                	jge    c000de77 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de48:	31 f6                	xor    esi,esi
c000de4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de4e:	01 f2                	add    edx,esi
c000de50:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de54:	7d 1a                	jge    c000de70 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de59:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de5c:	46                   	inc    esi
c000de5d:	51                   	push   ecx
c000de5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de62:	52                   	push   edx
c000de63:	55                   	push   ebp
c000de64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de6e:	eb da                	jmp    c000de4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de70:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de74:	47                   	inc    edi
c000de75:	eb c5                	jmp    c000de3c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de77:	83 c4 1c             	add    esp,0x1c
c000de7a:	5b                   	pop    ebx
c000de7b:	5e                   	pop    esi
c000de7c:	5f                   	pop    edi
c000de7d:	5d                   	pop    ebp
c000de7e:	c3                   	ret    
c000de7f:	90                   	nop

c000de80 <Video::blit(unsigned int*, int, int, int, int)>:
c000de80:	55                   	push   ebp
c000de81:	ba 00 00 00 00       	mov    edx,0x0
c000de86:	57                   	push   edi
c000de87:	56                   	push   esi
c000de88:	53                   	push   ebx
c000de89:	83 ec 1c             	sub    esp,0x1c
c000de8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000de94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 49 d0             	cmovns edx,eax
c000de9d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000dea4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000dea8:	89 eb                	mov    ebx,ebp
c000deaa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000deae:	01 ea                	add    edx,ebp
c000deb0:	39 da                	cmp    edx,ebx
c000deb2:	7e 54                	jle    c000df08 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000deb4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deba:	7c 4c                	jl     c000df08 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000debc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dec0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dec4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dec8:	01 c1                	add    ecx,eax
c000deca:	39 f9                	cmp    ecx,edi
c000decc:	7e 2f                	jle    c000defd <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000dece:	83 c2 04             	add    edx,0x4
c000ded1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ded7:	7c 21                	jl     c000defa <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ded9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dedd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dedf:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000dee2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dee6:	55                   	push   ebp
c000dee7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000deeb:	56                   	push   esi
c000deec:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000def6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000defa:	47                   	inc    edi
c000defb:	eb c7                	jmp    c000dec4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000defd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df01:	43                   	inc    ebx
c000df02:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df06:	eb a2                	jmp    c000deaa <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df08:	83 c4 1c             	add    esp,0x1c
c000df0b:	5b                   	pop    ebx
c000df0c:	5e                   	pop    esi
c000df0d:	5f                   	pop    edi
c000df0e:	5d                   	pop    ebp
c000df0f:	c3                   	ret    

c000df10 <Video::clearScreen(unsigned int)>:
c000df10:	57                   	push   edi
c000df11:	56                   	push   esi
c000df12:	53                   	push   ebx
c000df13:	31 db                	xor    ebx,ebx
c000df15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df19:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df1f:	7e 1f                	jle    c000df40 <Video::clearScreen(unsigned int)+0x30>
c000df21:	31 ff                	xor    edi,edi
c000df23:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df29:	7e 12                	jle    c000df3d <Video::clearScreen(unsigned int)+0x2d>
c000df2b:	8b 06                	mov    eax,DWORD PTR [esi]
c000df2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df31:	53                   	push   ebx
c000df32:	57                   	push   edi
c000df33:	47                   	inc    edi
c000df34:	56                   	push   esi
c000df35:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	eb e6                	jmp    c000df23 <Video::clearScreen(unsigned int)+0x13>
c000df3d:	43                   	inc    ebx
c000df3e:	eb d9                	jmp    c000df19 <Video::clearScreen(unsigned int)+0x9>
c000df40:	5b                   	pop    ebx
c000df41:	5e                   	pop    esi
c000df42:	5f                   	pop    edi
c000df43:	c3                   	ret    

c000df44 <Video::putpixel(int, int, unsigned int)>:
c000df44:	c7 44 24 04 a8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206a8
c000df4c:	e9 70 28 00 00       	jmp    c00107c1 <KePanic(char const*)>
c000df51:	90                   	nop

c000df52 <Video::readPixelApprox(int, int)>:
c000df52:	83 ec 18             	sub    esp,0x18
c000df55:	68 c9 06 02 c0       	push   0xc00206c9
c000df5a:	e8 62 28 00 00       	call   c00107c1 <KePanic(char const*)>
c000df5f:	31 c0                	xor    eax,eax
c000df61:	83 c4 1c             	add    esp,0x1c
c000df64:	c3                   	ret    
c000df65:	90                   	nop

c000df66 <Video::Video(char const*)>:
c000df66:	83 ec 0c             	sub    esp,0xc
c000df69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6d:	83 ec 08             	sub    esp,0x8
c000df70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df74:	50                   	push   eax
c000df75:	e8 be df ff ff       	call   c000bf38 <Device::Device(char const*)>
c000df7a:	83 c4 10             	add    esp,0x10
c000df7d:	ba 44 07 02 c0       	mov    edx,0xc0020744
c000df82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df86:	89 10                	mov    DWORD PTR [eax],edx
c000df88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000df96:	90                   	nop
c000df97:	83 c4 0c             	add    esp,0xc
c000df9a:	c3                   	ret    
c000df9b:	90                   	nop

c000df9c <Video::~Video()>:
c000df9c:	83 ec 0c             	sub    esp,0xc
c000df9f:	ba 44 07 02 c0       	mov    edx,0xc0020744
c000dfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa8:	89 10                	mov    DWORD PTR [eax],edx
c000dfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfae:	83 ec 0c             	sub    esp,0xc
c000dfb1:	50                   	push   eax
c000dfb2:	e8 eb dc ff ff       	call   c000bca2 <Device::~Device()>
c000dfb7:	83 c4 10             	add    esp,0x10
c000dfba:	90                   	nop
c000dfbb:	83 c4 0c             	add    esp,0xc
c000dfbe:	c3                   	ret    
c000dfbf:	90                   	nop

c000dfc0 <Video::~Video()>:
c000dfc0:	83 ec 0c             	sub    esp,0xc
c000dfc3:	83 ec 0c             	sub    esp,0xc
c000dfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfca:	e8 cd ff ff ff       	call   c000df9c <Video::~Video()>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	83 ec 08             	sub    esp,0x8
c000dfd5:	68 64 01 00 00       	push   0x164
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 5c c8 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	83 c4 0c             	add    esp,0xc
c000dfe9:	c3                   	ret    

c000dfea <Video::isMonochrome()>:
c000dfea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dff4:	c3                   	ret    
c000dff5:	90                   	nop

c000dff6 <Video::getWidth()>:
c000dff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dffa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e000:	c3                   	ret    
c000e001:	90                   	nop

c000e002 <Video::getHeight()>:
c000e002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e006:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e00c:	c3                   	ret    
c000e00d:	90                   	nop

c000e00e <Video::drawCursor(int, int, unsigned int*, int)>:
c000e00e:	55                   	push   ebp
c000e00f:	57                   	push   edi
c000e010:	56                   	push   esi
c000e011:	53                   	push   ebx
c000e012:	83 ec 2c             	sub    esp,0x2c
c000e015:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e019:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e01d:	83 f8 01             	cmp    eax,0x1
c000e020:	19 c9                	sbb    ecx,ecx
c000e022:	31 db                	xor    ebx,ebx
c000e024:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e028:	89 ce                	mov    esi,ecx
c000e02a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e032:	f7 d6                	not    esi
c000e034:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e03a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e03e:	01 d8                	add    eax,ebx
c000e040:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e044:	57                   	push   edi
c000e045:	e8 b8 ff ff ff       	call   c000e002 <Video::getHeight()>
c000e04a:	59                   	pop    ecx
c000e04b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e04f:	7e 70                	jle    c000e0c1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e051:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e055:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e059:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e05c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e060:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e064:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e06f:	89 e8                	mov    eax,ebp
c000e071:	83 c0 20             	add    eax,0x20
c000e074:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e078:	57                   	push   edi
c000e079:	e8 78 ff ff ff       	call   c000dff6 <Video::getWidth()>
c000e07e:	5a                   	pop    edx
c000e07f:	39 c5                	cmp    ebp,eax
c000e081:	7d 34                	jge    c000e0b7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e083:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e088:	74 05                	je     c000e08f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e08a:	8b 07                	mov    eax,DWORD PTR [edi]
c000e08c:	56                   	push   esi
c000e08d:	eb 0d                	jmp    c000e09c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e08f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e094:	74 12                	je     c000e0a8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e096:	8b 07                	mov    eax,DWORD PTR [edi]
c000e098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e09c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0a0:	55                   	push   ebp
c000e0a1:	57                   	push   edi
c000e0a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0a5:	83 c4 10             	add    esp,0x10
c000e0a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0ac:	45                   	inc    ebp
c000e0ad:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0b1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0b5:	75 c1                	jne    c000e078 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0b7:	43                   	inc    ebx
c000e0b8:	83 fb 20             	cmp    ebx,0x20
c000e0bb:	0f 85 79 ff ff ff    	jne    c000e03a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0c1:	83 c4 2c             	add    esp,0x2c
c000e0c4:	5b                   	pop    ebx
c000e0c5:	5e                   	pop    esi
c000e0c6:	5f                   	pop    edi
c000e0c7:	5d                   	pop    ebp
c000e0c8:	c3                   	ret    
c000e0c9:	90                   	nop

c000e0ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0ca:	55                   	push   ebp
c000e0cb:	57                   	push   edi
c000e0cc:	56                   	push   esi
c000e0cd:	53                   	push   ebx
c000e0ce:	83 ec 28             	sub    esp,0x28
c000e0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0d5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e0d9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0dd:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e0e1:	c1 e7 08             	shl    edi,0x8
c000e0e4:	01 c7                	add    edi,eax
c000e0e6:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e0ea:	c1 e6 08             	shl    esi,0x8
c000e0ed:	01 f0                	add    eax,esi
c000e0ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0f7:	0f af c7             	imul   eax,edi
c000e0fa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e101:	50                   	push   eax
c000e102:	e8 b0 99 ff ff       	call   c0007ab7 <malloc>
c000e107:	83 c4 10             	add    esp,0x10
c000e10a:	85 c0                	test   eax,eax
c000e10c:	89 c5                	mov    ebp,eax
c000e10e:	75 10                	jne    c000e120 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	68 f4 06 02 c0       	push   0xc00206f4
c000e118:	e8 a4 26 00 00       	call   c00107c1 <KePanic(char const*)>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e124:	ba 12 00 00 00       	mov    edx,0x12
c000e129:	85 c0                	test   eax,eax
c000e12b:	74 11                	je     c000e13e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e12d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e131:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e135:	c1 fa 03             	sar    edx,0x3
c000e138:	0f af d1             	imul   edx,ecx
c000e13b:	83 c2 12             	add    edx,0x12
c000e13e:	85 ff                	test   edi,edi
c000e140:	74 06                	je     c000e148 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e142:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e146:	75 12                	jne    c000e15a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e148:	83 ec 0c             	sub    esp,0xc
c000e14b:	68 04 07 02 c0       	push   0xc0020704
c000e150:	e8 e8 c7 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000e155:	e9 b8 00 00 00       	jmp    c000e212 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e15a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e15e:	83 f9 02             	cmp    ecx,0x2
c000e161:	0f 85 96 00 00 00    	jne    c000e1fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e167:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e16c:	75 0e                	jne    c000e17c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e16e:	85 c0                	test   eax,eax
c000e170:	75 0a                	jne    c000e17c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e172:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e175:	83 e8 18             	sub    eax,0x18
c000e178:	a8 f7                	test   al,0xf7
c000e17a:	74 0a                	je     c000e186 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e17c:	83 ec 0c             	sub    esp,0xc
c000e17f:	68 19 07 02 c0       	push   0xc0020719
c000e184:	eb 7f                	jmp    c000e205 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e186:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e18e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e196:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e19a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e19e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1a6:	75 0c                	jne    c000e1b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1a8:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e1ad:	c1 e1 18             	shl    ecx,0x18
c000e1b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1b4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1b9:	46                   	inc    esi
c000e1ba:	89 c8                	mov    eax,ecx
c000e1bc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1c1:	c1 e0 10             	shl    eax,0x10
c000e1c4:	c1 e1 08             	shl    ecx,0x8
c000e1c7:	09 c1                	or     ecx,eax
c000e1c9:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1cd:	09 c1                	or     ecx,eax
c000e1cf:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1d3:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e1d7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1db:	c1 f8 03             	sar    eax,0x3
c000e1de:	01 c2                	add    edx,eax
c000e1e0:	89 f0                	mov    eax,esi
c000e1e2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1e6:	39 c7                	cmp    edi,eax
c000e1e8:	7f b0                	jg     c000e19a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1ea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e1f2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e1f5:	7e 22                	jle    c000e219 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e1f7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e1fb:	eb 99                	jmp    c000e196 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e1fd:	50                   	push   eax
c000e1fe:	50                   	push   eax
c000e1ff:	51                   	push   ecx
c000e200:	68 27 07 02 c0       	push   0xc0020727
c000e205:	e8 33 c7 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000e20a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e20d:	e8 b5 98 ff ff       	call   c0007ac7 <free>
c000e212:	83 c4 10             	add    esp,0x10
c000e215:	31 ed                	xor    ebp,ebp
c000e217:	eb 0f                	jmp    c000e228 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e219:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e21d:	89 38                	mov    DWORD PTR [eax],edi
c000e21f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e223:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e226:	89 38                	mov    DWORD PTR [eax],edi
c000e228:	83 c4 1c             	add    esp,0x1c
c000e22b:	89 e8                	mov    eax,ebp
c000e22d:	5b                   	pop    ebx
c000e22e:	5e                   	pop    esi
c000e22f:	5f                   	pop    edi
c000e230:	5d                   	pop    ebp
c000e231:	c3                   	ret    

c000e232 <Video::putTGA(int, int, unsigned char*, int)>:
c000e232:	55                   	push   ebp
c000e233:	57                   	push   edi
c000e234:	56                   	push   esi
c000e235:	53                   	push   ebx
c000e236:	83 ec 28             	sub    esp,0x28
c000e239:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e23d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e241:	50                   	push   eax
c000e242:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e246:	50                   	push   eax
c000e247:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e24b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e24f:	57                   	push   edi
c000e250:	e8 75 fe ff ff       	call   c000e0ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e255:	83 c4 20             	add    esp,0x20
c000e258:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e25c:	85 c0                	test   eax,eax
c000e25e:	74 35                	je     c000e295 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e260:	89 c6                	mov    esi,eax
c000e262:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e266:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e26a:	39 d8                	cmp    eax,ebx
c000e26c:	7e 27                	jle    c000e295 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e26e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e272:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e276:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e27a:	39 e9                	cmp    ecx,ebp
c000e27c:	7e 14                	jle    c000e292 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e27e:	83 c6 04             	add    esi,0x4
c000e281:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e283:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e286:	53                   	push   ebx
c000e287:	55                   	push   ebp
c000e288:	45                   	inc    ebp
c000e289:	57                   	push   edi
c000e28a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e28d:	83 c4 10             	add    esp,0x10
c000e290:	eb e0                	jmp    c000e272 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e292:	43                   	inc    ebx
c000e293:	eb cd                	jmp    c000e262 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e295:	83 c4 1c             	add    esp,0x1c
c000e298:	5b                   	pop    ebx
c000e299:	5e                   	pop    esi
c000e29a:	5f                   	pop    edi
c000e29b:	5d                   	pop    ebp
c000e29c:	c3                   	ret    
c000e29d:	66 90                	xchg   ax,ax
c000e29f:	90                   	nop

c000e2a0 <ACPI::close(int, int, void*)>:
c000e2a0:	83 ec 1c             	sub    esp,0x1c
c000e2a3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2ab:	74 0b                	je     c000e2b8 <ACPI::close(int, int, void*)+0x18>
c000e2ad:	b8 00 00 00 00       	mov    eax,0x0
c000e2b2:	e9 99 00 00 00       	jmp    c000e350 <ACPI::close(int, int, void*)+0xb0>
c000e2b7:	90                   	nop
c000e2b8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2bd:	75 29                	jne    c000e2e8 <ACPI::close(int, int, void*)+0x48>
c000e2bf:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2c4:	85 c0                	test   eax,eax
c000e2c6:	74 08                	je     c000e2d0 <ACPI::close(int, int, void*)+0x30>
c000e2c8:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2cd:	ff d0                	call   eax
c000e2cf:	90                   	nop
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	68 88 07 02 c0       	push   0xc0020788
c000e2d8:	e8 e4 24 00 00       	call   c00107c1 <KePanic(char const*)>
c000e2dd:	83 c4 10             	add    esp,0x10
c000e2e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2e5:	eb 69                	jmp    c000e350 <ACPI::close(int, int, void*)+0xb0>
c000e2e7:	90                   	nop
c000e2e8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e2ed:	75 59                	jne    c000e348 <ACPI::close(int, int, void*)+0xa8>
c000e2ef:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2f4:	85 c0                	test   eax,eax
c000e2f6:	74 08                	je     c000e300 <ACPI::close(int, int, void*)+0x60>
c000e2f8:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2fd:	ff d0                	call   eax
c000e2ff:	90                   	nop
c000e300:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e305:	8d 76 00             	lea    esi,[esi+0x0]
c000e308:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e30d:	83 e0 02             	and    eax,0x2
c000e310:	74 1e                	je     c000e330 <ACPI::close(int, int, void*)+0x90>
c000e312:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e31d:	89 c2                	mov    edx,eax
c000e31f:	ec                   	in     al,dx
c000e320:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e324:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e328:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e32c:	eb da                	jmp    c000e308 <ACPI::close(int, int, void*)+0x68>
c000e32e:	66 90                	xchg   ax,ax
c000e330:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e337:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e33c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e344:	ee                   	out    dx,al
c000e345:	8d 76 00             	lea    esi,[esi+0x0]
c000e348:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e34d:	8d 76 00             	lea    esi,[esi+0x0]
c000e350:	83 c4 1c             	add    esp,0x1c
c000e353:	c3                   	ret    

c000e354 <findRSDP()>:
c000e354:	83 ec 1c             	sub    esp,0x1c
c000e357:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e35c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e362:	83 e0 04             	and    eax,0x4
c000e365:	0f b6 c0             	movzx  eax,al
c000e368:	85 c0                	test   eax,eax
c000e36a:	75 08                	jne    c000e374 <findRSDP()+0x20>
c000e36c:	b8 00 00 00 00       	mov    eax,0x0
c000e371:	eb 75                	jmp    c000e3e8 <findRSDP()+0x94>
c000e373:	90                   	nop
c000e374:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e379:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e37e:	7f 1c                	jg     c000e39c <findRSDP()+0x48>
c000e380:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e385:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e38b:	83 e2 fb             	and    edx,0xfffffffb
c000e38e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e394:	b8 00 00 00 00       	mov    eax,0x0
c000e399:	eb 4d                	jmp    c000e3e8 <findRSDP()+0x94>
c000e39b:	90                   	nop
c000e39c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3a4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3ac:	77 32                	ja     c000e3e0 <findRSDP()+0x8c>
c000e3ae:	83 ec 04             	sub    esp,0x4
c000e3b1:	6a 08                	push   0x8
c000e3b3:	68 23 08 02 c0       	push   0xc0020823
c000e3b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3bc:	e8 bf 1f ff ff       	call   c0000380 <memcmp>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	85 c0                	test   eax,eax
c000e3c6:	0f 94 c0             	sete   al
c000e3c9:	0f b6 c0             	movzx  eax,al
c000e3cc:	85 c0                	test   eax,eax
c000e3ce:	74 08                	je     c000e3d8 <findRSDP()+0x84>
c000e3d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d4:	eb 12                	jmp    c000e3e8 <findRSDP()+0x94>
c000e3d6:	66 90                	xchg   ax,ax
c000e3d8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3dd:	eb c5                	jmp    c000e3a4 <findRSDP()+0x50>
c000e3df:	90                   	nop
c000e3e0:	b8 00 00 00 00       	mov    eax,0x0
c000e3e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3e8:	83 c4 1c             	add    esp,0x1c
c000e3eb:	c3                   	ret    

c000e3ec <loadACPITables(unsigned char*)>:
c000e3ec:	57                   	push   edi
c000e3ed:	56                   	push   esi
c000e3ee:	53                   	push   ebx
c000e3ef:	83 ec 60             	sub    esp,0x60
c000e3f2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3f7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3fd:	83 e0 04             	and    eax,0x4
c000e400:	0f b6 c0             	movzx  eax,al
c000e403:	85 c0                	test   eax,eax
c000e405:	0f 84 41 02 00 00    	je     c000e64c <loadACPITables(unsigned char*)+0x260>
c000e40b:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e410:	0f b6 c0             	movzx  eax,al
c000e413:	85 c0                	test   eax,eax
c000e415:	74 79                	je     c000e490 <loadACPITables(unsigned char*)+0xa4>
c000e417:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e41b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e41f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e426:	83 e8 24             	sub    eax,0x24
c000e429:	c1 e8 03             	shr    eax,0x3
c000e42c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e430:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e438:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e43c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e440:	0f 8d ba 00 00 00    	jge    c000e500 <loadACPITables(unsigned char*)+0x114>
c000e446:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e44a:	83 c0 24             	add    eax,0x24
c000e44d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e451:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e455:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e459:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e45d:	c1 e0 03             	shl    eax,0x3
c000e460:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e464:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e46d:	89 c1                	mov    ecx,eax
c000e46f:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e474:	8d 50 01             	lea    edx,[eax+0x1]
c000e477:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e47d:	89 ca                	mov    edx,ecx
c000e47f:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e486:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e48b:	eb ab                	jmp    c000e438 <loadACPITables(unsigned char*)+0x4c>
c000e48d:	8d 76 00             	lea    esi,[esi+0x0]
c000e490:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e494:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e498:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e49c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e49f:	83 e8 24             	sub    eax,0x24
c000e4a2:	c1 e8 02             	shr    eax,0x2
c000e4a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4a9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4b8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4bc:	7d 42                	jge    c000e500 <loadACPITables(unsigned char*)+0x114>
c000e4be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c2:	83 c0 24             	add    eax,0x24
c000e4c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4d5:	c1 e0 02             	shl    eax,0x2
c000e4d8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4e2:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4e7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ea:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4f0:	89 ca                	mov    edx,ecx
c000e4f2:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4f9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e4fe:	eb b4                	jmp    c000e4b4 <loadACPITables(unsigned char*)+0xc8>
c000e500:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e508:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e50d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e511:	0f 8d 39 01 00 00    	jge    c000e650 <loadACPITables(unsigned char*)+0x264>
c000e517:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e51b:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e522:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e526:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e52a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e52e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e532:	25 ff 0f 00 00       	and    eax,0xfff
c000e537:	89 c6                	mov    esi,eax
c000e539:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	6a 01                	push   0x1
c000e544:	e8 a8 b0 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e549:	83 c4 10             	add    esp,0x10
c000e54c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e550:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e556:	83 ec 0c             	sub    esp,0xc
c000e559:	6a 01                	push   0x1
c000e55b:	6a 01                	push   0x1
c000e55d:	50                   	push   eax
c000e55e:	52                   	push   edx
c000e55f:	53                   	push   ebx
c000e560:	e8 85 ba ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e565:	83 c4 20             	add    esp,0x20
c000e568:	09 f0                	or     eax,esi
c000e56a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e56e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e572:	c1 e0 03             	shl    eax,0x3
c000e575:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e57a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e57e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e582:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e586:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e58e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e592:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e596:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e59a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e59e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5a2:	89 c6                	mov    esi,eax
c000e5a4:	89 d7                	mov    edi,edx
c000e5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5a8:	89 c8                	mov    eax,ecx
c000e5aa:	89 fa                	mov    edx,edi
c000e5ac:	89 f3                	mov    ebx,esi
c000e5ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5c9:	05 00 10 00 00       	add    eax,0x1000
c000e5ce:	c1 e8 0c             	shr    eax,0xc
c000e5d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e1:	25 ff 0f 00 00       	and    eax,0xfff
c000e5e6:	89 c6                	mov    esi,eax
c000e5e8:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e5f5:	e8 f7 af ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e5fa:	83 c4 10             	add    esp,0x10
c000e5fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e601:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e607:	83 ec 0c             	sub    esp,0xc
c000e60a:	6a 01                	push   0x1
c000e60c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e610:	50                   	push   eax
c000e611:	52                   	push   edx
c000e612:	53                   	push   ebx
c000e613:	e8 d2 b9 ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e618:	83 c4 20             	add    esp,0x20
c000e61b:	09 f0                	or     eax,esi
c000e61d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e625:	83 ec 0c             	sub    esp,0xc
c000e628:	50                   	push   eax
c000e629:	e8 d5 b2 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c000e62e:	83 c4 10             	add    esp,0x10
c000e631:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e635:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e639:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e640:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e645:	e9 be fe ff ff       	jmp    c000e508 <loadACPITables(unsigned char*)+0x11c>
c000e64a:	66 90                	xchg   ax,ax
c000e64c:	90                   	nop
c000e64d:	8d 76 00             	lea    esi,[esi+0x0]
c000e650:	83 c4 60             	add    esp,0x60
c000e653:	5b                   	pop    ebx
c000e654:	5e                   	pop    esi
c000e655:	5f                   	pop    edi
c000e656:	c3                   	ret    
c000e657:	90                   	nop

c000e658 <findRSDT(unsigned char*)>:
c000e658:	57                   	push   edi
c000e659:	56                   	push   esi
c000e65a:	53                   	push   ebx
c000e65b:	83 ec 50             	sub    esp,0x50
c000e65e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e663:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e669:	83 e0 04             	and    eax,0x4
c000e66c:	0f b6 c0             	movzx  eax,al
c000e66f:	85 c0                	test   eax,eax
c000e671:	75 0d                	jne    c000e680 <findRSDT(unsigned char*)+0x28>
c000e673:	b8 00 00 00 00       	mov    eax,0x0
c000e678:	e9 2b 01 00 00       	jmp    c000e7a8 <findRSDT(unsigned char*)+0x150>
c000e67d:	8d 76 00             	lea    esi,[esi+0x0]
c000e680:	89 e0                	mov    eax,esp
c000e682:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e68a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e68e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e696:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e69a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e69e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6a6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6aa:	89 c6                	mov    esi,eax
c000e6ac:	89 d7                	mov    edi,edx
c000e6ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6b0:	89 c8                	mov    eax,ecx
c000e6b2:	89 fa                	mov    edx,edi
c000e6b4:	89 f3                	mov    ebx,esi
c000e6b6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6c2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6c6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6ea:	25 ff 0f 00 00       	and    eax,0xfff
c000e6ef:	89 c6                	mov    esi,eax
c000e6f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6f7:	83 ec 0c             	sub    esp,0xc
c000e6fa:	6a 02                	push   0x2
c000e6fc:	e8 f0 ae ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e701:	83 c4 10             	add    esp,0x10
c000e704:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e708:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e70e:	83 ec 0c             	sub    esp,0xc
c000e711:	6a 01                	push   0x1
c000e713:	6a 02                	push   0x2
c000e715:	50                   	push   eax
c000e716:	52                   	push   edx
c000e717:	53                   	push   ebx
c000e718:	e8 cd b8 ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e71d:	83 c4 20             	add    esp,0x20
c000e720:	09 f0                	or     eax,esi
c000e722:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e726:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e72a:	25 ff 0f 00 00       	and    eax,0xfff
c000e72f:	89 c6                	mov    esi,eax
c000e731:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e737:	83 ec 0c             	sub    esp,0xc
c000e73a:	6a 02                	push   0x2
c000e73c:	e8 b0 ae ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e741:	83 c4 10             	add    esp,0x10
c000e744:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e748:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e74e:	83 ec 0c             	sub    esp,0xc
c000e751:	6a 01                	push   0x1
c000e753:	6a 02                	push   0x2
c000e755:	50                   	push   eax
c000e756:	52                   	push   edx
c000e757:	53                   	push   ebx
c000e758:	e8 8d b8 ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e75d:	83 c4 20             	add    esp,0x20
c000e760:	09 f0                	or     eax,esi
c000e762:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e766:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e76b:	85 c0                	test   eax,eax
c000e76d:	75 11                	jne    c000e780 <findRSDT(unsigned char*)+0x128>
c000e76f:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e776:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e77e:	eb 24                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x14c>
c000e780:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e785:	83 f8 02             	cmp    eax,0x2
c000e788:	75 12                	jne    c000e79c <findRSDT(unsigned char*)+0x144>
c000e78a:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e791:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e795:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e799:	eb 09                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x14c>
c000e79b:	90                   	nop
c000e79c:	b8 00 00 00 00       	mov    eax,0x0
c000e7a1:	eb 05                	jmp    c000e7a8 <findRSDT(unsigned char*)+0x150>
c000e7a3:	90                   	nop
c000e7a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7a8:	83 c4 50             	add    esp,0x50
c000e7ab:	5b                   	pop    ebx
c000e7ac:	5e                   	pop    esi
c000e7ad:	5f                   	pop    edi
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <findDataTable(unsigned char*, char*)>:
c000e7b0:	83 ec 1c             	sub    esp,0x1c
c000e7b3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7be:	83 e0 04             	and    eax,0x4
c000e7c1:	0f b6 c0             	movzx  eax,al
c000e7c4:	85 c0                	test   eax,eax
c000e7c6:	75 08                	jne    c000e7d0 <findDataTable(unsigned char*, char*)+0x20>
c000e7c8:	b8 00 00 00 00       	mov    eax,0x0
c000e7cd:	eb 5d                	jmp    c000e82c <findDataTable(unsigned char*, char*)+0x7c>
c000e7cf:	90                   	nop
c000e7d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7d8:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7e1:	7d 41                	jge    c000e824 <findDataTable(unsigned char*, char*)+0x74>
c000e7e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e7:	c1 e0 03             	shl    eax,0x3
c000e7ea:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e7ef:	83 ec 04             	sub    esp,0x4
c000e7f2:	6a 04                	push   0x4
c000e7f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7f8:	50                   	push   eax
c000e7f9:	e8 82 1b ff ff       	call   c0000380 <memcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	0f b6 c0             	movzx  eax,al
c000e809:	85 c0                	test   eax,eax
c000e80b:	74 0f                	je     c000e81c <findDataTable(unsigned char*, char*)+0x6c>
c000e80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e811:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e818:	eb 12                	jmp    c000e82c <findDataTable(unsigned char*, char*)+0x7c>
c000e81a:	66 90                	xchg   ax,ax
c000e81c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e821:	eb b5                	jmp    c000e7d8 <findDataTable(unsigned char*, char*)+0x28>
c000e823:	90                   	nop
c000e824:	b8 00 00 00 00       	mov    eax,0x0
c000e829:	8d 76 00             	lea    esi,[esi+0x0]
c000e82c:	83 c4 1c             	add    esp,0x1c
c000e82f:	c3                   	ret    

c000e830 <scanMADT()>:
c000e830:	53                   	push   ebx
c000e831:	83 ec 38             	sub    esp,0x38
c000e834:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e839:	25 00 04 00 00       	and    eax,0x400
c000e83e:	74 14                	je     c000e854 <scanMADT()+0x24>
c000e840:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e845:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e84b:	83 e2 fb             	and    edx,0xfffffffb
c000e84e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e854:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e859:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e85f:	83 e0 04             	and    eax,0x4
c000e862:	0f b6 c0             	movzx  eax,al
c000e865:	85 c0                	test   eax,eax
c000e867:	0f 84 6b 04 00 00    	je     c000ecd8 <scanMADT()+0x4a8>
c000e86d:	e8 e2 fa ff ff       	call   c000e354 <findRSDP()>
c000e872:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e877:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e87c:	85 c0                	test   eax,eax
c000e87e:	75 1c                	jne    c000e89c <scanMADT()+0x6c>
c000e880:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e885:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e88b:	83 e2 fb             	and    edx,0xfffffffb
c000e88e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e894:	e9 47 04 00 00       	jmp    c000ece0 <scanMADT()+0x4b0>
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8a1:	83 ec 0c             	sub    esp,0xc
c000e8a4:	50                   	push   eax
c000e8a5:	e8 ae fd ff ff       	call   c000e658 <findRSDT(unsigned char*)>
c000e8aa:	83 c4 10             	add    esp,0x10
c000e8ad:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8b2:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8b7:	85 c0                	test   eax,eax
c000e8b9:	75 19                	jne    c000e8d4 <scanMADT()+0xa4>
c000e8bb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8c0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8c6:	83 e2 fb             	and    edx,0xfffffffb
c000e8c9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8cf:	e9 0c 04 00 00       	jmp    c000ece0 <scanMADT()+0x4b0>
c000e8d4:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8d9:	83 ec 0c             	sub    esp,0xc
c000e8dc:	50                   	push   eax
c000e8dd:	e8 0a fb ff ff       	call   c000e3ec <loadACPITables(unsigned char*)>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8ea:	83 ec 08             	sub    esp,0x8
c000e8ed:	68 2c 08 02 c0       	push   0xc002082c
c000e8f2:	50                   	push   eax
c000e8f3:	e8 b8 fe ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e904:	75 1a                	jne    c000e920 <scanMADT()+0xf0>
c000e906:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e90b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e911:	83 e2 fe             	and    edx,0xfffffffe
c000e914:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e91a:	e9 c1 03 00 00       	jmp    c000ece0 <scanMADT()+0x4b0>
c000e91f:	90                   	nop
c000e920:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e92c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e92f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e933:	0f 87 a7 03 00 00    	ja     c000ece0 <scanMADT()+0x4b0>
c000e939:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e941:	0f 87 99 03 00 00    	ja     c000ece0 <scanMADT()+0x4b0>
c000e947:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e94b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e94f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e953:	8d 50 01             	lea    edx,[eax+0x1]
c000e956:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e95a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e95e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e962:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e96a:	8d 50 01             	lea    edx,[eax+0x1]
c000e96d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e971:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e975:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e979:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e97d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e982:	83 f8 02             	cmp    eax,0x2
c000e985:	0f 86 51 03 00 00    	jbe    c000ecdc <scanMADT()+0x4ac>
c000e98b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e990:	85 c0                	test   eax,eax
c000e992:	75 58                	jne    c000e9ec <scanMADT()+0x1bc>
c000e994:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e998:	8d 50 01             	lea    edx,[eax+0x1]
c000e99b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e99f:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9a5:	0f b6 d2             	movzx  edx,dl
c000e9a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9ac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9b0:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ba:	8d 50 01             	lea    edx,[eax+0x1]
c000e9bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c1:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9c7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9ca:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9d0:	0f b6 d2             	movzx  edx,dl
c000e9d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9d7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9db:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9e6:	e9 d9 02 00 00       	jmp    c000ecc4 <scanMADT()+0x494>
c000e9eb:	90                   	nop
c000e9ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9f1:	83 f8 01             	cmp    eax,0x1
c000e9f4:	0f 85 1a 01 00 00    	jne    c000eb14 <scanMADT()+0x2e4>
c000e9fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9fe:	8d 50 01             	lea    edx,[eax+0x1]
c000ea01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea05:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea0b:	0f b6 d2             	movzx  edx,dl
c000ea0e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea12:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea16:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea1c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea29:	01 d0                	add    eax,edx
c000ea2b:	83 c0 2c             	add    eax,0x2c
c000ea2e:	8a 00                	mov    al,BYTE PTR [eax]
c000ea30:	0f b6 d0             	movzx  edx,al
c000ea33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea37:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea3e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea42:	0f b6 c0             	movzx  eax,al
c000ea45:	c1 e0 08             	shl    eax,0x8
c000ea48:	89 d1                	mov    ecx,edx
c000ea4a:	09 c1                	or     ecx,eax
c000ea4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea50:	8d 50 02             	lea    edx,[eax+0x2]
c000ea53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea57:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea5b:	0f b6 c0             	movzx  eax,al
c000ea5e:	c1 e0 10             	shl    eax,0x10
c000ea61:	09 c1                	or     ecx,eax
c000ea63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea67:	8d 50 03             	lea    edx,[eax+0x3]
c000ea6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea72:	0f b6 c0             	movzx  eax,al
c000ea75:	c1 e0 18             	shl    eax,0x18
c000ea78:	09 c1                	or     ecx,eax
c000ea7a:	89 ca                	mov    edx,ecx
c000ea7c:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea81:	0f b6 c0             	movzx  eax,al
c000ea84:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea8b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea98:	01 d0                	add    eax,edx
c000ea9a:	83 c0 2c             	add    eax,0x2c
c000ea9d:	8a 00                	mov    al,BYTE PTR [eax]
c000ea9f:	0f b6 d0             	movzx  edx,al
c000eaa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa6:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaa9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eab1:	0f b6 c0             	movzx  eax,al
c000eab4:	c1 e0 08             	shl    eax,0x8
c000eab7:	89 d1                	mov    ecx,edx
c000eab9:	09 c1                	or     ecx,eax
c000eabb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabf:	8d 50 02             	lea    edx,[eax+0x2]
c000eac2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaca:	0f b6 c0             	movzx  eax,al
c000eacd:	c1 e0 10             	shl    eax,0x10
c000ead0:	09 c1                	or     ecx,eax
c000ead2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead6:	8d 50 03             	lea    edx,[eax+0x3]
c000ead9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eadd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eae1:	0f b6 c0             	movzx  eax,al
c000eae4:	c1 e0 18             	shl    eax,0x18
c000eae7:	09 c1                	or     ecx,eax
c000eae9:	89 ca                	mov    edx,ecx
c000eaeb:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eaf0:	0f b6 c0             	movzx  eax,al
c000eaf3:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eafa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaff:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb04:	83 c0 01             	add    eax,0x1
c000eb07:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb0c:	e9 b3 01 00 00       	jmp    c000ecc4 <scanMADT()+0x494>
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb19:	83 f8 02             	cmp    eax,0x2
c000eb1c:	0f 85 ea 00 00 00    	jne    c000ec0c <scanMADT()+0x3dc>
c000eb22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb26:	8d 50 01             	lea    edx,[eax+0x1]
c000eb29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb31:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb35:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3d:	8d 50 01             	lea    edx,[eax+0x1]
c000eb40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb4c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb58:	01 d0                	add    eax,edx
c000eb5a:	83 c0 2c             	add    eax,0x2c
c000eb5d:	8a 00                	mov    al,BYTE PTR [eax]
c000eb5f:	0f b6 d0             	movzx  edx,al
c000eb62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb66:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb6d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb71:	0f b6 c0             	movzx  eax,al
c000eb74:	c1 e0 08             	shl    eax,0x8
c000eb77:	89 d1                	mov    ecx,edx
c000eb79:	09 c1                	or     ecx,eax
c000eb7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7f:	8d 50 02             	lea    edx,[eax+0x2]
c000eb82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb8a:	0f b6 c0             	movzx  eax,al
c000eb8d:	c1 e0 10             	shl    eax,0x10
c000eb90:	09 c1                	or     ecx,eax
c000eb92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb96:	8d 50 03             	lea    edx,[eax+0x3]
c000eb99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eba1:	0f b6 c0             	movzx  eax,al
c000eba4:	c1 e0 18             	shl    eax,0x18
c000eba7:	09 c8                	or     eax,ecx
c000eba9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebba:	01 d0                	add    eax,edx
c000ebbc:	83 c0 2c             	add    eax,0x2c
c000ebbf:	8a 00                	mov    al,BYTE PTR [eax]
c000ebc1:	0f b6 d0             	movzx  edx,al
c000ebc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc8:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebcf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebd3:	0f b6 c0             	movzx  eax,al
c000ebd6:	c1 e0 08             	shl    eax,0x8
c000ebd9:	09 d0                	or     eax,edx
c000ebdb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebe0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebe5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebee:	88 90 60 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde1a0],dl
c000ebf4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebf9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ebfe:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec06:	e9 b9 00 00 00       	jmp    c000ecc4 <scanMADT()+0x494>
c000ec0b:	90                   	nop
c000ec0c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec11:	83 f8 04             	cmp    eax,0x4
c000ec14:	0f 85 9a 00 00 00    	jne    c000ecb4 <scanMADT()+0x484>
c000ec1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec29:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec2d:	0f b6 c0             	movzx  eax,al
c000ec30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3c:	01 d0                	add    eax,edx
c000ec3e:	83 c0 2c             	add    eax,0x2c
c000ec41:	8a 00                	mov    al,BYTE PTR [eax]
c000ec43:	0f b6 d0             	movzx  edx,al
c000ec46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec55:	0f b6 c0             	movzx  eax,al
c000ec58:	c1 e0 08             	shl    eax,0x8
c000ec5b:	09 d0                	or     eax,edx
c000ec5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec61:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec6a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec75:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec79:	0f b6 c0             	movzx  eax,al
c000ec7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec84:	c1 e0 08             	shl    eax,0x8
c000ec87:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec8b:	89 c1                	mov    ecx,eax
c000ec8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec91:	c1 e0 18             	shl    eax,0x18
c000ec94:	89 c3                	mov    ebx,eax
c000ec96:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec9b:	8d 50 01             	lea    edx,[eax+0x1]
c000ec9e:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000eca4:	09 d9                	or     ecx,ebx
c000eca6:	89 ca                	mov    edx,ecx
c000eca8:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecaf:	eb 13                	jmp    c000ecc4 <scanMADT()+0x494>
c000ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ecb9:	83 f8 05             	cmp    eax,0x5
c000ecbc:	75 06                	jne    c000ecc4 <scanMADT()+0x494>
c000ecbe:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecc3:	90                   	nop
c000ecc4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eccd:	01 d0                	add    eax,edx
c000eccf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecd3:	e9 50 fc ff ff       	jmp    c000e928 <scanMADT()+0xf8>
c000ecd8:	90                   	nop
c000ecd9:	eb 05                	jmp    c000ece0 <scanMADT()+0x4b0>
c000ecdb:	90                   	nop
c000ecdc:	90                   	nop
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ece0:	83 c4 38             	add    esp,0x38
c000ece3:	5b                   	pop    ebx
c000ece4:	c3                   	ret    
c000ece5:	90                   	nop
c000ece6:	66 90                	xchg   ax,ax

c000ece8 <ACPI::ACPI()>:
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecef:	83 ec 08             	sub    esp,0x8
c000ecf2:	68 31 08 02 c0       	push   0xc0020831
c000ecf7:	50                   	push   eax
c000ecf8:	e8 3b d2 ff ff       	call   c000bf38 <Device::Device(char const*)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	ba 68 09 02 c0       	mov    edx,0xc0020968
c000ed05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed09:	89 10                	mov    DWORD PTR [eax],edx
c000ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed0f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed28:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed32:	e8 f9 fa ff ff       	call   c000e830 <scanMADT()>
c000ed37:	90                   	nop
c000ed38:	83 c4 0c             	add    esp,0xc
c000ed3b:	c3                   	ret    

c000ed3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed3c:	83 ec 2c             	sub    esp,0x2c
c000ed3f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ed43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed47:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed4b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ed4f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed54:	88 c8                	mov    al,cl
c000ed56:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed5f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed67:	90                   	nop
c000ed68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed6c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed72:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed76:	0f 8d b0 00 00 00    	jge    c000ee2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed84:	83 c2 2a             	add    edx,0x2a
c000ed87:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ed90:	0f b7 c0             	movzx  eax,ax
c000ed93:	39 c2                	cmp    edx,eax
c000ed95:	0f 85 85 00 00 00    	jne    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eda3:	83 c2 2a             	add    edx,0x2a
c000eda6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edaa:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000edaf:	0f b6 c0             	movzx  eax,al
c000edb2:	39 c2                	cmp    edx,eax
c000edb4:	75 6a                	jne    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edb6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edbb:	85 c0                	test   eax,eax
c000edbd:	74 3d                	je     c000edfc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc7:	83 c2 2a             	add    edx,0x2a
c000edca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edd5:	39 c2                	cmp    edx,eax
c000edd7:	74 13                	je     c000edec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000edd9:	83 ec 0c             	sub    esp,0xc
c000eddc:	68 ac 07 02 c0       	push   0xc00207ac
c000ede1:	e8 db 19 00 00       	call   c00107c1 <KePanic(char const*)>
c000ede6:	83 c4 10             	add    esp,0x10
c000ede9:	8d 76 00             	lea    esi,[esi+0x0]
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	68 36 08 02 c0       	push   0xc0020836
c000edf4:	e8 c8 19 00 00       	call   c00107c1 <KePanic(char const*)>
c000edf9:	83 c4 10             	add    esp,0x10
c000edfc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee08:	83 c2 2a             	add    edx,0x2a
c000ee0b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee0f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee11:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee14:	89 01                	mov    DWORD PTR [ecx],eax
c000ee16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee19:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee25:	e9 3e ff ff ff       	jmp    c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee2a:	66 90                	xchg   ax,ax
c000ee2c:	90                   	nop
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	83 c4 2c             	add    esp,0x2c
c000ee34:	c2 04 00             	ret    0x4
c000ee37:	90                   	nop

c000ee38 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee38:	83 ec 1c             	sub    esp,0x1c
c000ee3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee3f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee47:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee4c:	88 c8                	mov    al,cl
c000ee4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee52:	88 d0                	mov    al,dl
c000ee54:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee66:	83 c2 2a             	add    edx,0x2a
c000ee69:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ee6d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee75:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee86:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000ee8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee95:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ee99:	83 c0 01             	add    eax,0x1
c000ee9c:	88 c1                	mov    cl,al
c000ee9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea2:	83 c2 2a             	add    edx,0x2a
c000eea5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eead:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eebe:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eecc:	8d 50 01             	lea    edx,[eax+0x1]
c000eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee3:	3d 00 02 00 00       	cmp    eax,0x200
c000eee8:	75 12                	jne    c000eefc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eeea:	83 ec 0c             	sub    esp,0xc
c000eeed:	68 45 08 02 c0       	push   0xc0020845
c000eef2:	e8 ca 18 00 00       	call   c00107c1 <KePanic(char const*)>
c000eef7:	83 c4 10             	add    esp,0x10
c000eefa:	66 90                	xchg   ax,ax
c000eefc:	90                   	nop
c000eefd:	83 c4 1c             	add    esp,0x1c
c000ef00:	c3                   	ret    
c000ef01:	90                   	nop
c000ef02:	66 90                	xchg   ax,ax

c000ef04 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef04:	b8 00 00 00 00       	mov    eax,0x0
c000ef09:	c3                   	ret    
c000ef0a:	66 90                	xchg   ax,ax

c000ef0c <ACPI::detectPCI()>:
c000ef0c:	53                   	push   ebx
c000ef0d:	83 ec 28             	sub    esp,0x28
c000ef10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef15:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef1a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef1f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef25:	83 e0 04             	and    eax,0x4
c000ef28:	0f b6 c0             	movzx  eax,al
c000ef2b:	85 c0                	test   eax,eax
c000ef2d:	74 2d                	je     c000ef5c <ACPI::detectPCI()+0x50>
c000ef2f:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef34:	83 ec 08             	sub    esp,0x8
c000ef37:	68 62 08 02 c0       	push   0xc0020862
c000ef3c:	50                   	push   eax
c000ef3d:	e8 6e f8 ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef49:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef4e:	74 0c                	je     c000ef5c <ACPI::detectPCI()+0x50>
c000ef50:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef55:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef5a:	66 90                	xchg   ax,ax
c000ef5c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef68:	8a 00                	mov    al,BYTE PTR [eax]
c000ef6a:	0f b6 c0             	movzx  eax,al
c000ef6d:	83 f8 01             	cmp    eax,0x1
c000ef70:	75 0e                	jne    c000ef80 <ACPI::detectPCI()+0x74>
c000ef72:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef77:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef7c:	eb 2e                	jmp    c000efac <ACPI::detectPCI()+0xa0>
c000ef7e:	66 90                	xchg   ax,ax
c000ef80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef84:	8a 00                	mov    al,BYTE PTR [eax]
c000ef86:	0f b6 c0             	movzx  eax,al
c000ef89:	83 f8 02             	cmp    eax,0x2
c000ef8c:	75 1e                	jne    c000efac <ACPI::detectPCI()+0xa0>
c000ef8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef93:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ef98:	85 c0                	test   eax,eax
c000ef9a:	74 10                	je     c000efac <ACPI::detectPCI()+0xa0>
c000ef9c:	83 ec 0c             	sub    esp,0xc
c000ef9f:	68 dc 07 02 c0       	push   0xc00207dc
c000efa4:	e8 18 18 00 00       	call   c00107c1 <KePanic(char const*)>
c000efa9:	83 c4 10             	add    esp,0x10
c000efac:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efb0:	83 f0 01             	xor    eax,0x1
c000efb3:	0f b6 c0             	movzx  eax,al
c000efb6:	85 c0                	test   eax,eax
c000efb8:	74 46                	je     c000f000 <ACPI::detectPCI()+0xf4>
c000efba:	e8 71 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efc3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efc8:	75 0e                	jne    c000efd8 <ACPI::detectPCI()+0xcc>
c000efca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efcf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd4:	eb 2a                	jmp    c000f000 <ACPI::detectPCI()+0xf4>
c000efd6:	66 90                	xchg   ax,ax
c000efd8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efdd:	75 21                	jne    c000f000 <ACPI::detectPCI()+0xf4>
c000efdf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efe9:	85 c0                	test   eax,eax
c000efeb:	74 13                	je     c000f000 <ACPI::detectPCI()+0xf4>
c000efed:	83 ec 0c             	sub    esp,0xc
c000eff0:	68 dc 07 02 c0       	push   0xc00207dc
c000eff5:	e8 c7 17 00 00       	call   c00107c1 <KePanic(char const*)>
c000effa:	83 c4 10             	add    esp,0x10
c000effd:	8d 76 00             	lea    esi,[esi+0x0]
c000f000:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f005:	85 c0                	test   eax,eax
c000f007:	0f 84 87 00 00 00    	je     c000f094 <ACPI::detectPCI()+0x188>
c000f00d:	83 ec 0c             	sub    esp,0xc
c000f010:	68 67 08 02 c0       	push   0xc0020867
c000f015:	e8 2a 11 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000f01a:	83 c4 10             	add    esp,0x10
c000f01d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f025:	83 ec 0c             	sub    esp,0xc
c000f028:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f02c:	e8 86 8a ff ff       	call   c0007ab7 <malloc>
c000f031:	83 c4 10             	add    esp,0x10
c000f034:	89 c3                	mov    ebx,eax
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	53                   	push   ebx
c000f03a:	e8 6b af 00 00       	call   c0019faa <PCI::PCI()>
c000f03f:	83 c4 10             	add    esp,0x10
c000f042:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f046:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f04a:	83 ec 08             	sub    esp,0x8
c000f04d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f051:	50                   	push   eax
c000f052:	e8 49 cd ff ff       	call   c000bda0 <Device::addChild(Device*)>
c000f057:	83 c4 10             	add    esp,0x10
c000f05a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f05e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f060:	83 c0 08             	add    eax,0x8
c000f063:	8b 00                	mov    eax,DWORD PTR [eax]
c000f065:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f06a:	85 d2                	test   edx,edx
c000f06c:	74 0a                	je     c000f078 <ACPI::detectPCI()+0x16c>
c000f06e:	ba 01 00 00 00       	mov    edx,0x1
c000f073:	eb 0b                	jmp    c000f080 <ACPI::detectPCI()+0x174>
c000f075:	8d 76 00             	lea    esi,[esi+0x0]
c000f078:	ba 02 00 00 00       	mov    edx,0x2
c000f07d:	8d 76 00             	lea    esi,[esi+0x0]
c000f080:	6a 00                	push   0x0
c000f082:	6a 00                	push   0x0
c000f084:	52                   	push   edx
c000f085:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f089:	ff d0                	call   eax
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	e9 91 00 00 00       	jmp    c000f124 <ACPI::detectPCI()+0x218>
c000f093:	90                   	nop
c000f094:	83 ec 0c             	sub    esp,0xc
c000f097:	68 7f 08 02 c0       	push   0xc002087f
c000f09c:	e8 a3 10 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0ab:	83 ec 0c             	sub    esp,0xc
c000f0ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0b2:	e8 00 8a ff ff       	call   c0007ab7 <malloc>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	89 c3                	mov    ebx,eax
c000f0bc:	83 ec 0c             	sub    esp,0xc
c000f0bf:	53                   	push   ebx
c000f0c0:	e8 8d ba 00 00       	call   c001ab52 <IDE::IDE()>
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0d0:	83 ec 08             	sub    esp,0x8
c000f0d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0d7:	50                   	push   eax
c000f0d8:	e8 c3 cc ff ff       	call   c000bda0 <Device::addChild(Device*)>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ff:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f10c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10e:	83 c0 08             	add    eax,0x8
c000f111:	8b 00                	mov    eax,DWORD PTR [eax]
c000f113:	6a 00                	push   0x0
c000f115:	6a 00                	push   0x0
c000f117:	6a 00                	push   0x0
c000f119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f11d:	ff d0                	call   eax
c000f11f:	83 c4 10             	add    esp,0x10
c000f122:	66 90                	xchg   ax,ax
c000f124:	90                   	nop
c000f125:	83 c4 28             	add    esp,0x28
c000f128:	5b                   	pop    ebx
c000f129:	c3                   	ret    
c000f12a:	66 90                	xchg   ax,ax

c000f12c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f12c:	83 ec 1c             	sub    esp,0x1c
c000f12f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f133:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f136:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f13a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f13f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f144:	83 ec 08             	sub    esp,0x8
c000f147:	52                   	push   edx
c000f148:	50                   	push   eax
c000f149:	e8 44 80 ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f14e:	83 c4 10             	add    esp,0x10
c000f151:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f155:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f15a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f15f:	83 ec 04             	sub    esp,0x4
c000f162:	6a 01                	push   0x1
c000f164:	52                   	push   edx
c000f165:	50                   	push   eax
c000f166:	e8 2d 81 ff ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f16b:	83 c4 10             	add    esp,0x10
c000f16e:	90                   	nop
c000f16f:	83 c4 1c             	add    esp,0x1c
c000f172:	c3                   	ret    
c000f173:	90                   	nop

c000f174 <ACPI::sleep()>:
c000f174:	83 ec 0c             	sub    esp,0xc
c000f177:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f17c:	85 c0                	test   eax,eax
c000f17e:	74 08                	je     c000f188 <ACPI::sleep()+0x14>
c000f180:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f185:	ff d0                	call   eax
c000f187:	90                   	nop
c000f188:	90                   	nop
c000f189:	83 c4 0c             	add    esp,0xc
c000f18c:	c3                   	ret    
c000f18d:	90                   	nop
c000f18e:	66 90                	xchg   ax,ax

c000f190 <ACPI::open(int, int, void*)>:
c000f190:	55                   	push   ebp
c000f191:	89 e5                	mov    ebp,esp
c000f193:	53                   	push   ebx
c000f194:	81 ec 74 01 00 00    	sub    esp,0x174
c000f19a:	83 ec 0c             	sub    esp,0xc
c000f19d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f1a0:	e8 67 fd ff ff       	call   c000ef0c <ACPI::detectPCI()>
c000f1a5:	83 c4 10             	add    esp,0x10
c000f1a8:	83 ec 0c             	sub    esp,0xc
c000f1ab:	68 04 08 02 c0       	push   0xc0020804
c000f1b0:	e8 8f 0f 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000f1b5:	83 c4 10             	add    esp,0x10
c000f1b8:	83 ec 0c             	sub    esp,0xc
c000f1bb:	68 94 08 02 c0       	push   0xc0020894
c000f1c0:	e8 09 49 00 00       	call   c0013ace <Thr::loadKernelSymbolTable(char const*)>
c000f1c5:	83 c4 10             	add    esp,0x10
c000f1c8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f1cc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f1d3:	83 ec 0c             	sub    esp,0xc
c000f1d6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f1d9:	e8 d9 88 ff ff       	call   c0007ab7 <malloc>
c000f1de:	83 c4 10             	add    esp,0x10
c000f1e1:	89 c3                	mov    ebx,eax
c000f1e3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1e8:	83 ec 04             	sub    esp,0x4
c000f1eb:	50                   	push   eax
c000f1ec:	68 b2 08 02 c0       	push   0xc00208b2
c000f1f1:	53                   	push   ebx
c000f1f2:	e8 ef bc ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c000f1f7:	83 c4 10             	add    esp,0x10
c000f1fa:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f1fd:	83 ec 08             	sub    esp,0x8
c000f200:	6a 01                	push   0x1
c000f202:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f205:	e8 98 bd ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c000f20a:	83 c4 10             	add    esp,0x10
c000f20d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f210:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f214:	75 12                	jne    c000f228 <ACPI::open(int, int, void*)+0x98>
c000f216:	83 ec 0c             	sub    esp,0xc
c000f219:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f21c:	e8 df bd ff ff       	call   c000b000 <File::close()>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	eb 06                	jmp    c000f22c <ACPI::open(int, int, void*)+0x9c>
c000f226:	66 90                	xchg   ax,ax
c000f228:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f22c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f230:	74 16                	je     c000f248 <ACPI::open(int, int, void*)+0xb8>
c000f232:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f235:	8b 00                	mov    eax,DWORD PTR [eax]
c000f237:	83 c0 08             	add    eax,0x8
c000f23a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f23c:	83 ec 0c             	sub    esp,0xc
c000f23f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f242:	ff d0                	call   eax
c000f244:	83 c4 10             	add    esp,0x10
c000f247:	90                   	nop
c000f248:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f24b:	83 f0 01             	xor    eax,0x1
c000f24e:	0f b6 c0             	movzx  eax,al
c000f251:	85 c0                	test   eax,eax
c000f253:	74 3b                	je     c000f290 <ACPI::open(int, int, void*)+0x100>
c000f255:	83 ec 0c             	sub    esp,0xc
c000f258:	68 d0 08 02 c0       	push   0xc00208d0
c000f25d:	e8 e2 0e 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000f262:	83 c4 10             	add    esp,0x10
c000f265:	83 ec 04             	sub    esp,0x4
c000f268:	6a 0c                	push   0xc
c000f26a:	68 eb 08 02 c0       	push   0xc00208eb
c000f26f:	68 fc 08 02 c0       	push   0xc00208fc
c000f274:	e8 fd 3b 00 00       	call   c0012e76 <Reg::readIntWithDefault(char*, char*, int)>
c000f279:	83 c4 10             	add    esp,0x10
c000f27c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f27f:	83 ec 0c             	sub    esp,0xc
c000f282:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f285:	e8 8c a5 ff ff       	call   c0009816 <Virt::setupPageSwapping(int)>
c000f28a:	83 c4 10             	add    esp,0x10
c000f28d:	8d 76 00             	lea    esi,[esi+0x0]
c000f290:	83 ec 0c             	sub    esp,0xc
c000f293:	68 75 f9 01 c0       	push   0xc001f975
c000f298:	e8 a7 0e 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000f29d:	83 c4 10             	add    esp,0x10
c000f2a0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2a3:	83 ec 08             	sub    esp,0x8
c000f2a6:	6a 13                	push   0x13
c000f2a8:	50                   	push   eax
c000f2a9:	e8 0a ce ff ff       	call   c000c0b8 <getDevicesOfType(DeviceType)>
c000f2ae:	83 c4 0c             	add    esp,0xc
c000f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2b4:	83 ec 0c             	sub    esp,0xc
c000f2b7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2ba:	50                   	push   eax
c000f2bb:	e8 a0 fa 00 00       	call   c001ed60 <LinkedList<Device>::isEmpty()>
c000f2c0:	83 c4 10             	add    esp,0x10
c000f2c3:	83 f0 01             	xor    eax,0x1
c000f2c6:	0f b6 c0             	movzx  eax,al
c000f2c9:	85 c0                	test   eax,eax
c000f2cb:	0f 84 1f 01 00 00    	je     c000f3f0 <ACPI::open(int, int, void*)+0x260>
c000f2d1:	83 ec 0c             	sub    esp,0xc
c000f2d4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2d7:	50                   	push   eax
c000f2d8:	e8 9f fa 00 00       	call   c001ed7c <LinkedList<Device>::getFirstElement()>
c000f2dd:	83 c4 10             	add    esp,0x10
c000f2e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f2e3:	83 ec 0c             	sub    esp,0xc
c000f2e6:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2e9:	50                   	push   eax
c000f2ea:	e8 95 fa 00 00       	call   c001ed84 <LinkedList<Device>::removeFirst()>
c000f2ef:	83 c4 10             	add    esp,0x10
c000f2f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f2f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f2f8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f2fb:	b8 24 00 00 00       	mov    eax,0x24
c000f300:	83 e0 fc             	and    eax,0xfffffffc
c000f303:	89 c3                	mov    ebx,eax
c000f305:	b8 00 00 00 00       	mov    eax,0x0
c000f30a:	66 90                	xchg   ax,ax
c000f30c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f313:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f31a:	83 c0 04             	add    eax,0x4
c000f31d:	39 d8                	cmp    eax,ebx
c000f31f:	72 eb                	jb     c000f30c <ACPI::open(int, int, void*)+0x17c>
c000f321:	83 ec 08             	sub    esp,0x8
c000f324:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f32a:	50                   	push   eax
c000f32b:	83 ec 24             	sub    esp,0x24
c000f32e:	89 e1                	mov    ecx,esp
c000f330:	b8 24 00 00 00       	mov    eax,0x24
c000f335:	83 e0 fc             	and    eax,0xfffffffc
c000f338:	89 c3                	mov    ebx,eax
c000f33a:	b8 00 00 00 00       	mov    eax,0x0
c000f33f:	90                   	nop
c000f340:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f347:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f34a:	83 c0 04             	add    eax,0x4
c000f34d:	39 d8                	cmp    eax,ebx
c000f34f:	72 ef                	jb     c000f340 <ACPI::open(int, int, void*)+0x1b0>
c000f351:	e8 3c b1 00 00       	call   c001a492 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f356:	83 c4 30             	add    esp,0x30
c000f359:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f35c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f360:	0f 84 4e ff ff ff    	je     c000f2b4 <ACPI::open(int, int, void*)+0x124>
c000f366:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f36d:	83 ec 0c             	sub    esp,0xc
c000f370:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f373:	e8 3f 87 ff ff       	call   c0007ab7 <malloc>
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	89 c3                	mov    ebx,eax
c000f37d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f382:	83 ec 04             	sub    esp,0x4
c000f385:	50                   	push   eax
c000f386:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f389:	53                   	push   ebx
c000f38a:	e8 57 bb ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f395:	83 ec 0c             	sub    esp,0xc
c000f398:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f39b:	e8 70 be ff ff       	call   c000b210 <File::exists()>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	0f b6 c0             	movzx  eax,al
c000f3a6:	85 c0                	test   eax,eax
c000f3a8:	74 22                	je     c000f3cc <ACPI::open(int, int, void*)+0x23c>
c000f3aa:	83 ec 08             	sub    esp,0x8
c000f3ad:	6a 01                	push   0x1
c000f3af:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f3b2:	e8 99 51 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000f3b7:	83 c4 10             	add    esp,0x10
c000f3ba:	83 ec 08             	sub    esp,0x8
c000f3bd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3c0:	50                   	push   eax
c000f3c1:	e8 ca 53 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3cc:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f3d0:	0f 84 de fe ff ff    	je     c000f2b4 <ACPI::open(int, int, void*)+0x124>
c000f3d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3db:	83 c0 08             	add    eax,0x8
c000f3de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e0:	83 ec 0c             	sub    esp,0xc
c000f3e3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f3e6:	ff d0                	call   eax
c000f3e8:	83 c4 10             	add    esp,0x10
c000f3eb:	e9 c4 fe ff ff       	jmp    c000f2b4 <ACPI::open(int, int, void*)+0x124>
c000f3f0:	83 ec 0c             	sub    esp,0xc
c000f3f3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f3f6:	50                   	push   eax
c000f3f7:	e8 60 f9 00 00       	call   c001ed5c <LinkedList<Device>::~LinkedList()>
c000f3fc:	83 c4 10             	add    esp,0x10
c000f3ff:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f405:	83 ec 08             	sub    esp,0x8
c000f408:	6a 01                	push   0x1
c000f40a:	68 03 09 02 c0       	push   0xc0020903
c000f40f:	e8 3c 51 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	83 ec 08             	sub    esp,0x8
c000f41a:	53                   	push   ebx
c000f41b:	50                   	push   eax
c000f41c:	e8 6f 53 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000f421:	83 c4 10             	add    esp,0x10
c000f424:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f429:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f42f:	83 e0 04             	and    eax,0x4
c000f432:	0f b6 c0             	movzx  eax,al
c000f435:	85 c0                	test   eax,eax
c000f437:	0f 84 e3 00 00 00    	je     c000f520 <ACPI::open(int, int, void*)+0x390>
c000f43d:	83 ec 0c             	sub    esp,0xc
c000f440:	68 20 09 02 c0       	push   0xc0020920
c000f445:	e8 fa 0c 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f454:	83 ec 0c             	sub    esp,0xc
c000f457:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f45a:	e8 58 86 ff ff       	call   c0007ab7 <malloc>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	89 c3                	mov    ebx,eax
c000f464:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f469:	83 ec 04             	sub    esp,0x4
c000f46c:	50                   	push   eax
c000f46d:	68 3d 09 02 c0       	push   0xc002093d
c000f472:	53                   	push   ebx
c000f473:	e8 6e ba ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f47e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f482:	74 1c                	je     c000f4a0 <ACPI::open(int, int, void*)+0x310>
c000f484:	83 ec 0c             	sub    esp,0xc
c000f487:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f48a:	e8 81 bd ff ff       	call   c000b210 <File::exists()>
c000f48f:	83 c4 10             	add    esp,0x10
c000f492:	0f b6 c0             	movzx  eax,al
c000f495:	85 c0                	test   eax,eax
c000f497:	74 07                	je     c000f4a0 <ACPI::open(int, int, void*)+0x310>
c000f499:	b0 01                	mov    al,0x1
c000f49b:	eb 07                	jmp    c000f4a4 <ACPI::open(int, int, void*)+0x314>
c000f49d:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a0:	b0 00                	mov    al,0x0
c000f4a2:	66 90                	xchg   ax,ax
c000f4a4:	0f b6 c0             	movzx  eax,al
c000f4a7:	85 c0                	test   eax,eax
c000f4a9:	74 21                	je     c000f4cc <ACPI::open(int, int, void*)+0x33c>
c000f4ab:	83 ec 08             	sub    esp,0x8
c000f4ae:	6a 01                	push   0x1
c000f4b0:	68 3d 09 02 c0       	push   0xc002093d
c000f4b5:	e8 96 50 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	83 ec 08             	sub    esp,0x8
c000f4c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f4c3:	50                   	push   eax
c000f4c4:	e8 c7 52 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f4d0:	74 1e                	je     c000f4f0 <ACPI::open(int, int, void*)+0x360>
c000f4d2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f4d6:	74 18                	je     c000f4f0 <ACPI::open(int, int, void*)+0x360>
c000f4d8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f4db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4dd:	83 c0 08             	add    eax,0x8
c000f4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e2:	83 ec 0c             	sub    esp,0xc
c000f4e5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f4e8:	ff d0                	call   eax
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f4f0:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f4f5:	83 ec 08             	sub    esp,0x8
c000f4f8:	68 5a 09 02 c0       	push   0xc002095a
c000f4fd:	50                   	push   eax
c000f4fe:	e8 ad f2 ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f509:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f50d:	74 11                	je     c000f520 <ACPI::open(int, int, void*)+0x390>
c000f50f:	83 ec 08             	sub    esp,0x8
c000f512:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f518:	e8 0f fc ff ff       	call   c000f12c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	b8 00 00 00 00       	mov    eax,0x0
c000f525:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f528:	c9                   	leave  
c000f529:	c3                   	ret    

c000f52a <CPU::close(int, int, void*)>:
c000f52a:	31 c0                	xor    eax,eax
c000f52c:	c3                   	ret    
c000f52d:	90                   	nop

c000f52e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f52e:	60                   	pusha  
c000f52f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f537:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f53b:	9c                   	pushf  
c000f53c:	fa                   	cli    
c000f53d:	0f 09                	wbinvd 
c000f53f:	0f 30                	wrmsr  
c000f541:	9d                   	popf   
c000f542:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f546:	89 02                	mov    DWORD PTR [edx],eax
c000f548:	61                   	popa   
c000f549:	c3                   	ret    

c000f54a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f54a:	60                   	pusha  
c000f54b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f54f:	9c                   	pushf  
c000f550:	fa                   	cli    
c000f551:	0f 09                	wbinvd 
c000f553:	31 c0                	xor    eax,eax
c000f555:	31 d2                	xor    edx,edx
c000f557:	0f 32                	rdmsr  
c000f559:	9d                   	popf   
c000f55a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f55e:	89 02                	mov    DWORD PTR [edx],eax
c000f560:	61                   	popa   
c000f561:	c3                   	ret    

c000f562 <CPU::AMD_K6_writeback(int, int, int)>:
c000f562:	56                   	push   esi
c000f563:	53                   	push   ebx
c000f564:	83 ec 10             	sub    esp,0x10
c000f567:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f56c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f570:	75 5d                	jne    c000f5cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f572:	83 f8 08             	cmp    eax,0x8
c000f575:	75 09                	jne    c000f580 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f577:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f57c:	7e 13                	jle    c000f591 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f57e:	eb 30                	jmp    c000f5b0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f580:	83 f8 06             	cmp    eax,0x6
c000f583:	7c 4a                	jl     c000f5cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f585:	83 f8 07             	cmp    eax,0x7
c000f588:	7e 07                	jle    c000f591 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f58a:	83 f8 09             	cmp    eax,0x9
c000f58d:	74 21                	je     c000f5b0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f58f:	eb 3e                	jmp    c000f5cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f591:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f597:	89 e6                	mov    esi,esp
c000f599:	56                   	push   esi
c000f59a:	68 82 00 00 c0       	push   0xc0000082
c000f59f:	e8 a6 ff ff ff       	call   c000f54a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f5a4:	c1 eb 15             	shr    ebx,0x15
c000f5a7:	56                   	push   esi
c000f5a8:	83 e3 7e             	and    ebx,0x7e
c000f5ab:	6a 00                	push   0x0
c000f5ad:	53                   	push   ebx
c000f5ae:	eb 12                	jmp    c000f5c2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f5b0:	89 e3                	mov    ebx,esp
c000f5b2:	53                   	push   ebx
c000f5b3:	68 82 00 00 c0       	push   0xc0000082
c000f5b8:	e8 8d ff ff ff       	call   c000f54a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f5bd:	53                   	push   ebx
c000f5be:	6a 00                	push   0x0
c000f5c0:	6a 00                	push   0x0
c000f5c2:	68 82 00 00 c0       	push   0xc0000082
c000f5c7:	e8 62 ff ff ff       	call   c000f52e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f5cc:	83 c4 18             	add    esp,0x18
c000f5cf:	83 c4 10             	add    esp,0x10
c000f5d2:	5b                   	pop    ebx
c000f5d3:	5e                   	pop    esi
c000f5d4:	c3                   	ret    
c000f5d5:	90                   	nop

c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f5d6:	55                   	push   ebp
c000f5d7:	57                   	push   edi
c000f5d8:	56                   	push   esi
c000f5d9:	53                   	push   ebx
c000f5da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5de:	39 05 70 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e70,eax
c000f5e4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f5e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f5ec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f5f0:	75 23                	jne    c000f615 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f5f2:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f5f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f5fb:	89 06                	mov    DWORD PTR [esi],eax
c000f5fd:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f602:	89 07                	mov    DWORD PTR [edi],eax
c000f604:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f609:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f60c:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f611:	89 02                	mov    DWORD PTR [edx],eax
c000f613:	eb 3f                	jmp    c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f615:	31 c9                	xor    ecx,ecx
c000f617:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f61b:	0f a2                	cpuid  
c000f61d:	89 06                	mov    DWORD PTR [esi],eax
c000f61f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f623:	89 1f                	mov    DWORD PTR [edi],ebx
c000f625:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f628:	89 10                	mov    DWORD PTR [eax],edx
c000f62a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f62e:	a3 70 1e 02 c0       	mov    ds:0xc0021e70,eax
c000f633:	8b 06                	mov    eax,DWORD PTR [esi]
c000f635:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f63a:	8b 07                	mov    eax,DWORD PTR [edi]
c000f63c:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f641:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f644:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f649:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f64d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64f:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f654:	5b                   	pop    ebx
c000f655:	5e                   	pop    esi
c000f656:	5f                   	pop    edi
c000f657:	5d                   	pop    ebp
c000f658:	c3                   	ret    
c000f659:	90                   	nop

c000f65a <CPU::cpuidCheckEDX(unsigned int)>:
c000f65a:	83 ec 10             	sub    esp,0x10
c000f65d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f661:	50                   	push   eax
c000f662:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f666:	50                   	push   eax
c000f667:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f66b:	50                   	push   eax
c000f66c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f670:	50                   	push   eax
c000f671:	6a 01                	push   0x1
c000f673:	e8 5e ff ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f678:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f67c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f680:	0f 95 c0             	setne  al
c000f683:	83 c4 24             	add    esp,0x24
c000f686:	c3                   	ret    
c000f687:	90                   	nop

c000f688 <CPU::cpuidCheckECX(unsigned int)>:
c000f688:	83 ec 10             	sub    esp,0x10
c000f68b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f68f:	50                   	push   eax
c000f690:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f694:	50                   	push   eax
c000f695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f699:	50                   	push   eax
c000f69a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f69e:	50                   	push   eax
c000f69f:	6a 01                	push   0x1
c000f6a1:	e8 30 ff ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6ae:	0f 95 c0             	setne  al
c000f6b1:	83 c4 24             	add    esp,0x24
c000f6b4:	c3                   	ret    
c000f6b5:	90                   	nop

c000f6b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f6b6:	83 ec 10             	sub    esp,0x10
c000f6b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6bd:	50                   	push   eax
c000f6be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6c2:	50                   	push   eax
c000f6c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6c7:	50                   	push   eax
c000f6c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6cc:	50                   	push   eax
c000f6cd:	6a 07                	push   0x7
c000f6cf:	e8 02 ff ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6d8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f6dc:	0f 95 c0             	setne  al
c000f6df:	83 c4 24             	add    esp,0x24
c000f6e2:	c3                   	ret    
c000f6e3:	90                   	nop

c000f6e4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f6e4:	83 ec 10             	sub    esp,0x10
c000f6e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6eb:	50                   	push   eax
c000f6ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f0:	50                   	push   eax
c000f6f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f5:	50                   	push   eax
c000f6f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6fa:	50                   	push   eax
c000f6fb:	6a 07                	push   0x7
c000f6fd:	e8 d4 fe ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f706:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f70a:	0f 95 c0             	setne  al
c000f70d:	83 c4 24             	add    esp,0x24
c000f710:	c3                   	ret    
c000f711:	90                   	nop

c000f712 <CPU::CPU()>:
c000f712:	83 ec 0c             	sub    esp,0xc
c000f715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f719:	83 ec 08             	sub    esp,0x8
c000f71c:	68 7d 0a 02 c0       	push   0xc0020a7d
c000f721:	50                   	push   eax
c000f722:	e8 11 c8 ff ff       	call   c000bf38 <Device::Device(char const*)>
c000f727:	83 c4 10             	add    esp,0x10
c000f72a:	ba 04 0b 02 c0       	mov    edx,0xc0020b04
c000f72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f733:	89 10                	mov    DWORD PTR [eax],edx
c000f735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f739:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f747:	05 78 01 00 00       	add    eax,0x178
c000f74c:	83 ec 0c             	sub    esp,0xc
c000f74f:	50                   	push   eax
c000f750:	e8 0d 7c ff ff       	call   c0007362 <GDT::GDT()>
c000f755:	83 c4 10             	add    esp,0x10
c000f758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f75c:	05 7c 09 00 00       	add    eax,0x97c
c000f761:	83 ec 0c             	sub    esp,0xc
c000f764:	50                   	push   eax
c000f765:	e8 46 7e ff ff       	call   c00075b0 <IDT::IDT()>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f771:	05 7c 11 00 00       	add    eax,0x117c
c000f776:	83 ec 0c             	sub    esp,0xc
c000f779:	50                   	push   eax
c000f77a:	e8 a9 97 ff ff       	call   c0008f28 <TSS::TSS()>
c000f77f:	83 c4 10             	add    esp,0x10
c000f782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f786:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f791:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f79b:	90                   	nop
c000f79c:	83 c4 0c             	add    esp,0xc
c000f79f:	c3                   	ret    

c000f7a0 <CPU::displayFeatures()>:
c000f7a0:	c3                   	ret    
c000f7a1:	90                   	nop

c000f7a2 <CPU::detectFeatures()>:
c000f7a2:	55                   	push   ebp
c000f7a3:	57                   	push   edi
c000f7a4:	56                   	push   esi
c000f7a5:	53                   	push   ebx
c000f7a6:	83 ec 30             	sub    esp,0x30
c000f7a9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f7ad:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f7b7:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f7bd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f7c4:	6a 0d                	push   0xd
c000f7c6:	6a 00                	push   0x0
c000f7c8:	55                   	push   ebp
c000f7c9:	e8 22 0d ff ff       	call   c00004f0 <memset>
c000f7ce:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f7dd:	0f 84 db 05 00 00    	je     c000fdbe <CPU::detectFeatures()+0x61c>
c000f7e3:	83 ec 0c             	sub    esp,0xc
c000f7e6:	89 ef                	mov    edi,ebp
c000f7e8:	6a 10                	push   0x10
c000f7ea:	e8 6b fe ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f7ef:	83 e0 01             	and    eax,0x1
c000f7f2:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7f5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7fb:	83 e0 fd             	and    eax,0xfffffffd
c000f7fe:	09 d0                	or     eax,edx
c000f800:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f806:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f80d:	e8 48 fe ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f812:	83 e0 01             	and    eax,0x1
c000f815:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f81c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f822:	83 e0 fb             	and    eax,0xfffffffb
c000f825:	09 d0                	or     eax,edx
c000f827:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f82d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f834:	e8 21 fe ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f839:	83 e0 01             	and    eax,0x1
c000f83c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f843:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f849:	83 e0 f7             	and    eax,0xfffffff7
c000f84c:	09 d0                	or     eax,edx
c000f84e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f854:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f85b:	e8 fa fd ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f860:	83 e0 01             	and    eax,0x1
c000f863:	c1 e0 04             	shl    eax,0x4
c000f866:	89 c2                	mov    edx,eax
c000f868:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f86e:	83 e0 ef             	and    eax,0xffffffef
c000f871:	09 d0                	or     eax,edx
c000f873:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f879:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f880:	e8 d5 fd ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f885:	83 e0 01             	and    eax,0x1
c000f888:	c1 e0 05             	shl    eax,0x5
c000f88b:	89 c2                	mov    edx,eax
c000f88d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f893:	83 e0 df             	and    eax,0xffffffdf
c000f896:	09 d0                	or     eax,edx
c000f898:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f89e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f8a5:	e8 b0 fd ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f8aa:	83 e0 01             	and    eax,0x1
c000f8ad:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8b0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8b6:	83 e0 fd             	and    eax,0xfffffffd
c000f8b9:	09 d0                	or     eax,edx
c000f8bb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8c1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f8c8:	e8 8d fd ff ff       	call   c000f65a <CPU::cpuidCheckEDX(unsigned int)>
c000f8cd:	83 e0 01             	and    eax,0x1
c000f8d0:	c1 e0 06             	shl    eax,0x6
c000f8d3:	89 c2                	mov    edx,eax
c000f8d5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8db:	83 e0 bf             	and    eax,0xffffffbf
c000f8de:	09 d0                	or     eax,edx
c000f8e0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8e6:	58                   	pop    eax
c000f8e7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8eb:	50                   	push   eax
c000f8ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8f0:	50                   	push   eax
c000f8f1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f8f5:	56                   	push   esi
c000f8f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8fa:	50                   	push   eax
c000f8fb:	6a 00                	push   0x0
c000f8fd:	e8 d4 fc ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f902:	b8 04 00 00 00       	mov    eax,0x4
c000f907:	89 c1                	mov    ecx,eax
c000f909:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f90b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f911:	89 c1                	mov    ecx,eax
c000f913:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f917:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f919:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f91f:	89 c1                	mov    ecx,eax
c000f921:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f925:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f927:	83 c4 18             	add    esp,0x18
c000f92a:	68 8c 09 02 c0       	push   0xc002098c
c000f92f:	55                   	push   ebp
c000f930:	e8 4b 0e ff ff       	call   c0000780 <strcmp>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	85 c0                	test   eax,eax
c000f93a:	75 0f                	jne    c000f94b <CPU::detectFeatures()+0x1a9>
c000f93c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f946:	e9 22 02 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000f94b:	50                   	push   eax
c000f94c:	50                   	push   eax
c000f94d:	68 99 09 02 c0       	push   0xc0020999
c000f952:	55                   	push   ebp
c000f953:	e8 28 0e ff ff       	call   c0000780 <strcmp>
c000f958:	83 c4 10             	add    esp,0x10
c000f95b:	85 c0                	test   eax,eax
c000f95d:	74 dd                	je     c000f93c <CPU::detectFeatures()+0x19a>
c000f95f:	50                   	push   eax
c000f960:	50                   	push   eax
c000f961:	68 a6 09 02 c0       	push   0xc00209a6
c000f966:	55                   	push   ebp
c000f967:	e8 14 0e ff ff       	call   c0000780 <strcmp>
c000f96c:	83 c4 10             	add    esp,0x10
c000f96f:	85 c0                	test   eax,eax
c000f971:	74 2a                	je     c000f99d <CPU::detectFeatures()+0x1fb>
c000f973:	50                   	push   eax
c000f974:	50                   	push   eax
c000f975:	68 b3 09 02 c0       	push   0xc00209b3
c000f97a:	55                   	push   ebp
c000f97b:	e8 00 0e ff ff       	call   c0000780 <strcmp>
c000f980:	83 c4 10             	add    esp,0x10
c000f983:	85 c0                	test   eax,eax
c000f985:	74 16                	je     c000f99d <CPU::detectFeatures()+0x1fb>
c000f987:	50                   	push   eax
c000f988:	50                   	push   eax
c000f989:	68 c0 09 02 c0       	push   0xc00209c0
c000f98e:	55                   	push   ebp
c000f98f:	e8 ec 0d ff ff       	call   c0000780 <strcmp>
c000f994:	83 c4 10             	add    esp,0x10
c000f997:	85 c0                	test   eax,eax
c000f999:	74 48                	je     c000f9e3 <CPU::detectFeatures()+0x241>
c000f99b:	eb 0f                	jmp    c000f9ac <CPU::detectFeatures()+0x20a>
c000f99d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f9a7:	e9 c1 01 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000f9ac:	50                   	push   eax
c000f9ad:	50                   	push   eax
c000f9ae:	68 cd 09 02 c0       	push   0xc00209cd
c000f9b3:	55                   	push   ebp
c000f9b4:	e8 c7 0d ff ff       	call   c0000780 <strcmp>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	85 c0                	test   eax,eax
c000f9be:	74 23                	je     c000f9e3 <CPU::detectFeatures()+0x241>
c000f9c0:	57                   	push   edi
c000f9c1:	57                   	push   edi
c000f9c2:	68 da 09 02 c0       	push   0xc00209da
c000f9c7:	55                   	push   ebp
c000f9c8:	e8 b3 0d ff ff       	call   c0000780 <strcmp>
c000f9cd:	83 c4 10             	add    esp,0x10
c000f9d0:	85 c0                	test   eax,eax
c000f9d2:	75 1e                	jne    c000f9f2 <CPU::detectFeatures()+0x250>
c000f9d4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9de:	e9 8a 01 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000f9e3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f9ed:	e9 7b 01 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000f9f2:	56                   	push   esi
c000f9f3:	56                   	push   esi
c000f9f4:	68 e7 09 02 c0       	push   0xc00209e7
c000f9f9:	55                   	push   ebp
c000f9fa:	e8 81 0d ff ff       	call   c0000780 <strcmp>
c000f9ff:	83 c4 10             	add    esp,0x10
c000fa02:	85 c0                	test   eax,eax
c000fa04:	75 0f                	jne    c000fa15 <CPU::detectFeatures()+0x273>
c000fa06:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa10:	e9 58 01 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fa15:	51                   	push   ecx
c000fa16:	51                   	push   ecx
c000fa17:	68 a6 09 02 c0       	push   0xc00209a6
c000fa1c:	55                   	push   ebp
c000fa1d:	e8 5e 0d ff ff       	call   c0000780 <strcmp>
c000fa22:	83 c4 10             	add    esp,0x10
c000fa25:	85 c0                	test   eax,eax
c000fa27:	75 0f                	jne    c000fa38 <CPU::detectFeatures()+0x296>
c000fa29:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fa33:	e9 35 01 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fa38:	52                   	push   edx
c000fa39:	52                   	push   edx
c000fa3a:	68 f4 09 02 c0       	push   0xc00209f4
c000fa3f:	55                   	push   ebp
c000fa40:	e8 3b 0d ff ff       	call   c0000780 <strcmp>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	85 c0                	test   eax,eax
c000fa4a:	75 0f                	jne    c000fa5b <CPU::detectFeatures()+0x2b9>
c000fa4c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fa56:	e9 12 01 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fa5b:	50                   	push   eax
c000fa5c:	50                   	push   eax
c000fa5d:	68 01 0a 02 c0       	push   0xc0020a01
c000fa62:	55                   	push   ebp
c000fa63:	e8 18 0d ff ff       	call   c0000780 <strcmp>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	85 c0                	test   eax,eax
c000fa6d:	75 0f                	jne    c000fa7e <CPU::detectFeatures()+0x2dc>
c000fa6f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fa79:	e9 ef 00 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fa7e:	50                   	push   eax
c000fa7f:	50                   	push   eax
c000fa80:	68 0e 0a 02 c0       	push   0xc0020a0e
c000fa85:	55                   	push   ebp
c000fa86:	e8 f5 0c ff ff       	call   c0000780 <strcmp>
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	85 c0                	test   eax,eax
c000fa90:	75 0f                	jne    c000faa1 <CPU::detectFeatures()+0x2ff>
c000fa92:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fa9c:	e9 cc 00 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000faa1:	50                   	push   eax
c000faa2:	50                   	push   eax
c000faa3:	68 1b 0a 02 c0       	push   0xc0020a1b
c000faa8:	55                   	push   ebp
c000faa9:	e8 d2 0c ff ff       	call   c0000780 <strcmp>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	85 c0                	test   eax,eax
c000fab3:	75 0f                	jne    c000fac4 <CPU::detectFeatures()+0x322>
c000fab5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fabf:	e9 a9 00 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fac4:	50                   	push   eax
c000fac5:	50                   	push   eax
c000fac6:	68 28 0a 02 c0       	push   0xc0020a28
c000facb:	55                   	push   ebp
c000facc:	e8 af 0c ff ff       	call   c0000780 <strcmp>
c000fad1:	83 c4 10             	add    esp,0x10
c000fad4:	85 c0                	test   eax,eax
c000fad6:	75 0f                	jne    c000fae7 <CPU::detectFeatures()+0x345>
c000fad8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fae2:	e9 86 00 00 00       	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fae7:	50                   	push   eax
c000fae8:	50                   	push   eax
c000fae9:	68 35 0a 02 c0       	push   0xc0020a35
c000faee:	55                   	push   ebp
c000faef:	e8 8c 0c ff ff       	call   c0000780 <strcmp>
c000faf4:	83 c4 10             	add    esp,0x10
c000faf7:	85 c0                	test   eax,eax
c000faf9:	75 0c                	jne    c000fb07 <CPU::detectFeatures()+0x365>
c000fafb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb05:	eb 66                	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fb07:	50                   	push   eax
c000fb08:	50                   	push   eax
c000fb09:	68 42 0a 02 c0       	push   0xc0020a42
c000fb0e:	55                   	push   ebp
c000fb0f:	e8 6c 0c ff ff       	call   c0000780 <strcmp>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	85 c0                	test   eax,eax
c000fb19:	75 0c                	jne    c000fb27 <CPU::detectFeatures()+0x385>
c000fb1b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb25:	eb 46                	jmp    c000fb6d <CPU::detectFeatures()+0x3cb>
c000fb27:	57                   	push   edi
c000fb28:	57                   	push   edi
c000fb29:	68 4f 0a 02 c0       	push   0xc0020a4f
c000fb2e:	55                   	push   ebp
c000fb2f:	e8 4c 0c ff ff       	call   c0000780 <strcmp>
c000fb34:	83 c4 10             	add    esp,0x10
c000fb37:	85 c0                	test   eax,eax
c000fb39:	74 e0                	je     c000fb1b <CPU::detectFeatures()+0x379>
c000fb3b:	56                   	push   esi
c000fb3c:	56                   	push   esi
c000fb3d:	68 5c 0a 02 c0       	push   0xc0020a5c
c000fb42:	55                   	push   ebp
c000fb43:	e8 38 0c ff ff       	call   c0000780 <strcmp>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	85 c0                	test   eax,eax
c000fb4d:	74 cc                	je     c000fb1b <CPU::detectFeatures()+0x379>
c000fb4f:	51                   	push   ecx
c000fb50:	51                   	push   ecx
c000fb51:	68 69 0a 02 c0       	push   0xc0020a69
c000fb56:	55                   	push   ebp
c000fb57:	e8 24 0c ff ff       	call   c0000780 <strcmp>
c000fb5c:	83 c4 10             	add    esp,0x10
c000fb5f:	85 c0                	test   eax,eax
c000fb61:	74 b8                	je     c000fb1b <CPU::detectFeatures()+0x379>
c000fb63:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fb6d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fb72:	0f 86 be 00 00 00    	jbe    c000fc36 <CPU::detectFeatures()+0x494>
c000fb78:	83 ec 0c             	sub    esp,0xc
c000fb7b:	68 80 00 00 00       	push   0x80
c000fb80:	e8 31 fb ff ff       	call   c000f6b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb85:	83 e0 01             	and    eax,0x1
c000fb88:	c1 e0 06             	shl    eax,0x6
c000fb8b:	89 c2                	mov    edx,eax
c000fb8d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb93:	83 e0 bf             	and    eax,0xffffffbf
c000fb96:	09 d0                	or     eax,edx
c000fb98:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb9e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fba5:	e8 0c fb ff ff       	call   c000f6b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbaa:	83 e0 01             	and    eax,0x1
c000fbad:	c1 e0 04             	shl    eax,0x4
c000fbb0:	89 c2                	mov    edx,eax
c000fbb2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbb8:	83 e0 ef             	and    eax,0xffffffef
c000fbbb:	09 d0                	or     eax,edx
c000fbbd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fbc3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fbca:	e8 e7 fa ff ff       	call   c000f6b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbcf:	89 c2                	mov    edx,eax
c000fbd1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbd7:	c1 e2 07             	shl    edx,0x7
c000fbda:	83 e0 7f             	and    eax,0x7f
c000fbdd:	09 d0                	or     eax,edx
c000fbdf:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbe5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fbec:	e8 f3 fa ff ff       	call   c000f6e4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fbf1:	83 e0 01             	and    eax,0x1
c000fbf4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fbfb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc01:	83 e0 f7             	and    eax,0xfffffff7
c000fc04:	09 d0                	or     eax,edx
c000fc06:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc0c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc13:	e8 cc fa ff ff       	call   c000f6e4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	83 e0 01             	and    eax,0x1
c000fc1e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc25:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc2b:	83 e0 fb             	and    eax,0xfffffffb
c000fc2e:	09 d0                	or     eax,edx
c000fc30:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc36:	83 ec 0c             	sub    esp,0xc
c000fc39:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc3d:	50                   	push   eax
c000fc3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc42:	50                   	push   eax
c000fc43:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fc47:	57                   	push   edi
c000fc48:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc4c:	56                   	push   esi
c000fc4d:	6a 01                	push   0x1
c000fc4f:	e8 82 f9 ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc58:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fc5e:	89 c1                	mov    ecx,eax
c000fc60:	83 e1 0f             	and    ecx,0xf
c000fc63:	83 e2 f0             	and    edx,0xfffffff0
c000fc66:	09 ca                	or     edx,ecx
c000fc68:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fc6e:	89 c2                	mov    edx,eax
c000fc70:	c1 ea 04             	shr    edx,0x4
c000fc73:	83 e2 0f             	and    edx,0xf
c000fc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fc7a:	89 d1                	mov    ecx,edx
c000fc7c:	83 c4 20             	add    esp,0x20
c000fc7f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fc85:	c1 e1 06             	shl    ecx,0x6
c000fc88:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fc8e:	09 ca                	or     edx,ecx
c000fc90:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fc97:	89 c2                	mov    edx,eax
c000fc99:	c1 ea 08             	shr    edx,0x8
c000fc9c:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fca2:	83 e2 0f             	and    edx,0xf
c000fca5:	89 d5                	mov    ebp,edx
c000fca7:	83 e5 03             	and    ebp,0x3
c000fcaa:	c1 e5 06             	shl    ebp,0x6
c000fcad:	83 e1 3f             	and    ecx,0x3f
c000fcb0:	09 e9                	or     ecx,ebp
c000fcb2:	89 d5                	mov    ebp,edx
c000fcb4:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fcba:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fcc0:	c1 ed 02             	shr    ebp,0x2
c000fcc3:	83 e1 c0             	and    ecx,0xffffffc0
c000fcc6:	09 e9                	or     ecx,ebp
c000fcc8:	89 c5                	mov    ebp,eax
c000fcca:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fcd0:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fcd6:	c1 ed 08             	shr    ebp,0x8
c000fcd9:	83 e5 30             	and    ebp,0x30
c000fcdc:	83 e1 cf             	and    ecx,0xffffffcf
c000fcdf:	09 e9                	or     ecx,ebp
c000fce1:	83 fa 06             	cmp    edx,0x6
c000fce4:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fcea:	74 05                	je     c000fcf1 <CPU::detectFeatures()+0x54f>
c000fcec:	83 fa 0f             	cmp    edx,0xf
c000fcef:	75 64                	jne    c000fd55 <CPU::detectFeatures()+0x5b3>
c000fcf1:	89 c1                	mov    ecx,eax
c000fcf3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fcf9:	c1 e9 10             	shr    ecx,0x10
c000fcfc:	c1 e1 04             	shl    ecx,0x4
c000fcff:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd03:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd09:	0f b6 c9             	movzx  ecx,cl
c000fd0c:	c1 e1 06             	shl    ecx,0x6
c000fd0f:	09 e9                	or     ecx,ebp
c000fd11:	83 fa 0f             	cmp    edx,0xf
c000fd14:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd1b:	75 38                	jne    c000fd55 <CPU::detectFeatures()+0x5b3>
c000fd1d:	c1 e8 14             	shr    eax,0x14
c000fd20:	83 c0 0f             	add    eax,0xf
c000fd23:	0f b6 c0             	movzx  eax,al
c000fd26:	89 c2                	mov    edx,eax
c000fd28:	c1 e8 02             	shr    eax,0x2
c000fd2b:	83 e2 03             	and    edx,0x3
c000fd2e:	89 d1                	mov    ecx,edx
c000fd30:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fd36:	c1 e1 06             	shl    ecx,0x6
c000fd39:	83 e2 3f             	and    edx,0x3f
c000fd3c:	09 ca                	or     edx,ecx
c000fd3e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd44:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fd4a:	83 e2 c0             	and    edx,0xffffffc0
c000fd4d:	09 d0                	or     eax,edx
c000fd4f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fd55:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd5b:	83 ec 0c             	sub    esp,0xc
c000fd5e:	83 c8 07             	or     eax,0x7
c000fd61:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd67:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd6b:	50                   	push   eax
c000fd6c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fd70:	55                   	push   ebp
c000fd71:	57                   	push   edi
c000fd72:	56                   	push   esi
c000fd73:	68 00 00 00 80       	push   0x80000000
c000fd78:	e8 59 f8 ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd7d:	83 c4 20             	add    esp,0x20
c000fd80:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fd88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fd8c:	76 1e                	jbe    c000fdac <CPU::detectFeatures()+0x60a>
c000fd8e:	83 ec 0c             	sub    esp,0xc
c000fd91:	50                   	push   eax
c000fd92:	55                   	push   ebp
c000fd93:	57                   	push   edi
c000fd94:	56                   	push   esi
c000fd95:	68 01 00 00 80       	push   0x80000001
c000fd9a:	e8 37 f8 ff ff       	call   c000f5d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd9f:	83 c4 20             	add    esp,0x20
c000fda2:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fdac:	52                   	push   edx
c000fdad:	52                   	push   edx
c000fdae:	68 75 0a 02 c0       	push   0xc0020a75
c000fdb3:	53                   	push   ebx
c000fdb4:	e8 71 c1 ff ff       	call   c000bf2a <Device::setName(char const*)>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	eb 69                	jmp    c000fe27 <CPU::detectFeatures()+0x685>
c000fdbe:	50                   	push   eax
c000fdbf:	50                   	push   eax
c000fdc0:	68 da 09 02 c0       	push   0xc00209da
c000fdc5:	55                   	push   ebp
c000fdc6:	e8 85 08 ff ff       	call   c0000650 <strcpy>
c000fdcb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fdd5:	e8 e9 03 ff ff       	call   c00001c3 <is486>
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	85 c0                	test   eax,eax
c000fddf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fde5:	74 1f                	je     c000fe06 <CPU::detectFeatures()+0x664>
c000fde7:	83 c8 07             	or     eax,0x7
c000fdea:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fdf0:	0f 20 c0             	mov    eax,cr0
c000fdf3:	83 e0 14             	and    eax,0x14
c000fdf6:	83 f8 04             	cmp    eax,0x4
c000fdf9:	75 10                	jne    c000fe0b <CPU::detectFeatures()+0x669>
c000fdfb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe01:	83 e0 fd             	and    eax,0xfffffffd
c000fe04:	eb 1b                	jmp    c000fe21 <CPU::detectFeatures()+0x67f>
c000fe06:	83 e0 f8             	and    eax,0xfffffff8
c000fe09:	eb df                	jmp    c000fdea <CPU::detectFeatures()+0x648>
c000fe0b:	e8 8e 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe10:	83 e0 01             	and    eax,0x1
c000fe13:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe16:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe1c:	83 e0 fd             	and    eax,0xfffffffd
c000fe1f:	09 d0                	or     eax,edx
c000fe21:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe27:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe2e:	74 17                	je     c000fe47 <CPU::detectFeatures()+0x6a5>
c000fe30:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fe36:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fe3c:	83 c8 10             	or     eax,0x10
c000fe3f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fe45:	eb 20                	jmp    c000fe67 <CPU::detectFeatures()+0x6c5>
c000fe47:	e8 52 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe4c:	83 e0 01             	and    eax,0x1
c000fe4f:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe52:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe58:	83 e0 fd             	and    eax,0xfffffffd
c000fe5b:	09 d0                	or     eax,edx
c000fe5d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe63:	a8 02                	test   al,0x2
c000fe65:	75 c9                	jne    c000fe30 <CPU::detectFeatures()+0x68e>
c000fe67:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fe6e:	83 c4 2c             	add    esp,0x2c
c000fe71:	5b                   	pop    ebx
c000fe72:	5e                   	pop    esi
c000fe73:	5f                   	pop    edi
c000fe74:	5d                   	pop    ebp
c000fe75:	c3                   	ret    

c000fe76 <CPU::setupSMEP()>:
c000fe76:	0f 20 e0             	mov    eax,cr4
c000fe79:	0d 00 00 10 00       	or     eax,0x100000
c000fe7e:	0f 22 e0             	mov    cr4,eax
c000fe81:	c3                   	ret    

c000fe82 <CPU::setupUMIP()>:
c000fe82:	0f 20 e0             	mov    eax,cr4
c000fe85:	80 cc 08             	or     ah,0x8
c000fe88:	0f 22 e0             	mov    cr4,eax
c000fe8b:	c3                   	ret    

c000fe8c <CPU::setupTSC()>:
c000fe8c:	0f 20 e0             	mov    eax,cr4
c000fe8f:	83 c8 04             	or     eax,0x4
c000fe92:	0f 22 e0             	mov    cr4,eax
c000fe95:	c3                   	ret    

c000fe96 <CPU::setupLargePages()>:
c000fe96:	0f 20 e0             	mov    eax,cr4
c000fe99:	83 c8 10             	or     eax,0x10
c000fe9c:	0f 22 e0             	mov    cr4,eax
c000fe9f:	c3                   	ret    

c000fea0 <CPU::setupPAT()>:
c000fea0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fea5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000feac:	74 2c                	je     c000feda <CPU::setupPAT()+0x3a>
c000feae:	53                   	push   ebx
c000feaf:	83 ec 10             	sub    esp,0x10
c000feb2:	68 77 02 00 00       	push   0x277
c000feb7:	50                   	push   eax
c000feb8:	e8 1d 72 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000febd:	83 e2 f8             	and    edx,0xfffffff8
c000fec0:	83 ca 01             	or     edx,0x1
c000fec3:	52                   	push   edx
c000fec4:	50                   	push   eax
c000fec5:	68 77 02 00 00       	push   0x277
c000feca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000fed0:	e8 31 72 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fed5:	83 c4 28             	add    esp,0x28
c000fed8:	5b                   	pop    ebx
c000fed9:	c3                   	ret    
c000feda:	c3                   	ret    
c000fedb:	90                   	nop

c000fedc <CPU::setupMTRR()>:
c000fedc:	c3                   	ret    
c000fedd:	90                   	nop

c000fede <CPU::setupGlobalPages()>:
c000fede:	0f 20 e0             	mov    eax,cr4
c000fee1:	0c 80                	or     al,0x80
c000fee3:	0f 22 e0             	mov    cr4,eax
c000fee6:	c3                   	ret    
c000fee7:	90                   	nop

c000fee8 <CPU::allowUsermodeDataAccess()>:
c000fee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feec:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fef3:	74 03                	je     c000fef8 <CPU::allowUsermodeDataAccess()+0x10>
c000fef5:	0f 01 cb             	stac   
c000fef8:	c3                   	ret    
c000fef9:	90                   	nop

c000fefa <CPU::prohibitUsermodeDataAccess()>:
c000fefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fefe:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff05:	74 03                	je     c000ff0a <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff07:	0f 01 ca             	clac   
c000ff0a:	c3                   	ret    
c000ff0b:	90                   	nop

c000ff0c <CPU::setupSMAP()>:
c000ff0c:	0f 20 e0             	mov    eax,cr4
c000ff0f:	0d 00 00 20 00       	or     eax,0x200000
c000ff14:	0f 22 e0             	mov    cr4,eax
c000ff17:	eb e1                	jmp    c000fefa <CPU::prohibitUsermodeDataAccess()>
c000ff19:	90                   	nop

c000ff1a <CPU::setupFeatures()>:
c000ff1a:	53                   	push   ebx
c000ff1b:	83 ec 08             	sub    esp,0x8
c000ff1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff22:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff29:	74 18                	je     c000ff43 <CPU::setupFeatures()+0x29>
c000ff2b:	83 ec 0c             	sub    esp,0xc
c000ff2e:	68 81 0a 02 c0       	push   0xc0020a81
c000ff33:	e8 05 aa ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000ff38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff3b:	e8 42 ff ff ff       	call   c000fe82 <CPU::setupUMIP()>
c000ff40:	83 c4 10             	add    esp,0x10
c000ff43:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ff4a:	74 18                	je     c000ff64 <CPU::setupFeatures()+0x4a>
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	68 8b 0a 02 c0       	push   0xc0020a8b
c000ff54:	e8 e4 a9 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000ff59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff5c:	e8 2b ff ff ff       	call   c000fe8c <CPU::setupTSC()>
c000ff61:	83 c4 10             	add    esp,0x10
c000ff64:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ff6b:	74 18                	je     c000ff85 <CPU::setupFeatures()+0x6b>
c000ff6d:	83 ec 0c             	sub    esp,0xc
c000ff70:	68 94 0a 02 c0       	push   0xc0020a94
c000ff75:	e8 c3 a9 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000ff7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff7d:	e8 14 ff ff ff       	call   c000fe96 <CPU::setupLargePages()>
c000ff82:	83 c4 10             	add    esp,0x10
c000ff85:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ff8c:	74 18                	je     c000ffa6 <CPU::setupFeatures()+0x8c>
c000ff8e:	83 ec 0c             	sub    esp,0xc
c000ff91:	68 9d 0a 02 c0       	push   0xc0020a9d
c000ff96:	e8 a2 a9 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000ff9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff9e:	e8 3b ff ff ff       	call   c000fede <CPU::setupGlobalPages()>
c000ffa3:	83 c4 10             	add    esp,0x10
c000ffa6:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ffad:	74 18                	je     c000ffc7 <CPU::setupFeatures()+0xad>
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	68 af 0a 02 c0       	push   0xc0020aaf
c000ffb7:	e8 81 a9 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c000ffbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffbf:	e8 dc fe ff ff       	call   c000fea0 <CPU::setupPAT()>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ffce:	74 11                	je     c000ffe1 <CPU::setupFeatures()+0xc7>
c000ffd0:	c7 44 24 10 b8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ab8
c000ffd8:	83 c4 08             	add    esp,0x8
c000ffdb:	5b                   	pop    ebx
c000ffdc:	e9 5c a9 ff ff       	jmp    c000a93d <Dbg::kprintf(char const*, ...)>
c000ffe1:	83 c4 08             	add    esp,0x8
c000ffe4:	5b                   	pop    ebx
c000ffe5:	c3                   	ret    

c000ffe6 <CPU::open(int, int, void*)>:
c000ffe6:	57                   	push   edi
c000ffe7:	56                   	push   esi
c000ffe8:	53                   	push   ebx
c000ffe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffed:	83 ec 0c             	sub    esp,0xc
c000fff0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000fff4:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fffa:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010000:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010006:	50                   	push   eax
c0010007:	e8 b8 73 ff ff       	call   c00073c4 <GDT::setup()>
c001000c:	83 c4 0c             	add    esp,0xc
c001000f:	6a 00                	push   0x0
c0010011:	68 ef be ad de       	push   0xdeadbeef
c0010016:	57                   	push   edi
c0010017:	e8 50 8f ff ff       	call   c0008f6c <TSS::setup(unsigned long, unsigned long)>
c001001c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001001f:	e8 28 8f ff ff       	call   c0008f4c <TSS::flush()>
c0010024:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001002a:	89 04 24             	mov    DWORD PTR [esp],eax
c001002d:	e8 f4 75 ff ff       	call   c0007626 <IDT::setup()>
c0010032:	b8 00 04 00 00       	mov    eax,0x400
c0010037:	0f 23 f8             	mov    db7,eax
c001003a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010044:	e8 79 7d ff ff       	call   c0007dc2 <Phys::allocatePage()>
c0010049:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001004f:	89 30                	mov    DWORD PTR [eax],esi
c0010051:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010057:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001005a:	58                   	pop    eax
c001005b:	5a                   	pop    edx
c001005c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010062:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010066:	e8 61 9f ff ff       	call   c0009fcc <VAS::setCPUSpecific(unsigned long)>
c001006b:	c7 04 24 c2 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ac2
c0010072:	e8 cd 00 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c0010077:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001007a:	e8 23 f7 ff ff       	call   c000f7a2 <CPU::detectFeatures()>
c001007f:	c7 04 24 e5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae5
c0010086:	e8 b9 00 00 00       	call   c0010144 <KeSetBootMessage(char const*)>
c001008b:	e8 5e 6f 00 00       	call   c0016fee <HalInitialise()>
c0010090:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010095:	83 e0 10             	and    eax,0x10
c0010098:	83 f8 01             	cmp    eax,0x1
c001009b:	19 c0                	sbb    eax,eax
c001009d:	83 e0 46             	and    eax,0x46
c00100a0:	83 c0 1e             	add    eax,0x1e
c00100a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00100a6:	e8 26 d7 ff ff       	call   c000d7d1 <setupTimer(int)>
c00100ab:	83 c4 10             	add    esp,0x10
c00100ae:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00100b5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00100bb:	74 0c                	je     c00100c9 <CPU::open(int, int, void*)+0xe3>
c00100bd:	83 ec 0c             	sub    esp,0xc
c00100c0:	53                   	push   ebx
c00100c1:	e8 54 fe ff ff       	call   c000ff1a <CPU::setupFeatures()>
c00100c6:	83 c4 10             	add    esp,0x10
c00100c9:	5b                   	pop    ebx
c00100ca:	31 c0                	xor    eax,eax
c00100cc:	5e                   	pop    esi
c00100cd:	5f                   	pop    edi
c00100ce:	c3                   	ret    

c00100cf <KeDisplaySplashScreen()>:
c00100cf:	55                   	push   ebp
c00100d0:	bd 05 00 00 00       	mov    ebp,0x5
c00100d5:	57                   	push   edi
c00100d6:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c00100db:	56                   	push   esi
c00100dc:	be 0a 00 00 00       	mov    esi,0xa
c00100e1:	53                   	push   ebx
c00100e2:	31 db                	xor    ebx,ebx
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00100ea:	85 d2                	test   edx,edx
c00100ec:	89 d0                	mov    eax,edx
c00100ee:	74 4c                	je     c001013c <KeDisplaySplashScreen()+0x6d>
c00100f0:	80 bb b6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde14a],0xdb
c00100f7:	75 13                	jne    c001010c <KeDisplaySplashScreen()+0x3d>
c00100f9:	0f b6 8b b5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde14b]
c0010100:	83 e1 fe             	and    ecx,0xfffffffe
c0010103:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010109:	75 01                	jne    c001010c <KeDisplaySplashScreen()+0x3d>
c001010b:	46                   	inc    esi
c001010c:	83 fa 0d             	cmp    edx,0xd
c001010f:	74 28                	je     c0010139 <KeDisplaySplashScreen()+0x6a>
c0010111:	83 fa 0a             	cmp    edx,0xa
c0010114:	75 0a                	jne    c0010120 <KeDisplaySplashScreen()+0x51>
c0010116:	45                   	inc    ebp
c0010117:	be 0a 00 00 00       	mov    esi,0xa
c001011c:	31 db                	xor    ebx,ebx
c001011e:	eb 19                	jmp    c0010139 <KeDisplaySplashScreen()+0x6a>
c0010120:	83 ec 0c             	sub    esp,0xc
c0010123:	0f be c0             	movsx  eax,al
c0010126:	55                   	push   ebp
c0010127:	8d 14 33             	lea    edx,[ebx+esi*1]
c001012a:	43                   	inc    ebx
c001012b:	52                   	push   edx
c001012c:	6a 00                	push   0x0
c001012e:	6a 0e                	push   0xe
c0010130:	50                   	push   eax
c0010131:	e8 36 7b 00 00       	call   c0017c6c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010136:	83 c4 20             	add    esp,0x20
c0010139:	47                   	inc    edi
c001013a:	eb ab                	jmp    c00100e7 <KeDisplaySplashScreen()+0x18>
c001013c:	83 c4 0c             	add    esp,0xc
c001013f:	5b                   	pop    ebx
c0010140:	5e                   	pop    esi
c0010141:	5f                   	pop    edi
c0010142:	5d                   	pop    ebp
c0010143:	c3                   	ret    

c0010144 <KeSetBootMessage(char const*)>:
c0010144:	57                   	push   edi
c0010145:	56                   	push   esi
c0010146:	53                   	push   ebx
c0010147:	81 ec a4 00 00 00    	sub    esp,0xa4
c001014d:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010154:	68 9e 00 00 00       	push   0x9e
c0010159:	6a 00                	push   0x0
c001015b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001015f:	56                   	push   esi
c0010160:	e8 8b 03 ff ff       	call   c00004f0 <memset>
c0010165:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010168:	e8 13 04 ff ff       	call   c0000580 <strlen>
c001016d:	ba 50 00 00 00       	mov    edx,0x50
c0010172:	83 c4 10             	add    esp,0x10
c0010175:	31 c9                	xor    ecx,ecx
c0010177:	29 c2                	sub    edx,eax
c0010179:	83 e2 fe             	and    edx,0xfffffffe
c001017c:	01 f2                	add    edx,esi
c001017e:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010183:	84 c0                	test   al,al
c0010185:	74 0a                	je     c0010191 <KeSetBootMessage(char const*)+0x4d>
c0010187:	80 cc 0f             	or     ah,0xf
c001018a:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001018e:	41                   	inc    ecx
c001018f:	eb ed                	jmp    c001017e <KeSetBootMessage(char const*)+0x3a>
c0010191:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010196:	b9 9e 00 00 00       	mov    ecx,0x9e
c001019b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001019d:	81 c4 a0 00 00 00    	add    esp,0xa0
c00101a3:	5b                   	pop    ebx
c00101a4:	5e                   	pop    esi
c00101a5:	5f                   	pop    edi
c00101a6:	c3                   	ret    
c00101a7:	90                   	nop

c00101a8 <EnvVarContainer::getEnv(char const*)>:
c00101a8:	57                   	push   edi
c00101a9:	56                   	push   esi
c00101aa:	53                   	push   ebx
c00101ab:	31 db                	xor    ebx,ebx
c00101ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101b1:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101b3:	7e 2b                	jle    c00101e0 <EnvVarContainer::getEnv(char const*)+0x38>
c00101b5:	50                   	push   eax
c00101b6:	50                   	push   eax
c00101b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101ba:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101c1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101c8:	e8 b3 05 ff ff       	call   c0000780 <strcmp>
c00101cd:	83 c4 10             	add    esp,0x10
c00101d0:	85 c0                	test   eax,eax
c00101d2:	75 09                	jne    c00101dd <EnvVarContainer::getEnv(char const*)+0x35>
c00101d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101d7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101db:	eb 05                	jmp    c00101e2 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101dd:	43                   	inc    ebx
c00101de:	eb d1                	jmp    c00101b1 <EnvVarContainer::getEnv(char const*)+0x9>
c00101e0:	31 c0                	xor    eax,eax
c00101e2:	5b                   	pop    ebx
c00101e3:	5e                   	pop    esi
c00101e4:	5f                   	pop    edi
c00101e5:	c3                   	ret    

c00101e6 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101e6:	55                   	push   ebp
c00101e7:	57                   	push   edi
c00101e8:	56                   	push   esi
c00101e9:	53                   	push   ebx
c00101ea:	83 ec 28             	sub    esp,0x28
c00101ed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101f1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101f5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101f9:	56                   	push   esi
c00101fa:	e8 81 03 ff ff       	call   c0000580 <strlen>
c00101ff:	40                   	inc    eax
c0010200:	89 04 24             	mov    DWORD PTR [esp],eax
c0010203:	e8 af 78 ff ff       	call   c0007ab7 <malloc>
c0010208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001020b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001020f:	e8 6c 03 ff ff       	call   c0000580 <strlen>
c0010214:	40                   	inc    eax
c0010215:	89 04 24             	mov    DWORD PTR [esp],eax
c0010218:	e8 9a 78 ff ff       	call   c0007ab7 <malloc>
c001021d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010224:	e8 57 03 ff ff       	call   c0000580 <strlen>
c0010229:	83 c4 0c             	add    esp,0xc
c001022c:	40                   	inc    eax
c001022d:	50                   	push   eax
c001022e:	6a 00                	push   0x0
c0010230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010234:	e8 b7 02 ff ff       	call   c00004f0 <memset>
c0010239:	89 34 24             	mov    DWORD PTR [esp],esi
c001023c:	e8 3f 03 ff ff       	call   c0000580 <strlen>
c0010241:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010245:	8d 48 01             	lea    ecx,[eax+0x1]
c0010248:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001024a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001024d:	89 de                	mov    esi,ebx
c001024f:	e8 2c 03 ff ff       	call   c0000580 <strlen>
c0010254:	83 c4 0c             	add    esp,0xc
c0010257:	40                   	inc    eax
c0010258:	50                   	push   eax
c0010259:	6a 00                	push   0x0
c001025b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001025f:	e8 8c 02 ff ff       	call   c00004f0 <memset>
c0010264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010267:	e8 14 03 ff ff       	call   c0000580 <strlen>
c001026c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010270:	8d 48 01             	lea    ecx,[eax+0x1]
c0010273:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010275:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010278:	40                   	inc    eax
c0010279:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001027c:	c1 e0 03             	shl    eax,0x3
c001027f:	5a                   	pop    edx
c0010280:	59                   	pop    ecx
c0010281:	50                   	push   eax
c0010282:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010285:	e8 19 78 ff ff       	call   c0007aa3 <realloc>
c001028a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001028d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010291:	b9 08 00 00 00       	mov    ecx,0x8
c0010296:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010299:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001029d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001029f:	83 c4 2c             	add    esp,0x2c
c00102a2:	5b                   	pop    ebx
c00102a3:	5e                   	pop    esi
c00102a4:	5f                   	pop    edi
c00102a5:	5d                   	pop    ebp
c00102a6:	c3                   	ret    
c00102a7:	90                   	nop

c00102a8 <EnvVarContainer::deleteEnv(char const*)>:
c00102a8:	c3                   	ret    
c00102a9:	90                   	nop

c00102aa <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102aa:	55                   	push   ebp
c00102ab:	57                   	push   edi
c00102ac:	56                   	push   esi
c00102ad:	53                   	push   ebx
c00102ae:	81 ec 38 01 00 00    	sub    esp,0x138
c00102b4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102bb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102c2:	68 14 01 00 00       	push   0x114
c00102c7:	e8 eb 77 ff ff       	call   c0007ab7 <malloc>
c00102cc:	83 c4 0c             	add    esp,0xc
c00102cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102d2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102d9:	89 c3                	mov    ebx,eax
c00102db:	50                   	push   eax
c00102dc:	e8 05 ac ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c00102e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102e4:	e8 27 af ff ff       	call   c000b210 <File::exists()>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	84 c0                	test   al,al
c00102ee:	75 31                	jne    c0010321 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102f0:	50                   	push   eax
c00102f1:	50                   	push   eax
c00102f2:	6a 12                	push   0x12
c00102f4:	53                   	push   ebx
c00102f5:	e8 a8 ac ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c00102fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102fc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00102ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0010302:	e8 79 02 ff ff       	call   c0000580 <strlen>
c0010307:	5a                   	pop    edx
c0010308:	31 d2                	xor    edx,edx
c001030a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001030e:	51                   	push   ecx
c001030f:	56                   	push   esi
c0010310:	52                   	push   edx
c0010311:	50                   	push   eax
c0010312:	53                   	push   ebx
c0010313:	ff d7                	call   edi
c0010315:	83 c4 14             	add    esp,0x14
c0010318:	53                   	push   ebx
c0010319:	e8 e2 ac ff ff       	call   c000b000 <File::close()>
c001031e:	83 c4 10             	add    esp,0x10
c0010321:	56                   	push   esi
c0010322:	31 f6                	xor    esi,esi
c0010324:	68 00 01 00 00       	push   0x100
c0010329:	6a 00                	push   0x0
c001032b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001032f:	50                   	push   eax
c0010330:	e8 bb 01 ff ff       	call   c00004f0 <memset>
c0010335:	5f                   	pop    edi
c0010336:	58                   	pop    eax
c0010337:	6a 01                	push   0x1
c0010339:	53                   	push   ebx
c001033a:	e8 63 ac ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c001033f:	83 c4 10             	add    esp,0x10
c0010342:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001034f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010353:	51                   	push   ecx
c0010354:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010358:	52                   	push   edx
c0010359:	6a 00                	push   0x0
c001035b:	6a 01                	push   0x1
c001035d:	53                   	push   ebx
c001035e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010361:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c0010366:	83 c4 20             	add    esp,0x20
c0010369:	83 fa 0d             	cmp    edx,0xd
c001036c:	89 d0                	mov    eax,edx
c001036e:	0f 84 0a 01 00 00    	je     c001047e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010374:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010379:	0f 84 f0 00 00 00    	je     c001046f <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001037f:	83 fa 0a             	cmp    edx,0xa
c0010382:	74 13                	je     c0010397 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010384:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010389:	74 0c                	je     c0010397 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c001038b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010391:	0f 8e d8 00 00 00    	jle    c001046f <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010397:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001039b:	83 ec 0c             	sub    esp,0xc
c001039e:	8d 78 01             	lea    edi,[eax+0x1]
c00103a1:	57                   	push   edi
c00103a2:	e8 10 77 ff ff       	call   c0007ab7 <malloc>
c00103a7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103ab:	8d 56 04             	lea    edx,[esi+0x4]
c00103ae:	89 14 24             	mov    DWORD PTR [esp],edx
c00103b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103b9:	e8 f9 76 ff ff       	call   c0007ab7 <malloc>
c00103be:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103c2:	83 c4 0c             	add    esp,0xc
c00103c5:	57                   	push   edi
c00103c6:	6a 00                	push   0x0
c00103c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103cc:	e8 1f 01 ff ff       	call   c00004f0 <memset>
c00103d1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103d5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103d9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103df:	83 c4 0c             	add    esp,0xc
c00103e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103e6:	52                   	push   edx
c00103e7:	6a 00                	push   0x0
c00103e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103ed:	e8 fe 00 ff ff       	call   c00004f0 <memset>
c00103f2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103f6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00103fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00103fd:	e8 7e 01 ff ff       	call   c0000580 <strlen>
c0010402:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010406:	89 c1                	mov    ecx,eax
c0010408:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001040a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010413:	40                   	inc    eax
c0010414:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010417:	85 d2                	test   edx,edx
c0010419:	75 0c                	jne    c0010427 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c001041b:	83 ec 0c             	sub    esp,0xc
c001041e:	6a 08                	push   0x8
c0010420:	e8 92 76 ff ff       	call   c0007ab7 <malloc>
c0010425:	eb 0c                	jmp    c0010433 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c0010427:	51                   	push   ecx
c0010428:	51                   	push   ecx
c0010429:	c1 e0 03             	shl    eax,0x3
c001042c:	50                   	push   eax
c001042d:	52                   	push   edx
c001042e:	e8 70 76 ff ff       	call   c0007aa3 <realloc>
c0010433:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010436:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001043f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010443:	b9 08 00 00 00       	mov    ecx,0x8
c0010448:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001044c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001044e:	50                   	push   eax
c001044f:	31 f6                	xor    esi,esi
c0010451:	68 00 01 00 00       	push   0x100
c0010456:	6a 00                	push   0x0
c0010458:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001045c:	50                   	push   eax
c001045d:	e8 8e 00 ff ff       	call   c00004f0 <memset>
c0010462:	83 c4 10             	add    esp,0x10
c0010465:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001046d:	eb 0f                	jmp    c001047e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001046f:	3c 3d                	cmp    al,0x3d
c0010471:	74 07                	je     c001047a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0010473:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010477:	46                   	inc    esi
c0010478:	eb 04                	jmp    c001047e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001047a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001047e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010483:	0f 85 c1 fe ff ff    	jne    c001034a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010489:	81 c4 2c 01 00 00    	add    esp,0x12c
c001048f:	5b                   	pop    ebx
c0010490:	5e                   	pop    esi
c0010491:	5f                   	pop    edi
c0010492:	5d                   	pop    ebp
c0010493:	c3                   	ret    

c0010494 <EnvVarContainer::__loadSystem()>:
c0010494:	83 ec 10             	sub    esp,0x10
c0010497:	68 e0 1f 02 c0       	push   0xc0021fe0
c001049c:	68 28 0b 02 c0       	push   0xc0020b28
c00104a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a5:	e8 00 fe ff ff       	call   c00102aa <EnvVarContainer::loadFrom(char const*, char const*)>
c00104aa:	83 c4 1c             	add    esp,0x1c
c00104ad:	c3                   	ret    

c00104ae <EnvVarContainer::__loadUser()>:
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <EnvVarContainer::EnvVarContainer(Process*)>:
c00104b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104d0:	90                   	nop
c00104d1:	c3                   	ret    

c00104d2 <EnvVarContainer::~EnvVarContainer()>:
c00104d2:	83 ec 0c             	sub    esp,0xc
c00104d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104dc:	85 c0                	test   eax,eax
c00104de:	74 1d                	je     c00104fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e6:	85 c0                	test   eax,eax
c00104e8:	74 13                	je     c00104fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104f1:	83 ec 0c             	sub    esp,0xc
c00104f4:	50                   	push   eax
c00104f5:	e8 cd 75 ff ff       	call   c0007ac7 <free>
c00104fa:	83 c4 10             	add    esp,0x10
c00104fd:	90                   	nop
c00104fe:	83 c4 0c             	add    esp,0xc
c0010501:	c3                   	ret    

c0010502 <Krnl::getEnv(Process*, char const*)>:
c0010502:	53                   	push   ebx
c0010503:	83 ec 08             	sub    esp,0x8
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010510:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010514:	74 04                	je     c001051a <Krnl::getEnv(Process*, char const*)+0x18>
c0010516:	85 c0                	test   eax,eax
c0010518:	75 0b                	jne    c0010525 <Krnl::getEnv(Process*, char const*)+0x23>
c001051a:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001051f:	85 c0                	test   eax,eax
c0010521:	75 19                	jne    c001053c <Krnl::getEnv(Process*, char const*)+0x3a>
c0010523:	eb 27                	jmp    c001054c <Krnl::getEnv(Process*, char const*)+0x4a>
c0010525:	52                   	push   edx
c0010526:	52                   	push   edx
c0010527:	53                   	push   ebx
c0010528:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001052e:	e8 75 fc ff ff       	call   c00101a8 <EnvVarContainer::getEnv(char const*)>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	85 c0                	test   eax,eax
c0010538:	75 28                	jne    c0010562 <Krnl::getEnv(Process*, char const*)+0x60>
c001053a:	eb de                	jmp    c001051a <Krnl::getEnv(Process*, char const*)+0x18>
c001053c:	52                   	push   edx
c001053d:	52                   	push   edx
c001053e:	53                   	push   ebx
c001053f:	50                   	push   eax
c0010540:	e8 63 fc ff ff       	call   c00101a8 <EnvVarContainer::getEnv(char const*)>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	85 c0                	test   eax,eax
c001054a:	75 16                	jne    c0010562 <Krnl::getEnv(Process*, char const*)+0x60>
c001054c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010550:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010555:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010559:	83 c4 08             	add    esp,0x8
c001055c:	5b                   	pop    ebx
c001055d:	e9 46 fc ff ff       	jmp    c00101a8 <EnvVarContainer::getEnv(char const*)>
c0010562:	83 c4 08             	add    esp,0x8
c0010565:	5b                   	pop    ebx
c0010566:	c3                   	ret    

c0010567 <Krnl::setEnvSystem(char const*, char const*)>:
c0010567:	83 ec 10             	sub    esp,0x10
c001056a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001056e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010572:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c0010578:	e8 69 fc ff ff       	call   c00101e6 <EnvVarContainer::setEnv(char const*, char const*)>
c001057d:	83 c4 1c             	add    esp,0x1c
c0010580:	c3                   	ret    

c0010581 <Krnl::setEnvUser(char const*, char const*)>:
c0010581:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010586:	85 c0                	test   eax,eax
c0010588:	74 15                	je     c001059f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001058a:	83 ec 10             	sub    esp,0x10
c001058d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010595:	50                   	push   eax
c0010596:	e8 4b fc ff ff       	call   c00101e6 <EnvVarContainer::setEnv(char const*, char const*)>
c001059b:	83 c4 1c             	add    esp,0x1c
c001059e:	c3                   	ret    
c001059f:	c3                   	ret    

c00105a0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105ae:	e9 33 fc ff ff       	jmp    c00101e6 <EnvVarContainer::setEnv(char const*, char const*)>

c00105b3 <Krnl::deleteEnvSystem(char const*)>:
c00105b3:	c3                   	ret    

c00105b4 <Krnl::deleteEnvUser(char const*)>:
c00105b4:	c3                   	ret    

c00105b5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105b5:	c3                   	ret    

c00105b6 <Krnl::newProcessEnv(Process*)>:
c00105b6:	83 ec 28             	sub    esp,0x28
c00105b9:	6a 0c                	push   0xc
c00105bb:	e8 f7 74 ff ff       	call   c0007ab7 <malloc>
c00105c0:	5a                   	pop    edx
c00105c1:	59                   	pop    ecx
c00105c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105c6:	50                   	push   eax
c00105c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105cb:	e8 e0 fe ff ff       	call   c00104b0 <EnvVarContainer::EnvVarContainer(Process*)>
c00105d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105d4:	83 c4 2c             	add    esp,0x2c
c00105d7:	c3                   	ret    

c00105d8 <Krnl::copyProcessEnv(Process*, Process*)>:
c00105d8:	57                   	push   edi
c00105d9:	56                   	push   esi
c00105da:	53                   	push   ebx
c00105db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105df:	83 ec 0c             	sub    esp,0xc
c00105e2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105e8:	6a 0c                	push   0xc
c00105ea:	e8 c8 74 ff ff       	call   c0007ab7 <malloc>
c00105ef:	89 c3                	mov    ebx,eax
c00105f1:	58                   	pop    eax
c00105f2:	5a                   	pop    edx
c00105f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f7:	53                   	push   ebx
c00105f8:	e8 b3 fe ff ff       	call   c00104b0 <EnvVarContainer::EnvVarContainer(Process*)>
c00105fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00105ff:	89 03                	mov    DWORD PTR [ebx],eax
c0010601:	c1 e0 03             	shl    eax,0x3
c0010604:	89 04 24             	mov    DWORD PTR [esp],eax
c0010607:	e8 ab 74 ff ff       	call   c0007ab7 <malloc>
c001060c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001060f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010611:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010614:	89 c7                	mov    edi,eax
c0010616:	c1 e1 03             	shl    ecx,0x3
c0010619:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001061b:	83 c4 10             	add    esp,0x10
c001061e:	89 d8                	mov    eax,ebx
c0010620:	5b                   	pop    ebx
c0010621:	5e                   	pop    esi
c0010622:	5f                   	pop    edi
c0010623:	c3                   	ret    

c0010624 <Krnl::loadSystemEnv()>:
c0010624:	53                   	push   ebx
c0010625:	83 ec 14             	sub    esp,0x14
c0010628:	6a 0c                	push   0xc
c001062a:	e8 88 74 ff ff       	call   c0007ab7 <malloc>
c001062f:	89 c3                	mov    ebx,eax
c0010631:	58                   	pop    eax
c0010632:	5a                   	pop    edx
c0010633:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010639:	53                   	push   ebx
c001063a:	e8 71 fe ff ff       	call   c00104b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001063f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010642:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c0010648:	e8 47 fe ff ff       	call   c0010494 <EnvVarContainer::__loadSystem()>
c001064d:	83 c4 18             	add    esp,0x18
c0010650:	5b                   	pop    ebx
c0010651:	c3                   	ret    

c0010652 <Krnl::loadUserEnv()>:
c0010652:	53                   	push   ebx
c0010653:	83 ec 14             	sub    esp,0x14
c0010656:	6a 0c                	push   0xc
c0010658:	e8 5a 74 ff ff       	call   c0007ab7 <malloc>
c001065d:	89 c3                	mov    ebx,eax
c001065f:	58                   	pop    eax
c0010660:	5a                   	pop    edx
c0010661:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010667:	53                   	push   ebx
c0010668:	e8 43 fe ff ff       	call   c00104b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001066d:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010673:	83 c4 18             	add    esp,0x18
c0010676:	5b                   	pop    ebx
c0010677:	c3                   	ret    

c0010678 <Krnl::flushEnv()>:
c0010678:	c3                   	ret    

c0010679 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067d:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010683:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010689:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c001068e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010690:	03 01                	add    eax,DWORD PTR [ecx]
c0010692:	85 d2                	test   edx,edx
c0010694:	74 02                	je     c0010698 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010696:	03 02                	add    eax,DWORD PTR [edx]
c0010698:	c3                   	ret    

c0010699 <Krnl::getProcessEnvPair(Process*, int)>:
c0010699:	57                   	push   edi
c001069a:	56                   	push   esi
c001069b:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00106a1:	53                   	push   ebx
c00106a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106aa:	85 f6                	test   esi,esi
c00106ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106b0:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106b8:	75 16                	jne    c00106d0 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106ba:	39 c2                	cmp    edx,eax
c00106bc:	7c 16                	jl     c00106d4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106be:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c00106c4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106c6:	01 c6                	add    esi,eax
c00106c8:	39 d6                	cmp    esi,edx
c00106ca:	7e 3c                	jle    c0010708 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106cc:	29 c2                	sub    edx,eax
c00106ce:	eb 04                	jmp    c00106d4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106d0:	39 c2                	cmp    edx,eax
c00106d2:	7d 05                	jge    c00106d9 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106d4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106d7:	eb 20                	jmp    c00106f9 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106d9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106db:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106de:	39 d1                	cmp    ecx,edx
c00106e0:	7e 04                	jle    c00106e6 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106e2:	29 c2                	sub    edx,eax
c00106e4:	eb 10                	jmp    c00106f6 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106e6:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c00106ec:	03 0e                	add    ecx,DWORD PTR [esi]
c00106ee:	39 d1                	cmp    ecx,edx
c00106f0:	7e 16                	jle    c0010708 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106f2:	29 c2                	sub    edx,eax
c00106f4:	29 fa                	sub    edx,edi
c00106f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106f9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00106fe:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010701:	89 03                	mov    DWORD PTR [ebx],eax
c0010703:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010706:	eb 1d                	jmp    c0010725 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	68 4a 0b 02 c0       	push   0xc0020b4a
c0010710:	e8 ac 00 00 00       	call   c00107c1 <KePanic(char const*)>
c0010715:	83 c4 10             	add    esp,0x10
c0010718:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001071e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010725:	89 d8                	mov    eax,ebx
c0010727:	5b                   	pop    ebx
c0010728:	5e                   	pop    esi
c0010729:	5f                   	pop    edi
c001072a:	c2 04 00             	ret    0x4

c001072d <CPU::current()>:
c001072d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010732:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010738:	c3                   	ret    

c0010739 <operator new(unsigned long)>:
c0010739:	e9 79 73 ff ff       	jmp    c0007ab7 <malloc>

c001073e <operator delete(void*)>:
c001073e:	e9 94 73 ff ff       	jmp    c0007ad7 <rfree>

c0010743 <disableIRQs()>:
c0010743:	fa                   	cli    
c0010744:	c3                   	ret    

c0010745 <enableIRQs()>:
c0010745:	fb                   	sti    
c0010746:	c3                   	ret    

c0010747 <lockScheduler()>:
c0010747:	fa                   	cli    
c0010748:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001074e:	c3                   	ret    

c001074f <unlockScheduler()>:
c001074f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010754:	48                   	dec    eax
c0010755:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001075a:	75 01                	jne    c001075d <unlockScheduler()+0xe>
c001075c:	fb                   	sti    
c001075d:	c3                   	ret    

c001075e <lockStuff()>:
c001075e:	fa                   	cli    
c001075f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010765:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c001076b:	c3                   	ret    

c001076c <unlockStuff()>:
c001076c:	83 ec 0c             	sub    esp,0xc
c001076f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010774:	48                   	dec    eax
c0010775:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001077a:	75 18                	jne    c0010794 <unlockStuff()+0x28>
c001077c:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010783:	74 0f                	je     c0010794 <unlockStuff()+0x28>
c0010785:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001078f:	e8 24 48 00 00       	call   c0014fb8 <schedule()>
c0010794:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010799:	48                   	dec    eax
c001079a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001079f:	75 01                	jne    c00107a2 <unlockStuff()+0x36>
c00107a1:	fb                   	sti    
c00107a2:	83 c4 0c             	add    esp,0xc
c00107a5:	c3                   	ret    

c00107a6 <Virt::getAKernelVAS()>:
c00107a6:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00107ab:	c3                   	ret    

c00107ac <__not_memcpy>:
c00107ac:	57                   	push   edi
c00107ad:	56                   	push   esi
c00107ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107ba:	89 c7                	mov    edi,eax
c00107bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107be:	5e                   	pop    esi
c00107bf:	5f                   	pop    edi
c00107c0:	c3                   	ret    

c00107c1 <KePanic(char const*)>:
c00107c1:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c00107c8:	e9 0d 67 00 00       	jmp    c0016eda <HalPanic(char const*)>

c00107cd <Krnl::powerThread(void*)>:
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107d5:	48                   	dec    eax
c00107d6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107db:	75 01                	jne    c00107de <Krnl::powerThread(void*)+0x11>
c00107dd:	fb                   	sti    
c00107de:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	6a 0a                	push   0xa
c00107ea:	e8 f9 4a 00 00       	call   c00152e8 <sleep(unsigned int)>
c00107ef:	83 c4 10             	add    esp,0x10
c00107f2:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c00107f9:	eb e3                	jmp    c00107de <Krnl::powerThread(void*)+0x11>

c00107fb <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00107fb:	57                   	push   edi
c00107fc:	b9 09 00 00 00       	mov    ecx,0x9
c0010801:	56                   	push   esi
c0010802:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010807:	fc                   	cld    
c0010808:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001080c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001080e:	5e                   	pop    esi
c001080f:	5f                   	pop    edi
c0010810:	c3                   	ret    

c0010811 <Krnl::userIOReceived()>:
c0010811:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001081b:	c3                   	ret    

c001081c <Krnl::handlePowerButton()>:
c001081c:	83 ec 0c             	sub    esp,0xc
c001081f:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010824:	83 f8 02             	cmp    eax,0x2
c0010827:	75 10                	jne    c0010839 <Krnl::handlePowerButton()+0x1d>
c0010829:	83 ec 0c             	sub    esp,0xc
c001082c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010832:	e8 0b 69 ff ff       	call   c0007142 <Computer::shutdown()>
c0010837:	eb 11                	jmp    c001084a <Krnl::handlePowerButton()+0x2e>
c0010839:	48                   	dec    eax
c001083a:	75 11                	jne    c001084d <Krnl::handlePowerButton()+0x31>
c001083c:	83 ec 0c             	sub    esp,0xc
c001083f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010845:	e8 28 69 ff ff       	call   c0007172 <Computer::sleep()>
c001084a:	83 c4 10             	add    esp,0x10
c001084d:	83 c4 0c             	add    esp,0xc
c0010850:	c3                   	ret    

c0010851 <Krnl::handleSleepButton()>:
c0010851:	83 ec 0c             	sub    esp,0xc
c0010854:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010859:	83 f8 02             	cmp    eax,0x2
c001085c:	75 10                	jne    c001086e <Krnl::handleSleepButton()+0x1d>
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010867:	e8 d6 68 ff ff       	call   c0007142 <Computer::shutdown()>
c001086c:	eb 11                	jmp    c001087f <Krnl::handleSleepButton()+0x2e>
c001086e:	48                   	dec    eax
c001086f:	75 11                	jne    c0010882 <Krnl::handleSleepButton()+0x31>
c0010871:	83 ec 0c             	sub    esp,0xc
c0010874:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001087a:	e8 f3 68 ff ff       	call   c0007172 <Computer::sleep()>
c001087f:	83 c4 10             	add    esp,0x10
c0010882:	83 c4 0c             	add    esp,0xc
c0010885:	c3                   	ret    

c0010886 <Krnl::setupPowerManager()>:
c0010886:	83 ec 0c             	sub    esp,0xc
c0010889:	68 f0 00 00 00       	push   0xf0
c001088e:	6a 00                	push   0x0
c0010890:	68 cd 07 01 c0       	push   0xc00107cd
c0010895:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001089b:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108a5:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00108ac:	e8 bb 44 00 00       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c00108b1:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c00108bb:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c00108c5:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c00108cf:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c00108d9:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c00108e3:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c00108ed:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c00108f7:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010901:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001090b:	83 c4 1c             	add    esp,0x1c
c001090e:	c3                   	ret    

c001090f <KeRand()>:
c001090f:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010919:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010923:	53                   	push   ebx
c0010924:	01 c1                	add    ecx,eax
c0010926:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001092b:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010931:	01 ca                	add    edx,ecx
c0010933:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010938:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c001093d:	83 d2 00             	adc    edx,0x0
c0010940:	0f b7 da             	movzx  ebx,dx
c0010943:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010949:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001094d:	5b                   	pop    ebx
c001094e:	c3                   	ret    

c001094f <KeSeedRand(unsigned int)>:
c001094f:	53                   	push   ebx
c0010950:	83 ec 08             	sub    esp,0x8
c0010953:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010957:	e8 82 68 00 00       	call   c00171de <HalGetRand()>
c001095c:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010966:	31 d8                	xor    eax,ebx
c0010968:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c001096d:	e8 9d ff ff ff       	call   c001090f <KeRand()>
c0010972:	83 c4 08             	add    esp,0x8
c0010975:	5b                   	pop    ebx
c0010976:	eb 97                	jmp    c001090f <KeRand()>

c0010978 <KeInitRand()>:
c0010978:	83 ec 0c             	sub    esp,0xc
c001097b:	e8 53 66 00 00       	call   c0016fd3 <HalQueryPerformanceCounter()>
c0010980:	0f 20 da             	mov    edx,cr3
c0010983:	0f 22 da             	mov    cr3,edx
c0010986:	0f 20 da             	mov    edx,cr3
c0010989:	0f 22 da             	mov    cr3,edx
c001098c:	0f 20 da             	mov    edx,cr3
c001098f:	0f 22 da             	mov    cr3,edx
c0010992:	0f 20 da             	mov    edx,cr3
c0010995:	0f 22 da             	mov    cr3,edx
c0010998:	83 ec 0c             	sub    esp,0xc
c001099b:	35 03 8a 95 38       	xor    eax,0x38958a03
c00109a0:	50                   	push   eax
c00109a1:	e8 a9 ff ff ff       	call   c001094f <KeSeedRand(unsigned int)>
c00109a6:	83 c4 1c             	add    esp,0x1c
c00109a9:	c3                   	ret    
c00109aa:	66 90                	xchg   ax,ax

c00109ac <KeResolveCompatibilitySymbol(char*)>:
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	83 ec 08             	sub    esp,0x8
c00109b2:	68 64 0b 02 c0       	push   0xc0020b64
c00109b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109bb:	e8 c0 fd fe ff       	call   c0000780 <strcmp>
c00109c0:	83 c4 10             	add    esp,0x10
c00109c3:	85 c0                	test   eax,eax
c00109c5:	0f 94 c0             	sete   al
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	85 c0                	test   eax,eax
c00109cd:	74 0d                	je     c00109dc <KeResolveCompatibilitySymbol(char*)+0x30>
c00109cf:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c00109d4:	e9 8b 01 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109d9:	8d 76 00             	lea    esi,[esi+0x0]
c00109dc:	83 ec 08             	sub    esp,0x8
c00109df:	68 6d 0b 02 c0       	push   0xc0020b6d
c00109e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109e8:	e8 93 fd fe ff       	call   c0000780 <strcmp>
c00109ed:	83 c4 10             	add    esp,0x10
c00109f0:	85 c0                	test   eax,eax
c00109f2:	0f 94 c0             	sete   al
c00109f5:	0f b6 c0             	movzx  eax,al
c00109f8:	85 c0                	test   eax,eax
c00109fa:	74 0c                	je     c0010a08 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00109fc:	b8 80 e5 01 c0       	mov    eax,0xc001e580
c0010a01:	e9 5e 01 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a06:	66 90                	xchg   ax,ax
c0010a08:	83 ec 08             	sub    esp,0x8
c0010a0b:	68 77 0b 02 c0       	push   0xc0020b77
c0010a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a14:	e8 67 fd fe ff       	call   c0000780 <strcmp>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	85 c0                	test   eax,eax
c0010a1e:	0f 94 c0             	sete   al
c0010a21:	0f b6 c0             	movzx  eax,al
c0010a24:	85 c0                	test   eax,eax
c0010a26:	74 0c                	je     c0010a34 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010a28:	b8 b4 e2 01 c0       	mov    eax,0xc001e2b4
c0010a2d:	e9 32 01 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	83 ec 08             	sub    esp,0x8
c0010a37:	68 80 0b 02 c0       	push   0xc0020b80
c0010a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a40:	e8 3b fd fe ff       	call   c0000780 <strcmp>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	85 c0                	test   eax,eax
c0010a4a:	0f 94 c0             	sete   al
c0010a4d:	0f b6 c0             	movzx  eax,al
c0010a50:	85 c0                	test   eax,eax
c0010a52:	74 0c                	je     c0010a60 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010a54:	b8 c1 07 01 c0       	mov    eax,0xc00107c1
c0010a59:	e9 06 01 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a5e:	66 90                	xchg   ax,ax
c0010a60:	83 ec 08             	sub    esp,0x8
c0010a63:	68 93 0b 02 c0       	push   0xc0020b93
c0010a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6c:	e8 0f fd fe ff       	call   c0000780 <strcmp>
c0010a71:	83 c4 10             	add    esp,0x10
c0010a74:	85 c0                	test   eax,eax
c0010a76:	0f 94 c0             	sete   al
c0010a79:	0f b6 c0             	movzx  eax,al
c0010a7c:	85 c0                	test   eax,eax
c0010a7e:	74 0c                	je     c0010a8c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010a80:	b8 44 01 01 c0       	mov    eax,0xc0010144
c0010a85:	e9 da 00 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a8a:	66 90                	xchg   ax,ax
c0010a8c:	83 ec 08             	sub    esp,0x8
c0010a8f:	68 b0 0b 02 c0       	push   0xc0020bb0
c0010a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a98:	e8 e3 fc fe ff       	call   c0000780 <strcmp>
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	85 c0                	test   eax,eax
c0010aa2:	0f 94 c0             	sete   al
c0010aa5:	0f b6 c0             	movzx  eax,al
c0010aa8:	85 c0                	test   eax,eax
c0010aaa:	74 0c                	je     c0010ab8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010aac:	b8 80 e6 01 c0       	mov    eax,0xc001e680
c0010ab1:	e9 ae 00 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ab6:	66 90                	xchg   ax,ax
c0010ab8:	83 ec 08             	sub    esp,0x8
c0010abb:	68 ba 0b 02 c0       	push   0xc0020bba
c0010ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac4:	e8 b7 fc fe ff       	call   c0000780 <strcmp>
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	85 c0                	test   eax,eax
c0010ace:	0f 94 c0             	sete   al
c0010ad1:	0f b6 c0             	movzx  eax,al
c0010ad4:	85 c0                	test   eax,eax
c0010ad6:	74 0c                	je     c0010ae4 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010ad8:	b8 00 e4 01 c0       	mov    eax,0xc001e400
c0010add:	e9 82 00 00 00       	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ae2:	66 90                	xchg   ax,ax
c0010ae4:	83 ec 08             	sub    esp,0x8
c0010ae7:	68 c3 0b 02 c0       	push   0xc0020bc3
c0010aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af0:	e8 8b fc fe ff       	call   c0000780 <strcmp>
c0010af5:	83 c4 10             	add    esp,0x10
c0010af8:	85 c0                	test   eax,eax
c0010afa:	0f 94 c0             	sete   al
c0010afd:	0f b6 c0             	movzx  eax,al
c0010b00:	85 c0                	test   eax,eax
c0010b02:	74 08                	je     c0010b0c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b04:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b09:	eb 59                	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b0b:	90                   	nop
c0010b0c:	83 ec 08             	sub    esp,0x8
c0010b0f:	68 db 0b 02 c0       	push   0xc0020bdb
c0010b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b18:	e8 63 fc fe ff       	call   c0000780 <strcmp>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	85 c0                	test   eax,eax
c0010b22:	0f 94 c0             	sete   al
c0010b25:	0f b6 c0             	movzx  eax,al
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	74 08                	je     c0010b34 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010b2c:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b31:	eb 31                	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b33:	90                   	nop
c0010b34:	83 ec 08             	sub    esp,0x8
c0010b37:	68 e8 0b 02 c0       	push   0xc0020be8
c0010b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b40:	e8 3b fc fe ff       	call   c0000780 <strcmp>
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	0f 94 c0             	sete   al
c0010b4d:	0f b6 c0             	movzx  eax,al
c0010b50:	85 c0                	test   eax,eax
c0010b52:	74 08                	je     c0010b5c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010b54:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010b59:	eb 09                	jmp    c0010b64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b5b:	90                   	nop
c0010b5c:	b8 00 00 00 00       	mov    eax,0x0
c0010b61:	8d 76 00             	lea    esi,[esi+0x0]
c0010b64:	83 c4 0c             	add    esp,0xc
c0010b67:	c3                   	ret    

c0010b68 <KiSigKill(int)>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	6a 00                	push   0x0
c0010b6d:	6a 00                	push   0x0
c0010b6f:	6a ff                	push   0xffffffff
c0010b71:	6a 01                	push   0x1
c0010b73:	e8 da 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010b78:	83 c4 1c             	add    esp,0x1c
c0010b7b:	c3                   	ret    

c0010b7c <KiDefaultSignalHandlerIgnore(int)>:
c0010b7c:	c3                   	ret    

c0010b7d <KiDefaultSignalHandlerPause(int)>:
c0010b7d:	57                   	push   edi
c0010b7e:	b9 07 00 00 00       	mov    ecx,0x7
c0010b83:	56                   	push   esi
c0010b84:	be 31 0c 02 c0       	mov    esi,0xc0020c31
c0010b89:	83 ec 24             	sub    esp,0x24
c0010b8c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010b90:	fc                   	cld    
c0010b91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b93:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010b97:	50                   	push   eax
c0010b98:	6a 00                	push   0x0
c0010b9a:	6a 00                	push   0x0
c0010b9c:	6a 27                	push   0x27
c0010b9e:	e8 af 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ba3:	83 c4 34             	add    esp,0x34
c0010ba6:	5e                   	pop    esi
c0010ba7:	5f                   	pop    edi
c0010ba8:	c3                   	ret    

c0010ba9 <KiDefaultSignalHandlerResume(int)>:
c0010ba9:	57                   	push   edi
c0010baa:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010baf:	56                   	push   esi
c0010bb0:	be 4d 0c 02 c0       	mov    esi,0xc0020c4d
c0010bb5:	83 ec 24             	sub    esp,0x24
c0010bb8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010bbc:	fc                   	cld    
c0010bbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bbf:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010bc3:	50                   	push   eax
c0010bc4:	6a 00                	push   0x0
c0010bc6:	6a 00                	push   0x0
c0010bc8:	6a 27                	push   0x27
c0010bca:	e8 83 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bcf:	83 c4 34             	add    esp,0x34
c0010bd2:	5e                   	pop    esi
c0010bd3:	5f                   	pop    edi
c0010bd4:	c3                   	ret    

c0010bd5 <KeDeinitSignals(SigHandlerBlock*)>:
c0010bd5:	e9 ed 6e ff ff       	jmp    c0007ac7 <free>

c0010bda <KeInitSignals()>:
c0010bda:	53                   	push   ebx
c0010bdb:	83 ec 14             	sub    esp,0x14
c0010bde:	68 c8 00 00 00       	push   0xc8
c0010be3:	e8 cf 6e ff ff       	call   c0007ab7 <malloc>
c0010be8:	83 c4 0c             	add    esp,0xc
c0010beb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010bf5:	89 c3                	mov    ebx,eax
c0010bf7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c01:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c07:	6a 20                	push   0x20
c0010c09:	6a 00                	push   0x0
c0010c0b:	50                   	push   eax
c0010c0c:	e8 df f8 fe ff       	call   c00004f0 <memset>
c0010c11:	83 c4 0c             	add    esp,0xc
c0010c14:	6a 44                	push   0x44
c0010c16:	6a 00                	push   0x0
c0010c18:	53                   	push   ebx
c0010c19:	e8 d2 f8 fe ff       	call   c00004f0 <memset>
c0010c1e:	83 c4 18             	add    esp,0x18
c0010c21:	89 d8                	mov    eax,ebx
c0010c23:	5b                   	pop    ebx
c0010c24:	c3                   	ret    

c0010c25 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c25:	53                   	push   ebx
c0010c26:	b8 01 00 00 00       	mov    eax,0x1
c0010c2b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c33:	83 f9 10             	cmp    ecx,0x10
c0010c36:	7f 21                	jg     c0010c59 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c3c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c3f:	89 03                	mov    DWORD PTR [ebx],eax
c0010c41:	b8 01 00 00 00       	mov    eax,0x1
c0010c46:	d3 e0                	shl    eax,cl
c0010c48:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c4c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010c4f:	31 c0                	xor    eax,eax
c0010c51:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010c59:	5b                   	pop    ebx
c0010c5a:	c3                   	ret    

c0010c5b <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010c5b:	55                   	push   ebp
c0010c5c:	57                   	push   edi
c0010c5d:	bf 08 00 00 00       	mov    edi,0x8
c0010c62:	56                   	push   esi
c0010c63:	53                   	push   ebx
c0010c64:	83 ec 18             	sub    esp,0x18
c0010c67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c6b:	68 6a 0c 02 c0       	push   0xc0020c6a
c0010c70:	e8 c8 9c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	31 c9                	xor    ecx,ecx
c0010c7a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010c81:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010c87:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010c8b:	99                   	cdq    
c0010c8c:	f7 ff                	idiv   edi
c0010c8e:	8d 42 24             	lea    eax,[edx+0x24]
c0010c91:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010c95:	85 f6                	test   esi,esi
c0010c97:	75 1a                	jne    c0010cb3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010c99:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010c9d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010ca1:	50                   	push   eax
c0010ca2:	50                   	push   eax
c0010ca3:	52                   	push   edx
c0010ca4:	68 7b 0c 02 c0       	push   0xc0020c7b
c0010ca9:	e8 8f 9c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0010cae:	83 c4 10             	add    esp,0x10
c0010cb1:	eb 1b                	jmp    c0010cce <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010cb3:	41                   	inc    ecx
c0010cb4:	83 f9 08             	cmp    ecx,0x8
c0010cb7:	75 ce                	jne    c0010c87 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010cb9:	83 ec 0c             	sub    esp,0xc
c0010cbc:	be 01 00 00 00       	mov    esi,0x1
c0010cc1:	68 9c 0c 02 c0       	push   0xc0020c9c
c0010cc6:	e8 72 9c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0010ccb:	83 c4 10             	add    esp,0x10
c0010cce:	83 c4 0c             	add    esp,0xc
c0010cd1:	89 f0                	mov    eax,esi
c0010cd3:	5b                   	pop    ebx
c0010cd4:	5e                   	pop    esi
c0010cd5:	5f                   	pop    edi
c0010cd6:	5d                   	pop    ebp
c0010cd7:	c3                   	ret    

c0010cd8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010cd8:	55                   	push   ebp
c0010cd9:	57                   	push   edi
c0010cda:	56                   	push   esi
c0010cdb:	53                   	push   ebx
c0010cdc:	51                   	push   ecx
c0010cdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ce1:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010ce8:	0f 84 af 00 00 00    	je     c0010d9d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010cee:	31 c9                	xor    ecx,ecx
c0010cf0:	bf 08 00 00 00       	mov    edi,0x8
c0010cf5:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010cfb:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010cfe:	99                   	cdq    
c0010cff:	f7 ff                	idiv   edi
c0010d01:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d08:	85 ed                	test   ebp,ebp
c0010d0a:	0f 84 9e 00 00 00    	je     c0010dae <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d10:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d16:	89 e9                	mov    ecx,ebp
c0010d18:	bf 01 00 00 00       	mov    edi,0x1
c0010d1d:	d3 e7                	shl    edi,cl
c0010d1f:	31 c9                	xor    ecx,ecx
c0010d21:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d24:	b8 01 00 00 00       	mov    eax,0x1
c0010d29:	d3 e0                	shl    eax,cl
c0010d2b:	85 04 24             	test   DWORD PTR [esp],eax
c0010d2e:	74 06                	je     c0010d36 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010d30:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d34:	75 67                	jne    c0010d9d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d36:	41                   	inc    ecx
c0010d37:	83 f9 11             	cmp    ecx,0x11
c0010d3a:	75 e8                	jne    c0010d24 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010d3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d3f:	46                   	inc    esi
c0010d40:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d46:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010d51:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d58:	09 f8                	or     eax,edi
c0010d5a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010d60:	31 c0                	xor    eax,eax
c0010d62:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010d6a:	74 09                	je     c0010d75 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010d6c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d73:	eb 06                	jmp    c0010d7b <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010d75:	40                   	inc    eax
c0010d76:	83 f8 08             	cmp    eax,0x8
c0010d79:	75 e7                	jne    c0010d62 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010d7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010d7f:	83 fd 09             	cmp    ebp,0x9
c0010d82:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010d85:	89 2a                	mov    DWORD PTR [edx],ebp
c0010d87:	75 07                	jne    c0010d90 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010d89:	b8 68 0b 01 c0       	mov    eax,0xc0010b68
c0010d8e:	eb 31                	jmp    c0010dc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010d90:	83 f8 01             	cmp    eax,0x1
c0010d93:	75 0c                	jne    c0010da1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010d95:	f7 d7                	not    edi
c0010d97:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010d9d:	31 c0                	xor    eax,eax
c0010d9f:	eb 20                	jmp    c0010dc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010da1:	85 c0                	test   eax,eax
c0010da3:	75 1c                	jne    c0010dc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010da5:	8b 04 ad 40 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddfc0]
c0010dac:	eb 13                	jmp    c0010dc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010dae:	41                   	inc    ecx
c0010daf:	46                   	inc    esi
c0010db0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010db6:	83 f9 08             	cmp    ecx,0x8
c0010db9:	0f 85 36 ff ff ff    	jne    c0010cf5 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010dbf:	eb dc                	jmp    c0010d9d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dc1:	5a                   	pop    edx
c0010dc2:	5b                   	pop    ebx
c0010dc3:	5e                   	pop    esi
c0010dc4:	5f                   	pop    edi
c0010dc5:	5d                   	pop    ebp
c0010dc6:	c3                   	ret    

c0010dc7 <KiCheckSignalZ>:
c0010dc7:	83 ec 10             	sub    esp,0x10
c0010dca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010dce:	50                   	push   eax
c0010dcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dd7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010ddd:	e8 f6 fe ff ff       	call   c0010cd8 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010de2:	5a                   	pop    edx
c0010de3:	31 d2                	xor    edx,edx
c0010de5:	59                   	pop    ecx
c0010de6:	85 c0                	test   eax,eax
c0010de8:	74 19                	je     c0010e03 <KiCheckSignalZ+0x3c>
c0010dea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010df0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010df3:	89 02                	mov    DWORD PTR [edx],eax
c0010df5:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e00:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e03:	89 d0                	mov    eax,edx
c0010e05:	83 c4 10             	add    esp,0x10
c0010e08:	c3                   	ret    

c0010e09 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e09:	56                   	push   esi
c0010e0a:	53                   	push   ebx
c0010e0b:	bb 01 00 00 00       	mov    ebx,0x1
c0010e10:	52                   	push   edx
c0010e11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e19:	d3 e3                	shl    ebx,cl
c0010e1b:	83 f9 10             	cmp    ecx,0x10
c0010e1e:	7f 08                	jg     c0010e28 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e20:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e26:	75 10                	jne    c0010e38 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e28:	83 ec 0c             	sub    esp,0xc
c0010e2b:	68 ad 0c 02 c0       	push   0xc0020cad
c0010e30:	e8 8c f9 ff ff       	call   c00107c1 <KePanic(char const*)>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	f7 d3                	not    ebx
c0010e3a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e40:	58                   	pop    eax
c0010e41:	5b                   	pop    ebx
c0010e42:	5e                   	pop    esi
c0010e43:	c3                   	ret    

c0010e44 <KiFinishSignalZ>:
c0010e44:	53                   	push   ebx
c0010e45:	83 ec 10             	sub    esp,0x10
c0010e48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e4c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e57:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e5d:	e8 a7 ff ff ff       	call   c0010e09 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010e62:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010e68:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010e6f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010e76:	83 c4 18             	add    esp,0x18
c0010e79:	5b                   	pop    ebx
c0010e7a:	c3                   	ret    

c0010e7b <SysSeekDir(regs*)>:
c0010e7b:	31 c0                	xor    eax,eax
c0010e7d:	31 d2                	xor    edx,edx
c0010e7f:	c3                   	ret    

c0010e80 <SysTellDir(regs*)>:
c0010e80:	31 c0                	xor    eax,eax
c0010e82:	31 d2                	xor    edx,edx
c0010e84:	c3                   	ret    

c0010e85 <SysVerify(regs*)>:
c0010e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e89:	31 d2                	xor    edx,edx
c0010e8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e8e:	c3                   	ret    

c0010e8f <SysGetArgc(regs*)>:
c0010e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e97:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010e9d:	89 c2                	mov    edx,eax
c0010e9f:	c1 fa 1f             	sar    edx,0x1f
c0010ea2:	c3                   	ret    

c0010ea3 <SysTTYName(regs*)>:
c0010ea3:	b8 01 00 00 00       	mov    eax,0x1
c0010ea8:	31 d2                	xor    edx,edx
c0010eaa:	c3                   	ret    

c0010eab <SysFormatDisk(regs*)>:
c0010eab:	56                   	push   esi
c0010eac:	53                   	push   ebx
c0010ead:	83 ec 04             	sub    esp,0x4
c0010eb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010eb4:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010eba:	eb 2a                	jmp    c0010ee6 <SysFormatDisk(regs*)+0x3b>
c0010ebc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010ec5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ec7:	51                   	push   ecx
c0010ec8:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010ecb:	51                   	push   ecx
c0010ecc:	50                   	push   eax
c0010ecd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010ed4:	50                   	push   eax
c0010ed5:	53                   	push   ebx
c0010ed6:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010ed9:	83 c4 20             	add    esp,0x20
c0010edc:	83 f8 08             	cmp    eax,0x8
c0010edf:	89 c1                	mov    ecx,eax
c0010ee1:	75 14                	jne    c0010ef7 <SysFormatDisk(regs*)+0x4c>
c0010ee3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010ee6:	85 db                	test   ebx,ebx
c0010ee8:	75 d2                	jne    c0010ebc <SysFormatDisk(regs*)+0x11>
c0010eea:	b8 03 00 00 00       	mov    eax,0x3
c0010eef:	31 d2                	xor    edx,edx
c0010ef1:	83 c4 04             	add    esp,0x4
c0010ef4:	5b                   	pop    ebx
c0010ef5:	5e                   	pop    esi
c0010ef6:	c3                   	ret    
c0010ef7:	85 c0                	test   eax,eax
c0010ef9:	74 13                	je     c0010f0e <SysFormatDisk(regs*)+0x63>
c0010efb:	31 d2                	xor    edx,edx
c0010efd:	83 f9 09             	cmp    ecx,0x9
c0010f00:	b8 01 00 00 00       	mov    eax,0x1
c0010f05:	74 ea                	je     c0010ef1 <SysFormatDisk(regs*)+0x46>
c0010f07:	b8 02 00 00 00       	mov    eax,0x2
c0010f0c:	eb e1                	jmp    c0010eef <SysFormatDisk(regs*)+0x44>
c0010f0e:	31 c0                	xor    eax,eax
c0010f10:	eb dd                	jmp    c0010eef <SysFormatDisk(regs*)+0x44>

c0010f12 <SysSetDiskVolumeLabel(regs*)>:
c0010f12:	56                   	push   esi
c0010f13:	53                   	push   ebx
c0010f14:	83 ec 04             	sub    esp,0x4
c0010f17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f1b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f1e:	83 f8 19             	cmp    eax,0x19
c0010f21:	77 33                	ja     c0010f56 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f23:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f2a:	85 c9                	test   ecx,ecx
c0010f2c:	74 28                	je     c0010f56 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f2e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f31:	85 db                	test   ebx,ebx
c0010f33:	74 21                	je     c0010f56 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f35:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010f3b:	85 d2                	test   edx,edx
c0010f3d:	74 17                	je     c0010f56 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f3f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f41:	53                   	push   ebx
c0010f42:	50                   	push   eax
c0010f43:	51                   	push   ecx
c0010f44:	52                   	push   edx
c0010f45:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	83 c4 04             	add    esp,0x4
c0010f4e:	5b                   	pop    ebx
c0010f4f:	5e                   	pop    esi
c0010f50:	89 c2                	mov    edx,eax
c0010f52:	c1 fa 1f             	sar    edx,0x1f
c0010f55:	c3                   	ret    
c0010f56:	83 c4 04             	add    esp,0x4
c0010f59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f5e:	5b                   	pop    ebx
c0010f5f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f64:	5e                   	pop    esi
c0010f65:	c3                   	ret    

c0010f66 <SysGetDiskVolumeLabel(regs*)>:
c0010f66:	57                   	push   edi
c0010f67:	56                   	push   esi
c0010f68:	53                   	push   ebx
c0010f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f70:	83 fa 19             	cmp    edx,0x19
c0010f73:	77 3c                	ja     c0010fb1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f75:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010f7c:	85 c9                	test   ecx,ecx
c0010f7e:	74 31                	je     c0010fb1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f80:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010f83:	85 db                	test   ebx,ebx
c0010f85:	74 2a                	je     c0010fb1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f87:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010f8a:	85 f6                	test   esi,esi
c0010f8c:	74 23                	je     c0010fb1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f8e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 19                	je     c0010fb1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f98:	83 ec 0c             	sub    esp,0xc
c0010f9b:	8b 38                	mov    edi,DWORD PTR [eax]
c0010f9d:	56                   	push   esi
c0010f9e:	53                   	push   ebx
c0010f9f:	52                   	push   edx
c0010fa0:	51                   	push   ecx
c0010fa1:	50                   	push   eax
c0010fa2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010fa5:	83 c4 20             	add    esp,0x20
c0010fa8:	5b                   	pop    ebx
c0010fa9:	5e                   	pop    esi
c0010faa:	89 c2                	mov    edx,eax
c0010fac:	c1 fa 1f             	sar    edx,0x1f
c0010faf:	5f                   	pop    edi
c0010fb0:	c3                   	ret    
c0010fb1:	5b                   	pop    ebx
c0010fb2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fb7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fbc:	5e                   	pop    esi
c0010fbd:	5f                   	pop    edi
c0010fbe:	c3                   	ret    

c0010fbf <SysShutdown(regs*)>:
c0010fbf:	57                   	push   edi
c0010fc0:	56                   	push   esi
c0010fc1:	83 ec 04             	sub    esp,0x4
c0010fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fcb:	85 c0                	test   eax,eax
c0010fcd:	74 1e                	je     c0010fed <SysShutdown(regs*)+0x2e>
c0010fcf:	83 f8 01             	cmp    eax,0x1
c0010fd2:	74 5f                	je     c0011033 <SysShutdown(regs*)+0x74>
c0010fd4:	83 f8 02             	cmp    eax,0x2
c0010fd7:	be ff ff ff ff       	mov    esi,0xffffffff
c0010fdc:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010fe1:	74 32                	je     c0011015 <SysShutdown(regs*)+0x56>
c0010fe3:	83 c4 04             	add    esp,0x4
c0010fe6:	89 f0                	mov    eax,esi
c0010fe8:	5e                   	pop    esi
c0010fe9:	89 fa                	mov    edx,edi
c0010feb:	5f                   	pop    edi
c0010fec:	c3                   	ret    
c0010fed:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010ff2:	be ff ff ff ff       	mov    esi,0xffffffff
c0010ff7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010ffc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ffe:	6a 00                	push   0x0
c0011000:	6a 00                	push   0x0
c0011002:	6a 00                	push   0x0
c0011004:	50                   	push   eax
c0011005:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011008:	83 c4 10             	add    esp,0x10
c001100b:	89 f0                	mov    eax,esi
c001100d:	83 c4 04             	add    esp,0x4
c0011010:	89 fa                	mov    edx,edi
c0011012:	5e                   	pop    esi
c0011013:	5f                   	pop    edi
c0011014:	c3                   	ret    
c0011015:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001101a:	8b 10                	mov    edx,DWORD PTR [eax]
c001101c:	6a 00                	push   0x0
c001101e:	6a 00                	push   0x0
c0011020:	6a 01                	push   0x1
c0011022:	50                   	push   eax
c0011023:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	89 f0                	mov    eax,esi
c001102b:	83 c4 04             	add    esp,0x4
c001102e:	89 fa                	mov    edx,edi
c0011030:	5e                   	pop    esi
c0011031:	5f                   	pop    edi
c0011032:	c3                   	ret    
c0011033:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011038:	85 c0                	test   eax,eax
c001103a:	74 02                	je     c001103e <SysShutdown(regs*)+0x7f>
c001103c:	ff d0                	call   eax
c001103e:	31 f6                	xor    esi,esi
c0011040:	83 c4 04             	add    esp,0x4
c0011043:	89 f0                	mov    eax,esi
c0011045:	31 ff                	xor    edi,edi
c0011047:	5e                   	pop    esi
c0011048:	89 fa                	mov    edx,edi
c001104a:	5f                   	pop    edi
c001104b:	c3                   	ret    

c001104c <SysRealpath(regs*)>:
c001104c:	53                   	push   ebx
c001104d:	83 ec 08             	sub    esp,0x8
c0011050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011054:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011057:	85 c9                	test   ecx,ecx
c0011059:	74 37                	je     c0011092 <SysRealpath(regs*)+0x46>
c001105b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001105e:	31 d2                	xor    edx,edx
c0011060:	b8 01 00 00 00       	mov    eax,0x1
c0011065:	85 db                	test   ebx,ebx
c0011067:	75 05                	jne    c001106e <SysRealpath(regs*)+0x22>
c0011069:	83 c4 08             	add    esp,0x8
c001106c:	5b                   	pop    ebx
c001106d:	c3                   	ret    
c001106e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011073:	83 ec 04             	sub    esp,0x4
c0011076:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011079:	05 0c 01 00 00       	add    eax,0x10c
c001107e:	50                   	push   eax
c001107f:	51                   	push   ecx
c0011080:	53                   	push   ebx
c0011081:	e8 84 9c ff ff       	call   c000ad0a <Fs::standardiseFiles(char*, char const*, char const*)>
c0011086:	83 c4 10             	add    esp,0x10
c0011089:	31 c0                	xor    eax,eax
c001108b:	31 d2                	xor    edx,edx
c001108d:	83 c4 08             	add    esp,0x8
c0011090:	5b                   	pop    ebx
c0011091:	c3                   	ret    
c0011092:	b8 01 00 00 00       	mov    eax,0x1
c0011097:	31 d2                	xor    edx,edx
c0011099:	eb f2                	jmp    c001108d <SysRealpath(regs*)+0x41>

c001109b <SysReadDir(regs*)>:
c001109b:	53                   	push   ebx
c001109c:	83 ec 18             	sub    esp,0x18
c001109f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00110a6:	83 f8 02             	cmp    eax,0x2
c00110a9:	76 4f                	jbe    c00110fa <SysReadDir(regs*)+0x5f>
c00110ab:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00110b2:	77 52                	ja     c0011106 <SysReadDir(regs*)+0x6b>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	50                   	push   eax
c00110b8:	e8 da 83 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c00110bd:	83 c4 10             	add    esp,0x10
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 42                	je     c0011106 <SysReadDir(regs*)+0x6b>
c00110c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110cc:	83 ec 0c             	sub    esp,0xc
c00110cf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00110d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00110d5:	51                   	push   ecx
c00110d6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00110d9:	51                   	push   ecx
c00110da:	6a 00                	push   0x0
c00110dc:	68 10 01 00 00       	push   0x110
c00110e1:	50                   	push   eax
c00110e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110e5:	83 c4 20             	add    esp,0x20
c00110e8:	85 c0                	test   eax,eax
c00110ea:	89 c1                	mov    ecx,eax
c00110ec:	74 27                	je     c0011115 <SysReadDir(regs*)+0x7a>
c00110ee:	31 d2                	xor    edx,edx
c00110f0:	83 f9 07             	cmp    ecx,0x7
c00110f3:	b8 02 00 00 00       	mov    eax,0x2
c00110f8:	75 16                	jne    c0011110 <SysReadDir(regs*)+0x75>
c00110fa:	b8 01 00 00 00       	mov    eax,0x1
c00110ff:	31 d2                	xor    edx,edx
c0011101:	83 c4 18             	add    esp,0x18
c0011104:	5b                   	pop    ebx
c0011105:	c3                   	ret    
c0011106:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001110b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011110:	83 c4 18             	add    esp,0x18
c0011113:	5b                   	pop    ebx
c0011114:	c3                   	ret    
c0011115:	31 c0                	xor    eax,eax
c0011117:	31 d2                	xor    edx,edx
c0011119:	eb e6                	jmp    c0011101 <SysReadDir(regs*)+0x66>

c001111b <SysIsATTY(regs*)>:
c001111b:	83 ec 0c             	sub    esp,0xc
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011125:	83 f8 02             	cmp    eax,0x2
c0011128:	76 07                	jbe    c0011131 <SysIsATTY(regs*)+0x16>
c001112a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001112f:	75 26                	jne    c0011157 <SysIsATTY(regs*)+0x3c>
c0011131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011136:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011139:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001113f:	85 c0                	test   eax,eax
c0011141:	74 24                	je     c0011167 <SysIsATTY(regs*)+0x4c>
c0011143:	8b 10                	mov    edx,DWORD PTR [eax]
c0011145:	83 ec 0c             	sub    esp,0xc
c0011148:	50                   	push   eax
c0011149:	ff 12                	call   DWORD PTR [edx]
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	31 d2                	xor    edx,edx
c0011150:	83 c4 0c             	add    esp,0xc
c0011153:	0f b6 c0             	movzx  eax,al
c0011156:	c3                   	ret    
c0011157:	83 ec 0c             	sub    esp,0xc
c001115a:	50                   	push   eax
c001115b:	e8 37 83 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011160:	83 c4 10             	add    esp,0x10
c0011163:	85 c0                	test   eax,eax
c0011165:	75 dc                	jne    c0011143 <SysIsATTY(regs*)+0x28>
c0011167:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001116c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011171:	83 c4 0c             	add    esp,0xc
c0011174:	c3                   	ret    

c0011175 <SysSeek(regs*)>:
c0011175:	56                   	push   esi
c0011176:	53                   	push   ebx
c0011177:	83 ec 04             	sub    esp,0x4
c001117a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001117e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011181:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011184:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c001118a:	77 33                	ja     c00111bf <SysSeek(regs*)+0x4a>
c001118c:	83 ec 0c             	sub    esp,0xc
c001118f:	51                   	push   ecx
c0011190:	e8 02 83 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011195:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011198:	83 c4 0c             	add    esp,0xc
c001119b:	31 db                	xor    ebx,ebx
c001119d:	53                   	push   ebx
c001119e:	51                   	push   ecx
c001119f:	50                   	push   eax
c00111a0:	e8 bb 9e ff ff       	call   c000b060 <File::seek(unsigned long long)>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	85 c0                	test   eax,eax
c00111aa:	0f 95 c0             	setne  al
c00111ad:	31 d2                	xor    edx,edx
c00111af:	0f b6 c0             	movzx  eax,al
c00111b2:	f7 d8                	neg    eax
c00111b4:	83 d2 00             	adc    edx,0x0
c00111b7:	83 c4 04             	add    esp,0x4
c00111ba:	5b                   	pop    ebx
c00111bb:	f7 da                	neg    edx
c00111bd:	5e                   	pop    esi
c00111be:	c3                   	ret    
c00111bf:	83 c4 04             	add    esp,0x4
c00111c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111c7:	5b                   	pop    ebx
c00111c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111cd:	5e                   	pop    esi
c00111ce:	c3                   	ret    

c00111cf <SysTell(regs*)>:
c00111cf:	53                   	push   ebx
c00111d0:	83 ec 08             	sub    esp,0x8
c00111d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111da:	83 f8 02             	cmp    eax,0x2
c00111dd:	76 4e                	jbe    c001122d <SysTell(regs*)+0x5e>
c00111df:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111e4:	76 19                	jbe    c00111ff <SysTell(regs*)+0x30>
c00111e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111e9:	31 d2                	xor    edx,edx
c00111eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00111f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111f8:	83 c4 08             	add    esp,0x8
c00111fb:	31 c0                	xor    eax,eax
c00111fd:	5b                   	pop    ebx
c00111fe:	c3                   	ret    
c00111ff:	83 ec 0c             	sub    esp,0xc
c0011202:	50                   	push   eax
c0011203:	e8 8f 82 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011208:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001120b:	5a                   	pop    edx
c001120c:	59                   	pop    ecx
c001120d:	53                   	push   ebx
c001120e:	50                   	push   eax
c001120f:	e8 a2 9e ff ff       	call   c000b0b6 <File::tell(unsigned long long*)>
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	85 c0                	test   eax,eax
c0011219:	0f 95 c0             	setne  al
c001121c:	31 d2                	xor    edx,edx
c001121e:	0f b6 c0             	movzx  eax,al
c0011221:	f7 d8                	neg    eax
c0011223:	83 d2 00             	adc    edx,0x0
c0011226:	83 c4 08             	add    esp,0x8
c0011229:	5b                   	pop    ebx
c001122a:	f7 da                	neg    edx
c001122c:	c3                   	ret    
c001122d:	83 c4 08             	add    esp,0x8
c0011230:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011235:	5b                   	pop    ebx
c0011236:	ba ff ff ff ff       	mov    edx,0xffffffff
c001123b:	c3                   	ret    

c001123c <SysSize(regs*)>:
c001123c:	53                   	push   ebx
c001123d:	83 ec 18             	sub    esp,0x18
c0011240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011244:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011247:	83 f8 02             	cmp    eax,0x2
c001124a:	76 54                	jbe    c00112a0 <SysSize(regs*)+0x64>
c001124c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011251:	76 19                	jbe    c001126c <SysSize(regs*)+0x30>
c0011253:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011256:	31 d2                	xor    edx,edx
c0011258:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001125e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011265:	83 c4 18             	add    esp,0x18
c0011268:	31 c0                	xor    eax,eax
c001126a:	5b                   	pop    ebx
c001126b:	c3                   	ret    
c001126c:	83 ec 0c             	sub    esp,0xc
c001126f:	50                   	push   eax
c0011270:	e8 22 82 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011275:	83 c4 0c             	add    esp,0xc
c0011278:	8d 54 24 13          	lea    edx,[esp+0x13]
c001127c:	52                   	push   edx
c001127d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011280:	52                   	push   edx
c0011281:	50                   	push   eax
c0011282:	e8 c7 9f ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c0011287:	83 c4 10             	add    esp,0x10
c001128a:	85 c0                	test   eax,eax
c001128c:	0f 95 c0             	setne  al
c001128f:	31 d2                	xor    edx,edx
c0011291:	0f b6 c0             	movzx  eax,al
c0011294:	f7 d8                	neg    eax
c0011296:	83 d2 00             	adc    edx,0x0
c0011299:	83 c4 18             	add    esp,0x18
c001129c:	5b                   	pop    ebx
c001129d:	f7 da                	neg    edx
c001129f:	c3                   	ret    
c00112a0:	83 c4 18             	add    esp,0x18
c00112a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112a8:	5b                   	pop    ebx
c00112a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ae:	c3                   	ret    

c00112af <SysSizeFromFilename(regs*)>:
c00112af:	57                   	push   edi
c00112b0:	56                   	push   esi
c00112b1:	53                   	push   ebx
c00112b2:	83 ec 10             	sub    esp,0x10
c00112b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112b9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00112bc:	83 fb 02             	cmp    ebx,0x2
c00112bf:	0f 86 83 00 00 00    	jbe    c0011348 <SysSizeFromFilename(regs*)+0x99>
c00112c5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00112cb:	76 1b                	jbe    c00112e8 <SysSizeFromFilename(regs*)+0x39>
c00112cd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112d0:	31 d2                	xor    edx,edx
c00112d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	31 c0                	xor    eax,eax
c00112e4:	5b                   	pop    ebx
c00112e5:	5e                   	pop    esi
c00112e6:	5f                   	pop    edi
c00112e7:	c3                   	ret    
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	68 14 01 00 00       	push   0x114
c00112f0:	e8 c2 67 ff ff       	call   c0007ab7 <malloc>
c00112f5:	83 c4 0c             	add    esp,0xc
c00112f8:	89 c7                	mov    edi,eax
c00112fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011302:	50                   	push   eax
c0011303:	53                   	push   ebx
c0011304:	57                   	push   edi
c0011305:	e8 dc 9b ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c001130a:	83 c4 0c             	add    esp,0xc
c001130d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011311:	50                   	push   eax
c0011312:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011315:	52                   	push   edx
c0011316:	57                   	push   edi
c0011317:	e8 32 9f ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c001131c:	83 c4 10             	add    esp,0x10
c001131f:	85 ff                	test   edi,edi
c0011321:	89 c3                	mov    ebx,eax
c0011323:	74 0c                	je     c0011331 <SysSizeFromFilename(regs*)+0x82>
c0011325:	8b 07                	mov    eax,DWORD PTR [edi]
c0011327:	83 ec 0c             	sub    esp,0xc
c001132a:	57                   	push   edi
c001132b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001132e:	83 c4 10             	add    esp,0x10
c0011331:	31 c0                	xor    eax,eax
c0011333:	85 db                	test   ebx,ebx
c0011335:	0f 95 c0             	setne  al
c0011338:	31 d2                	xor    edx,edx
c001133a:	f7 d8                	neg    eax
c001133c:	83 d2 00             	adc    edx,0x0
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	5b                   	pop    ebx
c0011343:	f7 da                	neg    edx
c0011345:	5e                   	pop    esi
c0011346:	5f                   	pop    edi
c0011347:	c3                   	ret    
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011350:	5b                   	pop    ebx
c0011351:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011356:	5e                   	pop    esi
c0011357:	5f                   	pop    edi
c0011358:	c3                   	ret    

c0011359 <SysClose(regs*)>:
c0011359:	53                   	push   ebx
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011361:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011364:	83 f8 02             	cmp    eax,0x2
c0011367:	76 41                	jbe    c00113aa <SysClose(regs*)+0x51>
c0011369:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001136f:	83 fa 01             	cmp    edx,0x1
c0011372:	76 2d                	jbe    c00113a1 <SysClose(regs*)+0x48>
c0011374:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011379:	77 2f                	ja     c00113aa <SysClose(regs*)+0x51>
c001137b:	83 ec 0c             	sub    esp,0xc
c001137e:	50                   	push   eax
c001137f:	e8 13 81 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011384:	89 04 24             	mov    DWORD PTR [esp],eax
c0011387:	89 c3                	mov    ebx,eax
c0011389:	e8 72 9c ff ff       	call   c000b000 <File::close()>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	85 db                	test   ebx,ebx
c0011393:	74 0c                	je     c00113a1 <SysClose(regs*)+0x48>
c0011395:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011397:	83 ec 0c             	sub    esp,0xc
c001139a:	53                   	push   ebx
c001139b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	83 c4 08             	add    esp,0x8
c00113a4:	31 c0                	xor    eax,eax
c00113a6:	5b                   	pop    ebx
c00113a7:	31 d2                	xor    edx,edx
c00113a9:	c3                   	ret    
c00113aa:	83 c4 08             	add    esp,0x8
c00113ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113b2:	5b                   	pop    ebx
c00113b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113b8:	c3                   	ret    

c00113b9 <SysOpenDir(regs*)>:
c00113b9:	56                   	push   esi
c00113ba:	53                   	push   ebx
c00113bb:	83 ec 04             	sub    esp,0x4
c00113be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113c2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113c5:	85 c9                	test   ecx,ecx
c00113c7:	74 5d                	je     c0011426 <SysOpenDir(regs*)+0x6d>
c00113c9:	83 ec 0c             	sub    esp,0xc
c00113cc:	68 14 01 00 00       	push   0x114
c00113d1:	e8 e1 66 ff ff       	call   c0007ab7 <malloc>
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	89 c6                	mov    esi,eax
c00113db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113e3:	50                   	push   eax
c00113e4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113e7:	52                   	push   edx
c00113e8:	56                   	push   esi
c00113e9:	e8 1e a0 ff ff       	call   c000b40c <Directory::Directory(char const*, Process*)>
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	85 f6                	test   esi,esi
c00113f3:	74 31                	je     c0011426 <SysOpenDir(regs*)+0x6d>
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	56                   	push   esi
c00113f9:	e8 ca a0 ff ff       	call   c000b4c8 <Directory::open()>
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	85 c0                	test   eax,eax
c0011403:	75 21                	jne    c0011426 <SysOpenDir(regs*)+0x6d>
c0011405:	83 ec 0c             	sub    esp,0xc
c0011408:	56                   	push   esi
c0011409:	e8 8c 7d ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c001140e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011411:	83 c4 10             	add    esp,0x10
c0011414:	89 02                	mov    DWORD PTR [edx],eax
c0011416:	c1 f8 1f             	sar    eax,0x1f
c0011419:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001141c:	83 c4 04             	add    esp,0x4
c001141f:	31 c0                	xor    eax,eax
c0011421:	5b                   	pop    ebx
c0011422:	31 d2                	xor    edx,edx
c0011424:	5e                   	pop    esi
c0011425:	c3                   	ret    
c0011426:	83 c4 04             	add    esp,0x4
c0011429:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001142e:	5b                   	pop    ebx
c001142f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011434:	5e                   	pop    esi
c0011435:	c3                   	ret    

c0011436 <SysMakeDir(regs*)>:
c0011436:	56                   	push   esi
c0011437:	53                   	push   ebx
c0011438:	83 ec 10             	sub    esp,0x10
c001143b:	68 14 01 00 00       	push   0x114
c0011440:	e8 72 66 ff ff       	call   c0007ab7 <malloc>
c0011445:	83 c4 0c             	add    esp,0xc
c0011448:	89 c3                	mov    ebx,eax
c001144a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001144f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011452:	50                   	push   eax
c0011453:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011457:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001145a:	52                   	push   edx
c001145b:	53                   	push   ebx
c001145c:	e8 ab 9f ff ff       	call   c000b40c <Directory::Directory(char const*, Process*)>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	85 db                	test   ebx,ebx
c0011466:	74 2c                	je     c0011494 <SysMakeDir(regs*)+0x5e>
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	53                   	push   ebx
c001146c:	e8 37 a2 ff ff       	call   c000b6a8 <Directory::create()>
c0011471:	89 c6                	mov    esi,eax
c0011473:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011475:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011478:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	31 c0                	xor    eax,eax
c0011480:	85 f6                	test   esi,esi
c0011482:	0f 95 c0             	setne  al
c0011485:	31 d2                	xor    edx,edx
c0011487:	f7 d8                	neg    eax
c0011489:	83 d2 00             	adc    edx,0x0
c001148c:	83 c4 04             	add    esp,0x4
c001148f:	5b                   	pop    ebx
c0011490:	f7 da                	neg    edx
c0011492:	5e                   	pop    esi
c0011493:	c3                   	ret    
c0011494:	83 c4 04             	add    esp,0x4
c0011497:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001149c:	5b                   	pop    ebx
c001149d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a2:	5e                   	pop    esi
c00114a3:	c3                   	ret    

c00114a4 <SysCloseDir(regs*)>:
c00114a4:	53                   	push   ebx
c00114a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114aa:	83 ec 08             	sub    esp,0x8
c00114ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00114b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b9:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00114bc:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00114c2:	77 2a                	ja     c00114ee <SysCloseDir(regs*)+0x4a>
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	51                   	push   ecx
c00114c8:	e8 ca 7f ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c00114cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00114d0:	89 c3                	mov    ebx,eax
c00114d2:	e8 4d a0 ff ff       	call   c000b524 <Directory::close()>
c00114d7:	83 c4 10             	add    esp,0x10
c00114da:	85 db                	test   ebx,ebx
c00114dc:	74 0c                	je     c00114ea <SysCloseDir(regs*)+0x46>
c00114de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e0:	83 ec 0c             	sub    esp,0xc
c00114e3:	53                   	push   ebx
c00114e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	31 c0                	xor    eax,eax
c00114ec:	31 d2                	xor    edx,edx
c00114ee:	83 c4 08             	add    esp,0x8
c00114f1:	5b                   	pop    ebx
c00114f2:	c3                   	ret    

c00114f3 <SysWait(regs*)>:
c00114f3:	83 ec 10             	sub    esp,0x10
c00114f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114fa:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00114fd:	52                   	push   edx
c00114fe:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011501:	51                   	push   ecx
c0011502:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011505:	50                   	push   eax
c0011506:	e8 e5 3c 00 00       	call   c00151f0 <waitTask(int, int*, int)>
c001150b:	83 c4 1c             	add    esp,0x1c
c001150e:	89 c2                	mov    edx,eax
c0011510:	c1 fa 1f             	sar    edx,0x1f
c0011513:	c3                   	ret    

c0011514 <SysNotImpl(regs*)>:
c0011514:	83 ec 18             	sub    esp,0x18
c0011517:	68 be 0c 02 c0       	push   0xc0020cbe
c001151c:	e8 a0 f2 ff ff       	call   c00107c1 <KePanic(char const*)>
c0011521:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011526:	ba ff ff ff ff       	mov    edx,0xffffffff
c001152b:	83 c4 1c             	add    esp,0x1c
c001152e:	c3                   	ret    

c001152f <SysPanic(regs*)>:
c001152f:	83 ec 18             	sub    esp,0x18
c0011532:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011536:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011539:	50                   	push   eax
c001153a:	e8 82 f2 ff ff       	call   c00107c1 <KePanic(char const*)>
c001153f:	b8 01 00 00 00       	mov    eax,0x1
c0011544:	31 d2                	xor    edx,edx
c0011546:	83 c4 1c             	add    esp,0x1c
c0011549:	c3                   	ret    

c001154a <SysRmdir(regs*)>:
c001154a:	56                   	push   esi
c001154b:	53                   	push   ebx
c001154c:	83 ec 10             	sub    esp,0x10
c001154f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011553:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011556:	68 14 01 00 00       	push   0x114
c001155b:	e8 57 65 ff ff       	call   c0007ab7 <malloc>
c0011560:	83 c4 0c             	add    esp,0xc
c0011563:	89 c3                	mov    ebx,eax
c0011565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001156a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001156d:	50                   	push   eax
c001156e:	56                   	push   esi
c001156f:	53                   	push   ebx
c0011570:	e8 71 99 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0011575:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011578:	e8 9d 9b ff ff       	call   c000b11a <File::unlink()>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	85 db                	test   ebx,ebx
c0011582:	89 c6                	mov    esi,eax
c0011584:	74 0c                	je     c0011592 <SysRmdir(regs*)+0x48>
c0011586:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	53                   	push   ebx
c001158c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	31 c0                	xor    eax,eax
c0011594:	85 f6                	test   esi,esi
c0011596:	0f 95 c0             	setne  al
c0011599:	31 d2                	xor    edx,edx
c001159b:	f7 d8                	neg    eax
c001159d:	83 d2 00             	adc    edx,0x0
c00115a0:	83 c4 04             	add    esp,0x4
c00115a3:	5b                   	pop    ebx
c00115a4:	f7 da                	neg    edx
c00115a6:	5e                   	pop    esi
c00115a7:	c3                   	ret    

c00115a8 <SysUnlink(regs*)>:
c00115a8:	56                   	push   esi
c00115a9:	53                   	push   ebx
c00115aa:	83 ec 10             	sub    esp,0x10
c00115ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115b1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115b4:	68 14 01 00 00       	push   0x114
c00115b9:	e8 f9 64 ff ff       	call   c0007ab7 <malloc>
c00115be:	83 c4 0c             	add    esp,0xc
c00115c1:	89 c3                	mov    ebx,eax
c00115c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115cb:	50                   	push   eax
c00115cc:	56                   	push   esi
c00115cd:	53                   	push   ebx
c00115ce:	e8 13 99 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c00115d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115d6:	e8 3f 9b ff ff       	call   c000b11a <File::unlink()>
c00115db:	83 c4 10             	add    esp,0x10
c00115de:	85 db                	test   ebx,ebx
c00115e0:	89 c6                	mov    esi,eax
c00115e2:	74 0c                	je     c00115f0 <SysUnlink(regs*)+0x48>
c00115e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e6:	83 ec 0c             	sub    esp,0xc
c00115e9:	53                   	push   ebx
c00115ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115ed:	83 c4 10             	add    esp,0x10
c00115f0:	31 c0                	xor    eax,eax
c00115f2:	85 f6                	test   esi,esi
c00115f4:	0f 95 c0             	setne  al
c00115f7:	31 d2                	xor    edx,edx
c00115f9:	f7 d8                	neg    eax
c00115fb:	83 d2 00             	adc    edx,0x0
c00115fe:	83 c4 04             	add    esp,0x4
c0011601:	5b                   	pop    ebx
c0011602:	f7 da                	neg    edx
c0011604:	5e                   	pop    esi
c0011605:	c3                   	ret    

c0011606 <SysGetArgv(regs*)>:
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001160d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011610:	85 c0                	test   eax,eax
c0011612:	78 2c                	js     c0011640 <SysGetArgv(regs*)+0x3a>
c0011614:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001161a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001161d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011623:	7d 1b                	jge    c0011640 <SysGetArgv(regs*)+0x3a>
c0011625:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001162c:	85 c0                	test   eax,eax
c001162e:	74 18                	je     c0011648 <SysGetArgv(regs*)+0x42>
c0011630:	83 ec 08             	sub    esp,0x8
c0011633:	50                   	push   eax
c0011634:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011637:	50                   	push   eax
c0011638:	e8 13 f0 fe ff       	call   c0000650 <strcpy>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	31 c0                	xor    eax,eax
c0011642:	31 d2                	xor    edx,edx
c0011644:	83 c4 0c             	add    esp,0xc
c0011647:	c3                   	ret    
c0011648:	b8 01 00 00 00       	mov    eax,0x1
c001164d:	31 d2                	xor    edx,edx
c001164f:	83 c4 0c             	add    esp,0xc
c0011652:	c3                   	ret    

c0011653 <SysUSleep(regs*)>:
c0011653:	83 ec 1c             	sub    esp,0x1c
c0011656:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001165a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001165d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011660:	6a 00                	push   0x0
c0011662:	6a 64                	push   0x64
c0011664:	52                   	push   edx
c0011665:	50                   	push   eax
c0011666:	e8 15 cf 00 00       	call   c001e580 <__udivdi3>
c001166b:	83 c4 14             	add    esp,0x14
c001166e:	50                   	push   eax
c001166f:	e8 60 3c 00 00       	call   c00152d4 <milliTenthSleep(unsigned int)>
c0011674:	31 c0                	xor    eax,eax
c0011676:	31 d2                	xor    edx,edx
c0011678:	83 c4 1c             	add    esp,0x1c
c001167b:	c3                   	ret    

c001167c <SysSpawn(regs*)>:
c001167c:	56                   	push   esi
c001167d:	53                   	push   ebx
c001167e:	83 ec 04             	sub    esp,0x4
c0011681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011685:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011688:	85 f6                	test   esi,esi
c001168a:	75 0a                	jne    c0011696 <SysSpawn(regs*)+0x1a>
c001168c:	83 c4 04             	add    esp,0x4
c001168f:	31 c0                	xor    eax,eax
c0011691:	5b                   	pop    ebx
c0011692:	31 d2                	xor    edx,edx
c0011694:	5e                   	pop    esi
c0011695:	c3                   	ret    
c0011696:	83 ec 0c             	sub    esp,0xc
c0011699:	68 24 07 00 00       	push   0x724
c001169e:	e8 14 64 ff ff       	call   c0007ab7 <malloc>
c00116a3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00116a6:	83 c4 10             	add    esp,0x10
c00116a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116ac:	89 c6                	mov    esi,eax
c00116ae:	31 c0                	xor    eax,eax
c00116b0:	85 c9                	test   ecx,ecx
c00116b2:	75 08                	jne    c00116bc <SysSpawn(regs*)+0x40>
c00116b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116bc:	52                   	push   edx
c00116bd:	50                   	push   eax
c00116be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116c1:	50                   	push   eax
c00116c2:	56                   	push   esi
c00116c3:	e8 78 32 00 00       	call   c0014940 <Process::Process(char const*, Process*, char**)>
c00116c8:	83 c4 10             	add    esp,0x10
c00116cb:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00116d2:	75 b8                	jne    c001168c <SysSpawn(regs*)+0x10>
c00116d4:	83 ec 0c             	sub    esp,0xc
c00116d7:	56                   	push   esi
c00116d8:	e8 97 37 00 00       	call   c0014e74 <Process::createUserThread()>
c00116dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	83 c4 04             	add    esp,0x4
c00116e5:	5b                   	pop    ebx
c00116e6:	89 c2                	mov    edx,eax
c00116e8:	c1 fa 1f             	sar    edx,0x1f
c00116eb:	5e                   	pop    esi
c00116ec:	c3                   	ret    

c00116ed <SysGetEnv(regs*)>:
c00116ed:	57                   	push   edi
c00116ee:	56                   	push   esi
c00116ef:	53                   	push   ebx
c00116f0:	83 ec 1c             	sub    esp,0x1c
c00116f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00116fc:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00116ff:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011702:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011705:	51                   	push   ecx
c0011706:	e8 6e ef ff ff       	call   c0010679 <Krnl::getProcessTotalEnvCount(Process*)>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	39 c7                	cmp    edi,eax
c0011710:	7c 12                	jl     c0011724 <SysGetEnv(regs*)+0x37>
c0011712:	31 c0                	xor    eax,eax
c0011714:	31 d2                	xor    edx,edx
c0011716:	85 f6                	test   esi,esi
c0011718:	74 03                	je     c001171d <SysGetEnv(regs*)+0x30>
c001171a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	5b                   	pop    ebx
c0011721:	5e                   	pop    esi
c0011722:	5f                   	pop    edi
c0011723:	c3                   	ret    
c0011724:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011728:	83 ec 04             	sub    esp,0x4
c001172b:	57                   	push   edi
c001172c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011732:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011735:	57                   	push   edi
c0011736:	50                   	push   eax
c0011737:	e8 5d ef ff ff       	call   c0010699 <Krnl::getProcessEnvPair(Process*, int)>
c001173c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001173f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011743:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011747:	83 c4 0c             	add    esp,0xc
c001174a:	85 d2                	test   edx,edx
c001174c:	75 23                	jne    c0011771 <SysGetEnv(regs*)+0x84>
c001174e:	83 ec 0c             	sub    esp,0xc
c0011751:	50                   	push   eax
c0011752:	e8 29 ee fe ff       	call   c0000580 <strlen>
c0011757:	89 3c 24             	mov    DWORD PTR [esp],edi
c001175a:	89 c3                	mov    ebx,eax
c001175c:	e8 1f ee fe ff       	call   c0000580 <strlen>
c0011761:	83 c4 10             	add    esp,0x10
c0011764:	31 d2                	xor    edx,edx
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001176d:	5b                   	pop    ebx
c001176e:	5e                   	pop    esi
c001176f:	5f                   	pop    edi
c0011770:	c3                   	ret    
c0011771:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011774:	83 ec 08             	sub    esp,0x8
c0011777:	50                   	push   eax
c0011778:	56                   	push   esi
c0011779:	e8 d2 ee fe ff       	call   c0000650 <strcpy>
c001177e:	58                   	pop    eax
c001177f:	5a                   	pop    edx
c0011780:	68 d8 0c 02 c0       	push   0xc0020cd8
c0011785:	56                   	push   esi
c0011786:	e8 e5 f0 fe ff       	call   c0000870 <strcat>
c001178b:	59                   	pop    ecx
c001178c:	5b                   	pop    ebx
c001178d:	57                   	push   edi
c001178e:	56                   	push   esi
c001178f:	e8 dc f0 fe ff       	call   c0000870 <strcat>
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	31 c0                	xor    eax,eax
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	31 d2                	xor    edx,edx
c001179e:	5b                   	pop    ebx
c001179f:	5e                   	pop    esi
c00117a0:	5f                   	pop    edi
c00117a1:	c3                   	ret    

c00117a2 <SysSetFatAttrib(regs*)>:
c00117a2:	57                   	push   edi
c00117a3:	56                   	push   esi
c00117a4:	53                   	push   ebx
c00117a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117a9:	83 ec 0c             	sub    esp,0xc
c00117ac:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00117af:	68 14 01 00 00       	push   0x114
c00117b4:	e8 fe 62 ff ff       	call   c0007ab7 <malloc>
c00117b9:	83 c4 0c             	add    esp,0xc
c00117bc:	89 c3                	mov    ebx,eax
c00117be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117c6:	50                   	push   eax
c00117c7:	57                   	push   edi
c00117c8:	53                   	push   ebx
c00117c9:	e8 18 97 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c00117ce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00117d1:	83 c4 0c             	add    esp,0xc
c00117d4:	0f b6 d4             	movzx  edx,ah
c00117d7:	0f b6 c0             	movzx  eax,al
c00117da:	52                   	push   edx
c00117db:	50                   	push   eax
c00117dc:	53                   	push   ebx
c00117dd:	e8 d2 99 ff ff       	call   c000b1b4 <File::chfatattr(unsigned char, unsigned char)>
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	85 db                	test   ebx,ebx
c00117e7:	89 c6                	mov    esi,eax
c00117e9:	74 0c                	je     c00117f7 <SysSetFatAttrib(regs*)+0x55>
c00117eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117ed:	83 ec 0c             	sub    esp,0xc
c00117f0:	53                   	push   ebx
c00117f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	5b                   	pop    ebx
c00117f8:	31 c0                	xor    eax,eax
c00117fa:	85 f6                	test   esi,esi
c00117fc:	0f 95 c0             	setne  al
c00117ff:	31 d2                	xor    edx,edx
c0011801:	5e                   	pop    esi
c0011802:	f7 d8                	neg    eax
c0011804:	83 d2 00             	adc    edx,0x0
c0011807:	f7 da                	neg    edx
c0011809:	5f                   	pop    edi
c001180a:	c3                   	ret    

c001180b <SysPipe(regs*)>:
c001180b:	57                   	push   edi
c001180c:	56                   	push   esi
c001180d:	53                   	push   ebx
c001180e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011812:	83 ec 0c             	sub    esp,0xc
c0011815:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011818:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001181b:	6a 20                	push   0x20
c001181d:	e8 95 62 ff ff       	call   c0007ab7 <malloc>
c0011822:	89 c3                	mov    ebx,eax
c0011824:	58                   	pop    eax
c0011825:	5a                   	pop    edx
c0011826:	68 00 50 00 00       	push   0x5000
c001182b:	53                   	push   ebx
c001182c:	e8 e3 6b ff ff       	call   c0008414 <Pipe::Pipe(int)>
c0011831:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011834:	e8 61 79 ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c0011839:	89 07                	mov    DWORD PTR [edi],eax
c001183b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001183e:	e8 57 79 ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	31 d2                	xor    edx,edx
c0011848:	89 06                	mov    DWORD PTR [esi],eax
c001184a:	31 c0                	xor    eax,eax
c001184c:	5b                   	pop    ebx
c001184d:	5e                   	pop    esi
c001184e:	5f                   	pop    edi
c001184f:	c3                   	ret    

c0011850 <SysGetUnixTime(regs*)>:
c0011850:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011855:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001185b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001185f:	e9 8a a0 ff ff       	jmp    c000b8ee <Clock::timeInSecondsLocal()>

c0011864 <string_ends_with(char const*, char const*)>:
c0011864:	57                   	push   edi
c0011865:	56                   	push   esi
c0011866:	53                   	push   ebx
c0011867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011872:	53                   	push   ebx
c0011873:	e8 08 ed fe ff       	call   c0000580 <strlen>
c0011878:	89 3c 24             	mov    DWORD PTR [esp],edi
c001187b:	89 c6                	mov    esi,eax
c001187d:	e8 fe ec fe ff       	call   c0000580 <strlen>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	31 d2                	xor    edx,edx
c0011887:	39 c6                	cmp    esi,eax
c0011889:	7d 06                	jge    c0011891 <string_ends_with(char const*, char const*)+0x2d>
c001188b:	5b                   	pop    ebx
c001188c:	89 d0                	mov    eax,edx
c001188e:	5e                   	pop    esi
c001188f:	5f                   	pop    edi
c0011890:	c3                   	ret    
c0011891:	83 ec 08             	sub    esp,0x8
c0011894:	29 c6                	sub    esi,eax
c0011896:	57                   	push   edi
c0011897:	01 f3                	add    ebx,esi
c0011899:	53                   	push   ebx
c001189a:	e8 e1 ee fe ff       	call   c0000780 <strcmp>
c001189f:	83 c4 10             	add    esp,0x10
c00118a2:	31 d2                	xor    edx,edx
c00118a4:	5b                   	pop    ebx
c00118a5:	5e                   	pop    esi
c00118a6:	85 c0                	test   eax,eax
c00118a8:	5f                   	pop    edi
c00118a9:	0f 94 c2             	sete   dl
c00118ac:	89 d0                	mov    eax,edx
c00118ae:	c3                   	ret    

c00118af <SysOpen(regs*)>:
c00118af:	56                   	push   esi
c00118b0:	53                   	push   ebx
c00118b1:	81 ec 04 01 00 00    	sub    esp,0x104
c00118b7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00118be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118c1:	85 c0                	test   eax,eax
c00118c3:	0f 84 c5 01 00 00    	je     c0011a8e <SysOpen(regs*)+0x1df>
c00118c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118cc:	85 c0                	test   eax,eax
c00118ce:	0f 84 ba 01 00 00    	je     c0011a8e <SysOpen(regs*)+0x1df>
c00118d4:	83 ec 04             	sub    esp,0x4
c00118d7:	68 da 0c 02 c0       	push   0xc0020cda
c00118dc:	50                   	push   eax
c00118dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00118e1:	56                   	push   esi
c00118e2:	e8 23 94 ff ff       	call   c000ad0a <Fs::standardiseFiles(char*, char const*, char const*)>
c00118e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00118ea:	e8 91 ec fe ff       	call   c0000580 <strlen>
c00118ef:	83 c4 10             	add    esp,0x10
c00118f2:	83 e8 01             	sub    eax,0x1
c00118f5:	74 29                	je     c0011920 <SysOpen(regs*)+0x71>
c00118f7:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00118fb:	83 fa 2e             	cmp    edx,0x2e
c00118fe:	74 1c                	je     c001191c <SysOpen(regs*)+0x6d>
c0011900:	83 fa 3a             	cmp    edx,0x3a
c0011903:	74 17                	je     c001191c <SysOpen(regs*)+0x6d>
c0011905:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011909:	83 e8 01             	sub    eax,0x1
c001190c:	74 12                	je     c0011920 <SysOpen(regs*)+0x71>
c001190e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011912:	83 fa 3a             	cmp    edx,0x3a
c0011915:	74 05                	je     c001191c <SysOpen(regs*)+0x6d>
c0011917:	83 fa 2e             	cmp    edx,0x2e
c001191a:	75 e9                	jne    c0011905 <SysOpen(regs*)+0x56>
c001191c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011920:	83 ec 08             	sub    esp,0x8
c0011923:	68 de 0c 02 c0       	push   0xc0020cde
c0011928:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001192b:	50                   	push   eax
c001192c:	e8 33 ff ff ff       	call   c0011864 <string_ends_with(char const*, char const*)>
c0011931:	83 c4 10             	add    esp,0x10
c0011934:	85 c0                	test   eax,eax
c0011936:	74 1d                	je     c0011955 <SysOpen(regs*)+0xa6>
c0011938:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001193b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011941:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011948:	81 c4 04 01 00 00    	add    esp,0x104
c001194e:	31 c0                	xor    eax,eax
c0011950:	5b                   	pop    ebx
c0011951:	31 d2                	xor    edx,edx
c0011953:	5e                   	pop    esi
c0011954:	c3                   	ret    
c0011955:	83 ec 08             	sub    esp,0x8
c0011958:	68 e3 0c 02 c0       	push   0xc0020ce3
c001195d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011960:	50                   	push   eax
c0011961:	e8 fe fe ff ff       	call   c0011864 <string_ends_with(char const*, char const*)>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	85 c0                	test   eax,eax
c001196b:	75 cb                	jne    c0011938 <SysOpen(regs*)+0x89>
c001196d:	83 ec 08             	sub    esp,0x8
c0011970:	68 df 0c 02 c0       	push   0xc0020cdf
c0011975:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011978:	50                   	push   eax
c0011979:	e8 02 ee fe ff       	call   c0000780 <strcmp>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	85 c0                	test   eax,eax
c0011983:	74 b3                	je     c0011938 <SysOpen(regs*)+0x89>
c0011985:	83 ec 08             	sub    esp,0x8
c0011988:	68 de 0c 02 c0       	push   0xc0020cde
c001198d:	56                   	push   esi
c001198e:	e8 d1 fe ff ff       	call   c0011864 <string_ends_with(char const*, char const*)>
c0011993:	83 c4 10             	add    esp,0x10
c0011996:	85 c0                	test   eax,eax
c0011998:	75 9e                	jne    c0011938 <SysOpen(regs*)+0x89>
c001199a:	83 ec 08             	sub    esp,0x8
c001199d:	68 e8 0c 02 c0       	push   0xc0020ce8
c00119a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119a5:	50                   	push   eax
c00119a6:	e8 b9 fe ff ff       	call   c0011864 <string_ends_with(char const*, char const*)>
c00119ab:	83 c4 10             	add    esp,0x10
c00119ae:	85 c0                	test   eax,eax
c00119b0:	0f 85 eb 00 00 00    	jne    c0011aa1 <SysOpen(regs*)+0x1f2>
c00119b6:	83 ec 08             	sub    esp,0x8
c00119b9:	68 ed 0c 02 c0       	push   0xc0020ced
c00119be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119c1:	50                   	push   eax
c00119c2:	e8 9d fe ff ff       	call   c0011864 <string_ends_with(char const*, char const*)>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	85 c0                	test   eax,eax
c00119cc:	0f 85 cf 00 00 00    	jne    c0011aa1 <SysOpen(regs*)+0x1f2>
c00119d2:	83 ec 08             	sub    esp,0x8
c00119d5:	68 e9 0c 02 c0       	push   0xc0020ce9
c00119da:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00119dd:	51                   	push   ecx
c00119de:	e8 9d ed fe ff       	call   c0000780 <strcmp>
c00119e3:	83 c4 10             	add    esp,0x10
c00119e6:	85 c0                	test   eax,eax
c00119e8:	0f 84 b3 00 00 00    	je     c0011aa1 <SysOpen(regs*)+0x1f2>
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	68 e8 0c 02 c0       	push   0xc0020ce8
c00119f6:	56                   	push   esi
c00119f7:	e8 68 fe ff ff       	call   c0011864 <string_ends_with(char const*, char const*)>
c00119fc:	83 c4 10             	add    esp,0x10
c00119ff:	85 c0                	test   eax,eax
c0011a01:	0f 85 9a 00 00 00    	jne    c0011aa1 <SysOpen(regs*)+0x1f2>
c0011a07:	83 ec 0c             	sub    esp,0xc
c0011a0a:	68 14 01 00 00       	push   0x114
c0011a0f:	e8 a3 60 ff ff       	call   c0007ab7 <malloc>
c0011a14:	83 c4 0c             	add    esp,0xc
c0011a17:	89 c6                	mov    esi,eax
c0011a19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a21:	50                   	push   eax
c0011a22:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011a25:	52                   	push   edx
c0011a26:	56                   	push   esi
c0011a27:	e8 ba 94 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	85 f6                	test   esi,esi
c0011a31:	74 5b                	je     c0011a8e <SysOpen(regs*)+0x1df>
c0011a33:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a36:	0f b6 c2             	movzx  eax,dl
c0011a39:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011a3c:	89 d0                	mov    eax,edx
c0011a3e:	83 e0 01             	and    eax,0x1
c0011a41:	f6 c2 02             	test   dl,0x2
c0011a44:	74 03                	je     c0011a49 <SysOpen(regs*)+0x19a>
c0011a46:	83 c8 02             	or     eax,0x2
c0011a49:	f6 c2 04             	test   dl,0x4
c0011a4c:	74 03                	je     c0011a51 <SysOpen(regs*)+0x1a2>
c0011a4e:	83 c8 04             	or     eax,0x4
c0011a51:	f6 c2 08             	test   dl,0x8
c0011a54:	74 03                	je     c0011a59 <SysOpen(regs*)+0x1aa>
c0011a56:	83 c8 0a             	or     eax,0xa
c0011a59:	80 e2 10             	and    dl,0x10
c0011a5c:	74 03                	je     c0011a61 <SysOpen(regs*)+0x1b2>
c0011a5e:	83 c8 12             	or     eax,0x12
c0011a61:	83 ec 08             	sub    esp,0x8
c0011a64:	50                   	push   eax
c0011a65:	56                   	push   esi
c0011a66:	e8 37 95 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0011a6b:	83 c4 10             	add    esp,0x10
c0011a6e:	85 c0                	test   eax,eax
c0011a70:	75 1c                	jne    c0011a8e <SysOpen(regs*)+0x1df>
c0011a72:	83 ec 0c             	sub    esp,0xc
c0011a75:	56                   	push   esi
c0011a76:	e8 1f 77 ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c0011a7b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011a7e:	83 c4 10             	add    esp,0x10
c0011a81:	89 02                	mov    DWORD PTR [edx],eax
c0011a83:	c1 f8 1f             	sar    eax,0x1f
c0011a86:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011a89:	e9 ba fe ff ff       	jmp    c0011948 <SysOpen(regs*)+0x99>
c0011a8e:	81 c4 04 01 00 00    	add    esp,0x104
c0011a94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a99:	5b                   	pop    ebx
c0011a9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a9f:	5e                   	pop    esi
c0011aa0:	c3                   	ret    
c0011aa1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aa4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011aaa:	e9 92 fe ff ff       	jmp    c0011941 <SysOpen(regs*)+0x92>

c0011aaf <KeSystemCall(regs*, void*)>:
c0011aaf:	53                   	push   ebx
c0011ab0:	83 ec 08             	sub    esp,0x8
c0011ab3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ab7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011aba:	83 f8 3b             	cmp    eax,0x3b
c0011abd:	77 16                	ja     c0011ad5 <KeSystemCall(regs*, void*)+0x26>
c0011abf:	8b 14 85 a0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf60]
c0011ac6:	85 d2                	test   edx,edx
c0011ac8:	74 0b                	je     c0011ad5 <KeSystemCall(regs*, void*)+0x26>
c0011aca:	83 ec 0c             	sub    esp,0xc
c0011acd:	53                   	push   ebx
c0011ace:	ff d2                	call   edx
c0011ad0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011ad3:	eb 0d                	jmp    c0011ae2 <KeSystemCall(regs*, void*)+0x33>
c0011ad5:	52                   	push   edx
c0011ad6:	52                   	push   edx
c0011ad7:	50                   	push   eax
c0011ad8:	68 f2 0c 02 c0       	push   0xc0020cf2
c0011add:	e8 5b 8e ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011aea:	83 c4 08             	add    esp,0x8
c0011aed:	31 d2                	xor    edx,edx
c0011aef:	5b                   	pop    ebx
c0011af0:	c3                   	ret    
c0011af1:	66 90                	xchg   ax,ax
c0011af3:	90                   	nop

c0011af4 <KeSwitchEndian16(unsigned short)>:
c0011af4:	83 ec 04             	sub    esp,0x4
c0011af7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011afb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011aff:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b03:	c1 f8 08             	sar    eax,0x8
c0011b06:	89 c2                	mov    edx,eax
c0011b08:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b0c:	c1 e0 08             	shl    eax,0x8
c0011b0f:	09 d0                	or     eax,edx
c0011b11:	83 c4 04             	add    esp,0x4
c0011b14:	c3                   	ret    
c0011b15:	8d 76 00             	lea    esi,[esi+0x0]

c0011b18 <KeSwitchEndian32(unsigned int)>:
c0011b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1c:	c1 e8 18             	shr    eax,0x18
c0011b1f:	89 c2                	mov    edx,eax
c0011b21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b25:	c1 e0 08             	shl    eax,0x8
c0011b28:	25 00 00 ff 00       	and    eax,0xff0000
c0011b2d:	09 c2                	or     edx,eax
c0011b2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b33:	c1 e8 08             	shr    eax,0x8
c0011b36:	25 00 ff 00 00       	and    eax,0xff00
c0011b3b:	09 c2                	or     edx,eax
c0011b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b41:	c1 e0 18             	shl    eax,0x18
c0011b44:	09 d0                	or     eax,edx
c0011b46:	c3                   	ret    
c0011b47:	90                   	nop

c0011b48 <EthernetCRC32(unsigned char*, int)>:
c0011b48:	83 ec 10             	sub    esp,0x10
c0011b4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011b50:	75 0a                	jne    c0011b5c <EthernetCRC32(unsigned char*, int)+0x14>
c0011b52:	b8 00 00 00 00       	mov    eax,0x0
c0011b57:	e9 8c 00 00 00       	jmp    c0011be8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011b5c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011b61:	7f 09                	jg     c0011b6c <EthernetCRC32(unsigned char*, int)+0x24>
c0011b63:	b8 00 00 00 00       	mov    eax,0x0
c0011b68:	eb 7e                	jmp    c0011be8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011b6a:	66 90                	xchg   ax,ax
c0011b6c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011b74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011b7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b80:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011b84:	7d 5a                	jge    c0011be0 <EthernetCRC32(unsigned char*, int)+0x98>
c0011b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b8e:	01 d0                	add    eax,edx
c0011b90:	8a 00                	mov    al,BYTE PTR [eax]
c0011b92:	0f b6 c0             	movzx  eax,al
c0011b95:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011b99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ba4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011ba9:	7f 2d                	jg     c0011bd8 <EthernetCRC32(unsigned char*, int)+0x90>
c0011bab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011baf:	83 e0 01             	and    eax,0x1
c0011bb2:	74 10                	je     c0011bc4 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb8:	d1 e8                	shr    eax,1
c0011bba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011bbf:	eb 0b                	jmp    c0011bcc <EthernetCRC32(unsigned char*, int)+0x84>
c0011bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0011bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc8:	d1 e8                	shr    eax,1
c0011bca:	66 90                	xchg   ax,ax
c0011bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bd0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011bd5:	eb cd                	jmp    c0011ba4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011bd7:	90                   	nop
c0011bd8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011bdd:	eb 9d                	jmp    c0011b7c <EthernetCRC32(unsigned char*, int)+0x34>
c0011bdf:	90                   	nop
c0011be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be4:	f7 d0                	not    eax
c0011be6:	66 90                	xchg   ax,ax
c0011be8:	83 c4 10             	add    esp,0x10
c0011beb:	c3                   	ret    

c0011bec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011bec:	83 ec 2c             	sub    esp,0x2c
c0011bef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bf3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c07:	0f b7 c0             	movzx  eax,ax
c0011c0a:	3d 06 08 00 00       	cmp    eax,0x806
c0011c0f:	75 13                	jne    c0011c24 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 06 0d 02 c0       	push   0xc0020d06
c0011c19:	e8 1f 8d ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0011c1e:	83 c4 10             	add    esp,0x10
c0011c21:	eb 25                	jmp    c0011c48 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c23:	90                   	nop
c0011c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c2b:	0f b7 c0             	movzx  eax,ax
c0011c2e:	3d 00 08 00 00       	cmp    eax,0x800
c0011c33:	75 13                	jne    c0011c48 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c35:	83 ec 0c             	sub    esp,0xc
c0011c38:	68 1c 0d 02 c0       	push   0xc0020d1c
c0011c3d:	e8 fb 8c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	8d 76 00             	lea    esi,[esi+0x0]
c0011c48:	90                   	nop
c0011c49:	83 c4 2c             	add    esp,0x2c
c0011c4c:	c3                   	ret    

c0011c4d <CmOpen(char const*)>:
c0011c4d:	57                   	push   edi
c0011c4e:	56                   	push   esi
c0011c4f:	53                   	push   ebx
c0011c50:	83 ec 1c             	sub    esp,0x1c
c0011c53:	6a 30                	push   0x30
c0011c55:	e8 5d 5e ff ff       	call   c0007ab7 <malloc>
c0011c5a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c61:	89 c3                	mov    ebx,eax
c0011c63:	e8 4f 5e ff ff       	call   c0007ab7 <malloc>
c0011c68:	83 c4 0c             	add    esp,0xc
c0011c6b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011c71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011c75:	89 c6                	mov    esi,eax
c0011c77:	50                   	push   eax
c0011c78:	e8 69 92 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0011c7d:	83 c4 0c             	add    esp,0xc
c0011c80:	89 33                	mov    DWORD PTR [ebx],esi
c0011c82:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011c86:	50                   	push   eax
c0011c87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011c8b:	50                   	push   eax
c0011c8c:	56                   	push   esi
c0011c8d:	e8 bc 95 ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c0011c92:	5a                   	pop    edx
c0011c93:	59                   	pop    ecx
c0011c94:	6a 01                	push   0x1
c0011c96:	ff 33                	push   DWORD PTR [ebx]
c0011c98:	e8 05 93 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0011c9d:	5e                   	pop    esi
c0011c9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ca2:	e8 10 5e ff ff       	call   c0007ab7 <malloc>
c0011ca7:	5a                   	pop    edx
c0011ca8:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011cac:	89 c7                	mov    edi,eax
c0011cae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cb0:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb2:	56                   	push   esi
c0011cb3:	57                   	push   edi
c0011cb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cb8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cbc:	50                   	push   eax
c0011cbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011cc0:	83 c4 14             	add    esp,0x14
c0011cc3:	ff 33                	push   DWORD PTR [ebx]
c0011cc5:	e8 36 93 ff ff       	call   c000b000 <File::close()>
c0011cca:	59                   	pop    ecx
c0011ccb:	58                   	pop    eax
c0011ccc:	6a 13                	push   0x13
c0011cce:	ff 33                	push   DWORD PTR [ebx]
c0011cd0:	e8 cd 92 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0011cd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cdc:	57                   	push   edi
c0011cdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ce1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ce5:	50                   	push   eax
c0011ce6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ce9:	83 c4 14             	add    esp,0x14
c0011cec:	57                   	push   edi
c0011ced:	e8 d5 5d ff ff       	call   c0007ac7 <free>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011cf8:	75 10                	jne    c0011d0a <CmOpen(char const*)+0xbd>
c0011cfa:	83 ec 0c             	sub    esp,0xc
c0011cfd:	68 31 0d 02 c0       	push   0xc0020d31
c0011d02:	e8 ba ea ff ff       	call   c00107c1 <KePanic(char const*)>
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	50                   	push   eax
c0011d0b:	6a 00                	push   0x0
c0011d0d:	6a 00                	push   0x0
c0011d0f:	ff 33                	push   DWORD PTR [ebx]
c0011d11:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d14:	e8 47 93 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0011d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d20:	57                   	push   edi
c0011d21:	6a 00                	push   0x0
c0011d23:	6a 2b                	push   0x2b
c0011d25:	50                   	push   eax
c0011d26:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d29:	83 c4 1c             	add    esp,0x1c
c0011d2c:	6a 00                	push   0x0
c0011d2e:	6a 00                	push   0x0
c0011d30:	ff 33                	push   DWORD PTR [ebx]
c0011d32:	e8 29 93 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0011d37:	83 c4 0c             	add    esp,0xc
c0011d3a:	6a 08                	push   0x8
c0011d3c:	68 42 0d 02 c0       	push   0xc0020d42
c0011d41:	57                   	push   edi
c0011d42:	e8 39 e6 fe ff       	call   c0000380 <memcmp>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	85 c0                	test   eax,eax
c0011d4c:	74 10                	je     c0011d5e <CmOpen(char const*)+0x111>
c0011d4e:	83 ec 0c             	sub    esp,0xc
c0011d51:	68 4b 0d 02 c0       	push   0xc0020d4b
c0011d56:	e8 66 ea ff ff       	call   c00107c1 <KePanic(char const*)>
c0011d5b:	83 c4 10             	add    esp,0x10
c0011d5e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011d62:	83 c4 10             	add    esp,0x10
c0011d65:	89 d8                	mov    eax,ebx
c0011d67:	5b                   	pop    ebx
c0011d68:	5e                   	pop    esi
c0011d69:	5f                   	pop    edi
c0011d6a:	c3                   	ret    

c0011d6b <CmClose(Reghive_Tag*)>:
c0011d6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d6f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011d73:	74 0b                	je     c0011d80 <CmClose(Reghive_Tag*)+0x15>
c0011d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d7b:	e9 80 92 ff ff       	jmp    c000b000 <File::close()>
c0011d80:	c3                   	ret    

c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011d81:	53                   	push   ebx
c0011d82:	83 ec 18             	sub    esp,0x18
c0011d85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d89:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011d8d:	74 29                	je     c0011db8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011d8f:	50                   	push   eax
c0011d90:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011d95:	99                   	cdq    
c0011d96:	52                   	push   edx
c0011d97:	50                   	push   eax
c0011d98:	ff 33                	push   DWORD PTR [ebx]
c0011d9a:	e8 c1 92 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0011d9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011da1:	5a                   	pop    edx
c0011da2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011da6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011da8:	51                   	push   ecx
c0011da9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dad:	6a 00                	push   0x0
c0011daf:	6a 2b                	push   0x2b
c0011db1:	50                   	push   eax
c0011db2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011db5:	83 c4 20             	add    esp,0x20
c0011db8:	83 c4 18             	add    esp,0x18
c0011dbb:	5b                   	pop    ebx
c0011dbc:	c3                   	ret    

c0011dbd <CmGetString(Reghive_Tag*, int, char*)>:
c0011dbd:	55                   	push   ebp
c0011dbe:	57                   	push   edi
c0011dbf:	56                   	push   esi
c0011dc0:	53                   	push   ebx
c0011dc1:	31 db                	xor    ebx,ebx
c0011dc3:	83 ec 70             	sub    esp,0x70
c0011dc6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011dca:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011dd1:	50                   	push   eax
c0011dd2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011dd9:	55                   	push   ebp
c0011dda:	e8 a2 ff ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ddf:	83 c4 10             	add    esp,0x10
c0011de2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011de7:	c1 e0 08             	shl    eax,0x8
c0011dea:	89 c2                	mov    edx,eax
c0011dec:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011df1:	09 d0                	or     eax,edx
c0011df3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011df8:	c1 e0 08             	shl    eax,0x8
c0011dfb:	09 d0                	or     eax,edx
c0011dfd:	74 25                	je     c0011e24 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011dff:	52                   	push   edx
c0011e00:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e04:	52                   	push   edx
c0011e05:	6b fb 0d             	imul   edi,ebx,0xd
c0011e08:	50                   	push   eax
c0011e09:	55                   	push   ebp
c0011e0a:	e8 72 ff ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e0f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e13:	b9 27 00 00 00       	mov    ecx,0x27
c0011e18:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	83 c3 03             	add    ebx,0x3
c0011e27:	83 fb 15             	cmp    ebx,0x15
c0011e2a:	75 b6                	jne    c0011de2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011e2c:	83 c4 6c             	add    esp,0x6c
c0011e2f:	5b                   	pop    ebx
c0011e30:	5e                   	pop    esi
c0011e31:	5f                   	pop    edi
c0011e32:	5d                   	pop    ebp
c0011e33:	c3                   	ret    

c0011e34 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011e34:	83 ec 40             	sub    esp,0x40
c0011e37:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e3b:	50                   	push   eax
c0011e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e44:	e8 38 ff ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e49:	83 c4 10             	add    esp,0x10
c0011e4c:	83 c8 ff             	or     eax,0xffffffff
c0011e4f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011e54:	75 19                	jne    c0011e6f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011e56:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e5b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011e60:	c1 e0 08             	shl    eax,0x8
c0011e63:	09 c2                	or     edx,eax
c0011e65:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011e6a:	c1 e0 10             	shl    eax,0x10
c0011e6d:	09 d0                	or     eax,edx
c0011e6f:	83 c4 3c             	add    esp,0x3c
c0011e72:	c3                   	ret    

c0011e73 <CmGetNext(Reghive_Tag*, int)>:
c0011e73:	83 ec 40             	sub    esp,0x40
c0011e76:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e7a:	50                   	push   eax
c0011e7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e83:	e8 f9 fe ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e88:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011e8d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011e92:	c1 e0 08             	shl    eax,0x8
c0011e95:	09 c2                	or     edx,eax
c0011e97:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011e9c:	83 c4 4c             	add    esp,0x4c
c0011e9f:	c1 e0 10             	shl    eax,0x10
c0011ea2:	09 d0                	or     eax,edx
c0011ea4:	c3                   	ret    

c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ea5:	53                   	push   ebx
c0011ea6:	83 ec 18             	sub    esp,0x18
c0011ea9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ead:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011eb1:	74 29                	je     c0011edc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011eb3:	50                   	push   eax
c0011eb4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011eb9:	99                   	cdq    
c0011eba:	52                   	push   edx
c0011ebb:	50                   	push   eax
c0011ebc:	ff 33                	push   DWORD PTR [ebx]
c0011ebe:	e8 9d 91 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0011ec3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ec5:	5a                   	pop    edx
c0011ec6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eca:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ecc:	51                   	push   ecx
c0011ecd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ed1:	6a 00                	push   0x0
c0011ed3:	6a 2b                	push   0x2b
c0011ed5:	50                   	push   eax
c0011ed6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ed9:	83 c4 20             	add    esp,0x20
c0011edc:	83 c4 18             	add    esp,0x18
c0011edf:	5b                   	pop    ebx
c0011ee0:	c3                   	ret    

c0011ee1 <CmFreeExtent(Reghive_Tag*, int)>:
c0011ee1:	53                   	push   ebx
c0011ee2:	83 ec 3c             	sub    esp,0x3c
c0011ee5:	6a 2b                	push   0x2b
c0011ee7:	6a 00                	push   0x0
c0011ee9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011eed:	53                   	push   ebx
c0011eee:	e8 fd e5 fe ff       	call   c00004f0 <memset>
c0011ef3:	83 c4 0c             	add    esp,0xc
c0011ef6:	53                   	push   ebx
c0011ef7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eff:	e8 a1 ff ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f04:	83 c4 48             	add    esp,0x48
c0011f07:	5b                   	pop    ebx
c0011f08:	c3                   	ret    

c0011f09 <CmUpdateHeader(Reghive_Tag*)>:
c0011f09:	83 ec 0c             	sub    esp,0xc
c0011f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f10:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f14:	74 10                	je     c0011f26 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f16:	52                   	push   edx
c0011f17:	8d 50 05             	lea    edx,[eax+0x5]
c0011f1a:	52                   	push   edx
c0011f1b:	6a 00                	push   0x0
c0011f1d:	50                   	push   eax
c0011f1e:	e8 82 ff ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	83 c4 0c             	add    esp,0xc
c0011f29:	c3                   	ret    

c0011f2a <CmExpand(Reghive_Tag*, int)>:
c0011f2a:	55                   	push   ebp
c0011f2b:	57                   	push   edi
c0011f2c:	83 cf ff             	or     edi,0xffffffff
c0011f2f:	56                   	push   esi
c0011f30:	53                   	push   ebx
c0011f31:	83 ec 3c             	sub    esp,0x3c
c0011f34:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011f38:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011f3c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f40:	74 59                	je     c0011f9b <CmExpand(Reghive_Tag*, int)+0x71>
c0011f42:	50                   	push   eax
c0011f43:	31 d2                	xor    edx,edx
c0011f45:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011f49:	31 ff                	xor    edi,edi
c0011f4b:	52                   	push   edx
c0011f4c:	50                   	push   eax
c0011f4d:	ff 33                	push   DWORD PTR [ebx]
c0011f4f:	e8 0c 91 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0011f54:	83 c4 0c             	add    esp,0xc
c0011f57:	6a 2b                	push   0x2b
c0011f59:	6a 00                	push   0x0
c0011f5b:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011f5f:	55                   	push   ebp
c0011f60:	e8 8b e5 fe ff       	call   c00004f0 <memset>
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	39 f7                	cmp    edi,esi
c0011f6a:	7d 1b                	jge    c0011f87 <CmExpand(Reghive_Tag*, int)+0x5d>
c0011f6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	47                   	inc    edi
c0011f72:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011f76:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f78:	51                   	push   ecx
c0011f79:	55                   	push   ebp
c0011f7a:	6a 00                	push   0x0
c0011f7c:	6a 2b                	push   0x2b
c0011f7e:	50                   	push   eax
c0011f7f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f82:	83 c4 20             	add    esp,0x20
c0011f85:	eb e1                	jmp    c0011f68 <CmExpand(Reghive_Tag*, int)+0x3e>
c0011f87:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	01 fe                	add    esi,edi
c0011f8f:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0011f92:	53                   	push   ebx
c0011f93:	e8 71 ff ff ff       	call   c0011f09 <CmUpdateHeader(Reghive_Tag*)>
c0011f98:	83 c4 10             	add    esp,0x10
c0011f9b:	83 c4 3c             	add    esp,0x3c
c0011f9e:	89 f8                	mov    eax,edi
c0011fa0:	5b                   	pop    ebx
c0011fa1:	5e                   	pop    esi
c0011fa2:	5f                   	pop    edi
c0011fa3:	5d                   	pop    ebp
c0011fa4:	c3                   	ret    

c0011fa5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011fa5:	55                   	push   ebp
c0011fa6:	57                   	push   edi
c0011fa7:	56                   	push   esi
c0011fa8:	53                   	push   ebx
c0011fa9:	83 cb ff             	or     ebx,0xffffffff
c0011fac:	83 ec 1c             	sub    esp,0x1c
c0011faf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011fb3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011fb7:	74 68                	je     c0012021 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011fb9:	51                   	push   ecx
c0011fba:	be 2b 00 00 00       	mov    esi,0x2b
c0011fbf:	6a 00                	push   0x0
c0011fc1:	31 ff                	xor    edi,edi
c0011fc3:	6a 00                	push   0x0
c0011fc5:	31 db                	xor    ebx,ebx
c0011fc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011fca:	e8 91 90 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0011fcf:	83 c4 10             	add    esp,0x10
c0011fd2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011fd5:	76 3b                	jbe    c0012012 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011fd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011fda:	83 ec 0c             	sub    esp,0xc
c0011fdd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011fe1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fe3:	51                   	push   ecx
c0011fe4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011fe8:	51                   	push   ecx
c0011fe9:	6a 00                	push   0x0
c0011feb:	6a 01                	push   0x1
c0011fed:	50                   	push   eax
c0011fee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ff1:	83 c4 20             	add    esp,0x20
c0011ff4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ff9:	74 26                	je     c0012021 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011ffb:	52                   	push   edx
c0011ffc:	43                   	inc    ebx
c0011ffd:	57                   	push   edi
c0011ffe:	56                   	push   esi
c0011fff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012002:	e8 59 90 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0012007:	83 c6 2b             	add    esi,0x2b
c001200a:	83 d7 00             	adc    edi,0x0
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	eb c0                	jmp    c0011fd2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012012:	50                   	push   eax
c0012013:	50                   	push   eax
c0012014:	6a 40                	push   0x40
c0012016:	55                   	push   ebp
c0012017:	e8 0e ff ff ff       	call   c0011f2a <CmExpand(Reghive_Tag*, int)>
c001201c:	83 c4 10             	add    esp,0x10
c001201f:	89 c3                	mov    ebx,eax
c0012021:	83 c4 1c             	add    esp,0x1c
c0012024:	89 d8                	mov    eax,ebx
c0012026:	5b                   	pop    ebx
c0012027:	5e                   	pop    esi
c0012028:	5f                   	pop    edi
c0012029:	5d                   	pop    ebp
c001202a:	c3                   	ret    

c001202b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001202b:	55                   	push   ebp
c001202c:	57                   	push   edi
c001202d:	56                   	push   esi
c001202e:	53                   	push   ebx
c001202f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012035:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001203c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012043:	e8 5d ff ff ff       	call   c0011fa5 <CmFindUnusedExtent(Reghive_Tag*)>
c0012048:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001204c:	83 c4 0c             	add    esp,0xc
c001204f:	6a 2b                	push   0x2b
c0012051:	6a 00                	push   0x0
c0012053:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012057:	55                   	push   ebp
c0012058:	e8 93 e4 fe ff       	call   c00004f0 <memset>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	85 db                	test   ebx,ebx
c0012062:	74 12                	je     c0012076 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012064:	51                   	push   ecx
c0012065:	55                   	push   ebp
c0012066:	53                   	push   ebx
c0012067:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001206e:	e8 0e fd ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001207a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012081:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012086:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012088:	85 db                	test   ebx,ebx
c001208a:	74 49                	je     c00120d5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001208c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012091:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012096:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001209a:	c1 e0 08             	shl    eax,0x8
c001209d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00120a3:	09 c8                	or     eax,ecx
c00120a5:	74 11                	je     c00120b8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00120a7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00120ab:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00120af:	c1 e8 10             	shr    eax,0x10
c00120b2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00120b6:	eb 0f                	jmp    c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00120b8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00120bd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00120c2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00120c7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00120cb:	c1 ea 08             	shr    edx,0x8
c00120ce:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00120d3:	eb 0f                	jmp    c00120e4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00120d5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00120da:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00120df:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00120e4:	52                   	push   edx
c00120e5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00120e9:	50                   	push   eax
c00120ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120ee:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120f5:	e8 ab fd ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00120fa:	83 c4 10             	add    esp,0x10
c00120fd:	85 db                	test   ebx,ebx
c00120ff:	74 12                	je     c0012113 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012101:	50                   	push   eax
c0012102:	55                   	push   ebp
c0012103:	53                   	push   ebx
c0012104:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001210b:	e8 95 fd ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012117:	83 c4 7c             	add    esp,0x7c
c001211a:	5b                   	pop    ebx
c001211b:	5e                   	pop    esi
c001211c:	5f                   	pop    edi
c001211d:	5d                   	pop    ebp
c001211e:	c3                   	ret    

c001211f <CmSetString(Reghive_Tag*, int, char const*)>:
c001211f:	55                   	push   ebp
c0012120:	57                   	push   edi
c0012121:	56                   	push   esi
c0012122:	53                   	push   ebx
c0012123:	bb 27 00 00 00       	mov    ebx,0x27
c0012128:	81 ec 88 00 00 00    	sub    esp,0x88
c001212e:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012135:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001213c:	e8 3f e4 fe ff       	call   c0000580 <strlen>
c0012141:	8d 48 26             	lea    ecx,[eax+0x26]
c0012144:	89 c8                	mov    eax,ecx
c0012146:	99                   	cdq    
c0012147:	f7 fb                	idiv   ebx
c0012149:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001214d:	83 c4 10             	add    esp,0x10
c0012150:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012156:	7e 10                	jle    c0012168 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012158:	83 ec 0c             	sub    esp,0xc
c001215b:	68 5c 0d 02 c0       	push   0xc0020d5c
c0012160:	e8 5c e6 ff ff       	call   c00107c1 <KePanic(char const*)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	53                   	push   ebx
c0012169:	31 ed                	xor    ebp,ebp
c001216b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001216f:	53                   	push   ebx
c0012170:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012177:	57                   	push   edi
c0012178:	e8 04 fc ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001217d:	83 c4 10             	add    esp,0x10
c0012180:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012184:	89 f0                	mov    eax,esi
c0012186:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001218a:	c1 e0 08             	shl    eax,0x8
c001218d:	09 c6                	or     esi,eax
c001218f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012193:	c1 e6 08             	shl    esi,0x8
c0012196:	09 c6                	or     esi,eax
c0012198:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c001219c:	7e 72                	jle    c0012210 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001219e:	85 f6                	test   esi,esi
c00121a0:	75 25                	jne    c00121c7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00121a2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00121a7:	8d 44 24 45          	lea    eax,[esp+0x45]
c00121ab:	50                   	push   eax
c00121ac:	6a 00                	push   0x0
c00121ae:	6a 00                	push   0x0
c00121b0:	57                   	push   edi
c00121b1:	e8 75 fe ff ff       	call   c001202b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00121bc:	89 c6                	mov    esi,eax
c00121be:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00121c1:	c1 f8 10             	sar    eax,0x10
c00121c4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00121c7:	51                   	push   ecx
c00121c8:	8d 54 24 49          	lea    edx,[esp+0x49]
c00121cc:	52                   	push   edx
c00121cd:	56                   	push   esi
c00121ce:	57                   	push   edi
c00121cf:	e8 ad fb ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121d4:	83 c4 0c             	add    esp,0xc
c00121d7:	6a 27                	push   0x27
c00121d9:	6a 00                	push   0x0
c00121db:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00121df:	51                   	push   ecx
c00121e0:	e8 0b e3 fe ff       	call   c00004f0 <memset>
c00121e5:	6b c5 27             	imul   eax,ebp,0x27
c00121e8:	83 c4 0c             	add    esp,0xc
c00121eb:	6a 27                	push   0x27
c00121ed:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00121f4:	50                   	push   eax
c00121f5:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00121f9:	51                   	push   ecx
c00121fa:	e8 91 e4 fe ff       	call   c0000690 <strncpy>
c00121ff:	83 c4 0c             	add    esp,0xc
c0012202:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012206:	52                   	push   edx
c0012207:	56                   	push   esi
c0012208:	57                   	push   edi
c0012209:	e8 97 fc ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001220e:	eb 19                	jmp    c0012229 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012210:	85 f6                	test   esi,esi
c0012212:	74 18                	je     c001222c <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012214:	52                   	push   edx
c0012215:	52                   	push   edx
c0012216:	56                   	push   esi
c0012217:	57                   	push   edi
c0012218:	e8 c4 fc ff ff       	call   c0011ee1 <CmFreeExtent(Reghive_Tag*, int)>
c001221d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012221:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012225:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012229:	83 c4 10             	add    esp,0x10
c001222c:	45                   	inc    ebp
c001222d:	83 c3 03             	add    ebx,0x3
c0012230:	83 fd 07             	cmp    ebp,0x7
c0012233:	0f 85 47 ff ff ff    	jne    c0012180 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012239:	50                   	push   eax
c001223a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001223e:	50                   	push   eax
c001223f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012246:	57                   	push   edi
c0012247:	e8 59 fc ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001224c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012252:	5b                   	pop    ebx
c0012253:	5e                   	pop    esi
c0012254:	5f                   	pop    edi
c0012255:	5d                   	pop    ebp
c0012256:	c3                   	ret    

c0012257 <CmGetMatch(char*, char*, bool, bool*)>:
c0012257:	56                   	push   esi
c0012258:	53                   	push   ebx
c0012259:	50                   	push   eax
c001225a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001225f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012263:	74 25                	je     c001228a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012265:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012268:	31 db                	xor    ebx,ebx
c001226a:	50                   	push   eax
c001226b:	50                   	push   eax
c001226c:	8d 04 9d a0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde60]
c0012273:	50                   	push   eax
c0012274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012278:	e8 03 e5 fe ff       	call   c0000780 <strcmp>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	85 c0                	test   eax,eax
c0012282:	74 2e                	je     c00122b2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012284:	43                   	inc    ebx
c0012285:	83 fb 3f             	cmp    ebx,0x3f
c0012288:	75 e0                	jne    c001226a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001228a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001228d:	31 db                	xor    ebx,ebx
c001228f:	51                   	push   ecx
c0012290:	51                   	push   ecx
c0012291:	8d 04 9d a0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde60]
c0012298:	50                   	push   eax
c0012299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001229d:	e8 de e4 fe ff       	call   c0000780 <strcmp>
c00122a2:	83 c4 10             	add    esp,0x10
c00122a5:	85 c0                	test   eax,eax
c00122a7:	74 09                	je     c00122b2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122a9:	43                   	inc    ebx
c00122aa:	83 fb 3f             	cmp    ebx,0x3f
c00122ad:	75 e0                	jne    c001228f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00122af:	83 cb ff             	or     ebx,0xffffffff
c00122b2:	5a                   	pop    edx
c00122b3:	89 d8                	mov    eax,ebx
c00122b5:	5b                   	pop    ebx
c00122b6:	5e                   	pop    esi
c00122b7:	c3                   	ret    

c00122b8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00122b8:	55                   	push   ebp
c00122b9:	31 c0                	xor    eax,eax
c00122bb:	57                   	push   edi
c00122bc:	56                   	push   esi
c00122bd:	53                   	push   ebx
c00122be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00122c2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00122c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00122d0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00122d3:	83 fd 1f             	cmp    ebp,0x1f
c00122d6:	7f 0b                	jg     c00122e3 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00122d8:	0f b6 c2             	movzx  eax,dl
c00122db:	d3 e0                	shl    eax,cl
c00122dd:	09 07                	or     DWORD PTR [edi],eax
c00122df:	b0 01                	mov    al,0x1
c00122e1:	01 33                	add    DWORD PTR [ebx],esi
c00122e3:	5b                   	pop    ebx
c00122e4:	5e                   	pop    esi
c00122e5:	5f                   	pop    edi
c00122e6:	5d                   	pop    ebp
c00122e7:	c3                   	ret    

c00122e8 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00122e8:	57                   	push   edi
c00122e9:	56                   	push   esi
c00122ea:	53                   	push   ebx
c00122eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00122ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122f3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00122f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122fb:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00122fd:	7c 17                	jl     c0012316 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00122ff:	8b 17                	mov    edx,DWORD PTR [edi]
c0012301:	b8 01 00 00 00       	mov    eax,0x1
c0012306:	d3 e0                	shl    eax,cl
c0012308:	48                   	dec    eax
c0012309:	21 d0                	and    eax,edx
c001230b:	d3 ea                	shr    edx,cl
c001230d:	89 17                	mov    DWORD PTR [edi],edx
c001230f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012311:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012314:	eb 05                	jmp    c001231b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012316:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012319:	31 c0                	xor    eax,eax
c001231b:	5b                   	pop    ebx
c001231c:	5e                   	pop    esi
c001231d:	5f                   	pop    edi
c001231e:	c3                   	ret    

c001231f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001231f:	83 ec 40             	sub    esp,0x40
c0012322:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012326:	50                   	push   eax
c0012327:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001232b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001232f:	e8 4d fa ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012334:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012338:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c001233c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012340:	89 10                	mov    DWORD PTR [eax],edx
c0012342:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012345:	83 c4 4c             	add    esp,0x4c
c0012348:	c3                   	ret    

c0012349 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012349:	55                   	push   ebp
c001234a:	57                   	push   edi
c001234b:	56                   	push   esi
c001234c:	53                   	push   ebx
c001234d:	83 ec 40             	sub    esp,0x40
c0012350:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012354:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012358:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001235c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012360:	53                   	push   ebx
c0012361:	56                   	push   esi
c0012362:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012366:	e8 16 fa ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001236b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001236f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012373:	83 c4 0c             	add    esp,0xc
c0012376:	53                   	push   ebx
c0012377:	56                   	push   esi
c0012378:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001237c:	e8 24 fb ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012381:	83 c4 4c             	add    esp,0x4c
c0012384:	5b                   	pop    ebx
c0012385:	5e                   	pop    esi
c0012386:	5f                   	pop    edi
c0012387:	5d                   	pop    ebp
c0012388:	c3                   	ret    

c0012389 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012389:	55                   	push   ebp
c001238a:	57                   	push   edi
c001238b:	56                   	push   esi
c001238c:	31 f6                	xor    esi,esi
c001238e:	53                   	push   ebx
c001238f:	31 db                	xor    ebx,ebx
c0012391:	83 ec 40             	sub    esp,0x40
c0012394:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001239c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123a4:	6a 12                	push   0x12
c00123a6:	68 ee 00 00 00       	push   0xee
c00123ab:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00123af:	e8 3c e1 fe ff       	call   c00004f0 <memset>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00123bb:	6a 08                	push   0x8
c00123bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123c1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00123c5:	50                   	push   eax
c00123c6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00123ca:	55                   	push   ebp
c00123cb:	57                   	push   edi
c00123cc:	e8 e7 fe ff ff       	call   c00122b8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00123d8:	50                   	push   eax
c00123d9:	6a 06                	push   0x6
c00123db:	55                   	push   ebp
c00123dc:	57                   	push   edi
c00123dd:	e8 06 ff ff ff       	call   c00122e8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00123e2:	83 c4 10             	add    esp,0x10
c00123e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00123ea:	74 07                	je     c00123f3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00123ec:	46                   	inc    esi
c00123ed:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00123f1:	eb e1                	jmp    c00123d4 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00123f3:	43                   	inc    ebx
c00123f4:	83 fb 12             	cmp    ebx,0x12
c00123f7:	75 c2                	jne    c00123bb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00123f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123fd:	31 f6                	xor    esi,esi
c00123ff:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012402:	50                   	push   eax
c0012403:	50                   	push   eax
c0012404:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012409:	46                   	inc    esi
c001240a:	8d 04 85 a0 21 02 c0 	lea    eax,[eax*4-0x3ffdde60]
c0012411:	50                   	push   eax
c0012412:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012416:	e8 55 e4 fe ff       	call   c0000870 <strcat>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	83 fe 18             	cmp    esi,0x18
c0012421:	75 df                	jne    c0012402 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012423:	83 c4 3c             	add    esp,0x3c
c0012426:	31 c0                	xor    eax,eax
c0012428:	5b                   	pop    ebx
c0012429:	5e                   	pop    esi
c001242a:	5f                   	pop    edi
c001242b:	5d                   	pop    ebp
c001242c:	c3                   	ret    

c001242d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c001242d:	83 ec 40             	sub    esp,0x40
c0012430:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012434:	50                   	push   eax
c0012435:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012439:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001243d:	e8 3f f9 ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012442:	58                   	pop    eax
c0012443:	5a                   	pop    edx
c0012444:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012448:	8d 44 24 15          	lea    eax,[esp+0x15]
c001244c:	50                   	push   eax
c001244d:	e8 37 ff ff ff       	call   c0012389 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012452:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012457:	83 c4 4c             	add    esp,0x4c
c001245a:	c3                   	ret    

c001245b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001245b:	55                   	push   ebp
c001245c:	57                   	push   edi
c001245d:	56                   	push   esi
c001245e:	53                   	push   ebx
c001245f:	31 db                	xor    ebx,ebx
c0012461:	83 ec 70             	sub    esp,0x70
c0012464:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001246b:	6a 30                	push   0x30
c001246d:	6a 00                	push   0x0
c001246f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012473:	56                   	push   esi
c0012474:	e8 77 e0 fe ff       	call   c00004f0 <memset>
c0012479:	83 c4 10             	add    esp,0x10
c001247c:	83 ec 0c             	sub    esp,0xc
c001247f:	57                   	push   edi
c0012480:	e8 fb e0 fe ff       	call   c0000580 <strlen>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	39 d8                	cmp    eax,ebx
c001248a:	76 16                	jbe    c00124a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001248c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012490:	83 ec 0c             	sub    esp,0xc
c0012493:	50                   	push   eax
c0012494:	e8 c7 e4 fe ff       	call   c0000960 <toupper>
c0012499:	83 c4 10             	add    esp,0x10
c001249c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001249f:	43                   	inc    ebx
c00124a0:	eb da                	jmp    c001247c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00124a2:	52                   	push   edx
c00124a3:	31 db                	xor    ebx,ebx
c00124a5:	6a 18                	push   0x18
c00124a7:	31 ff                	xor    edi,edi
c00124a9:	6a 3f                	push   0x3f
c00124ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00124af:	50                   	push   eax
c00124b0:	e8 3b e0 fe ff       	call   c00004f0 <memset>
c00124b5:	83 c4 10             	add    esp,0x10
c00124b8:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00124bc:	8d 74 24 10          	lea    esi,[esp+0x10]
c00124c0:	84 c0                	test   al,al
c00124c2:	0f 84 af 00 00 00    	je     c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00124c8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00124cc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00124cf:	83 ec 0c             	sub    esp,0xc
c00124d2:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00124d7:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00124db:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00124df:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00124e4:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00124e8:	56                   	push   esi
c00124e9:	e8 92 e0 fe ff       	call   c0000580 <strlen>
c00124ee:	83 c4 10             	add    esp,0x10
c00124f1:	85 c0                	test   eax,eax
c00124f3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00124f7:	74 0b                	je     c0012504 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00124f9:	50                   	push   eax
c00124fa:	6a 01                	push   0x1
c00124fc:	56                   	push   esi
c00124fd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012501:	50                   	push   eax
c0012502:	eb 0a                	jmp    c001250e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012504:	50                   	push   eax
c0012505:	6a 00                	push   0x0
c0012507:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001250b:	50                   	push   eax
c001250c:	6a 00                	push   0x0
c001250e:	e8 44 fd ff ff       	call   c0012257 <CmGetMatch(char*, char*, bool, bool*)>
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	83 f8 ff             	cmp    eax,0xffffffff
c0012519:	75 1a                	jne    c0012535 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001251b:	83 ec 0c             	sub    esp,0xc
c001251e:	68 71 0d 02 c0       	push   0xc0020d71
c0012523:	e8 99 e2 ff ff       	call   c00107c1 <KePanic(char const*)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	b8 02 00 00 00       	mov    eax,0x2
c0012530:	e9 bb 00 00 00       	jmp    c00125f0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012535:	83 ff 18             	cmp    edi,0x18
c0012538:	75 1a                	jne    c0012554 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001253a:	83 ec 0c             	sub    esp,0xc
c001253d:	68 86 0d 02 c0       	push   0xc0020d86
c0012542:	e8 7a e2 ff ff       	call   c00107c1 <KePanic(char const*)>
c0012547:	83 c4 10             	add    esp,0x10
c001254a:	b8 01 00 00 00       	mov    eax,0x1
c001254f:	e9 9c 00 00 00       	jmp    c00125f0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012554:	47                   	inc    edi
c0012555:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001255a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001255e:	0f 45 dd             	cmovne ebx,ebp
c0012561:	83 ec 0c             	sub    esp,0xc
c0012564:	56                   	push   esi
c0012565:	e8 16 e0 fe ff       	call   c0000580 <strlen>
c001256a:	83 c4 10             	add    esp,0x10
c001256d:	85 c0                	test   eax,eax
c001256f:	74 06                	je     c0012577 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012571:	43                   	inc    ebx
c0012572:	e9 41 ff ff ff       	jmp    c00124b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012577:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001257f:	31 db                	xor    ebx,ebx
c0012581:	31 ff                	xor    edi,edi
c0012583:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001258b:	50                   	push   eax
c001258c:	6a 12                	push   0x12
c001258e:	68 ee 00 00 00       	push   0xee
c0012593:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001259a:	e8 51 df fe ff       	call   c00004f0 <memset>
c001259f:	83 c4 10             	add    esp,0x10
c00125a2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00125a6:	83 fb 17             	cmp    ebx,0x17
c00125a9:	7e 26                	jle    c00125d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00125ab:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00125af:	50                   	push   eax
c00125b0:	6a 08                	push   0x8
c00125b2:	55                   	push   ebp
c00125b3:	56                   	push   esi
c00125b4:	e8 2f fd ff ff       	call   c00122e8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00125b9:	83 c4 10             	add    esp,0x10
c00125bc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125c1:	74 26                	je     c00125e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00125c3:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00125ca:	4b                   	dec    ebx
c00125cb:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00125ce:	47                   	inc    edi
c00125cf:	eb 1c                	jmp    c00125ed <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00125d1:	6a 06                	push   0x6
c00125d3:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00125d8:	50                   	push   eax
c00125d9:	55                   	push   ebp
c00125da:	56                   	push   esi
c00125db:	e8 d8 fc ff ff       	call   c00122b8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00125e0:	83 c4 10             	add    esp,0x10
c00125e3:	84 c0                	test   al,al
c00125e5:	75 06                	jne    c00125ed <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00125e7:	eb c2                	jmp    c00125ab <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00125e9:	31 c0                	xor    eax,eax
c00125eb:	eb 03                	jmp    c00125f0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125ed:	43                   	inc    ebx
c00125ee:	eb b2                	jmp    c00125a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00125f0:	83 c4 6c             	add    esp,0x6c
c00125f3:	5b                   	pop    ebx
c00125f4:	5e                   	pop    esi
c00125f5:	5f                   	pop    edi
c00125f6:	5d                   	pop    ebp
c00125f7:	c3                   	ret    

c00125f8 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00125f8:	53                   	push   ebx
c00125f9:	83 ec 3c             	sub    esp,0x3c
c00125fc:	6a 2b                	push   0x2b
c00125fe:	6a 00                	push   0x0
c0012600:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012604:	53                   	push   ebx
c0012605:	e8 e6 de fe ff       	call   c00004f0 <memset>
c001260a:	58                   	pop    eax
c001260b:	5a                   	pop    edx
c001260c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012610:	50                   	push   eax
c0012611:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012615:	e8 41 fe ff ff       	call   c001245b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001261a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001261f:	83 c4 0c             	add    esp,0xc
c0012622:	6a 15                	push   0x15
c0012624:	6a 00                	push   0x0
c0012626:	8d 44 24 27          	lea    eax,[esp+0x27]
c001262a:	50                   	push   eax
c001262b:	e8 c0 de fe ff       	call   c00004f0 <memset>
c0012630:	53                   	push   ebx
c0012631:	6a 00                	push   0x0
c0012633:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012637:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001263b:	e8 eb f9 ff ff       	call   c001202b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012640:	83 c4 58             	add    esp,0x58
c0012643:	5b                   	pop    ebx
c0012644:	c3                   	ret    

c0012645 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012645:	56                   	push   esi
c0012646:	53                   	push   ebx
c0012647:	83 ec 48             	sub    esp,0x48
c001264a:	6a 12                	push   0x12
c001264c:	68 ff 00 00 00       	push   0xff
c0012651:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012655:	56                   	push   esi
c0012656:	e8 95 de fe ff       	call   c00004f0 <memset>
c001265b:	5a                   	pop    edx
c001265c:	59                   	pop    ecx
c001265d:	56                   	push   esi
c001265e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012662:	e8 f4 fd ff ff       	call   c001245b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012667:	83 c4 10             	add    esp,0x10
c001266a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001266e:	85 db                	test   ebx,ebx
c0012670:	74 42                	je     c00126b4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012672:	50                   	push   eax
c0012673:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012677:	50                   	push   eax
c0012678:	53                   	push   ebx
c0012679:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001267d:	e8 ff f6 ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012682:	83 c4 0c             	add    esp,0xc
c0012685:	6a 12                	push   0x12
c0012687:	8d 44 24 21          	lea    eax,[esp+0x21]
c001268b:	50                   	push   eax
c001268c:	56                   	push   esi
c001268d:	e8 ee dc fe ff       	call   c0000380 <memcmp>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	85 c0                	test   eax,eax
c0012697:	74 1e                	je     c00126b7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012699:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001269e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00126a3:	c1 e3 08             	shl    ebx,0x8
c00126a6:	09 d8                	or     eax,ebx
c00126a8:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00126ad:	c1 e3 10             	shl    ebx,0x10
c00126b0:	09 c3                	or     ebx,eax
c00126b2:	eb ba                	jmp    c001266e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00126b4:	83 cb ff             	or     ebx,0xffffffff
c00126b7:	83 c4 44             	add    esp,0x44
c00126ba:	89 d8                	mov    eax,ebx
c00126bc:	5b                   	pop    ebx
c00126bd:	5e                   	pop    esi
c00126be:	c3                   	ret    

c00126bf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00126bf:	57                   	push   edi
c00126c0:	56                   	push   esi
c00126c1:	53                   	push   ebx
c00126c2:	83 ec 34             	sub    esp,0x34
c00126c5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00126c9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00126cd:	6a 2b                	push   0x2b
c00126cf:	6a 00                	push   0x0
c00126d1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126d5:	53                   	push   ebx
c00126d6:	e8 15 de fe ff       	call   c00004f0 <memset>
c00126db:	58                   	pop    eax
c00126dc:	5a                   	pop    edx
c00126dd:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126e1:	50                   	push   eax
c00126e2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126e6:	e8 70 fd ff ff       	call   c001245b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126eb:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00126ef:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00126f3:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00126f7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00126fb:	53                   	push   ebx
c00126fc:	6a 00                	push   0x0
c00126fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012702:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012706:	e8 20 f9 ff ff       	call   c001202b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001270b:	83 c4 50             	add    esp,0x50
c001270e:	5b                   	pop    ebx
c001270f:	5e                   	pop    esi
c0012710:	5f                   	pop    edi
c0012711:	c3                   	ret    

c0012712 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012712:	55                   	push   ebp
c0012713:	57                   	push   edi
c0012714:	56                   	push   esi
c0012715:	53                   	push   ebx
c0012716:	83 ec 40             	sub    esp,0x40
c0012719:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001271d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012721:	6a 2b                	push   0x2b
c0012723:	6a 00                	push   0x0
c0012725:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012729:	56                   	push   esi
c001272a:	e8 c1 dd fe ff       	call   c00004f0 <memset>
c001272f:	5f                   	pop    edi
c0012730:	89 ef                	mov    edi,ebp
c0012732:	58                   	pop    eax
c0012733:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012737:	50                   	push   eax
c0012738:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001273c:	e8 1a fd ff ff       	call   c001245b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012741:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012746:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001274b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012750:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012755:	83 c4 10             	add    esp,0x10
c0012758:	85 ed                	test   ebp,ebp
c001275a:	74 14                	je     c0012770 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001275c:	51                   	push   ecx
c001275d:	51                   	push   ecx
c001275e:	57                   	push   edi
c001275f:	53                   	push   ebx
c0012760:	e8 0e f7 ff ff       	call   c0011e73 <CmGetNext(Reghive_Tag*, int)>
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	85 c0                	test   eax,eax
c001276a:	74 04                	je     c0012770 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001276c:	89 c7                	mov    edi,eax
c001276e:	eb e8                	jmp    c0012758 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012770:	56                   	push   esi
c0012771:	6a 00                	push   0x0
c0012773:	57                   	push   edi
c0012774:	53                   	push   ebx
c0012775:	e8 b1 f8 ff ff       	call   c001202b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001277a:	83 c4 0c             	add    esp,0xc
c001277d:	56                   	push   esi
c001277e:	50                   	push   eax
c001277f:	89 c7                	mov    edi,eax
c0012781:	53                   	push   ebx
c0012782:	e8 fa f5 ff ff       	call   c0011d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012787:	58                   	pop    eax
c0012788:	5a                   	pop    edx
c0012789:	6a 6c                	push   0x6c
c001278b:	6a 00                	push   0x0
c001278d:	6a 00                	push   0x0
c001278f:	68 97 0d 02 c0       	push   0xc0020d97
c0012794:	57                   	push   edi
c0012795:	53                   	push   ebx
c0012796:	e8 24 ff ff ff       	call   c00126bf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001279b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001279f:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00127a3:	c1 e8 10             	shr    eax,0x10
c00127a6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00127aa:	83 c4 1c             	add    esp,0x1c
c00127ad:	56                   	push   esi
c00127ae:	57                   	push   edi
c00127af:	53                   	push   ebx
c00127b0:	e8 f0 f6 ff ff       	call   c0011ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00127b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00127ba:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00127bf:	c1 e0 08             	shl    eax,0x8
c00127c2:	09 c2                	or     edx,eax
c00127c4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00127c9:	83 c4 4c             	add    esp,0x4c
c00127cc:	5b                   	pop    ebx
c00127cd:	5e                   	pop    esi
c00127ce:	c1 e0 10             	shl    eax,0x10
c00127d1:	09 d0                	or     eax,edx
c00127d3:	5f                   	pop    edi
c00127d4:	5d                   	pop    ebp
c00127d5:	c3                   	ret    

c00127d6 <zStrtok(char*, char const*)>:
c00127d6:	55                   	push   ebp
c00127d7:	57                   	push   edi
c00127d8:	56                   	push   esi
c00127d9:	53                   	push   ebx
c00127da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127e2:	85 db                	test   ebx,ebx
c00127e4:	74 2f                	je     c0012815 <zStrtok(char*, char const*)+0x3f>
c00127e6:	85 c0                	test   eax,eax
c00127e8:	75 09                	jne    c00127f3 <zStrtok(char*, char const*)+0x1d>
c00127ea:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00127ef:	85 c0                	test   eax,eax
c00127f1:	74 50                	je     c0012843 <zStrtok(char*, char const*)+0x6d>
c00127f3:	31 c9                	xor    ecx,ecx
c00127f5:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00127f9:	74 03                	je     c00127fe <zStrtok(char*, char const*)+0x28>
c00127fb:	41                   	inc    ecx
c00127fc:	eb f7                	jmp    c00127f5 <zStrtok(char*, char const*)+0x1f>
c00127fe:	31 d2                	xor    edx,edx
c0012800:	39 ca                	cmp    edx,ecx
c0012802:	74 15                	je     c0012819 <zStrtok(char*, char const*)+0x43>
c0012804:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012808:	8d 3c 10             	lea    edi,[eax+edx*1]
c001280b:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001280e:	39 ee                	cmp    esi,ebp
c0012810:	74 13                	je     c0012825 <zStrtok(char*, char const*)+0x4f>
c0012812:	42                   	inc    edx
c0012813:	eb eb                	jmp    c0012800 <zStrtok(char*, char const*)+0x2a>
c0012815:	31 c0                	xor    eax,eax
c0012817:	eb 2a                	jmp    c0012843 <zStrtok(char*, char const*)+0x6d>
c0012819:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012823:	eb 1e                	jmp    c0012843 <zStrtok(char*, char const*)+0x6d>
c0012825:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012828:	39 ce                	cmp    esi,ecx
c001282a:	75 0a                	jne    c0012836 <zStrtok(char*, char const*)+0x60>
c001282c:	40                   	inc    eax
c001282d:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012832:	89 d8                	mov    eax,ebx
c0012834:	eb 0d                	jmp    c0012843 <zStrtok(char*, char const*)+0x6d>
c0012836:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012839:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001283d:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012843:	5b                   	pop    ebx
c0012844:	5e                   	pop    esi
c0012845:	5f                   	pop    edi
c0012846:	5d                   	pop    ebp
c0012847:	c3                   	ret    

c0012848 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012848:	57                   	push   edi
c0012849:	56                   	push   esi
c001284a:	53                   	push   ebx
c001284b:	81 ec 08 01 00 00    	sub    esp,0x108
c0012851:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012858:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001285f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012863:	53                   	push   ebx
c0012864:	e8 e7 dd fe ff       	call   c0000650 <strcpy>
c0012869:	59                   	pop    ecx
c001286a:	5e                   	pop    esi
c001286b:	68 fb 10 02 c0       	push   0xc00210fb
c0012870:	53                   	push   ebx
c0012871:	bb 01 00 00 00       	mov    ebx,0x1
c0012876:	e8 5b ff ff ff       	call   c00127d6 <zStrtok(char*, char const*)>
c001287b:	83 c4 10             	add    esp,0x10
c001287e:	85 c0                	test   eax,eax
c0012880:	74 3b                	je     c00128bd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012882:	52                   	push   edx
c0012883:	50                   	push   eax
c0012884:	6a 01                	push   0x1
c0012886:	57                   	push   edi
c0012887:	e8 b9 fd ff ff       	call   c0012645 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001288c:	59                   	pop    ecx
c001288d:	5e                   	pop    esi
c001288e:	89 c3                	mov    ebx,eax
c0012890:	68 fb 10 02 c0       	push   0xc00210fb
c0012895:	6a 00                	push   0x0
c0012897:	e8 3a ff ff ff       	call   c00127d6 <zStrtok(char*, char const*)>
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	85 c0                	test   eax,eax
c00128a1:	89 c6                	mov    esi,eax
c00128a3:	74 18                	je     c00128bd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128a5:	52                   	push   edx
c00128a6:	52                   	push   edx
c00128a7:	53                   	push   ebx
c00128a8:	57                   	push   edi
c00128a9:	e8 86 f5 ff ff       	call   c0011e34 <CmEnterDirectory(Reghive_Tag*, int)>
c00128ae:	83 c4 10             	add    esp,0x10
c00128b1:	83 f8 ff             	cmp    eax,0xffffffff
c00128b4:	89 c3                	mov    ebx,eax
c00128b6:	74 05                	je     c00128bd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128b8:	50                   	push   eax
c00128b9:	56                   	push   esi
c00128ba:	53                   	push   ebx
c00128bb:	eb c9                	jmp    c0012886 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00128bd:	81 c4 00 01 00 00    	add    esp,0x100
c00128c3:	89 d8                	mov    eax,ebx
c00128c5:	5b                   	pop    ebx
c00128c6:	5e                   	pop    esi
c00128c7:	5f                   	pop    edi
c00128c8:	c3                   	ret    

c00128c9 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00128c9:	55                   	push   ebp
c00128ca:	57                   	push   edi
c00128cb:	56                   	push   esi
c00128cc:	53                   	push   ebx
c00128cd:	83 ec 5c             	sub    esp,0x5c
c00128d0:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00128d4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00128d8:	85 db                	test   ebx,ebx
c00128da:	0f 8e 84 00 00 00    	jle    c0012964 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00128e0:	57                   	push   edi
c00128e1:	31 ed                	xor    ebp,ebp
c00128e3:	6a 32                	push   0x32
c00128e5:	6a 00                	push   0x0
c00128e7:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00128eb:	57                   	push   edi
c00128ec:	e8 ff db fe ff       	call   c00004f0 <memset>
c00128f1:	83 c4 0c             	add    esp,0xc
c00128f4:	57                   	push   edi
c00128f5:	53                   	push   ebx
c00128f6:	56                   	push   esi
c00128f7:	e8 31 fb ff ff       	call   c001242d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00128fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012907:	7d 13                	jge    c001291c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012909:	83 ec 0c             	sub    esp,0xc
c001290c:	45                   	inc    ebp
c001290d:	68 68 14 02 c0       	push   0xc0021468
c0012912:	e8 26 80 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0012917:	83 c4 10             	add    esp,0x10
c001291a:	eb e7                	jmp    c0012903 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001291c:	51                   	push   ecx
c001291d:	57                   	push   edi
c001291e:	53                   	push   ebx
c001291f:	68 9d 0d 02 c0       	push   0xc0020d9d
c0012924:	e8 14 80 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012931:	75 1e                	jne    c0012951 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012933:	52                   	push   edx
c0012934:	52                   	push   edx
c0012935:	53                   	push   ebx
c0012936:	56                   	push   esi
c0012937:	e8 f8 f4 ff ff       	call   c0011e34 <CmEnterDirectory(Reghive_Tag*, int)>
c001293c:	83 c4 0c             	add    esp,0xc
c001293f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012943:	8d 51 04             	lea    edx,[ecx+0x4]
c0012946:	52                   	push   edx
c0012947:	50                   	push   eax
c0012948:	56                   	push   esi
c0012949:	e8 7b ff ff ff       	call   c00128c9 <CmDisplayTree(Reghive_Tag*, int, int)>
c001294e:	83 c4 10             	add    esp,0x10
c0012951:	50                   	push   eax
c0012952:	50                   	push   eax
c0012953:	53                   	push   ebx
c0012954:	56                   	push   esi
c0012955:	e8 19 f5 ff ff       	call   c0011e73 <CmGetNext(Reghive_Tag*, int)>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	89 c3                	mov    ebx,eax
c001295f:	e9 74 ff ff ff       	jmp    c00128d8 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012964:	83 c4 5c             	add    esp,0x5c
c0012967:	5b                   	pop    ebx
c0012968:	5e                   	pop    esi
c0012969:	5f                   	pop    edi
c001296a:	5d                   	pop    ebp
c001296b:	c3                   	ret    

c001296c <CmSplitFinalSlashInPlace(char*)>:
c001296c:	53                   	push   ebx
c001296d:	83 ec 14             	sub    esp,0x14
c0012970:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012974:	53                   	push   ebx
c0012975:	e8 06 dc fe ff       	call   c0000580 <strlen>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	48                   	dec    eax
c001297e:	85 c0                	test   eax,eax
c0012980:	74 15                	je     c0012997 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012982:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012986:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012989:	75 09                	jne    c0012994 <CmSplitFinalSlashInPlace(char*)+0x28>
c001298b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001298e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012992:	eb 05                	jmp    c0012999 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012994:	48                   	dec    eax
c0012995:	eb e7                	jmp    c001297e <CmSplitFinalSlashInPlace(char*)+0x12>
c0012997:	31 c0                	xor    eax,eax
c0012999:	83 c4 08             	add    esp,0x8
c001299c:	5b                   	pop    ebx
c001299d:	c3                   	ret    

c001299e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001299e:	55                   	push   ebp
c001299f:	57                   	push   edi
c00129a0:	56                   	push   esi
c00129a1:	53                   	push   ebx
c00129a2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00129a8:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00129af:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00129b2:	8d 43 01             	lea    eax,[ebx+0x1]
c00129b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129b9:	89 f0                	mov    eax,esi
c00129bb:	3c 40                	cmp    al,0x40
c00129bd:	75 1b                	jne    c00129da <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00129bf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129c2:	85 c0                	test   eax,eax
c00129c4:	74 08                	je     c00129ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00129c6:	83 f8 3a             	cmp    eax,0x3a
c00129c9:	74 03                	je     c00129ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00129cb:	43                   	inc    ebx
c00129cc:	eb f1                	jmp    c00129bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00129ce:	85 c0                	test   eax,eax
c00129d0:	0f 84 45 01 00 00    	je     c0012b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00129d6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00129d9:	43                   	inc    ebx
c00129da:	50                   	push   eax
c00129db:	6a 40                	push   0x40
c00129dd:	6a 00                	push   0x0
c00129df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00129e3:	50                   	push   eax
c00129e4:	e8 07 db fe ff       	call   c00004f0 <memset>
c00129e9:	89 f1                	mov    ecx,esi
c00129eb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00129f2:	31 c0                	xor    eax,eax
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	0f be f1             	movsx  esi,cl
c00129fa:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00129fd:	85 d2                	test   edx,edx
c00129ff:	89 d1                	mov    ecx,edx
c0012a01:	0f 84 14 01 00 00    	je     c0012b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a07:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a0c:	0f 8f 09 01 00 00    	jg     c0012b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a12:	83 fa 0a             	cmp    edx,0xa
c0012a15:	0f 85 f1 00 00 00    	jne    c0012b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012a1b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012a20:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012a25:	89 c8                	mov    eax,ecx
c0012a27:	a8 df                	test   al,0xdf
c0012a29:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012a2e:	83 f9 23             	cmp    ecx,0x23
c0012a31:	0f 94 c2             	sete   dl
c0012a34:	89 d5                	mov    ebp,edx
c0012a36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a3a:	09 ea                	or     edx,ebp
c0012a3c:	80 e2 01             	and    dl,0x1
c0012a3f:	75 47                	jne    c0012a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a41:	83 e8 09             	sub    eax,0x9
c0012a44:	3c 01                	cmp    al,0x1
c0012a46:	76 40                	jbe    c0012a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a48:	83 f9 5b             	cmp    ecx,0x5b
c0012a4b:	75 42                	jne    c0012a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012a4d:	83 fe 40             	cmp    esi,0x40
c0012a50:	75 36                	jne    c0012a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012a59:	55                   	push   ebp
c0012a5a:	e8 21 db fe ff       	call   c0000580 <strlen>
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	83 f8 3f             	cmp    eax,0x3f
c0012a65:	0f 87 b0 00 00 00    	ja     c0012b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a6b:	50                   	push   eax
c0012a6c:	50                   	push   eax
c0012a6d:	55                   	push   ebp
c0012a6e:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012a72:	55                   	push   ebp
c0012a73:	e8 d8 db fe ff       	call   c0000650 <strcpy>
c0012a78:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a7b:	e8 00 db fe ff       	call   c0000580 <strlen>
c0012a80:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012a85:	83 c4 10             	add    esp,0x10
c0012a88:	31 d2                	xor    edx,edx
c0012a8a:	e9 84 00 00 00       	jmp    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012a8f:	83 fe 40             	cmp    esi,0x40
c0012a92:	74 06                	je     c0012a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012a98:	eb 19                	jmp    c0012ab3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012a9a:	51                   	push   ecx
c0012a9b:	51                   	push   ecx
c0012a9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012aa0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012aa4:	50                   	push   eax
c0012aa5:	e8 d6 dc fe ff       	call   c0000780 <strcmp>
c0012aaa:	83 c4 10             	add    esp,0x10
c0012aad:	85 c0                	test   eax,eax
c0012aaf:	75 d7                	jne    c0012a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ab1:	eb e1                	jmp    c0012a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012ab3:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012ab6:	85 c9                	test   ecx,ecx
c0012ab8:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012abd:	83 f9 3d             	cmp    ecx,0x3d
c0012ac0:	0f 94 c0             	sete   al
c0012ac3:	89 c5                	mov    ebp,eax
c0012ac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ac9:	09 e8                	or     eax,ebp
c0012acb:	a8 01                	test   al,0x1
c0012acd:	89 c5                	mov    ebp,eax
c0012acf:	75 03                	jne    c0012ad4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012ad1:	42                   	inc    edx
c0012ad2:	eb df                	jmp    c0012ab3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012ad4:	85 c9                	test   ecx,ecx
c0012ad6:	74 43                	je     c0012b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012ad8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012adc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012adf:	52                   	push   edx
c0012ae0:	52                   	push   edx
c0012ae1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012ae5:	50                   	push   eax
c0012ae6:	53                   	push   ebx
c0012ae7:	e8 94 dc fe ff       	call   c0000780 <strcmp>
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012af3:	85 c0                	test   eax,eax
c0012af5:	75 91                	jne    c0012a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012af7:	50                   	push   eax
c0012af8:	42                   	inc    edx
c0012af9:	50                   	push   eax
c0012afa:	52                   	push   edx
c0012afb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b02:	e8 49 db fe ff       	call   c0000650 <strcpy>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	eb 11                	jmp    c0012b1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b0c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b10:	8d 50 01             	lea    edx,[eax+0x1]
c0012b13:	47                   	inc    edi
c0012b14:	89 d0                	mov    eax,edx
c0012b16:	e9 df fe ff ff       	jmp    c00129fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012b1b:	31 ed                	xor    ebp,ebp
c0012b1d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b23:	89 e8                	mov    eax,ebp
c0012b25:	5b                   	pop    ebx
c0012b26:	5e                   	pop    esi
c0012b27:	5f                   	pop    edi
c0012b28:	5d                   	pop    ebp
c0012b29:	c3                   	ret    

c0012b2a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b2a:	57                   	push   edi
c0012b2b:	56                   	push   esi
c0012b2c:	53                   	push   ebx
c0012b2d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b33:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012b3a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012b41:	53                   	push   ebx
c0012b42:	e8 39 da fe ff       	call   c0000580 <strlen>
c0012b47:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b4a:	89 c7                	mov    edi,eax
c0012b4c:	e8 2f da fe ff       	call   c0000580 <strlen>
c0012b51:	83 c4 10             	add    esp,0x10
c0012b54:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012b58:	3d ff 00 00 00       	cmp    eax,0xff
c0012b5d:	0f 87 d3 00 00 00    	ja     c0012c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012b63:	57                   	push   edi
c0012b64:	57                   	push   edi
c0012b65:	56                   	push   esi
c0012b66:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012b6a:	56                   	push   esi
c0012b6b:	e8 e0 da fe ff       	call   c0000650 <strcpy>
c0012b70:	58                   	pop    eax
c0012b71:	5a                   	pop    edx
c0012b72:	68 fb 10 02 c0       	push   0xc00210fb
c0012b77:	56                   	push   esi
c0012b78:	e8 f3 dc fe ff       	call   c0000870 <strcat>
c0012b7d:	59                   	pop    ecx
c0012b7e:	5f                   	pop    edi
c0012b7f:	53                   	push   ebx
c0012b80:	56                   	push   esi
c0012b81:	e8 ea dc fe ff       	call   c0000870 <strcat>
c0012b86:	58                   	pop    eax
c0012b87:	5a                   	pop    edx
c0012b88:	68 a7 0d 02 c0       	push   0xc0020da7
c0012b8d:	56                   	push   esi
c0012b8e:	e8 dd dc fe ff       	call   c0000870 <strcat>
c0012b93:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012b9a:	e8 18 4f ff ff       	call   c0007ab7 <malloc>
c0012b9f:	83 c4 0c             	add    esp,0xc
c0012ba2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012ba8:	56                   	push   esi
c0012ba9:	50                   	push   eax
c0012baa:	89 c3                	mov    ebx,eax
c0012bac:	e8 35 83 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	85 db                	test   ebx,ebx
c0012bb6:	74 7e                	je     c0012c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bb8:	51                   	push   ecx
c0012bb9:	51                   	push   ecx
c0012bba:	6a 01                	push   0x1
c0012bbc:	53                   	push   ebx
c0012bbd:	e8 e0 83 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0012bc2:	83 c4 10             	add    esp,0x10
c0012bc5:	85 c0                	test   eax,eax
c0012bc7:	74 08                	je     c0012bd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012bc9:	83 ec 0c             	sub    esp,0xc
c0012bcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bce:	53                   	push   ebx
c0012bcf:	eb 5f                	jmp    c0012c30 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012bd1:	52                   	push   edx
c0012bd2:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012bd6:	50                   	push   eax
c0012bd7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012bdb:	50                   	push   eax
c0012bdc:	53                   	push   ebx
c0012bdd:	e8 6c 86 ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c0012be2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	89 c1                	mov    ecx,eax
c0012beb:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012bef:	74 31                	je     c0012c22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012bf1:	83 ec 0c             	sub    esp,0xc
c0012bf4:	50                   	push   eax
c0012bf5:	e8 bd 4e ff ff       	call   c0007ab7 <malloc>
c0012bfa:	89 c6                	mov    esi,eax
c0012bfc:	58                   	pop    eax
c0012bfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bff:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c03:	52                   	push   edx
c0012c04:	56                   	push   esi
c0012c05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c0d:	53                   	push   ebx
c0012c0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c11:	83 c4 20             	add    esp,0x20
c0012c14:	85 c0                	test   eax,eax
c0012c16:	75 0a                	jne    c0012c22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c1c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c20:	74 18                	je     c0012c3a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	53                   	push   ebx
c0012c26:	e8 d5 83 ff ff       	call   c000b000 <File::close()>
c0012c2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c33:	83 c4 10             	add    esp,0x10
c0012c36:	31 c0                	xor    eax,eax
c0012c38:	eb 3b                	jmp    c0012c75 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	53                   	push   ebx
c0012c3e:	e8 bd 83 ff ff       	call   c000b000 <File::close()>
c0012c43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c4b:	83 c4 0c             	add    esp,0xc
c0012c4e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c55:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c5c:	56                   	push   esi
c0012c5d:	e8 3c fd ff ff       	call   c001299e <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012c62:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c65:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012c69:	e8 59 4e ff ff       	call   c0007ac7 <free>
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012c75:	81 c4 20 01 00 00    	add    esp,0x120
c0012c7b:	5b                   	pop    ebx
c0012c7c:	5e                   	pop    esi
c0012c7d:	5f                   	pop    edi
c0012c7e:	c3                   	ret    

c0012c7f <Reg::getLine(char*, char*, char*)>:
c0012c7f:	57                   	push   edi
c0012c80:	56                   	push   esi
c0012c81:	53                   	push   ebx
c0012c82:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012c86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c8e:	57                   	push   edi
c0012c8f:	56                   	push   esi
c0012c90:	53                   	push   ebx
c0012c91:	68 ac 0d 02 c0       	push   0xc0020dac
c0012c96:	e8 8f fe ff ff       	call   c0012b2a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	84 c0                	test   al,al
c0012ca0:	75 10                	jne    c0012cb2 <Reg::getLine(char*, char*, char*)+0x33>
c0012ca2:	57                   	push   edi
c0012ca3:	56                   	push   esi
c0012ca4:	53                   	push   ebx
c0012ca5:	68 d1 0d 02 c0       	push   0xc0020dd1
c0012caa:	e8 7b fe ff ff       	call   c0012b2a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	5b                   	pop    ebx
c0012cb3:	5e                   	pop    esi
c0012cb4:	5f                   	pop    edi
c0012cb5:	c3                   	ret    

c0012cb6 <Reg::readInt(char*, char*, int*)>:
c0012cb6:	55                   	push   ebp
c0012cb7:	57                   	push   edi
c0012cb8:	56                   	push   esi
c0012cb9:	53                   	push   ebx
c0012cba:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012cc0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012cc4:	55                   	push   ebp
c0012cc5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012ccc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012cd3:	e8 a7 ff ff ff       	call   c0012c7f <Reg::getLine(char*, char*, char*)>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	84 c0                	test   al,al
c0012cdd:	0f 84 b6 00 00 00    	je     c0012d99 <Reg::readInt(char*, char*, int*)+0xe3>
c0012ce3:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012ce8:	83 fa 2b             	cmp    edx,0x2b
c0012ceb:	74 0c                	je     c0012cf9 <Reg::readInt(char*, char*, int*)+0x43>
c0012ced:	83 fa 2d             	cmp    edx,0x2d
c0012cf0:	75 0e                	jne    c0012d00 <Reg::readInt(char*, char*, int*)+0x4a>
c0012cf2:	ba 01 00 00 00       	mov    edx,0x1
c0012cf7:	eb 0b                	jmp    c0012d04 <Reg::readInt(char*, char*, int*)+0x4e>
c0012cf9:	ba 01 00 00 00       	mov    edx,0x1
c0012cfe:	eb 02                	jmp    c0012d02 <Reg::readInt(char*, char*, int*)+0x4c>
c0012d00:	31 d2                	xor    edx,edx
c0012d02:	31 c0                	xor    eax,eax
c0012d04:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d09:	be 0a 00 00 00       	mov    esi,0xa
c0012d0e:	75 21                	jne    c0012d31 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d10:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d15:	83 f9 78             	cmp    ecx,0x78
c0012d18:	75 0a                	jne    c0012d24 <Reg::readInt(char*, char*, int*)+0x6e>
c0012d1a:	83 c2 02             	add    edx,0x2
c0012d1d:	be 10 00 00 00       	mov    esi,0x10
c0012d22:	eb 0d                	jmp    c0012d31 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d24:	83 f9 62             	cmp    ecx,0x62
c0012d27:	75 08                	jne    c0012d31 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d29:	83 c2 02             	add    edx,0x2
c0012d2c:	be 02 00 00 00       	mov    esi,0x2
c0012d31:	01 d5                	add    ebp,edx
c0012d33:	31 d2                	xor    edx,edx
c0012d35:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012d39:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012d3d:	85 c9                	test   ecx,ecx
c0012d3f:	0f 94 c3             	sete   bl
c0012d42:	83 f9 0d             	cmp    ecx,0xd
c0012d45:	89 df                	mov    edi,ebx
c0012d47:	0f 94 c3             	sete   bl
c0012d4a:	09 df                	or     edi,ebx
c0012d4c:	89 fb                	mov    ebx,edi
c0012d4e:	83 e7 01             	and    edi,0x1
c0012d51:	75 35                	jne    c0012d88 <Reg::readInt(char*, char*, int*)+0xd2>
c0012d53:	0f af d6             	imul   edx,esi
c0012d56:	83 fe 10             	cmp    esi,0x10
c0012d59:	75 26                	jne    c0012d81 <Reg::readInt(char*, char*, int*)+0xcb>
c0012d5b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012d5f:	83 ef 41             	sub    edi,0x41
c0012d62:	89 fb                	mov    ebx,edi
c0012d64:	80 fb 05             	cmp    bl,0x5
c0012d67:	77 06                	ja     c0012d6f <Reg::readInt(char*, char*, int*)+0xb9>
c0012d69:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012d6d:	eb 16                	jmp    c0012d85 <Reg::readInt(char*, char*, int*)+0xcf>
c0012d6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d73:	83 eb 61             	sub    ebx,0x61
c0012d76:	80 fb 05             	cmp    bl,0x5
c0012d79:	77 06                	ja     c0012d81 <Reg::readInt(char*, char*, int*)+0xcb>
c0012d7b:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012d7f:	eb 04                	jmp    c0012d85 <Reg::readInt(char*, char*, int*)+0xcf>
c0012d81:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012d85:	45                   	inc    ebp
c0012d86:	eb ad                	jmp    c0012d35 <Reg::readInt(char*, char*, int*)+0x7f>
c0012d88:	84 c0                	test   al,al
c0012d8a:	74 02                	je     c0012d8e <Reg::readInt(char*, char*, int*)+0xd8>
c0012d8c:	f7 da                	neg    edx
c0012d8e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012d95:	89 10                	mov    DWORD PTR [eax],edx
c0012d97:	88 d8                	mov    al,bl
c0012d99:	81 c4 ec 00 00 00    	add    esp,0xec
c0012d9f:	5b                   	pop    ebx
c0012da0:	5e                   	pop    esi
c0012da1:	5f                   	pop    edi
c0012da2:	5d                   	pop    ebp
c0012da3:	c3                   	ret    

c0012da4 <Reg::readString(char*, char*, char*, int)>:
c0012da4:	57                   	push   edi
c0012da5:	56                   	push   esi
c0012da6:	53                   	push   ebx
c0012da7:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012dad:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012db1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012db8:	57                   	push   edi
c0012db9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012dc0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012dc7:	e8 b3 fe ff ff       	call   c0012c7f <Reg::getLine(char*, char*, char*)>
c0012dcc:	83 c4 10             	add    esp,0x10
c0012dcf:	84 c0                	test   al,al
c0012dd1:	89 c6                	mov    esi,eax
c0012dd3:	74 44                	je     c0012e19 <Reg::readString(char*, char*, char*, int)+0x75>
c0012dd5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012ddc:	31 c0                	xor    eax,eax
c0012dde:	4a                   	dec    edx
c0012ddf:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012de2:	84 c9                	test   cl,cl
c0012de4:	74 0f                	je     c0012df5 <Reg::readString(char*, char*, char*, int)+0x51>
c0012de6:	39 c2                	cmp    edx,eax
c0012de8:	7e 0b                	jle    c0012df5 <Reg::readString(char*, char*, char*, int)+0x51>
c0012dea:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012ded:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012df2:	40                   	inc    eax
c0012df3:	eb ea                	jmp    c0012ddf <Reg::readString(char*, char*, char*, int)+0x3b>
c0012df5:	83 ec 0c             	sub    esp,0xc
c0012df8:	53                   	push   ebx
c0012df9:	e8 82 d7 fe ff       	call   c0000580 <strlen>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e06:	75 11                	jne    c0012e19 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	53                   	push   ebx
c0012e0c:	e8 6f d7 fe ff       	call   c0000580 <strlen>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e19:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e1f:	89 f0                	mov    eax,esi
c0012e21:	5b                   	pop    ebx
c0012e22:	5e                   	pop    esi
c0012e23:	5f                   	pop    edi
c0012e24:	c3                   	ret    

c0012e25 <Reg::readBool(char*, char*, bool*)>:
c0012e25:	83 ec 20             	sub    esp,0x20
c0012e28:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e2c:	50                   	push   eax
c0012e2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e35:	e8 7c fe ff ff       	call   c0012cb6 <Reg::readInt(char*, char*, int*)>
c0012e3a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e3e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e43:	0f 95 02             	setne  BYTE PTR [edx]
c0012e46:	83 c4 2c             	add    esp,0x2c
c0012e49:	c3                   	ret    

c0012e4a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012e4a:	53                   	push   ebx
c0012e4b:	83 ec 1c             	sub    esp,0x1c
c0012e4e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012e52:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012e56:	50                   	push   eax
c0012e57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e5f:	e8 c1 ff ff ff       	call   c0012e25 <Reg::readBool(char*, char*, bool*)>
c0012e64:	83 c4 10             	add    esp,0x10
c0012e67:	84 c0                	test   al,al
c0012e69:	74 04                	je     c0012e6f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012e6b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012e6f:	83 c4 18             	add    esp,0x18
c0012e72:	88 d8                	mov    al,bl
c0012e74:	5b                   	pop    ebx
c0012e75:	c3                   	ret    

c0012e76 <Reg::readIntWithDefault(char*, char*, int)>:
c0012e76:	53                   	push   ebx
c0012e77:	83 ec 1c             	sub    esp,0x1c
c0012e7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e7e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012e82:	50                   	push   eax
c0012e83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e8b:	e8 26 fe ff ff       	call   c0012cb6 <Reg::readInt(char*, char*, int*)>
c0012e90:	83 c4 10             	add    esp,0x10
c0012e93:	84 c0                	test   al,al
c0012e95:	74 04                	je     c0012e9b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012e97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e9b:	83 c4 18             	add    esp,0x18
c0012e9e:	89 d8                	mov    eax,ebx
c0012ea0:	5b                   	pop    ebx
c0012ea1:	c3                   	ret    

c0012ea2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012ea2:	57                   	push   edi
c0012ea3:	56                   	push   esi
c0012ea4:	53                   	push   ebx
c0012ea5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ea9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012ead:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012eb1:	56                   	push   esi
c0012eb2:	57                   	push   edi
c0012eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ebb:	e8 e4 fe ff ff       	call   c0012da4 <Reg::readString(char*, char*, char*, int)>
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	84 c0                	test   al,al
c0012ec5:	75 16                	jne    c0012edd <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012ec7:	50                   	push   eax
c0012ec8:	56                   	push   esi
c0012ec9:	6a 00                	push   0x0
c0012ecb:	57                   	push   edi
c0012ecc:	e8 1f d6 fe ff       	call   c00004f0 <memset>
c0012ed1:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012ed4:	89 de                	mov    esi,ebx
c0012ed6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	89 df                	mov    edi,ebx
c0012edd:	5b                   	pop    ebx
c0012ede:	89 f8                	mov    eax,edi
c0012ee0:	5e                   	pop    esi
c0012ee1:	5f                   	pop    edi
c0012ee2:	c3                   	ret    

c0012ee3 <SysEject(regs*)>:
c0012ee3:	83 ec 0c             	sub    esp,0xc
c0012ee6:	83 ca ff             	or     edx,0xffffffff
c0012ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eed:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012ef0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012ef5:	83 e9 41             	sub    ecx,0x41
c0012ef8:	83 f9 19             	cmp    ecx,0x19
c0012efb:	77 18                	ja     c0012f15 <SysEject(regs*)+0x32>
c0012efd:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f04:	85 c9                	test   ecx,ecx
c0012f06:	74 0d                	je     c0012f15 <SysEject(regs*)+0x32>
c0012f08:	83 ec 0c             	sub    esp,0xc
c0012f0b:	51                   	push   ecx
c0012f0c:	e8 0f a2 ff ff       	call   c000d120 <LogicalDisk::eject()>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	99                   	cdq    
c0012f15:	83 c4 0c             	add    esp,0xc
c0012f18:	c3                   	ret    

c0012f19 <SysExit(regs*)>:
c0012f19:	83 ec 18             	sub    esp,0x18
c0012f1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f20:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f23:	e8 10 2a 00 00       	call   c0015938 <terminateTask(int)>
c0012f28:	83 c8 ff             	or     eax,0xffffffff
c0012f2b:	83 c4 1c             	add    esp,0x1c
c0012f2e:	89 c2                	mov    edx,eax
c0012f30:	c3                   	ret    

c0012f31 <SysGetCwd(regs*)>:
c0012f31:	83 ec 10             	sub    esp,0x10
c0012f34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f38:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f43:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f46:	e8 6b 7d ff ff       	call   c000acb6 <Fs::getcwd(Process*, char*, int)>
c0012f4b:	83 c4 1c             	add    esp,0x1c
c0012f4e:	99                   	cdq    
c0012f4f:	c3                   	ret    

c0012f50 <SysGetPID(regs*)>:
c0012f50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f58:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f5a:	99                   	cdq    
c0012f5b:	c3                   	ret    

c0012f5c <SysGetRAMData(regs*)>:
c0012f5c:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012f66:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012f6c:	99                   	cdq    
c0012f6d:	f7 f9                	idiv   ecx
c0012f6f:	c1 e0 18             	shl    eax,0x18
c0012f72:	09 c8                	or     eax,ecx
c0012f74:	99                   	cdq    
c0012f75:	c3                   	ret    

c0012f76 <SysGetVGAPtr(regs*)>:
c0012f76:	55                   	push   ebp
c0012f77:	57                   	push   edi
c0012f78:	56                   	push   esi
c0012f79:	53                   	push   ebx
c0012f7a:	83 ec 18             	sub    esp,0x18
c0012f7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f81:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012f84:	e8 7b 24 00 00       	call   c0015404 <Thr::processFromPID(int)>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	89 c1                	mov    ecx,eax
c0012f8e:	b8 01 00 00 00       	mov    eax,0x1
c0012f93:	85 c9                	test   ecx,ecx
c0012f95:	74 57                	je     c0012fee <SysGetVGAPtr(regs*)+0x78>
c0012f97:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012f9b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012fa1:	74 0c                	je     c0012faf <SysGetVGAPtr(regs*)+0x39>
c0012fa3:	83 ec 0c             	sub    esp,0xc
c0012fa6:	55                   	push   ebp
c0012fa7:	e8 99 57 ff ff       	call   c0008745 <setActiveTerminal(VgaText*)>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012fb2:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012fb7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012fba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fbc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012fbf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fc2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012fc8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fcb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012fce:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012fd4:	50                   	push   eax
c0012fd5:	50                   	push   eax
c0012fd6:	68 ec 0d 02 c0       	push   0xc0020dec
c0012fdb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fde:	05 a8 0f 00 00       	add    eax,0xfa8
c0012fe3:	50                   	push   eax
c0012fe4:	e8 67 d6 fe ff       	call   c0000650 <strcpy>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	31 c0                	xor    eax,eax
c0012fee:	83 c4 0c             	add    esp,0xc
c0012ff1:	31 d2                	xor    edx,edx
c0012ff3:	5b                   	pop    ebx
c0012ff4:	5e                   	pop    esi
c0012ff5:	5f                   	pop    edi
c0012ff6:	5d                   	pop    ebp
c0012ff7:	c3                   	ret    

c0012ff8 <SysKill(regs*)>:
c0012ff8:	53                   	push   ebx
c0012ff9:	83 ec 08             	sub    esp,0x8
c0012ffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013000:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013004:	75 16                	jne    c001301c <SysKill(regs*)+0x24>
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	68 f6 0d 02 c0       	push   0xc0020df6
c001300e:	e8 ae d7 ff ff       	call   c00107c1 <KePanic(char const*)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	e9 89 00 00 00       	jmp    c00130a4 <SysKill(regs*)+0xac>
c001301b:	90                   	nop
c001301c:	83 ec 0c             	sub    esp,0xc
c001301f:	68 84 81 02 c0       	push   0xc0028184
c0013024:	e8 43 bb 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013029:	8d 76 00             	lea    esi,[esi+0x0]
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	85 c0                	test   eax,eax
c0013031:	74 19                	je     c001304c <SysKill(regs*)+0x54>
c0013033:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013036:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013039:	39 0a                	cmp    DWORD PTR [edx],ecx
c001303b:	74 33                	je     c0013070 <SysKill(regs*)+0x78>
c001303d:	52                   	push   edx
c001303e:	52                   	push   edx
c001303f:	50                   	push   eax
c0013040:	68 84 81 02 c0       	push   0xc0028184
c0013045:	e8 42 be 00 00       	call   c001ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001304a:	eb e0                	jmp    c001302c <SysKill(regs*)+0x34>
c001304c:	83 ec 0c             	sub    esp,0xc
c001304f:	68 78 81 02 c0       	push   0xc0028178
c0013054:	e8 13 bb 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013059:	8d 76 00             	lea    esi,[esi+0x0]
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	85 c0                	test   eax,eax
c0013061:	74 41                	je     c00130a4 <SysKill(regs*)+0xac>
c0013063:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013066:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013069:	39 0a                	cmp    DWORD PTR [edx],ecx
c001306b:	75 27                	jne    c0013094 <SysKill(regs*)+0x9c>
c001306d:	8d 76 00             	lea    esi,[esi+0x0]
c0013070:	51                   	push   ecx
c0013071:	51                   	push   ecx
c0013072:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001307a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001307d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013083:	e8 d3 db ff ff       	call   c0010c5b <KeRaiseSignal(SigHandlerBlock*, int)>
c0013088:	83 c4 10             	add    esp,0x10
c001308b:	31 c0                	xor    eax,eax
c001308d:	31 d2                	xor    edx,edx
c001308f:	eb 1b                	jmp    c00130ac <SysKill(regs*)+0xb4>
c0013091:	8d 76 00             	lea    esi,[esi+0x0]
c0013094:	52                   	push   edx
c0013095:	52                   	push   edx
c0013096:	50                   	push   eax
c0013097:	68 78 81 02 c0       	push   0xc0028178
c001309c:	e8 eb bd 00 00       	call   c001ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130a1:	eb b9                	jmp    c001305c <SysKill(regs*)+0x64>
c00130a3:	90                   	nop
c00130a4:	83 c8 ff             	or     eax,0xffffffff
c00130a7:	89 c2                	mov    edx,eax
c00130a9:	8d 76 00             	lea    esi,[esi+0x0]
c00130ac:	83 c4 08             	add    esp,0x8
c00130af:	5b                   	pop    ebx
c00130b0:	c3                   	ret    

c00130b1 <SysLoadDLL(regs*)>:
c00130b1:	56                   	push   esi
c00130b2:	31 d2                	xor    edx,edx
c00130b4:	53                   	push   ebx
c00130b5:	b8 01 00 00 00       	mov    eax,0x1
c00130ba:	51                   	push   ecx
c00130bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130bf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00130c3:	0f 84 8c 00 00 00    	je     c0013155 <SysLoadDLL(regs*)+0xa4>
c00130c9:	83 ec 0c             	sub    esp,0xc
c00130cc:	68 14 01 00 00       	push   0x114
c00130d1:	e8 e1 49 ff ff       	call   c0007ab7 <malloc>
c00130d6:	83 c4 0c             	add    esp,0xc
c00130d9:	89 c3                	mov    ebx,eax
c00130db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130e0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00130e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00130e6:	53                   	push   ebx
c00130e7:	e8 fa 7d ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c00130ec:	83 c4 10             	add    esp,0x10
c00130ef:	31 d2                	xor    edx,edx
c00130f1:	85 db                	test   ebx,ebx
c00130f3:	b8 02 00 00 00       	mov    eax,0x2
c00130f8:	74 5b                	je     c0013155 <SysLoadDLL(regs*)+0xa4>
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	53                   	push   ebx
c00130fe:	e8 0d 81 ff ff       	call   c000b210 <File::exists()>
c0013103:	83 c4 10             	add    esp,0x10
c0013106:	84 c0                	test   al,al
c0013108:	8b 03                	mov    eax,DWORD PTR [ebx]
c001310a:	75 11                	jne    c001311d <SysLoadDLL(regs*)+0x6c>
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	53                   	push   ebx
c0013110:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	b8 03 00 00 00       	mov    eax,0x3
c001311b:	eb 36                	jmp    c0013153 <SysLoadDLL(regs*)+0xa2>
c001311d:	83 ec 0c             	sub    esp,0xc
c0013120:	53                   	push   ebx
c0013121:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013124:	58                   	pop    eax
c0013125:	5a                   	pop    edx
c0013126:	6a 00                	push   0x0
c0013128:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001312b:	e8 20 14 00 00       	call   c0014550 <Thr::loadDLL(char const*, bool)>
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	31 d2                	xor    edx,edx
c0013135:	89 c1                	mov    ecx,eax
c0013137:	b8 04 00 00 00       	mov    eax,0x4
c001313c:	85 c9                	test   ecx,ecx
c001313e:	74 15                	je     c0013155 <SysLoadDLL(regs*)+0xa4>
c0013140:	53                   	push   ebx
c0013141:	53                   	push   ebx
c0013142:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013148:	51                   	push   ecx
c0013149:	e8 42 16 00 00       	call   c0014790 <Thr::executeDLL(unsigned long, void*)>
c001314e:	83 c4 10             	add    esp,0x10
c0013151:	31 c0                	xor    eax,eax
c0013153:	31 d2                	xor    edx,edx
c0013155:	59                   	pop    ecx
c0013156:	5b                   	pop    ebx
c0013157:	5e                   	pop    esi
c0013158:	c3                   	ret    

c0013159 <SysRead(regs*)>:
c0013159:	57                   	push   edi
c001315a:	56                   	push   esi
c001315b:	53                   	push   ebx
c001315c:	83 ec 10             	sub    esp,0x10
c001315f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013163:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013166:	83 f8 02             	cmp    eax,0x2
c0013169:	77 10                	ja     c001317b <SysRead(regs*)+0x22>
c001316b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013170:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013173:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013179:	eb 0e                	jmp    c0013189 <SysRead(regs*)+0x30>
c001317b:	83 ec 0c             	sub    esp,0xc
c001317e:	50                   	push   eax
c001317f:	e8 13 63 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0013184:	83 c4 10             	add    esp,0x10
c0013187:	89 c1                	mov    ecx,eax
c0013189:	83 c8 ff             	or     eax,0xffffffff
c001318c:	85 c9                	test   ecx,ecx
c001318e:	89 c2                	mov    edx,eax
c0013190:	74 28                	je     c00131ba <SysRead(regs*)+0x61>
c0013192:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	31 ff                	xor    edi,edi
c001319f:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a5:	52                   	push   edx
c00131a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00131a9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00131ac:	57                   	push   edi
c00131ad:	56                   	push   esi
c00131ae:	51                   	push   ecx
c00131af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00131b6:	83 c4 20             	add    esp,0x20
c00131b9:	99                   	cdq    
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	5b                   	pop    ebx
c00131be:	5e                   	pop    esi
c00131bf:	5f                   	pop    edi
c00131c0:	c3                   	ret    

c00131c1 <SysRegisterSignal(regs*)>:
c00131c1:	83 ec 18             	sub    esp,0x18
c00131c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131c8:	6a 00                	push   0x0
c00131ca:	6a 00                	push   0x0
c00131cc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00131cf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131da:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131e0:	e8 40 da ff ff       	call   c0010c25 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00131e5:	83 c4 2c             	add    esp,0x2c
c00131e8:	99                   	cdq    
c00131e9:	c3                   	ret    

c00131ea <SysRegistryGetTypeFromPath(regs*)>:
c00131ea:	57                   	push   edi
c00131eb:	56                   	push   esi
c00131ec:	53                   	push   ebx
c00131ed:	81 ec 38 01 00 00    	sub    esp,0x138
c00131f3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00131fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00131fd:	68 17 0e 02 c0       	push   0xc0020e17
c0013202:	e8 36 77 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0013207:	5a                   	pop    edx
c0013208:	59                   	pop    ecx
c0013209:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001320c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001320f:	e8 34 f6 ff ff       	call   c0012848 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013214:	5f                   	pop    edi
c0013215:	5a                   	pop    edx
c0013216:	89 c6                	mov    esi,eax
c0013218:	50                   	push   eax
c0013219:	68 37 0e 02 c0       	push   0xc0020e37
c001321e:	e8 1a 77 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	85 f6                	test   esi,esi
c0013228:	74 28                	je     c0013252 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001322a:	50                   	push   eax
c001322b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001322f:	57                   	push   edi
c0013230:	56                   	push   esi
c0013231:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013234:	e8 f4 f1 ff ff       	call   c001242d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013239:	83 c4 0c             	add    esp,0xc
c001323c:	57                   	push   edi
c001323d:	50                   	push   eax
c001323e:	89 c3                	mov    ebx,eax
c0013240:	68 3f 0e 02 c0       	push   0xc0020e3f
c0013245:	e8 f3 76 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001324a:	89 d8                	mov    eax,ebx
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	99                   	cdq    
c0013250:	eb 05                	jmp    c0013257 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013252:	83 c8 ff             	or     eax,0xffffffff
c0013255:	89 c2                	mov    edx,eax
c0013257:	81 c4 30 01 00 00    	add    esp,0x130
c001325d:	5b                   	pop    ebx
c001325e:	5e                   	pop    esi
c001325f:	5f                   	pop    edi
c0013260:	c3                   	ret    

c0013261 <SysRegistryReadExtent(regs*)>:
c0013261:	83 ec 1c             	sub    esp,0x1c
c0013264:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013268:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001326b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001326e:	85 c0                	test   eax,eax
c0013270:	79 1f                	jns    c0013291 <SysRegistryReadExtent(regs*)+0x30>
c0013272:	52                   	push   edx
c0013273:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013278:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001327c:	52                   	push   edx
c001327d:	50                   	push   eax
c001327e:	51                   	push   ecx
c001327f:	e8 9b f0 ff ff       	call   c001231f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013288:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001328c:	83 c4 10             	add    esp,0x10
c001328f:	eb 14                	jmp    c00132a5 <SysRegistryReadExtent(regs*)+0x44>
c0013291:	83 ec 04             	sub    esp,0x4
c0013294:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013297:	50                   	push   eax
c0013298:	51                   	push   ecx
c0013299:	e8 1f eb ff ff       	call   c0011dbd <CmGetString(Reghive_Tag*, int, char*)>
c001329e:	83 c4 10             	add    esp,0x10
c00132a1:	31 c0                	xor    eax,eax
c00132a3:	31 d2                	xor    edx,edx
c00132a5:	83 c4 1c             	add    esp,0x1c
c00132a8:	c3                   	ret    

c00132a9 <SysRegistryPathToExtentLookup(regs*)>:
c00132a9:	53                   	push   ebx
c00132aa:	83 ec 10             	sub    esp,0x10
c00132ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132b4:	68 55 0e 02 c0       	push   0xc0020e55
c00132b9:	e8 7f 76 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00132be:	58                   	pop    eax
c00132bf:	5a                   	pop    edx
c00132c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132c3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132c6:	e8 7d f5 ff ff       	call   c0012848 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132cb:	83 c4 18             	add    esp,0x18
c00132ce:	5b                   	pop    ebx
c00132cf:	99                   	cdq    
c00132d0:	c3                   	ret    

c00132d1 <SysRegistryEnterDirectory(regs*)>:
c00132d1:	53                   	push   ebx
c00132d2:	83 ec 10             	sub    esp,0x10
c00132d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132d9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132dc:	68 78 0e 02 c0       	push   0xc0020e78
c00132e1:	e8 57 76 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00132e6:	58                   	pop    eax
c00132e7:	5a                   	pop    edx
c00132e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132ee:	e8 41 eb ff ff       	call   c0011e34 <CmEnterDirectory(Reghive_Tag*, int)>
c00132f3:	83 c4 18             	add    esp,0x18
c00132f6:	5b                   	pop    ebx
c00132f7:	99                   	cdq    
c00132f8:	c3                   	ret    

c00132f9 <SysRegistryGetNext(regs*)>:
c00132f9:	53                   	push   ebx
c00132fa:	83 ec 10             	sub    esp,0x10
c00132fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013301:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013304:	68 96 0e 02 c0       	push   0xc0020e96
c0013309:	e8 2f 76 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001330e:	58                   	pop    eax
c001330f:	5a                   	pop    edx
c0013310:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013313:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013316:	e8 58 eb ff ff       	call   c0011e73 <CmGetNext(Reghive_Tag*, int)>
c001331b:	83 c4 18             	add    esp,0x18
c001331e:	5b                   	pop    ebx
c001331f:	99                   	cdq    
c0013320:	c3                   	ret    

c0013321 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013321:	57                   	push   edi
c0013322:	56                   	push   esi
c0013323:	53                   	push   ebx
c0013324:	81 ec 34 01 00 00    	sub    esp,0x134
c001332a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013331:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013335:	57                   	push   edi
c0013336:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013339:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001333c:	e8 ec f0 ff ff       	call   c001242d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013341:	89 c3                	mov    ebx,eax
c0013343:	58                   	pop    eax
c0013344:	5a                   	pop    edx
c0013345:	57                   	push   edi
c0013346:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013349:	e8 02 d3 fe ff       	call   c0000650 <strcpy>
c001334e:	81 c4 40 01 00 00    	add    esp,0x140
c0013354:	89 d8                	mov    eax,ebx
c0013356:	5b                   	pop    ebx
c0013357:	99                   	cdq    
c0013358:	5e                   	pop    esi
c0013359:	5f                   	pop    edi
c001335a:	c3                   	ret    

c001335b <SysRegistryOpen(regs*)>:
c001335b:	83 ec 18             	sub    esp,0x18
c001335e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013362:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013365:	e8 e3 e8 ff ff       	call   c0011c4d <CmOpen(char const*)>
c001336a:	83 c4 1c             	add    esp,0x1c
c001336d:	99                   	cdq    
c001336e:	c3                   	ret    

c001336f <SysRegistryClose(regs*)>:
c001336f:	83 ec 18             	sub    esp,0x18
c0013372:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013376:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013379:	e8 ed e9 ff ff       	call   c0011d6b <CmClose(Reghive_Tag*)>
c001337e:	31 c0                	xor    eax,eax
c0013380:	31 d2                	xor    edx,edx
c0013382:	83 c4 1c             	add    esp,0x1c
c0013385:	c3                   	ret    

c0013386 <SysSbrk(regs*)>:
c0013386:	56                   	push   esi
c0013387:	53                   	push   ebx
c0013388:	50                   	push   eax
c0013389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001338e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013392:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013395:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013398:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001339e:	85 db                	test   ebx,ebx
c00133a0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00133a3:	74 02                	je     c00133a7 <SysSbrk(regs*)+0x21>
c00133a5:	79 06                	jns    c00133ad <SysSbrk(regs*)+0x27>
c00133a7:	89 f0                	mov    eax,esi
c00133a9:	31 d2                	xor    edx,edx
c00133ab:	eb 2a                	jmp    c00133d7 <SysSbrk(regs*)+0x51>
c00133ad:	83 c8 ff             	or     eax,0xffffffff
c00133b0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00133b6:	89 c2                	mov    edx,eax
c00133b8:	77 1d                	ja     c00133d7 <SysSbrk(regs*)+0x51>
c00133ba:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00133c0:	50                   	push   eax
c00133c1:	68 07 0c 00 00       	push   0xc07
c00133c6:	c1 ea 0c             	shr    edx,0xc
c00133c9:	52                   	push   edx
c00133ca:	51                   	push   ecx
c00133cb:	e8 0c 6a ff ff       	call   c0009ddc <VAS::allocatePages(int, int)>
c00133d0:	89 f0                	mov    eax,esi
c00133d2:	31 d2                	xor    edx,edx
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	59                   	pop    ecx
c00133d8:	5b                   	pop    ebx
c00133d9:	5e                   	pop    esi
c00133da:	c3                   	ret    

c00133db <SysSetCwd(regs*)>:
c00133db:	83 ec 14             	sub    esp,0x14
c00133de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133ea:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00133ed:	e8 bd 7e ff ff       	call   c000b2af <Fs::setcwd(Process*, char*)>
c00133f2:	83 c4 1c             	add    esp,0x1c
c00133f5:	99                   	cdq    
c00133f6:	c3                   	ret    

c00133f7 <SysSetTime(regs*)>:
c00133f7:	55                   	push   ebp
c00133f8:	31 c9                	xor    ecx,ecx
c00133fa:	57                   	push   edi
c00133fb:	bd 0c 00 00 00       	mov    ebp,0xc
c0013400:	56                   	push   esi
c0013401:	53                   	push   ebx
c0013402:	31 db                	xor    ebx,ebx
c0013404:	83 ec 10             	sub    esp,0x10
c0013407:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001340b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001340e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013411:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013414:	89 c2                	mov    edx,eax
c0013416:	c1 e8 05             	shr    eax,0x5
c0013419:	83 e2 1f             	and    edx,0x1f
c001341c:	42                   	inc    edx
c001341d:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013423:	c1 e7 10             	shl    edi,0x10
c0013426:	88 d1                	mov    cl,dl
c0013428:	31 d2                	xor    edx,edx
c001342a:	f7 f5                	div    ebp
c001342c:	89 dd                	mov    ebp,ebx
c001342e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013434:	88 d5                	mov    ch,dl
c0013436:	31 d2                	xor    edx,edx
c0013438:	0f b7 c1             	movzx  eax,cx
c001343b:	09 f8                	or     eax,edi
c001343d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013442:	89 c1                	mov    ecx,eax
c0013444:	89 f0                	mov    eax,esi
c0013446:	f7 f7                	div    edi
c0013448:	c1 e2 10             	shl    edx,0x10
c001344b:	09 d5                	or     ebp,edx
c001344d:	31 d2                	xor    edx,edx
c001344f:	f7 f7                	div    edi
c0013451:	89 eb                	mov    ebx,ebp
c0013453:	bf 10 0e 00 00       	mov    edi,0xe10
c0013458:	89 f0                	mov    eax,esi
c001345a:	88 d7                	mov    bh,dl
c001345c:	31 d2                	xor    edx,edx
c001345e:	f7 f7                	div    edi
c0013460:	bf 18 00 00 00       	mov    edi,0x18
c0013465:	31 d2                	xor    edx,edx
c0013467:	f7 f7                	div    edi
c0013469:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001346e:	88 d3                	mov    bl,dl
c0013470:	53                   	push   ebx
c0013471:	51                   	push   ecx
c0013472:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013478:	e8 37 86 ff ff       	call   c000bab4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001347d:	83 c4 1c             	add    esp,0x1c
c0013480:	31 d2                	xor    edx,edx
c0013482:	5b                   	pop    ebx
c0013483:	5e                   	pop    esi
c0013484:	83 f0 01             	xor    eax,0x1
c0013487:	5f                   	pop    edi
c0013488:	0f b6 c0             	movzx  eax,al
c001348b:	5d                   	pop    ebp
c001348c:	c3                   	ret    

c001348d <SysTimezone(regs*)>:
c001348d:	53                   	push   ebx
c001348e:	83 ec 08             	sub    esp,0x8
c0013491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013495:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013499:	75 17                	jne    c00134b2 <SysTimezone(regs*)+0x25>
c001349b:	83 ec 0c             	sub    esp,0xc
c001349e:	68 ad 0e 02 c0       	push   0xc0020ead
c00134a3:	e8 95 74 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00134a8:	83 c8 ff             	or     eax,0xffffffff
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	89 c2                	mov    edx,eax
c00134b0:	eb 20                	jmp    c00134d2 <SysTimezone(regs*)+0x45>
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	68 c2 0e 02 c0       	push   0xc0020ec2
c00134ba:	e8 7e 74 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00134bf:	58                   	pop    eax
c00134c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134c3:	e8 50 83 ff ff       	call   c000b818 <User::loadClockSettings(int)>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	b8 01 00 00 00       	mov    eax,0x1
c00134d0:	31 d2                	xor    edx,edx
c00134d2:	83 c4 08             	add    esp,0x8
c00134d5:	5b                   	pop    ebx
c00134d6:	c3                   	ret    

c00134d7 <SysWrite(regs*)>:
c00134d7:	57                   	push   edi
c00134d8:	56                   	push   esi
c00134d9:	53                   	push   ebx
c00134da:	83 ec 10             	sub    esp,0x10
c00134dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00134e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134e4:	83 f8 02             	cmp    eax,0x2
c00134e7:	77 10                	ja     c00134f9 <SysWrite(regs*)+0x22>
c00134e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134f1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00134f7:	eb 0e                	jmp    c0013507 <SysWrite(regs*)+0x30>
c00134f9:	83 ec 0c             	sub    esp,0xc
c00134fc:	50                   	push   eax
c00134fd:	e8 95 5f ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	89 c1                	mov    ecx,eax
c0013507:	83 c8 ff             	or     eax,0xffffffff
c001350a:	85 c9                	test   ecx,ecx
c001350c:	89 c2                	mov    edx,eax
c001350e:	74 28                	je     c0013538 <SysWrite(regs*)+0x61>
c0013510:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	31 ff                	xor    edi,edi
c001351d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013521:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013523:	52                   	push   edx
c0013524:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013527:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001352a:	57                   	push   edi
c001352b:	56                   	push   esi
c001352c:	51                   	push   ecx
c001352d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013530:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013534:	83 c4 20             	add    esp,0x20
c0013537:	99                   	cdq    
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	5b                   	pop    ebx
c001353c:	5e                   	pop    esi
c001353d:	5f                   	pop    edi
c001353e:	c3                   	ret    

c001353f <SysWsbe(regs*)>:
c001353f:	57                   	push   edi
c0013540:	b9 0b 00 00 00       	mov    ecx,0xb
c0013545:	56                   	push   esi
c0013546:	be 01 0f 02 c0       	mov    esi,0xc0020f01
c001354b:	53                   	push   ebx
c001354c:	83 ec 30             	sub    esp,0x30
c001354f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013553:	fc                   	cld    
c0013554:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001355d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013562:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013565:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001356b:	8b 06                	mov    eax,DWORD PTR [esi]
c001356d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013570:	57                   	push   edi
c0013571:	e8 0a d0 fe ff       	call   c0000580 <strlen>
c0013576:	5a                   	pop    edx
c0013577:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001357b:	52                   	push   edx
c001357c:	31 d2                	xor    edx,edx
c001357e:	57                   	push   edi
c001357f:	52                   	push   edx
c0013580:	50                   	push   eax
c0013581:	56                   	push   esi
c0013582:	ff d3                	call   ebx
c0013584:	83 c4 14             	add    esp,0x14
c0013587:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001358b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001358e:	e8 a5 23 00 00       	call   c0015938 <terminateTask(int)>
c0013593:	83 c4 40             	add    esp,0x40
c0013596:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001359b:	5b                   	pop    ebx
c001359c:	31 d2                	xor    edx,edx
c001359e:	5e                   	pop    esi
c001359f:	5f                   	pop    edi
c00135a0:	c3                   	ret    

c00135a1 <SysYield(regs*)>:
c00135a1:	83 ec 0c             	sub    esp,0xc
c00135a4:	fa                   	cli    
c00135a5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00135ab:	e8 08 1a 00 00       	call   c0014fb8 <schedule()>
c00135b0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00135b5:	48                   	dec    eax
c00135b6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00135bb:	75 01                	jne    c00135be <SysYield(regs*)+0x1d>
c00135bd:	fb                   	sti    
c00135be:	31 c0                	xor    eax,eax
c00135c0:	31 d2                	xor    edx,edx
c00135c2:	83 c4 0c             	add    esp,0xc
c00135c5:	c3                   	ret    

c00135c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00135c6:	55                   	push   ebp
c00135c7:	57                   	push   edi
c00135c8:	56                   	push   esi
c00135c9:	53                   	push   ebx
c00135ca:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00135d0:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00135db:	74 3b                	je     c0013618 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00135dd:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00135e5:	74 31                	je     c0013618 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00135e7:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00135ef:	75 27                	jne    c0013618 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00135f1:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00135f8:	05 00 10 00 00       	add    eax,0x1000
c00135fd:	89 c2                	mov    edx,eax
c00135ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013604:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001360b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013611:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013618:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001361f:	83 ec 0c             	sub    esp,0xc
c0013622:	6a 01                	push   0x1
c0013624:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001362a:	e8 c2 5f ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001362f:	83 c4 10             	add    esp,0x10
c0013632:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013638:	89 c3                	mov    ebx,eax
c001363a:	0f 86 26 01 00 00    	jbe    c0013766 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0013640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013648:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001364f:	c1 ee 0c             	shr    esi,0xc
c0013652:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013656:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001365d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013668:	29 ef                	sub    edi,ebp
c001366a:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001366e:	0f 83 f9 00 00 00    	jae    c001376d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013674:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001367a:	b8 00 10 00 00       	mov    eax,0x1000
c001367f:	0f 47 f8             	cmova  edi,eax
c0013682:	83 ec 0c             	sub    esp,0xc
c0013685:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001368c:	31 d2                	xor    edx,edx
c001368e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013690:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013694:	50                   	push   eax
c0013695:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013699:	56                   	push   esi
c001369a:	52                   	push   edx
c001369b:	57                   	push   edi
c001369c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00136a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136a6:	83 c4 20             	add    esp,0x20
c00136a9:	85 c0                	test   eax,eax
c00136ab:	75 06                	jne    c00136b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00136ad:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00136b1:	74 13                	je     c00136c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00136b3:	83 ec 0c             	sub    esp,0xc
c00136b6:	53                   	push   ebx
c00136b7:	e8 47 62 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c00136bc:	83 c4 10             	add    esp,0x10
c00136bf:	31 c0                	xor    eax,eax
c00136c1:	e9 7c 01 00 00       	jmp    c0013842 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00136c6:	fa                   	cli    
c00136c7:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136cd:	e8 f0 46 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c00136d2:	6a 07                	push   0x7
c00136d4:	53                   	push   ebx
c00136d5:	50                   	push   eax
c00136d6:	89 c7                	mov    edi,eax
c00136d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136e0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00136e6:	e8 e5 65 ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00136eb:	83 c4 0c             	add    esp,0xc
c00136ee:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00136f5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00136fb:	6a 00                	push   0x0
c00136fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013702:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013705:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001370b:	e8 26 64 ff ff       	call   c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>
c0013710:	58                   	pop    eax
c0013711:	5a                   	pop    edx
c0013712:	68 07 0c 00 00       	push   0xc07
c0013717:	55                   	push   ebp
c0013718:	57                   	push   edi
c0013719:	89 df                	mov    edi,ebx
c001371b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013722:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013728:	6a 00                	push   0x0
c001372a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001372f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013732:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013738:	e8 75 69 ff ff       	call   c000a0b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001373d:	b9 00 10 00 00       	mov    ecx,0x1000
c0013742:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013744:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013749:	83 c4 20             	add    esp,0x20
c001374c:	48                   	dec    eax
c001374d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013752:	85 c0                	test   eax,eax
c0013754:	75 01                	jne    c0013757 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013756:	fb                   	sti    
c0013757:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001375b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013761:	e9 f0 fe ff ff       	jmp    c0013656 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013766:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001376d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013774:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001377a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013780:	0f 86 ae 00 00 00    	jbe    c0013834 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013786:	fa                   	cli    
c0013787:	51                   	push   ecx
c0013788:	31 ff                	xor    edi,edi
c001378a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013791:	c1 ee 0c             	shr    esi,0xc
c0013794:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001379a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137a0:	6a 00                	push   0x0
c00137a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137aa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b0:	e8 81 63 ff ff       	call   c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>
c00137b5:	83 c4 10             	add    esp,0x10
c00137b8:	e8 05 46 ff ff       	call   c0007dc2 <Phys::allocatePage()>
c00137bd:	47                   	inc    edi
c00137be:	6a 07                	push   0x7
c00137c0:	53                   	push   ebx
c00137c1:	50                   	push   eax
c00137c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00137cc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00137cf:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00137d5:	e8 f6 64 ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00137da:	58                   	pop    eax
c00137db:	5a                   	pop    edx
c00137dc:	68 07 0c 00 00       	push   0xc07
c00137e1:	55                   	push   ebp
c00137e2:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137ec:	50                   	push   eax
c00137ed:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137f4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137fa:	6a 00                	push   0x0
c00137fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013801:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013804:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001380a:	e8 a3 68 ff ff       	call   c000a0b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001380f:	83 c4 1c             	add    esp,0x1c
c0013812:	68 00 10 00 00       	push   0x1000
c0013817:	6a 00                	push   0x0
c0013819:	53                   	push   ebx
c001381a:	e8 d1 cc fe ff       	call   c00004f0 <memset>
c001381f:	83 c4 10             	add    esp,0x10
c0013822:	39 fe                	cmp    esi,edi
c0013824:	77 92                	ja     c00137b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013826:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001382b:	48                   	dec    eax
c001382c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013831:	75 01                	jne    c0013834 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013833:	fb                   	sti    
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	53                   	push   ebx
c0013838:	e8 c6 60 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	b0 01                	mov    al,0x1
c0013842:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013848:	5b                   	pop    ebx
c0013849:	5e                   	pop    esi
c001384a:	5f                   	pop    edi
c001384b:	5d                   	pop    ebp
c001384c:	c3                   	ret    

c001384d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001384d:	55                   	push   ebp
c001384e:	57                   	push   edi
c001384f:	56                   	push   esi
c0013850:	53                   	push   ebx
c0013851:	83 ec 48             	sub    esp,0x48
c0013854:	68 14 01 00 00       	push   0x114
c0013859:	e8 59 42 ff ff       	call   c0007ab7 <malloc>
c001385e:	83 c4 0c             	add    esp,0xc
c0013861:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013865:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013869:	89 c7                	mov    edi,eax
c001386b:	50                   	push   eax
c001386c:	e8 75 76 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0013871:	58                   	pop    eax
c0013872:	5a                   	pop    edx
c0013873:	6a 01                	push   0x1
c0013875:	57                   	push   edi
c0013876:	e8 27 77 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c001387b:	83 c4 10             	add    esp,0x10
c001387e:	85 c0                	test   eax,eax
c0013880:	0f 85 4c 01 00 00    	jne    c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013886:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001388e:	83 ec 0c             	sub    esp,0xc
c0013891:	6a 34                	push   0x34
c0013893:	e8 1f 42 ff ff       	call   c0007ab7 <malloc>
c0013898:	89 c3                	mov    ebx,eax
c001389a:	58                   	pop    eax
c001389b:	8b 07                	mov    eax,DWORD PTR [edi]
c001389d:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138a1:	56                   	push   esi
c00138a2:	53                   	push   ebx
c00138a3:	6a 00                	push   0x0
c00138a5:	6a 34                	push   0x34
c00138a7:	57                   	push   edi
c00138a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138ab:	83 c4 20             	add    esp,0x20
c00138ae:	85 c0                	test   eax,eax
c00138b0:	0f 85 1c 01 00 00    	jne    c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138b6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00138bc:	0f 85 10 01 00 00    	jne    c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138c5:	85 c0                	test   eax,eax
c00138c7:	0f 84 05 01 00 00    	je     c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	55                   	push   ebp
c00138d0:	52                   	push   edx
c00138d1:	50                   	push   eax
c00138d2:	57                   	push   edi
c00138d3:	e8 88 77 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c00138d8:	83 c4 10             	add    esp,0x10
c00138db:	85 c0                	test   eax,eax
c00138dd:	0f 85 ef 00 00 00    	jne    c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138e3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00138ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00138f1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00138f5:	0f af c2             	imul   eax,edx
c00138f8:	50                   	push   eax
c00138f9:	e8 b9 41 ff ff       	call   c0007ab7 <malloc>
c00138fe:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013900:	89 34 24             	mov    DWORD PTR [esp],esi
c0013903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013907:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001390b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001390f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013913:	0f af c2             	imul   eax,edx
c0013916:	99                   	cdq    
c0013917:	52                   	push   edx
c0013918:	50                   	push   eax
c0013919:	57                   	push   edi
c001391a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001391d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013920:	83 c4 20             	add    esp,0x20
c0013923:	85 c0                	test   eax,eax
c0013925:	0f 84 a7 00 00 00    	je     c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001392b:	31 d2                	xor    edx,edx
c001392d:	51                   	push   ecx
c001392e:	52                   	push   edx
c001392f:	50                   	push   eax
c0013930:	57                   	push   edi
c0013931:	e8 2a 77 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013936:	83 c4 10             	add    esp,0x10
c0013939:	85 c0                	test   eax,eax
c001393b:	0f 85 91 00 00 00    	jne    c00139d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013941:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013945:	83 ec 0c             	sub    esp,0xc
c0013948:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001394c:	0f af c2             	imul   eax,edx
c001394f:	50                   	push   eax
c0013950:	e8 62 41 ff ff       	call   c0007ab7 <malloc>
c0013955:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013957:	89 34 24             	mov    DWORD PTR [esp],esi
c001395a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001395e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013962:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013966:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001396a:	0f af c2             	imul   eax,edx
c001396d:	99                   	cdq    
c001396e:	52                   	push   edx
c001396f:	50                   	push   eax
c0013970:	57                   	push   edi
c0013971:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013974:	83 c4 20             	add    esp,0x20
c0013977:	31 c9                	xor    ecx,ecx
c0013979:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013981:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013985:	0f b7 e9             	movzx  ebp,cx
c0013988:	0f 83 86 00 00 00    	jae    c0013a14 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c001398e:	c1 e5 05             	shl    ebp,0x5
c0013991:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013995:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013999:	75 73                	jne    c0013a0e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001399b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001399f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139a2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00139a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139a9:	52                   	push   edx
c00139aa:	31 d2                	xor    edx,edx
c00139ac:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00139af:	52                   	push   edx
c00139b0:	50                   	push   eax
c00139b1:	57                   	push   edi
c00139b2:	e8 a9 76 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c00139b7:	83 c4 10             	add    esp,0x10
c00139ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00139be:	85 c0                	test   eax,eax
c00139c0:	74 17                	je     c00139d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00139c2:	83 ec 0c             	sub    esp,0xc
c00139c5:	68 2d 0f 02 c0       	push   0xc0020f2d
c00139ca:	e8 6e 6f ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00139cf:	83 c4 10             	add    esp,0x10
c00139d2:	31 c0                	xor    eax,eax
c00139d4:	e9 8b 00 00 00       	jmp    c0013a64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00139d9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00139dd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00139e6:	50                   	push   eax
c00139e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00139eb:	56                   	push   esi
c00139ec:	57                   	push   edi
c00139ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00139f1:	e8 d0 fb ff ff       	call   c00135c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00139f6:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00139fa:	83 c4 20             	add    esp,0x20
c00139fd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a05:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a0a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a0e:	41                   	inc    ecx
c0013a0f:	e9 6d ff ff ff       	jmp    c0013981 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a14:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a18:	83 ec 0c             	sub    esp,0xc
c0013a1b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a23:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013a29:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013a2f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a34:	05 00 10 00 00       	add    eax,0x1000
c0013a39:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a40:	e8 82 40 ff ff       	call   c0007ac7 <free>
c0013a45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a48:	e8 7a 40 ff ff       	call   c0007ac7 <free>
c0013a4d:	58                   	pop    eax
c0013a4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a52:	e8 70 40 ff ff       	call   c0007ac7 <free>
c0013a57:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a5a:	e8 a1 75 ff ff       	call   c000b000 <File::close()>
c0013a5f:	83 c4 10             	add    esp,0x10
c0013a62:	b0 01                	mov    al,0x1
c0013a64:	83 c4 3c             	add    esp,0x3c
c0013a67:	5b                   	pop    ebx
c0013a68:	5e                   	pop    esi
c0013a69:	5f                   	pop    edi
c0013a6a:	5d                   	pop    ebp
c0013a6b:	c3                   	ret    

c0013a6c <Thr::runtimeReferenceHelper()>:
c0013a6c:	83 ec 18             	sub    esp,0x18
c0013a6f:	68 35 0f 02 c0       	push   0xc0020f35
c0013a74:	e8 c4 6e ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0013a79:	fa                   	cli    
c0013a7a:	83 c4 10             	add    esp,0x10
c0013a7d:	eb fe                	jmp    c0013a7d <Thr::runtimeReferenceHelper()+0x11>

c0013a7f <Thr::getAddressOfKernelSymbol(char const*)>:
c0013a7f:	57                   	push   edi
c0013a80:	56                   	push   esi
c0013a81:	53                   	push   ebx
c0013a82:	31 db                	xor    ebx,ebx
c0013a84:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013a8a:	7e 3c                	jle    c0013ac8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013a8c:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013a93:	31 ff                	xor    edi,edi
c0013a95:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013a9c:	7e 27                	jle    c0013ac5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013a9e:	50                   	push   eax
c0013a9f:	50                   	push   eax
c0013aa0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aa4:	8b 06                	mov    eax,DWORD PTR [esi]
c0013aa6:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013aad:	50                   	push   eax
c0013aae:	e8 cd cc fe ff       	call   c0000780 <strcmp>
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	85 c0                	test   eax,eax
c0013ab8:	75 05                	jne    c0013abf <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013aba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013abd:	eb 0b                	jmp    c0013aca <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013abf:	83 c6 10             	add    esi,0x10
c0013ac2:	47                   	inc    edi
c0013ac3:	eb d0                	jmp    c0013a95 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013ac5:	43                   	inc    ebx
c0013ac6:	eb bc                	jmp    c0013a84 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013ac8:	31 c0                	xor    eax,eax
c0013aca:	5b                   	pop    ebx
c0013acb:	5e                   	pop    esi
c0013acc:	5f                   	pop    edi
c0013acd:	c3                   	ret    

c0013ace <Thr::loadKernelSymbolTable(char const*)>:
c0013ace:	55                   	push   ebp
c0013acf:	57                   	push   edi
c0013ad0:	56                   	push   esi
c0013ad1:	53                   	push   ebx
c0013ad2:	83 ec 68             	sub    esp,0x68
c0013ad5:	68 14 01 00 00       	push   0x114
c0013ada:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013ae0:	e8 d2 3f ff ff       	call   c0007ab7 <malloc>
c0013ae5:	83 c4 0c             	add    esp,0xc
c0013ae8:	56                   	push   esi
c0013ae9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013aed:	89 c3                	mov    ebx,eax
c0013aef:	50                   	push   eax
c0013af0:	e8 f1 73 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0013af5:	5e                   	pop    esi
c0013af6:	5f                   	pop    edi
c0013af7:	6a 01                	push   0x1
c0013af9:	53                   	push   ebx
c0013afa:	e8 a3 74 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0013aff:	83 c4 10             	add    esp,0x10
c0013b02:	85 c0                	test   eax,eax
c0013b04:	74 0a                	je     c0013b10 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b06:	83 ec 0c             	sub    esp,0xc
c0013b09:	68 57 0f 02 c0       	push   0xc0020f57
c0013b0e:	eb 34                	jmp    c0013b44 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b10:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	6a 34                	push   0x34
c0013b1d:	e8 95 3f ff ff       	call   c0007ab7 <malloc>
c0013b22:	59                   	pop    ecx
c0013b23:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b27:	89 c7                	mov    edi,eax
c0013b29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b2b:	56                   	push   esi
c0013b2c:	57                   	push   edi
c0013b2d:	6a 00                	push   0x0
c0013b2f:	6a 34                	push   0x34
c0013b31:	53                   	push   ebx
c0013b32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b35:	83 c4 20             	add    esp,0x20
c0013b38:	85 c0                	test   eax,eax
c0013b3a:	74 17                	je     c0013b53 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	68 6e 0f 02 c0       	push   0xc0020f6e
c0013b44:	e8 78 cc ff ff       	call   c00107c1 <KePanic(char const*)>
c0013b49:	83 c4 10             	add    esp,0x10
c0013b4c:	31 c0                	xor    eax,eax
c0013b4e:	e9 31 02 00 00       	jmp    c0013d84 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013b53:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013b59:	75 e1                	jne    c0013b3c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b5b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013b5e:	85 c0                	test   eax,eax
c0013b60:	74 da                	je     c0013b3c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b62:	52                   	push   edx
c0013b63:	31 d2                	xor    edx,edx
c0013b65:	52                   	push   edx
c0013b66:	50                   	push   eax
c0013b67:	53                   	push   ebx
c0013b68:	e8 f3 74 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013b6d:	83 c4 10             	add    esp,0x10
c0013b70:	85 c0                	test   eax,eax
c0013b72:	75 c8                	jne    c0013b3c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b74:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	31 ed                	xor    ebp,ebp
c0013b7d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b81:	0f af c2             	imul   eax,edx
c0013b84:	50                   	push   eax
c0013b85:	e8 2d 3f ff ff       	call   c0007ab7 <malloc>
c0013b8a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013b8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b97:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013b9b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b9f:	0f af c2             	imul   eax,edx
c0013ba2:	99                   	cdq    
c0013ba3:	52                   	push   edx
c0013ba4:	50                   	push   eax
c0013ba5:	53                   	push   ebx
c0013ba6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ba9:	83 c4 20             	add    esp,0x20
c0013bac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013bb4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013bbc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013bc4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013bcc:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013bd0:	0f b7 f5             	movzx  esi,bp
c0013bd3:	0f 83 a7 00 00 00    	jae    c0013c80 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013bd9:	6b f6 28             	imul   esi,esi,0x28
c0013bdc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013be0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013be3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013be7:	50                   	push   eax
c0013be8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013bf0:	8b 16                	mov    edx,DWORD PTR [esi]
c0013bf2:	6b c0 28             	imul   eax,eax,0x28
c0013bf5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013bf9:	89 d0                	mov    eax,edx
c0013bfb:	31 d2                	xor    edx,edx
c0013bfd:	52                   	push   edx
c0013bfe:	50                   	push   eax
c0013bff:	53                   	push   ebx
c0013c00:	e8 5b 74 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013c05:	83 c4 0c             	add    esp,0xc
c0013c08:	6a 20                	push   0x20
c0013c0a:	6a 00                	push   0x0
c0013c0c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c10:	52                   	push   edx
c0013c11:	e8 da c8 fe ff       	call   c00004f0 <memset>
c0013c16:	58                   	pop    eax
c0013c17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c19:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c1d:	51                   	push   ecx
c0013c1e:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c22:	52                   	push   edx
c0013c23:	6a 00                	push   0x0
c0013c25:	6a 1f                	push   0x1f
c0013c27:	53                   	push   ebx
c0013c28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c2b:	83 c4 18             	add    esp,0x18
c0013c2e:	68 85 0f 02 c0       	push   0xc0020f85
c0013c33:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c37:	52                   	push   edx
c0013c38:	e8 43 cb fe ff       	call   c0000780 <strcmp>
c0013c3d:	83 c4 10             	add    esp,0x10
c0013c40:	85 c0                	test   eax,eax
c0013c42:	75 0f                	jne    c0013c53 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013c44:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c53:	50                   	push   eax
c0013c54:	50                   	push   eax
c0013c55:	68 8d 0f 02 c0       	push   0xc0020f8d
c0013c5a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013c5e:	50                   	push   eax
c0013c5f:	e8 1c cb fe ff       	call   c0000780 <strcmp>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	85 c0                	test   eax,eax
c0013c69:	75 0f                	jne    c0013c7a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013c6b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c7a:	45                   	inc    ebp
c0013c7b:	e9 4c ff ff ff       	jmp    c0013bcc <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013c80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013c85:	75 10                	jne    c0013c97 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013c87:	83 ec 0c             	sub    esp,0xc
c0013c8a:	68 95 0f 02 c0       	push   0xc0020f95
c0013c8f:	e8 2d cb ff ff       	call   c00107c1 <KePanic(char const*)>
c0013c94:	83 c4 10             	add    esp,0x10
c0013c97:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013c9c:	75 10                	jne    c0013cae <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	68 95 0f 02 c0       	push   0xc0020f95
c0013ca6:	e8 16 cb ff ff       	call   c00107c1 <KePanic(char const*)>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	50                   	push   eax
c0013caf:	31 d2                	xor    edx,edx
c0013cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb5:	52                   	push   edx
c0013cb6:	50                   	push   eax
c0013cb7:	53                   	push   ebx
c0013cb8:	e8 a3 73 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013cbd:	5a                   	pop    edx
c0013cbe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013cc2:	e8 f0 3d ff ff       	call   c0007ab7 <malloc>
c0013cc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ccb:	31 c9                	xor    ecx,ecx
c0013ccd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd3:	5e                   	pop    esi
c0013cd4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013cd8:	55                   	push   ebp
c0013cd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cdd:	51                   	push   ecx
c0013cde:	52                   	push   edx
c0013cdf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013ce3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013ce7:	53                   	push   ebx
c0013ce8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ceb:	83 c4 14             	add    esp,0x14
c0013cee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cf2:	e8 c0 3d ff ff       	call   c0007ab7 <malloc>
c0013cf7:	89 c6                	mov    esi,eax
c0013cf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013cfe:	56                   	push   esi
c0013cff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d03:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d07:	51                   	push   ecx
c0013d08:	52                   	push   edx
c0013d09:	53                   	push   ebx
c0013d0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d11:	83 c4 1c             	add    esp,0x1c
c0013d14:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d1a:	c1 e8 04             	shr    eax,0x4
c0013d1d:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d28:	31 d2                	xor    edx,edx
c0013d2a:	52                   	push   edx
c0013d2b:	50                   	push   eax
c0013d2c:	53                   	push   ebx
c0013d2d:	e8 2e 73 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013d32:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013d34:	31 d2                	xor    edx,edx
c0013d36:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d39:	56                   	push   esi
c0013d3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d3e:	52                   	push   edx
c0013d3f:	50                   	push   eax
c0013d40:	53                   	push   ebx
c0013d41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d44:	83 c4 14             	add    esp,0x14
c0013d47:	53                   	push   ebx
c0013d48:	e8 b3 72 ff ff       	call   c000b000 <File::close()>
c0013d4d:	5d                   	pop    ebp
c0013d4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d52:	e8 70 3d ff ff       	call   c0007ac7 <free>
c0013d57:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d5a:	e8 68 3d ff ff       	call   c0007ac7 <free>
c0013d5f:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013d64:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013d72:	8d 50 01             	lea    edx,[eax+0x1]
c0013d75:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013d7c:	b0 01                	mov    al,0x1
c0013d7e:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013d84:	83 c4 5c             	add    esp,0x5c
c0013d87:	5b                   	pop    ebx
c0013d88:	5e                   	pop    esi
c0013d89:	5f                   	pop    edi
c0013d8a:	5d                   	pop    ebp
c0013d8b:	c3                   	ret    

c0013d8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013d8c:	55                   	push   ebp
c0013d8d:	57                   	push   edi
c0013d8e:	56                   	push   esi
c0013d8f:	53                   	push   ebx
c0013d90:	81 ec 68 03 00 00    	sub    esp,0x368
c0013d96:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013d9d:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013da3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013da7:	68 14 01 00 00       	push   0x114
c0013dac:	e8 06 3d ff ff       	call   c0007ab7 <malloc>
c0013db1:	83 c4 0c             	add    esp,0xc
c0013db4:	56                   	push   esi
c0013db5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013dbc:	50                   	push   eax
c0013dbd:	89 c3                	mov    ebx,eax
c0013dbf:	e8 22 71 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0013dc4:	5f                   	pop    edi
c0013dc5:	5d                   	pop    ebp
c0013dc6:	6a 01                	push   0x1
c0013dc8:	53                   	push   ebx
c0013dc9:	e8 d4 71 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	85 c0                	test   eax,eax
c0013dd3:	0f 85 b3 06 00 00    	jne    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013dd9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013de1:	83 ec 0c             	sub    esp,0xc
c0013de4:	6a 34                	push   0x34
c0013de6:	e8 cc 3c ff ff       	call   c0007ab7 <malloc>
c0013deb:	5e                   	pop    esi
c0013dec:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013df0:	89 c5                	mov    ebp,eax
c0013df2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df4:	56                   	push   esi
c0013df5:	55                   	push   ebp
c0013df6:	6a 00                	push   0x0
c0013df8:	6a 34                	push   0x34
c0013dfa:	53                   	push   ebx
c0013dfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013dfe:	83 c4 20             	add    esp,0x20
c0013e01:	85 c0                	test   eax,eax
c0013e03:	0f 85 83 06 00 00    	jne    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e09:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e10:	0f 85 76 06 00 00    	jne    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e16:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013e19:	85 c0                	test   eax,eax
c0013e1b:	0f 84 6b 06 00 00    	je     c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e21:	31 d2                	xor    edx,edx
c0013e23:	51                   	push   ecx
c0013e24:	52                   	push   edx
c0013e25:	50                   	push   eax
c0013e26:	53                   	push   ebx
c0013e27:	e8 34 72 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013e2c:	83 c4 10             	add    esp,0x10
c0013e2f:	85 c0                	test   eax,eax
c0013e31:	0f 85 55 06 00 00    	jne    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e37:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013e3a:	83 ec 0c             	sub    esp,0xc
c0013e3d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013e41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013e45:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013e49:	0f af c2             	imul   eax,edx
c0013e4c:	50                   	push   eax
c0013e4d:	e8 65 3c ff ff       	call   c0007ab7 <malloc>
c0013e52:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e54:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e5f:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013e63:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013e67:	0f af c2             	imul   eax,edx
c0013e6a:	99                   	cdq    
c0013e6b:	52                   	push   edx
c0013e6c:	50                   	push   eax
c0013e6d:	53                   	push   ebx
c0013e6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e71:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013e74:	83 c4 20             	add    esp,0x20
c0013e77:	85 c0                	test   eax,eax
c0013e79:	0f 84 0d 06 00 00    	je     c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e7f:	52                   	push   edx
c0013e80:	31 d2                	xor    edx,edx
c0013e82:	52                   	push   edx
c0013e83:	50                   	push   eax
c0013e84:	53                   	push   ebx
c0013e85:	e8 d6 71 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013e8a:	83 c4 10             	add    esp,0x10
c0013e8d:	85 c0                	test   eax,eax
c0013e8f:	0f 85 f7 05 00 00    	jne    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e95:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013e99:	83 ec 0c             	sub    esp,0xc
c0013e9c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013ea0:	0f af c2             	imul   eax,edx
c0013ea3:	50                   	push   eax
c0013ea4:	e8 0e 3c ff ff       	call   c0007ab7 <malloc>
c0013ea9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013eab:	89 34 24             	mov    DWORD PTR [esp],esi
c0013eae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb6:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013eba:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013ebe:	0f af c2             	imul   eax,edx
c0013ec1:	99                   	cdq    
c0013ec2:	52                   	push   edx
c0013ec3:	50                   	push   eax
c0013ec4:	53                   	push   ebx
c0013ec5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ec8:	83 c4 20             	add    esp,0x20
c0013ecb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013ed1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013ed4:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013ed8:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013edc:	73 78                	jae    c0013f56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013ede:	c1 e7 05             	shl    edi,0x5
c0013ee1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013ee5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013ee8:	75 63                	jne    c0013f4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013eea:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013eed:	31 d2                	xor    edx,edx
c0013eef:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013ef2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ef6:	50                   	push   eax
c0013ef7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013efa:	52                   	push   edx
c0013efb:	50                   	push   eax
c0013efc:	53                   	push   ebx
c0013efd:	e8 5e 71 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013f02:	83 c4 10             	add    esp,0x10
c0013f05:	85 c0                	test   eax,eax
c0013f07:	0f 85 7f 05 00 00    	jne    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f0d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	31 d2                	xor    edx,edx
c0013f19:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013f1d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f1f:	01 c6                	add    esi,eax
c0013f21:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013f28:	50                   	push   eax
c0013f29:	56                   	push   esi
c0013f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2e:	52                   	push   edx
c0013f2f:	50                   	push   eax
c0013f30:	53                   	push   ebx
c0013f31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f34:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013f37:	83 c4 1c             	add    esp,0x1c
c0013f3a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013f3d:	50                   	push   eax
c0013f3e:	6a 00                	push   0x0
c0013f40:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013f44:	56                   	push   esi
c0013f45:	e8 a6 c5 fe ff       	call   c00004f0 <memset>
c0013f4a:	83 c4 10             	add    esp,0x10
c0013f4d:	66 ff 04 24          	inc    WORD PTR [esp]
c0013f51:	e9 7b ff ff ff       	jmp    c0013ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0013f56:	50                   	push   eax
c0013f57:	68 00 01 00 00       	push   0x100
c0013f5c:	6a 00                	push   0x0
c0013f5e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013f62:	50                   	push   eax
c0013f63:	e8 88 c5 fe ff       	call   c00004f0 <memset>
c0013f68:	83 c4 0c             	add    esp,0xc
c0013f6b:	68 00 01 00 00       	push   0x100
c0013f70:	6a 00                	push   0x0
c0013f72:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013f79:	50                   	push   eax
c0013f7a:	e8 71 c5 fe ff       	call   c00004f0 <memset>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0013f89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013f90:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f98:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013fa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fa8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013fb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fb4:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0013fb8:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0013fbd:	0f 83 16 01 00 00    	jae    c00140d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0013fc3:	6b ff 28             	imul   edi,edi,0x28
c0013fc6:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0013fca:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0013fcd:	51                   	push   ecx
c0013fce:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0013fd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fd6:	8b 07                	mov    eax,DWORD PTR [edi]
c0013fd8:	6b d2 28             	imul   edx,edx,0x28
c0013fdb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013fdf:	31 d2                	xor    edx,edx
c0013fe1:	52                   	push   edx
c0013fe2:	50                   	push   eax
c0013fe3:	53                   	push   ebx
c0013fe4:	e8 77 70 ff ff       	call   c000b060 <File::seek(unsigned long long)>
c0013fe9:	83 c4 0c             	add    esp,0xc
c0013fec:	6a 20                	push   0x20
c0013fee:	6a 00                	push   0x0
c0013ff0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013ff7:	51                   	push   ecx
c0013ff8:	e8 f3 c4 fe ff       	call   c00004f0 <memset>
c0013ffd:	58                   	pop    eax
c0013ffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014000:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014004:	52                   	push   edx
c0014005:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001400c:	51                   	push   ecx
c001400d:	6a 00                	push   0x0
c001400f:	6a 1f                	push   0x1f
c0014011:	53                   	push   ebx
c0014012:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014015:	83 c4 1c             	add    esp,0x1c
c0014018:	6a 09                	push   0x9
c001401a:	68 af 0f 02 c0       	push   0xc0020faf
c001401f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014026:	51                   	push   ecx
c0014027:	e8 54 c3 fe ff       	call   c0000380 <memcmp>
c001402c:	83 c4 10             	add    esp,0x10
c001402f:	85 c0                	test   eax,eax
c0014031:	75 1a                	jne    c001404d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014033:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014036:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014039:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001403d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014040:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014047:	89 d0                	mov    eax,edx
c0014049:	40                   	inc    eax
c001404a:	89 04 24             	mov    DWORD PTR [esp],eax
c001404d:	52                   	push   edx
c001404e:	6a 09                	push   0x9
c0014050:	68 b9 0f 02 c0       	push   0xc0020fb9
c0014055:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001405c:	50                   	push   eax
c001405d:	e8 1e c3 fe ff       	call   c0000380 <memcmp>
c0014062:	83 c4 10             	add    esp,0x10
c0014065:	85 c0                	test   eax,eax
c0014067:	75 1a                	jne    c0014083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014069:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001406c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001406f:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014073:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014076:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001407d:	89 d0                	mov    eax,edx
c001407f:	40                   	inc    eax
c0014080:	89 04 24             	mov    DWORD PTR [esp],eax
c0014083:	50                   	push   eax
c0014084:	50                   	push   eax
c0014085:	68 85 0f 02 c0       	push   0xc0020f85
c001408a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014091:	50                   	push   eax
c0014092:	e8 e9 c6 fe ff       	call   c0000780 <strcmp>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	85 c0                	test   eax,eax
c001409c:	75 0b                	jne    c00140a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c001409e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00140a2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140a9:	50                   	push   eax
c00140aa:	50                   	push   eax
c00140ab:	68 8d 0f 02 c0       	push   0xc0020f8d
c00140b0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140b7:	50                   	push   eax
c00140b8:	e8 c3 c6 fe ff       	call   c0000780 <strcmp>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	85 c0                	test   eax,eax
c00140c2:	75 0b                	jne    c00140cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00140c4:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00140c8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00140cf:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00140d4:	e9 d7 fe ff ff       	jmp    c0013fb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00140d9:	50                   	push   eax
c00140da:	31 d2                	xor    edx,edx
c00140dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140e0:	52                   	push   edx
c00140e1:	50                   	push   eax
c00140e2:	53                   	push   ebx
c00140e3:	e8 78 6f ff ff       	call   c000b060 <File::seek(unsigned long long)>
c00140e8:	58                   	pop    eax
c00140e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140ed:	e8 c5 39 ff ff       	call   c0007ab7 <malloc>
c00140f2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140f4:	31 d2                	xor    edx,edx
c00140f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00140fa:	58                   	pop    eax
c00140fb:	8d 74 24 54          	lea    esi,[esp+0x54]
c00140ff:	56                   	push   esi
c0014100:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014108:	52                   	push   edx
c0014109:	50                   	push   eax
c001410a:	53                   	push   ebx
c001410b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001410e:	83 c4 14             	add    esp,0x14
c0014111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014115:	e8 9d 39 ff ff       	call   c0007ab7 <malloc>
c001411a:	31 d2                	xor    edx,edx
c001411c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014120:	83 c4 0c             	add    esp,0xc
c0014123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014127:	52                   	push   edx
c0014128:	50                   	push   eax
c0014129:	53                   	push   ebx
c001412a:	e8 31 6f ff ff       	call   c000b060 <File::seek(unsigned long long)>
c001412f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014131:	31 d2                	xor    edx,edx
c0014133:	89 34 24             	mov    DWORD PTR [esp],esi
c0014136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001413a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001413e:	52                   	push   edx
c001413f:	50                   	push   eax
c0014140:	53                   	push   ebx
c0014141:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014144:	83 c4 20             	add    esp,0x20
c0014147:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001414c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014154:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014158:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001415c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001415f:	0f 84 2b 03 00 00    	je     c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014165:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c001416c:	31 d2                	xor    edx,edx
c001416e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014172:	c1 e8 03             	shr    eax,0x3
c0014175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014179:	51                   	push   ecx
c001417a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014182:	52                   	push   edx
c0014183:	50                   	push   eax
c0014184:	53                   	push   ebx
c0014185:	e8 d6 6e ff ff       	call   c000b060 <File::seek(unsigned long long)>
c001418a:	5e                   	pop    esi
c001418b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001418f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014196:	e8 1c 39 ff ff       	call   c0007ab7 <malloc>
c001419b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001419d:	31 d2                	xor    edx,edx
c001419f:	89 c7                	mov    edi,eax
c00141a1:	58                   	pop    eax
c00141a2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00141a6:	50                   	push   eax
c00141a7:	57                   	push   edi
c00141a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141ac:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00141b3:	52                   	push   edx
c00141b4:	50                   	push   eax
c00141b5:	53                   	push   ebx
c00141b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b9:	83 c4 20             	add    esp,0x20
c00141bc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00141c4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00141c8:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00141cc:	0f 8d a5 02 00 00    	jge    c0014477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00141d2:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00141d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141db:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00141de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00141e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141e6:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00141ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141ee:	c1 e8 08             	shr    eax,0x8
c00141f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00141f5:	89 c2                	mov    edx,eax
c00141f7:	c1 e2 04             	shl    edx,0x4
c00141fa:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00141fe:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014201:	85 f6                	test   esi,esi
c0014203:	0f 85 cf 00 00 00    	jne    c00142d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014209:	83 ec 0c             	sub    esp,0xc
c001420c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014214:	03 02                	add    eax,DWORD PTR [edx]
c0014216:	50                   	push   eax
c0014217:	e8 63 f8 ff ff       	call   c0013a7f <Thr::getAddressOfKernelSymbol(char const*)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014223:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014228:	85 c0                	test   eax,eax
c001422a:	89 c6                	mov    esi,eax
c001422c:	0f 85 a6 00 00 00    	jne    c00142d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001423d:	03 02                	add    eax,DWORD PTR [edx]
c001423f:	50                   	push   eax
c0014240:	e8 67 c7 ff ff       	call   c00109ac <KeResolveCompatibilitySymbol(char*)>
c0014245:	83 c4 10             	add    esp,0x10
c0014248:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001424c:	85 c0                	test   eax,eax
c001424e:	89 c6                	mov    esi,eax
c0014250:	0f 85 82 00 00 00    	jne    c00142d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014256:	50                   	push   eax
c0014257:	50                   	push   eax
c0014258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001425c:	03 02                	add    eax,DWORD PTR [edx]
c001425e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014262:	50                   	push   eax
c0014263:	68 c3 0f 02 c0       	push   0xc0020fc3
c0014268:	e8 d0 66 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001426d:	58                   	pop    eax
c001426e:	5a                   	pop    edx
c001426f:	68 dd 0f 02 c0       	push   0xc0020fdd
c0014274:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001427b:	51                   	push   ecx
c001427c:	e8 cf c3 fe ff       	call   c0000650 <strcpy>
c0014281:	59                   	pop    ecx
c0014282:	58                   	pop    eax
c0014283:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001428b:	03 02                	add    eax,DWORD PTR [edx]
c001428d:	50                   	push   eax
c001428e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014295:	51                   	push   ecx
c0014296:	e8 d5 c5 fe ff       	call   c0000870 <strcat>
c001429b:	58                   	pop    eax
c001429c:	5a                   	pop    edx
c001429d:	68 73 10 02 c0       	push   0xc0021073
c00142a2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142a9:	51                   	push   ecx
c00142aa:	e8 c1 c5 fe ff       	call   c0000870 <strcat>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00142b7:	0f 84 77 01 00 00    	je     c0014434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00142bd:	83 ec 0c             	sub    esp,0xc
c00142c0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142c7:	51                   	push   ecx
c00142c8:	e8 f4 c4 ff ff       	call   c00107c1 <KePanic(char const*)>
c00142cd:	83 c4 10             	add    esp,0x10
c00142d0:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00142d4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00142d8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00142dd:	83 f8 01             	cmp    eax,0x1
c00142e0:	0f 85 9b 00 00 00    	jne    c0014381 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00142e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142ea:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00142f1:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c00142f5:	01 c8                	add    eax,ecx
c00142f7:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00142ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014303:	8b 00                	mov    eax,DWORD PTR [eax]
c0014305:	0f 94 c2             	sete   dl
c0014308:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014310:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014315:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c0014319:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001431e:	0f b6 d2             	movzx  edx,dl
c0014321:	74 41                	je     c0014364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014323:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0014326:	85 d2                	test   edx,edx
c0014328:	75 15                	jne    c001433f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001432a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001432e:	66 83 f8 0c          	cmp    ax,0xc
c0014332:	76 05                	jbe    c0014339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014334:	b8 0c 00 00 00       	mov    eax,0xc
c0014339:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001433d:	76 37                	jbe    c0014376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001433f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014344:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014348:	0f 84 e6 00 00 00    	je     c0014434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001434e:	83 ec 0c             	sub    esp,0xc
c0014351:	68 f4 0f 02 c0       	push   0xc0020ff4
c0014356:	e8 66 c4 ff ff       	call   c00107c1 <KePanic(char const*)>
c001435b:	83 c4 10             	add    esp,0x10
c001435e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014362:	eb 12                	jmp    c0014376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014364:	01 c1                	add    ecx,eax
c0014366:	85 d2                	test   edx,edx
c0014368:	75 0c                	jne    c0014376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001436a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001436e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014372:	77 02                	ja     c0014376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014374:	01 f1                	add    ecx,esi
c0014376:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001437a:	89 08                	mov    DWORD PTR [eax],ecx
c001437c:	e9 ed 00 00 00       	jmp    c001446e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014381:	83 f8 02             	cmp    eax,0x2
c0014384:	0f 85 81 00 00 00    	jne    c001440b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001438a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014391:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014395:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014399:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00143a1:	74 21                	je     c00143c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00143a3:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00143ab:	74 17                	je     c00143c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00143ad:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00143b1:	ba 0a 00 00 00       	mov    edx,0xa
c00143b6:	83 f9 0e             	cmp    ecx,0xe
c00143b9:	77 03                	ja     c00143be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00143bb:	8d 51 fc             	lea    edx,[ecx-0x4]
c00143be:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00143c2:	76 1f                	jbe    c00143e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00143c4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00143cd:	74 65                	je     c0014434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00143cf:	83 ec 0c             	sub    esp,0xc
c00143d2:	68 10 10 02 c0       	push   0xc0021010
c00143d7:	e8 e5 c3 ff ff       	call   c00107c1 <KePanic(char const*)>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143e3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00143ea:	74 15                	je     c0014401 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00143ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00143f0:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00143f7:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00143fb:	01 d1                	add    ecx,edx
c00143fd:	01 ce                	add    esi,ecx
c00143ff:	eb 06                	jmp    c0014407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014401:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014405:	01 d6                	add    esi,edx
c0014407:	89 30                	mov    DWORD PTR [eax],esi
c0014409:	eb 63                	jmp    c001446e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001440b:	56                   	push   esi
c001440c:	56                   	push   esi
c001440d:	50                   	push   eax
c001440e:	68 2c 10 02 c0       	push   0xc002102c
c0014413:	e8 25 65 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014420:	74 12                	je     c0014434 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	68 37 10 02 c0       	push   0xc0021037
c001442a:	e8 92 c3 ff ff       	call   c00107c1 <KePanic(char const*)>
c001442f:	83 c4 10             	add    esp,0x10
c0014432:	eb 3a                	jmp    c001446e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	53                   	push   ebx
c0014438:	e8 c3 6b ff ff       	call   c000b000 <File::close()>
c001443d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001443f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014442:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014445:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014448:	e8 7a 36 ff ff       	call   c0007ac7 <free>
c001444d:	59                   	pop    ecx
c001444e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014452:	e8 70 36 ff ff       	call   c0007ac7 <free>
c0014457:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001445a:	e8 68 36 ff ff       	call   c0007ac7 <free>
c001445f:	5b                   	pop    ebx
c0014460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014464:	e8 5e 36 ff ff       	call   c0007ac7 <free>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	eb 1e                	jmp    c001448c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001446e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014472:	e9 4d fd ff ff       	jmp    c00141c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014477:	83 ec 0c             	sub    esp,0xc
c001447a:	57                   	push   edi
c001447b:	e8 47 36 ff ff       	call   c0007ac7 <free>
c0014480:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014484:	83 c4 10             	add    esp,0x10
c0014487:	e9 cc fc ff ff       	jmp    c0014158 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001448c:	31 c0                	xor    eax,eax
c001448e:	eb 32                	jmp    c00144c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014490:	83 ec 0c             	sub    esp,0xc
c0014493:	53                   	push   ebx
c0014494:	e8 67 6b ff ff       	call   c000b000 <File::close()>
c0014499:	8b 03                	mov    eax,DWORD PTR [ebx]
c001449b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001449e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144a1:	58                   	pop    eax
c00144a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144a6:	e8 1c 36 ff ff       	call   c0007ac7 <free>
c00144ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144ae:	e8 14 36 ff ff       	call   c0007ac7 <free>
c00144b3:	5a                   	pop    edx
c00144b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144b8:	e8 0a 36 ff ff       	call   c0007ac7 <free>
c00144bd:	83 c4 10             	add    esp,0x10
c00144c0:	b0 01                	mov    al,0x1
c00144c2:	81 c4 5c 03 00 00    	add    esp,0x35c
c00144c8:	5b                   	pop    ebx
c00144c9:	5e                   	pop    esi
c00144ca:	5f                   	pop    edi
c00144cb:	5d                   	pop    ebp
c00144cc:	c3                   	ret    

c00144cd <Thr::getDriverBaseFromAddress(unsigned long)>:
c00144cd:	56                   	push   esi
c00144ce:	31 d2                	xor    edx,edx
c00144d0:	53                   	push   ebx
c00144d1:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00144d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144db:	39 d3                	cmp    ebx,edx
c00144dd:	7e 1b                	jle    c00144fa <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00144df:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c00144e6:	39 c8                	cmp    eax,ecx
c00144e8:	77 0d                	ja     c00144f7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00144ea:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c00144f1:	01 c6                	add    esi,eax
c00144f3:	39 ce                	cmp    esi,ecx
c00144f5:	77 05                	ja     c00144fc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00144f7:	42                   	inc    edx
c00144f8:	eb e1                	jmp    c00144db <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00144fa:	31 c0                	xor    eax,eax
c00144fc:	5b                   	pop    ebx
c00144fd:	5e                   	pop    esi
c00144fe:	c3                   	ret    

c00144ff <Thr::getDriverNameFromAddress(unsigned long)>:
c00144ff:	53                   	push   ebx
c0014500:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014506:	31 c0                	xor    eax,eax
c0014508:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001450c:	39 c3                	cmp    ebx,eax
c001450e:	7e 22                	jle    c0014532 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014510:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014517:	39 ca                	cmp    edx,ecx
c0014519:	77 14                	ja     c001452f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001451b:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014522:	39 ca                	cmp    edx,ecx
c0014524:	76 09                	jbe    c001452f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014526:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c001452d:	eb 05                	jmp    c0014534 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001452f:	40                   	inc    eax
c0014530:	eb da                	jmp    c001450c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014532:	31 c0                	xor    eax,eax
c0014534:	5b                   	pop    ebx
c0014535:	c3                   	ret    

c0014536 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014536:	53                   	push   ebx
c0014537:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001453b:	53                   	push   ebx
c001453c:	e8 8c ff ff ff       	call   c00144cd <Thr::getDriverBaseFromAddress(unsigned long)>
c0014541:	5a                   	pop    edx
c0014542:	31 d2                	xor    edx,edx
c0014544:	85 c0                	test   eax,eax
c0014546:	74 04                	je     c001454c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014548:	89 da                	mov    edx,ebx
c001454a:	29 c2                	sub    edx,eax
c001454c:	5b                   	pop    ebx
c001454d:	89 d0                	mov    eax,edx
c001454f:	c3                   	ret    

c0014550 <Thr::loadDLL(char const*, bool)>:
c0014550:	55                   	push   ebp
c0014551:	57                   	push   edi
c0014552:	56                   	push   esi
c0014553:	53                   	push   ebx
c0014554:	81 ec 34 01 00 00    	sub    esp,0x134
c001455a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014561:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014568:	56                   	push   esi
c0014569:	68 4f 10 02 c0       	push   0xc002104f
c001456e:	e8 ca 63 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0014573:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001457a:	e8 38 35 ff ff       	call   c0007ab7 <malloc>
c001457f:	83 c4 0c             	add    esp,0xc
c0014582:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014588:	56                   	push   esi
c0014589:	50                   	push   eax
c001458a:	89 c3                	mov    ebx,eax
c001458c:	e8 55 69 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	85 db                	test   ebx,ebx
c0014596:	75 3c                	jne    c00145d4 <Thr::loadDLL(char const*, bool)+0x84>
c0014598:	89 e8                	mov    eax,ebp
c001459a:	84 c0                	test   al,al
c001459c:	0f 84 e1 01 00 00    	je     c0014783 <Thr::loadDLL(char const*, bool)+0x233>
c00145a2:	50                   	push   eax
c00145a3:	50                   	push   eax
c00145a4:	68 60 10 02 c0       	push   0xc0021060
c00145a9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00145ad:	57                   	push   edi
c00145ae:	e8 9d c0 fe ff       	call   c0000650 <strcpy>
c00145b3:	58                   	pop    eax
c00145b4:	5a                   	pop    edx
c00145b5:	56                   	push   esi
c00145b6:	57                   	push   edi
c00145b7:	e8 b4 c2 fe ff       	call   c0000870 <strcat>
c00145bc:	59                   	pop    ecx
c00145bd:	58                   	pop    eax
c00145be:	68 73 10 02 c0       	push   0xc0021073
c00145c3:	57                   	push   edi
c00145c4:	e8 a7 c2 fe ff       	call   c0000870 <strcat>
c00145c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145cc:	e8 f0 c1 ff ff       	call   c00107c1 <KePanic(char const*)>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	50                   	push   eax
c00145d5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00145d9:	50                   	push   eax
c00145da:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145de:	50                   	push   eax
c00145df:	53                   	push   ebx
c00145e0:	e8 69 6c ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	85 db                	test   ebx,ebx
c00145ea:	74 0c                	je     c00145f8 <Thr::loadDLL(char const*, bool)+0xa8>
c00145ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ee:	83 ec 0c             	sub    esp,0xc
c00145f1:	53                   	push   ebx
c00145f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00145fd:	75 0a                	jne    c0014609 <Thr::loadDLL(char const*, bool)+0xb9>
c00145ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014603:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014607:	75 3e                	jne    c0014647 <Thr::loadDLL(char const*, bool)+0xf7>
c0014609:	89 e8                	mov    eax,ebp
c001460b:	31 db                	xor    ebx,ebx
c001460d:	84 c0                	test   al,al
c001460f:	0f 84 6e 01 00 00    	je     c0014783 <Thr::loadDLL(char const*, bool)+0x233>
c0014615:	50                   	push   eax
c0014616:	50                   	push   eax
c0014617:	68 60 10 02 c0       	push   0xc0021060
c001461c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014620:	53                   	push   ebx
c0014621:	e8 2a c0 fe ff       	call   c0000650 <strcpy>
c0014626:	58                   	pop    eax
c0014627:	5a                   	pop    edx
c0014628:	56                   	push   esi
c0014629:	53                   	push   ebx
c001462a:	e8 41 c2 fe ff       	call   c0000870 <strcat>
c001462f:	59                   	pop    ecx
c0014630:	5f                   	pop    edi
c0014631:	68 73 10 02 c0       	push   0xc0021073
c0014636:	53                   	push   ebx
c0014637:	e8 34 c2 fe ff       	call   c0000870 <strcat>
c001463c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001463f:	e8 7d c1 ff ff       	call   c00107c1 <KePanic(char const*)>
c0014644:	83 c4 10             	add    esp,0x10
c0014647:	53                   	push   ebx
c0014648:	6a 03                	push   0x3
c001464a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014652:	05 ff 0f 00 00       	add    eax,0xfff
c0014657:	83 d2 00             	adc    edx,0x0
c001465a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001465e:	50                   	push   eax
c001465f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014665:	e8 72 57 ff ff       	call   c0009ddc <VAS::allocatePages(int, int)>
c001466a:	89 c3                	mov    ebx,eax
c001466c:	58                   	pop    eax
c001466d:	5a                   	pop    edx
c001466e:	53                   	push   ebx
c001466f:	68 ee fb 01 c0       	push   0xc001fbee
c0014674:	e8 c4 62 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0014679:	89 34 24             	mov    DWORD PTR [esp],esi
c001467c:	e8 ff be fe ff       	call   c0000580 <strlen>
c0014681:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c0014687:	40                   	inc    eax
c0014688:	89 04 24             	mov    DWORD PTR [esp],eax
c001468b:	e8 27 34 ff ff       	call   c0007ab7 <malloc>
c0014690:	59                   	pop    ecx
c0014691:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014698:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001469d:	5f                   	pop    edi
c001469e:	56                   	push   esi
c001469f:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00146a6:	e8 a5 bf fe ff       	call   c0000650 <strcpy>
c00146ab:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00146b0:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00146b7:	8d 50 01             	lea    edx,[eax+0x1]
c00146ba:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00146c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00146c4:	83 c4 0c             	add    esp,0xc
c00146c7:	6a 01                	push   0x1
c00146c9:	53                   	push   ebx
c00146ca:	56                   	push   esi
c00146cb:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00146d2:	e8 b5 f6 ff ff       	call   c0013d8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	89 c7                	mov    edi,eax
c00146dc:	89 f8                	mov    eax,edi
c00146de:	83 f0 01             	xor    eax,0x1
c00146e1:	84 c0                	test   al,al
c00146e3:	74 18                	je     c00146fd <Thr::loadDLL(char const*, bool)+0x1ad>
c00146e5:	89 e8                	mov    eax,ebp
c00146e7:	84 c0                	test   al,al
c00146e9:	74 12                	je     c00146fd <Thr::loadDLL(char const*, bool)+0x1ad>
c00146eb:	83 ec 0c             	sub    esp,0xc
c00146ee:	68 75 10 02 c0       	push   0xc0021075
c00146f3:	e8 c9 c0 ff ff       	call   c00107c1 <KePanic(char const*)>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	eb 06                	jmp    c0014703 <Thr::loadDLL(char const*, bool)+0x1b3>
c00146fd:	89 f8                	mov    eax,edi
c00146ff:	84 c0                	test   al,al
c0014701:	75 10                	jne    c0014713 <Thr::loadDLL(char const*, bool)+0x1c3>
c0014703:	83 ec 0c             	sub    esp,0xc
c0014706:	68 94 10 02 c0       	push   0xc0021094
c001470b:	e8 b1 c0 ff ff       	call   c00107c1 <KePanic(char const*)>
c0014710:	83 c4 10             	add    esp,0x10
c0014713:	31 f6                	xor    esi,esi
c0014715:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001471d:	05 ff 0f 00 00       	add    eax,0xfff
c0014722:	83 d2 00             	adc    edx,0x0
c0014725:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014729:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001472d:	c1 ea 0c             	shr    edx,0xc
c0014730:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014734:	ba 00 00 00 00       	mov    edx,0x0
c0014739:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001473d:	89 d0                	mov    eax,edx
c001473f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014743:	73 32                	jae    c0014777 <Thr::loadDLL(char const*, bool)+0x227>
c0014745:	50                   	push   eax
c0014746:	50                   	push   eax
c0014747:	89 f0                	mov    eax,esi
c0014749:	c1 e0 0c             	shl    eax,0xc
c001474c:	01 d8                	add    eax,ebx
c001474e:	50                   	push   eax
c001474f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014755:	e8 8a 51 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c001475a:	83 c4 10             	add    esp,0x10
c001475d:	8b 00                	mov    eax,DWORD PTR [eax]
c001475f:	a8 60                	test   al,0x60
c0014761:	75 11                	jne    c0014774 <Thr::loadDLL(char const*, bool)+0x224>
c0014763:	83 ec 0c             	sub    esp,0xc
c0014766:	25 00 f0 ff ff       	and    eax,0xfffff000
c001476b:	50                   	push   eax
c001476c:	e8 e8 35 ff ff       	call   c0007d59 <Phys::freePage(unsigned long)>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	46                   	inc    esi
c0014775:	eb 9e                	jmp    c0014715 <Thr::loadDLL(char const*, bool)+0x1c5>
c0014777:	89 f8                	mov    eax,edi
c0014779:	84 c0                	test   al,al
c001477b:	b8 00 00 00 00       	mov    eax,0x0
c0014780:	0f 44 d8             	cmove  ebx,eax
c0014783:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014789:	89 d8                	mov    eax,ebx
c001478b:	5b                   	pop    ebx
c001478c:	5e                   	pop    esi
c001478d:	5f                   	pop    edi
c001478e:	5d                   	pop    ebp
c001478f:	c3                   	ret    

c0014790 <Thr::executeDLL(unsigned long, void*)>:
c0014790:	56                   	push   esi
c0014791:	53                   	push   ebx
c0014792:	52                   	push   edx
c0014793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014797:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001479b:	85 db                	test   ebx,ebx
c001479d:	75 10                	jne    c00147af <Thr::executeDLL(unsigned long, void*)+0x1f>
c001479f:	83 ec 0c             	sub    esp,0xc
c00147a2:	68 b0 10 02 c0       	push   0xc00210b0
c00147a7:	e8 15 c0 ff ff       	call   c00107c1 <KePanic(char const*)>
c00147ac:	83 c4 10             	add    esp,0x10
c00147af:	50                   	push   eax
c00147b0:	50                   	push   eax
c00147b1:	53                   	push   ebx
c00147b2:	68 da 10 02 c0       	push   0xc00210da
c00147b7:	e8 81 61 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00147bc:	89 d8                	mov    eax,ebx
c00147be:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00147c2:	83 c4 14             	add    esp,0x14
c00147c5:	5b                   	pop    ebx
c00147c6:	5e                   	pop    esi
c00147c7:	ff e0                	jmp    eax
c00147c9:	66 90                	xchg   ax,ax
c00147cb:	90                   	nop

c00147cc <userModeEntryPoint(void*)>:
c00147cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00147d1:	83 e8 01             	sub    eax,0x1
c00147d4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00147d9:	75 01                	jne    c00147dc <userModeEntryPoint(void*)+0x10>
c00147db:	fb                   	sti    
c00147dc:	fb                   	sti    
c00147dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147e5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00147eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ef:	e9 4b ba fe ff       	jmp    c000023f <goToUsermode>

c00147f4 <changeTSS>:
c00147f4:	83 ec 14             	sub    esp,0x14
c00147f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147fc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00147ff:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014804:	c1 e2 15             	shl    edx,0x15
c0014807:	29 d0                	sub    eax,edx
c0014809:	50                   	push   eax
c001480a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001480f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014815:	05 7c 11 00 00       	add    eax,0x117c
c001481a:	50                   	push   eax
c001481b:	e8 18 47 ff ff       	call   c0008f38 <TSS::setESP(unsigned long)>
c0014820:	83 c4 1c             	add    esp,0x1c
c0014823:	c3                   	ret    

c0014824 <switchToThread(ThreadControlBlock*)>:
c0014824:	57                   	push   edi
c0014825:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001482b:	56                   	push   esi
c001482c:	53                   	push   ebx
c001482d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014831:	85 c9                	test   ecx,ecx
c0014833:	0f 85 8b 00 00 00    	jne    c00148c4 <switchToThread(ThreadControlBlock*)+0xa0>
c0014839:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001483d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014843:	74 7b                	je     c00148c0 <switchToThread(ThreadControlBlock*)+0x9c>
c0014845:	b8 00 04 00 00       	mov    eax,0x400
c001484a:	29 d0                	sub    eax,edx
c001484c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001484f:	d1 f8                	sar    eax,1
c0014851:	01 d0                	add    eax,edx
c0014853:	90                   	nop
c0014854:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014857:	e8 77 27 00 00       	call   c0016fd3 <HalQueryPerformanceCounter()>
c001485c:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014861:	89 c6                	mov    esi,eax
c0014863:	89 d7                	mov    edi,edx
c0014865:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c001486b:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014870:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014876:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c001487c:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014882:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014888:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c001488e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014894:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014897:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001489a:	01 c6                	add    esi,eax
c001489c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001489f:	11 d7                	adc    edi,edx
c00148a1:	83 ec 0c             	sub    esp,0xc
c00148a4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00148a7:	53                   	push   ebx
c00148a8:	e8 ca b9 fe ff       	call   c0000277 <switchToThreadASM>
c00148ad:	0f 20 c0             	mov    eax,cr0
c00148b0:	83 c8 08             	or     eax,0x8
c00148b3:	0f 22 c0             	mov    cr0,eax
c00148b6:	83 c4 10             	add    esp,0x10
c00148b9:	5b                   	pop    ebx
c00148ba:	5e                   	pop    esi
c00148bb:	5f                   	pop    edi
c00148bc:	c3                   	ret    
c00148bd:	8d 76 00             	lea    esi,[esi+0x0]
c00148c0:	31 c0                	xor    eax,eax
c00148c2:	eb 90                	jmp    c0014854 <switchToThread(ThreadControlBlock*)+0x30>
c00148c4:	5b                   	pop    ebx
c00148c5:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00148cf:	5e                   	pop    esi
c00148d0:	5f                   	pop    edi
c00148d1:	c3                   	ret    
c00148d2:	66 90                	xchg   ax,ax

c00148d4 <Process::addArgs(char**)>:
c00148d4:	57                   	push   edi
c00148d5:	56                   	push   esi
c00148d6:	53                   	push   ebx
c00148d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148db:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00148df:	85 f6                	test   esi,esi
c00148e1:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00148eb:	74 4f                	je     c001493c <Process::addArgs(char**)+0x68>
c00148ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00148ef:	85 c0                	test   eax,eax
c00148f1:	74 49                	je     c001493c <Process::addArgs(char**)+0x68>
c00148f3:	31 db                	xor    ebx,ebx
c00148f5:	8d 76 00             	lea    esi,[esi+0x0]
c00148f8:	83 ec 0c             	sub    esp,0xc
c00148fb:	50                   	push   eax
c00148fc:	e8 7f bc fe ff       	call   c0000580 <strlen>
c0014901:	83 c0 01             	add    eax,0x1
c0014904:	89 04 24             	mov    DWORD PTR [esp],eax
c0014907:	e8 ab 31 ff ff       	call   c0007ab7 <malloc>
c001490c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014913:	5a                   	pop    edx
c0014914:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014917:	83 c3 01             	add    ebx,0x1
c001491a:	59                   	pop    ecx
c001491b:	52                   	push   edx
c001491c:	50                   	push   eax
c001491d:	e8 2e bd fe ff       	call   c0000650 <strcpy>
c0014922:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014928:	83 c4 10             	add    esp,0x10
c001492b:	83 c1 01             	add    ecx,0x1
c001492e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014934:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014937:	85 c0                	test   eax,eax
c0014939:	75 bd                	jne    c00148f8 <Process::addArgs(char**)+0x24>
c001493b:	90                   	nop
c001493c:	5b                   	pop    ebx
c001493d:	5e                   	pop    esi
c001493e:	5f                   	pop    edi
c001493f:	c3                   	ret    

c0014940 <Process::Process(char const*, Process*, char**)>:
c0014940:	56                   	push   esi
c0014941:	53                   	push   ebx
c0014942:	83 ec 14             	sub    esp,0x14
c0014945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014949:	05 0c 02 00 00       	add    eax,0x20c
c001494e:	bb 07 00 00 00       	mov    ebx,0x7
c0014953:	89 c6                	mov    esi,eax
c0014955:	8d 76 00             	lea    esi,[esi+0x0]
c0014958:	85 db                	test   ebx,ebx
c001495a:	78 14                	js     c0014970 <Process::Process(char const*, Process*, char**)+0x30>
c001495c:	83 ec 0c             	sub    esp,0xc
c001495f:	56                   	push   esi
c0014960:	e8 33 a5 00 00       	call   c001ee98 <ThreadControlBlock::ThreadControlBlock()>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	83 c6 5f             	add    esi,0x5f
c001496b:	83 eb 01             	sub    ebx,0x1
c001496e:	eb e8                	jmp    c0014958 <Process::Process(char const*, Process*, char**)+0x18>
c0014970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014974:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001497b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001497f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014986:	83 ec 0c             	sub    esp,0xc
c0014989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001498d:	e8 24 bc ff ff       	call   c00105b6 <Krnl::newProcessEnv(Process*)>
c0014992:	83 c4 10             	add    esp,0x10
c0014995:	89 c2                	mov    edx,eax
c0014997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001499b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00149a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149a5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00149ae:	a1 a0 22 02 c0       	mov    eax,ds:0xc00222a0
c00149b3:	8d 50 01             	lea    edx,[eax+0x1]
c00149b6:	89 15 a0 22 02 c0    	mov    DWORD PTR ds:0xc00222a0,edx
c00149bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149c0:	89 02                	mov    DWORD PTR [edx],eax
c00149c2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00149ca:	83 ec 0c             	sub    esp,0xc
c00149cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149d1:	e8 e1 30 ff ff       	call   c0007ab7 <malloc>
c00149d6:	83 c4 10             	add    esp,0x10
c00149d9:	89 c3                	mov    ebx,eax
c00149db:	83 ec 08             	sub    esp,0x8
c00149de:	6a 00                	push   0x0
c00149e0:	53                   	push   ebx
c00149e1:	e8 bc 57 ff ff       	call   c000a1a2 <VAS::VAS(bool)>
c00149e6:	83 c4 10             	add    esp,0x10
c00149e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149ed:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00149f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149f7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a09:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a0f:	e8 c6 c1 ff ff       	call   c0010bda <KeInitSignals()>
c0014a14:	89 c2                	mov    edx,eax
c0014a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a2a:	85 c0                	test   eax,eax
c0014a2c:	74 42                	je     c0014a70 <Process::Process(char const*, Process*, char**)+0x130>
c0014a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a32:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a38:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014a3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a42:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a5c:	05 0c 01 00 00       	add    eax,0x10c
c0014a61:	83 ec 08             	sub    esp,0x8
c0014a64:	52                   	push   edx
c0014a65:	50                   	push   eax
c0014a66:	e8 e5 bb fe ff       	call   c0000650 <strcpy>
c0014a6b:	83 c4 10             	add    esp,0x10
c0014a6e:	eb 64                	jmp    c0014ad4 <Process::Process(char const*, Process*, char**)+0x194>
c0014a70:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014a78:	83 ec 0c             	sub    esp,0xc
c0014a7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a7f:	e8 33 30 ff ff       	call   c0007ab7 <malloc>
c0014a84:	83 c4 10             	add    esp,0x10
c0014a87:	89 c3                	mov    ebx,eax
c0014a89:	83 ec 08             	sub    esp,0x8
c0014a8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a90:	53                   	push   ebx
c0014a91:	e8 ac 41 ff ff       	call   c0008c42 <VgaText::VgaText(char const*)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014aad:	83 ec 0c             	sub    esp,0xc
c0014ab0:	50                   	push   eax
c0014ab1:	e8 3a 3a ff ff       	call   c00084f0 <addToTerminalCycle(VgaText*)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014abd:	05 0c 01 00 00       	add    eax,0x10c
c0014ac2:	83 ec 08             	sub    esp,0x8
c0014ac5:	68 f9 10 02 c0       	push   0xc00210f9
c0014aca:	50                   	push   eax
c0014acb:	e8 80 bb fe ff       	call   c0000650 <strcpy>
c0014ad0:	83 c4 10             	add    esp,0x10
c0014ad3:	90                   	nop
c0014ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad8:	83 c0 0c             	add    eax,0xc
c0014adb:	83 ec 08             	sub    esp,0x8
c0014ade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ae2:	50                   	push   eax
c0014ae3:	e8 68 bb fe ff       	call   c0000650 <strcpy>
c0014ae8:	83 c4 10             	add    esp,0x10
c0014aeb:	83 ec 08             	sub    esp,0x8
c0014aee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014af2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014af6:	e8 d9 fd ff ff       	call   c00148d4 <Process::addArgs(char**)>
c0014afb:	83 c4 10             	add    esp,0x10
c0014afe:	83 ec 08             	sub    esp,0x8
c0014b01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b09:	e8 3f ed ff ff       	call   c001384d <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b15:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b19:	83 f0 01             	xor    eax,0x1
c0014b1c:	88 c2                	mov    dl,al
c0014b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b22:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014b28:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014b2d:	83 ec 08             	sub    esp,0x8
c0014b30:	50                   	push   eax
c0014b31:	68 50 11 02 c0       	push   0xc0021150
c0014b36:	e8 02 5e ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0014b3b:	83 c4 10             	add    esp,0x10
c0014b3e:	90                   	nop
c0014b3f:	83 c4 14             	add    esp,0x14
c0014b42:	5b                   	pop    ebx
c0014b43:	5e                   	pop    esi
c0014b44:	c3                   	ret    
c0014b45:	90                   	nop
c0014b46:	66 90                	xchg   ax,ax

c0014b48 <Process::Process(bool, char const*, Process*, char**)>:
c0014b48:	56                   	push   esi
c0014b49:	53                   	push   ebx
c0014b4a:	83 ec 24             	sub    esp,0x24
c0014b4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b51:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014b55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b59:	05 0c 02 00 00       	add    eax,0x20c
c0014b5e:	bb 07 00 00 00       	mov    ebx,0x7
c0014b63:	89 c6                	mov    esi,eax
c0014b65:	8d 76 00             	lea    esi,[esi+0x0]
c0014b68:	85 db                	test   ebx,ebx
c0014b6a:	78 14                	js     c0014b80 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014b6c:	83 ec 0c             	sub    esp,0xc
c0014b6f:	56                   	push   esi
c0014b70:	e8 23 a3 00 00       	call   c001ee98 <ThreadControlBlock::ThreadControlBlock()>
c0014b75:	83 c4 10             	add    esp,0x10
c0014b78:	83 c6 5f             	add    esi,0x5f
c0014b7b:	83 eb 01             	sub    ebx,0x1
c0014b7e:	eb e8                	jmp    c0014b68 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b84:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014b8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b8f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014b9d:	e8 14 ba ff ff       	call   c00105b6 <Krnl::newProcessEnv(Process*)>
c0014ba2:	83 c4 10             	add    esp,0x10
c0014ba5:	89 c2                	mov    edx,eax
c0014ba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014bbe:	a1 a0 22 02 c0       	mov    eax,ds:0xc00222a0
c0014bc3:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc6:	89 15 a0 22 02 c0    	mov    DWORD PTR ds:0xc00222a0,edx
c0014bcc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014bd0:	89 02                	mov    DWORD PTR [edx],eax
c0014bd2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014bda:	83 ec 0c             	sub    esp,0xc
c0014bdd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014be1:	e8 d1 2e ff ff       	call   c0007ab7 <malloc>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	89 c3                	mov    ebx,eax
c0014beb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014bf0:	83 ec 08             	sub    esp,0x8
c0014bf3:	50                   	push   eax
c0014bf4:	53                   	push   ebx
c0014bf5:	e8 a8 55 ff ff       	call   c000a1a2 <VAS::VAS(bool)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c01:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c0b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c19:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c1d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c23:	e8 b2 bf ff ff       	call   c0010bda <KeInitSignals()>
c0014c28:	89 c2                	mov    edx,eax
c0014c2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c2e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c3e:	85 c0                	test   eax,eax
c0014c40:	74 42                	je     c0014c84 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c46:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c4c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014c52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c56:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014c5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c70:	05 0c 01 00 00       	add    eax,0x10c
c0014c75:	83 ec 08             	sub    esp,0x8
c0014c78:	52                   	push   edx
c0014c79:	50                   	push   eax
c0014c7a:	e8 d1 b9 fe ff       	call   c0000650 <strcpy>
c0014c7f:	83 c4 10             	add    esp,0x10
c0014c82:	eb 64                	jmp    c0014ce8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014c84:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014c8c:	83 ec 0c             	sub    esp,0xc
c0014c8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c93:	e8 1f 2e ff ff       	call   c0007ab7 <malloc>
c0014c98:	83 c4 10             	add    esp,0x10
c0014c9b:	89 c3                	mov    ebx,eax
c0014c9d:	83 ec 08             	sub    esp,0x8
c0014ca0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014ca4:	53                   	push   ebx
c0014ca5:	e8 98 3f ff ff       	call   c0008c42 <VgaText::VgaText(char const*)>
c0014caa:	83 c4 10             	add    esp,0x10
c0014cad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014cb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cc1:	83 ec 0c             	sub    esp,0xc
c0014cc4:	50                   	push   eax
c0014cc5:	e8 26 38 ff ff       	call   c00084f0 <addToTerminalCycle(VgaText*)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd1:	05 0c 01 00 00       	add    eax,0x10c
c0014cd6:	83 ec 08             	sub    esp,0x8
c0014cd9:	68 f9 10 02 c0       	push   0xc00210f9
c0014cde:	50                   	push   eax
c0014cdf:	e8 6c b9 fe ff       	call   c0000650 <strcpy>
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	90                   	nop
c0014ce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cec:	83 c0 0c             	add    eax,0xc
c0014cef:	83 ec 08             	sub    esp,0x8
c0014cf2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cf6:	50                   	push   eax
c0014cf7:	e8 54 b9 fe ff       	call   c0000650 <strcpy>
c0014cfc:	83 c4 10             	add    esp,0x10
c0014cff:	83 ec 08             	sub    esp,0x8
c0014d02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d0a:	e8 c5 fb ff ff       	call   c00148d4 <Process::addArgs(char**)>
c0014d0f:	83 c4 10             	add    esp,0x10
c0014d12:	90                   	nop
c0014d13:	83 c4 24             	add    esp,0x24
c0014d16:	5b                   	pop    ebx
c0014d17:	5e                   	pop    esi
c0014d18:	c3                   	ret    
c0014d19:	8d 76 00             	lea    esi,[esi+0x0]

c0014d1c <taskStartupFunction>:
c0014d1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d21:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d24:	c3                   	ret    
c0014d25:	90                   	nop
c0014d26:	66 90                	xchg   ax,ax

c0014d28 <Semaphore::Semaphore(int)>:
c0014d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d30:	89 10                	mov    DWORD PTR [eax],edx
c0014d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d36:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014d3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014d53:	90                   	nop
c0014d54:	c3                   	ret    
c0014d55:	90                   	nop
c0014d56:	66 90                	xchg   ax,ax

c0014d58 <Mutex::Mutex()>:
c0014d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d5c:	6a 01                	push   0x1
c0014d5e:	50                   	push   eax
c0014d5f:	e8 c4 ff ff ff       	call   c0014d28 <Semaphore::Semaphore(int)>
c0014d64:	83 c4 08             	add    esp,0x8
c0014d67:	90                   	nop
c0014d68:	c3                   	ret    
c0014d69:	90                   	nop
c0014d6a:	66 90                	xchg   ax,ax

c0014d6c <Process::createThread(void (*)(void*), void*, int)>:
c0014d6c:	57                   	push   edi
c0014d6d:	31 c9                	xor    ecx,ecx
c0014d6f:	56                   	push   esi
c0014d70:	53                   	push   ebx
c0014d71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d75:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014d7c:	89 f2                	mov    edx,esi
c0014d7e:	66 90                	xchg   ax,ax
c0014d80:	0f b7 c2             	movzx  eax,dx
c0014d83:	80 e2 01             	and    dl,0x1
c0014d86:	74 14                	je     c0014d9c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014d88:	d1 f8                	sar    eax,1
c0014d8a:	83 c1 01             	add    ecx,0x1
c0014d8d:	83 f9 10             	cmp    ecx,0x10
c0014d90:	89 c2                	mov    edx,eax
c0014d92:	75 ec                	jne    c0014d80 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014d94:	31 db                	xor    ebx,ebx
c0014d96:	89 d8                	mov    eax,ebx
c0014d98:	5b                   	pop    ebx
c0014d99:	5e                   	pop    esi
c0014d9a:	5f                   	pop    edi
c0014d9b:	c3                   	ret    
c0014d9c:	b8 01 00 00 00       	mov    eax,0x1
c0014da1:	d3 e0                	shl    eax,cl
c0014da3:	09 c6                	or     esi,eax
c0014da5:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014dac:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014daf:	c1 e0 05             	shl    eax,0x5
c0014db2:	29 c8                	sub    eax,ecx
c0014db4:	01 d8                	add    eax,ebx
c0014db6:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014dbd:	75 0d                	jne    c0014dcc <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014dbf:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dcc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014dd2:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014dd5:	83 ec 0c             	sub    esp,0xc
c0014dd8:	c1 e6 05             	shl    esi,0x5
c0014ddb:	29 ce                	sub    esi,ecx
c0014ddd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014de0:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014de3:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014de9:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014def:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014df5:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014dfc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e06:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e0c:	89 ca                	mov    edx,ecx
c0014e0e:	f7 da                	neg    edx
c0014e10:	c1 e2 15             	shl    edx,0x15
c0014e13:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e19:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e1f:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014e23:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014e2d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014e33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e37:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014e3d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014e47:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014e51:	68 00 01 00 00       	push   0x100
c0014e56:	e8 5c 2c ff ff       	call   c0007ab7 <malloc>
c0014e5b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014e5e:	58                   	pop    eax
c0014e5f:	5a                   	pop    edx
c0014e60:	53                   	push   ebx
c0014e61:	68 84 81 02 c0       	push   0xc0028184
c0014e66:	e8 c5 9d 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014e6b:	83 c4 10             	add    esp,0x10
c0014e6e:	89 d8                	mov    eax,ebx
c0014e70:	5b                   	pop    ebx
c0014e71:	5e                   	pop    esi
c0014e72:	5f                   	pop    edi
c0014e73:	c3                   	ret    

c0014e74 <Process::createUserThread()>:
c0014e74:	83 ec 0c             	sub    esp,0xc
c0014e77:	68 80 00 00 00       	push   0x80
c0014e7c:	6a 00                	push   0x0
c0014e7e:	68 cc 47 01 c0       	push   0xc00147cc
c0014e83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e87:	50                   	push   eax
c0014e88:	e8 df fe ff ff       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c0014e8d:	83 c4 1c             	add    esp,0x1c
c0014e90:	c3                   	ret    
c0014e91:	8d 76 00             	lea    esi,[esi+0x0]

c0014e94 <setupMultitasking(void (*)())>:
c0014e94:	56                   	push   esi
c0014e95:	53                   	push   ebx
c0014e96:	83 ec 04             	sub    esp,0x4
c0014e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e9d:	eb 11                	jmp    c0014eb0 <setupMultitasking(void (*)())+0x1c>
c0014e9f:	90                   	nop
c0014ea0:	83 ec 0c             	sub    esp,0xc
c0014ea3:	68 84 81 02 c0       	push   0xc0028184
c0014ea8:	e8 c7 9c 00 00       	call   c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ead:	83 c4 10             	add    esp,0x10
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	68 84 81 02 c0       	push   0xc0028184
c0014eb8:	e8 93 9c 00 00       	call   c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ebd:	83 c4 10             	add    esp,0x10
c0014ec0:	84 c0                	test   al,al
c0014ec2:	74 dc                	je     c0014ea0 <setupMultitasking(void (*)())+0xc>
c0014ec4:	83 ec 0c             	sub    esp,0xc
c0014ec7:	68 24 07 00 00       	push   0x724
c0014ecc:	e8 e6 2b ff ff       	call   c0007ab7 <malloc>
c0014ed1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ed8:	6a 00                	push   0x0
c0014eda:	68 fd 10 02 c0       	push   0xc00210fd
c0014edf:	6a 01                	push   0x1
c0014ee1:	50                   	push   eax
c0014ee2:	89 c3                	mov    ebx,eax
c0014ee4:	e8 5f fc ff ff       	call   c0014b48 <Process::Process(bool, char const*, Process*, char**)>
c0014ee9:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014eef:	83 c4 14             	add    esp,0x14
c0014ef2:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014ef8:	50                   	push   eax
c0014ef9:	e8 47 38 ff ff       	call   c0008745 <setActiveTerminal(VgaText*)>
c0014efe:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f05:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f0f:	83 c8 01             	or     eax,0x1
c0014f12:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f19:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f22:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014f2c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014f32:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014f3c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014f42:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014f4c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014f56:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014f5c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014f62:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014f6c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014f76:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014f7d:	e8 35 2b ff ff       	call   c0007ab7 <malloc>
c0014f82:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014f88:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014f8e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014f94:	5a                   	pop    edx
c0014f95:	59                   	pop    ecx
c0014f96:	68 f9 10 02 c0       	push   0xc00210f9
c0014f9b:	50                   	push   eax
c0014f9c:	e8 af b6 fe ff       	call   c0000650 <strcpy>
c0014fa1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014fa8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014fac:	83 c4 14             	add    esp,0x14
c0014faf:	5b                   	pop    ebx
c0014fb0:	5e                   	pop    esi
c0014fb1:	e9 b3 b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014fb6:	66 90                	xchg   ax,ax

c0014fb8 <schedule()>:
c0014fb8:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0014fbe:	85 d2                	test   edx,edx
c0014fc0:	74 0e                	je     c0014fd0 <schedule()+0x18>
c0014fc2:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014fcc:	c3                   	ret    
c0014fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0014fd0:	53                   	push   ebx
c0014fd1:	83 ec 14             	sub    esp,0x14
c0014fd4:	68 84 81 02 c0       	push   0xc0028184
c0014fd9:	e8 72 9b 00 00       	call   c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	84 c0                	test   al,al
c0014fe3:	75 3f                	jne    c0015024 <schedule()+0x6c>
c0014fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014fed:	83 fa 01             	cmp    edx,0x1
c0014ff0:	74 3a                	je     c001502c <schedule()+0x74>
c0014ff2:	66 90                	xchg   ax,ax
c0014ff4:	83 ec 0c             	sub    esp,0xc
c0014ff7:	68 84 81 02 c0       	push   0xc0028184
c0014ffc:	e8 6b 9b 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015001:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015008:	89 c3                	mov    ebx,eax
c001500a:	e8 65 9b 00 00       	call   c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001500f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015019:	e8 06 f8 ff ff       	call   c0014824 <switchToThread(ThreadControlBlock*)>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	8d 76 00             	lea    esi,[esi+0x0]
c0015024:	83 c4 08             	add    esp,0x8
c0015027:	5b                   	pop    ebx
c0015028:	c3                   	ret    
c0015029:	8d 76 00             	lea    esi,[esi+0x0]
c001502c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015033:	83 ec 08             	sub    esp,0x8
c0015036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001503b:	50                   	push   eax
c001503c:	68 84 81 02 c0       	push   0xc0028184
c0015041:	e8 ea 9b 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015046:	83 c4 10             	add    esp,0x10
c0015049:	eb a9                	jmp    c0014ff4 <schedule()+0x3c>
c001504b:	90                   	nop

c001504c <Semaphore::tryAcquire()>:
c001504c:	53                   	push   ebx
c001504d:	83 ec 08             	sub    esp,0x8
c0015050:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015054:	fa                   	cli    
c0015055:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001505b:	8d 42 01             	lea    eax,[edx+0x1]
c001505e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015063:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015068:	8d 58 01             	lea    ebx,[eax+0x1]
c001506b:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015071:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015074:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015076:	7c 2c                	jl     c00150a4 <Semaphore::tryAcquire()+0x58>
c0015078:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001507d:	85 c0                	test   eax,eax
c001507f:	75 0b                	jne    c001508c <Semaphore::tryAcquire()+0x40>
c0015081:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015086:	85 c0                	test   eax,eax
c0015088:	75 5a                	jne    c00150e4 <Semaphore::tryAcquire()+0x98>
c001508a:	66 90                	xchg   ax,ax
c001508c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015092:	31 c0                	xor    eax,eax
c0015094:	85 d2                	test   edx,edx
c0015096:	75 04                	jne    c001509c <Semaphore::tryAcquire()+0x50>
c0015098:	fb                   	sti    
c0015099:	8d 76 00             	lea    esi,[esi+0x0]
c001509c:	83 c4 08             	add    esp,0x8
c001509f:	5b                   	pop    ebx
c00150a0:	c3                   	ret    
c00150a1:	8d 76 00             	lea    esi,[esi+0x0]
c00150a4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00150a9:	83 c3 01             	add    ebx,0x1
c00150ac:	85 c0                	test   eax,eax
c00150ae:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00150b1:	75 21                	jne    c00150d4 <Semaphore::tryAcquire()+0x88>
c00150b3:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00150b9:	85 c9                	test   ecx,ecx
c00150bb:	74 17                	je     c00150d4 <Semaphore::tryAcquire()+0x88>
c00150bd:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00150c7:	e8 ec fe ff ff       	call   c0014fb8 <schedule()>
c00150cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00150d1:	8d 50 ff             	lea    edx,[eax-0x1]
c00150d4:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150da:	85 d2                	test   edx,edx
c00150dc:	b0 01                	mov    al,0x1
c00150de:	75 bc                	jne    c001509c <Semaphore::tryAcquire()+0x50>
c00150e0:	eb b6                	jmp    c0015098 <Semaphore::tryAcquire()+0x4c>
c00150e2:	66 90                	xchg   ax,ax
c00150e4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00150ee:	e8 c5 fe ff ff       	call   c0014fb8 <schedule()>
c00150f3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00150f8:	8d 50 ff             	lea    edx,[eax-0x1]
c00150fb:	31 c0                	xor    eax,eax
c00150fd:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015103:	85 d2                	test   edx,edx
c0015105:	75 95                	jne    c001509c <Semaphore::tryAcquire()+0x50>
c0015107:	eb 8f                	jmp    c0015098 <Semaphore::tryAcquire()+0x4c>
c0015109:	90                   	nop
c001510a:	66 90                	xchg   ax,ax

c001510c <Semaphore::assertLocked(char const*)>:
c001510c:	83 ec 0c             	sub    esp,0xc
c001510f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015113:	fa                   	cli    
c0015114:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001511a:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001511f:	83 c1 01             	add    ecx,0x1
c0015122:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015128:	8d 48 01             	lea    ecx,[eax+0x1]
c001512b:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015131:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015133:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015136:	7c 28                	jl     c0015160 <Semaphore::assertLocked(char const*)+0x54>
c0015138:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001513d:	85 c0                	test   eax,eax
c001513f:	75 0b                	jne    c001514c <Semaphore::assertLocked(char const*)+0x40>
c0015141:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015146:	85 c0                	test   eax,eax
c0015148:	75 32                	jne    c001517c <Semaphore::assertLocked(char const*)+0x70>
c001514a:	66 90                	xchg   ax,ax
c001514c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015151:	83 e8 01             	sub    eax,0x1
c0015154:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015159:	75 01                	jne    c001515c <Semaphore::assertLocked(char const*)+0x50>
c001515b:	fb                   	sti    
c001515c:	83 c4 0c             	add    esp,0xc
c001515f:	c3                   	ret    
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015167:	52                   	push   edx
c0015168:	e8 54 b6 ff ff       	call   c00107c1 <KePanic(char const*)>
c001516d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	83 e8 01             	sub    eax,0x1
c0015178:	eb be                	jmp    c0015138 <Semaphore::assertLocked(char const*)+0x2c>
c001517a:	66 90                	xchg   ax,ax
c001517c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015186:	e8 2d fe ff ff       	call   c0014fb8 <schedule()>
c001518b:	eb bf                	jmp    c001514c <Semaphore::assertLocked(char const*)+0x40>
c001518d:	8d 76 00             	lea    esi,[esi+0x0]

c0015190 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015190:	83 ec 0c             	sub    esp,0xc
c0015193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015198:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001519c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001519f:	e8 14 fe ff ff       	call   c0014fb8 <schedule()>
c00151a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151a9:	83 e8 01             	sub    eax,0x1
c00151ac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151b1:	75 01                	jne    c00151b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00151b3:	fb                   	sti    
c00151b4:	83 c4 0c             	add    esp,0xc
c00151b7:	c3                   	ret    

c00151b8 <blockTask(TaskState)>:
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	fa                   	cli    
c00151bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151c5:	83 c0 01             	add    eax,0x1
c00151c8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151d5:	e8 de fd ff ff       	call   c0014fb8 <schedule()>
c00151da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151df:	83 e8 01             	sub    eax,0x1
c00151e2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e7:	75 03                	jne    c00151ec <blockTask(TaskState)+0x34>
c00151e9:	fb                   	sti    
c00151ea:	66 90                	xchg   ax,ax
c00151ec:	83 c4 0c             	add    esp,0xc
c00151ef:	c3                   	ret    

c00151f0 <waitTask(int, int*, int)>:
c00151f0:	83 ec 18             	sub    esp,0x18
c00151f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151fc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00151ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015208:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001520b:	6a 07                	push   0x7
c001520d:	e8 a6 ff ff ff       	call   c00151b8 <blockTask(TaskState)>
c0015212:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015217:	83 c4 10             	add    esp,0x10
c001521a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001521d:	85 d2                	test   edx,edx
c001521f:	74 0b                	je     c001522c <waitTask(int, int*, int)+0x3c>
c0015221:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015224:	89 02                	mov    DWORD PTR [edx],eax
c0015226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522b:	90                   	nop
c001522c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001522f:	83 c4 0c             	add    esp,0xc
c0015232:	c3                   	ret    
c0015233:	90                   	nop

c0015234 <milliTenthSleepUntil(unsigned int)>:
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001523b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015241:	76 05                	jbe    c0015248 <milliTenthSleepUntil(unsigned int)+0x14>
c0015243:	90                   	nop
c0015244:	83 c4 0c             	add    esp,0xc
c0015247:	c3                   	ret    
c0015248:	fa                   	cli    
c0015249:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001524f:	83 ec 08             	sub    esp,0x8
c0015252:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015258:	83 c2 01             	add    edx,0x1
c001525b:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015261:	83 c1 01             	add    ecx,0x1
c0015264:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001526a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015270:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015278:	50                   	push   eax
c0015279:	68 78 81 02 c0       	push   0xc0028178
c001527e:	e8 ad 99 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015283:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001528a:	e8 29 ff ff ff       	call   c00151b8 <blockTask(TaskState)>
c001528f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015294:	83 c4 10             	add    esp,0x10
c0015297:	83 e8 01             	sub    eax,0x1
c001529a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001529f:	85 c0                	test   eax,eax
c00152a1:	75 09                	jne    c00152ac <milliTenthSleepUntil(unsigned int)+0x78>
c00152a3:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00152a8:	85 c0                	test   eax,eax
c00152aa:	75 14                	jne    c00152c0 <milliTenthSleepUntil(unsigned int)+0x8c>
c00152ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152b1:	83 e8 01             	sub    eax,0x1
c00152b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152b9:	75 89                	jne    c0015244 <milliTenthSleepUntil(unsigned int)+0x10>
c00152bb:	fb                   	sti    
c00152bc:	83 c4 0c             	add    esp,0xc
c00152bf:	c3                   	ret    
c00152c0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00152ca:	e8 e9 fc ff ff       	call   c0014fb8 <schedule()>
c00152cf:	eb db                	jmp    c00152ac <milliTenthSleepUntil(unsigned int)+0x78>
c00152d1:	8d 76 00             	lea    esi,[esi+0x0]

c00152d4 <milliTenthSleep(unsigned int)>:
c00152d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152d8:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c00152dd:	01 c2                	add    edx,eax
c00152df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00152e3:	e9 4c ff ff ff       	jmp    c0015234 <milliTenthSleepUntil(unsigned int)>

c00152e8 <sleep(unsigned int)>:
c00152e8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00152f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152f4:	eb de                	jmp    c00152d4 <milliTenthSleep(unsigned int)>
c00152f6:	66 90                	xchg   ax,ax

c00152f8 <Semaphore::acquire()>:
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152ff:	fa                   	cli    
c0015300:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015305:	83 c0 01             	add    eax,0x1
c0015308:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001530d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015312:	8d 48 01             	lea    ecx,[eax+0x1]
c0015315:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001531b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001531e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015320:	7d 2e                	jge    c0015350 <Semaphore::acquire()+0x58>
c0015322:	83 c1 01             	add    ecx,0x1
c0015325:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015328:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001532d:	85 c0                	test   eax,eax
c001532f:	75 0b                	jne    c001533c <Semaphore::acquire()+0x44>
c0015331:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015336:	85 c0                	test   eax,eax
c0015338:	75 66                	jne    c00153a0 <Semaphore::acquire()+0xa8>
c001533a:	66 90                	xchg   ax,ax
c001533c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015341:	83 e8 01             	sub    eax,0x1
c0015344:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015349:	75 01                	jne    c001534c <Semaphore::acquire()+0x54>
c001534b:	fb                   	sti    
c001534c:	83 c4 0c             	add    esp,0xc
c001534f:	c3                   	ret    
c0015350:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015355:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001535c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001535f:	85 c9                	test   ecx,ecx
c0015361:	74 51                	je     c00153b4 <Semaphore::acquire()+0xbc>
c0015363:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015366:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001536c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001536f:	90                   	nop
c0015370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015375:	83 ec 0c             	sub    esp,0xc
c0015378:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001537b:	68 78 11 02 c0       	push   0xc0021178
c0015380:	e8 b8 55 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0015385:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001538c:	e8 27 fe ff ff       	call   c00151b8 <blockTask(TaskState)>
c0015391:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	83 e8 01             	sub    eax,0x1
c001539c:	eb 8a                	jmp    c0015328 <Semaphore::acquire()+0x30>
c001539e:	66 90                	xchg   ax,ax
c00153a0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00153aa:	e8 09 fc ff ff       	call   c0014fb8 <schedule()>
c00153af:	eb 8b                	jmp    c001533c <Semaphore::acquire()+0x44>
c00153b1:	8d 76 00             	lea    esi,[esi+0x0]
c00153b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00153bc:	eb b2                	jmp    c0015370 <Semaphore::acquire()+0x78>
c00153be:	66 90                	xchg   ax,ax

c00153c0 <taskReturned>:
c00153c0:	83 ec 18             	sub    esp,0x18
c00153c3:	68 98 11 02 c0       	push   0xc0021198
c00153c8:	e8 f4 b3 ff ff       	call   c00107c1 <KePanic(char const*)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	83 ec 0c             	sub    esp,0xc
c00153d3:	6a 02                	push   0x2
c00153d5:	e8 de fd ff ff       	call   c00151b8 <blockTask(TaskState)>
c00153da:	fa                   	cli    
c00153db:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153e0:	83 c0 01             	add    eax,0x1
c00153e3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153e8:	e8 cb fb ff ff       	call   c0014fb8 <schedule()>
c00153ed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	83 e8 01             	sub    eax,0x1
c00153f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153fd:	85 c0                	test   eax,eax
c00153ff:	75 cf                	jne    c00153d0 <taskReturned+0x10>
c0015401:	fb                   	sti    
c0015402:	eb cc                	jmp    c00153d0 <taskReturned+0x10>

c0015404 <Thr::processFromPID(int)>:
c0015404:	57                   	push   edi
c0015405:	56                   	push   esi
c0015406:	53                   	push   ebx
c0015407:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001540b:	fa                   	cli    
c001540c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015412:	83 ec 0c             	sub    esp,0xc
c0015415:	68 84 81 02 c0       	push   0xc0028184
c001541a:	83 c1 01             	add    ecx,0x1
c001541d:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015423:	e8 44 97 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	89 c7                	mov    edi,eax
c001542d:	eb 15                	jmp    c0015444 <Thr::processFromPID(int)+0x40>
c001542f:	90                   	nop
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	68 84 81 02 c0       	push   0xc0028184
c0015438:	e8 2f 97 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	39 f8                	cmp    eax,edi
c0015442:	74 50                	je     c0015494 <Thr::processFromPID(int)+0x90>
c0015444:	83 ec 0c             	sub    esp,0xc
c0015447:	68 84 81 02 c0       	push   0xc0028184
c001544c:	e8 1b 97 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015451:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015458:	89 c3                	mov    ebx,eax
c001545a:	e8 15 97 00 00       	call   c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001545f:	58                   	pop    eax
c0015460:	5a                   	pop    edx
c0015461:	53                   	push   ebx
c0015462:	68 84 81 02 c0       	push   0xc0028184
c0015467:	e8 c4 97 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001546c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	39 30                	cmp    DWORD PTR [eax],esi
c0015474:	75 ba                	jne    c0015430 <Thr::processFromPID(int)+0x2c>
c0015476:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001547b:	83 e8 01             	sub    eax,0x1
c001547e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015483:	74 0b                	je     c0015490 <Thr::processFromPID(int)+0x8c>
c0015485:	8d 76 00             	lea    esi,[esi+0x0]
c0015488:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001548b:	90                   	nop
c001548c:	5b                   	pop    ebx
c001548d:	5e                   	pop    esi
c001548e:	5f                   	pop    edi
c001548f:	c3                   	ret    
c0015490:	fb                   	sti    
c0015491:	eb f5                	jmp    c0015488 <Thr::processFromPID(int)+0x84>
c0015493:	90                   	nop
c0015494:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015499:	8d 50 ff             	lea    edx,[eax-0x1]
c001549c:	31 c0                	xor    eax,eax
c001549e:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00154a4:	85 d2                	test   edx,edx
c00154a6:	75 e4                	jne    c001548c <Thr::processFromPID(int)+0x88>
c00154a8:	fb                   	sti    
c00154a9:	5b                   	pop    ebx
c00154aa:	5e                   	pop    esi
c00154ab:	5f                   	pop    edi
c00154ac:	c3                   	ret    
c00154ad:	8d 76 00             	lea    esi,[esi+0x0]

c00154b0 <unblockTask(ThreadControlBlock*)>:
c00154b0:	53                   	push   ebx
c00154b1:	83 ec 08             	sub    esp,0x8
c00154b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154b8:	fa                   	cli    
c00154b9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154be:	83 c0 01             	add    eax,0x1
c00154c1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154c6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154c9:	85 c0                	test   eax,eax
c00154cb:	74 67                	je     c0015534 <unblockTask(ThreadControlBlock*)+0x84>
c00154cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154d0:	83 f8 01             	cmp    eax,0x1
c00154d3:	74 37                	je     c001550c <unblockTask(ThreadControlBlock*)+0x5c>
c00154d5:	83 ec 0c             	sub    esp,0xc
c00154d8:	68 84 81 02 c0       	push   0xc0028184
c00154dd:	e8 8a 96 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	85 c0                	test   eax,eax
c00154e7:	75 1b                	jne    c0015504 <unblockTask(ThreadControlBlock*)+0x54>
c00154e9:	eb 5d                	jmp    c0015548 <unblockTask(ThreadControlBlock*)+0x98>
c00154eb:	90                   	nop
c00154ec:	83 ec 08             	sub    esp,0x8
c00154ef:	50                   	push   eax
c00154f0:	68 84 81 02 c0       	push   0xc0028184
c00154f5:	e8 92 99 00 00       	call   c001ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	85 c0                	test   eax,eax
c00154ff:	74 47                	je     c0015548 <unblockTask(ThreadControlBlock*)+0x98>
c0015501:	8d 76 00             	lea    esi,[esi+0x0]
c0015504:	39 c3                	cmp    ebx,eax
c0015506:	75 e4                	jne    c00154ec <unblockTask(ThreadControlBlock*)+0x3c>
c0015508:	eb 12                	jmp    c001551c <unblockTask(ThreadControlBlock*)+0x6c>
c001550a:	66 90                	xchg   ax,ax
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	68 1b 11 02 c0       	push   0xc002111b
c0015514:	e8 24 54 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015521:	83 e8 01             	sub    eax,0x1
c0015524:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015529:	75 01                	jne    c001552c <unblockTask(ThreadControlBlock*)+0x7c>
c001552b:	fb                   	sti    
c001552c:	83 c4 08             	add    esp,0x8
c001552f:	5b                   	pop    ebx
c0015530:	c3                   	ret    
c0015531:	8d 76 00             	lea    esi,[esi+0x0]
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	68 04 11 02 c0       	push   0xc0021104
c001553c:	e8 fc 53 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	eb d6                	jmp    c001551c <unblockTask(ThreadControlBlock*)+0x6c>
c0015546:	66 90                	xchg   ax,ax
c0015548:	83 ec 08             	sub    esp,0x8
c001554b:	53                   	push   ebx
c001554c:	68 84 81 02 c0       	push   0xc0028184
c0015551:	e8 da 96 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	eb c1                	jmp    c001551c <unblockTask(ThreadControlBlock*)+0x6c>
c001555b:	90                   	nop

c001555c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001555c:	55                   	push   ebp
c001555d:	57                   	push   edi
c001555e:	56                   	push   esi
c001555f:	53                   	push   ebx
c0015560:	83 ec 1c             	sub    esp,0x1c
c0015563:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015567:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001556a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015570:	85 ed                	test   ebp,ebp
c0015572:	7e 28                	jle    c001559c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015574:	31 f6                	xor    esi,esi
c0015576:	66 90                	xchg   ax,ax
c0015578:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001557f:	83 ec 0c             	sub    esp,0xc
c0015582:	83 c6 01             	add    esi,0x1
c0015585:	57                   	push   edi
c0015586:	e8 3c 25 ff ff       	call   c0007ac7 <free>
c001558b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015597:	7f df                	jg     c0015578 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015599:	8d 76 00             	lea    esi,[esi+0x0]
c001559c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00155a6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155ab:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00155ae:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00155b1:	d3 c0                	rol    eax,cl
c00155b3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00155ba:	21 c8                	and    eax,ecx
c00155bc:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00155c3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155c6:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00155ce:	89 f7                	mov    edi,esi
c00155d0:	0f 85 72 01 00 00    	jne    c0015748 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00155d6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00155dc:	85 ed                	test   ebp,ebp
c00155de:	74 1c                	je     c00155fc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	55                   	push   ebp
c00155e4:	e8 e9 ae ff ff       	call   c00104d2 <EnvVarContainer::~EnvVarContainer()>
c00155e9:	59                   	pop    ecx
c00155ea:	5e                   	pop    esi
c00155eb:	6a 0c                	push   0xc
c00155ed:	55                   	push   ebp
c00155ee:	e8 4c 52 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c00155f3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	89 f7                	mov    edi,esi
c00155fb:	90                   	nop
c00155fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015602:	85 c0                	test   eax,eax
c0015604:	0f 84 b2 00 00 00    	je     c00156bc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001560a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001560d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015611:	31 c9                	xor    ecx,ecx
c0015613:	eb 17                	jmp    c001562c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015615:	8d 76 00             	lea    esi,[esi+0x0]
c0015618:	83 c1 01             	add    ecx,0x1
c001561b:	83 f9 10             	cmp    ecx,0x10
c001561e:	0f 84 98 00 00 00    	je     c00156bc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015624:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001562a:	66 90                	xchg   ax,ax
c001562c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015633:	d3 fa                	sar    edx,cl
c0015635:	80 e2 01             	and    dl,0x1
c0015638:	74 de                	je     c0015618 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001563a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c001563d:	c1 e2 05             	shl    edx,0x5
c0015640:	29 ca                	sub    edx,ecx
c0015642:	01 d0                	add    eax,edx
c0015644:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001564a:	83 fd 07             	cmp    ebp,0x7
c001564d:	75 c9                	jne    c0015618 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001564f:	05 40 02 00 00       	add    eax,0x240
c0015654:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015657:	83 fd ff             	cmp    ebp,0xffffffff
c001565a:	0f 8c f0 00 00 00    	jl     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015660:	0f 84 ae 01 00 00    	je     c0015814 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015666:	85 ed                	test   ebp,ebp
c0015668:	0f 84 92 01 00 00    	je     c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001566e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015670:	75 a6                	jne    c0015618 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015672:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015676:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001567c:	01 d0                	add    eax,edx
c001567e:	66 90                	xchg   ax,ax
c0015680:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001568d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015690:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015696:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001569d:	50                   	push   eax
c001569e:	e8 0d fe ff ff       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c00156a3:	83 c4 10             	add    esp,0x10
c00156a6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156a9:	89 f7                	mov    edi,esi
c00156ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156af:	83 c1 01             	add    ecx,0x1
c00156b2:	83 f9 10             	cmp    ecx,0x10
c00156b5:	0f 85 69 ff ff ff    	jne    c0015624 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00156bb:	90                   	nop
c00156bc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00156c2:	85 c0                	test   eax,eax
c00156c4:	74 62                	je     c0015728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00156c6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00156cc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00156d2:	74 54                	je     c0015728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00156d4:	83 ec 0c             	sub    esp,0xc
c00156d7:	68 84 81 02 c0       	push   0xc0028184
c00156dc:	e8 8b 94 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156e1:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00156e8:	89 c7                	mov    edi,eax
c00156ea:	e8 61 94 00 00       	call   c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	84 c0                	test   al,al
c00156f4:	0f 84 ce 00 00 00    	je     c00157c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00156fa:	66 90                	xchg   ax,ax
c00156fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156ff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015705:	85 d2                	test   edx,edx
c0015707:	74 0f                	je     c0015718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015709:	8b 02                	mov    eax,DWORD PTR [edx]
c001570b:	83 ec 0c             	sub    esp,0xc
c001570e:	52                   	push   edx
c001570f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015712:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015715:	83 c4 10             	add    esp,0x10
c0015718:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015722:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015725:	8d 76 00             	lea    esi,[esi+0x0]
c0015728:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001572e:	85 db                	test   ebx,ebx
c0015730:	74 16                	je     c0015748 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015732:	83 ec 0c             	sub    esp,0xc
c0015735:	53                   	push   ebx
c0015736:	e8 27 44 ff ff       	call   c0009b62 <VAS::~VAS()>
c001573b:	58                   	pop    eax
c001573c:	5a                   	pop    edx
c001573d:	6a 14                	push   0x14
c001573f:	53                   	push   ebx
c0015740:	e8 fa 50 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	83 c4 1c             	add    esp,0x1c
c001574b:	5b                   	pop    ebx
c001574c:	5e                   	pop    esi
c001574d:	5f                   	pop    edi
c001574e:	5d                   	pop    ebp
c001574f:	c3                   	ret    
c0015750:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015754:	83 ec 0c             	sub    esp,0xc
c0015757:	68 cc 11 02 c0       	push   0xc00211cc
c001575c:	e8 60 b0 ff ff       	call   c00107c1 <KePanic(char const*)>
c0015761:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	89 f7                	mov    edi,esi
c0015769:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001576d:	e9 a6 fe ff ff       	jmp    c0015618 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015772:	66 90                	xchg   ax,ax
c0015774:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001577a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015780:	75 1e                	jne    c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015782:	83 ec 0c             	sub    esp,0xc
c0015785:	68 34 12 02 c0       	push   0xc0021234
c001578a:	e8 ae 51 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001578f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015796:	e8 1d fa ff ff       	call   c00151b8 <blockTask(TaskState)>
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	66 90                	xchg   ax,ax
c00157a0:	83 ec 08             	sub    esp,0x8
c00157a3:	56                   	push   esi
c00157a4:	68 84 81 02 c0       	push   0xc0028184
c00157a9:	e8 82 94 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157ae:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157b5:	e8 b2 93 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	39 f8                	cmp    eax,edi
c00157bf:	0f 84 37 ff ff ff    	je     c00156fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00157c5:	8d 76 00             	lea    esi,[esi+0x0]
c00157c8:	83 ec 0c             	sub    esp,0xc
c00157cb:	68 84 81 02 c0       	push   0xc0028184
c00157d0:	e8 97 93 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157d5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157dc:	89 c6                	mov    esi,eax
c00157de:	e8 91 93 00 00       	call   c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	39 f3                	cmp    ebx,esi
c00157e8:	74 b6                	je     c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00157ea:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00157ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157f0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00157f6:	75 a8                	jne    c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00157f8:	e9 77 ff ff ff       	jmp    c0015774 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00157fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015800:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	68 00 12 02 c0       	push   0xc0021200
c001580c:	e9 4b ff ff ff       	jmp    c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015811:	8d 76 00             	lea    esi,[esi+0x0]
c0015814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015818:	8b 36                	mov    esi,DWORD PTR [esi]
c001581a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001581d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015820:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015826:	01 d7                	add    edi,edx
c0015828:	89 f8                	mov    eax,edi
c001582a:	e9 51 fe ff ff       	jmp    c0015680 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001582f:	90                   	nop

c0015830 <cleanerTaskFunction(void*)>:
c0015830:	53                   	push   ebx
c0015831:	83 ec 08             	sub    esp,0x8
c0015834:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015839:	83 e8 01             	sub    eax,0x1
c001583c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015841:	75 01                	jne    c0015844 <cleanerTaskFunction(void*)+0x14>
c0015843:	fb                   	sti    
c0015844:	fa                   	cli    
c0015845:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001584a:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015851:	8d 50 01             	lea    edx,[eax+0x1]
c0015854:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001585a:	0f 84 c4 00 00 00    	je     c0015924 <cleanerTaskFunction(void*)+0xf4>
c0015860:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015865:	85 c0                	test   eax,eax
c0015867:	75 03                	jne    c001586c <cleanerTaskFunction(void*)+0x3c>
c0015869:	fb                   	sti    
c001586a:	66 90                	xchg   ax,ax
c001586c:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015873:	fa                   	cli    
c0015874:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001587a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015880:	83 c2 01             	add    edx,0x1
c0015883:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015889:	83 c1 01             	add    ecx,0x1
c001588c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015892:	fa                   	cli    
c0015893:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015899:	83 c3 01             	add    ebx,0x1
c001589c:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00158a2:	eb 28                	jmp    c00158cc <cleanerTaskFunction(void*)+0x9c>
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	68 6c 81 02 c0       	push   0xc002816c
c00158ac:	e8 bb 92 00 00       	call   c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158b1:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00158b8:	89 c3                	mov    ebx,eax
c00158ba:	e8 b5 92 00 00       	call   c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158c2:	e8 95 fc ff ff       	call   c001555c <cleanupTerminatedTask(ThreadControlBlock*)>
c00158c7:	83 c4 10             	add    esp,0x10
c00158ca:	66 90                	xchg   ax,ax
c00158cc:	83 ec 0c             	sub    esp,0xc
c00158cf:	68 6c 81 02 c0       	push   0xc002816c
c00158d4:	e8 77 92 00 00       	call   c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158d9:	83 c4 10             	add    esp,0x10
c00158dc:	84 c0                	test   al,al
c00158de:	74 c4                	je     c00158a4 <cleanerTaskFunction(void*)+0x74>
c00158e0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158e5:	83 e8 01             	sub    eax,0x1
c00158e8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158ed:	75 01                	jne    c00158f0 <cleanerTaskFunction(void*)+0xc0>
c00158ef:	fb                   	sti    
c00158f0:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00158f5:	83 e8 01             	sub    eax,0x1
c00158f8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00158fd:	0f 85 31 ff ff ff    	jne    c0015834 <cleanerTaskFunction(void*)+0x4>
c0015903:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015908:	85 c0                	test   eax,eax
c001590a:	0f 84 24 ff ff ff    	je     c0015834 <cleanerTaskFunction(void*)+0x4>
c0015910:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001591a:	e8 99 f6 ff ff       	call   c0014fb8 <schedule()>
c001591f:	e9 10 ff ff ff       	jmp    c0015834 <cleanerTaskFunction(void*)+0x4>
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	6a 02                	push   0x2
c0015929:	e8 62 f8 ff ff       	call   c0015190 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	e9 36 ff ff ff       	jmp    c001586c <cleanerTaskFunction(void*)+0x3c>
c0015936:	66 90                	xchg   ax,ax

c0015938 <terminateTask(int)>:
c0015938:	83 ec 14             	sub    esp,0x14
c001593b:	fa                   	cli    
c001593c:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015942:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015948:	83 c2 01             	add    edx,0x1
c001594b:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015951:	83 c1 01             	add    ecx,0x1
c0015954:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001595a:	fa                   	cli    
c001595b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015960:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015964:	83 c0 01             	add    eax,0x1
c0015967:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001596c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015971:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015979:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001597c:	50                   	push   eax
c001597d:	68 6c 81 02 c0       	push   0xc002816c
c0015982:	e8 a9 92 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015996:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c001599b:	85 c0                	test   eax,eax
c001599d:	74 65                	je     c0015a04 <terminateTask(int)+0xcc>
c001599f:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c00159a6:	83 ec 0c             	sub    esp,0xc
c00159a9:	50                   	push   eax
c00159aa:	e8 01 fb ff ff       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	66 90                	xchg   ax,ax
c00159b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159b9:	83 e8 01             	sub    eax,0x1
c00159bc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159c1:	75 01                	jne    c00159c4 <terminateTask(int)+0x8c>
c00159c3:	fb                   	sti    
c00159c4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159c9:	83 e8 01             	sub    eax,0x1
c00159cc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159d1:	75 09                	jne    c00159dc <terminateTask(int)+0xa4>
c00159d3:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00159da:	75 3c                	jne    c0015a18 <terminateTask(int)+0xe0>
c00159dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159e1:	83 e8 01             	sub    eax,0x1
c00159e4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159e9:	75 01                	jne    c00159ec <terminateTask(int)+0xb4>
c00159eb:	fb                   	sti    
c00159ec:	fa                   	cli    
c00159ed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f2:	83 c0 01             	add    eax,0x1
c00159f5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159fa:	66 90                	xchg   ax,ax
c00159fc:	e8 b7 f5 ff ff       	call   c0014fb8 <schedule()>
c0015a01:	eb d9                	jmp    c00159dc <terminateTask(int)+0xa4>
c0015a03:	90                   	nop
c0015a04:	83 ec 0c             	sub    esp,0xc
c0015a07:	68 32 11 02 c0       	push   0xc0021132
c0015a0c:	e8 2c 4f ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	eb 9e                	jmp    c00159b4 <terminateTask(int)+0x7c>
c0015a16:	66 90                	xchg   ax,ax
c0015a18:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a22:	eb d8                	jmp    c00159fc <terminateTask(int)+0xc4>

c0015a24 <Thr::terminateFromIRQ(int)>:
c0015a24:	83 ec 18             	sub    esp,0x18
c0015a27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a2b:	50                   	push   eax
c0015a2c:	e8 07 ff ff ff       	call   c0015938 <terminateTask(int)>
c0015a31:	90                   	nop
c0015a32:	66 90                	xchg   ax,ax

c0015a34 <Semaphore::release()>:
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a3b:	fa                   	cli    
c0015a3c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a41:	83 c0 01             	add    eax,0x1
c0015a44:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a49:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0015a51:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a57:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015a5a:	85 c9                	test   ecx,ecx
c0015a5c:	74 42                	je     c0015aa0 <Semaphore::release()+0x6c>
c0015a5e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015a61:	83 ec 0c             	sub    esp,0xc
c0015a64:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a67:	51                   	push   ecx
c0015a68:	e8 43 fa ff ff       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c0015a6d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	83 e8 01             	sub    eax,0x1
c0015a78:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a7d:	85 c0                	test   eax,eax
c0015a7f:	75 0b                	jne    c0015a8c <Semaphore::release()+0x58>
c0015a81:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a86:	85 c0                	test   eax,eax
c0015a88:	75 22                	jne    c0015aac <Semaphore::release()+0x78>
c0015a8a:	66 90                	xchg   ax,ax
c0015a8c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a91:	83 e8 01             	sub    eax,0x1
c0015a94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a99:	75 01                	jne    c0015a9c <Semaphore::release()+0x68>
c0015a9b:	fb                   	sti    
c0015a9c:	83 c4 0c             	add    esp,0xc
c0015a9f:	c3                   	ret    
c0015aa0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015aa3:	83 e9 01             	sub    ecx,0x1
c0015aa6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015aa9:	eb cd                	jmp    c0015a78 <Semaphore::release()+0x44>
c0015aab:	90                   	nop
c0015aac:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ab6:	e8 fd f4 ff ff       	call   c0014fb8 <schedule()>
c0015abb:	eb cf                	jmp    c0015a8c <Semaphore::release()+0x58>
c0015abd:	8d 76 00             	lea    esi,[esi+0x0]

c0015ac0 <__static_initialization_and_destruction_0(int, int)>:
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015ac8:	0f 85 8e 00 00 00    	jne    c0015b5c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015ace:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015ad6:	0f 85 80 00 00 00    	jne    c0015b5c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015adc:	83 ec 0c             	sub    esp,0xc
c0015adf:	68 84 81 02 c0       	push   0xc0028184
c0015ae4:	e8 fb 93 00 00       	call   c001eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	83 ec 04             	sub    esp,0x4
c0015aef:	68 c8 1d 02 c0       	push   0xc0021dc8
c0015af4:	68 84 81 02 c0       	push   0xc0028184
c0015af9:	68 94 ee 01 c0       	push   0xc001ee94
c0015afe:	e8 ec 4c ff ff       	call   c000a7ef <__cxa_atexit>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	68 78 81 02 c0       	push   0xc0028178
c0015b0e:	e8 d1 93 00 00       	call   c001eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b13:	83 c4 10             	add    esp,0x10
c0015b16:	83 ec 04             	sub    esp,0x4
c0015b19:	68 c8 1d 02 c0       	push   0xc0021dc8
c0015b1e:	68 78 81 02 c0       	push   0xc0028178
c0015b23:	68 94 ee 01 c0       	push   0xc001ee94
c0015b28:	e8 c2 4c ff ff       	call   c000a7ef <__cxa_atexit>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	83 ec 0c             	sub    esp,0xc
c0015b33:	68 6c 81 02 c0       	push   0xc002816c
c0015b38:	e8 a7 93 00 00       	call   c001eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b3d:	83 c4 10             	add    esp,0x10
c0015b40:	83 ec 04             	sub    esp,0x4
c0015b43:	68 c8 1d 02 c0       	push   0xc0021dc8
c0015b48:	68 6c 81 02 c0       	push   0xc002816c
c0015b4d:	68 94 ee 01 c0       	push   0xc001ee94
c0015b52:	e8 98 4c ff ff       	call   c000a7ef <__cxa_atexit>
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	66 90                	xchg   ax,ax
c0015b5c:	90                   	nop
c0015b5d:	83 c4 0c             	add    esp,0xc
c0015b60:	c3                   	ret    
c0015b61:	8d 76 00             	lea    esi,[esi+0x0]

c0015b64 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015b64:	83 ec 0c             	sub    esp,0xc
c0015b67:	83 ec 08             	sub    esp,0x8
c0015b6a:	68 ff ff 00 00       	push   0xffff
c0015b6f:	6a 01                	push   0x1
c0015b71:	e8 4a ff ff ff       	call   c0015ac0 <__static_initialization_and_destruction_0(int, int)>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	83 c4 0c             	add    esp,0xc
c0015b7c:	c3                   	ret    

c0015b7d <Vm::inbv(unsigned short)>:
c0015b7d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b81:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015b86:	75 06                	jne    c0015b8e <Vm::inbv(unsigned short)+0x11>
c0015b88:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015b8d:	c3                   	ret    
c0015b8e:	ec                   	in     al,dx
c0015b8f:	c3                   	ret    

c0015b90 <Vm::outbv(unsigned short, unsigned char)>:
c0015b90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b98:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015b9d:	75 25                	jne    c0015bc4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015b9f:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015ba5:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015bab:	8d 51 01             	lea    edx,[ecx+0x1]
c0015bae:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015bb4:	83 fa 20             	cmp    edx,0x20
c0015bb7:	75 0c                	jne    c0015bc5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015bb9:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015bc3:	c3                   	ret    
c0015bc4:	ee                   	out    dx,al
c0015bc5:	c3                   	ret    

c0015bc6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015bc6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015bcb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015bd0:	c1 e0 04             	shl    eax,0x4
c0015bd3:	01 d0                	add    eax,edx
c0015bd5:	c3                   	ret    

c0015bd6 <Vm::getSegment(unsigned int)>:
c0015bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bda:	c1 e8 10             	shr    eax,0x10
c0015bdd:	c3                   	ret    

c0015bde <Vm::getOffset(unsigned int)>:
c0015bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be2:	c3                   	ret    

c0015be3 <Vm::mainloop2()>:
c0015be3:	83 ec 18             	sub    esp,0x18
c0015be6:	fa                   	cli    
c0015be7:	6a 02                	push   0x2
c0015be9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015bef:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015bf6:	e8 95 f5 ff ff       	call   c0015190 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015bfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c00:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c04:	52                   	push   edx
c0015c05:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c09:	52                   	push   edx
c0015c0a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c0e:	52                   	push   edx
c0015c0f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c13:	50                   	push   eax
c0015c14:	e8 f6 a5 fe ff       	call   c000020f <goToVM86>
c0015c19:	83 c4 2c             	add    esp,0x2c
c0015c1c:	c3                   	ret    

c0015c1d <Vm::mainVm8086Loop(void*)>:
c0015c1d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c22:	48                   	dec    eax
c0015c23:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c28:	75 01                	jne    c0015c2b <Vm::mainVm8086Loop(void*)+0xe>
c0015c2a:	fb                   	sti    
c0015c2b:	eb b6                	jmp    c0015be3 <Vm::mainloop2()>

c0015c2d <Vm::mainloop3(unsigned long)>:
c0015c2d:	83 ec 18             	sub    esp,0x18
c0015c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c34:	fa                   	cli    
c0015c35:	6a 02                	push   0x2
c0015c37:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c3d:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015c44:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015c49:	e8 42 f5 ff ff       	call   c0015190 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c4e:	83 c4 1c             	add    esp,0x1c
c0015c51:	eb 90                	jmp    c0015be3 <Vm::mainloop2()>

c0015c53 <Vm::initialise8086()>:
c0015c53:	83 ec 0c             	sub    esp,0xc
c0015c56:	68 80 00 00 00       	push   0x80
c0015c5b:	6a 00                	push   0x0
c0015c5d:	68 1d 5c 01 c0       	push   0xc0015c1d
c0015c62:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015c68:	e8 ff f0 ff ff       	call   c0014d6c <Process::createThread(void (*)(void*), void*, int)>
c0015c6d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015c74:	68 00 01 00 00       	push   0x100
c0015c79:	6a 00                	push   0x0
c0015c7b:	6a 00                	push   0x0
c0015c7d:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015c82:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015c87:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c8d:	e8 58 43 ff ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015c92:	83 c4 2c             	add    esp,0x2c
c0015c95:	c3                   	ret    

c0015c96 <Vm::finish8086()>:
c0015c96:	53                   	push   ebx
c0015c97:	83 ec 08             	sub    esp,0x8
c0015c9a:	fa                   	cli    
c0015c9b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ca1:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015ca8:	75 15                	jne    c0015cbf <Vm::finish8086()+0x29>
c0015caa:	e8 09 f3 ff ff       	call   c0014fb8 <schedule()>
c0015caf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cb4:	48                   	dec    eax
c0015cb5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cba:	75 de                	jne    c0015c9a <Vm::finish8086()+0x4>
c0015cbc:	fb                   	sti    
c0015cbd:	eb db                	jmp    c0015c9a <Vm::finish8086()+0x4>
c0015cbf:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015cc6:	83 ec 0c             	sub    esp,0xc
c0015cc9:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015ccf:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015cd5:	e8 d6 f7 ff ff       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c0015cda:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	8d 50 ff             	lea    edx,[eax-0x1]
c0015ce5:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015ceb:	85 d2                	test   edx,edx
c0015ced:	75 01                	jne    c0015cf0 <Vm::finish8086()+0x5a>
c0015cef:	fb                   	sti    
c0015cf0:	83 c4 08             	add    esp,0x8
c0015cf3:	89 d8                	mov    eax,ebx
c0015cf5:	5b                   	pop    ebx
c0015cf6:	c3                   	ret    

c0015cf7 <Vm::getOutput8086(unsigned char*)>:
c0015cf7:	57                   	push   edi
c0015cf8:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015cfe:	56                   	push   esi
c0015cff:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d04:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d0a:	5e                   	pop    esi
c0015d0b:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d10:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d1a:	5f                   	pop    edi
c0015d1b:	c3                   	ret    

c0015d1c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d1c:	55                   	push   ebp
c0015d1d:	57                   	push   edi
c0015d1e:	56                   	push   esi
c0015d1f:	53                   	push   ebx
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015d27:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015d2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015d2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015d33:	fa                   	cli    
c0015d34:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d3a:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015d41:	75 15                	jne    c0015d58 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015d43:	e8 70 f2 ff ff       	call   c0014fb8 <schedule()>
c0015d48:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d4d:	48                   	dec    eax
c0015d4e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d53:	75 de                	jne    c0015d33 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015d55:	fb                   	sti    
c0015d56:	eb db                	jmp    c0015d33 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015d58:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d62:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015d67:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015d6b:	0f b7 ff             	movzx  edi,di
c0015d6e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015d72:	0f b7 f6             	movzx  esi,si
c0015d75:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015d79:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015d7d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015d81:	50                   	push   eax
c0015d82:	6a 20                	push   0x20
c0015d84:	6a 00                	push   0x0
c0015d86:	68 e0 81 02 c0       	push   0xc00281e0
c0015d8b:	e8 60 a7 fe ff       	call   c00004f0 <memset>
c0015d90:	5a                   	pop    edx
c0015d91:	59                   	pop    ecx
c0015d92:	57                   	push   edi
c0015d93:	56                   	push   esi
c0015d94:	e8 2d fe ff ff       	call   c0015bc6 <Vm::realToLinear(unsigned short, unsigned short)>
c0015d99:	83 c4 10             	add    esp,0x10
c0015d9c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015da0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015da4:	89 c7                	mov    edi,eax
c0015da6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015da8:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015daf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015db4:	48                   	dec    eax
c0015db5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dba:	75 01                	jne    c0015dbd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015dbc:	fb                   	sti    
c0015dbd:	83 ec 0c             	sub    esp,0xc
c0015dc0:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015dc6:	e8 e5 f6 ff ff       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c0015dcb:	83 c4 1c             	add    esp,0x1c
c0015dce:	b0 01                	mov    al,0x1
c0015dd0:	5b                   	pop    ebx
c0015dd1:	5e                   	pop    esi
c0015dd2:	5f                   	pop    edi
c0015dd3:	5d                   	pop    ebp
c0015dd4:	c3                   	ret    

c0015dd5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015dd5:	55                   	push   ebp
c0015dd6:	57                   	push   edi
c0015dd7:	56                   	push   esi
c0015dd8:	53                   	push   ebx
c0015dd9:	83 ec 2c             	sub    esp,0x2c
c0015ddc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015de0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015de4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015de8:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015dec:	fa                   	cli    
c0015ded:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015df3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015df9:	84 db                	test   bl,bl
c0015dfb:	75 1d                	jne    c0015e1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015dfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e01:	e8 b2 f1 ff ff       	call   c0014fb8 <schedule()>
c0015e06:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e0f:	48                   	dec    eax
c0015e10:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e15:	75 d5                	jne    c0015dec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e17:	fb                   	sti    
c0015e18:	eb d2                	jmp    c0015dec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e1a:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e24:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e29:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015e2d:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015e31:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e35:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e39:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e3d:	50                   	push   eax
c0015e3e:	6a 20                	push   0x20
c0015e40:	6a 00                	push   0x0
c0015e42:	68 e0 81 02 c0       	push   0xc00281e0
c0015e47:	e8 a4 a6 fe ff       	call   c00004f0 <memset>
c0015e4c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e53:	e8 5f 1c ff ff       	call   c0007ab7 <malloc>
c0015e58:	83 c4 0c             	add    esp,0xc
c0015e5b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015e61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e65:	89 c5                	mov    ebp,eax
c0015e67:	50                   	push   eax
c0015e68:	e8 79 50 ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c0015e6d:	83 c4 10             	add    esp,0x10
c0015e70:	85 ed                	test   ebp,ebp
c0015e72:	75 0a                	jne    c0015e7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	68 5c 12 02 c0       	push   0xc002125c
c0015e7c:	eb 2b                	jmp    c0015ea9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015e7e:	50                   	push   eax
c0015e7f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e83:	50                   	push   eax
c0015e84:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015e88:	50                   	push   eax
c0015e89:	55                   	push   ebp
c0015e8a:	e8 bf 53 ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c0015e8f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015e93:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e97:	83 c4 10             	add    esp,0x10
c0015e9a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015e9f:	74 27                	je     c0015ec8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015ea1:	83 ec 0c             	sub    esp,0xc
c0015ea4:	68 70 12 02 c0       	push   0xc0021270
c0015ea9:	e8 13 a9 ff ff       	call   c00107c1 <KePanic(char const*)>
c0015eae:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	48                   	dec    eax
c0015eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ebc:	85 c0                	test   eax,eax
c0015ebe:	75 01                	jne    c0015ec1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015ec0:	fb                   	sti    
c0015ec1:	31 db                	xor    ebx,ebx
c0015ec3:	e9 90 00 00 00       	jmp    c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015ec8:	51                   	push   ecx
c0015ec9:	51                   	push   ecx
c0015eca:	6a 01                	push   0x1
c0015ecc:	55                   	push   ebp
c0015ecd:	e8 d0 50 ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c0015ed2:	83 c4 10             	add    esp,0x10
c0015ed5:	85 c0                	test   eax,eax
c0015ed7:	74 26                	je     c0015eff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015ed9:	83 ec 0c             	sub    esp,0xc
c0015edc:	68 89 12 02 c0       	push   0xc0021289
c0015ee1:	e8 db a8 ff ff       	call   c00107c1 <KePanic(char const*)>
c0015ee6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015eeb:	83 c4 10             	add    esp,0x10
c0015eee:	48                   	dec    eax
c0015eef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ef4:	85 c0                	test   eax,eax
c0015ef6:	75 c9                	jne    c0015ec1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015ef8:	fb                   	sti    
c0015ef9:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015efd:	eb 59                	jmp    c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015eff:	50                   	push   eax
c0015f00:	0f b7 ff             	movzx  edi,di
c0015f03:	50                   	push   eax
c0015f04:	0f b7 f6             	movzx  esi,si
c0015f07:	57                   	push   edi
c0015f08:	56                   	push   esi
c0015f09:	e8 b8 fc ff ff       	call   c0015bc6 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f0e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f11:	5a                   	pop    edx
c0015f12:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015f16:	56                   	push   esi
c0015f17:	50                   	push   eax
c0015f18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f20:	55                   	push   ebp
c0015f21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f24:	83 c4 14             	add    esp,0x14
c0015f27:	55                   	push   ebp
c0015f28:	e8 d3 50 ff ff       	call   c000b000 <File::close()>
c0015f2d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f3c:	48                   	dec    eax
c0015f3d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f42:	85 c0                	test   eax,eax
c0015f44:	75 01                	jne    c0015f47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015f46:	fb                   	sti    
c0015f47:	83 ec 0c             	sub    esp,0xc
c0015f4a:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015f50:	e8 5b f5 ff ff       	call   c00154b0 <unblockTask(ThreadControlBlock*)>
c0015f55:	83 c4 10             	add    esp,0x10
c0015f58:	83 c4 2c             	add    esp,0x2c
c0015f5b:	88 d8                	mov    al,bl
c0015f5d:	5b                   	pop    ebx
c0015f5e:	5e                   	pop    esi
c0015f5f:	5f                   	pop    edi
c0015f60:	5d                   	pop    ebp
c0015f61:	c3                   	ret    

c0015f62 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015f62:	57                   	push   edi
c0015f63:	56                   	push   esi
c0015f64:	53                   	push   ebx
c0015f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f71:	83 e8 06             	sub    eax,0x6
c0015f74:	0f b7 c0             	movzx  eax,ax
c0015f77:	50                   	push   eax
c0015f78:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015f7d:	50                   	push   eax
c0015f7e:	e8 43 fc ff ff       	call   c0015bc6 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f83:	5a                   	pop    edx
c0015f84:	5e                   	pop    esi
c0015f85:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015f88:	8d 56 fa             	lea    edx,[esi-0x6]
c0015f8b:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015f8e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015f94:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015f97:	8d 56 02             	lea    edx,[esi+0x2]
c0015f9a:	66 89 10             	mov    WORD PTR [eax],dx
c0015f9d:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015fa0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015fa4:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015fa7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015fab:	89 d6                	mov    esi,edx
c0015fad:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015fb3:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0015fb9:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015fbd:	74 05                	je     c0015fc4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0015fbf:	80 ce 02             	or     dh,0x2
c0015fc2:	89 d6                	mov    esi,edx
c0015fc4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015fc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fcd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015fd1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015fd9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015fdc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015fe4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015fe7:	5b                   	pop    ebx
c0015fe8:	5e                   	pop    esi
c0015fe9:	5f                   	pop    edi
c0015fea:	c3                   	ret    

c0015feb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015feb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015ff0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015ff5:	c1 e0 04             	shl    eax,0x4
c0015ff8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015ffb:	c3                   	ret    

c0015ffc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015ffc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016001:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016006:	c1 e0 04             	shl    eax,0x4
c0016009:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001600d:	c3                   	ret    

c001600e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001600e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016013:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016018:	c1 e0 04             	shl    eax,0x4
c001601b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001601e:	c3                   	ret    

c001601f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001601f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016024:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016029:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001602d:	c1 e0 04             	shl    eax,0x4
c0016030:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016033:	c3                   	ret    

c0016034 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016034:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016039:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001603e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016042:	c1 e0 04             	shl    eax,0x4
c0016045:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016049:	c3                   	ret    

c001604a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001604a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001604f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016058:	c1 e0 04             	shl    eax,0x4
c001605b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001605e:	c3                   	ret    

c001605f <Vm::faultHandler(regs*)>:
c001605f:	55                   	push   ebp
c0016060:	57                   	push   edi
c0016061:	56                   	push   esi
c0016062:	53                   	push   ebx
c0016063:	83 ec 2c             	sub    esp,0x2c
c0016066:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001606a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001606d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016071:	0f b7 f8             	movzx  edi,ax
c0016074:	0f b7 c0             	movzx  eax,ax
c0016077:	52                   	push   edx
c0016078:	50                   	push   eax
c0016079:	e8 48 fb ff ff       	call   c0015bc6 <Vm::realToLinear(unsigned short, unsigned short)>
c001607e:	5a                   	pop    edx
c001607f:	59                   	pop    ecx
c0016080:	89 c1                	mov    ecx,eax
c0016082:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016085:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016089:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001608e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016092:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016095:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016099:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001609e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00160aa:	e8 17 fb ff ff       	call   c0015bc6 <Vm::realToLinear(unsigned short, unsigned short)>
c00160af:	5e                   	pop    esi
c00160b0:	be 06 00 00 00       	mov    esi,0x6
c00160b5:	5d                   	pop    ebp
c00160b6:	31 ed                	xor    ebp,ebp
c00160b8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00160bd:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00160c0:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00160c6:	0f 84 54 02 00 00    	je     c0016320 <Vm::faultHandler(regs*)+0x2c1>
c00160cc:	0f 87 94 00 00 00    	ja     c0016166 <Vm::faultHandler(regs*)+0x107>
c00160d2:	83 fa 66             	cmp    edx,0x66
c00160d5:	0f 84 c2 01 00 00    	je     c001629d <Vm::faultHandler(regs*)+0x23e>
c00160db:	77 47                	ja     c0016124 <Vm::faultHandler(regs*)+0xc5>
c00160dd:	83 fa 36             	cmp    edx,0x36
c00160e0:	0f 84 aa 01 00 00    	je     c0016290 <Vm::faultHandler(regs*)+0x231>
c00160e6:	77 1a                	ja     c0016102 <Vm::faultHandler(regs*)+0xa3>
c00160e8:	83 fa 26             	cmp    edx,0x26
c00160eb:	0f 84 78 01 00 00    	je     c0016269 <Vm::faultHandler(regs*)+0x20a>
c00160f1:	83 fa 2e             	cmp    edx,0x2e
c00160f4:	0f 85 07 06 00 00    	jne    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c00160fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00160fd:	31 f6                	xor    esi,esi
c00160ff:	41                   	inc    ecx
c0016100:	eb bb                	jmp    c00160bd <Vm::faultHandler(regs*)+0x5e>
c0016102:	83 fa 64             	cmp    edx,0x64
c0016105:	0f 84 6b 01 00 00    	je     c0016276 <Vm::faultHandler(regs*)+0x217>
c001610b:	0f 87 72 01 00 00    	ja     c0016283 <Vm::faultHandler(regs*)+0x224>
c0016111:	83 fa 3e             	cmp    edx,0x3e
c0016114:	0f 85 e7 05 00 00    	jne    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c001611a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001611d:	be 01 00 00 00       	mov    esi,0x1
c0016122:	eb db                	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c0016124:	83 fa 6d             	cmp    edx,0x6d
c0016127:	0f 84 14 03 00 00    	je     c0016441 <Vm::faultHandler(regs*)+0x3e2>
c001612d:	77 17                	ja     c0016146 <Vm::faultHandler(regs*)+0xe7>
c001612f:	83 fa 67             	cmp    edx,0x67
c0016132:	0f 84 72 01 00 00    	je     c00162aa <Vm::faultHandler(regs*)+0x24b>
c0016138:	83 fa 6c             	cmp    edx,0x6c
c001613b:	0f 84 91 02 00 00    	je     c00163d2 <Vm::faultHandler(regs*)+0x373>
c0016141:	e9 bb 05 00 00       	jmp    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c0016146:	83 fa 6f             	cmp    edx,0x6f
c0016149:	0f 84 20 04 00 00    	je     c001656f <Vm::faultHandler(regs*)+0x510>
c001614f:	0f 82 82 03 00 00    	jb     c00164d7 <Vm::faultHandler(regs*)+0x478>
c0016155:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001615b:	0f 84 56 01 00 00    	je     c00162b7 <Vm::faultHandler(regs*)+0x258>
c0016161:	e9 9b 05 00 00       	jmp    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c0016166:	81 fa ec 00 00 00    	cmp    edx,0xec
c001616c:	0f 84 37 05 00 00    	je     c00166a9 <Vm::faultHandler(regs*)+0x64a>
c0016172:	0f 87 89 00 00 00    	ja     c0016201 <Vm::faultHandler(regs*)+0x1a2>
c0016178:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001617e:	0f 84 b6 04 00 00    	je     c001663a <Vm::faultHandler(regs*)+0x5db>
c0016184:	77 58                	ja     c00161de <Vm::faultHandler(regs*)+0x17f>
c0016186:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001618c:	0f 84 ee 01 00 00    	je     c0016380 <Vm::faultHandler(regs*)+0x321>
c0016192:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016198:	0f 85 63 05 00 00    	jne    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c001619e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00161a1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00161a4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00161a8:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00161ab:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00161af:	81 ca 00 02 02 00    	or     edx,0x20200
c00161b5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00161b8:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00161bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161c2:	c1 e8 09             	shr    eax,0x9
c00161c5:	83 e0 01             	and    eax,0x1
c00161c8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00161cb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161ce:	83 c0 06             	add    eax,0x6
c00161d1:	25 ff ff 00 00       	and    eax,0xffff
c00161d6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00161d9:	e9 1f 05 00 00       	jmp    c00166fd <Vm::faultHandler(regs*)+0x69e>
c00161de:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00161e4:	0f 84 95 04 00 00    	je     c001667f <Vm::faultHandler(regs*)+0x620>
c00161ea:	0f 82 66 04 00 00    	jb     c0016656 <Vm::faultHandler(regs*)+0x5f7>
c00161f0:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00161f6:	0f 84 9a 04 00 00    	je     c0016696 <Vm::faultHandler(regs*)+0x637>
c00161fc:	e9 00 05 00 00       	jmp    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c0016201:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016207:	0f 84 dd 04 00 00    	je     c00166ea <Vm::faultHandler(regs*)+0x68b>
c001620d:	77 2e                	ja     c001623d <Vm::faultHandler(regs*)+0x1de>
c001620f:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016215:	0f 84 aa 04 00 00    	je     c00166c5 <Vm::faultHandler(regs*)+0x666>
c001621b:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016221:	0f 85 da 04 00 00    	jne    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c0016227:	50                   	push   eax
c0016228:	50                   	push   eax
c0016229:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001622d:	50                   	push   eax
c001622e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016232:	50                   	push   eax
c0016233:	e8 58 f9 ff ff       	call   c0015b90 <Vm::outbv(unsigned short, unsigned char)>
c0016238:	e9 a5 04 00 00       	jmp    c00166e2 <Vm::faultHandler(regs*)+0x683>
c001623d:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016243:	0f 84 6d 01 00 00    	je     c00163b6 <Vm::faultHandler(regs*)+0x357>
c0016249:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001624f:	0f 84 6f 01 00 00    	je     c00163c4 <Vm::faultHandler(regs*)+0x365>
c0016255:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001625b:	0f 85 a0 04 00 00    	jne    c0016701 <Vm::faultHandler(regs*)+0x6a2>
c0016261:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016264:	e9 96 fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c0016269:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001626c:	be 02 00 00 00       	mov    esi,0x2
c0016271:	e9 89 fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c0016276:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016279:	be 03 00 00 00       	mov    esi,0x3
c001627e:	e9 7c fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c0016283:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016286:	be 04 00 00 00       	mov    esi,0x4
c001628b:	e9 6f fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c0016290:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016293:	be 05 00 00 00       	mov    esi,0x5
c0016298:	e9 62 fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c001629d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162a0:	bd 01 00 00 00       	mov    ebp,0x1
c00162a5:	e9 55 fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c00162aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162ad:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00162b2:	e9 48 fe ff ff       	jmp    c00160ff <Vm::faultHandler(regs*)+0xa0>
c00162b7:	83 e5 01             	and    ebp,0x1
c00162ba:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00162bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00162c1:	74 30                	je     c00162f3 <Vm::faultHandler(regs*)+0x294>
c00162c3:	83 e9 04             	sub    ecx,0x4
c00162c6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00162cc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162d2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162d5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162de:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00162e2:	0f 84 12 04 00 00    	je     c00166fa <Vm::faultHandler(regs*)+0x69b>
c00162e8:	80 ce 02             	or     dh,0x2
c00162eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162ee:	e9 07 04 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c00162f3:	83 e9 02             	sub    ecx,0x2
c00162f6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162fc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162ff:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016303:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016309:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001630d:	74 05                	je     c0016314 <Vm::faultHandler(regs*)+0x2b5>
c001630f:	80 ce 02             	or     dh,0x2
c0016312:	eb 03                	jmp    c0016317 <Vm::faultHandler(regs*)+0x2b8>
c0016314:	80 e6 fd             	and    dh,0xfd
c0016317:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001631b:	e9 da 03 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c0016320:	83 e5 01             	and    ebp,0x1
c0016323:	74 2a                	je     c001634f <Vm::faultHandler(regs*)+0x2f0>
c0016325:	8b 10                	mov    edx,DWORD PTR [eax]
c0016327:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001632d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016333:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016336:	8b 00                	mov    eax,DWORD PTR [eax]
c0016338:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001633e:	c1 e8 09             	shr    eax,0x9
c0016341:	83 e0 01             	and    eax,0x1
c0016344:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016347:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001634a:	83 c0 04             	add    eax,0x4
c001634d:	eb 24                	jmp    c0016373 <Vm::faultHandler(regs*)+0x314>
c001634f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016352:	81 ca 00 02 02 00    	or     edx,0x20200
c0016358:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001635b:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001635e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016364:	c1 e8 09             	shr    eax,0x9
c0016367:	83 e0 01             	and    eax,0x1
c001636a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001636d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016370:	83 c0 02             	add    eax,0x2
c0016373:	25 ff ff 00 00       	and    eax,0xffff
c0016378:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001637b:	e9 7a 03 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c0016380:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016384:	3d ee 00 00 00       	cmp    eax,0xee
c0016389:	75 10                	jne    c001639b <Vm::faultHandler(regs*)+0x33c>
c001638b:	83 ec 0c             	sub    esp,0xc
c001638e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016391:	e8 97 f8 ff ff       	call   c0015c2d <Vm::mainloop3(unsigned long)>
c0016396:	e9 4a 03 00 00       	jmp    c00166e5 <Vm::faultHandler(regs*)+0x686>
c001639b:	83 ec 0c             	sub    esp,0xc
c001639e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00163a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163a6:	51                   	push   ecx
c00163a7:	50                   	push   eax
c00163a8:	53                   	push   ebx
c00163a9:	e8 b4 fb ff ff       	call   c0015f62 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00163ae:	83 c4 20             	add    esp,0x20
c00163b1:	e9 47 03 00 00       	jmp    c00166fd <Vm::faultHandler(regs*)+0x69e>
c00163b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163bf:	e9 36 03 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c00163c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c9:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00163cd:	e9 28 03 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c00163d2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00163d7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00163da:	74 2b                	je     c0016407 <Vm::faultHandler(regs*)+0x3a8>
c00163dc:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00163e3:	76 22                	jbe    c0016407 <Vm::faultHandler(regs*)+0x3a8>
c00163e5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00163e9:	50                   	push   eax
c00163ea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00163ee:	50                   	push   eax
c00163ef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00163f3:	50                   	push   eax
c00163f4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00163f8:	50                   	push   eax
c00163f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00163fd:	50                   	push   eax
c00163fe:	6a 6c                	push   0x6c
c0016400:	6a 6c                	push   0x6c
c0016402:	e9 c0 01 00 00       	jmp    c00165c7 <Vm::faultHandler(regs*)+0x568>
c0016407:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001640b:	83 ec 0c             	sub    esp,0xc
c001640e:	0f b7 f6             	movzx  esi,si
c0016411:	50                   	push   eax
c0016412:	e8 66 f7 ff ff       	call   c0015b7d <Vm::inbv(unsigned short)>
c0016417:	83 c4 0c             	add    esp,0xc
c001641a:	0f b6 c0             	movzx  eax,al
c001641d:	50                   	push   eax
c001641e:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016422:	50                   	push   eax
c0016423:	56                   	push   esi
c0016424:	e8 f6 fb ff ff       	call   c001601f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001642f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016433:	74 03                	je     c0016438 <Vm::faultHandler(regs*)+0x3d9>
c0016435:	48                   	dec    eax
c0016436:	eb 01                	jmp    c0016439 <Vm::faultHandler(regs*)+0x3da>
c0016438:	40                   	inc    eax
c0016439:	0f b7 c0             	movzx  eax,ax
c001643c:	e9 8e 00 00 00       	jmp    c00164cf <Vm::faultHandler(regs*)+0x470>
c0016441:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016446:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016449:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001644c:	74 29                	je     c0016477 <Vm::faultHandler(regs*)+0x418>
c001644e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016453:	76 22                	jbe    c0016477 <Vm::faultHandler(regs*)+0x418>
c0016455:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016459:	50                   	push   eax
c001645a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001645e:	50                   	push   eax
c001645f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016463:	50                   	push   eax
c0016464:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016468:	50                   	push   eax
c0016469:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001646d:	50                   	push   eax
c001646e:	6a 6d                	push   0x6d
c0016470:	6a 6d                	push   0x6d
c0016472:	e9 50 01 00 00       	jmp    c00165c7 <Vm::faultHandler(regs*)+0x568>
c0016477:	83 e5 01             	and    ebp,0x1
c001647a:	0f b7 c8             	movzx  ecx,ax
c001647d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016480:	0f b7 f6             	movzx  esi,si
c0016483:	74 1e                	je     c00164a3 <Vm::faultHandler(regs*)+0x444>
c0016485:	ed                   	in     eax,dx
c0016486:	55                   	push   ebp
c0016487:	50                   	push   eax
c0016488:	51                   	push   ecx
c0016489:	56                   	push   esi
c001648a:	e8 bb fb ff ff       	call   c001604a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001648f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016492:	83 c4 10             	add    esp,0x10
c0016495:	8d 50 04             	lea    edx,[eax+0x4]
c0016498:	83 e8 04             	sub    eax,0x4
c001649b:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164a1:	eb 20                	jmp    c00164c3 <Vm::faultHandler(regs*)+0x464>
c00164a3:	66 ed                	in     ax,dx
c00164a5:	57                   	push   edi
c00164a6:	0f b7 c0             	movzx  eax,ax
c00164a9:	50                   	push   eax
c00164aa:	51                   	push   ecx
c00164ab:	56                   	push   esi
c00164ac:	e8 83 fb ff ff       	call   c0016034 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00164b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164b4:	83 c4 10             	add    esp,0x10
c00164b7:	8d 50 02             	lea    edx,[eax+0x2]
c00164ba:	83 e8 02             	sub    eax,0x2
c00164bd:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164c3:	25 ff ff 00 00       	and    eax,0xffff
c00164c8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164cc:	0f 44 c2             	cmove  eax,edx
c00164cf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00164d2:	e9 23 02 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c00164d7:	8d 46 ff             	lea    eax,[esi-0x1]
c00164da:	0f b6 f0             	movzx  esi,al
c00164dd:	83 fe 05             	cmp    esi,0x5
c00164e0:	77 23                	ja     c0016505 <Vm::faultHandler(regs*)+0x4a6>
c00164e2:	ff 24 b5 fc 12 02 c0 	jmp    DWORD PTR [esi*4-0x3ffded04]
c00164e9:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00164ee:	eb 15                	jmp    c0016505 <Vm::faultHandler(regs*)+0x4a6>
c00164f0:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00164f4:	eb 0f                	jmp    c0016505 <Vm::faultHandler(regs*)+0x4a6>
c00164f6:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00164fa:	eb 09                	jmp    c0016505 <Vm::faultHandler(regs*)+0x4a6>
c00164fc:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016500:	eb 03                	jmp    c0016505 <Vm::faultHandler(regs*)+0x4a6>
c0016502:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016505:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001650a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001650d:	74 29                	je     c0016538 <Vm::faultHandler(regs*)+0x4d9>
c001650f:	3d ff ff 00 00       	cmp    eax,0xffff
c0016514:	76 22                	jbe    c0016538 <Vm::faultHandler(regs*)+0x4d9>
c0016516:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001651a:	50                   	push   eax
c001651b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001651f:	50                   	push   eax
c0016520:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016524:	50                   	push   eax
c0016525:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016529:	50                   	push   eax
c001652a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001652e:	50                   	push   eax
c001652f:	6a 6e                	push   0x6e
c0016531:	6a 6e                	push   0x6e
c0016533:	e9 8f 00 00 00       	jmp    c00165c7 <Vm::faultHandler(regs*)+0x568>
c0016538:	52                   	push   edx
c0016539:	0f b7 c0             	movzx  eax,ax
c001653c:	52                   	push   edx
c001653d:	50                   	push   eax
c001653e:	57                   	push   edi
c001653f:	e8 a7 fa ff ff       	call   c0015feb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016544:	59                   	pop    ecx
c0016545:	5e                   	pop    esi
c0016546:	0f b6 c0             	movzx  eax,al
c0016549:	50                   	push   eax
c001654a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001654e:	50                   	push   eax
c001654f:	e8 3c f6 ff ff       	call   c0015b90 <Vm::outbv(unsigned short, unsigned char)>
c0016554:	83 c4 10             	add    esp,0x10
c0016557:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001655a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001655e:	74 03                	je     c0016563 <Vm::faultHandler(regs*)+0x504>
c0016560:	48                   	dec    eax
c0016561:	eb 01                	jmp    c0016564 <Vm::faultHandler(regs*)+0x505>
c0016563:	40                   	inc    eax
c0016564:	0f b7 c0             	movzx  eax,ax
c0016567:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001656a:	e9 8b 01 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c001656f:	8d 46 ff             	lea    eax,[esi-0x1]
c0016572:	0f b6 f0             	movzx  esi,al
c0016575:	83 fe 05             	cmp    esi,0x5
c0016578:	77 1e                	ja     c0016598 <Vm::faultHandler(regs*)+0x539>
c001657a:	ff 24 b5 14 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecec]
c0016581:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016585:	eb 11                	jmp    c0016598 <Vm::faultHandler(regs*)+0x539>
c0016587:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001658a:	eb 0c                	jmp    c0016598 <Vm::faultHandler(regs*)+0x539>
c001658c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001658f:	eb 07                	jmp    c0016598 <Vm::faultHandler(regs*)+0x539>
c0016591:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016594:	eb 02                	jmp    c0016598 <Vm::faultHandler(regs*)+0x539>
c0016596:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016598:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001659d:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00165a0:	74 37                	je     c00165d9 <Vm::faultHandler(regs*)+0x57a>
c00165a2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00165a8:	76 2f                	jbe    c00165d9 <Vm::faultHandler(regs*)+0x57a>
c00165aa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165ae:	50                   	push   eax
c00165af:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165b3:	50                   	push   eax
c00165b4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165b8:	50                   	push   eax
c00165b9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165bd:	50                   	push   eax
c00165be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165c2:	50                   	push   eax
c00165c3:	6a 6f                	push   0x6f
c00165c5:	6a 6f                	push   0x6f
c00165c7:	68 a2 12 02 c0       	push   0xc00212a2
c00165cc:	e8 6c 43 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00165d1:	83 c4 20             	add    esp,0x20
c00165d4:	e9 86 01 00 00       	jmp    c001675f <Vm::faultHandler(regs*)+0x700>
c00165d9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00165dc:	0f b7 d7             	movzx  edx,di
c00165df:	0f b7 c6             	movzx  eax,si
c00165e2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00165e5:	81 e1 00 04 00 00    	and    ecx,0x400
c00165eb:	83 e5 01             	and    ebp,0x1
c00165ee:	74 1c                	je     c001660c <Vm::faultHandler(regs*)+0x5ad>
c00165f0:	55                   	push   ebp
c00165f1:	55                   	push   ebp
c00165f2:	50                   	push   eax
c00165f3:	52                   	push   edx
c00165f4:	e8 15 fa ff ff       	call   c001600e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	89 fa                	mov    edx,edi
c00165fe:	ef                   	out    dx,eax
c00165ff:	8d 46 04             	lea    eax,[esi+0x4]
c0016602:	83 ee 04             	sub    esi,0x4
c0016605:	25 ff ff 00 00       	and    eax,0xffff
c001660a:	eb 1b                	jmp    c0016627 <Vm::faultHandler(regs*)+0x5c8>
c001660c:	55                   	push   ebp
c001660d:	55                   	push   ebp
c001660e:	50                   	push   eax
c001660f:	52                   	push   edx
c0016610:	e8 e7 f9 ff ff       	call   c0015ffc <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016615:	83 c4 10             	add    esp,0x10
c0016618:	89 fa                	mov    edx,edi
c001661a:	66 ef                	out    dx,ax
c001661c:	8d 46 02             	lea    eax,[esi+0x2]
c001661f:	83 ee 02             	sub    esi,0x2
c0016622:	25 ff ff 00 00       	and    eax,0xffff
c0016627:	81 e6 ff ff 00 00    	and    esi,0xffff
c001662d:	85 c9                	test   ecx,ecx
c001662f:	0f 44 f0             	cmove  esi,eax
c0016632:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016635:	e9 c0 00 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c001663a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016641:	83 ec 0c             	sub    esp,0xc
c0016644:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016648:	50                   	push   eax
c0016649:	e8 2f f5 ff ff       	call   c0015b7d <Vm::inbv(unsigned short)>
c001664e:	0f b6 c0             	movzx  eax,al
c0016651:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016654:	eb 3a                	jmp    c0016690 <Vm::faultHandler(regs*)+0x631>
c0016656:	83 e5 01             	and    ebp,0x1
c0016659:	74 07                	je     c0016662 <Vm::faultHandler(regs*)+0x603>
c001665b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001665f:	ed                   	in     eax,dx
c0016660:	eb 14                	jmp    c0016676 <Vm::faultHandler(regs*)+0x617>
c0016662:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016665:	66 31 f6             	xor    si,si
c0016668:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001666b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001666f:	66 ed                	in     ax,dx
c0016671:	0f b7 c0             	movzx  eax,ax
c0016674:	09 f0                	or     eax,esi
c0016676:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016679:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001667d:	eb 7e                	jmp    c00166fd <Vm::faultHandler(regs*)+0x69e>
c001667f:	52                   	push   edx
c0016680:	52                   	push   edx
c0016681:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016685:	50                   	push   eax
c0016686:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001668a:	50                   	push   eax
c001668b:	e8 00 f5 ff ff       	call   c0015b90 <Vm::outbv(unsigned short, unsigned char)>
c0016690:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016694:	eb 4f                	jmp    c00166e5 <Vm::faultHandler(regs*)+0x686>
c0016696:	83 e5 01             	and    ebp,0x1
c0016699:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001669c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166a0:	74 03                	je     c00166a5 <Vm::faultHandler(regs*)+0x646>
c00166a2:	ef                   	out    dx,eax
c00166a3:	eb d4                	jmp    c0016679 <Vm::faultHandler(regs*)+0x61a>
c00166a5:	66 ef                	out    dx,ax
c00166a7:	eb d0                	jmp    c0016679 <Vm::faultHandler(regs*)+0x61a>
c00166a9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166ad:	83 ec 0c             	sub    esp,0xc
c00166b0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166b7:	50                   	push   eax
c00166b8:	e8 c0 f4 ff ff       	call   c0015b7d <Vm::inbv(unsigned short)>
c00166bd:	0f b6 c0             	movzx  eax,al
c00166c0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166c3:	eb 1d                	jmp    c00166e2 <Vm::faultHandler(regs*)+0x683>
c00166c5:	83 e5 01             	and    ebp,0x1
c00166c8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00166cb:	74 03                	je     c00166d0 <Vm::faultHandler(regs*)+0x671>
c00166cd:	ed                   	in     eax,dx
c00166ce:	eb 0d                	jmp    c00166dd <Vm::faultHandler(regs*)+0x67e>
c00166d0:	66 ed                	in     ax,dx
c00166d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00166d5:	0f b7 c0             	movzx  eax,ax
c00166d8:	66 31 d2             	xor    dx,dx
c00166db:	09 d0                	or     eax,edx
c00166dd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166e0:	eb 18                	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c00166e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	eb 13                	jmp    c00166fd <Vm::faultHandler(regs*)+0x69e>
c00166ea:	83 e5 01             	and    ebp,0x1
c00166ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00166f3:	74 03                	je     c00166f8 <Vm::faultHandler(regs*)+0x699>
c00166f5:	ef                   	out    dx,eax
c00166f6:	eb 02                	jmp    c00166fa <Vm::faultHandler(regs*)+0x69b>
c00166f8:	66 ef                	out    dx,ax
c00166fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166fd:	b0 01                	mov    al,0x1
c00166ff:	eb 60                	jmp    c0016761 <Vm::faultHandler(regs*)+0x702>
c0016701:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016705:	50                   	push   eax
c0016706:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001670a:	50                   	push   eax
c001670b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001670f:	50                   	push   eax
c0016710:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016714:	50                   	push   eax
c0016715:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016719:	50                   	push   eax
c001671a:	52                   	push   edx
c001671b:	52                   	push   edx
c001671c:	68 cf 12 02 c0       	push   0xc00212cf
c0016721:	e8 17 42 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016726:	83 c4 20             	add    esp,0x20
c0016729:	83 ec 0c             	sub    esp,0xc
c001672c:	6a 60                	push   0x60
c001672e:	e8 4a f4 ff ff       	call   c0015b7d <Vm::inbv(unsigned short)>
c0016733:	83 c4 10             	add    esp,0x10
c0016736:	0f b6 d0             	movzx  edx,al
c0016739:	83 fa 1c             	cmp    edx,0x1c
c001673c:	74 05                	je     c0016743 <Vm::faultHandler(regs*)+0x6e4>
c001673e:	83 fa 5a             	cmp    edx,0x5a
c0016741:	75 e6                	jne    c0016729 <Vm::faultHandler(regs*)+0x6ca>
c0016743:	0f b6 c0             	movzx  eax,al
c0016746:	83 f8 1c             	cmp    eax,0x1c
c0016749:	74 05                	je     c0016750 <Vm::faultHandler(regs*)+0x6f1>
c001674b:	83 f8 5a             	cmp    eax,0x5a
c001674e:	75 0f                	jne    c001675f <Vm::faultHandler(regs*)+0x700>
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	6a 60                	push   0x60
c0016755:	e8 23 f4 ff ff       	call   c0015b7d <Vm::inbv(unsigned short)>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	eb e4                	jmp    c0016743 <Vm::faultHandler(regs*)+0x6e4>
c001675f:	31 c0                	xor    eax,eax
c0016761:	83 c4 2c             	add    esp,0x2c
c0016764:	5b                   	pop    ebx
c0016765:	5e                   	pop    esi
c0016766:	5f                   	pop    edi
c0016767:	5d                   	pop    ebp
c0016768:	c3                   	ret    

c0016769 <noCopro(unsigned long)>:
c0016769:	c3                   	ret    

c001676a <nmiHandler(regs*, void*)>:
c001676a:	83 ec 0c             	sub    esp,0xc
c001676d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	50                   	push   eax
c0016776:	e8 41 0b ff ff       	call   c00072bc <Computer::handleNMI()>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	90                   	nop
c001677f:	83 c4 0c             	add    esp,0xc
c0016782:	c3                   	ret    

c0016783 <doubleFault(regs*, void*)>:
c0016783:	55                   	push   ebp
c0016784:	89 e5                	mov    ebp,esp
c0016786:	83 ec 08             	sub    esp,0x8
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	68 2c 13 02 c0       	push   0xc002132c
c0016791:	e8 2b a0 ff ff       	call   c00107c1 <KePanic(char const*)>
c0016796:	83 c4 10             	add    esp,0x10
c0016799:	90                   	nop
c001679a:	c9                   	leave  
c001679b:	c3                   	ret    

c001679c <displayDebugInfo(regs*)>:
c001679c:	83 ec 1c             	sub    esp,0x1c
c001679f:	0f 20 c0             	mov    eax,cr0
c00167a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167a6:	0f 20 d0             	mov    eax,cr2
c00167a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167ad:	0f 20 d8             	mov    eax,cr3
c00167b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b4:	0f 20 e0             	mov    eax,cr4
c00167b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167be:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167c1:	83 ec 08             	sub    esp,0x8
c00167c4:	50                   	push   eax
c00167c5:	68 48 13 02 c0       	push   0xc0021348
c00167ca:	e8 6e 41 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00167d9:	83 ec 08             	sub    esp,0x8
c00167dc:	50                   	push   eax
c00167dd:	68 39 13 02 c0       	push   0xc0021339
c00167e2:	e8 56 41 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00167e7:	83 c4 10             	add    esp,0x10
c00167ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ee:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00167f1:	83 ec 08             	sub    esp,0x8
c00167f4:	50                   	push   eax
c00167f5:	68 44 13 02 c0       	push   0xc0021344
c00167fa:	e8 3e 41 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016806:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016809:	83 ec 08             	sub    esp,0x8
c001680c:	50                   	push   eax
c001680d:	68 53 13 02 c0       	push   0xc0021353
c0016812:	e8 26 41 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016821:	83 ec 08             	sub    esp,0x8
c0016824:	50                   	push   eax
c0016825:	68 5e 13 02 c0       	push   0xc002135e
c001682a:	e8 0e 41 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	83 ec 08             	sub    esp,0x8
c0016835:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016839:	68 69 13 02 c0       	push   0xc0021369
c001683e:	e8 fa 40 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	83 ec 08             	sub    esp,0x8
c0016849:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001684d:	68 74 13 02 c0       	push   0xc0021374
c0016852:	e8 e6 40 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001685f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	50                   	push   eax
c0016869:	e8 d7 1e ff ff       	call   c0008745 <setActiveTerminal(VgaText*)>
c001686e:	83 c4 10             	add    esp,0x10
c0016871:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016876:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001687c:	83 ec 08             	sub    esp,0x8
c001687f:	68 7f 13 02 c0       	push   0xc002137f
c0016884:	50                   	push   eax
c0016885:	e8 f8 21 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c001688a:	83 c4 10             	add    esp,0x10
c001688d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016892:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016898:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001689c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001689f:	83 ec 08             	sub    esp,0x8
c00168a2:	52                   	push   edx
c00168a3:	50                   	push   eax
c00168a4:	e8 93 21 ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c00168a9:	83 c4 10             	add    esp,0x10
c00168ac:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b7:	83 ec 08             	sub    esp,0x8
c00168ba:	68 8d 13 02 c0       	push   0xc002138d
c00168bf:	50                   	push   eax
c00168c0:	e8 bd 21 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168d3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00168d8:	8b 12                	mov    edx,DWORD PTR [edx]
c00168da:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168dd:	83 c2 0c             	add    edx,0xc
c00168e0:	83 ec 08             	sub    esp,0x8
c00168e3:	52                   	push   edx
c00168e4:	50                   	push   eax
c00168e5:	e8 98 21 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c00168ea:	83 c4 10             	add    esp,0x10
c00168ed:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f8:	83 ec 08             	sub    esp,0x8
c00168fb:	68 96 13 02 c0       	push   0xc0021396
c0016900:	50                   	push   eax
c0016901:	e8 7c 21 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016906:	83 c4 10             	add    esp,0x10
c0016909:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001690e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016914:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016918:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001691b:	83 ec 08             	sub    esp,0x8
c001691e:	52                   	push   edx
c001691f:	50                   	push   eax
c0016920:	e8 17 21 ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001692d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016933:	83 ec 08             	sub    esp,0x8
c0016936:	68 9e 13 02 c0       	push   0xc002139e
c001693b:	50                   	push   eax
c001693c:	e8 41 21 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016949:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001694f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016953:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016956:	83 ec 08             	sub    esp,0x8
c0016959:	52                   	push   edx
c001695a:	50                   	push   eax
c001695b:	e8 dc 20 ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016960:	83 c4 10             	add    esp,0x10
c0016963:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016968:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001696e:	83 ec 08             	sub    esp,0x8
c0016971:	68 a6 13 02 c0       	push   0xc00213a6
c0016976:	50                   	push   eax
c0016977:	e8 06 21 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c001697c:	83 c4 10             	add    esp,0x10
c001697f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016984:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001698a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001698e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016991:	83 ec 08             	sub    esp,0x8
c0016994:	52                   	push   edx
c0016995:	50                   	push   eax
c0016996:	e8 a1 20 ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a9:	83 ec 08             	sub    esp,0x8
c00169ac:	68 ae 13 02 c0       	push   0xc00213ae
c00169b1:	50                   	push   eax
c00169b2:	e8 cb 20 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c00169b7:	83 c4 10             	add    esp,0x10
c00169ba:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169c9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00169cc:	83 ec 08             	sub    esp,0x8
c00169cf:	52                   	push   edx
c00169d0:	50                   	push   eax
c00169d1:	e8 66 20 ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c00169d6:	83 c4 10             	add    esp,0x10
c00169d9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169e4:	83 ec 08             	sub    esp,0x8
c00169e7:	68 b6 13 02 c0       	push   0xc00213b6
c00169ec:	50                   	push   eax
c00169ed:	e8 90 20 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c00169f2:	83 c4 10             	add    esp,0x10
c00169f5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a04:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a07:	83 ec 08             	sub    esp,0x8
c0016a0a:	52                   	push   edx
c0016a0b:	50                   	push   eax
c0016a0c:	e8 2b 20 ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016a11:	83 c4 10             	add    esp,0x10
c0016a14:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a1f:	83 ec 08             	sub    esp,0x8
c0016a22:	68 be 13 02 c0       	push   0xc00213be
c0016a27:	50                   	push   eax
c0016a28:	e8 55 20 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016a2d:	83 c4 10             	add    esp,0x10
c0016a30:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a3f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016a42:	83 ec 08             	sub    esp,0x8
c0016a45:	52                   	push   edx
c0016a46:	50                   	push   eax
c0016a47:	e8 f0 1f ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016a4c:	83 c4 10             	add    esp,0x10
c0016a4f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a5a:	83 ec 08             	sub    esp,0x8
c0016a5d:	68 c6 13 02 c0       	push   0xc00213c6
c0016a62:	50                   	push   eax
c0016a63:	e8 1a 20 ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016a68:	83 c4 10             	add    esp,0x10
c0016a6b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a76:	83 ec 08             	sub    esp,0x8
c0016a79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a7d:	50                   	push   eax
c0016a7e:	e8 b9 1f ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a91:	83 ec 08             	sub    esp,0x8
c0016a94:	68 cf 13 02 c0       	push   0xc00213cf
c0016a99:	50                   	push   eax
c0016a9a:	e8 e3 1f ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016a9f:	83 c4 10             	add    esp,0x10
c0016aa2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aad:	83 ec 08             	sub    esp,0x8
c0016ab0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ab4:	50                   	push   eax
c0016ab5:	e8 82 1f ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016aba:	83 c4 10             	add    esp,0x10
c0016abd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ac8:	83 ec 08             	sub    esp,0x8
c0016acb:	68 d7 13 02 c0       	push   0xc00213d7
c0016ad0:	50                   	push   eax
c0016ad1:	e8 ac 1f ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016ad6:	83 c4 10             	add    esp,0x10
c0016ad9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ade:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae4:	83 ec 08             	sub    esp,0x8
c0016ae7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016aeb:	50                   	push   eax
c0016aec:	e8 4b 1f ff ff       	call   c0008a3c <VgaText::putx(unsigned int)>
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	fa                   	cli    
c0016af5:	f4                   	hlt    
c0016af6:	eb fe                	jmp    c0016af6 <displayDebugInfo(regs*)+0x35a>

c0016af8 <HalSystemIdle()>:
c0016af8:	56                   	push   esi
c0016af9:	53                   	push   ebx
c0016afa:	83 ec 14             	sub    esp,0x14
c0016afd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b08:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b0e:	83 e0 04             	and    eax,0x4
c0016b11:	0f b6 c0             	movzx  eax,al
c0016b14:	85 c0                	test   eax,eax
c0016b16:	0f 95 c0             	setne  al
c0016b19:	0f b6 c0             	movzx  eax,al
c0016b1c:	85 c0                	test   eax,eax
c0016b1e:	74 4c                	je     c0016b6c <HalSystemIdle()+0x74>
c0016b20:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b25:	83 ec 08             	sub    esp,0x8
c0016b28:	68 e1 00 00 00       	push   0xe1
c0016b2d:	50                   	push   eax
c0016b2e:	e8 a7 05 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016b33:	83 c4 10             	add    esp,0x10
c0016b36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b3e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016b47:	83 e2 02             	and    edx,0x2
c0016b4a:	89 d3                	mov    ebx,edx
c0016b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b50:	83 e2 00             	and    edx,0x0
c0016b53:	89 d6                	mov    esi,edx
c0016b55:	56                   	push   esi
c0016b56:	53                   	push   ebx
c0016b57:	68 e1 00 00 00       	push   0xe1
c0016b5c:	50                   	push   eax
c0016b5d:	e8 a4 05 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	e8 2a 96 fe ff       	call   c0000194 <doTPAUSE>
c0016b6a:	eb 01                	jmp    c0016b6d <HalSystemIdle()+0x75>
c0016b6c:	f4                   	hlt    
c0016b6d:	90                   	nop
c0016b6e:	83 c4 14             	add    esp,0x14
c0016b71:	5b                   	pop    ebx
c0016b72:	5e                   	pop    esi
c0016b73:	c3                   	ret    

c0016b74 <displayProgramFault(char const*)>:
c0016b74:	83 ec 0c             	sub    esp,0xc
c0016b77:	83 ec 0c             	sub    esp,0xc
c0016b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b7e:	e8 ba 3d ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016b83:	83 c4 10             	add    esp,0x10
c0016b86:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b96:	85 c0                	test   eax,eax
c0016b98:	74 21                	je     c0016bbb <displayProgramFault(char const*)+0x47>
c0016b9a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ba1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ba4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016baa:	6a 04                	push   0x4
c0016bac:	6a 0f                	push   0xf
c0016bae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bb2:	50                   	push   eax
c0016bb3:	e8 3c 1f ff ff       	call   c0008af4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016bb8:	83 c4 10             	add    esp,0x10
c0016bbb:	90                   	nop
c0016bbc:	83 c4 0c             	add    esp,0xc
c0016bbf:	c3                   	ret    

c0016bc0 <gpFault(regs*, void*)>:
c0016bc0:	83 ec 1c             	sub    esp,0x1c
c0016bc3:	c7 05 10 82 02 c0 5f 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001605f
c0016bcd:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bd2:	85 c0                	test   eax,eax
c0016bd4:	74 1e                	je     c0016bf4 <gpFault(regs*, void*)+0x34>
c0016bd6:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016be2:	ff d0                	call   eax
c0016be4:	83 c4 10             	add    esp,0x10
c0016be7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016beb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016bf0:	85 c0                	test   eax,eax
c0016bf2:	75 2e                	jne    c0016c22 <gpFault(regs*, void*)+0x62>
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	68 df 13 02 c0       	push   0xc00213df
c0016bfc:	e8 73 ff ff ff       	call   c0016b74 <displayProgramFault(char const*)>
c0016c01:	83 c4 10             	add    esp,0x10
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c0b:	e8 8c fb ff ff       	call   c001679c <displayDebugInfo(regs*)>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	83 ec 0c             	sub    esp,0xc
c0016c16:	6a 00                	push   0x0
c0016c18:	e8 07 ee ff ff       	call   c0015a24 <Thr::terminateFromIRQ(int)>
c0016c1d:	83 c4 10             	add    esp,0x10
c0016c20:	eb 01                	jmp    c0016c23 <gpFault(regs*, void*)+0x63>
c0016c22:	90                   	nop
c0016c23:	83 c4 1c             	add    esp,0x1c
c0016c26:	c3                   	ret    

c0016c27 <pgFault(regs*, void*)>:
c0016c27:	83 ec 1c             	sub    esp,0x1c
c0016c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c2e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016c31:	0f 20 d0             	mov    eax,cr2
c0016c34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c3c:	83 ec 04             	sub    esp,0x4
c0016c3f:	52                   	push   edx
c0016c40:	50                   	push   eax
c0016c41:	68 bc 14 02 c0       	push   0xc00214bc
c0016c46:	e8 f2 3c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c58:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016c5e:	0f 20 d2             	mov    edx,cr2
c0016c61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c69:	83 ec 08             	sub    esp,0x8
c0016c6c:	52                   	push   edx
c0016c6d:	50                   	push   eax
c0016c6e:	e8 8d 38 ff ff       	call   c000a500 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	0f b6 c0             	movzx  eax,al
c0016c79:	85 c0                	test   eax,eax
c0016c7b:	75 2e                	jne    c0016cab <pgFault(regs*, void*)+0x84>
c0016c7d:	83 ec 0c             	sub    esp,0xc
c0016c80:	68 f8 13 02 c0       	push   0xc00213f8
c0016c85:	e8 ea fe ff ff       	call   c0016b74 <displayProgramFault(char const*)>
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	83 ec 0c             	sub    esp,0xc
c0016c90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c94:	e8 03 fb ff ff       	call   c001679c <displayDebugInfo(regs*)>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	6a 00                	push   0x0
c0016ca1:	e8 7e ed ff ff       	call   c0015a24 <Thr::terminateFromIRQ(int)>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	eb 01                	jmp    c0016cac <pgFault(regs*, void*)+0x85>
c0016cab:	90                   	nop
c0016cac:	83 c4 1c             	add    esp,0x1c
c0016caf:	c3                   	ret    

c0016cb0 <otherISRHandler(regs*, void*)>:
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	83 ec 0c             	sub    esp,0xc
c0016cb6:	68 e4 14 02 c0       	push   0xc00214e4
c0016cbb:	e8 b4 fe ff ff       	call   c0016b74 <displayProgramFault(char const*)>
c0016cc0:	83 c4 10             	add    esp,0x10
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cca:	e8 cd fa ff ff       	call   c001679c <displayDebugInfo(regs*)>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	6a 00                	push   0x0
c0016cd7:	e8 48 ed ff ff       	call   c0015a24 <Thr::terminateFromIRQ(int)>
c0016cdc:	83 c4 10             	add    esp,0x10
c0016cdf:	90                   	nop
c0016ce0:	83 c4 0c             	add    esp,0xc
c0016ce3:	c3                   	ret    

c0016ce4 <opcodeFault(regs*, void*)>:
c0016ce4:	55                   	push   ebp
c0016ce5:	89 e5                	mov    ebp,esp
c0016ce7:	83 ec 08             	sub    esp,0x8
c0016cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016ced:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cf0:	83 ec 08             	sub    esp,0x8
c0016cf3:	50                   	push   eax
c0016cf4:	68 03 14 02 c0       	push   0xc0021403
c0016cf9:	e8 3f 3c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016cfe:	83 c4 10             	add    esp,0x10
c0016d01:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d0c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d12:	0f b6 c0             	movzx  eax,al
c0016d15:	85 c0                	test   eax,eax
c0016d17:	74 21                	je     c0016d3a <opcodeFault(regs*, void*)+0x56>
c0016d19:	83 ec 0c             	sub    esp,0xc
c0016d1c:	68 0c 15 02 c0       	push   0xc002150c
c0016d21:	e8 17 3c ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016d26:	83 c4 10             	add    esp,0x10
c0016d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d2f:	8d 50 19             	lea    edx,[eax+0x19]
c0016d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d35:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d38:	eb 2b                	jmp    c0016d65 <opcodeFault(regs*, void*)+0x81>
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	68 11 14 02 c0       	push   0xc0021411
c0016d42:	e8 2d fe ff ff       	call   c0016b74 <displayProgramFault(char const*)>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016d50:	e8 47 fa ff ff       	call   c001679c <displayDebugInfo(regs*)>
c0016d55:	83 c4 10             	add    esp,0x10
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	6a 00                	push   0x0
c0016d5d:	e8 c2 ec ff ff       	call   c0015a24 <Thr::terminateFromIRQ(int)>
c0016d62:	83 c4 10             	add    esp,0x10
c0016d65:	c9                   	leave  
c0016d66:	c3                   	ret    

c0016d67 <i386SaveCoprocessor(void*)>:
c0016d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d6b:	83 c0 3f             	add    eax,0x3f
c0016d6e:	83 e0 c0             	and    eax,0xffffffc0
c0016d71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d75:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016d7b <i386LoadCoprocessor(void*)>:
c0016d7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d7f:	83 c0 3f             	add    eax,0x3f
c0016d82:	83 e0 c0             	and    eax,0xffffffc0
c0016d85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d89:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016d8f <x87EmulHandler(regs*, void*)>:
c0016d8f:	53                   	push   ebx
c0016d90:	83 ec 08             	sub    esp,0x8
c0016d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d98:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016d9c:	74 10                	je     c0016dae <x87EmulHandler(regs*, void*)+0x1f>
c0016d9e:	83 ec 0c             	sub    esp,0xc
c0016da1:	68 1e 14 02 c0       	push   0xc002141e
c0016da6:	e8 16 9a ff ff       	call   c00107c1 <KePanic(char const*)>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	0f 20 c0             	mov    eax,cr0
c0016db1:	a8 08                	test   al,0x8
c0016db3:	74 59                	je     c0016e0e <x87EmulHandler(regs*, void*)+0x7f>
c0016db5:	0f 06                	clts   
c0016db7:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016dbc:	85 c0                	test   eax,eax
c0016dbe:	74 0e                	je     c0016dce <x87EmulHandler(regs*, void*)+0x3f>
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016dc6:	e8 9c ff ff ff       	call   c0016d67 <i386SaveCoprocessor(void*)>
c0016dcb:	83 c4 10             	add    esp,0x10
c0016dce:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016dd4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016dd8:	75 12                	jne    c0016dec <x87EmulHandler(regs*, void*)+0x5d>
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	68 40 02 00 00       	push   0x240
c0016de2:	e8 d0 0c ff ff       	call   c0007ab7 <malloc>
c0016de7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016dea:	eb 10                	jmp    c0016dfc <x87EmulHandler(regs*, void*)+0x6d>
c0016dec:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016df1:	83 ec 0c             	sub    esp,0xc
c0016df4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016df7:	e8 7f ff ff ff       	call   c0016d7b <i386LoadCoprocessor(void*)>
c0016dfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e09:	83 c4 08             	add    esp,0x8
c0016e0c:	5b                   	pop    ebx
c0016e0d:	c3                   	ret    
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	68 32 14 02 c0       	push   0xc0021432
c0016e16:	e8 22 3b ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016e1b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e23:	83 c4 18             	add    esp,0x18
c0016e26:	5b                   	pop    ebx
c0016e27:	e9 f8 eb ff ff       	jmp    c0015a24 <Thr::terminateFromIRQ(int)>

c0016e2c <HalInitialiseCoprocessor()>:
c0016e2c:	83 ec 10             	sub    esp,0x10
c0016e2f:	6a 00                	push   0x0
c0016e31:	68 8f 6d 01 c0       	push   0xc0016d8f
c0016e36:	6a 07                	push   0x7
c0016e38:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016e42:	e8 8f 54 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016e47:	e8 24 70 00 00       	call   c001de70 <avxDetect>
c0016e4c:	83 c4 10             	add    esp,0x10
c0016e4f:	85 c0                	test   eax,eax
c0016e51:	74 1c                	je     c0016e6f <HalInitialiseCoprocessor()+0x43>
c0016e53:	c7 05 0c 82 02 c0 9a de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001de9a
c0016e5d:	c7 05 08 82 02 c0 ab de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001deab
c0016e67:	83 c4 0c             	add    esp,0xc
c0016e6a:	e9 4d 70 00 00       	jmp    c001debc <avxInit>
c0016e6f:	e8 8c 73 00 00       	call   c001e200 <absolutelyNoChanceInHell>
c0016e74:	85 c0                	test   eax,eax
c0016e76:	74 1c                	je     c0016e94 <HalInitialiseCoprocessor()+0x68>
c0016e78:	c7 05 0c 82 02 c0 18 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e218
c0016e82:	c7 05 08 82 02 c0 20 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e220
c0016e8c:	83 c4 0c             	add    esp,0xc
c0016e8f:	e9 94 73 00 00       	jmp    c001e228 <sseInit>
c0016e94:	e8 ad 73 00 00       	call   c001e246 <x87Detect>
c0016e99:	85 c0                	test   eax,eax
c0016e9b:	74 1c                	je     c0016eb9 <HalInitialiseCoprocessor()+0x8d>
c0016e9d:	c7 05 0c 82 02 c0 61 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e261
c0016ea7:	c7 05 08 82 02 c0 68 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e268
c0016eb1:	83 c4 0c             	add    esp,0xc
c0016eb4:	e9 b6 73 00 00       	jmp    c001e26f <x87Init>
c0016eb9:	c7 05 0c 82 02 c0 69 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016769
c0016ec3:	c7 05 08 82 02 c0 69 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc0016769
c0016ecd:	0f 20 c0             	mov    eax,cr0
c0016ed0:	83 c8 04             	or     eax,0x4
c0016ed3:	0f 22 c0             	mov    cr0,eax
c0016ed6:	83 c4 0c             	add    esp,0xc
c0016ed9:	c3                   	ret    

c0016eda <HalPanic(char const*)>:
c0016eda:	53                   	push   ebx
c0016edb:	83 ec 10             	sub    esp,0x10
c0016ede:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016ee2:	fa                   	cli    
c0016ee3:	53                   	push   ebx
c0016ee4:	68 48 14 02 c0       	push   0xc0021448
c0016ee9:	e8 4f 3a ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0016eee:	83 c4 0c             	add    esp,0xc
c0016ef1:	6a 01                	push   0x1
c0016ef3:	6a 0f                	push   0xf
c0016ef5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016efb:	e8 a0 16 ff ff       	call   c00085a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f00:	58                   	pop    eax
c0016f01:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f07:	e8 84 18 ff ff       	call   c0008790 <VgaText::clearScreen()>
c0016f0c:	5a                   	pop    edx
c0016f0d:	59                   	pop    ecx
c0016f0e:	68 a0 fc 01 c0       	push   0xc001fca0
c0016f13:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f19:	e8 ba 16 ff ff       	call   c00085d8 <VgaText::setTitle(char*)>
c0016f1e:	83 c4 0c             	add    esp,0xc
c0016f21:	6a 01                	push   0x1
c0016f23:	6a 0f                	push   0xf
c0016f25:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f2b:	e8 70 16 ff ff       	call   c00085a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f30:	58                   	pop    eax
c0016f31:	5a                   	pop    edx
c0016f32:	68 61 14 02 c0       	push   0xc0021461
c0016f37:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f3d:	e8 40 1b ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016f42:	83 c4 0c             	add    esp,0xc
c0016f45:	6a 0f                	push   0xf
c0016f47:	6a 01                	push   0x1
c0016f49:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f4f:	e8 4c 16 ff ff       	call   c00085a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f54:	59                   	pop    ecx
c0016f55:	58                   	pop    eax
c0016f56:	68 6a 14 02 c0       	push   0xc002146a
c0016f5b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f61:	e8 1c 1b ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016f66:	83 c4 0c             	add    esp,0xc
c0016f69:	6a 01                	push   0x1
c0016f6b:	6a 0f                	push   0xf
c0016f6d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f73:	e8 28 16 ff ff       	call   c00085a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f78:	58                   	pop    eax
c0016f79:	5a                   	pop    edx
c0016f7a:	68 ae 14 02 c0       	push   0xc00214ae
c0016f7f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f85:	e8 f8 1a ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016f8a:	59                   	pop    ecx
c0016f8b:	58                   	pop    eax
c0016f8c:	68 77 14 02 c0       	push   0xc0021477
c0016f91:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f97:	e8 e6 1a ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016f9c:	58                   	pop    eax
c0016f9d:	5a                   	pop    edx
c0016f9e:	68 b1 14 02 c0       	push   0xc00214b1
c0016fa3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa9:	e8 d4 1a ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016fae:	59                   	pop    ecx
c0016faf:	58                   	pop    eax
c0016fb0:	53                   	push   ebx
c0016fb1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fb7:	e8 c6 1a ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016fbc:	58                   	pop    eax
c0016fbd:	5a                   	pop    edx
c0016fbe:	68 ae 14 02 c0       	push   0xc00214ae
c0016fc3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc9:	e8 b4 1a ff ff       	call   c0008a82 <VgaText::puts(char const*)>
c0016fce:	83 c4 10             	add    esp,0x10
c0016fd1:	eb fe                	jmp    c0016fd1 <HalPanic(char const*)+0xf7>

c0016fd3 <HalQueryPerformanceCounter()>:
c0016fd3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016fd8:	31 d2                	xor    edx,edx
c0016fda:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016fe0:	31 c0                	xor    eax,eax
c0016fe2:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016fe9:	74 02                	je     c0016fed <HalQueryPerformanceCounter()+0x1a>
c0016feb:	0f 31                	rdtsc  
c0016fed:	c3                   	ret    

c0016fee <HalInitialise()>:
c0016fee:	53                   	push   ebx
c0016fef:	83 ec 08             	sub    esp,0x8
c0016ff2:	e8 16 55 ff ff       	call   c000c50d <setupINTS()>
c0016ff7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ffc:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017003:	75 0f                	jne    c0017014 <HalInitialise()+0x26>
c0017005:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001700b:	83 e2 fe             	and    edx,0xfffffffe
c001700e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017014:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001701b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017021:	83 e2 fe             	and    edx,0xfffffffe
c0017024:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001702a:	e8 a1 02 00 00       	call   c00172d0 <picOpen()>
c001702f:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017036:	74 0a                	je     c0017042 <HalInitialise()+0x54>
c0017038:	e8 e3 01 00 00       	call   c0017220 <picDisable()>
c001703d:	e8 9a 67 00 00       	call   c001d7dc <apicOpen()>
c0017042:	50                   	push   eax
c0017043:	bb 0f 00 00 00       	mov    ebx,0xf
c0017048:	6a 00                	push   0x0
c001704a:	68 b0 6c 01 c0       	push   0xc0016cb0
c001704f:	6a 00                	push   0x0
c0017051:	e8 80 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017056:	83 c4 0c             	add    esp,0xc
c0017059:	6a 00                	push   0x0
c001705b:	68 b0 6c 01 c0       	push   0xc0016cb0
c0017060:	6a 01                	push   0x1
c0017062:	e8 6f 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017067:	83 c4 0c             	add    esp,0xc
c001706a:	6a 00                	push   0x0
c001706c:	68 6a 67 01 c0       	push   0xc001676a
c0017071:	6a 02                	push   0x2
c0017073:	e8 5e 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017078:	83 c4 0c             	add    esp,0xc
c001707b:	6a 00                	push   0x0
c001707d:	68 b0 6c 01 c0       	push   0xc0016cb0
c0017082:	6a 03                	push   0x3
c0017084:	e8 4d 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017089:	83 c4 0c             	add    esp,0xc
c001708c:	6a 00                	push   0x0
c001708e:	68 b0 6c 01 c0       	push   0xc0016cb0
c0017093:	6a 04                	push   0x4
c0017095:	e8 3c 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001709a:	83 c4 0c             	add    esp,0xc
c001709d:	6a 00                	push   0x0
c001709f:	68 b0 6c 01 c0       	push   0xc0016cb0
c00170a4:	6a 05                	push   0x5
c00170a6:	e8 2b 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ab:	83 c4 0c             	add    esp,0xc
c00170ae:	6a 00                	push   0x0
c00170b0:	68 e4 6c 01 c0       	push   0xc0016ce4
c00170b5:	6a 06                	push   0x6
c00170b7:	e8 1a 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170bc:	83 c4 0c             	add    esp,0xc
c00170bf:	6a 00                	push   0x0
c00170c1:	68 83 67 01 c0       	push   0xc0016783
c00170c6:	6a 08                	push   0x8
c00170c8:	e8 09 52 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170cd:	83 c4 0c             	add    esp,0xc
c00170d0:	6a 00                	push   0x0
c00170d2:	68 b0 6c 01 c0       	push   0xc0016cb0
c00170d7:	6a 09                	push   0x9
c00170d9:	e8 f8 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170de:	83 c4 0c             	add    esp,0xc
c00170e1:	6a 00                	push   0x0
c00170e3:	68 b0 6c 01 c0       	push   0xc0016cb0
c00170e8:	6a 0a                	push   0xa
c00170ea:	e8 e7 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ef:	83 c4 0c             	add    esp,0xc
c00170f2:	6a 00                	push   0x0
c00170f4:	68 b0 6c 01 c0       	push   0xc0016cb0
c00170f9:	6a 0b                	push   0xb
c00170fb:	e8 d6 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017100:	83 c4 0c             	add    esp,0xc
c0017103:	6a 00                	push   0x0
c0017105:	68 c0 6b 01 c0       	push   0xc0016bc0
c001710a:	6a 0d                	push   0xd
c001710c:	e8 c5 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017111:	83 c4 0c             	add    esp,0xc
c0017114:	6a 00                	push   0x0
c0017116:	68 27 6c 01 c0       	push   0xc0016c27
c001711b:	6a 0e                	push   0xe
c001711d:	e8 b4 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017122:	83 c4 10             	add    esp,0x10
c0017125:	50                   	push   eax
c0017126:	6a 00                	push   0x0
c0017128:	68 b0 6c 01 c0       	push   0xc0016cb0
c001712d:	53                   	push   ebx
c001712e:	43                   	inc    ebx
c001712f:	e8 a2 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	83 fb 1e             	cmp    ebx,0x1e
c001713a:	75 e9                	jne    c0017125 <HalInitialise()+0x137>
c001713c:	50                   	push   eax
c001713d:	6a 00                	push   0x0
c001713f:	68 af 1a 01 c0       	push   0xc0011aaf
c0017144:	6a 60                	push   0x60
c0017146:	e8 8b 51 ff ff       	call   c000c2d6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001714b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017150:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001715a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017161:	e8 51 09 ff ff       	call   c0007ab7 <malloc>
c0017166:	89 04 24             	mov    DWORD PTR [esp],eax
c0017169:	89 c3                	mov    ebx,eax
c001716b:	e8 38 09 00 00       	call   c0017aa8 <RTC::RTC()>
c0017170:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001717a:	5a                   	pop    edx
c001717b:	59                   	pop    ecx
c001717c:	53                   	push   ebx
c001717d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017183:	e8 18 4c ff ff       	call   c000bda0 <Device::addChild(Device*)>
c0017188:	8b 03                	mov    eax,DWORD PTR [ebx]
c001718a:	6a 00                	push   0x0
c001718c:	6a 00                	push   0x0
c001718e:	6a 00                	push   0x0
c0017190:	53                   	push   ebx
c0017191:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017194:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017199:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001719f:	83 c4 28             	add    esp,0x28
c00171a2:	5b                   	pop    ebx
c00171a3:	c3                   	ret    

c00171a4 <HalMakeBeep(int)>:
c00171a4:	53                   	push   ebx
c00171a5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00171a9:	85 db                	test   ebx,ebx
c00171ab:	75 07                	jne    c00171b4 <HalMakeBeep(int)+0x10>
c00171ad:	e4 61                	in     al,0x61
c00171af:	83 e0 fc             	and    eax,0xfffffffc
c00171b2:	eb 26                	jmp    c00171da <HalMakeBeep(int)+0x36>
c00171b4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00171b9:	99                   	cdq    
c00171ba:	f7 fb                	idiv   ebx
c00171bc:	89 c1                	mov    ecx,eax
c00171be:	b0 b6                	mov    al,0xb6
c00171c0:	e6 43                	out    0x43,al
c00171c2:	88 c8                	mov    al,cl
c00171c4:	e6 42                	out    0x42,al
c00171c6:	89 c8                	mov    eax,ecx
c00171c8:	c1 e8 08             	shr    eax,0x8
c00171cb:	e6 42                	out    0x42,al
c00171cd:	e4 61                	in     al,0x61
c00171cf:	89 c2                	mov    edx,eax
c00171d1:	83 ca 03             	or     edx,0x3
c00171d4:	38 d0                	cmp    al,dl
c00171d6:	74 04                	je     c00171dc <HalMakeBeep(int)+0x38>
c00171d8:	88 d0                	mov    al,dl
c00171da:	e6 61                	out    0x61,al
c00171dc:	5b                   	pop    ebx
c00171dd:	c3                   	ret    

c00171de <HalGetRand()>:
c00171de:	31 c0                	xor    eax,eax
c00171e0:	c3                   	ret    

c00171e1 <HalEndOfInterrupt(int)>:
c00171e1:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00171e8:	74 23                	je     c001720d <HalEndOfInterrupt(int)+0x2c>
c00171ea:	83 ec 14             	sub    esp,0x14
c00171ed:	6a 1b                	push   0x1b
c00171ef:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00171f5:	e8 e0 fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c00171fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00171ff:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017209:	83 c4 1c             	add    esp,0x1c
c001720c:	c3                   	ret    
c001720d:	e9 42 02 00 00       	jmp    c0017454 <picEOI(int)>

c0017212 <HalRestart()>:
c0017212:	c3                   	ret    

c0017213 <HalShutdown()>:
c0017213:	c3                   	ret    

c0017214 <HalSleep()>:
c0017214:	c3                   	ret    
c0017215:	66 90                	xchg   ax,ax
c0017217:	90                   	nop

c0017218 <picIoWait()>:
c0017218:	eb 00                	jmp    c001721a <picIoWait()+0x2>
c001721a:	eb 00                	jmp    c001721c <picIoWait()+0x4>
c001721c:	90                   	nop
c001721d:	c3                   	ret    
c001721e:	66 90                	xchg   ax,ax

c0017220 <picDisable()>:
c0017220:	83 ec 10             	sub    esp,0x10
c0017223:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001722a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001722f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017233:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017238:	ee                   	out    dx,al
c0017239:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017240:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017245:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017249:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001724e:	ee                   	out    dx,al
c001724f:	90                   	nop
c0017250:	83 c4 10             	add    esp,0x10
c0017253:	c3                   	ret    

c0017254 <picGetIRQReg(int)>:
c0017254:	83 ec 10             	sub    esp,0x10
c0017257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001725b:	0f b6 c0             	movzx  eax,al
c001725e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017265:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017269:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001726d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017272:	ee                   	out    dx,al
c0017273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017277:	0f b6 c0             	movzx  eax,al
c001727a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017281:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017285:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017289:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001728e:	ee                   	out    dx,al
c001728f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017296:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001729b:	89 c2                	mov    edx,eax
c001729d:	ec                   	in     al,dx
c001729e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00172a2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172a6:	0f b6 c0             	movzx  eax,al
c00172a9:	c1 e0 08             	shl    eax,0x8
c00172ac:	89 c1                	mov    ecx,eax
c00172ae:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00172b5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00172ba:	89 c2                	mov    edx,eax
c00172bc:	ec                   	in     al,dx
c00172bd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00172c1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172c5:	0f b6 c0             	movzx  eax,al
c00172c8:	09 c8                	or     eax,ecx
c00172ca:	83 c4 10             	add    esp,0x10
c00172cd:	c3                   	ret    
c00172ce:	66 90                	xchg   ax,ax

c00172d0 <picOpen()>:
c00172d0:	83 ec 50             	sub    esp,0x50
c00172d3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00172da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00172e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172e7:	ee                   	out    dx,al
c00172e8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00172ef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00172f4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00172f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00172fc:	ee                   	out    dx,al
c00172fd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017305:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001730d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017314:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017318:	89 c2                	mov    edx,eax
c001731a:	ec                   	in     al,dx
c001731b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001731f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017323:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017327:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001732e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017332:	89 c2                	mov    edx,eax
c0017334:	ec                   	in     al,dx
c0017335:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017339:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001733d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017341:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017348:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001734d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017351:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017355:	ee                   	out    dx,al
c0017356:	e8 bd fe ff ff       	call   c0017218 <picIoWait()>
c001735b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017362:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017367:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001736b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001736f:	ee                   	out    dx,al
c0017370:	e8 a3 fe ff ff       	call   c0017218 <picIoWait()>
c0017375:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017379:	0f b6 c0             	movzx  eax,al
c001737c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017383:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017387:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001738b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001738f:	ee                   	out    dx,al
c0017390:	e8 83 fe ff ff       	call   c0017218 <picIoWait()>
c0017395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017399:	0f b6 c0             	movzx  eax,al
c001739c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00173a3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00173a7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00173ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173af:	ee                   	out    dx,al
c00173b0:	e8 63 fe ff ff       	call   c0017218 <picIoWait()>
c00173b5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00173bc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00173c1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00173c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173c9:	ee                   	out    dx,al
c00173ca:	e8 49 fe ff ff       	call   c0017218 <picIoWait()>
c00173cf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00173d6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00173db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00173df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173e3:	ee                   	out    dx,al
c00173e4:	e8 2f fe ff ff       	call   c0017218 <picIoWait()>
c00173e9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00173f0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00173f5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00173f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00173fd:	ee                   	out    dx,al
c00173fe:	e8 15 fe ff ff       	call   c0017218 <picIoWait()>
c0017403:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001740a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001740f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017413:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017417:	ee                   	out    dx,al
c0017418:	e8 fb fd ff ff       	call   c0017218 <picIoWait()>
c001741d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017422:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017429:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001742d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017431:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017435:	ee                   	out    dx,al
c0017436:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001743b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017442:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017446:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001744a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001744e:	ee                   	out    dx,al
c001744f:	90                   	nop
c0017450:	83 c4 50             	add    esp,0x50
c0017453:	c3                   	ret    

c0017454 <picEOI(int)>:
c0017454:	83 ec 10             	sub    esp,0x10
c0017457:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001745c:	75 1e                	jne    c001747c <picEOI(int)+0x28>
c001745e:	6a 0b                	push   0xb
c0017460:	e8 ef fd ff ff       	call   c0017254 <picGetIRQReg(int)>
c0017465:	83 c4 04             	add    esp,0x4
c0017468:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001746d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017472:	25 80 00 00 00       	and    eax,0x80
c0017477:	74 73                	je     c00174ec <picEOI(int)+0x98>
c0017479:	8d 76 00             	lea    esi,[esi+0x0]
c001747c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017481:	75 31                	jne    c00174b4 <picEOI(int)+0x60>
c0017483:	6a 0b                	push   0xb
c0017485:	e8 ca fd ff ff       	call   c0017254 <picGetIRQReg(int)>
c001748a:	83 c4 04             	add    esp,0x4
c001748d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017496:	98                   	cwde   
c0017497:	85 c0                	test   eax,eax
c0017499:	78 19                	js     c00174b4 <picEOI(int)+0x60>
c001749b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00174a2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00174a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00174ab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00174b0:	ee                   	out    dx,al
c00174b1:	eb 3d                	jmp    c00174f0 <picEOI(int)+0x9c>
c00174b3:	90                   	nop
c00174b4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174b9:	7e 19                	jle    c00174d4 <picEOI(int)+0x80>
c00174bb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00174c2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00174c7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00174cb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00174d0:	ee                   	out    dx,al
c00174d1:	8d 76 00             	lea    esi,[esi+0x0]
c00174d4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00174db:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00174e0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00174e4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00174e9:	ee                   	out    dx,al
c00174ea:	eb 04                	jmp    c00174f0 <picEOI(int)+0x9c>
c00174ec:	90                   	nop
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	83 c4 10             	add    esp,0x10
c00174f3:	c3                   	ret    

c00174f4 <RTC::open(int, int, void*)>:
c00174f4:	31 c0                	xor    eax,eax
c00174f6:	c3                   	ret    
c00174f7:	90                   	nop

c00174f8 <RTC::close(int, int, void*)>:
c00174f8:	31 c0                	xor    eax,eax
c00174fa:	c3                   	ret    
c00174fb:	90                   	nop

c00174fc <RTC::timeInSecondsUTC()>:
c00174fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017500:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017506:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001750c:	c3                   	ret    
c001750d:	90                   	nop

c001750e <RTC::timeInDatetimeUTC()>:
c001750e:	53                   	push   ebx
c001750f:	83 ec 14             	sub    esp,0x14
c0017512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017516:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001751a:	8b 10                	mov    edx,DWORD PTR [eax]
c001751c:	50                   	push   eax
c001751d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017520:	83 c4 0c             	add    esp,0xc
c0017523:	52                   	push   edx
c0017524:	50                   	push   eax
c0017525:	53                   	push   ebx
c0017526:	e8 e9 45 ff ff       	call   c000bb14 <secondsToDatetime(unsigned long long)>
c001752b:	89 d8                	mov    eax,ebx
c001752d:	83 c4 14             	add    esp,0x14
c0017530:	5b                   	pop    ebx
c0017531:	c2 04 00             	ret    0x4

c0017534 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017534:	56                   	push   esi
c0017535:	53                   	push   ebx
c0017536:	83 ec 14             	sub    esp,0x14
c0017539:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001753d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001753f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017542:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017546:	52                   	push   edx
c0017547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001754b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001754f:	50                   	push   eax
c0017550:	e8 bf 45 ff ff       	call   c000bb14 <secondsToDatetime(unsigned long long)>
c0017555:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001755d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017561:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017565:	89 f0                	mov    eax,esi
c0017567:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001756b:	83 c4 20             	add    esp,0x20
c001756e:	5b                   	pop    ebx
c001756f:	5e                   	pop    esi
c0017570:	ff e0                	jmp    eax

c0017572 <RTC::~RTC()>:
c0017572:	83 ec 0c             	sub    esp,0xc
c0017575:	ba 4c 15 02 c0       	mov    edx,0xc002154c
c001757a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757e:	89 10                	mov    DWORD PTR [eax],edx
c0017580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	50                   	push   eax
c0017588:	e8 13 43 ff ff       	call   c000b8a0 <Clock::~Clock()>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	90                   	nop
c0017591:	83 c4 0c             	add    esp,0xc
c0017594:	c3                   	ret    
c0017595:	90                   	nop

c0017596 <RTC::~RTC()>:
c0017596:	83 ec 0c             	sub    esp,0xc
c0017599:	83 ec 0c             	sub    esp,0xc
c001759c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175a0:	e8 cd ff ff ff       	call   c0017572 <RTC::~RTC()>
c00175a5:	83 c4 10             	add    esp,0x10
c00175a8:	83 ec 08             	sub    esp,0x8
c00175ab:	68 60 01 00 00       	push   0x160
c00175b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b4:	e8 86 32 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c00175b9:	83 c4 10             	add    esp,0x10
c00175bc:	83 c4 0c             	add    esp,0xc
c00175bf:	c3                   	ret    

c00175c0 <RTC::get_update_in_progress_flag()>:
c00175c0:	83 ec 14             	sub    esp,0x14
c00175c3:	6a 0a                	push   0xa
c00175c5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175cb:	e8 c2 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00175d0:	83 c4 1c             	add    esp,0x1c
c00175d3:	0f b6 c0             	movzx  eax,al
c00175d6:	c1 e8 07             	shr    eax,0x7
c00175d9:	c3                   	ret    

c00175da <RTC::completeRTCRefresh()>:
c00175da:	55                   	push   ebp
c00175db:	57                   	push   edi
c00175dc:	56                   	push   esi
c00175dd:	53                   	push   ebx
c00175de:	83 ec 3c             	sub    esp,0x3c
c00175e1:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00175e7:	83 ec 0c             	sub    esp,0xc
c00175ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00175ee:	e8 cd ff ff ff       	call   c00175c0 <RTC::get_update_in_progress_flag()>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	84 c0                	test   al,al
c00175f8:	74 0e                	je     c0017608 <RTC::completeRTCRefresh()+0x2e>
c00175fa:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017600:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017606:	73 df                	jae    c00175e7 <RTC::completeRTCRefresh()+0xd>
c0017608:	50                   	push   eax
c0017609:	50                   	push   eax
c001760a:	6a 00                	push   0x0
c001760c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017612:	e8 7b fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017617:	89 c7                	mov    edi,eax
c0017619:	58                   	pop    eax
c001761a:	5a                   	pop    edx
c001761b:	6a 02                	push   0x2
c001761d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017623:	e8 6a fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017628:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001762c:	59                   	pop    ecx
c001762d:	5b                   	pop    ebx
c001762e:	6a 04                	push   0x4
c0017630:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017636:	e8 57 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001763b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001763f:	5e                   	pop    esi
c0017640:	5d                   	pop    ebp
c0017641:	6a 07                	push   0x7
c0017643:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017649:	e8 44 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001764e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017652:	58                   	pop    eax
c0017653:	5a                   	pop    edx
c0017654:	6a 08                	push   0x8
c0017656:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001765c:	e8 31 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017661:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017665:	59                   	pop    ecx
c0017666:	5b                   	pop    ebx
c0017667:	6a 09                	push   0x9
c0017669:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001766f:	e8 1e fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017674:	0f b6 c0             	movzx  eax,al
c0017677:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017684:	83 ec 0c             	sub    esp,0xc
c0017687:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001768b:	e8 30 ff ff ff       	call   c00175c0 <RTC::get_update_in_progress_flag()>
c0017690:	83 c4 10             	add    esp,0x10
c0017693:	84 c0                	test   al,al
c0017695:	74 0e                	je     c00176a5 <RTC::completeRTCRefresh()+0xcb>
c0017697:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001769d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00176a3:	73 df                	jae    c0017684 <RTC::completeRTCRefresh()+0xaa>
c00176a5:	51                   	push   ecx
c00176a6:	51                   	push   ecx
c00176a7:	6a 00                	push   0x0
c00176a9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176af:	e8 de fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176b4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00176b8:	5b                   	pop    ebx
c00176b9:	5e                   	pop    esi
c00176ba:	6a 02                	push   0x2
c00176bc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c2:	e8 cb fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176c7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00176cb:	5d                   	pop    ebp
c00176cc:	58                   	pop    eax
c00176cd:	6a 04                	push   0x4
c00176cf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d5:	e8 b8 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176da:	88 c3                	mov    bl,al
c00176dc:	58                   	pop    eax
c00176dd:	5a                   	pop    edx
c00176de:	6a 07                	push   0x7
c00176e0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e6:	e8 a7 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176eb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00176ef:	59                   	pop    ecx
c00176f0:	5e                   	pop    esi
c00176f1:	6a 08                	push   0x8
c00176f3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176f9:	e8 94 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176fe:	5d                   	pop    ebp
c00176ff:	89 c6                	mov    esi,eax
c0017701:	58                   	pop    eax
c0017702:	6a 09                	push   0x9
c0017704:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001770a:	e8 83 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001770f:	89 f9                	mov    ecx,edi
c0017711:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	0f b6 e8             	movzx  ebp,al
c001771b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017720:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017724:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017728:	74 27                	je     c0017751 <RTC::completeRTCRefresh()+0x177>
c001772a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001772e:	89 f0                	mov    eax,esi
c0017730:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017734:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017738:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001773c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017740:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017744:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017748:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001774c:	e9 2d ff ff ff       	jmp    c001767e <RTC::completeRTCRefresh()+0xa4>
c0017751:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017756:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001775a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001775e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0017762:	75 c6                	jne    c001772a <RTC::completeRTCRefresh()+0x150>
c0017764:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017769:	89 f1                	mov    ecx,esi
c001776b:	0f b6 fb             	movzx  edi,bl
c001776e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017772:	0f b6 c9             	movzx  ecx,cl
c0017775:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017779:	89 f1                	mov    ecx,esi
c001777b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001777f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017783:	0f 94 c2             	sete   dl
c0017786:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001778a:	0f 94 c0             	sete   al
c001778d:	21 d0                	and    eax,edx
c001778f:	31 d2                	xor    edx,edx
c0017791:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017795:	0f 94 c2             	sete   dl
c0017798:	85 c2                	test   edx,eax
c001779a:	74 8e                	je     c001772a <RTC::completeRTCRefresh()+0x150>
c001779c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00177a0:	75 88                	jne    c001772a <RTC::completeRTCRefresh()+0x150>
c00177a2:	52                   	push   edx
c00177a3:	52                   	push   edx
c00177a4:	6a 0b                	push   0xb
c00177a6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177ac:	e8 e1 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	a8 04                	test   al,0x4
c00177b6:	75 7a                	jne    c0017832 <RTC::completeRTCRefresh()+0x258>
c00177b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177bc:	c1 ef 04             	shr    edi,0x4
c00177bf:	83 e6 0f             	and    esi,0xf
c00177c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00177c6:	c1 ed 04             	shr    ebp,0x4
c00177c9:	6b ed 0a             	imul   ebp,ebp,0xa
c00177cc:	c1 ea 04             	shr    edx,0x4
c00177cf:	6b d2 0a             	imul   edx,edx,0xa
c00177d2:	83 e1 0f             	and    ecx,0xf
c00177d5:	01 d1                	add    ecx,edx
c00177d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177db:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00177df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177e3:	c1 ea 04             	shr    edx,0x4
c00177e6:	6b d2 0a             	imul   edx,edx,0xa
c00177e9:	83 e1 0f             	and    ecx,0xf
c00177ec:	01 d1                	add    ecx,edx
c00177ee:	89 fa                	mov    edx,edi
c00177f0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00177f4:	83 e2 07             	and    edx,0x7
c00177f7:	89 d9                	mov    ecx,ebx
c00177f9:	6b d2 0a             	imul   edx,edx,0xa
c00177fc:	83 e1 0f             	and    ecx,0xf
c00177ff:	83 e3 80             	and    ebx,0xffffff80
c0017802:	01 d1                	add    ecx,edx
c0017804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017808:	09 cb                	or     ebx,ecx
c001780a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001780e:	c1 ea 04             	shr    edx,0x4
c0017811:	6b d2 0a             	imul   edx,edx,0xa
c0017814:	83 e1 0f             	and    ecx,0xf
c0017817:	01 d1                	add    ecx,edx
c0017819:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001781d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017821:	c1 ea 04             	shr    edx,0x4
c0017824:	6b d2 0a             	imul   edx,edx,0xa
c0017827:	01 d6                	add    esi,edx
c0017829:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001782d:	83 e2 0f             	and    edx,0xf
c0017830:	01 d5                	add    ebp,edx
c0017832:	a8 02                	test   al,0x2
c0017834:	75 15                	jne    c001784b <RTC::completeRTCRefresh()+0x271>
c0017836:	f6 c3 80             	test   bl,0x80
c0017839:	74 10                	je     c001784b <RTC::completeRTCRefresh()+0x271>
c001783b:	83 e3 7f             	and    ebx,0x7f
c001783e:	b9 18 00 00 00       	mov    ecx,0x18
c0017843:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017846:	99                   	cdq    
c0017847:	f7 f9                	idiv   ecx
c0017849:	88 d3                	mov    bl,dl
c001784b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017851:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017857:	77 06                	ja     c001785f <RTC::completeRTCRefresh()+0x285>
c0017859:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001785f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017864:	31 c9                	xor    ecx,ecx
c0017866:	31 d2                	xor    edx,edx
c0017868:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001786c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017870:	89 cd                	mov    ebp,ecx
c0017872:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017876:	c1 e7 10             	shl    edi,0x10
c0017879:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001787f:	c1 e0 10             	shl    eax,0x10
c0017882:	09 c5                	or     ebp,eax
c0017884:	89 e9                	mov    ecx,ebp
c0017886:	0f b7 c2             	movzx  eax,dx
c0017889:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001788d:	09 f8                	or     eax,edi
c001788f:	89 c2                	mov    edx,eax
c0017891:	50                   	push   eax
c0017892:	50                   	push   eax
c0017893:	88 d9                	mov    cl,bl
c0017895:	51                   	push   ecx
c0017896:	52                   	push   edx
c0017897:	e8 f3 40 ff ff       	call   c000b98f <datetimeToSeconds(datetime_t)>
c001789c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00178a0:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00178a6:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00178ac:	83 c4 4c             	add    esp,0x4c
c00178af:	5b                   	pop    ebx
c00178b0:	5e                   	pop    esi
c00178b1:	5f                   	pop    edi
c00178b2:	5d                   	pop    ebp
c00178b3:	c3                   	ret    

c00178b4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00178b4:	55                   	push   ebp
c00178b5:	57                   	push   edi
c00178b6:	56                   	push   esi
c00178b7:	53                   	push   ebx
c00178b8:	83 ec 30             	sub    esp,0x30
c00178bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00178bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00178c3:	6a 00                	push   0x0
c00178c5:	6a 00                	push   0x0
c00178c7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178cd:	e8 c6 f9 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178d2:	83 c4 0c             	add    esp,0xc
c00178d5:	6a 00                	push   0x0
c00178d7:	6a 02                	push   0x2
c00178d9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178df:	e8 b4 f9 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178e4:	89 f8                	mov    eax,edi
c00178e6:	89 f9                	mov    ecx,edi
c00178e8:	0f b6 c4             	movzx  eax,ah
c00178eb:	31 d2                	xor    edx,edx
c00178ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178f1:	c1 e9 10             	shr    ecx,0x10
c00178f4:	89 f0                	mov    eax,esi
c00178f6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00178fa:	89 f0                	mov    eax,esi
c00178fc:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017900:	0f b6 c4             	movzx  eax,ah
c0017903:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017907:	89 f0                	mov    eax,esi
c0017909:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001790d:	c1 e8 10             	shr    eax,0x10
c0017910:	b9 64 00 00 00       	mov    ecx,0x64
c0017915:	f7 f1                	div    ecx
c0017917:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001791b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001791f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017923:	59                   	pop    ecx
c0017924:	5b                   	pop    ebx
c0017925:	89 fb                	mov    ebx,edi
c0017927:	6a 0b                	push   0xb
c0017929:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001792f:	e8 5e f8 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017934:	83 c4 10             	add    esp,0x10
c0017937:	a8 04                	test   al,0x4
c0017939:	89 c5                	mov    ebp,eax
c001793b:	75 6e                	jne    c00179ab <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001793d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017941:	31 d2                	xor    edx,edx
c0017943:	0f b6 c1             	movzx  eax,cl
c0017946:	b9 0a 00 00 00       	mov    ecx,0xa
c001794b:	f7 f1                	div    ecx
c001794d:	c1 e0 04             	shl    eax,0x4
c0017950:	09 d0                	or     eax,edx
c0017952:	31 d2                	xor    edx,edx
c0017954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017958:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001795d:	f7 f1                	div    ecx
c001795f:	c1 e0 04             	shl    eax,0x4
c0017962:	09 d0                	or     eax,edx
c0017964:	31 d2                	xor    edx,edx
c0017966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001796a:	0f b6 c3             	movzx  eax,bl
c001796d:	f7 f1                	div    ecx
c001796f:	c1 e0 04             	shl    eax,0x4
c0017972:	09 d0                	or     eax,edx
c0017974:	31 d2                	xor    edx,edx
c0017976:	89 c3                	mov    ebx,eax
c0017978:	89 f0                	mov    eax,esi
c001797a:	0f b6 c0             	movzx  eax,al
c001797d:	f7 f1                	div    ecx
c001797f:	c1 e0 04             	shl    eax,0x4
c0017982:	09 d0                	or     eax,edx
c0017984:	31 d2                	xor    edx,edx
c0017986:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001798a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001798f:	f7 f1                	div    ecx
c0017991:	c1 e0 04             	shl    eax,0x4
c0017994:	09 d0                	or     eax,edx
c0017996:	31 d2                	xor    edx,edx
c0017998:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001799c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179a0:	f7 f1                	div    ecx
c00179a2:	c1 e0 04             	shl    eax,0x4
c00179a5:	09 d0                	or     eax,edx
c00179a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179ab:	83 e5 02             	and    ebp,0x2
c00179ae:	75 1e                	jne    c00179ce <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00179b0:	0f b6 c3             	movzx  eax,bl
c00179b3:	83 f8 0b             	cmp    eax,0xb
c00179b6:	76 10                	jbe    c00179c8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00179b8:	8d 53 f4             	lea    edx,[ebx-0xc]
c00179bb:	84 d2                	test   dl,dl
c00179bd:	88 d3                	mov    bl,dl
c00179bf:	75 02                	jne    c00179c3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00179c1:	b3 0c                	mov    bl,0xc
c00179c3:	83 cb 80             	or     ebx,0xffffff80
c00179c6:	eb 06                	jmp    c00179ce <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00179c8:	85 c0                	test   eax,eax
c00179ca:	75 02                	jne    c00179ce <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00179cc:	b3 0c                	mov    bl,0xc
c00179ce:	50                   	push   eax
c00179cf:	0f b6 db             	movzx  ebx,bl
c00179d2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00179d7:	52                   	push   edx
c00179d8:	6a 00                	push   0x0
c00179da:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179e0:	e8 b3 f8 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179e5:	83 c4 0c             	add    esp,0xc
c00179e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179ed:	50                   	push   eax
c00179ee:	6a 02                	push   0x2
c00179f0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179f6:	e8 9d f8 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179fb:	83 c4 0c             	add    esp,0xc
c00179fe:	53                   	push   ebx
c00179ff:	6a 04                	push   0x4
c0017a01:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a07:	e8 8c f8 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a0c:	83 c4 0c             	add    esp,0xc
c0017a0f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017a14:	52                   	push   edx
c0017a15:	6a 07                	push   0x7
c0017a17:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a1d:	e8 76 f8 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a22:	83 c4 0c             	add    esp,0xc
c0017a25:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a2a:	50                   	push   eax
c0017a2b:	6a 08                	push   0x8
c0017a2d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a33:	e8 60 f8 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a38:	83 c4 0c             	add    esp,0xc
c0017a3b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017a40:	55                   	push   ebp
c0017a41:	6a 09                	push   0x9
c0017a43:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a49:	e8 4a f8 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a4e:	5a                   	pop    edx
c0017a4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017a53:	e8 82 fb ff ff       	call   c00175da <RTC::completeRTCRefresh()>
c0017a58:	83 c4 3c             	add    esp,0x3c
c0017a5b:	b0 01                	mov    al,0x1
c0017a5d:	5b                   	pop    ebx
c0017a5e:	5e                   	pop    esi
c0017a5f:	5f                   	pop    edi
c0017a60:	5d                   	pop    ebp
c0017a61:	c3                   	ret    

c0017a62 <rtcIRQHandler(regs*, void*)>:
c0017a62:	53                   	push   ebx
c0017a63:	83 ec 10             	sub    esp,0x10
c0017a66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a6a:	6a 0c                	push   0xc
c0017a6c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a72:	e8 1b f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	a8 80                	test   al,0x80
c0017a7c:	74 24                	je     c0017aa2 <rtcIRQHandler(regs*, void*)+0x40>
c0017a7e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017a85:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017a8c:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017a93:	75 0d                	jne    c0017aa2 <rtcIRQHandler(regs*, void*)+0x40>
c0017a95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017a99:	83 c4 08             	add    esp,0x8
c0017a9c:	5b                   	pop    ebx
c0017a9d:	e9 38 fb ff ff       	jmp    c00175da <RTC::completeRTCRefresh()>
c0017aa2:	83 c4 08             	add    esp,0x8
c0017aa5:	5b                   	pop    ebx
c0017aa6:	c3                   	ret    
c0017aa7:	90                   	nop

c0017aa8 <RTC::RTC()>:
c0017aa8:	83 ec 1c             	sub    esp,0x1c
c0017aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aaf:	83 ec 08             	sub    esp,0x8
c0017ab2:	68 2f 15 02 c0       	push   0xc002152f
c0017ab7:	50                   	push   eax
c0017ab8:	e8 ad 3d ff ff       	call   c000b86a <Clock::Clock(char const*)>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	ba 4c 15 02 c0       	mov    edx,0xc002154c
c0017ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac9:	89 10                	mov    DWORD PTR [eax],edx
c0017acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017acf:	83 ec 0c             	sub    esp,0xc
c0017ad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ad6:	6a 01                	push   0x1
c0017ad8:	68 62 7a 01 c0       	push   0xc0017a62
c0017add:	6a 08                	push   0x8
c0017adf:	50                   	push   eax
c0017ae0:	e8 67 42 ff ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017ae5:	83 c4 20             	add    esp,0x20
c0017ae8:	89 c2                	mov    edx,eax
c0017aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aee:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017af4:	fa                   	cli    
c0017af5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017afa:	83 c0 01             	add    eax,0x1
c0017afd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b02:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b07:	83 ec 08             	sub    esp,0x8
c0017b0a:	6a 0b                	push   0xb
c0017b0c:	50                   	push   eax
c0017b0d:	e8 80 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b19:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b1e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017b22:	83 ca 10             	or     edx,0x10
c0017b25:	0f b6 d2             	movzx  edx,dl
c0017b28:	83 ec 04             	sub    esp,0x4
c0017b2b:	52                   	push   edx
c0017b2c:	6a 0b                	push   0xb
c0017b2e:	50                   	push   eax
c0017b2f:	e8 64 f7 fe ff       	call   c0007298 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	83 ec 0c             	sub    esp,0xc
c0017b3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b3e:	e8 97 fa ff ff       	call   c00175da <RTC::completeRTCRefresh()>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b4b:	83 e8 01             	sub    eax,0x1
c0017b4e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b53:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b58:	85 c0                	test   eax,eax
c0017b5a:	75 01                	jne    c0017b5d <RTC::RTC()+0xb5>
c0017b5c:	fb                   	sti    
c0017b5d:	90                   	nop
c0017b5e:	83 c4 1c             	add    esp,0x1c
c0017b61:	c3                   	ret    
c0017b62:	66 90                	xchg   ax,ax

c0017b64 <HalConsoleScroll(int, int)>:
c0017b64:	83 ec 10             	sub    esp,0x10
c0017b67:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017b6f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017b77:	90                   	nop
c0017b78:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b7d:	0f 8f e1 00 00 00    	jg     c0017c64 <HalConsoleScroll(int, int)+0x100>
c0017b83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017b8b:	90                   	nop
c0017b8c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017b94:	0f 8f be 00 00 00    	jg     c0017c58 <HalConsoleScroll(int, int)+0xf4>
c0017b9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b9e:	89 d0                	mov    eax,edx
c0017ba0:	c1 e0 02             	shl    eax,0x2
c0017ba3:	01 d0                	add    eax,edx
c0017ba5:	c1 e0 05             	shl    eax,0x5
c0017ba8:	89 c2                	mov    edx,eax
c0017baa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bae:	01 d0                	add    eax,edx
c0017bb0:	89 c2                	mov    edx,eax
c0017bb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bb6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017bb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bbd:	89 d0                	mov    eax,edx
c0017bbf:	c1 e0 02             	shl    eax,0x2
c0017bc2:	01 d0                	add    eax,edx
c0017bc4:	c1 e0 05             	shl    eax,0x5
c0017bc7:	89 c2                	mov    edx,eax
c0017bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bcd:	01 d0                	add    eax,edx
c0017bcf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017bd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bd9:	01 d0                	add    eax,edx
c0017bdb:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017bdd:	88 10                	mov    BYTE PTR [eax],dl
c0017bdf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017be4:	75 66                	jne    c0017c4c <HalConsoleScroll(int, int)+0xe8>
c0017be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bea:	83 e0 01             	and    eax,0x1
c0017bed:	74 39                	je     c0017c28 <HalConsoleScroll(int, int)+0xc4>
c0017bef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bf3:	83 e0 0f             	and    eax,0xf
c0017bf6:	88 c2                	mov    dl,al
c0017bf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bfc:	c1 e0 04             	shl    eax,0x4
c0017bff:	09 d0                	or     eax,edx
c0017c01:	88 c1                	mov    cl,al
c0017c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c07:	89 d0                	mov    eax,edx
c0017c09:	c1 e0 02             	shl    eax,0x2
c0017c0c:	01 d0                	add    eax,edx
c0017c0e:	c1 e0 05             	shl    eax,0x5
c0017c11:	89 c2                	mov    edx,eax
c0017c13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c17:	01 d0                	add    eax,edx
c0017c19:	89 c2                	mov    edx,eax
c0017c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c1f:	01 d0                	add    eax,edx
c0017c21:	88 ca                	mov    dl,cl
c0017c23:	88 10                	mov    BYTE PTR [eax],dl
c0017c25:	eb 25                	jmp    c0017c4c <HalConsoleScroll(int, int)+0xe8>
c0017c27:	90                   	nop
c0017c28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c2c:	89 d0                	mov    eax,edx
c0017c2e:	c1 e0 02             	shl    eax,0x2
c0017c31:	01 d0                	add    eax,edx
c0017c33:	c1 e0 05             	shl    eax,0x5
c0017c36:	89 c2                	mov    edx,eax
c0017c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c3c:	01 d0                	add    eax,edx
c0017c3e:	89 c2                	mov    edx,eax
c0017c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c44:	01 d0                	add    eax,edx
c0017c46:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017c49:	8d 76 00             	lea    esi,[esi+0x0]
c0017c4c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017c51:	e9 36 ff ff ff       	jmp    c0017b8c <HalConsoleScroll(int, int)+0x28>
c0017c56:	66 90                	xchg   ax,ax
c0017c58:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017c5d:	e9 16 ff ff ff       	jmp    c0017b78 <HalConsoleScroll(int, int)+0x14>
c0017c62:	66 90                	xchg   ax,ax
c0017c64:	90                   	nop
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	c3                   	ret    
c0017c69:	8d 76 00             	lea    esi,[esi+0x0]

c0017c6c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017c6c:	83 ec 14             	sub    esp,0x14
c0017c6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c73:	88 04 24             	mov    BYTE PTR [esp],al
c0017c76:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017c79:	0f b6 c0             	movzx  eax,al
c0017c7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c80:	89 d1                	mov    ecx,edx
c0017c82:	83 e1 0f             	and    ecx,0xf
c0017c85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c89:	c1 e2 04             	shl    edx,0x4
c0017c8c:	0f b6 d2             	movzx  edx,dl
c0017c8f:	09 ca                	or     edx,ecx
c0017c91:	c1 e2 08             	shl    edx,0x8
c0017c94:	09 d0                	or     eax,edx
c0017c96:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017c9b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017ca3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ca7:	89 d0                	mov    eax,edx
c0017ca9:	c1 e0 02             	shl    eax,0x2
c0017cac:	01 d0                	add    eax,edx
c0017cae:	c1 e0 04             	shl    eax,0x4
c0017cb1:	89 c2                	mov    edx,eax
c0017cb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cb7:	01 d0                	add    eax,edx
c0017cb9:	d1 e0                	shl    eax,1
c0017cbb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cc3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017cc8:	66 89 10             	mov    WORD PTR [eax],dx
c0017ccb:	90                   	nop
c0017ccc:	83 c4 14             	add    esp,0x14
c0017ccf:	c3                   	ret    

c0017cd0 <HalConsoleCursorUpdate(int, int)>:
c0017cd0:	83 ec 20             	sub    esp,0x20
c0017cd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd7:	89 c2                	mov    edx,eax
c0017cd9:	c1 e2 02             	shl    edx,0x2
c0017cdc:	01 d0                	add    eax,edx
c0017cde:	c1 e0 04             	shl    eax,0x4
c0017ce1:	89 c2                	mov    edx,eax
c0017ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ce7:	01 d0                	add    eax,edx
c0017ce9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017cee:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017cf5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017cfa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017cfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d02:	ee                   	out    dx,al
c0017d03:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d08:	0f b6 c0             	movzx  eax,al
c0017d0b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d12:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d16:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d1e:	ee                   	out    dx,al
c0017d1f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d26:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017d2b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017d2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d33:	ee                   	out    dx,al
c0017d34:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d39:	c1 e8 08             	shr    eax,0x8
c0017d3c:	0f b6 c0             	movzx  eax,al
c0017d3f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017d46:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017d4a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d52:	ee                   	out    dx,al
c0017d53:	90                   	nop
c0017d54:	83 c4 20             	add    esp,0x20
c0017d57:	c3                   	ret    

c0017d58 <FAT::getName()>:
c0017d58:	b8 80 15 02 c0       	mov    eax,0xc0021580
c0017d5d:	c3                   	ret    
c0017d5e:	66 90                	xchg   ax,ax

c0017d60 <FAT::tell(void*, unsigned long long*)>:
c0017d60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d65:	75 09                	jne    c0017d70 <FAT::tell(void*, unsigned long long*)+0x10>
c0017d67:	b8 04 00 00 00       	mov    eax,0x4
c0017d6c:	c3                   	ret    
c0017d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d75:	75 09                	jne    c0017d80 <FAT::tell(void*, unsigned long long*)+0x20>
c0017d77:	b8 04 00 00 00       	mov    eax,0x4
c0017d7c:	c3                   	ret    
c0017d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d87:	ba 00 00 00 00       	mov    edx,0x0
c0017d8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d90:	89 01                	mov    DWORD PTR [ecx],eax
c0017d92:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d95:	b8 00 00 00 00       	mov    eax,0x0
c0017d9a:	c3                   	ret    
c0017d9b:	90                   	nop

c0017d9c <FAT::stat(void*, unsigned long long*)>:
c0017d9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017da1:	75 09                	jne    c0017dac <FAT::stat(void*, unsigned long long*)+0x10>
c0017da3:	b8 04 00 00 00       	mov    eax,0x4
c0017da8:	c3                   	ret    
c0017da9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017db1:	75 09                	jne    c0017dbc <FAT::stat(void*, unsigned long long*)+0x20>
c0017db3:	b8 04 00 00 00       	mov    eax,0x4
c0017db8:	c3                   	ret    
c0017db9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017dc3:	ba 00 00 00 00       	mov    edx,0x0
c0017dc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017dcc:	89 01                	mov    DWORD PTR [ecx],eax
c0017dce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017dd1:	b8 00 00 00 00       	mov    eax,0x0
c0017dd6:	c3                   	ret    
c0017dd7:	90                   	nop

c0017dd8 <FAT::~FAT()>:
c0017dd8:	83 ec 0c             	sub    esp,0xc
c0017ddb:	ba cc 15 02 c0       	mov    edx,0xc00215cc
c0017de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017de4:	89 10                	mov    DWORD PTR [eax],edx
c0017de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dea:	83 ec 0c             	sub    esp,0xc
c0017ded:	50                   	push   eax
c0017dee:	e8 91 2e ff ff       	call   c000ac84 <Filesystem::~Filesystem()>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	90                   	nop
c0017df7:	83 c4 0c             	add    esp,0xc
c0017dfa:	c3                   	ret    
c0017dfb:	90                   	nop

c0017dfc <FAT::~FAT()>:
c0017dfc:	83 ec 0c             	sub    esp,0xc
c0017dff:	83 ec 0c             	sub    esp,0xc
c0017e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e06:	e8 cd ff ff ff       	call   c0017dd8 <FAT::~FAT()>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	83 ec 08             	sub    esp,0x8
c0017e11:	6a 08                	push   0x8
c0017e13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e17:	e8 23 2a ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	83 c4 0c             	add    esp,0xc
c0017e22:	c3                   	ret    
c0017e23:	90                   	nop

c0017e24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e24:	83 ec 1c             	sub    esp,0x1c
c0017e27:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017e2e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017e33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e37:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e3e:	83 f8 ff             	cmp    eax,0xffffffff
c0017e41:	75 35                	jne    c0017e78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017e43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e47:	88 c2                	mov    dl,al
c0017e49:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e4e:	01 d0                	add    eax,edx
c0017e50:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e54:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e5e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e65:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6e:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e75:	eb 19                	jmp    c0017e90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017e77:	90                   	nop
c0017e78:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e7c:	88 c2                	mov    dl,al
c0017e7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e82:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e89:	01 d0                	add    eax,edx
c0017e8b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e8f:	90                   	nop
c0017e90:	83 ec 04             	sub    esp,0x4
c0017e93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017e97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017e9b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017e9f:	50                   	push   eax
c0017ea0:	e8 4e d1 fe ff       	call   c0004ff3 <f_getlabel>
c0017ea5:	83 c4 10             	add    esp,0x10
c0017ea8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017eac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017eb1:	75 09                	jne    c0017ebc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017eb3:	b8 00 00 00 00       	mov    eax,0x0
c0017eb8:	eb 0a                	jmp    c0017ec4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017eba:	66 90                	xchg   ax,ax
c0017ebc:	b8 01 00 00 00       	mov    eax,0x1
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	83 c4 1c             	add    esp,0x1c
c0017ec7:	c3                   	ret    

c0017ec8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017ec8:	53                   	push   ebx
c0017ec9:	83 ec 58             	sub    esp,0x58
c0017ecc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017ed4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017ed8:	b9 00 00 00 00       	mov    ecx,0x0
c0017edd:	b8 3c 00 00 00       	mov    eax,0x3c
c0017ee2:	83 e0 f8             	and    eax,0xfffffff8
c0017ee5:	89 c3                	mov    ebx,eax
c0017ee7:	b8 00 00 00 00       	mov    eax,0x0
c0017eec:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017ef0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017ef4:	83 c0 08             	add    eax,0x8
c0017ef7:	39 d8                	cmp    eax,ebx
c0017ef9:	72 f1                	jb     c0017eec <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017efb:	01 c2                	add    edx,eax
c0017efd:	89 0a                	mov    DWORD PTR [edx],ecx
c0017eff:	83 c2 04             	add    edx,0x4
c0017f02:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f06:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f0d:	83 f8 ff             	cmp    eax,0xffffffff
c0017f10:	75 36                	jne    c0017f48 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017f12:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f16:	88 c2                	mov    dl,al
c0017f18:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f1d:	01 d0                	add    eax,edx
c0017f1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f23:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f29:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f2d:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f34:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f39:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017f3d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f44:	eb 1a                	jmp    c0017f60 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017f46:	66 90                	xchg   ax,ax
c0017f48:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f4c:	88 c2                	mov    dl,al
c0017f4e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f52:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f59:	01 d0                	add    eax,edx
c0017f5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f5f:	90                   	nop
c0017f60:	83 ec 08             	sub    esp,0x8
c0017f63:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017f67:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f6b:	50                   	push   eax
c0017f6c:	e8 ff 88 fe ff       	call   c0000870 <strcat>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f7b:	50                   	push   eax
c0017f7c:	e8 c6 d1 fe ff       	call   c0005147 <f_setlabel>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017f88:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017f8d:	75 09                	jne    c0017f98 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0017f8f:	b8 00 00 00 00       	mov    eax,0x0
c0017f94:	eb 0a                	jmp    c0017fa0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0017f96:	66 90                	xchg   ax,ax
c0017f98:	b8 01 00 00 00       	mov    eax,0x1
c0017f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017fa0:	83 c4 58             	add    esp,0x58
c0017fa3:	5b                   	pop    ebx
c0017fa4:	c3                   	ret    
c0017fa5:	90                   	nop
c0017fa6:	66 90                	xchg   ax,ax

c0017fa8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017fa8:	83 ec 2c             	sub    esp,0x2c
c0017fab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017fb3:	83 ec 08             	sub    esp,0x8
c0017fb6:	68 a4 15 02 c0       	push   0xc00215a4
c0017fbb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fbf:	e8 bc 87 fe ff       	call   c0000780 <strcmp>
c0017fc4:	83 c4 10             	add    esp,0x10
c0017fc7:	85 c0                	test   eax,eax
c0017fc9:	0f 94 c0             	sete   al
c0017fcc:	0f b6 c0             	movzx  eax,al
c0017fcf:	85 c0                	test   eax,eax
c0017fd1:	74 0d                	je     c0017fe0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017fd3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017fdb:	e9 c0 00 00 00       	jmp    c00180a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0017fe0:	83 ec 08             	sub    esp,0x8
c0017fe3:	68 96 15 02 c0       	push   0xc0021596
c0017fe8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fec:	e8 8f 87 fe ff       	call   c0000780 <strcmp>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	85 c0                	test   eax,eax
c0017ff6:	0f 94 c0             	sete   al
c0017ff9:	0f b6 c0             	movzx  eax,al
c0017ffc:	85 c0                	test   eax,eax
c0017ffe:	74 10                	je     c0018010 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018000:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018008:	e9 93 00 00 00       	jmp    c00180a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001800d:	8d 76 00             	lea    esi,[esi+0x0]
c0018010:	83 ec 08             	sub    esp,0x8
c0018013:	68 9c 15 02 c0       	push   0xc002159c
c0018018:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001801c:	e8 5f 87 fe ff       	call   c0000780 <strcmp>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	85 c0                	test   eax,eax
c0018026:	0f 94 c0             	sete   al
c0018029:	0f b6 c0             	movzx  eax,al
c001802c:	85 c0                	test   eax,eax
c001802e:	74 0c                	je     c001803c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018030:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018038:	eb 66                	jmp    c00180a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001803a:	66 90                	xchg   ax,ax
c001803c:	83 ec 08             	sub    esp,0x8
c001803f:	68 7c f3 01 c0       	push   0xc001f37c
c0018044:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018048:	e8 33 87 fe ff       	call   c0000780 <strcmp>
c001804d:	83 c4 10             	add    esp,0x10
c0018050:	85 c0                	test   eax,eax
c0018052:	0f 94 c0             	sete   al
c0018055:	0f b6 c0             	movzx  eax,al
c0018058:	85 c0                	test   eax,eax
c001805a:	74 0c                	je     c0018068 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001805c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018064:	eb 3a                	jmp    c00180a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018066:	66 90                	xchg   ax,ax
c0018068:	83 ec 08             	sub    esp,0x8
c001806b:	68 a2 15 02 c0       	push   0xc00215a2
c0018070:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018074:	e8 07 87 fe ff       	call   c0000780 <strcmp>
c0018079:	83 c4 10             	add    esp,0x10
c001807c:	85 c0                	test   eax,eax
c001807e:	0f 94 c0             	sete   al
c0018081:	0f b6 c0             	movzx  eax,al
c0018084:	85 c0                	test   eax,eax
c0018086:	74 0c                	je     c0018094 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018088:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018090:	eb 0e                	jmp    c00180a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018092:	66 90                	xchg   ax,ax
c0018094:	b8 08 00 00 00       	mov    eax,0x8
c0018099:	e9 ea 00 00 00       	jmp    c0018188 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001809e:	66 90                	xchg   ax,ax
c00180a0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00180a7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00180ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180b0:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180b7:	83 f8 ff             	cmp    eax,0xffffffff
c00180ba:	75 34                	jne    c00180f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00180bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00180c0:	88 c2                	mov    dl,al
c00180c2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180c7:	01 d0                	add    eax,edx
c00180c9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00180cd:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00180d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180d7:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00180de:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180e7:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00180ee:	eb 18                	jmp    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00180f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00180f4:	88 c2                	mov    dl,al
c00180f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180fa:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018101:	01 d0                	add    eax,edx
c0018103:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018107:	90                   	nop
c0018108:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001810c:	88 04 24             	mov    BYTE PTR [esp],al
c001810f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018117:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001811f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018124:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	68 00 20 00 00       	push   0x2000
c0018134:	e8 7e f9 fe ff       	call   c0007ab7 <malloc>
c0018139:	83 c4 10             	add    esp,0x10
c001813c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018140:	68 00 20 00 00       	push   0x2000
c0018145:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018149:	8d 44 24 08          	lea    eax,[esp+0x8]
c001814d:	50                   	push   eax
c001814e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018152:	50                   	push   eax
c0018153:	e8 ec d2 fe ff       	call   c0005444 <f_mkfs>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001815f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018164:	75 0a                	jne    c0018170 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018166:	b8 00 00 00 00       	mov    eax,0x0
c001816b:	eb 1b                	jmp    c0018188 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001816d:	8d 76 00             	lea    esi,[esi+0x0]
c0018170:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018175:	75 09                	jne    c0018180 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018177:	b8 09 00 00 00       	mov    eax,0x9
c001817c:	eb 0a                	jmp    c0018188 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001817e:	66 90                	xchg   ax,ax
c0018180:	b8 01 00 00 00       	mov    eax,0x1
c0018185:	8d 76 00             	lea    esi,[esi+0x0]
c0018188:	83 c4 2c             	add    esp,0x2c
c001818b:	c3                   	ret    

c001818c <FAT::tryMount(LogicalDisk*, int)>:
c001818c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018192:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018197:	83 f8 14             	cmp    eax,0x14
c001819a:	75 18                	jne    c00181b4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001819c:	83 ec 0c             	sub    esp,0xc
c001819f:	68 a8 15 02 c0       	push   0xc00215a8
c00181a4:	e8 18 86 ff ff       	call   c00107c1 <KePanic(char const*)>
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	b0 00                	mov    al,0x0
c00181ae:	e9 ed 01 00 00       	jmp    c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181b3:	90                   	nop
c00181b4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00181bb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00181c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00181c7:	3d 00 02 00 00       	cmp    eax,0x200
c00181cc:	74 0a                	je     c00181d8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00181ce:	b0 00                	mov    al,0x0
c00181d0:	e9 cb 01 00 00       	jmp    c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181d5:	8d 76 00             	lea    esi,[esi+0x0]
c00181d8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00181e0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00181e7:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181ee:	83 f8 ff             	cmp    eax,0xffffffff
c00181f1:	74 09                	je     c00181fc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00181f3:	b0 01                	mov    al,0x1
c00181f5:	e9 a6 01 00 00       	jmp    c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181fa:	66 90                	xchg   ax,ax
c00181fc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018206:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001820e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018215:	88 c2                	mov    dl,al
c0018217:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001821c:	01 d0                	add    eax,edx
c001821e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018225:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001822b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018232:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018239:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001823e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018245:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001824c:	83 ec 0c             	sub    esp,0xc
c001824f:	68 34 02 00 00       	push   0x234
c0018254:	e8 5e f8 fe ff       	call   c0007ab7 <malloc>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018263:	83 ec 04             	sub    esp,0x4
c0018266:	6a 00                	push   0x0
c0018268:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001826f:	50                   	push   eax
c0018270:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018277:	e8 c2 b9 fe ff       	call   c0003c3e <f_mount>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018286:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001828e:	74 1c                	je     c00182ac <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018290:	83 ec 0c             	sub    esp,0xc
c0018293:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001829a:	e8 38 f8 fe ff       	call   c0007ad7 <rfree>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	b0 00                	mov    al,0x0
c00182a4:	e9 f7 00 00 00       	jmp    c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182a9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ac:	83 ec 04             	sub    esp,0x4
c00182af:	68 00 01 00 00       	push   0x100
c00182b4:	6a 00                	push   0x0
c00182b6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182bd:	50                   	push   eax
c00182be:	e8 2d 82 fe ff       	call   c00004f0 <memset>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	83 ec 08             	sub    esp,0x8
c00182c9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182d0:	50                   	push   eax
c00182d1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182d8:	50                   	push   eax
c00182d9:	e8 92 85 fe ff       	call   c0000870 <strcat>
c00182de:	83 c4 10             	add    esp,0x10
c00182e1:	83 ec 08             	sub    esp,0x8
c00182e4:	68 b6 15 02 c0       	push   0xc00215b6
c00182e9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182f0:	50                   	push   eax
c00182f1:	e8 7a 85 fe ff       	call   c0000870 <strcat>
c00182f6:	83 c4 10             	add    esp,0x10
c00182f9:	83 ec 04             	sub    esp,0x4
c00182fc:	6a 01                	push   0x1
c00182fe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018305:	50                   	push   eax
c0018306:	8d 44 24 14          	lea    eax,[esp+0x14]
c001830a:	50                   	push   eax
c001830b:	e8 90 b9 fe ff       	call   c0003ca0 <f_open>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001831a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018321:	85 c0                	test   eax,eax
c0018323:	74 0b                	je     c0018330 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018325:	78 31                	js     c0018358 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018327:	83 e8 04             	sub    eax,0x4
c001832a:	83 f8 01             	cmp    eax,0x1
c001832d:	77 29                	ja     c0018358 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001832f:	90                   	nop
c0018330:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018338:	83 ec 0c             	sub    esp,0xc
c001833b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001833f:	50                   	push   eax
c0018340:	e8 0b c1 fe ff       	call   c0004450 <f_close>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	90                   	nop
c0018349:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018351:	85 c0                	test   eax,eax
c0018353:	74 43                	je     c0018398 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018355:	eb 31                	jmp    c0018388 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018357:	90                   	nop
c0018358:	83 ec 0c             	sub    esp,0xc
c001835b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018362:	e8 70 f7 fe ff       	call   c0007ad7 <rfree>
c0018367:	83 c4 10             	add    esp,0x10
c001836a:	83 ec 04             	sub    esp,0x4
c001836d:	6a 00                	push   0x0
c001836f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018376:	50                   	push   eax
c0018377:	6a 00                	push   0x0
c0018379:	e8 c0 b8 fe ff       	call   c0003c3e <f_mount>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	b0 00                	mov    al,0x0
c0018383:	eb 1b                	jmp    c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018385:	8d 76 00             	lea    esi,[esi+0x0]
c0018388:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001838d:	83 c0 01             	add    eax,0x1
c0018390:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018395:	8d 76 00             	lea    esi,[esi+0x0]
c0018398:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001839f:	90                   	nop
c00183a0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00183a6:	c3                   	ret    
c00183a7:	90                   	nop

c00183a8 <FAT::allocateSwapfile(char const*, int)>:
c00183a8:	55                   	push   ebp
c00183a9:	57                   	push   edi
c00183aa:	56                   	push   esi
c00183ab:	53                   	push   ebx
c00183ac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00183b2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00183bd:	83 ec 0c             	sub    esp,0xc
c00183c0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00183c7:	e8 eb f6 fe ff       	call   c0007ab7 <malloc>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	89 c7                	mov    edi,eax
c00183d1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00183d6:	83 ec 04             	sub    esp,0x4
c00183d9:	50                   	push   eax
c00183da:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00183e1:	57                   	push   edi
c00183e2:	e8 ff 2a ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c00183e7:	83 c4 10             	add    esp,0x10
c00183ea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00183f1:	83 ec 04             	sub    esp,0x4
c00183f4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00183f8:	50                   	push   eax
c00183f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00183fd:	50                   	push   eax
c00183fe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018405:	e8 44 2e ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c001840a:	83 c4 10             	add    esp,0x10
c001840d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018414:	c1 e0 14             	shl    eax,0x14
c0018417:	89 c7                	mov    edi,eax
c0018419:	89 c5                	mov    ebp,eax
c001841b:	c1 fd 1f             	sar    ebp,0x1f
c001841e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018422:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018426:	89 f9                	mov    ecx,edi
c0018428:	31 c1                	xor    ecx,eax
c001842a:	89 cb                	mov    ebx,ecx
c001842c:	89 e9                	mov    ecx,ebp
c001842e:	31 d1                	xor    ecx,edx
c0018430:	89 ce                	mov    esi,ecx
c0018432:	89 f0                	mov    eax,esi
c0018434:	09 d8                	or     eax,ebx
c0018436:	0f 84 9c 00 00 00    	je     c00184d8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001843c:	83 ec 0c             	sub    esp,0xc
c001843f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018446:	e8 cf 2c ff ff       	call   c000b11a <File::unlink()>
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	83 ec 08             	sub    esp,0x8
c0018451:	6a 12                	push   0x12
c0018453:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001845a:	e8 43 2b ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018469:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001846f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018476:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001847d:	c1 e0 14             	shl    eax,0x14
c0018480:	83 ec 04             	sub    esp,0x4
c0018483:	6a 01                	push   0x1
c0018485:	50                   	push   eax
c0018486:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001848d:	e8 45 ce fe ff       	call   c00052d7 <f_expand>
c0018492:	83 c4 10             	add    esp,0x10
c0018495:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001849c:	8b 00                	mov    eax,DWORD PTR [eax]
c001849e:	83 c0 10             	add    eax,0x10
c00184a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a3:	83 ec 0c             	sub    esp,0xc
c00184a6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00184aa:	52                   	push   edx
c00184ab:	8d 54 24 30          	lea    edx,[esp+0x30]
c00184af:	52                   	push   edx
c00184b0:	6a 00                	push   0x0
c00184b2:	68 00 04 00 00       	push   0x400
c00184b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00184be:	ff d0                	call   eax
c00184c0:	83 c4 20             	add    esp,0x20
c00184c3:	83 ec 0c             	sub    esp,0xc
c00184c6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184cd:	e8 2e 2b ff ff       	call   c000b000 <File::close()>
c00184d2:	83 c4 10             	add    esp,0x10
c00184d5:	8d 76 00             	lea    esi,[esi+0x0]
c00184d8:	83 ec 08             	sub    esp,0x8
c00184db:	6a 01                	push   0x1
c00184dd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184e4:	e8 b9 2a ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c00184e9:	83 c4 10             	add    esp,0x10
c00184ec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00184f5:	83 c0 0c             	add    eax,0xc
c00184f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00184fa:	83 ec 0c             	sub    esp,0xc
c00184fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018501:	52                   	push   edx
c0018502:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018506:	52                   	push   edx
c0018507:	6a 00                	push   0x0
c0018509:	6a 04                	push   0x4
c001850b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018512:	ff d0                	call   eax
c0018514:	83 c4 20             	add    esp,0x20
c0018517:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001851e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018524:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001852b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018532:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018535:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001853c:	83 ec 0c             	sub    esp,0xc
c001853f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018546:	e8 b5 2a ff ff       	call   c000b000 <File::close()>
c001854b:	83 c4 10             	add    esp,0x10
c001854e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018555:	ba 00 00 00 00       	mov    edx,0x0
c001855a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018560:	5b                   	pop    ebx
c0018561:	5e                   	pop    esi
c0018562:	5f                   	pop    edi
c0018563:	5d                   	pop    ebp
c0018564:	c3                   	ret    
c0018565:	90                   	nop
c0018566:	66 90                	xchg   ax,ax

c0018568 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018568:	57                   	push   edi
c0018569:	56                   	push   esi
c001856a:	53                   	push   ebx
c001856b:	81 ec 50 02 00 00    	sub    esp,0x250
c0018571:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018579:	74 0d                	je     c0018588 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001857b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018583:	75 0f                	jne    c0018594 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018585:	8d 76 00             	lea    esi,[esi+0x0]
c0018588:	b8 04 00 00 00       	mov    eax,0x4
c001858d:	e9 3a 01 00 00       	jmp    c00186cc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018592:	66 90                	xchg   ax,ax
c0018594:	83 ec 08             	sub    esp,0x8
c0018597:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001859e:	50                   	push   eax
c001859f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00185a6:	e8 71 c1 fe ff       	call   c000471c <f_readdir>
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00185b5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00185bc:	83 ec 0c             	sub    esp,0xc
c00185bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00185c6:	83 c0 16             	add    eax,0x16
c00185c9:	50                   	push   eax
c00185ca:	e8 b1 7f fe ff       	call   c0000580 <strlen>
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	ba 00 00 00 00       	mov    edx,0x0
c00185d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00185df:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00185e6:	0f b6 c0             	movzx  eax,al
c00185e9:	83 e0 10             	and    eax,0x10
c00185ec:	74 0a                	je     c00185f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00185ee:	b8 02 00 00 00       	mov    eax,0x2
c00185f3:	eb 0b                	jmp    c0018600 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00185f5:	8d 76 00             	lea    esi,[esi+0x0]
c00185f8:	b8 01 00 00 00       	mov    eax,0x1
c00185fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018600:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018604:	83 ec 08             	sub    esp,0x8
c0018607:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001860e:	83 c0 16             	add    eax,0x16
c0018611:	50                   	push   eax
c0018612:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018616:	83 c0 10             	add    eax,0x10
c0018619:	50                   	push   eax
c001861a:	e8 31 80 fe ff       	call   c0000650 <strcpy>
c001861f:	83 c4 10             	add    esp,0x10
c0018622:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018629:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018630:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018634:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001863b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018642:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018649:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018650:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018657:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001865e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018665:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001866c:	89 c6                	mov    esi,eax
c001866e:	89 d7                	mov    edi,edx
c0018670:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018672:	89 c8                	mov    eax,ecx
c0018674:	89 fa                	mov    edx,edi
c0018676:	89 f3                	mov    ebx,esi
c0018678:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001867f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018686:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001868d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018694:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001869a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00186a1:	0f be c0             	movsx  eax,al
c00186a4:	85 c0                	test   eax,eax
c00186a6:	75 08                	jne    c00186b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00186a8:	b8 07 00 00 00       	mov    eax,0x7
c00186ad:	eb 1d                	jmp    c00186cc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186af:	90                   	nop
c00186b0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00186b7:	85 c0                	test   eax,eax
c00186b9:	75 09                	jne    c00186c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186bb:	b8 00 00 00 00       	mov    eax,0x0
c00186c0:	eb 0a                	jmp    c00186cc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186c2:	66 90                	xchg   ax,ax
c00186c4:	b8 01 00 00 00       	mov    eax,0x1
c00186c9:	8d 76 00             	lea    esi,[esi+0x0]
c00186cc:	81 c4 50 02 00 00    	add    esp,0x250
c00186d2:	5b                   	pop    ebx
c00186d3:	5e                   	pop    esi
c00186d4:	5f                   	pop    edi
c00186d5:	c3                   	ret    
c00186d6:	66 90                	xchg   ax,ax

c00186d8 <FAT::read(void*, unsigned long, void*, int*)>:
c00186d8:	83 ec 1c             	sub    esp,0x1c
c00186db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00186e0:	74 0a                	je     c00186ec <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00186e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00186e7:	75 0b                	jne    c00186f4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00186e9:	8d 76 00             	lea    esi,[esi+0x0]
c00186ec:	b8 04 00 00 00       	mov    eax,0x4
c00186f1:	eb 41                	jmp    c0018734 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00186f3:	90                   	nop
c00186f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186f8:	50                   	push   eax
c00186f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018701:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018705:	e8 59 b8 fe ff       	call   c0003f63 <f_read>
c001870a:	83 c4 10             	add    esp,0x10
c001870d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018711:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018715:	89 c2                	mov    edx,eax
c0018717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001871b:	89 10                	mov    DWORD PTR [eax],edx
c001871d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018721:	85 c0                	test   eax,eax
c0018723:	75 07                	jne    c001872c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018725:	b8 00 00 00 00       	mov    eax,0x0
c001872a:	eb 08                	jmp    c0018734 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001872c:	b8 01 00 00 00       	mov    eax,0x1
c0018731:	8d 76 00             	lea    esi,[esi+0x0]
c0018734:	83 c4 1c             	add    esp,0x1c
c0018737:	c3                   	ret    

c0018738 <FAT::write(void*, unsigned long, void*, int*)>:
c0018738:	83 ec 1c             	sub    esp,0x1c
c001873b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018740:	74 0a                	je     c001874c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018742:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018747:	75 0b                	jne    c0018754 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018749:	8d 76 00             	lea    esi,[esi+0x0]
c001874c:	b8 04 00 00 00       	mov    eax,0x4
c0018751:	eb 41                	jmp    c0018794 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018753:	90                   	nop
c0018754:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018758:	50                   	push   eax
c0018759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001875d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018761:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018765:	e8 da b9 fe ff       	call   c0004144 <f_write>
c001876a:	83 c4 10             	add    esp,0x10
c001876d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018771:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018775:	89 c2                	mov    edx,eax
c0018777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001877b:	89 10                	mov    DWORD PTR [eax],edx
c001877d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018781:	85 c0                	test   eax,eax
c0018783:	75 07                	jne    c001878c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018785:	b8 00 00 00 00       	mov    eax,0x0
c001878a:	eb 08                	jmp    c0018794 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001878c:	b8 01 00 00 00       	mov    eax,0x1
c0018791:	8d 76 00             	lea    esi,[esi+0x0]
c0018794:	83 c4 1c             	add    esp,0x1c
c0018797:	c3                   	ret    

c0018798 <FAT::close(void*)>:
c0018798:	83 ec 1c             	sub    esp,0x1c
c001879b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187a0:	75 0a                	jne    c00187ac <FAT::close(void*)+0x14>
c00187a2:	b8 04 00 00 00       	mov    eax,0x4
c00187a7:	eb 3f                	jmp    c00187e8 <FAT::close(void*)+0x50>
c00187a9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ac:	83 ec 0c             	sub    esp,0xc
c00187af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187b3:	e8 98 bc fe ff       	call   c0004450 <f_close>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187bf:	83 ec 0c             	sub    esp,0xc
c00187c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187c6:	e8 fc f2 fe ff       	call   c0007ac7 <free>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187d2:	85 c0                	test   eax,eax
c00187d4:	75 0a                	jne    c00187e0 <FAT::close(void*)+0x48>
c00187d6:	b8 00 00 00 00       	mov    eax,0x0
c00187db:	eb 0b                	jmp    c00187e8 <FAT::close(void*)+0x50>
c00187dd:	8d 76 00             	lea    esi,[esi+0x0]
c00187e0:	b8 01 00 00 00       	mov    eax,0x1
c00187e5:	8d 76 00             	lea    esi,[esi+0x0]
c00187e8:	83 c4 1c             	add    esp,0x1c
c00187eb:	c3                   	ret    

c00187ec <FAT::closeDir(void*)>:
c00187ec:	83 ec 1c             	sub    esp,0x1c
c00187ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187f4:	75 0a                	jne    c0018800 <FAT::closeDir(void*)+0x14>
c00187f6:	b8 04 00 00 00       	mov    eax,0x4
c00187fb:	eb 3f                	jmp    c001883c <FAT::closeDir(void*)+0x50>
c00187fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018800:	83 ec 0c             	sub    esp,0xc
c0018803:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018807:	e8 ee be fe ff       	call   c00046fa <f_closedir>
c001880c:	83 c4 10             	add    esp,0x10
c001880f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018813:	83 ec 0c             	sub    esp,0xc
c0018816:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001881a:	e8 a8 f2 fe ff       	call   c0007ac7 <free>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018826:	85 c0                	test   eax,eax
c0018828:	75 0a                	jne    c0018834 <FAT::closeDir(void*)+0x48>
c001882a:	b8 00 00 00 00       	mov    eax,0x0
c001882f:	eb 0b                	jmp    c001883c <FAT::closeDir(void*)+0x50>
c0018831:	8d 76 00             	lea    esi,[esi+0x0]
c0018834:	b8 01 00 00 00       	mov    eax,0x1
c0018839:	8d 76 00             	lea    esi,[esi+0x0]
c001883c:	83 c4 1c             	add    esp,0x1c
c001883f:	c3                   	ret    

c0018840 <FAT::seek(void*, unsigned long long)>:
c0018840:	83 ec 2c             	sub    esp,0x2c
c0018843:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001884b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001884f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018853:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018858:	75 0a                	jne    c0018864 <FAT::seek(void*, unsigned long long)+0x24>
c001885a:	b8 04 00 00 00       	mov    eax,0x4
c001885f:	eb 33                	jmp    c0018894 <FAT::seek(void*, unsigned long long)+0x54>
c0018861:	8d 76 00             	lea    esi,[esi+0x0]
c0018864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018868:	83 ec 08             	sub    esp,0x8
c001886b:	50                   	push   eax
c001886c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018870:	e8 0a bc fe ff       	call   c000447f <f_lseek>
c0018875:	83 c4 10             	add    esp,0x10
c0018878:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001887c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018880:	85 c0                	test   eax,eax
c0018882:	75 08                	jne    c001888c <FAT::seek(void*, unsigned long long)+0x4c>
c0018884:	b8 00 00 00 00       	mov    eax,0x0
c0018889:	eb 09                	jmp    c0018894 <FAT::seek(void*, unsigned long long)+0x54>
c001888b:	90                   	nop
c001888c:	b8 01 00 00 00       	mov    eax,0x1
c0018891:	8d 76 00             	lea    esi,[esi+0x0]
c0018894:	83 c4 2c             	add    esp,0x2c
c0018897:	c3                   	ret    

c0018898 <fatWrapperReadDisk>:
c0018898:	53                   	push   ebx
c0018899:	83 ec 18             	sub    esp,0x18
c001889c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00188a9:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00188b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188b8:	ba 00 00 00 00       	mov    edx,0x0
c00188bd:	83 ec 0c             	sub    esp,0xc
c00188c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188c4:	53                   	push   ebx
c00188c5:	52                   	push   edx
c00188c6:	50                   	push   eax
c00188c7:	51                   	push   ecx
c00188c8:	e8 bd 48 ff ff       	call   c000d18a <LogicalDisk::read(unsigned long long, int, void*)>
c00188cd:	83 c4 20             	add    esp,0x20
c00188d0:	83 c4 18             	add    esp,0x18
c00188d3:	5b                   	pop    ebx
c00188d4:	c3                   	ret    
c00188d5:	8d 76 00             	lea    esi,[esi+0x0]

c00188d8 <fatWrapperWriteDisk>:
c00188d8:	53                   	push   ebx
c00188d9:	83 ec 18             	sub    esp,0x18
c00188dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00188e9:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00188f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188f8:	ba 00 00 00 00       	mov    edx,0x0
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018904:	53                   	push   ebx
c0018905:	52                   	push   edx
c0018906:	50                   	push   eax
c0018907:	51                   	push   ecx
c0018908:	e8 e9 48 ff ff       	call   c000d1f6 <LogicalDisk::write(unsigned long long, int, void*)>
c001890d:	83 c4 20             	add    esp,0x20
c0018910:	83 c4 18             	add    esp,0x18
c0018913:	5b                   	pop    ebx
c0018914:	c3                   	ret    
c0018915:	8d 76 00             	lea    esi,[esi+0x0]

c0018918 <fatWrapperIoctl>:
c0018918:	53                   	push   ebx
c0018919:	83 ec 28             	sub    esp,0x28
c001891c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018920:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018924:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018928:	88 d0                	mov    al,dl
c001892a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001892e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018933:	83 f8 02             	cmp    eax,0x2
c0018936:	75 34                	jne    c001896c <fatWrapperIoctl+0x54>
c0018938:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001893c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018940:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018945:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001894c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018952:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018958:	89 c2                	mov    edx,eax
c001895a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001895e:	66 89 10             	mov    WORD PTR [eax],dx
c0018961:	b8 00 00 00 00       	mov    eax,0x0
c0018966:	e9 c5 00 00 00       	jmp    c0018a30 <fatWrapperIoctl+0x118>
c001896b:	90                   	nop
c001896c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018971:	83 f8 01             	cmp    eax,0x1
c0018974:	75 6a                	jne    c00189e0 <fatWrapperIoctl+0xc8>
c0018976:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001897a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001897e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018983:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001898a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018990:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018996:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001899c:	89 c8                	mov    eax,ecx
c001899e:	89 da                	mov    edx,ebx
c00189a0:	0f a4 c2 0a          	shld   edx,eax,0xa
c00189a4:	c1 e0 0a             	shl    eax,0xa
c00189a7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00189ac:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00189b3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00189b9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00189bf:	89 cb                	mov    ebx,ecx
c00189c1:	c1 fb 1f             	sar    ebx,0x1f
c00189c4:	53                   	push   ebx
c00189c5:	51                   	push   ecx
c00189c6:	52                   	push   edx
c00189c7:	50                   	push   eax
c00189c8:	e8 b3 5b 00 00       	call   c001e580 <__udivdi3>
c00189cd:	83 c4 10             	add    esp,0x10
c00189d0:	89 c2                	mov    edx,eax
c00189d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189d6:	89 10                	mov    DWORD PTR [eax],edx
c00189d8:	b8 00 00 00 00       	mov    eax,0x0
c00189dd:	eb 51                	jmp    c0018a30 <fatWrapperIoctl+0x118>
c00189df:	90                   	nop
c00189e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189e5:	85 c0                	test   eax,eax
c00189e7:	75 07                	jne    c00189f0 <fatWrapperIoctl+0xd8>
c00189e9:	b8 00 00 00 00       	mov    eax,0x0
c00189ee:	eb 40                	jmp    c0018a30 <fatWrapperIoctl+0x118>
c00189f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189f5:	83 f8 03             	cmp    eax,0x3
c00189f8:	75 1a                	jne    c0018a14 <fatWrapperIoctl+0xfc>
c00189fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a06:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a0c:	b8 00 00 00 00       	mov    eax,0x0
c0018a11:	eb 1d                	jmp    c0018a30 <fatWrapperIoctl+0x118>
c0018a13:	90                   	nop
c0018a14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a19:	83 f8 04             	cmp    eax,0x4
c0018a1c:	75 0a                	jne    c0018a28 <fatWrapperIoctl+0x110>
c0018a1e:	b8 00 00 00 00       	mov    eax,0x0
c0018a23:	eb 0b                	jmp    c0018a30 <fatWrapperIoctl+0x118>
c0018a25:	8d 76 00             	lea    esi,[esi+0x0]
c0018a28:	b8 04 00 00 00       	mov    eax,0x4
c0018a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a30:	83 c4 28             	add    esp,0x28
c0018a33:	5b                   	pop    ebx
c0018a34:	c3                   	ret    
c0018a35:	90                   	nop
c0018a36:	66 90                	xchg   ax,ax

c0018a38 <FAT::FAT()>:
c0018a38:	83 ec 1c             	sub    esp,0x1c
c0018a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a3f:	83 ec 0c             	sub    esp,0xc
c0018a42:	50                   	push   eax
c0018a43:	e8 18 22 ff ff       	call   c000ac60 <Filesystem::Filesystem()>
c0018a48:	83 c4 10             	add    esp,0x10
c0018a4b:	ba cc 15 02 c0       	mov    edx,0xc00215cc
c0018a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a54:	89 10                	mov    DWORD PTR [eax],edx
c0018a56:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018a60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018a68:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018a6d:	7f 19                	jg     c0018a88 <FAT::FAT()+0x50>
c0018a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a73:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018a7e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018a83:	eb e3                	jmp    c0018a68 <FAT::FAT()+0x30>
c0018a85:	8d 76 00             	lea    esi,[esi+0x0]
c0018a88:	90                   	nop
c0018a89:	83 c4 1c             	add    esp,0x1c
c0018a8c:	c3                   	ret    
c0018a8d:	90                   	nop
c0018a8e:	66 90                	xchg   ax,ax

c0018a90 <FAT::fixFilepath(char*)>:
c0018a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a94:	8a 00                	mov    al,BYTE PTR [eax]
c0018a96:	0f be c0             	movsx  eax,al
c0018a99:	83 f8 40             	cmp    eax,0x40
c0018a9c:	7e 2e                	jle    c0018acc <FAT::fixFilepath(char*)+0x3c>
c0018a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aa2:	8a 00                	mov    al,BYTE PTR [eax]
c0018aa4:	83 e8 41             	sub    eax,0x41
c0018aa7:	88 c2                	mov    dl,al
c0018aa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aad:	88 10                	mov    BYTE PTR [eax],dl
c0018aaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ab3:	8a 00                	mov    al,BYTE PTR [eax]
c0018ab5:	0f be c0             	movsx  eax,al
c0018ab8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018abf:	83 c0 30             	add    eax,0x30
c0018ac2:	88 c2                	mov    dl,al
c0018ac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ac8:	88 10                	mov    BYTE PTR [eax],dl
c0018aca:	66 90                	xchg   ax,ax
c0018acc:	90                   	nop
c0018acd:	c3                   	ret    
c0018ace:	66 90                	xchg   ax,ax

c0018ad0 <FAT::open(char const*, void**, FileOpenMode)>:
c0018ad0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018ad6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018ade:	74 0c                	je     c0018aec <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018ae0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018ae8:	75 0e                	jne    c0018af8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018aea:	66 90                	xchg   ax,ax
c0018aec:	b8 04 00 00 00       	mov    eax,0x4
c0018af1:	e9 46 01 00 00       	jmp    c0018c3c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018af6:	66 90                	xchg   ax,ax
c0018af8:	83 ec 08             	sub    esp,0x8
c0018afb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b06:	50                   	push   eax
c0018b07:	e8 44 7b fe ff       	call   c0000650 <strcpy>
c0018b0c:	83 c4 10             	add    esp,0x10
c0018b0f:	83 ec 08             	sub    esp,0x8
c0018b12:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b16:	50                   	push   eax
c0018b17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b1e:	e8 6d ff ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c0018b23:	83 c4 10             	add    esp,0x10
c0018b26:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b2e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b35:	83 e0 01             	and    eax,0x1
c0018b38:	74 12                	je     c0018b4c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018b3a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b41:	83 c8 01             	or     eax,0x1
c0018b44:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b4b:	90                   	nop
c0018b4c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b53:	83 e0 04             	and    eax,0x4
c0018b56:	74 24                	je     c0018b7c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018b58:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b5f:	83 c8 30             	or     eax,0x30
c0018b62:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b69:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b70:	83 c8 02             	or     eax,0x2
c0018b73:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b7a:	66 90                	xchg   ax,ax
c0018b7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b83:	83 e0 02             	and    eax,0x2
c0018b86:	74 14                	je     c0018b9c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018b88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b8f:	83 c8 02             	or     eax,0x2
c0018b92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b99:	8d 76 00             	lea    esi,[esi+0x0]
c0018b9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018ba3:	83 e0 08             	and    eax,0x8
c0018ba6:	74 14                	je     c0018bbc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018ba8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018baf:	83 c8 04             	or     eax,0x4
c0018bb2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bc3:	83 e0 10             	and    eax,0x10
c0018bc6:	74 14                	je     c0018bdc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018bc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bcf:	83 c8 08             	or     eax,0x8
c0018bd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bdc:	83 ec 0c             	sub    esp,0xc
c0018bdf:	68 28 02 00 00       	push   0x228
c0018be4:	e8 ce ee fe ff       	call   c0007ab7 <malloc>
c0018be9:	83 c4 10             	add    esp,0x10
c0018bec:	89 c2                	mov    edx,eax
c0018bee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018bf5:	89 10                	mov    DWORD PTR [eax],edx
c0018bf7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018bff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c08:	83 ec 04             	sub    esp,0x4
c0018c0b:	52                   	push   edx
c0018c0c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c10:	52                   	push   edx
c0018c11:	50                   	push   eax
c0018c12:	e8 89 b0 fe ff       	call   c0003ca0 <f_open>
c0018c17:	83 c4 10             	add    esp,0x10
c0018c1a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c21:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c29:	74 09                	je     c0018c34 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c2b:	b8 01 00 00 00       	mov    eax,0x1
c0018c30:	eb 0a                	jmp    c0018c3c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c32:	66 90                	xchg   ax,ax
c0018c34:	b8 00 00 00 00       	mov    eax,0x0
c0018c39:	8d 76 00             	lea    esi,[esi+0x0]
c0018c3c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018c42:	c3                   	ret    
c0018c43:	90                   	nop

c0018c44 <FAT::openDir(char const*, void**)>:
c0018c44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018c4a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018c52:	74 0c                	je     c0018c60 <FAT::openDir(char const*, void**)+0x1c>
c0018c54:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018c5c:	75 0e                	jne    c0018c6c <FAT::openDir(char const*, void**)+0x28>
c0018c5e:	66 90                	xchg   ax,ax
c0018c60:	b8 04 00 00 00       	mov    eax,0x4
c0018c65:	e9 82 00 00 00       	jmp    c0018cec <FAT::openDir(char const*, void**)+0xa8>
c0018c6a:	66 90                	xchg   ax,ax
c0018c6c:	83 ec 08             	sub    esp,0x8
c0018c6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c7a:	50                   	push   eax
c0018c7b:	e8 d0 79 fe ff       	call   c0000650 <strcpy>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	83 ec 08             	sub    esp,0x8
c0018c86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c8a:	50                   	push   eax
c0018c8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c92:	e8 f9 fd ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	83 ec 0c             	sub    esp,0xc
c0018c9d:	6a 30                	push   0x30
c0018c9f:	e8 13 ee fe ff       	call   c0007ab7 <malloc>
c0018ca4:	83 c4 10             	add    esp,0x10
c0018ca7:	89 c2                	mov    edx,eax
c0018ca9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cb0:	89 10                	mov    DWORD PTR [eax],edx
c0018cb2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cbb:	83 ec 08             	sub    esp,0x8
c0018cbe:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018cc2:	52                   	push   edx
c0018cc3:	50                   	push   eax
c0018cc4:	e8 66 b9 fe ff       	call   c000462f <f_opendir>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018cd3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018cdb:	74 07                	je     c0018ce4 <FAT::openDir(char const*, void**)+0xa0>
c0018cdd:	b8 01 00 00 00       	mov    eax,0x1
c0018ce2:	eb 08                	jmp    c0018cec <FAT::openDir(char const*, void**)+0xa8>
c0018ce4:	b8 00 00 00 00       	mov    eax,0x0
c0018ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cec:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018cf2:	c3                   	ret    
c0018cf3:	90                   	nop

c0018cf4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018cf4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018cfa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d02:	75 0c                	jne    c0018d10 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d04:	b8 04 00 00 00       	mov    eax,0x4
c0018d09:	e9 d6 00 00 00       	jmp    c0018de4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d0e:	66 90                	xchg   ax,ax
c0018d10:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d18:	75 0a                	jne    c0018d24 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d1a:	b8 04 00 00 00       	mov    eax,0x4
c0018d1f:	e9 c0 00 00 00       	jmp    c0018de4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d24:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d2c:	75 0a                	jne    c0018d38 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d2e:	b8 04 00 00 00       	mov    eax,0x4
c0018d33:	e9 ac 00 00 00       	jmp    c0018de4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d38:	83 ec 08             	sub    esp,0x8
c0018d3b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d42:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018d49:	50                   	push   eax
c0018d4a:	e8 01 79 fe ff       	call   c0000650 <strcpy>
c0018d4f:	83 c4 10             	add    esp,0x10
c0018d52:	83 ec 08             	sub    esp,0x8
c0018d55:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018d5c:	50                   	push   eax
c0018d5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d64:	e8 27 fd ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	83 ec 08             	sub    esp,0x8
c0018d6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d73:	50                   	push   eax
c0018d74:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018d7b:	50                   	push   eax
c0018d7c:	e8 2d ba fe ff       	call   c00047ae <f_stat>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018d8b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018d92:	85 c0                	test   eax,eax
c0018d94:	74 0a                	je     c0018da0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018d96:	83 f8 04             	cmp    eax,0x4
c0018d99:	74 39                	je     c0018dd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018d9b:	eb 3f                	jmp    c0018ddc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018da0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018da4:	0f b6 c0             	movzx  eax,al
c0018da7:	83 e0 10             	and    eax,0x10
c0018daa:	0f 95 c2             	setne  dl
c0018dad:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018db4:	88 10                	mov    BYTE PTR [eax],dl
c0018db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dba:	ba 00 00 00 00       	mov    edx,0x0
c0018dbf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018dc6:	89 01                	mov    DWORD PTR [ecx],eax
c0018dc8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018dcb:	b8 00 00 00 00       	mov    eax,0x0
c0018dd0:	eb 12                	jmp    c0018de4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dd2:	66 90                	xchg   ax,ax
c0018dd4:	b8 02 00 00 00       	mov    eax,0x2
c0018dd9:	eb 09                	jmp    c0018de4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018ddb:	90                   	nop
c0018ddc:	b8 01 00 00 00       	mov    eax,0x1
c0018de1:	8d 76 00             	lea    esi,[esi+0x0]
c0018de4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018dea:	c3                   	ret    
c0018deb:	90                   	nop

c0018dec <FAT::unlink(char const*)>:
c0018dec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018df2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018dfa:	75 08                	jne    c0018e04 <FAT::unlink(char const*)+0x18>
c0018dfc:	b8 04 00 00 00       	mov    eax,0x4
c0018e01:	eb 61                	jmp    c0018e64 <FAT::unlink(char const*)+0x78>
c0018e03:	90                   	nop
c0018e04:	83 ec 08             	sub    esp,0x8
c0018e07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e12:	50                   	push   eax
c0018e13:	e8 38 78 fe ff       	call   c0000650 <strcpy>
c0018e18:	83 c4 10             	add    esp,0x10
c0018e1b:	83 ec 08             	sub    esp,0x8
c0018e1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e22:	50                   	push   eax
c0018e23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e2a:	e8 61 fc ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c0018e2f:	83 c4 10             	add    esp,0x10
c0018e32:	83 ec 0c             	sub    esp,0xc
c0018e35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e39:	50                   	push   eax
c0018e3a:	e8 e1 bb fe ff       	call   c0004a20 <f_unlink>
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018e49:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018e50:	85 c0                	test   eax,eax
c0018e52:	75 08                	jne    c0018e5c <FAT::unlink(char const*)+0x70>
c0018e54:	b8 00 00 00 00       	mov    eax,0x0
c0018e59:	eb 09                	jmp    c0018e64 <FAT::unlink(char const*)+0x78>
c0018e5b:	90                   	nop
c0018e5c:	b8 01 00 00 00       	mov    eax,0x1
c0018e61:	8d 76 00             	lea    esi,[esi+0x0]
c0018e64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018e6a:	c3                   	ret    
c0018e6b:	90                   	nop

c0018e6c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018e6c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018e72:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018e79:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018e80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e84:	88 d0                	mov    al,dl
c0018e86:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018e8a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018e92:	75 0c                	jne    c0018ea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018e94:	b8 04 00 00 00       	mov    eax,0x4
c0018e99:	e9 7e 01 00 00       	jmp    c001901c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018e9e:	66 90                	xchg   ax,ax
c0018ea0:	83 ec 08             	sub    esp,0x8
c0018ea3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018eaa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018eae:	50                   	push   eax
c0018eaf:	e8 9c 77 fe ff       	call   c0000650 <strcpy>
c0018eb4:	83 c4 10             	add    esp,0x10
c0018eb7:	83 ec 08             	sub    esp,0x8
c0018eba:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018ebe:	50                   	push   eax
c0018ebf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018ec6:	e8 c5 fb ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c0018ecb:	83 c4 10             	add    esp,0x10
c0018ece:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018ed6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018ede:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ee3:	83 e0 01             	and    eax,0x1
c0018ee6:	74 14                	je     c0018efc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018ee8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018eef:	83 c8 01             	or     eax,0x1
c0018ef2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0018efc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f01:	83 e0 02             	and    eax,0x2
c0018f04:	74 12                	je     c0018f18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018f06:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f0d:	83 c8 20             	or     eax,0x20
c0018f10:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f17:	90                   	nop
c0018f18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f1d:	83 e0 04             	and    eax,0x4
c0018f20:	74 12                	je     c0018f34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018f22:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f29:	83 c8 04             	or     eax,0x4
c0018f2c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f33:	90                   	nop
c0018f34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f39:	83 e0 08             	and    eax,0x8
c0018f3c:	74 12                	je     c0018f50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018f3e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f45:	83 c8 02             	or     eax,0x2
c0018f48:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f4f:	90                   	nop
c0018f50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f55:	83 e0 01             	and    eax,0x1
c0018f58:	74 12                	je     c0018f6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0018f5a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f61:	83 c8 01             	or     eax,0x1
c0018f64:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f6b:	90                   	nop
c0018f6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f71:	83 e0 02             	and    eax,0x2
c0018f74:	74 12                	je     c0018f88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0018f76:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f7d:	83 c8 20             	or     eax,0x20
c0018f80:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f87:	90                   	nop
c0018f88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f8d:	83 e0 04             	and    eax,0x4
c0018f90:	74 12                	je     c0018fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0018f92:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f99:	83 c8 04             	or     eax,0x4
c0018f9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fa3:	90                   	nop
c0018fa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fa9:	83 e0 08             	and    eax,0x8
c0018fac:	74 12                	je     c0018fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0018fae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fb5:	83 c8 02             	or     eax,0x2
c0018fb8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fbf:	90                   	nop
c0018fc0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0018fc7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fce:	09 d0                	or     eax,edx
c0018fd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fd7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0018fdf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0018fe7:	83 ec 04             	sub    esp,0x4
c0018fea:	52                   	push   edx
c0018feb:	50                   	push   eax
c0018fec:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ff0:	50                   	push   eax
c0018ff1:	e8 9d be fe ff       	call   c0004e93 <f_chmod>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019000:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019007:	85 c0                	test   eax,eax
c0019009:	75 09                	jne    c0019014 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001900b:	b8 00 00 00 00       	mov    eax,0x0
c0019010:	eb 0a                	jmp    c001901c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019012:	66 90                	xchg   ax,ax
c0019014:	b8 01 00 00 00       	mov    eax,0x1
c0019019:	8d 76 00             	lea    esi,[esi+0x0]
c001901c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019022:	c3                   	ret    
c0019023:	90                   	nop

c0019024 <FAT::rename(char const*, char const*)>:
c0019024:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001902a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019032:	74 0c                	je     c0019040 <FAT::rename(char const*, char const*)+0x1c>
c0019034:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001903c:	75 0e                	jne    c001904c <FAT::rename(char const*, char const*)+0x28>
c001903e:	66 90                	xchg   ax,ax
c0019040:	b8 04 00 00 00       	mov    eax,0x4
c0019045:	e9 9e 00 00 00       	jmp    c00190e8 <FAT::rename(char const*, char const*)+0xc4>
c001904a:	66 90                	xchg   ax,ax
c001904c:	83 ec 08             	sub    esp,0x8
c001904f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019056:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001905d:	50                   	push   eax
c001905e:	e8 ed 75 fe ff       	call   c0000650 <strcpy>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	83 ec 08             	sub    esp,0x8
c0019069:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019070:	50                   	push   eax
c0019071:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019078:	e8 13 fa ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	83 ec 08             	sub    esp,0x8
c0019083:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001908a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001908e:	50                   	push   eax
c001908f:	e8 bc 75 fe ff       	call   c0000650 <strcpy>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	83 ec 08             	sub    esp,0x8
c001909a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001909e:	50                   	push   eax
c001909f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190a6:	e8 e5 f9 ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	83 ec 08             	sub    esp,0x8
c00190b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190b5:	50                   	push   eax
c00190b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190bd:	50                   	push   eax
c00190be:	e8 18 bc fe ff       	call   c0004cdb <f_rename>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00190cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00190d4:	85 c0                	test   eax,eax
c00190d6:	75 08                	jne    c00190e0 <FAT::rename(char const*, char const*)+0xbc>
c00190d8:	b8 00 00 00 00       	mov    eax,0x0
c00190dd:	eb 09                	jmp    c00190e8 <FAT::rename(char const*, char const*)+0xc4>
c00190df:	90                   	nop
c00190e0:	b8 01 00 00 00       	mov    eax,0x1
c00190e5:	8d 76 00             	lea    esi,[esi+0x0]
c00190e8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00190ee:	c3                   	ret    
c00190ef:	90                   	nop

c00190f0 <FAT::mkdir(char const*)>:
c00190f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00190f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00190fe:	75 08                	jne    c0019108 <FAT::mkdir(char const*)+0x18>
c0019100:	b8 04 00 00 00       	mov    eax,0x4
c0019105:	eb 61                	jmp    c0019168 <FAT::mkdir(char const*)+0x78>
c0019107:	90                   	nop
c0019108:	83 ec 08             	sub    esp,0x8
c001910b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019112:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019116:	50                   	push   eax
c0019117:	e8 34 75 fe ff       	call   c0000650 <strcpy>
c001911c:	83 c4 10             	add    esp,0x10
c001911f:	83 ec 08             	sub    esp,0x8
c0019122:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019126:	50                   	push   eax
c0019127:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001912e:	e8 5d f9 ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	83 ec 0c             	sub    esp,0xc
c0019139:	8d 44 24 18          	lea    eax,[esp+0x18]
c001913d:	50                   	push   eax
c001913e:	e8 fd b9 fe ff       	call   c0004b40 <f_mkdir>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001914d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019154:	85 c0                	test   eax,eax
c0019156:	75 08                	jne    c0019160 <FAT::mkdir(char const*)+0x70>
c0019158:	b8 00 00 00 00       	mov    eax,0x0
c001915d:	eb 09                	jmp    c0019168 <FAT::mkdir(char const*)+0x78>
c001915f:	90                   	nop
c0019160:	b8 01 00 00 00       	mov    eax,0x1
c0019165:	8d 76 00             	lea    esi,[esi+0x0]
c0019168:	81 c4 1c 01 00 00    	add    esp,0x11c
c001916e:	c3                   	ret    
c001916f:	90                   	nop

c0019170 <FAT::exists(char const*)>:
c0019170:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019176:	83 ec 08             	sub    esp,0x8
c0019179:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019180:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019184:	50                   	push   eax
c0019185:	e8 c6 74 fe ff       	call   c0000650 <strcpy>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	83 ec 08             	sub    esp,0x8
c0019190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019194:	50                   	push   eax
c0019195:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001919c:	e8 ef f8 ff ff       	call   c0018a90 <FAT::fixFilepath(char*)>
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	83 ec 08             	sub    esp,0x8
c00191a7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00191ae:	50                   	push   eax
c00191af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191b3:	50                   	push   eax
c00191b4:	e8 f5 b5 fe ff       	call   c00047ae <f_stat>
c00191b9:	83 c4 10             	add    esp,0x10
c00191bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00191c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00191ca:	85 c0                	test   eax,eax
c00191cc:	75 06                	jne    c00191d4 <FAT::exists(char const*)+0x64>
c00191ce:	b0 01                	mov    al,0x1
c00191d0:	eb 06                	jmp    c00191d8 <FAT::exists(char const*)+0x68>
c00191d2:	66 90                	xchg   ax,ax
c00191d4:	b0 00                	mov    al,0x0
c00191d6:	66 90                	xchg   ax,ax
c00191d8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00191de:	c3                   	ret    
c00191df:	90                   	nop

c00191e0 <isoReadDiscSectorHelper>:
c00191e0:	83 ec 2c             	sub    esp,0x2c
c00191e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00191e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191eb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00191f0:	83 e8 41             	sub    eax,0x41
c00191f3:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00191fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00191fe:	ba 00 00 00 00       	mov    edx,0x0
c0019203:	83 ec 0c             	sub    esp,0xc
c0019206:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001920a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001920e:	52                   	push   edx
c001920f:	50                   	push   eax
c0019210:	51                   	push   ecx
c0019211:	e8 74 3f ff ff       	call   c000d18a <LogicalDisk::read(unsigned long long, int, void*)>
c0019216:	83 c4 20             	add    esp,0x20
c0019219:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001921d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019222:	74 0c                	je     c0019230 <isoReadDiscSectorHelper+0x50>
c0019224:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019228:	c1 e0 0b             	shl    eax,0xb
c001922b:	eb 0b                	jmp    c0019238 <isoReadDiscSectorHelper+0x58>
c001922d:	8d 76 00             	lea    esi,[esi+0x0]
c0019230:	b8 00 00 00 00       	mov    eax,0x0
c0019235:	8d 76 00             	lea    esi,[esi+0x0]
c0019238:	83 c4 2c             	add    esp,0x2c
c001923b:	c3                   	ret    

c001923c <iso_kprintf>:
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	83 ec 08             	sub    esp,0x8
c0019242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019246:	68 d9 0f 02 c0       	push   0xc0020fd9
c001924b:	e8 ed 16 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0019250:	83 c4 10             	add    esp,0x10
c0019253:	90                   	nop
c0019254:	83 c4 0c             	add    esp,0xc
c0019257:	c3                   	ret    

c0019258 <iso_kprintfd>:
c0019258:	83 ec 0c             	sub    esp,0xc
c001925b:	83 ec 08             	sub    esp,0x8
c001925e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019262:	68 f7 ff 01 c0       	push   0xc001fff7
c0019267:	e8 d1 16 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	90                   	nop
c0019270:	83 c4 0c             	add    esp,0xc
c0019273:	c3                   	ret    

c0019274 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019274:	b8 08 00 00 00       	mov    eax,0x8
c0019279:	c3                   	ret    

c001927a <ISO9660::getName()>:
c001927a:	b8 2c 16 02 c0       	mov    eax,0xc002162c
c001927f:	c3                   	ret    

c0019280 <ISO9660::closeDir(void*)>:
c0019280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019284:	8b 00                	mov    eax,DWORD PTR [eax]
c0019286:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019289:	90                   	nop

c001928a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001928a:	b8 01 00 00 00       	mov    eax,0x1
c001928f:	c3                   	ret    

c0019290 <ISO9660::unlink(char const*)>:
c0019290:	b8 01 00 00 00       	mov    eax,0x1
c0019295:	c3                   	ret    

c0019296 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019296:	b8 03 00 00 00       	mov    eax,0x3
c001929b:	c3                   	ret    

c001929c <ISO9660::rename(char const*, char const*)>:
c001929c:	b8 01 00 00 00       	mov    eax,0x1
c00192a1:	c3                   	ret    

c00192a2 <ISO9660::mkdir(char const*)>:
c00192a2:	b8 01 00 00 00       	mov    eax,0x1
c00192a7:	c3                   	ret    

c00192a8 <ISO9660::~ISO9660()>:
c00192a8:	83 ec 0c             	sub    esp,0xc
c00192ab:	ba 6c 17 02 c0       	mov    edx,0xc002176c
c00192b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192b4:	89 10                	mov    DWORD PTR [eax],edx
c00192b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192ba:	83 ec 0c             	sub    esp,0xc
c00192bd:	50                   	push   eax
c00192be:	e8 c1 19 ff ff       	call   c000ac84 <Filesystem::~Filesystem()>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	90                   	nop
c00192c7:	83 c4 0c             	add    esp,0xc
c00192ca:	c3                   	ret    
c00192cb:	90                   	nop

c00192cc <ISO9660::~ISO9660()>:
c00192cc:	83 ec 0c             	sub    esp,0xc
c00192cf:	83 ec 0c             	sub    esp,0xc
c00192d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192d6:	e8 cd ff ff ff       	call   c00192a8 <ISO9660::~ISO9660()>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	83 ec 08             	sub    esp,0x8
c00192e1:	6a 08                	push   0x8
c00192e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192e7:	e8 53 15 ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c00192ec:	83 c4 10             	add    esp,0x10
c00192ef:	83 c4 0c             	add    esp,0xc
c00192f2:	c3                   	ret    
c00192f3:	90                   	nop

c00192f4 <ISO9660::exists(char const*)>:
c00192f4:	83 ec 18             	sub    esp,0x18
c00192f7:	68 47 16 02 c0       	push   0xc0021647
c00192fc:	e8 c0 74 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019301:	31 c0                	xor    eax,eax
c0019303:	83 c4 1c             	add    esp,0x1c
c0019306:	c3                   	ret    
c0019307:	90                   	nop

c0019308 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019308:	56                   	push   esi
c0019309:	53                   	push   ebx
c001930a:	53                   	push   ebx
c001930b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001930f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019313:	85 db                	test   ebx,ebx
c0019315:	0f 84 ca 00 00 00    	je     c00193e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001931b:	85 f6                	test   esi,esi
c001931d:	0f 84 c2 00 00 00    	je     c00193e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019323:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019328:	b8 03 00 00 00       	mov    eax,0x3
c001932d:	0f 85 b7 00 00 00    	jne    c00193ea <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019333:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019335:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001933b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019342:	74 1b                	je     c001935f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019344:	85 c0                	test   eax,eax
c0019346:	74 10                	je     c0019358 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019348:	83 ec 0c             	sub    esp,0xc
c001934b:	68 65 16 02 c0       	push   0xc0021665
c0019350:	e8 6c 74 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	8a 03                	mov    al,BYTE PTR [ebx]
c001935a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001935f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019362:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019369:	85 c0                	test   eax,eax
c001936b:	74 09                	je     c0019376 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001936d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019374:	74 48                	je     c00193be <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019376:	83 ec 0c             	sub    esp,0xc
c0019379:	68 75 16 02 c0       	push   0xc0021675
c001937e:	e8 ba 15 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0019383:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019386:	83 c4 10             	add    esp,0x10
c0019389:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019390:	85 c0                	test   eax,eax
c0019392:	74 17                	je     c00193ab <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019394:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	68 95 16 02 c0       	push   0xc0021695
c00193a3:	e8 95 15 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193b2:	83 ec 0c             	sub    esp,0xc
c00193b5:	50                   	push   eax
c00193b6:	e8 ac d6 fe ff       	call   c0006a67 <init_percd>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	51                   	push   ecx
c00193bf:	83 c3 03             	add    ebx,0x3
c00193c2:	51                   	push   ecx
c00193c3:	6a 00                	push   0x0
c00193c5:	53                   	push   ebx
c00193c6:	e8 5f d1 fe ff       	call   c000652a <iso_open>
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	89 c2                	mov    edx,eax
c00193d0:	b8 01 00 00 00       	mov    eax,0x1
c00193d5:	83 fa ff             	cmp    edx,0xffffffff
c00193d8:	74 10                	je     c00193ea <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193da:	83 c2 32             	add    edx,0x32
c00193dd:	31 c0                	xor    eax,eax
c00193df:	01 d2                	add    edx,edx
c00193e1:	89 16                	mov    DWORD PTR [esi],edx
c00193e3:	eb 05                	jmp    c00193ea <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193e5:	b8 04 00 00 00       	mov    eax,0x4
c00193ea:	5a                   	pop    edx
c00193eb:	5b                   	pop    ebx
c00193ec:	5e                   	pop    esi
c00193ed:	c3                   	ret    

c00193ee <ISO9660::read(void*, unsigned long, void*, int*)>:
c00193ee:	53                   	push   ebx
c00193ef:	83 ec 08             	sub    esp,0x8
c00193f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193fa:	85 c0                	test   eax,eax
c00193fc:	74 2d                	je     c001942b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00193fe:	85 db                	test   ebx,ebx
c0019400:	74 29                	je     c001942b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019402:	52                   	push   edx
c0019403:	b9 02 00 00 00       	mov    ecx,0x2
c0019408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001940c:	99                   	cdq    
c001940d:	f7 f9                	idiv   ecx
c001940f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019413:	83 e8 32             	sub    eax,0x32
c0019416:	50                   	push   eax
c0019417:	e8 b6 d1 fe ff       	call   c00065d2 <iso_read>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	89 03                	mov    DWORD PTR [ebx],eax
c0019421:	09 d0                	or     eax,edx
c0019423:	0f 94 c0             	sete   al
c0019426:	0f b6 c0             	movzx  eax,al
c0019429:	eb 05                	jmp    c0019430 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001942b:	b8 04 00 00 00       	mov    eax,0x4
c0019430:	83 c4 08             	add    esp,0x8
c0019433:	5b                   	pop    ebx
c0019434:	c3                   	ret    
c0019435:	90                   	nop

c0019436 <ISO9660::seek(void*, unsigned long long)>:
c0019436:	57                   	push   edi
c0019437:	b8 04 00 00 00       	mov    eax,0x4
c001943c:	56                   	push   esi
c001943d:	51                   	push   ecx
c001943e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019442:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019446:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001944a:	85 d2                	test   edx,edx
c001944c:	74 26                	je     c0019474 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001944e:	89 d0                	mov    eax,edx
c0019450:	b9 02 00 00 00       	mov    ecx,0x2
c0019455:	6a 00                	push   0x0
c0019457:	99                   	cdq    
c0019458:	f7 f9                	idiv   ecx
c001945a:	57                   	push   edi
c001945b:	56                   	push   esi
c001945c:	83 e8 32             	sub    eax,0x32
c001945f:	50                   	push   eax
c0019460:	e8 83 d2 fe ff       	call   c00066e8 <iso_seek>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	31 f0                	xor    eax,esi
c001946a:	31 fa                	xor    edx,edi
c001946c:	09 d0                	or     eax,edx
c001946e:	0f 95 c0             	setne  al
c0019471:	0f b6 c0             	movzx  eax,al
c0019474:	5a                   	pop    edx
c0019475:	5e                   	pop    esi
c0019476:	5f                   	pop    edi
c0019477:	c3                   	ret    

c0019478 <ISO9660::tell(void*, unsigned long long*)>:
c0019478:	53                   	push   ebx
c0019479:	83 ec 08             	sub    esp,0x8
c001947c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019480:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019484:	85 c0                	test   eax,eax
c0019486:	74 24                	je     c00194ac <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019488:	85 db                	test   ebx,ebx
c001948a:	74 20                	je     c00194ac <ISO9660::tell(void*, unsigned long long*)+0x34>
c001948c:	b9 02 00 00 00       	mov    ecx,0x2
c0019491:	99                   	cdq    
c0019492:	f7 f9                	idiv   ecx
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	83 e8 32             	sub    eax,0x32
c001949a:	50                   	push   eax
c001949b:	e8 cc d2 fe ff       	call   c000676c <iso_tell>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	89 03                	mov    DWORD PTR [ebx],eax
c00194a5:	31 c0                	xor    eax,eax
c00194a7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00194aa:	eb 05                	jmp    c00194b1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00194ac:	b8 04 00 00 00       	mov    eax,0x4
c00194b1:	83 c4 08             	add    esp,0x8
c00194b4:	5b                   	pop    ebx
c00194b5:	c3                   	ret    

c00194b6 <ISO9660::stat(void*, unsigned long long*)>:
c00194b6:	56                   	push   esi
c00194b7:	53                   	push   ebx
c00194b8:	83 ec 10             	sub    esp,0x10
c00194bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194bf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00194c3:	68 b9 16 02 c0       	push   0xc00216b9
c00194c8:	e8 70 14 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	85 db                	test   ebx,ebx
c00194d2:	74 2a                	je     c00194fe <ISO9660::stat(void*, unsigned long long*)+0x48>
c00194d4:	85 f6                	test   esi,esi
c00194d6:	74 26                	je     c00194fe <ISO9660::stat(void*, unsigned long long*)+0x48>
c00194d8:	89 d8                	mov    eax,ebx
c00194da:	b9 02 00 00 00       	mov    ecx,0x2
c00194df:	99                   	cdq    
c00194e0:	83 ec 0c             	sub    esp,0xc
c00194e3:	f7 f9                	idiv   ecx
c00194e5:	83 e8 32             	sub    eax,0x32
c00194e8:	50                   	push   eax
c00194e9:	e8 af d2 fe ff       	call   c000679d <iso_total>
c00194ee:	83 c4 10             	add    esp,0x10
c00194f1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00194f8:	89 06                	mov    DWORD PTR [esi],eax
c00194fa:	31 c0                	xor    eax,eax
c00194fc:	eb 05                	jmp    c0019503 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00194fe:	b8 04 00 00 00       	mov    eax,0x4
c0019503:	5a                   	pop    edx
c0019504:	5b                   	pop    ebx
c0019505:	5e                   	pop    esi
c0019506:	c3                   	ret    
c0019507:	90                   	nop

c0019508 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019508:	55                   	push   ebp
c0019509:	57                   	push   edi
c001950a:	56                   	push   esi
c001950b:	53                   	push   ebx
c001950c:	83 ec 18             	sub    esp,0x18
c001950f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019513:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019517:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001951b:	68 c1 16 02 c0       	push   0xc00216c1
c0019520:	e8 18 14 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	85 ff                	test   edi,edi
c001952a:	0f 94 c0             	sete   al
c001952d:	85 f6                	test   esi,esi
c001952f:	0f 94 c2             	sete   dl
c0019532:	09 d0                	or     eax,edx
c0019534:	a8 01                	test   al,0x1
c0019536:	0f 85 dd 00 00 00    	jne    c0019619 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001953c:	85 db                	test   ebx,ebx
c001953e:	0f 84 d5 00 00 00    	je     c0019619 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019544:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019547:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001954d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019554:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001955b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001955d:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019563:	74 1b                	je     c0019580 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019565:	85 c0                	test   eax,eax
c0019567:	74 10                	je     c0019579 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019569:	83 ec 0c             	sub    esp,0xc
c001956c:	68 65 16 02 c0       	push   0xc0021665
c0019571:	e8 4b 72 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019576:	83 c4 10             	add    esp,0x10
c0019579:	8a 03                	mov    al,BYTE PTR [ebx]
c001957b:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019580:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019583:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001958a:	85 c0                	test   eax,eax
c001958c:	74 09                	je     c0019597 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001958e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019595:	74 51                	je     c00195e8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019597:	83 ec 0c             	sub    esp,0xc
c001959a:	68 c9 16 02 c0       	push   0xc00216c9
c001959f:	e8 99 13 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00195a4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195a7:	83 c4 10             	add    esp,0x10
c00195aa:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00195b2:	74 21                	je     c00195d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	68 e9 16 02 c0       	push   0xc00216e9
c00195bc:	e8 7c 13 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c00195c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195ce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00195d5:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195dc:	83 ec 0c             	sub    esp,0xc
c00195df:	50                   	push   eax
c00195e0:	e8 82 d4 fe ff       	call   c0006a67 <init_percd>
c00195e5:	83 c4 10             	add    esp,0x10
c00195e8:	52                   	push   edx
c00195e9:	83 c3 03             	add    ebx,0x3
c00195ec:	52                   	push   edx
c00195ed:	6a 00                	push   0x0
c00195ef:	53                   	push   ebx
c00195f0:	e8 35 cf fe ff       	call   c000652a <iso_open>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	83 f8 ff             	cmp    eax,0xffffffff
c00195fb:	89 c5                	mov    ebp,eax
c00195fd:	75 21                	jne    c0019620 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00195ff:	50                   	push   eax
c0019600:	50                   	push   eax
c0019601:	6a 01                	push   0x1
c0019603:	53                   	push   ebx
c0019604:	e8 21 cf fe ff       	call   c000652a <iso_open>
c0019609:	83 c4 10             	add    esp,0x10
c001960c:	ba 02 00 00 00       	mov    edx,0x2
c0019611:	40                   	inc    eax
c0019612:	74 2b                	je     c001963f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019614:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019617:	eb 24                	jmp    c001963d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019619:	ba 04 00 00 00       	mov    edx,0x4
c001961e:	eb 1f                	jmp    c001963f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	50                   	push   eax
c0019624:	e8 74 d1 fe ff       	call   c000679d <iso_total>
c0019629:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019630:	89 07                	mov    DWORD PTR [edi],eax
c0019632:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019635:	e8 7a cf fe ff       	call   c00065b4 <iso_close>
c001963a:	83 c4 10             	add    esp,0x10
c001963d:	31 d2                	xor    edx,edx
c001963f:	83 c4 0c             	add    esp,0xc
c0019642:	89 d0                	mov    eax,edx
c0019644:	5b                   	pop    ebx
c0019645:	5e                   	pop    esi
c0019646:	5f                   	pop    edi
c0019647:	5d                   	pop    ebp
c0019648:	c3                   	ret    
c0019649:	90                   	nop

c001964a <ISO9660::close(void*)>:
c001964a:	83 ec 0c             	sub    esp,0xc
c001964d:	b8 04 00 00 00       	mov    eax,0x4
c0019652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019656:	85 d2                	test   edx,edx
c0019658:	74 1b                	je     c0019675 <ISO9660::close(void*)+0x2b>
c001965a:	89 d0                	mov    eax,edx
c001965c:	b9 02 00 00 00       	mov    ecx,0x2
c0019661:	99                   	cdq    
c0019662:	83 ec 0c             	sub    esp,0xc
c0019665:	f7 f9                	idiv   ecx
c0019667:	83 e8 32             	sub    eax,0x32
c001966a:	50                   	push   eax
c001966b:	e8 44 cf fe ff       	call   c00065b4 <iso_close>
c0019670:	83 c4 10             	add    esp,0x10
c0019673:	31 c0                	xor    eax,eax
c0019675:	83 c4 0c             	add    esp,0xc
c0019678:	c3                   	ret    
c0019679:	90                   	nop

c001967a <ISO9660::openDir(char const*, void**)>:
c001967a:	56                   	push   esi
c001967b:	53                   	push   ebx
c001967c:	50                   	push   eax
c001967d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019681:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019685:	85 db                	test   ebx,ebx
c0019687:	0f 84 bd 00 00 00    	je     c001974a <ISO9660::openDir(char const*, void**)+0xd0>
c001968d:	85 f6                	test   esi,esi
c001968f:	0f 84 b5 00 00 00    	je     c001974a <ISO9660::openDir(char const*, void**)+0xd0>
c0019695:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019697:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c001969d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196a4:	74 1b                	je     c00196c1 <ISO9660::openDir(char const*, void**)+0x47>
c00196a6:	85 c0                	test   eax,eax
c00196a8:	74 10                	je     c00196ba <ISO9660::openDir(char const*, void**)+0x40>
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	68 65 16 02 c0       	push   0xc0021665
c00196b2:	e8 0a 71 ff ff       	call   c00107c1 <KePanic(char const*)>
c00196b7:	83 c4 10             	add    esp,0x10
c00196ba:	8a 03                	mov    al,BYTE PTR [ebx]
c00196bc:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00196c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196c4:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196cb:	85 c0                	test   eax,eax
c00196cd:	74 10                	je     c00196df <ISO9660::openDir(char const*, void**)+0x65>
c00196cf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00196d6:	74 1a                	je     c00196f2 <ISO9660::openDir(char const*, void**)+0x78>
c00196d8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00196df:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196e6:	83 ec 0c             	sub    esp,0xc
c00196e9:	50                   	push   eax
c00196ea:	e8 78 d3 fe ff       	call   c0006a67 <init_percd>
c00196ef:	83 c4 10             	add    esp,0x10
c00196f2:	50                   	push   eax
c00196f3:	83 c3 03             	add    ebx,0x3
c00196f6:	50                   	push   eax
c00196f7:	6a 01                	push   0x1
c00196f9:	53                   	push   ebx
c00196fa:	e8 2b ce fe ff       	call   c000652a <iso_open>
c00196ff:	83 c4 10             	add    esp,0x10
c0019702:	83 f8 ff             	cmp    eax,0xffffffff
c0019705:	89 c3                	mov    ebx,eax
c0019707:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001970c:	75 1c                	jne    c001972a <ISO9660::openDir(char const*, void**)+0xb0>
c001970e:	53                   	push   ebx
c001970f:	53                   	push   ebx
c0019710:	68 0d 17 02 c0       	push   0xc002170d
c0019715:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001971b:	e8 62 f3 fe ff       	call   c0008a82 <VgaText::puts(char const*)>
c0019720:	83 c4 10             	add    esp,0x10
c0019723:	b8 01 00 00 00       	mov    eax,0x1
c0019728:	eb 25                	jmp    c001974f <ISO9660::openDir(char const*, void**)+0xd5>
c001972a:	51                   	push   ecx
c001972b:	01 db                	add    ebx,ebx
c001972d:	51                   	push   ecx
c001972e:	83 c3 65             	add    ebx,0x65
c0019731:	68 20 17 02 c0       	push   0xc0021720
c0019736:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001973c:	e8 41 f3 fe ff       	call   c0008a82 <VgaText::puts(char const*)>
c0019741:	83 c4 10             	add    esp,0x10
c0019744:	31 c0                	xor    eax,eax
c0019746:	89 1e                	mov    DWORD PTR [esi],ebx
c0019748:	eb 05                	jmp    c001974f <ISO9660::openDir(char const*, void**)+0xd5>
c001974a:	b8 04 00 00 00       	mov    eax,0x4
c001974f:	5a                   	pop    edx
c0019750:	5b                   	pop    ebx
c0019751:	5e                   	pop    esi
c0019752:	c3                   	ret    
c0019753:	90                   	nop

c0019754 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019754:	55                   	push   ebp
c0019755:	57                   	push   edi
c0019756:	56                   	push   esi
c0019757:	53                   	push   ebx
c0019758:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001975e:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019765:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001976c:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019773:	85 db                	test   ebx,ebx
c0019775:	0f 84 e4 00 00 00    	je     c001985f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001977b:	85 ed                	test   ebp,ebp
c001977d:	0f 84 dc 00 00 00    	je     c001985f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019783:	83 ec 0c             	sub    esp,0xc
c0019786:	68 33 17 02 c0       	push   0xc0021733
c001978b:	e8 ad 11 ff ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c0019790:	89 d8                	mov    eax,ebx
c0019792:	b9 02 00 00 00       	mov    ecx,0x2
c0019797:	99                   	cdq    
c0019798:	f7 f9                	idiv   ecx
c001979a:	83 e8 32             	sub    eax,0x32
c001979d:	89 04 24             	mov    DWORD PTR [esp],eax
c00197a0:	e8 4a d0 fe ff       	call   c00067ef <iso_readdir>
c00197a5:	83 c4 10             	add    esp,0x10
c00197a8:	85 c0                	test   eax,eax
c00197aa:	89 c3                	mov    ebx,eax
c00197ac:	75 38                	jne    c00197e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00197ae:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197b3:	53                   	push   ebx
c00197b4:	53                   	push   ebx
c00197b5:	68 3e 17 02 c0       	push   0xc002173e
c00197ba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197c0:	e8 bd f2 fe ff       	call   c0008a82 <VgaText::puts(char const*)>
c00197c5:	83 c4 0c             	add    esp,0xc
c00197c8:	68 10 01 00 00       	push   0x110
c00197cd:	6a 00                	push   0x0
c00197cf:	57                   	push   edi
c00197d0:	e8 1b 6d fe ff       	call   c00004f0 <memset>
c00197d5:	83 c4 10             	add    esp,0x10
c00197d8:	b8 01 00 00 00       	mov    eax,0x1
c00197dd:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00197e4:	eb 7e                	jmp    c0019864 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00197e6:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00197ec:	8d 70 08             	lea    esi,[eax+0x8]
c00197ef:	83 ec 0c             	sub    esp,0xc
c00197f2:	56                   	push   esi
c00197f3:	e8 88 6d fe ff       	call   c0000580 <strlen>
c00197f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019800:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001980b:	75 0a                	jne    c0019817 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001980d:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019810:	b8 02 00 00 00       	mov    eax,0x2
c0019815:	74 05                	je     c001981c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019817:	b8 01 00 00 00       	mov    eax,0x1
c001981c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019820:	50                   	push   eax
c0019821:	50                   	push   eax
c0019822:	56                   	push   esi
c0019823:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019827:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001982b:	50                   	push   eax
c001982c:	e8 1f 6e fe ff       	call   c0000650 <strcpy>
c0019831:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019838:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001983a:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019841:	5a                   	pop    edx
c0019842:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019847:	59                   	pop    ecx
c0019848:	68 51 17 02 c0       	push   0xc0021751
c001984d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019853:	e8 2a f2 fe ff       	call   c0008a82 <VgaText::puts(char const*)>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	31 c0                	xor    eax,eax
c001985d:	eb 05                	jmp    c0019864 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001985f:	b8 04 00 00 00       	mov    eax,0x4
c0019864:	81 c4 1c 01 00 00    	add    esp,0x11c
c001986a:	5b                   	pop    ebx
c001986b:	5e                   	pop    esi
c001986c:	5f                   	pop    edi
c001986d:	5d                   	pop    ebp
c001986e:	c3                   	ret    

c001986f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001986f:	57                   	push   edi
c0019870:	56                   	push   esi
c0019871:	53                   	push   ebx
c0019872:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019876:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001987a:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019880:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019884:	0f be cb             	movsx  ecx,bl
c0019887:	75 0b                	jne    c0019894 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019889:	0f be 05 a4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222a4
c0019890:	39 c8                	cmp    eax,ecx
c0019892:	74 47                	je     c00198db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	31 d2                	xor    edx,edx
c0019899:	68 40 83 02 c0       	push   0xc0028340
c001989e:	6a 01                	push   0x1
c00198a0:	52                   	push   edx
c00198a1:	56                   	push   esi
c00198a2:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00198a9:	e8 dc 38 ff ff       	call   c000d18a <LogicalDisk::read(unsigned long long, int, void*)>
c00198ae:	83 c4 20             	add    esp,0x20
c00198b1:	85 c0                	test   eax,eax
c00198b3:	75 0e                	jne    c00198c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00198b5:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00198bb:	88 1d a4 22 02 c0    	mov    BYTE PTR ds:0xc00222a4,bl
c00198c1:	eb 18                	jmp    c00198db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198c3:	50                   	push   eax
c00198c4:	68 00 08 00 00       	push   0x800
c00198c9:	6a 00                	push   0x0
c00198cb:	57                   	push   edi
c00198cc:	e8 1f 6c fe ff       	call   c00004f0 <memset>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	b8 01 00 00 00       	mov    eax,0x1
c00198d9:	eb 0e                	jmp    c00198e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00198db:	be 40 83 02 c0       	mov    esi,0xc0028340
c00198e0:	b9 00 08 00 00       	mov    ecx,0x800
c00198e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198e7:	31 c0                	xor    eax,eax
c00198e9:	5b                   	pop    ebx
c00198ea:	5e                   	pop    esi
c00198eb:	5f                   	pop    edi
c00198ec:	c3                   	ret    
c00198ed:	90                   	nop

c00198ee <ISO9660::tryMount(LogicalDisk*, int)>:
c00198ee:	53                   	push   ebx
c00198ef:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00198f5:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c00198ff:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019906:	8d 58 41             	lea    ebx,[eax+0x41]
c0019909:	0f be db             	movsx  ebx,bl
c001990c:	53                   	push   ebx
c001990d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019911:	50                   	push   eax
c0019912:	6a 10                	push   0x10
c0019914:	e8 56 ff ff ff       	call   c001986f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019919:	83 c4 10             	add    esp,0x10
c001991c:	31 d2                	xor    edx,edx
c001991e:	85 c0                	test   eax,eax
c0019920:	75 33                	jne    c0019955 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019922:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019927:	75 2c                	jne    c0019955 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019929:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001992e:	75 25                	jne    c0019955 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019930:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019935:	75 1e                	jne    c0019955 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019937:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001993c:	75 17                	jne    c0019955 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001993e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019943:	75 10                	jne    c0019955 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019945:	83 ec 0c             	sub    esp,0xc
c0019948:	53                   	push   ebx
c0019949:	e8 19 d1 fe ff       	call   c0006a67 <init_percd>
c001994e:	83 c4 10             	add    esp,0x10
c0019951:	40                   	inc    eax
c0019952:	0f 95 c2             	setne  dl
c0019955:	81 c4 08 08 00 00    	add    esp,0x808
c001995b:	88 d0                	mov    al,dl
c001995d:	5b                   	pop    ebx
c001995e:	c3                   	ret    
c001995f:	90                   	nop

c0019960 <ISO9660::ISO9660()>:
c0019960:	83 ec 0c             	sub    esp,0xc
c0019963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019967:	83 ec 0c             	sub    esp,0xc
c001996a:	50                   	push   eax
c001996b:	e8 f0 12 ff ff       	call   c000ac60 <Filesystem::Filesystem()>
c0019970:	83 c4 10             	add    esp,0x10
c0019973:	ba 6c 17 02 c0       	mov    edx,0xc002176c
c0019978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001997c:	89 10                	mov    DWORD PTR [eax],edx
c001997e:	e8 f6 d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c0019983:	90                   	nop
c0019984:	83 c4 0c             	add    esp,0xc
c0019987:	c3                   	ret    

c0019988 <SoundCard::beginPlayback()>:
c0019988:	c7 44 24 04 cc 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217cc
c0019990:	e9 2c 6e ff ff       	jmp    c00107c1 <KePanic(char const*)>
c0019995:	90                   	nop

c0019996 <SoundCard::stopPlayback()>:
c0019996:	c7 44 24 04 cc 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217cc
c001999e:	e9 1e 6e ff ff       	jmp    c00107c1 <KePanic(char const*)>
c00199a3:	90                   	nop

c00199a4 <SoundCard::SoundCard(char const*)>:
c00199a4:	83 ec 1c             	sub    esp,0x1c
c00199a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ab:	83 ec 08             	sub    esp,0x8
c00199ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199b2:	50                   	push   eax
c00199b3:	e8 80 25 ff ff       	call   c000bf38 <Device::Device(char const*)>
c00199b8:	83 c4 10             	add    esp,0x10
c00199bb:	ba 18 18 02 c0       	mov    edx,0xc0021818
c00199c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199c4:	89 10                	mov    DWORD PTR [eax],edx
c00199c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ca:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00199d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199d5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00199df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199e3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00199ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199f1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00199fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ff:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a11:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a16:	7f 1a                	jg     c0019a32 <SoundCard::SoundCard(char const*)+0x8e>
c0019a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a20:	83 c2 54             	add    edx,0x54
c0019a23:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a2b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a30:	eb df                	jmp    c0019a11 <SoundCard::SoundCard(char const*)+0x6d>
c0019a32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a36:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a3d:	90                   	nop
c0019a3e:	83 c4 1c             	add    esp,0x1c
c0019a41:	c3                   	ret    

c0019a42 <SoundCard::~SoundCard()>:
c0019a42:	83 ec 0c             	sub    esp,0xc
c0019a45:	ba 18 18 02 c0       	mov    edx,0xc0021818
c0019a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4e:	89 10                	mov    DWORD PTR [eax],edx
c0019a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	50                   	push   eax
c0019a58:	e8 45 22 ff ff       	call   c000bca2 <Device::~Device()>
c0019a5d:	83 c4 10             	add    esp,0x10
c0019a60:	90                   	nop
c0019a61:	83 c4 0c             	add    esp,0xc
c0019a64:	c3                   	ret    
c0019a65:	90                   	nop

c0019a66 <SoundCard::~SoundCard()>:
c0019a66:	83 ec 0c             	sub    esp,0xc
c0019a69:	83 ec 0c             	sub    esp,0xc
c0019a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a70:	e8 cd ff ff ff       	call   c0019a42 <SoundCard::~SoundCard()>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	83 ec 08             	sub    esp,0x8
c0019a7b:	68 e8 01 00 00       	push   0x1e8
c0019a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a84:	e8 b6 0d ff ff       	call   c000a83f <operator delete(void*, unsigned long)>
c0019a89:	83 c4 10             	add    esp,0x10
c0019a8c:	83 c4 0c             	add    esp,0xc
c0019a8f:	c3                   	ret    

c0019a90 <SoundCard::configureRates(int, int, int)>:
c0019a90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a94:	31 c0                	xor    eax,eax
c0019a96:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019a9d:	75 20                	jne    c0019abf <SoundCard::configureRates(int, int, int)+0x2f>
c0019a9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aad:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019abd:	b0 01                	mov    al,0x1
c0019abf:	c3                   	ret    

c0019ac0 <SoundCard::getSamples16(int, short*)>:
c0019ac0:	55                   	push   ebp
c0019ac1:	57                   	push   edi
c0019ac2:	31 ff                	xor    edi,edi
c0019ac4:	56                   	push   esi
c0019ac5:	53                   	push   ebx
c0019ac6:	31 db                	xor    ebx,ebx
c0019ac8:	83 ec 10             	sub    esp,0x10
c0019acb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019acf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ad3:	8d 04 36             	lea    eax,[esi+esi*1]
c0019ad6:	50                   	push   eax
c0019ad7:	6a 00                	push   0x0
c0019ad9:	55                   	push   ebp
c0019ada:	e8 11 6a fe ff       	call   c00004f0 <memset>
c0019adf:	83 c4 10             	add    esp,0x10
c0019ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae6:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019aed:	85 c0                	test   eax,eax
c0019aef:	74 1a                	je     c0019b0b <SoundCard::getSamples16(int, short*)+0x4b>
c0019af1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019af5:	75 14                	jne    c0019b0b <SoundCard::getSamples16(int, short*)+0x4b>
c0019af7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019afb:	55                   	push   ebp
c0019afc:	56                   	push   esi
c0019afd:	50                   	push   eax
c0019afe:	e8 f1 02 00 00       	call   c0019df4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b03:	83 c4 10             	add    esp,0x10
c0019b06:	39 c3                	cmp    ebx,eax
c0019b08:	0f 4c d8             	cmovl  ebx,eax
c0019b0b:	47                   	inc    edi
c0019b0c:	83 ff 20             	cmp    edi,0x20
c0019b0f:	75 d1                	jne    c0019ae2 <SoundCard::getSamples16(int, short*)+0x22>
c0019b11:	83 c4 0c             	add    esp,0xc
c0019b14:	89 d8                	mov    eax,ebx
c0019b16:	5b                   	pop    ebx
c0019b17:	5e                   	pop    esi
c0019b18:	5f                   	pop    edi
c0019b19:	5d                   	pop    ebp
c0019b1a:	c3                   	ret    
c0019b1b:	90                   	nop

c0019b1c <SoundCard::getSamples32(int, int*)>:
c0019b1c:	55                   	push   ebp
c0019b1d:	57                   	push   edi
c0019b1e:	31 ff                	xor    edi,edi
c0019b20:	56                   	push   esi
c0019b21:	31 f6                	xor    esi,esi
c0019b23:	53                   	push   ebx
c0019b24:	83 ec 10             	sub    esp,0x10
c0019b27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b2b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b2f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b33:	c1 e0 02             	shl    eax,0x2
c0019b36:	50                   	push   eax
c0019b37:	6a 00                	push   0x0
c0019b39:	55                   	push   ebp
c0019b3a:	e8 b1 69 fe ff       	call   c00004f0 <memset>
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019b49:	85 c0                	test   eax,eax
c0019b4b:	74 1a                	je     c0019b67 <SoundCard::getSamples32(int, int*)+0x4b>
c0019b4d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b51:	75 14                	jne    c0019b67 <SoundCard::getSamples32(int, int*)+0x4b>
c0019b53:	53                   	push   ebx
c0019b54:	55                   	push   ebp
c0019b55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b59:	50                   	push   eax
c0019b5a:	e8 65 03 00 00       	call   c0019ec4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019b5f:	83 c4 10             	add    esp,0x10
c0019b62:	39 c6                	cmp    esi,eax
c0019b64:	0f 4c f0             	cmovl  esi,eax
c0019b67:	47                   	inc    edi
c0019b68:	83 ff 20             	cmp    edi,0x20
c0019b6b:	75 d5                	jne    c0019b42 <SoundCard::getSamples32(int, int*)+0x26>
c0019b6d:	85 f6                	test   esi,esi
c0019b6f:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019b76:	75 0f                	jne    c0019b87 <SoundCard::getSamples32(int, int*)+0x6b>
c0019b78:	85 c0                	test   eax,eax
c0019b7a:	74 1b                	je     c0019b97 <SoundCard::getSamples32(int, int*)+0x7b>
c0019b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b7e:	83 ec 0c             	sub    esp,0xc
c0019b81:	53                   	push   ebx
c0019b82:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019b85:	eb 0d                	jmp    c0019b94 <SoundCard::getSamples32(int, int*)+0x78>
c0019b87:	85 c0                	test   eax,eax
c0019b89:	75 0c                	jne    c0019b97 <SoundCard::getSamples32(int, int*)+0x7b>
c0019b8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b8d:	83 ec 0c             	sub    esp,0xc
c0019b90:	53                   	push   ebx
c0019b91:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	83 c4 0c             	add    esp,0xc
c0019b9a:	89 f0                	mov    eax,esi
c0019b9c:	5b                   	pop    ebx
c0019b9d:	5e                   	pop    esi
c0019b9e:	5f                   	pop    edi
c0019b9f:	5d                   	pop    ebp
c0019ba0:	c3                   	ret    
c0019ba1:	90                   	nop

c0019ba2 <SoundCard::addChannel(SoundPort*)>:
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	31 c0                	xor    eax,eax
c0019ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bab:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019bb3:	74 1b                	je     c0019bd0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019bb5:	40                   	inc    eax
c0019bb6:	83 f8 20             	cmp    eax,0x20
c0019bb9:	75 f0                	jne    c0019bab <SoundCard::addChannel(SoundPort*)+0x9>
c0019bbb:	83 ec 0c             	sub    esp,0xc
c0019bbe:	68 f1 17 02 c0       	push   0xc00217f1
c0019bc3:	e8 f9 6b ff ff       	call   c00107c1 <KePanic(char const*)>
c0019bc8:	83 c4 10             	add    esp,0x10
c0019bcb:	83 c8 ff             	or     eax,0xffffffff
c0019bce:	eb 0b                	jmp    c0019bdb <SoundCard::addChannel(SoundPort*)+0x39>
c0019bd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019bd4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019bdb:	83 c4 0c             	add    esp,0xc
c0019bde:	c3                   	ret    
c0019bdf:	90                   	nop

c0019be0 <SoundCard::removeChannel(int)>:
c0019be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019be8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019bf3:	c3                   	ret    

c0019bf4 <SoundPort::SoundPort(int, int, int, int)>:
c0019bf4:	83 ec 0c             	sub    esp,0xc
c0019bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c06:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c12:	89 10                	mov    DWORD PTR [eax],edx
c0019c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c27:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c2a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c2f:	75 13                	jne    c0019c44 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c37:	05 a0 0f 00 00       	add    eax,0xfa0
c0019c3c:	d1 e0                	shl    eax,1
c0019c3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019c42:	66 90                	xchg   ax,ax
c0019c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019c4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c53:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c5e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019c61:	c1 e0 02             	shl    eax,0x2
c0019c64:	83 ec 0c             	sub    esp,0xc
c0019c67:	50                   	push   eax
c0019c68:	e8 4a de fe ff       	call   c0007ab7 <malloc>
c0019c6d:	83 c4 10             	add    esp,0x10
c0019c70:	89 c2                	mov    edx,eax
c0019c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019c79:	90                   	nop
c0019c7a:	83 c4 0c             	add    esp,0xc
c0019c7d:	c3                   	ret    
c0019c7e:	66 90                	xchg   ax,ax

c0019c80 <SoundPort::~SoundPort()>:
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019c8a:	85 c0                	test   eax,eax
c0019c8c:	74 1e                	je     c0019cac <SoundPort::~SoundPort()+0x2c>
c0019c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019c95:	83 ec 0c             	sub    esp,0xc
c0019c98:	50                   	push   eax
c0019c99:	e8 29 de fe ff       	call   c0007ac7 <free>
c0019c9e:	83 c4 10             	add    esp,0x10
c0019ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019cac:	90                   	nop
c0019cad:	83 c4 0c             	add    esp,0xc
c0019cb0:	c3                   	ret    
c0019cb1:	90                   	nop
c0019cb2:	66 90                	xchg   ax,ax

c0019cb4 <SoundPort::unpause()>:
c0019cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019cbc:	c3                   	ret    
c0019cbd:	90                   	nop
c0019cbe:	66 90                	xchg   ax,ax

c0019cc0 <SoundPort::pause()>:
c0019cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019cc8:	c3                   	ret    
c0019cc9:	90                   	nop
c0019cca:	66 90                	xchg   ax,ax

c0019ccc <SoundPort::getBufferUsed()>:
c0019ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019cd3:	c3                   	ret    

c0019cd4 <SoundPort::getBufferSize()>:
c0019cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cdb:	c3                   	ret    

c0019cdc <SoundPort::buffer16(short*, int)>:
c0019cdc:	55                   	push   ebp
c0019cdd:	57                   	push   edi
c0019cde:	56                   	push   esi
c0019cdf:	53                   	push   ebx
c0019ce0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ce4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019ce8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019ceb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019cee:	74 68                	je     c0019d58 <SoundPort::buffer16(short*, int)+0x7c>
c0019cf0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019cf4:	85 c9                	test   ecx,ecx
c0019cf6:	7e 60                	jle    c0019d58 <SoundPort::buffer16(short*, int)+0x7c>
c0019cf8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019cfc:	8d 70 01             	lea    esi,[eax+0x1]
c0019cff:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d02:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d05:	c1 e1 0f             	shl    ecx,0xf
c0019d08:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d0b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d0e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d11:	74 4d                	je     c0019d60 <SoundPort::buffer16(short*, int)+0x84>
c0019d13:	31 f6                	xor    esi,esi
c0019d15:	eb 21                	jmp    c0019d38 <SoundPort::buffer16(short*, int)+0x5c>
c0019d17:	90                   	nop
c0019d18:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d1d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d20:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d23:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d26:	c1 e3 0f             	shl    ebx,0xf
c0019d29:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d32:	74 1c                	je     c0019d50 <SoundPort::buffer16(short*, int)+0x74>
c0019d34:	89 c6                	mov    esi,eax
c0019d36:	66 90                	xchg   ax,ax
c0019d38:	8d 46 01             	lea    eax,[esi+0x1]
c0019d3b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019d3f:	75 d7                	jne    c0019d18 <SoundPort::buffer16(short*, int)+0x3c>
c0019d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d45:	8d 76 00             	lea    esi,[esi+0x0]
c0019d48:	5b                   	pop    ebx
c0019d49:	5e                   	pop    esi
c0019d4a:	5f                   	pop    edi
c0019d4b:	5d                   	pop    ebp
c0019d4c:	c3                   	ret    
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	5b                   	pop    ebx
c0019d51:	8d 46 02             	lea    eax,[esi+0x2]
c0019d54:	5e                   	pop    esi
c0019d55:	5f                   	pop    edi
c0019d56:	5d                   	pop    ebp
c0019d57:	c3                   	ret    
c0019d58:	5b                   	pop    ebx
c0019d59:	31 c0                	xor    eax,eax
c0019d5b:	5e                   	pop    esi
c0019d5c:	5f                   	pop    edi
c0019d5d:	5d                   	pop    ebp
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop
c0019d60:	b8 01 00 00 00       	mov    eax,0x1
c0019d65:	eb e1                	jmp    c0019d48 <SoundPort::buffer16(short*, int)+0x6c>
c0019d67:	90                   	nop

c0019d68 <SoundPort::buffer32(int*, int)>:
c0019d68:	55                   	push   ebp
c0019d69:	57                   	push   edi
c0019d6a:	56                   	push   esi
c0019d6b:	53                   	push   ebx
c0019d6c:	83 ec 04             	sub    esp,0x4
c0019d6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d7b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d7e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d81:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d84:	74 5a                	je     c0019de0 <SoundPort::buffer32(int*, int)+0x78>
c0019d86:	85 c0                	test   eax,eax
c0019d88:	7e 56                	jle    c0019de0 <SoundPort::buffer32(int*, int)+0x78>
c0019d8a:	8d 71 01             	lea    esi,[ecx+0x1]
c0019d8d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d90:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d93:	8b 37                	mov    esi,DWORD PTR [edi]
c0019d95:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019d98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d9e:	74 4c                	je     c0019dec <SoundPort::buffer32(int*, int)+0x84>
c0019da0:	31 f6                	xor    esi,esi
c0019da2:	eb 1c                	jmp    c0019dc0 <SoundPort::buffer32(int*, int)+0x58>
c0019da4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019da7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019daa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019dad:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019db0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019db4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019db7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dba:	74 18                	je     c0019dd4 <SoundPort::buffer32(int*, int)+0x6c>
c0019dbc:	89 de                	mov    esi,ebx
c0019dbe:	66 90                	xchg   ax,ax
c0019dc0:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019dc3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019dc6:	75 dc                	jne    c0019da4 <SoundPort::buffer32(int*, int)+0x3c>
c0019dc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019dcb:	90                   	nop
c0019dcc:	83 c4 04             	add    esp,0x4
c0019dcf:	5b                   	pop    ebx
c0019dd0:	5e                   	pop    esi
c0019dd1:	5f                   	pop    edi
c0019dd2:	5d                   	pop    ebp
c0019dd3:	c3                   	ret    
c0019dd4:	8d 46 02             	lea    eax,[esi+0x2]
c0019dd7:	83 c4 04             	add    esp,0x4
c0019dda:	5b                   	pop    ebx
c0019ddb:	5e                   	pop    esi
c0019ddc:	5f                   	pop    edi
c0019ddd:	5d                   	pop    ebp
c0019dde:	c3                   	ret    
c0019ddf:	90                   	nop
c0019de0:	83 c4 04             	add    esp,0x4
c0019de3:	31 c0                	xor    eax,eax
c0019de5:	5b                   	pop    ebx
c0019de6:	5e                   	pop    esi
c0019de7:	5f                   	pop    edi
c0019de8:	5d                   	pop    ebp
c0019de9:	c3                   	ret    
c0019dea:	66 90                	xchg   ax,ax
c0019dec:	b8 01 00 00 00       	mov    eax,0x1
c0019df1:	eb d9                	jmp    c0019dcc <SoundPort::buffer32(int*, int)+0x64>
c0019df3:	90                   	nop

c0019df4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019df4:	55                   	push   ebp
c0019df5:	57                   	push   edi
c0019df6:	56                   	push   esi
c0019df7:	53                   	push   ebx
c0019df8:	83 ec 0c             	sub    esp,0xc
c0019dfb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019dff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019e07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019e0b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e11:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e13:	74 13                	je     c0019e28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019e15:	83 ec 0c             	sub    esp,0xc
c0019e18:	68 44 18 02 c0       	push   0xc0021844
c0019e1d:	e8 9f 69 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019e22:	83 c4 10             	add    esp,0x10
c0019e25:	8d 76 00             	lea    esi,[esi+0x0]
c0019e28:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e2e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e31:	74 11                	je     c0019e44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019e33:	83 ec 0c             	sub    esp,0xc
c0019e36:	68 83 18 02 c0       	push   0xc0021883
c0019e3b:	e8 81 69 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	90                   	nop
c0019e44:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019e4a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019e4d:	74 11                	je     c0019e60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019e4f:	83 ec 0c             	sub    esp,0xc
c0019e52:	68 83 18 02 c0       	push   0xc0021883
c0019e57:	e8 65 69 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019e5c:	83 c4 10             	add    esp,0x10
c0019e5f:	90                   	nop
c0019e60:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019e63:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019e67:	85 f6                	test   esi,esi
c0019e69:	7e 2d                	jle    c0019e98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019e6b:	31 c0                	xor    eax,eax
c0019e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e70:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e73:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019e76:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019e7c:	85 c9                	test   ecx,ecx
c0019e7e:	0f 49 d1             	cmovns edx,ecx
c0019e81:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019e85:	c1 fa 0f             	sar    edx,0xf
c0019e88:	01 d1                	add    ecx,edx
c0019e8a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019e8e:	83 c0 01             	add    eax,0x1
c0019e91:	39 f0                	cmp    eax,esi
c0019e93:	75 db                	jne    c0019e70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019e95:	8d 76 00             	lea    esi,[esi+0x0]
c0019e98:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019e9b:	83 ec 04             	sub    esp,0x4
c0019e9e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019ea1:	29 f0                	sub    eax,esi
c0019ea3:	c1 e0 02             	shl    eax,0x2
c0019ea6:	50                   	push   eax
c0019ea7:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019eaa:	50                   	push   eax
c0019eab:	52                   	push   edx
c0019eac:	e8 1f 65 fe ff       	call   c00003d0 <memmove>
c0019eb1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019eb4:	29 f0                	sub    eax,esi
c0019eb6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019eb9:	83 c4 1c             	add    esp,0x1c
c0019ebc:	89 f0                	mov    eax,esi
c0019ebe:	5b                   	pop    ebx
c0019ebf:	5e                   	pop    esi
c0019ec0:	5f                   	pop    edi
c0019ec1:	5d                   	pop    ebp
c0019ec2:	c3                   	ret    
c0019ec3:	90                   	nop

c0019ec4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019ec4:	55                   	push   ebp
c0019ec5:	57                   	push   edi
c0019ec6:	56                   	push   esi
c0019ec7:	53                   	push   ebx
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ecf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019ed3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019ed7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019edb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019ee1:	39 03                	cmp    DWORD PTR [ebx],eax
c0019ee3:	74 13                	je     c0019ef8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019ee5:	83 ec 0c             	sub    esp,0xc
c0019ee8:	68 64 18 02 c0       	push   0xc0021864
c0019eed:	e8 cf 68 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019ef2:	83 c4 10             	add    esp,0x10
c0019ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019efe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f01:	74 11                	je     c0019f14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019f03:	83 ec 0c             	sub    esp,0xc
c0019f06:	68 9f 18 02 c0       	push   0xc002189f
c0019f0b:	e8 b1 68 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	90                   	nop
c0019f14:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019f1a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f1d:	74 11                	je     c0019f30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019f1f:	83 ec 0c             	sub    esp,0xc
c0019f22:	68 9f 18 02 c0       	push   0xc002189f
c0019f27:	e8 95 68 ff ff       	call   c00107c1 <KePanic(char const*)>
c0019f2c:	83 c4 10             	add    esp,0x10
c0019f2f:	90                   	nop
c0019f30:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019f33:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019f37:	85 ff                	test   edi,edi
c0019f39:	7e 21                	jle    c0019f5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019f3b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019f42:	31 c0                	xor    eax,eax
c0019f44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f47:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019f4a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019f4d:	01 d5                	add    ebp,edx
c0019f4f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019f52:	83 c0 04             	add    eax,0x4
c0019f55:	39 c1                	cmp    ecx,eax
c0019f57:	75 eb                	jne    c0019f44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019f59:	8d 76 00             	lea    esi,[esi+0x0]
c0019f5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f5f:	83 ec 04             	sub    esp,0x4
c0019f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f65:	29 f8                	sub    eax,edi
c0019f67:	c1 e0 02             	shl    eax,0x2
c0019f6a:	50                   	push   eax
c0019f6b:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019f6e:	50                   	push   eax
c0019f6f:	52                   	push   edx
c0019f70:	e8 5b 64 fe ff       	call   c00003d0 <memmove>
c0019f75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f78:	29 f8                	sub    eax,edi
c0019f7a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f7d:	83 c4 1c             	add    esp,0x1c
c0019f80:	89 f8                	mov    eax,edi
c0019f82:	5b                   	pop    ebx
c0019f83:	5e                   	pop    esi
c0019f84:	5f                   	pop    edi
c0019f85:	5d                   	pop    ebp
c0019f86:	c3                   	ret    
c0019f87:	90                   	nop

c0019f88 <PCI::open(int, int, void*)>:
c0019f88:	83 ec 18             	sub    esp,0x18
c0019f8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019f93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019f99:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f9b:	50                   	push   eax
c0019f9c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019f9f:	31 c0                	xor    eax,eax
c0019fa1:	83 c4 1c             	add    esp,0x1c
c0019fa4:	c3                   	ret    
c0019fa5:	90                   	nop

c0019fa6 <PCI::close(int, int, void*)>:
c0019fa6:	31 c0                	xor    eax,eax
c0019fa8:	c3                   	ret    
c0019fa9:	90                   	nop

c0019faa <PCI::PCI()>:
c0019faa:	83 ec 0c             	sub    esp,0xc
c0019fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb1:	83 ec 08             	sub    esp,0x8
c0019fb4:	68 bb 18 02 c0       	push   0xc00218bb
c0019fb9:	50                   	push   eax
c0019fba:	e8 3d 17 ff ff       	call   c000b6fc <Bus::Bus(char const*)>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	ba 64 19 02 c0       	mov    edx,0xc0021964
c0019fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fcb:	89 10                	mov    DWORD PTR [eax],edx
c0019fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fdf:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019fee:	0f b6 d0             	movzx  edx,al
c0019ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ff5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a000:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a006:	0f b6 d0             	movzx  edx,al
c001a009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a00d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a016:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a01c:	8d 50 01             	lea    edx,[eax+0x1]
c001a01f:	88 d1                	mov    cl,dl
c001a021:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a025:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a02b:	0f b6 d0             	movzx  edx,al
c001a02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a032:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a036:	83 c9 c0             	or     ecx,0xffffffc0
c001a039:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a03d:	90                   	nop
c001a03e:	83 c4 0c             	add    esp,0xc
c001a041:	c3                   	ret    

c001a042 <PCI::readBAR8(unsigned int, int)>:
c001a042:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a04a:	f6 c2 01             	test   dl,0x1
c001a04d:	74 07                	je     c001a056 <PCI::readBAR8(unsigned int, int)+0x14>
c001a04f:	83 e2 fc             	and    edx,0xfffffffc
c001a052:	01 c2                	add    edx,eax
c001a054:	ec                   	in     al,dx
c001a055:	c3                   	ret    
c001a056:	83 e2 f0             	and    edx,0xfffffff0
c001a059:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a05c:	c3                   	ret    
c001a05d:	90                   	nop

c001a05e <PCI::readBAR16(unsigned int, int)>:
c001a05e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a066:	f6 c2 01             	test   dl,0x1
c001a069:	74 08                	je     c001a073 <PCI::readBAR16(unsigned int, int)+0x15>
c001a06b:	83 e2 fc             	and    edx,0xfffffffc
c001a06e:	01 c2                	add    edx,eax
c001a070:	66 ed                	in     ax,dx
c001a072:	c3                   	ret    
c001a073:	83 e2 f0             	and    edx,0xfffffff0
c001a076:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a07a:	c3                   	ret    
c001a07b:	90                   	nop

c001a07c <PCI::readBAR32(unsigned int, int)>:
c001a07c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a084:	f6 c2 01             	test   dl,0x1
c001a087:	74 07                	je     c001a090 <PCI::readBAR32(unsigned int, int)+0x14>
c001a089:	83 e2 fc             	and    edx,0xfffffffc
c001a08c:	01 c2                	add    edx,eax
c001a08e:	ed                   	in     eax,dx
c001a08f:	c3                   	ret    
c001a090:	83 e2 f0             	and    edx,0xfffffff0
c001a093:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a096:	c3                   	ret    
c001a097:	90                   	nop

c001a098 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a09c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0a4:	f6 c2 01             	test   dl,0x1
c001a0a7:	74 07                	je     c001a0b0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a0a9:	83 e2 fc             	and    edx,0xfffffffc
c001a0ac:	01 ca                	add    edx,ecx
c001a0ae:	ee                   	out    dx,al
c001a0af:	c3                   	ret    
c001a0b0:	83 e2 f0             	and    edx,0xfffffff0
c001a0b3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a0b6:	c3                   	ret    
c001a0b7:	90                   	nop

c001a0b8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a0b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0c4:	f6 c2 01             	test   dl,0x1
c001a0c7:	74 08                	je     c001a0d1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a0c9:	83 e2 fc             	and    edx,0xfffffffc
c001a0cc:	01 ca                	add    edx,ecx
c001a0ce:	66 ef                	out    dx,ax
c001a0d0:	c3                   	ret    
c001a0d1:	83 e2 f0             	and    edx,0xfffffff0
c001a0d4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a0d8:	c3                   	ret    
c001a0d9:	90                   	nop

c001a0da <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a0da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0e6:	f6 c2 01             	test   dl,0x1
c001a0e9:	74 07                	je     c001a0f2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a0eb:	83 e2 fc             	and    edx,0xfffffffc
c001a0ee:	01 ca                	add    edx,ecx
c001a0f0:	ef                   	out    dx,eax
c001a0f1:	c3                   	ret    
c001a0f2:	83 e2 f0             	and    edx,0xfffffff0
c001a0f5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a0f8:	c3                   	ret    
c001a0f9:	90                   	nop

c001a0fa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a0fa:	55                   	push   ebp
c001a0fb:	57                   	push   edi
c001a0fc:	56                   	push   esi
c001a0fd:	53                   	push   ebx
c001a0fe:	83 ec 0c             	sub    esp,0xc
c001a101:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a106:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a10a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a10e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a112:	83 fe 07             	cmp    esi,0x7
c001a115:	76 10                	jbe    c001a127 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a117:	83 ec 0c             	sub    esp,0xc
c001a11a:	68 c3 18 02 c0       	push   0xc00218c3
c001a11f:	e8 9d 66 ff ff       	call   c00107c1 <KePanic(char const*)>
c001a124:	83 c4 10             	add    esp,0x10
c001a127:	0f b6 db             	movzx  ebx,bl
c001a12a:	83 fb 0f             	cmp    ebx,0xf
c001a12d:	76 10                	jbe    c001a13f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a12f:	83 ec 0c             	sub    esp,0xc
c001a132:	68 f3 18 02 c0       	push   0xc00218f3
c001a137:	e8 85 66 ff ff       	call   c00107c1 <KePanic(char const*)>
c001a13c:	83 c4 10             	add    esp,0x10
c001a13f:	8d 04 36             	lea    eax,[esi+esi*1]
c001a142:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a147:	83 c8 f0             	or     eax,0xfffffff0
c001a14a:	ee                   	out    dx,al
c001a14b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a150:	89 e8                	mov    eax,ebp
c001a152:	ee                   	out    dx,al
c001a153:	89 f9                	mov    ecx,edi
c001a155:	89 d8                	mov    eax,ebx
c001a157:	0f b6 d9             	movzx  ebx,cl
c001a15a:	83 c4 0c             	add    esp,0xc
c001a15d:	c1 e0 08             	shl    eax,0x8
c001a160:	83 e3 fc             	and    ebx,0xfffffffc
c001a163:	09 d8                	or     eax,ebx
c001a165:	5b                   	pop    ebx
c001a166:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a16b:	5e                   	pop    esi
c001a16c:	5f                   	pop    edi
c001a16d:	5d                   	pop    ebp
c001a16e:	c3                   	ret    
c001a16f:	90                   	nop

c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a170:	57                   	push   edi
c001a171:	56                   	push   esi
c001a172:	53                   	push   ebx
c001a173:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a17b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a17f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a183:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a18d:	83 ff 01             	cmp    edi,0x1
c001a190:	75 3f                	jne    c001a1d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a192:	89 de                	mov    esi,ebx
c001a194:	0f b6 c0             	movzx  eax,al
c001a197:	c1 e0 10             	shl    eax,0x10
c001a19a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a1a0:	0f b6 c9             	movzx  ecx,cl
c001a1a3:	09 f0                	or     eax,esi
c001a1a5:	c1 e1 08             	shl    ecx,0x8
c001a1a8:	0f b6 d2             	movzx  edx,dl
c001a1ab:	c1 e2 0b             	shl    edx,0xb
c001a1ae:	09 c8                	or     eax,ecx
c001a1b0:	09 d0                	or     eax,edx
c001a1b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1b7:	0d 00 00 00 80       	or     eax,0x80000000
c001a1bc:	ef                   	out    dx,eax
c001a1bd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a1c2:	ed                   	in     eax,dx
c001a1c3:	83 e3 02             	and    ebx,0x2
c001a1c6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a1cd:	d3 e8                	shr    eax,cl
c001a1cf:	eb 44                	jmp    c001a215 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a1d1:	83 ff 02             	cmp    edi,0x2
c001a1d4:	75 2d                	jne    c001a203 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a1d6:	83 ec 0c             	sub    esp,0xc
c001a1d9:	0f b6 fb             	movzx  edi,bl
c001a1dc:	57                   	push   edi
c001a1dd:	0f b6 c9             	movzx  ecx,cl
c001a1e0:	51                   	push   ecx
c001a1e1:	0f b6 d2             	movzx  edx,dl
c001a1e4:	52                   	push   edx
c001a1e5:	0f b6 c0             	movzx  eax,al
c001a1e8:	50                   	push   eax
c001a1e9:	56                   	push   esi
c001a1ea:	e8 0b ff ff ff       	call   c001a0fa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1ef:	89 c2                	mov    edx,eax
c001a1f1:	ed                   	in     eax,dx
c001a1f2:	83 e3 02             	and    ebx,0x2
c001a1f5:	83 c4 20             	add    esp,0x20
c001a1f8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a1ff:	d3 e8                	shr    eax,cl
c001a201:	eb 12                	jmp    c001a215 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a203:	83 ec 0c             	sub    esp,0xc
c001a206:	68 23 19 02 c0       	push   0xc0021923
c001a20b:	e8 b1 65 ff ff       	call   c00107c1 <KePanic(char const*)>
c001a210:	83 c4 10             	add    esp,0x10
c001a213:	31 c0                	xor    eax,eax
c001a215:	5b                   	pop    ebx
c001a216:	5e                   	pop    esi
c001a217:	5f                   	pop    edi
c001a218:	c3                   	ret    
c001a219:	90                   	nop

c001a21a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a21a:	83 ec 18             	sub    esp,0x18
c001a21d:	6a 00                	push   0x0
c001a21f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a224:	50                   	push   eax
c001a225:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a22a:	50                   	push   eax
c001a22b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a230:	50                   	push   eax
c001a231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a235:	e8 36 ff ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a23a:	83 c4 2c             	add    esp,0x2c
c001a23d:	c3                   	ret    

c001a23e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a23e:	83 ec 18             	sub    esp,0x18
c001a241:	6a 0e                	push   0xe
c001a243:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a248:	50                   	push   eax
c001a249:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a24e:	50                   	push   eax
c001a24f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a254:	50                   	push   eax
c001a255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a259:	e8 12 ff ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a25e:	83 c4 2c             	add    esp,0x2c
c001a261:	0f b6 c0             	movzx  eax,al
c001a264:	c3                   	ret    
c001a265:	90                   	nop

c001a266 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a266:	55                   	push   ebp
c001a267:	57                   	push   edi
c001a268:	56                   	push   esi
c001a269:	53                   	push   ebx
c001a26a:	83 ec 18             	sub    esp,0x18
c001a26d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a272:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a277:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a27c:	6a 0a                	push   0xa
c001a27e:	56                   	push   esi
c001a27f:	55                   	push   ebp
c001a280:	57                   	push   edi
c001a281:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a285:	e8 e6 fe ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a28a:	83 c4 14             	add    esp,0x14
c001a28d:	6a 0a                	push   0xa
c001a28f:	56                   	push   esi
c001a290:	55                   	push   ebp
c001a291:	57                   	push   edi
c001a292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a296:	89 c3                	mov    ebx,eax
c001a298:	0f b6 db             	movzx  ebx,bl
c001a29b:	e8 d0 fe ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2a0:	83 c4 2c             	add    esp,0x2c
c001a2a3:	25 00 ff 00 00       	and    eax,0xff00
c001a2a8:	09 d8                	or     eax,ebx
c001a2aa:	5b                   	pop    ebx
c001a2ab:	5e                   	pop    esi
c001a2ac:	5f                   	pop    edi
c001a2ad:	5d                   	pop    ebp
c001a2ae:	c3                   	ret    
c001a2af:	90                   	nop

c001a2b0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a2b0:	83 ec 18             	sub    esp,0x18
c001a2b3:	6a 08                	push   0x8
c001a2b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ba:	50                   	push   eax
c001a2bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2c0:	50                   	push   eax
c001a2c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2c6:	50                   	push   eax
c001a2c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2cb:	e8 a0 fe ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2d0:	83 c4 2c             	add    esp,0x2c
c001a2d3:	0f b6 c4             	movzx  eax,ah
c001a2d6:	c3                   	ret    
c001a2d7:	90                   	nop

c001a2d8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a2d8:	83 ec 18             	sub    esp,0x18
c001a2db:	6a 08                	push   0x8
c001a2dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2e2:	50                   	push   eax
c001a2e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2e8:	50                   	push   eax
c001a2e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ee:	50                   	push   eax
c001a2ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2f3:	e8 78 fe ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2f8:	83 c4 2c             	add    esp,0x2c
c001a2fb:	c3                   	ret    

c001a2fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a2fc:	83 ec 18             	sub    esp,0x18
c001a2ff:	6a 3c                	push   0x3c
c001a301:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a306:	50                   	push   eax
c001a307:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a30c:	50                   	push   eax
c001a30d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a312:	50                   	push   eax
c001a313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a317:	e8 54 fe ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a31c:	83 c4 2c             	add    esp,0x2c
c001a31f:	c3                   	ret    

c001a320 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a320:	83 ec 18             	sub    esp,0x18
c001a323:	6a 18                	push   0x18
c001a325:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a32a:	50                   	push   eax
c001a32b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a330:	50                   	push   eax
c001a331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a336:	50                   	push   eax
c001a337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a33b:	e8 30 fe ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a340:	83 c4 2c             	add    esp,0x2c
c001a343:	0f b6 c4             	movzx  eax,ah
c001a346:	c3                   	ret    
c001a347:	90                   	nop

c001a348 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a348:	55                   	push   ebp
c001a349:	57                   	push   edi
c001a34a:	56                   	push   esi
c001a34b:	53                   	push   ebx
c001a34c:	83 ec 28             	sub    esp,0x28
c001a34f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a353:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a358:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a35d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a362:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a369:	8d 43 12             	lea    eax,[ebx+0x12]
c001a36c:	83 c3 10             	add    ebx,0x10
c001a36f:	0f b6 c0             	movzx  eax,al
c001a372:	0f b6 db             	movzx  ebx,bl
c001a375:	50                   	push   eax
c001a376:	51                   	push   ecx
c001a377:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a37b:	57                   	push   edi
c001a37c:	55                   	push   ebp
c001a37d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a381:	e8 ea fd ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a386:	83 c4 14             	add    esp,0x14
c001a389:	53                   	push   ebx
c001a38a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a38e:	51                   	push   ecx
c001a38f:	89 c6                	mov    esi,eax
c001a391:	57                   	push   edi
c001a392:	55                   	push   ebp
c001a393:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a397:	c1 e6 10             	shl    esi,0x10
c001a39a:	e8 d1 fd ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a39f:	83 c4 3c             	add    esp,0x3c
c001a3a2:	5b                   	pop    ebx
c001a3a3:	0f b7 c0             	movzx  eax,ax
c001a3a6:	09 f0                	or     eax,esi
c001a3a8:	5e                   	pop    esi
c001a3a9:	5f                   	pop    edi
c001a3aa:	5d                   	pop    ebp
c001a3ab:	c3                   	ret    

c001a3ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a3ac:	55                   	push   ebp
c001a3ad:	57                   	push   edi
c001a3ae:	56                   	push   esi
c001a3af:	53                   	push   ebx
c001a3b0:	83 ec 0c             	sub    esp,0xc
c001a3b3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a3b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a3bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3bf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a3c3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a3c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a3cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a3d1:	83 f9 01             	cmp    ecx,0x1
c001a3d4:	75 5d                	jne    c001a433 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a3d6:	0f b6 c8             	movzx  ecx,al
c001a3d9:	89 f0                	mov    eax,esi
c001a3db:	25 fc 00 00 00       	and    eax,0xfc
c001a3e0:	0f b6 d2             	movzx  edx,dl
c001a3e3:	c1 e1 10             	shl    ecx,0x10
c001a3e6:	c1 e2 0b             	shl    edx,0xb
c001a3e9:	09 c1                	or     ecx,eax
c001a3eb:	89 f8                	mov    eax,edi
c001a3ed:	0f b6 f8             	movzx  edi,al
c001a3f0:	c1 e7 08             	shl    edi,0x8
c001a3f3:	09 f9                	or     ecx,edi
c001a3f5:	09 d1                	or     ecx,edx
c001a3f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a3fc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a402:	89 c8                	mov    eax,ecx
c001a404:	ef                   	out    dx,eax
c001a405:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a40a:	ed                   	in     eax,dx
c001a40b:	83 e6 02             	and    esi,0x2
c001a40e:	0f b7 db             	movzx  ebx,bx
c001a411:	74 0a                	je     c001a41d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a413:	c1 e3 10             	shl    ebx,0x10
c001a416:	0f b7 d0             	movzx  edx,ax
c001a419:	09 d3                	or     ebx,edx
c001a41b:	eb 05                	jmp    c001a422 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a41d:	66 31 c0             	xor    ax,ax
c001a420:	09 c3                	or     ebx,eax
c001a422:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a427:	89 c8                	mov    eax,ecx
c001a429:	ef                   	out    dx,eax
c001a42a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a42f:	89 d8                	mov    eax,ebx
c001a431:	eb 41                	jmp    c001a474 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a433:	83 f9 02             	cmp    ecx,0x2
c001a436:	75 45                	jne    c001a47d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a438:	89 f1                	mov    ecx,esi
c001a43a:	83 ec 0c             	sub    esp,0xc
c001a43d:	0f b6 f1             	movzx  esi,cl
c001a440:	89 f9                	mov    ecx,edi
c001a442:	56                   	push   esi
c001a443:	0f b6 f9             	movzx  edi,cl
c001a446:	57                   	push   edi
c001a447:	0f b6 d2             	movzx  edx,dl
c001a44a:	52                   	push   edx
c001a44b:	0f b6 c0             	movzx  eax,al
c001a44e:	50                   	push   eax
c001a44f:	55                   	push   ebp
c001a450:	e8 a5 fc ff ff       	call   c001a0fa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a455:	89 c2                	mov    edx,eax
c001a457:	ed                   	in     eax,dx
c001a458:	83 c4 20             	add    esp,0x20
c001a45b:	f6 c2 02             	test   dl,0x2
c001a45e:	0f b7 db             	movzx  ebx,bx
c001a461:	74 0c                	je     c001a46f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a463:	0f b7 c8             	movzx  ecx,ax
c001a466:	89 d8                	mov    eax,ebx
c001a468:	c1 e0 10             	shl    eax,0x10
c001a46b:	09 c8                	or     eax,ecx
c001a46d:	eb 05                	jmp    c001a474 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a46f:	66 31 c0             	xor    ax,ax
c001a472:	09 d8                	or     eax,ebx
c001a474:	ef                   	out    dx,eax
c001a475:	83 c4 0c             	add    esp,0xc
c001a478:	5b                   	pop    ebx
c001a479:	5e                   	pop    esi
c001a47a:	5f                   	pop    edi
c001a47b:	5d                   	pop    ebp
c001a47c:	c3                   	ret    
c001a47d:	c7 44 24 20 23 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021923
c001a485:	83 c4 0c             	add    esp,0xc
c001a488:	5b                   	pop    ebx
c001a489:	5e                   	pop    esi
c001a48a:	5f                   	pop    edi
c001a48b:	5d                   	pop    ebp
c001a48c:	e9 30 63 ff ff       	jmp    c00107c1 <KePanic(char const*)>
c001a491:	90                   	nop

c001a492 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a492:	55                   	push   ebp
c001a493:	57                   	push   edi
c001a494:	56                   	push   esi
c001a495:	53                   	push   ebx
c001a496:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a49c:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a4a3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a4aa:	0f 85 bd 00 00 00    	jne    c001a56d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a4b0:	83 ec 0c             	sub    esp,0xc
c001a4b3:	68 14 01 00 00       	push   0x114
c001a4b8:	e8 fa d5 fe ff       	call   c0007ab7 <malloc>
c001a4bd:	83 c4 0c             	add    esp,0xc
c001a4c0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a4c6:	68 29 19 02 c0       	push   0xc0021929
c001a4cb:	50                   	push   eax
c001a4cc:	89 c3                	mov    ebx,eax
c001a4ce:	e8 13 0a ff ff       	call   c000aee6 <File::File(char const*, Process*)>
c001a4d3:	83 c4 10             	add    esp,0x10
c001a4d6:	85 db                	test   ebx,ebx
c001a4d8:	0f 84 6b 02 00 00    	je     c001a749 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a4de:	57                   	push   edi
c001a4df:	57                   	push   edi
c001a4e0:	6a 01                	push   0x1
c001a4e2:	53                   	push   ebx
c001a4e3:	e8 ba 0a ff ff       	call   c000afa2 <File::open(FileOpenMode)>
c001a4e8:	83 c4 10             	add    esp,0x10
c001a4eb:	85 c0                	test   eax,eax
c001a4ed:	0f 85 56 02 00 00    	jne    c001a749 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a4f3:	52                   	push   edx
c001a4f4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a4f8:	50                   	push   eax
c001a4f9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a4fd:	50                   	push   eax
c001a4fe:	53                   	push   ebx
c001a4ff:	e8 4a 0d ff ff       	call   c000b24e <File::stat(unsigned long long*, bool*)>
c001a504:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a508:	40                   	inc    eax
c001a509:	89 04 24             	mov    DWORD PTR [esp],eax
c001a50c:	e8 a6 d5 fe ff       	call   c0007ab7 <malloc>
c001a511:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a515:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a519:	59                   	pop    ecx
c001a51a:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a51f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a521:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a525:	51                   	push   ecx
c001a526:	50                   	push   eax
c001a527:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a52b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a52f:	53                   	push   ebx
c001a530:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a533:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a537:	83 c4 20             	add    esp,0x20
c001a53a:	89 c8                	mov    eax,ecx
c001a53c:	99                   	cdq    
c001a53d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a541:	0f 85 02 02 00 00    	jne    c001a749 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a547:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a54b:	0f 85 f8 01 00 00    	jne    c001a749 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a551:	83 ec 0c             	sub    esp,0xc
c001a554:	53                   	push   ebx
c001a555:	e8 a6 0a ff ff       	call   c000b000 <File::close()>
c001a55a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a568:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a56d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a575:	31 c9                	xor    ecx,ecx
c001a577:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a57e:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a584:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a58b:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a591:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a596:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a59e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a5a3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a5ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5af:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a5b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a5bb:	39 cd                	cmp    ebp,ecx
c001a5bd:	0f 8e 86 01 00 00    	jle    c001a749 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5c3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a5c6:	d4 40                	aam    0x40
c001a5c8:	d5 39                	aad    0x39
c001a5ca:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a5ce:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a5d2:	d4 40                	aam    0x40
c001a5d4:	d5 39                	aad    0x39
c001a5d6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a5da:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a5de:	d4 40                	aam    0x40
c001a5e0:	d5 39                	aad    0x39
c001a5e2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a5e6:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a5ea:	d4 40                	aam    0x40
c001a5ec:	d5 39                	aad    0x39
c001a5ee:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a5f2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a5f6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a5fa:	3c 56                	cmp    al,0x56
c001a5fc:	74 47                	je     c001a645 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a5fe:	d4 40                	aam    0x40
c001a600:	d5 39                	aad    0x39
c001a602:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a605:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a609:	0f b6 db             	movzx  ebx,bl
c001a60c:	c1 e3 04             	shl    ebx,0x4
c001a60f:	d4 40                	aam    0x40
c001a611:	d5 39                	aad    0x39
c001a613:	83 e8 30             	sub    eax,0x30
c001a616:	0f b6 c0             	movzx  eax,al
c001a619:	09 c3                	or     ebx,eax
c001a61b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a61f:	c1 e3 04             	shl    ebx,0x4
c001a622:	d4 40                	aam    0x40
c001a624:	d5 39                	aad    0x39
c001a626:	83 e8 30             	sub    eax,0x30
c001a629:	0f b6 c0             	movzx  eax,al
c001a62c:	09 c3                	or     ebx,eax
c001a62e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a632:	c1 e3 04             	shl    ebx,0x4
c001a635:	d4 40                	aam    0x40
c001a637:	d5 39                	aad    0x39
c001a639:	83 e8 30             	sub    eax,0x30
c001a63c:	0f b6 c0             	movzx  eax,al
c001a63f:	09 c3                	or     ebx,eax
c001a641:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a645:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a649:	80 fb 58             	cmp    bl,0x58
c001a64c:	74 49                	je     c001a697 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a64e:	88 d8                	mov    al,bl
c001a650:	d4 40                	aam    0x40
c001a652:	d5 39                	aad    0x39
c001a654:	83 e8 30             	sub    eax,0x30
c001a657:	0f b6 f8             	movzx  edi,al
c001a65a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a65e:	c1 e7 04             	shl    edi,0x4
c001a661:	d4 40                	aam    0x40
c001a663:	d5 39                	aad    0x39
c001a665:	83 e8 30             	sub    eax,0x30
c001a668:	0f b6 c0             	movzx  eax,al
c001a66b:	09 c7                	or     edi,eax
c001a66d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a671:	c1 e7 04             	shl    edi,0x4
c001a674:	d4 40                	aam    0x40
c001a676:	d5 39                	aad    0x39
c001a678:	83 e8 30             	sub    eax,0x30
c001a67b:	0f b6 c0             	movzx  eax,al
c001a67e:	09 c7                	or     edi,eax
c001a680:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a684:	c1 e7 04             	shl    edi,0x4
c001a687:	d4 40                	aam    0x40
c001a689:	d5 39                	aad    0x39
c001a68b:	83 e8 30             	sub    eax,0x30
c001a68e:	0f b6 c0             	movzx  eax,al
c001a691:	09 c7                	or     edi,eax
c001a693:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a697:	8d 41 10             	lea    eax,[ecx+0x10]
c001a69a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a69e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a6a2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a6a6:	83 f9 0a             	cmp    ecx,0xa
c001a6a9:	74 07                	je     c001a6b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a6ab:	47                   	inc    edi
c001a6ac:	39 c5                	cmp    ebp,eax
c001a6ae:	75 16                	jne    c001a6c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a6b0:	89 e8                	mov    eax,ebp
c001a6b2:	83 f9 0a             	cmp    ecx,0xa
c001a6b5:	0f 94 c1             	sete   cl
c001a6b8:	0f b6 c9             	movzx  ecx,cl
c001a6bb:	01 c1                	add    ecx,eax
c001a6bd:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a6c2:	75 0f                	jne    c001a6d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a6c4:	eb 1c                	jmp    c001a6e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a6c6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a6c9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a6cd:	40                   	inc    eax
c001a6ce:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a6d1:	eb cb                	jmp    c001a69e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a6d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6d7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a6dc:	0f 85 d9 fe ff ff    	jne    c001a5bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a6e2:	80 fb 58             	cmp    bl,0x58
c001a6e5:	74 10                	je     c001a6f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a6e7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a6ec:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a6f1:	0f 85 c4 fe ff ff    	jne    c001a5bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a6f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a6ff:	83 e8 30             	sub    eax,0x30
c001a702:	c1 e0 04             	shl    eax,0x4
c001a705:	83 eb 30             	sub    ebx,0x30
c001a708:	09 d8                	or     eax,ebx
c001a70a:	0f b6 c0             	movzx  eax,al
c001a70d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a711:	0f 85 a4 fe ff ff    	jne    c001a5bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a71f:	83 e8 30             	sub    eax,0x30
c001a722:	c1 e0 04             	shl    eax,0x4
c001a725:	83 eb 30             	sub    ebx,0x30
c001a728:	09 d8                	or     eax,ebx
c001a72a:	0f b6 c0             	movzx  eax,al
c001a72d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a731:	0f 85 84 fe ff ff    	jne    c001a5bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a737:	50                   	push   eax
c001a738:	50                   	push   eax
c001a739:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a73d:	50                   	push   eax
c001a73e:	56                   	push   esi
c001a73f:	e8 0c 5f fe ff       	call   c0000650 <strcpy>
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	eb 05                	jmp    c001a74e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a749:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a74c:	31 f6                	xor    esi,esi
c001a74e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a754:	89 f0                	mov    eax,esi
c001a756:	5b                   	pop    ebx
c001a757:	5e                   	pop    esi
c001a758:	5f                   	pop    edi
c001a759:	5d                   	pop    ebp
c001a75a:	c3                   	ret    
c001a75b:	90                   	nop

c001a75c <PCI::checkBus(unsigned char)>:
c001a75c:	56                   	push   esi
c001a75d:	53                   	push   ebx
c001a75e:	31 db                	xor    ebx,ebx
c001a760:	51                   	push   ecx
c001a761:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a766:	52                   	push   edx
c001a767:	53                   	push   ebx
c001a768:	43                   	inc    ebx
c001a769:	56                   	push   esi
c001a76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76e:	e8 0f 03 00 00       	call   c001aa82 <PCI::checkDevice(unsigned char, unsigned char)>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	83 fb 20             	cmp    ebx,0x20
c001a779:	75 eb                	jne    c001a766 <PCI::checkBus(unsigned char)+0xa>
c001a77b:	58                   	pop    eax
c001a77c:	5b                   	pop    ebx
c001a77d:	5e                   	pop    esi
c001a77e:	c3                   	ret    
c001a77f:	90                   	nop

c001a780 <PCI::foundDevice(PCIDeviceInfo)>:
c001a780:	55                   	push   ebp
c001a781:	57                   	push   edi
c001a782:	56                   	push   esi
c001a783:	53                   	push   ebx
c001a784:	83 ec 1c             	sub    esp,0x1c
c001a787:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a78c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a790:	3d ff ff 00 00       	cmp    eax,0xffff
c001a795:	0f 84 63 01 00 00    	je     c001a8fe <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a79b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a7a0:	66 3d 06 04          	cmp    ax,0x406
c001a7a4:	75 2c                	jne    c001a7d2 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a7a6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a7ab:	50                   	push   eax
c001a7ac:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a7b1:	50                   	push   eax
c001a7b2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a7b7:	50                   	push   eax
c001a7b8:	53                   	push   ebx
c001a7b9:	e8 62 fb ff ff       	call   c001a320 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a7be:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a7c2:	0f b6 c0             	movzx  eax,al
c001a7c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7c9:	83 c4 2c             	add    esp,0x2c
c001a7cc:	5b                   	pop    ebx
c001a7cd:	5e                   	pop    esi
c001a7ce:	5f                   	pop    edi
c001a7cf:	5d                   	pop    ebp
c001a7d0:	eb 8a                	jmp    c001a75c <PCI::checkBus(unsigned char)>
c001a7d2:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a7d7:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a7dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a7e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a7e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7e9:	85 d2                	test   edx,edx
c001a7eb:	74 34                	je     c001a821 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a7ed:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a7f0:	85 c9                	test   ecx,ecx
c001a7f2:	74 29                	je     c001a81d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a7f4:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a7fa:	31 f5                	xor    ebp,esi
c001a7fc:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a802:	75 19                	jne    c001a81d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a804:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a80a:	75 11                	jne    c001a81d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a80c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a813:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a817:	0f 84 e1 00 00 00    	je     c001a8fe <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a81d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a81f:	eb c8                	jmp    c001a7e9 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a821:	3d 01 06 00 00       	cmp    eax,0x601
c001a826:	75 19                	jne    c001a841 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	68 64 01 00 00       	push   0x164
c001a830:	e8 82 d2 fe ff       	call   c0007ab7 <malloc>
c001a835:	89 04 24             	mov    DWORD PTR [esp],eax
c001a838:	89 c5                	mov    ebp,eax
c001a83a:	e8 ab 0e 00 00       	call   c001b6ea <SATABus::SATABus()>
c001a83f:	eb 1e                	jmp    c001a85f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a841:	3d 01 01 00 00       	cmp    eax,0x101
c001a846:	75 62                	jne    c001a8aa <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	68 70 02 00 00       	push   0x270
c001a850:	e8 62 d2 fe ff       	call   c0007ab7 <malloc>
c001a855:	89 04 24             	mov    DWORD PTR [esp],eax
c001a858:	89 c5                	mov    ebp,eax
c001a85a:	e8 f3 02 00 00       	call   c001ab52 <IDE::IDE()>
c001a85f:	58                   	pop    eax
c001a860:	5a                   	pop    edx
c001a861:	55                   	push   ebp
c001a862:	53                   	push   ebx
c001a863:	e8 38 15 ff ff       	call   c000bda0 <Device::addChild(Device*)>
c001a868:	83 ec 1c             	sub    esp,0x1c
c001a86b:	b9 09 00 00 00       	mov    ecx,0x9
c001a870:	fc                   	cld    
c001a871:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a875:	89 e7                	mov    edi,esp
c001a877:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a879:	55                   	push   ebp
c001a87a:	e8 67 14 ff ff       	call   c000bce6 <Device::preOpenPCI(PCIDeviceInfo)>
c001a87f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a882:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a886:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a88e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a896:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a89e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a8a1:	83 c4 4c             	add    esp,0x4c
c001a8a4:	5b                   	pop    ebx
c001a8a5:	5e                   	pop    esi
c001a8a6:	5f                   	pop    edi
c001a8a7:	5d                   	pop    ebp
c001a8a8:	ff e0                	jmp    eax
c001a8aa:	83 ec 0c             	sub    esp,0xc
c001a8ad:	68 58 01 00 00       	push   0x158
c001a8b2:	e8 00 d2 fe ff       	call   c0007ab7 <malloc>
c001a8b7:	5a                   	pop    edx
c001a8b8:	59                   	pop    ecx
c001a8b9:	68 42 19 02 c0       	push   0xc0021942
c001a8be:	50                   	push   eax
c001a8bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8c3:	e8 76 17 ff ff       	call   c000c03e <DriverlessDevice::DriverlessDevice(char const*)>
c001a8c8:	5e                   	pop    esi
c001a8c9:	5f                   	pop    edi
c001a8ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8ce:	50                   	push   eax
c001a8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8d3:	53                   	push   ebx
c001a8d4:	e8 c7 14 ff ff       	call   c000bda0 <Device::addChild(Device*)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	b9 09 00 00 00       	mov    ecx,0x9
c001a8e1:	fc                   	cld    
c001a8e2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a8e6:	89 fe                	mov    esi,edi
c001a8e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8f2:	83 c4 1c             	add    esp,0x1c
c001a8f5:	5b                   	pop    ebx
c001a8f6:	5e                   	pop    esi
c001a8f7:	5f                   	pop    edi
c001a8f8:	5d                   	pop    ebp
c001a8f9:	e9 e8 13 ff ff       	jmp    c000bce6 <Device::preOpenPCI(PCIDeviceInfo)>
c001a8fe:	83 c4 1c             	add    esp,0x1c
c001a901:	5b                   	pop    ebx
c001a902:	5e                   	pop    esi
c001a903:	5f                   	pop    edi
c001a904:	5d                   	pop    ebp
c001a905:	c3                   	ret    

c001a906 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a906:	55                   	push   ebp
c001a907:	57                   	push   edi
c001a908:	56                   	push   esi
c001a909:	53                   	push   ebx
c001a90a:	83 ec 68             	sub    esp,0x68
c001a90d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a914:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a918:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a91c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a923:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a928:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a92c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a933:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a938:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a93c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a941:	6a 0c                	push   0xc
c001a943:	57                   	push   edi
c001a944:	53                   	push   ebx
c001a945:	56                   	push   esi
c001a946:	55                   	push   ebp
c001a947:	e8 24 f8 ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a94c:	83 c4 20             	add    esp,0x20
c001a94f:	57                   	push   edi
c001a950:	53                   	push   ebx
c001a951:	56                   	push   esi
c001a952:	55                   	push   ebp
c001a953:	e8 0e f9 ff ff       	call   c001a266 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a958:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a95d:	57                   	push   edi
c001a95e:	53                   	push   ebx
c001a95f:	56                   	push   esi
c001a960:	55                   	push   ebp
c001a961:	e8 96 f9 ff ff       	call   c001a2fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a966:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a96a:	83 c4 14             	add    esp,0x14
c001a96d:	6a 3c                	push   0x3c
c001a96f:	57                   	push   edi
c001a970:	53                   	push   ebx
c001a971:	56                   	push   esi
c001a972:	55                   	push   ebp
c001a973:	e8 f8 f7 ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a978:	0f b6 c4             	movzx  eax,ah
c001a97b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a97f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a983:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a987:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a98c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a992:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a998:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a99c:	83 c4 20             	add    esp,0x20
c001a99f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001a9a4:	74 30                	je     c001a9d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9a6:	31 c0                	xor    eax,eax
c001a9a8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a9ac:	7e 28                	jle    c001a9d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9ae:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a9b6:	39 cb                	cmp    ebx,ecx
c001a9b8:	75 19                	jne    c001a9d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a9ba:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a9c2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a9c6:	75 0b                	jne    c001a9d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a9c8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a9cf:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a9d3:	40                   	inc    eax
c001a9d4:	eb d2                	jmp    c001a9a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a9d6:	31 d2                	xor    edx,edx
c001a9d8:	83 ec 0c             	sub    esp,0xc
c001a9db:	57                   	push   edi
c001a9dc:	53                   	push   ebx
c001a9dd:	56                   	push   esi
c001a9de:	52                   	push   edx
c001a9df:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a9e3:	55                   	push   ebp
c001a9e4:	e8 5f f9 ff ff       	call   c001a348 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a9ed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a9f1:	42                   	inc    edx
c001a9f2:	83 c4 20             	add    esp,0x20
c001a9f5:	83 fa 06             	cmp    edx,0x6
c001a9f8:	75 de                	jne    c001a9d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a9fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a9fe:	83 ec 0c             	sub    esp,0xc
c001aa01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa05:	c1 e2 08             	shl    edx,0x8
c001aa08:	0f b6 c4             	movzx  eax,ah
c001aa0b:	09 d0                	or     eax,edx
c001aa0d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa12:	6a 02                	push   0x2
c001aa14:	57                   	push   edi
c001aa15:	53                   	push   ebx
c001aa16:	56                   	push   esi
c001aa17:	55                   	push   ebp
c001aa18:	e8 53 f7 ff ff       	call   c001a170 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa1d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa22:	83 c4 20             	add    esp,0x20
c001aa25:	57                   	push   edi
c001aa26:	53                   	push   ebx
c001aa27:	56                   	push   esi
c001aa28:	55                   	push   ebp
c001aa29:	e8 82 f8 ff ff       	call   c001a2b0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa2e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa32:	57                   	push   edi
c001aa33:	53                   	push   ebx
c001aa34:	56                   	push   esi
c001aa35:	55                   	push   ebp
c001aa36:	e8 df f7 ff ff       	call   c001a21a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa3b:	b9 09 00 00 00       	mov    ecx,0x9
c001aa40:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa45:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aa49:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aa4d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aa51:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aa55:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aa59:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aa5d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aa61:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aa65:	83 ec 0c             	sub    esp,0xc
c001aa68:	fc                   	cld    
c001aa69:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aa6d:	89 e7                	mov    edi,esp
c001aa6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aa71:	55                   	push   ebp
c001aa72:	e8 09 fd ff ff       	call   c001a780 <PCI::foundDevice(PCIDeviceInfo)>
c001aa77:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aa7d:	5b                   	pop    ebx
c001aa7e:	5e                   	pop    esi
c001aa7f:	5f                   	pop    edi
c001aa80:	5d                   	pop    ebp
c001aa81:	c3                   	ret    

c001aa82 <PCI::checkDevice(unsigned char, unsigned char)>:
c001aa82:	55                   	push   ebp
c001aa83:	57                   	push   edi
c001aa84:	56                   	push   esi
c001aa85:	53                   	push   ebx
c001aa86:	83 ec 0c             	sub    esp,0xc
c001aa89:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aa8e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aa93:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aa97:	6a 00                	push   0x0
c001aa99:	56                   	push   esi
c001aa9a:	57                   	push   edi
c001aa9b:	55                   	push   ebp
c001aa9c:	e8 79 f7 ff ff       	call   c001a21a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aaa1:	6a 00                	push   0x0
c001aaa3:	56                   	push   esi
c001aaa4:	57                   	push   edi
c001aaa5:	55                   	push   ebp
c001aaa6:	e8 5b fe ff ff       	call   c001a906 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aaab:	83 c4 20             	add    esp,0x20
c001aaae:	6a 00                	push   0x0
c001aab0:	56                   	push   esi
c001aab1:	57                   	push   edi
c001aab2:	55                   	push   ebp
c001aab3:	e8 86 f7 ff ff       	call   c001a23e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	a8 80                	test   al,0x80
c001aabd:	74 2d                	je     c001aaec <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aabf:	bb 01 00 00 00       	mov    ebx,0x1
c001aac4:	53                   	push   ebx
c001aac5:	56                   	push   esi
c001aac6:	57                   	push   edi
c001aac7:	55                   	push   ebp
c001aac8:	e8 4d f7 ff ff       	call   c001a21a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aacd:	83 c4 10             	add    esp,0x10
c001aad0:	0f b7 c0             	movzx  eax,ax
c001aad3:	3d ff ff 00 00       	cmp    eax,0xffff
c001aad8:	74 0c                	je     c001aae6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001aada:	53                   	push   ebx
c001aadb:	56                   	push   esi
c001aadc:	57                   	push   edi
c001aadd:	55                   	push   ebp
c001aade:	e8 23 fe ff ff       	call   c001a906 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aae3:	83 c4 10             	add    esp,0x10
c001aae6:	43                   	inc    ebx
c001aae7:	83 fb 08             	cmp    ebx,0x8
c001aaea:	75 d8                	jne    c001aac4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001aaec:	83 c4 0c             	add    esp,0xc
c001aaef:	5b                   	pop    ebx
c001aaf0:	5e                   	pop    esi
c001aaf1:	5f                   	pop    edi
c001aaf2:	5d                   	pop    ebp
c001aaf3:	c3                   	ret    

c001aaf4 <PCI::detect()>:
c001aaf4:	56                   	push   esi
c001aaf5:	53                   	push   ebx
c001aaf6:	53                   	push   ebx
c001aaf7:	31 db                	xor    ebx,ebx
c001aaf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aafd:	6a 00                	push   0x0
c001aaff:	6a 00                	push   0x0
c001ab01:	6a 00                	push   0x0
c001ab03:	56                   	push   esi
c001ab04:	e8 35 f7 ff ff       	call   c001a23e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	a8 80                	test   al,0x80
c001ab0e:	75 21                	jne    c001ab31 <PCI::detect()+0x3d>
c001ab10:	51                   	push   ecx
c001ab11:	51                   	push   ecx
c001ab12:	6a 00                	push   0x0
c001ab14:	56                   	push   esi
c001ab15:	e8 42 fc ff ff       	call   c001a75c <PCI::checkBus(unsigned char)>
c001ab1a:	83 c4 10             	add    esp,0x10
c001ab1d:	eb 2a                	jmp    c001ab49 <PCI::detect()+0x55>
c001ab1f:	52                   	push   edx
c001ab20:	52                   	push   edx
c001ab21:	53                   	push   ebx
c001ab22:	43                   	inc    ebx
c001ab23:	56                   	push   esi
c001ab24:	e8 33 fc ff ff       	call   c001a75c <PCI::checkBus(unsigned char)>
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	83 fb 08             	cmp    ebx,0x8
c001ab2f:	74 18                	je     c001ab49 <PCI::detect()+0x55>
c001ab31:	53                   	push   ebx
c001ab32:	6a 00                	push   0x0
c001ab34:	6a 00                	push   0x0
c001ab36:	56                   	push   esi
c001ab37:	e8 de f6 ff ff       	call   c001a21a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	0f b7 c0             	movzx  eax,ax
c001ab42:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab47:	74 d6                	je     c001ab1f <PCI::detect()+0x2b>
c001ab49:	58                   	pop    eax
c001ab4a:	5b                   	pop    ebx
c001ab4b:	5e                   	pop    esi
c001ab4c:	c3                   	ret    
c001ab4d:	90                   	nop

c001ab4e <IDE::close(int, int, void*)>:
c001ab4e:	83 c8 ff             	or     eax,0xffffffff
c001ab51:	c3                   	ret    

c001ab52 <IDE::IDE()>:
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab59:	83 ec 08             	sub    esp,0x8
c001ab5c:	68 88 19 02 c0       	push   0xc0021988
c001ab61:	50                   	push   eax
c001ab62:	e8 7d 15 ff ff       	call   c000c0e4 <HardDiskController::HardDiskController(char const*)>
c001ab67:	83 c4 10             	add    esp,0x10
c001ab6a:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c001ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab73:	89 10                	mov    DWORD PTR [eax],edx
c001ab75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ab80:	90                   	nop
c001ab81:	83 c4 0c             	add    esp,0xc
c001ab84:	c3                   	ret    
c001ab85:	90                   	nop

c001ab86 <IDE::prepareInterrupt(unsigned char)>:
c001ab86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab8f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ab97:	c3                   	ret    

c001ab98 <selectDrive(unsigned char, unsigned char)>:
c001ab98:	c3                   	ret    
c001ab99:	90                   	nop

c001ab9a <IDE::getBase(unsigned char)>:
c001ab9a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ab9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001abab:	c3                   	ret    

c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001abac:	55                   	push   ebp
c001abad:	57                   	push   edi
c001abae:	56                   	push   esi
c001abaf:	53                   	push   ebx
c001abb0:	83 ec 1c             	sub    esp,0x1c
c001abb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001abb7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001abbb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abc3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001abc6:	80 f9 03             	cmp    cl,0x3
c001abc9:	77 4f                	ja     c001ac1a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001abcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abcf:	0f b6 f2             	movzx  esi,dl
c001abd2:	0f b6 db             	movzx  ebx,bl
c001abd5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001abd8:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001abdd:	80 ca 80             	or     dl,0x80
c001abe0:	52                   	push   edx
c001abe1:	6a 0c                	push   0xc
c001abe3:	56                   	push   esi
c001abe4:	57                   	push   edi
c001abe5:	e8 c2 ff ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001abea:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001abef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abf3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001abf7:	ee                   	out    dx,al
c001abf8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001abfd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ac01:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ac05:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac11:	83 c4 2c             	add    esp,0x2c
c001ac14:	5b                   	pop    ebx
c001ac15:	5e                   	pop    esi
c001ac16:	5f                   	pop    edi
c001ac17:	5d                   	pop    ebp
c001ac18:	eb 92                	jmp    c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac1a:	0f b6 cb             	movzx  ecx,bl
c001ac1d:	83 f9 07             	cmp    ecx,0x7
c001ac20:	77 12                	ja     c001ac34 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac22:	0f b6 d2             	movzx  edx,dl
c001ac25:	0f b6 db             	movzx  ebx,bl
c001ac28:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ac30:	01 da                	add    edx,ebx
c001ac32:	eb 2f                	jmp    c001ac63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac34:	83 f9 0d             	cmp    ecx,0xd
c001ac37:	77 13                	ja     c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac39:	0f b6 d2             	movzx  edx,dl
c001ac3c:	0f b6 db             	movzx  ebx,bl
c001ac3f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ac46:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ac4a:	eb 17                	jmp    c001ac63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac4c:	83 f9 15             	cmp    ecx,0x15
c001ac4f:	77 13                	ja     c001ac64 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ac51:	0f b6 d2             	movzx  edx,dl
c001ac54:	0f b6 db             	movzx  ebx,bl
c001ac57:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ac5f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ac63:	ee                   	out    dx,al
c001ac64:	83 c4 1c             	add    esp,0x1c
c001ac67:	5b                   	pop    ebx
c001ac68:	5e                   	pop    esi
c001ac69:	5f                   	pop    edi
c001ac6a:	5d                   	pop    ebp
c001ac6b:	c3                   	ret    

c001ac6c <IDE::read(unsigned char, unsigned char)>:
c001ac6c:	57                   	push   edi
c001ac6d:	56                   	push   esi
c001ac6e:	53                   	push   ebx
c001ac6f:	83 ec 10             	sub    esp,0x10
c001ac72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ac76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac7a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ac7e:	8d 42 f8             	lea    eax,[edx-0x8]
c001ac81:	3c 03                	cmp    al,0x3
c001ac83:	77 48                	ja     c001accd <IDE::read(unsigned char, unsigned char)+0x61>
c001ac85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac89:	0f b6 f1             	movzx  esi,cl
c001ac8c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ac8f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ac94:	0c 80                	or     al,0x80
c001ac96:	50                   	push   eax
c001ac97:	6a 0c                	push   0xc
c001ac99:	56                   	push   esi
c001ac9a:	53                   	push   ebx
c001ac9b:	e8 0c ff ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aca0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aca4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001aca9:	0f b6 d2             	movzx  edx,dl
c001acac:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001acb0:	ec                   	in     al,dx
c001acb1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001acb5:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001acba:	52                   	push   edx
c001acbb:	6a 0c                	push   0xc
c001acbd:	56                   	push   esi
c001acbe:	53                   	push   ebx
c001acbf:	e8 e8 fe ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acc4:	83 c4 20             	add    esp,0x20
c001acc7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001accb:	eb 4c                	jmp    c001ad19 <IDE::read(unsigned char, unsigned char)+0xad>
c001accd:	0f b6 f2             	movzx  esi,dl
c001acd0:	83 fe 07             	cmp    esi,0x7
c001acd3:	77 12                	ja     c001ace7 <IDE::read(unsigned char, unsigned char)+0x7b>
c001acd5:	0f b6 c9             	movzx  ecx,cl
c001acd8:	0f b6 d2             	movzx  edx,dl
c001acdb:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ace3:	01 c2                	add    edx,eax
c001ace5:	eb 31                	jmp    c001ad18 <IDE::read(unsigned char, unsigned char)+0xac>
c001ace7:	83 fe 0d             	cmp    esi,0xd
c001acea:	77 13                	ja     c001acff <IDE::read(unsigned char, unsigned char)+0x93>
c001acec:	0f b6 c9             	movzx  ecx,cl
c001acef:	0f b6 d2             	movzx  edx,dl
c001acf2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001acf9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001acfd:	eb 19                	jmp    c001ad18 <IDE::read(unsigned char, unsigned char)+0xac>
c001acff:	31 c0                	xor    eax,eax
c001ad01:	83 fe 15             	cmp    esi,0x15
c001ad04:	77 13                	ja     c001ad19 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad06:	0f b6 c9             	movzx  ecx,cl
c001ad09:	0f b6 d2             	movzx  edx,dl
c001ad0c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ad14:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad18:	ec                   	in     al,dx
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	5b                   	pop    ebx
c001ad1d:	5e                   	pop    esi
c001ad1e:	5f                   	pop    edi
c001ad1f:	c3                   	ret    

c001ad20 <IDE::waitInterrupt(unsigned char)>:
c001ad20:	55                   	push   ebp
c001ad21:	57                   	push   edi
c001ad22:	56                   	push   esi
c001ad23:	53                   	push   ebx
c001ad24:	31 db                	xor    ebx,ebx
c001ad26:	83 ec 0c             	sub    esp,0xc
c001ad29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad2d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad32:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad3a:	89 e8                	mov    eax,ebp
c001ad3c:	84 c0                	test   al,al
c001ad3e:	75 30                	jne    c001ad70 <IDE::waitInterrupt(unsigned char)+0x50>
c001ad40:	50                   	push   eax
c001ad41:	6a 0c                	push   0xc
c001ad43:	56                   	push   esi
c001ad44:	57                   	push   edi
c001ad45:	e8 22 ff ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001ad4a:	83 c4 10             	add    esp,0x10
c001ad4d:	a8 01                	test   al,0x1
c001ad4f:	75 27                	jne    c001ad78 <IDE::waitInterrupt(unsigned char)+0x58>
c001ad51:	f6 c3 04             	test   bl,0x4
c001ad54:	75 12                	jne    c001ad68 <IDE::waitInterrupt(unsigned char)+0x48>
c001ad56:	83 fb 32             	cmp    ebx,0x32
c001ad59:	7e 0d                	jle    c001ad68 <IDE::waitInterrupt(unsigned char)+0x48>
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	6a 64                	push   0x64
c001ad60:	e8 6f a5 ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001ad65:	83 c4 10             	add    esp,0x10
c001ad68:	83 fb 3c             	cmp    ebx,0x3c
c001ad6b:	74 0b                	je     c001ad78 <IDE::waitInterrupt(unsigned char)+0x58>
c001ad6d:	43                   	inc    ebx
c001ad6e:	eb c2                	jmp    c001ad32 <IDE::waitInterrupt(unsigned char)+0x12>
c001ad70:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ad78:	83 c4 0c             	add    esp,0xc
c001ad7b:	89 e8                	mov    eax,ebp
c001ad7d:	5b                   	pop    ebx
c001ad7e:	5e                   	pop    esi
c001ad7f:	5f                   	pop    edi
c001ad80:	5d                   	pop    ebp
c001ad81:	c3                   	ret    

c001ad82 <ideChannel0IRQHandler(regs*, void*)>:
c001ad82:	83 ec 10             	sub    esp,0x10
c001ad85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad89:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ad90:	6a 07                	push   0x7
c001ad92:	6a 00                	push   0x0
c001ad94:	50                   	push   eax
c001ad95:	e8 d2 fe ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001ad9a:	83 c4 1c             	add    esp,0x1c
c001ad9d:	c3                   	ret    

c001ad9e <ideChannel1IRQHandler(regs*, void*)>:
c001ad9e:	83 ec 10             	sub    esp,0x10
c001ada1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ada5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001adac:	6a 07                	push   0x7
c001adae:	6a 01                	push   0x1
c001adb0:	50                   	push   eax
c001adb1:	e8 b6 fe ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001adb6:	83 c4 1c             	add    esp,0x1c
c001adb9:	c3                   	ret    

c001adba <IDE::enableIRQs(unsigned char, bool)>:
c001adba:	57                   	push   edi
c001adbb:	b8 02 00 00 00       	mov    eax,0x2
c001adc0:	56                   	push   esi
c001adc1:	53                   	push   ebx
c001adc2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001adc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adcb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001adcf:	74 02                	je     c001add3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001add1:	31 c0                	xor    eax,eax
c001add3:	0f b6 db             	movzx  ebx,bl
c001add6:	bf 04 00 00 00       	mov    edi,0x4
c001addb:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ade2:	50                   	push   eax
c001ade3:	6a 0c                	push   0xc
c001ade5:	53                   	push   ebx
c001ade6:	56                   	push   esi
c001ade7:	e8 c0 fd ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adec:	83 c4 10             	add    esp,0x10
c001adef:	50                   	push   eax
c001adf0:	6a 0c                	push   0xc
c001adf2:	53                   	push   ebx
c001adf3:	56                   	push   esi
c001adf4:	e8 73 fe ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	4f                   	dec    edi
c001adfd:	75 f0                	jne    c001adef <IDE::enableIRQs(unsigned char, bool)+0x35>
c001adff:	5b                   	pop    ebx
c001ae00:	5e                   	pop    esi
c001ae01:	5f                   	pop    edi
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <IDE::open(int, int, void*)>:
c001ae04:	55                   	push   ebp
c001ae05:	57                   	push   edi
c001ae06:	56                   	push   esi
c001ae07:	53                   	push   ebx
c001ae08:	83 ec 1c             	sub    esp,0x1c
c001ae0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae0f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae16:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae1f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae28:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae2f:	0f 85 da 02 00 00    	jne    c001b10f <IDE::open(int, int, void*)+0x30b>
c001ae35:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae3b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ae3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae43:	83 e0 7f             	and    eax,0x7f
c001ae46:	83 f8 05             	cmp    eax,0x5
c001ae49:	74 05                	je     c001ae50 <IDE::open(int, int, void*)+0x4c>
c001ae4b:	83 f8 0f             	cmp    eax,0xf
c001ae4e:	75 32                	jne    c001ae82 <IDE::open(int, int, void*)+0x7e>
c001ae50:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ae56:	83 e0 fc             	and    eax,0xfffffffc
c001ae59:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ae60:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ae66:	83 e0 fc             	and    eax,0xfffffffc
c001ae69:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ae70:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ae76:	83 e0 fc             	and    eax,0xfffffffc
c001ae79:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ae80:	eb 14                	jmp    c001ae96 <IDE::open(int, int, void*)+0x92>
c001ae82:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ae8c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ae96:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ae9d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001aea2:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001aea9:	89 fa                	mov    edx,edi
c001aeab:	89 f1                	mov    ecx,esi
c001aead:	c1 e1 10             	shl    ecx,0x10
c001aeb0:	89 e8                	mov    eax,ebp
c001aeb2:	c1 e0 0b             	shl    eax,0xb
c001aeb5:	09 c1                	or     ecx,eax
c001aeb7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001aebe:	c1 e0 08             	shl    eax,0x8
c001aec1:	09 c1                	or     ecx,eax
c001aec3:	89 c8                	mov    eax,ecx
c001aec5:	0d 08 00 00 80       	or     eax,0x80000008
c001aeca:	ef                   	out    dx,eax
c001aecb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aed0:	ed                   	in     eax,dx
c001aed1:	c1 e8 10             	shr    eax,0x10
c001aed4:	3d ff ff 00 00       	cmp    eax,0xffff
c001aed9:	0f 84 f9 00 00 00    	je     c001afd8 <IDE::open(int, int, void*)+0x1d4>
c001aedf:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001aee5:	89 fa                	mov    edx,edi
c001aee7:	89 c8                	mov    eax,ecx
c001aee9:	ef                   	out    dx,eax
c001aeea:	b0 fe                	mov    al,0xfe
c001aeec:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aef1:	ee                   	out    dx,al
c001aef2:	89 c8                	mov    eax,ecx
c001aef4:	89 fa                	mov    edx,edi
c001aef6:	ef                   	out    dx,eax
c001aef7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aefc:	ed                   	in     eax,dx
c001aefd:	3c fe                	cmp    al,0xfe
c001aeff:	0f 85 a4 00 00 00    	jne    c001afa9 <IDE::open(int, int, void*)+0x1a5>
c001af05:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af0b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af12:	74 30                	je     c001af44 <IDE::open(int, int, void*)+0x140>
c001af14:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af1a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af1e:	83 ec 0c             	sub    esp,0xc
c001af21:	40                   	inc    eax
c001af22:	0f b6 c0             	movzx  eax,al
c001af25:	50                   	push   eax
c001af26:	55                   	push   ebp
c001af27:	56                   	push   esi
c001af28:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af2e:	51                   	push   ecx
c001af2f:	e8 08 3e ff ff       	call   c000ed3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af34:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af39:	83 c4 1c             	add    esp,0x1c
c001af3c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af42:	eb 0a                	jmp    c001af4e <IDE::open(int, int, void*)+0x14a>
c001af44:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001af4e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001af55:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001af5a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af61:	89 ea                	mov    edx,ebp
c001af63:	c1 e1 10             	shl    ecx,0x10
c001af66:	c1 e0 08             	shl    eax,0x8
c001af69:	09 c1                	or     ecx,eax
c001af6b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001af72:	c1 e0 0b             	shl    eax,0xb
c001af75:	09 c1                	or     ecx,eax
c001af77:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001af7d:	89 c8                	mov    eax,ecx
c001af7f:	ef                   	out    dx,eax
c001af80:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001af86:	be fc 0c 00 00       	mov    esi,0xcfc
c001af8b:	89 f2                	mov    edx,esi
c001af8d:	89 f8                	mov    eax,edi
c001af8f:	ee                   	out    dx,al
c001af90:	89 c8                	mov    eax,ecx
c001af92:	89 ea                	mov    edx,ebp
c001af94:	ef                   	out    dx,eax
c001af95:	89 f2                	mov    edx,esi
c001af97:	ed                   	in     eax,dx
c001af98:	0f b6 c0             	movzx  eax,al
c001af9b:	39 f8                	cmp    eax,edi
c001af9d:	74 49                	je     c001afe8 <IDE::open(int, int, void*)+0x1e4>
c001af9f:	83 ec 0c             	sub    esp,0xc
c001afa2:	68 a0 19 02 c0       	push   0xc00219a0
c001afa7:	eb 37                	jmp    c001afe0 <IDE::open(int, int, void*)+0x1dc>
c001afa9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001afb2:	75 1a                	jne    c001afce <IDE::open(int, int, void*)+0x1ca>
c001afb4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001afb9:	3d 8a 00 00 00       	cmp    eax,0x8a
c001afbe:	74 05                	je     c001afc5 <IDE::open(int, int, void*)+0x1c1>
c001afc0:	83 c0 80             	add    eax,0xffffff80
c001afc3:	75 09                	jne    c001afce <IDE::open(int, int, void*)+0x1ca>
c001afc5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001afcc:	eb 1a                	jmp    c001afe8 <IDE::open(int, int, void*)+0x1e4>
c001afce:	83 ec 0c             	sub    esp,0xc
c001afd1:	68 a8 19 02 c0       	push   0xc00219a8
c001afd6:	eb 08                	jmp    c001afe0 <IDE::open(int, int, void*)+0x1dc>
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	68 d9 19 02 c0       	push   0xc00219d9
c001afe0:	e8 dc 57 ff ff       	call   c00107c1 <KePanic(char const*)>
c001afe5:	83 c4 10             	add    esp,0x10
c001afe8:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001afef:	74 1a                	je     c001b00b <IDE::open(int, int, void*)+0x207>
c001aff1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001aff7:	83 e0 fc             	and    eax,0xfffffffc
c001affa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b001:	83 c0 08             	add    eax,0x8
c001b004:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b00b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b011:	89 c2                	mov    edx,eax
c001b013:	83 e2 0f             	and    edx,0xf
c001b016:	83 fa 08             	cmp    edx,0x8
c001b019:	75 0a                	jne    c001b025 <IDE::open(int, int, void*)+0x221>
c001b01b:	83 e8 02             	sub    eax,0x2
c001b01e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b025:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b02b:	89 c2                	mov    edx,eax
c001b02d:	83 e2 0f             	and    edx,0xf
c001b030:	83 fa 08             	cmp    edx,0x8
c001b033:	75 0a                	jne    c001b03f <IDE::open(int, int, void*)+0x23b>
c001b035:	83 e8 02             	sub    eax,0x2
c001b038:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b03f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b046:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b04d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b050:	89 d0                	mov    eax,edx
c001b052:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b056:	8d 7a 01             	lea    edi,[edx+0x1]
c001b059:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b05d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b061:	83 e1 3f             	and    ecx,0x3f
c001b064:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b068:	89 f9                	mov    ecx,edi
c001b06a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b071:	8d 78 02             	lea    edi,[eax+0x2]
c001b074:	0f b6 c9             	movzx  ecx,cl
c001b077:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b07a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b07e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b082:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b086:	83 e2 3f             	and    edx,0x3f
c001b089:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b08d:	89 f9                	mov    ecx,edi
c001b08f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b095:	8d 78 03             	lea    edi,[eax+0x3]
c001b098:	0f b6 d1             	movzx  edx,cl
c001b09b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b09e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b0a2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0a6:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0aa:	83 e1 3f             	and    ecx,0x3f
c001b0ad:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0b1:	89 f9                	mov    ecx,edi
c001b0b3:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b0b9:	8d 78 04             	lea    edi,[eax+0x4]
c001b0bc:	0f b6 c9             	movzx  ecx,cl
c001b0bf:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0c2:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b0c6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0ca:	89 fa                	mov    edx,edi
c001b0cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b0d2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0d6:	83 e2 3f             	and    edx,0x3f
c001b0d9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0dd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b0e4:	66 85 f6             	test   si,si
c001b0e7:	74 65                	je     c001b14e <IDE::open(int, int, void*)+0x34a>
c001b0e9:	89 f9                	mov    ecx,edi
c001b0eb:	83 c0 05             	add    eax,0x5
c001b0ee:	0f b6 d1             	movzx  edx,cl
c001b0f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0f8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b0fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b102:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b106:	83 e0 3f             	and    eax,0x3f
c001b109:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b10d:	eb 3f                	jmp    c001b14e <IDE::open(int, int, void*)+0x34a>
c001b10f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b116:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b11c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b123:	05 06 02 00 00       	add    eax,0x206
c001b128:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b12f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b136:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b13d:	05 06 02 00 00       	add    eax,0x206
c001b142:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b149:	e9 bd fe ff ff       	jmp    c001b00b <IDE::open(int, int, void*)+0x207>
c001b14e:	50                   	push   eax
c001b14f:	50                   	push   eax
c001b150:	6a 00                	push   0x0
c001b152:	53                   	push   ebx
c001b153:	e8 2e fa ff ff       	call   c001ab86 <IDE::prepareInterrupt(unsigned char)>
c001b158:	5a                   	pop    edx
c001b159:	59                   	pop    ecx
c001b15a:	6a 01                	push   0x1
c001b15c:	53                   	push   ebx
c001b15d:	e8 24 fa ff ff       	call   c001ab86 <IDE::prepareInterrupt(unsigned char)>
c001b162:	83 c4 0c             	add    esp,0xc
c001b165:	6a 00                	push   0x0
c001b167:	6a 00                	push   0x0
c001b169:	53                   	push   ebx
c001b16a:	e8 4b fc ff ff       	call   c001adba <IDE::enableIRQs(unsigned char, bool)>
c001b16f:	83 c4 0c             	add    esp,0xc
c001b172:	6a 00                	push   0x0
c001b174:	6a 01                	push   0x1
c001b176:	53                   	push   ebx
c001b177:	e8 3e fc ff ff       	call   c001adba <IDE::enableIRQs(unsigned char, bool)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b186:	74 34                	je     c001b1bc <IDE::open(int, int, void*)+0x3b8>
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	53                   	push   ebx
c001b18c:	6a 01                	push   0x1
c001b18e:	68 82 ad 01 c0       	push   0xc001ad82
c001b193:	6a 0e                	push   0xe
c001b195:	53                   	push   ebx
c001b196:	e8 b1 0b ff ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b19b:	83 c4 14             	add    esp,0x14
c001b19e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b1a4:	53                   	push   ebx
c001b1a5:	6a 01                	push   0x1
c001b1a7:	68 9e ad 01 c0       	push   0xc001ad9e
c001b1ac:	6a 0f                	push   0xf
c001b1ae:	53                   	push   ebx
c001b1af:	e8 98 0b ff ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1b4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b1ba:	eb 38                	jmp    c001b1f4 <IDE::open(int, int, void*)+0x3f0>
c001b1bc:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	53                   	push   ebx
c001b1ca:	6a 00                	push   0x0
c001b1cc:	68 82 ad 01 c0       	push   0xc001ad82
c001b1d1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b1d7:	53                   	push   ebx
c001b1d8:	e8 6f 0b ff ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1dd:	83 c4 14             	add    esp,0x14
c001b1e0:	53                   	push   ebx
c001b1e1:	6a 00                	push   0x0
c001b1e3:	68 9e ad 01 c0       	push   0xc001ad9e
c001b1e8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b1ee:	53                   	push   ebx
c001b1ef:	e8 58 0b ff ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1f6:	83 c4 20             	add    esp,0x20
c001b1f9:	83 ec 0c             	sub    esp,0xc
c001b1fc:	53                   	push   ebx
c001b1fd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b200:	83 c4 0c             	add    esp,0xc
c001b203:	6a 07                	push   0x7
c001b205:	6a 00                	push   0x0
c001b207:	53                   	push   ebx
c001b208:	e8 5f fa ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b20d:	83 c4 0c             	add    esp,0xc
c001b210:	6a 07                	push   0x7
c001b212:	6a 01                	push   0x1
c001b214:	53                   	push   ebx
c001b215:	e8 52 fa ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b21a:	83 c4 0c             	add    esp,0xc
c001b21d:	6a 01                	push   0x1
c001b21f:	6a 00                	push   0x0
c001b221:	53                   	push   ebx
c001b222:	e8 93 fb ff ff       	call   c001adba <IDE::enableIRQs(unsigned char, bool)>
c001b227:	83 c4 0c             	add    esp,0xc
c001b22a:	6a 01                	push   0x1
c001b22c:	6a 01                	push   0x1
c001b22e:	53                   	push   ebx
c001b22f:	e8 86 fb ff ff       	call   c001adba <IDE::enableIRQs(unsigned char, bool)>
c001b234:	83 c4 2c             	add    esp,0x2c
c001b237:	31 c0                	xor    eax,eax
c001b239:	5b                   	pop    ebx
c001b23a:	5e                   	pop    esi
c001b23b:	5f                   	pop    edi
c001b23c:	5d                   	pop    ebp
c001b23d:	c3                   	ret    

c001b23e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b23e:	55                   	push   ebp
c001b23f:	57                   	push   edi
c001b240:	56                   	push   esi
c001b241:	53                   	push   ebx
c001b242:	83 ec 1c             	sub    esp,0x1c
c001b245:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b249:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b24d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b251:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b255:	8d 42 f8             	lea    eax,[edx-0x8]
c001b258:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b25c:	3c 03                	cmp    al,0x3
c001b25e:	77 5a                	ja     c001b2ba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b260:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b264:	0f b6 db             	movzx  ebx,bl
c001b267:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b26b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b26e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b273:	0c 80                	or     al,0x80
c001b275:	50                   	push   eax
c001b276:	6a 0c                	push   0xc
c001b278:	53                   	push   ebx
c001b279:	56                   	push   esi
c001b27a:	e8 2d f9 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b27f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b283:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b288:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b28c:	0f b6 d2             	movzx  edx,dl
c001b28f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b293:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b295:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b29a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b29e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2a2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b2aa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2ae:	83 c4 2c             	add    esp,0x2c
c001b2b1:	5b                   	pop    ebx
c001b2b2:	5e                   	pop    esi
c001b2b3:	5f                   	pop    edi
c001b2b4:	5d                   	pop    ebp
c001b2b5:	e9 f2 f8 ff ff       	jmp    c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2ba:	0f b6 c2             	movzx  eax,dl
c001b2bd:	83 f8 07             	cmp    eax,0x7
c001b2c0:	77 12                	ja     c001b2d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b2c2:	0f b6 db             	movzx  ebx,bl
c001b2c5:	0f b6 c2             	movzx  eax,dl
c001b2c8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b2d0:	01 c2                	add    edx,eax
c001b2d2:	eb 2f                	jmp    c001b303 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b2d4:	83 f8 0d             	cmp    eax,0xd
c001b2d7:	77 13                	ja     c001b2ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b2d9:	0f b6 db             	movzx  ebx,bl
c001b2dc:	0f b6 d2             	movzx  edx,dl
c001b2df:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b2e6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b2ea:	eb 17                	jmp    c001b303 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b2ec:	83 f8 15             	cmp    eax,0x15
c001b2ef:	77 14                	ja     c001b305 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b2f1:	0f b6 db             	movzx  ebx,bl
c001b2f4:	0f b6 d2             	movzx  edx,dl
c001b2f7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b2ff:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b303:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b305:	83 c4 1c             	add    esp,0x1c
c001b308:	5b                   	pop    ebx
c001b309:	5e                   	pop    esi
c001b30a:	5f                   	pop    edi
c001b30b:	5d                   	pop    ebp
c001b30c:	c3                   	ret    
c001b30d:	90                   	nop

c001b30e <IDE::detect()>:
c001b30e:	55                   	push   ebp
c001b30f:	57                   	push   edi
c001b310:	56                   	push   esi
c001b311:	53                   	push   ebx
c001b312:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b318:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b31f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b326:	0f 85 9e 02 00 00    	jne    c001b5ca <IDE::detect()+0x2bc>
c001b32c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b333:	31 f6                	xor    esi,esi
c001b335:	31 ff                	xor    edi,edi
c001b337:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b33f:	89 f8                	mov    eax,edi
c001b341:	c1 e0 06             	shl    eax,0x6
c001b344:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b34c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b350:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b358:	c1 e0 04             	shl    eax,0x4
c001b35b:	83 c8 a0             	or     eax,0xffffffa0
c001b35e:	0f b6 c0             	movzx  eax,al
c001b361:	50                   	push   eax
c001b362:	6a 06                	push   0x6
c001b364:	56                   	push   esi
c001b365:	53                   	push   ebx
c001b366:	e8 41 f8 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b36b:	83 c4 0c             	add    esp,0xc
c001b36e:	6a 0c                	push   0xc
c001b370:	56                   	push   esi
c001b371:	53                   	push   ebx
c001b372:	e8 f5 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b377:	83 c4 0c             	add    esp,0xc
c001b37a:	6a 0c                	push   0xc
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	e8 e9 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	6a 0c                	push   0xc
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	e8 dd f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b38f:	83 c4 0c             	add    esp,0xc
c001b392:	6a 0c                	push   0xc
c001b394:	56                   	push   esi
c001b395:	53                   	push   ebx
c001b396:	e8 d1 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b39b:	68 ec 00 00 00       	push   0xec
c001b3a0:	6a 07                	push   0x7
c001b3a2:	56                   	push   esi
c001b3a3:	53                   	push   ebx
c001b3a4:	e8 03 f8 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3a9:	83 c4 1c             	add    esp,0x1c
c001b3ac:	6a 0c                	push   0xc
c001b3ae:	56                   	push   esi
c001b3af:	53                   	push   ebx
c001b3b0:	e8 b7 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b3b5:	83 c4 0c             	add    esp,0xc
c001b3b8:	6a 0c                	push   0xc
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	e8 ab f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b3c1:	83 c4 0c             	add    esp,0xc
c001b3c4:	6a 0c                	push   0xc
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 9f f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 0c                	push   0xc
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	e8 93 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b3d9:	83 c4 0c             	add    esp,0xc
c001b3dc:	6a 0c                	push   0xc
c001b3de:	56                   	push   esi
c001b3df:	53                   	push   ebx
c001b3e0:	e8 87 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	84 c0                	test   al,al
c001b3ea:	0f 84 61 01 00 00    	je     c001b551 <IDE::detect()+0x243>
c001b3f0:	31 ed                	xor    ebp,ebp
c001b3f2:	50                   	push   eax
c001b3f3:	6a 0c                	push   0xc
c001b3f5:	56                   	push   esi
c001b3f6:	53                   	push   ebx
c001b3f7:	e8 70 f8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	a8 01                	test   al,0x1
c001b401:	0f 85 6b 01 00 00    	jne    c001b572 <IDE::detect()+0x264>
c001b407:	a8 80                	test   al,0x80
c001b409:	75 04                	jne    c001b40f <IDE::detect()+0x101>
c001b40b:	a8 08                	test   al,0x8
c001b40d:	75 23                	jne    c001b432 <IDE::detect()+0x124>
c001b40f:	45                   	inc    ebp
c001b410:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b416:	7e da                	jle    c001b3f2 <IDE::detect()+0xe4>
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	6a 32                	push   0x32
c001b41d:	e8 b2 9e ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001b422:	83 c4 10             	add    esp,0x10
c001b425:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b42b:	75 c5                	jne    c001b3f2 <IDE::detect()+0xe4>
c001b42d:	e9 40 01 00 00       	jmp    c001b572 <IDE::detect()+0x264>
c001b432:	31 c9                	xor    ecx,ecx
c001b434:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b438:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b43c:	83 ec 0c             	sub    esp,0xc
c001b43f:	68 80 00 00 00       	push   0x80
c001b444:	55                   	push   ebp
c001b445:	6a 00                	push   0x0
c001b447:	56                   	push   esi
c001b448:	53                   	push   ebx
c001b449:	e8 f0 fd ff ff       	call   c001b23e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b44e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b453:	89 f8                	mov    eax,edi
c001b455:	c1 e0 06             	shl    eax,0x6
c001b458:	01 d8                	add    eax,ebx
c001b45a:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b461:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b468:	89 d1                	mov    ecx,edx
c001b46a:	89 f2                	mov    edx,esi
c001b46c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b472:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b476:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b47c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b480:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b487:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b48f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b496:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b49e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b4a4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b4ab:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b4b1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b4b5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4b9:	83 c4 20             	add    esp,0x20
c001b4bc:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b4bf:	83 c5 02             	add    ebp,0x2
c001b4c2:	83 c0 02             	add    eax,0x2
c001b4c5:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b4cb:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b4ce:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b4d4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b4d8:	75 e2                	jne    c001b4bc <IDE::detect()+0x1ae>
c001b4da:	89 f8                	mov    eax,edi
c001b4dc:	c1 e0 06             	shl    eax,0x6
c001b4df:	01 d8                	add    eax,ebx
c001b4e1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b4e8:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b4ef:	c1 ea 09             	shr    edx,0x9
c001b4f2:	83 e2 01             	and    edx,0x1
c001b4f5:	80 e1 01             	and    cl,0x1
c001b4f8:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b4fe:	75 22                	jne    c001b522 <IDE::detect()+0x214>
c001b500:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b507:	74 47                	je     c001b550 <IDE::detect()+0x242>
c001b509:	83 ec 0c             	sub    esp,0xc
c001b50c:	68 7c 01 00 00       	push   0x17c
c001b511:	e8 a1 c5 fe ff       	call   c0007ab7 <malloc>
c001b516:	89 04 24             	mov    DWORD PTR [esp],eax
c001b519:	89 c5                	mov    ebp,eax
c001b51b:	e8 16 05 00 00       	call   c001ba36 <ATA::ATA()>
c001b520:	eb 17                	jmp    c001b539 <IDE::detect()+0x22b>
c001b522:	83 ec 0c             	sub    esp,0xc
c001b525:	68 84 01 00 00       	push   0x184
c001b52a:	e8 88 c5 fe ff       	call   c0007ab7 <malloc>
c001b52f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b532:	89 c5                	mov    ebp,eax
c001b534:	e8 6f 0e 00 00       	call   c001c3a8 <ATAPI::ATAPI()>
c001b539:	5a                   	pop    edx
c001b53a:	59                   	pop    ecx
c001b53b:	55                   	push   ebp
c001b53c:	53                   	push   ebx
c001b53d:	e8 5e 08 ff ff       	call   c000bda0 <Device::addChild(Device*)>
c001b542:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b545:	53                   	push   ebx
c001b546:	57                   	push   edi
c001b547:	6a 00                	push   0x0
c001b549:	55                   	push   ebp
c001b54a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b54d:	83 c4 20             	add    esp,0x20
c001b550:	47                   	inc    edi
c001b551:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b556:	74 0d                	je     c001b565 <IDE::detect()+0x257>
c001b558:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b560:	e9 da fd ff ff       	jmp    c001b33f <IDE::detect()+0x31>
c001b565:	4e                   	dec    esi
c001b566:	74 62                	je     c001b5ca <IDE::detect()+0x2bc>
c001b568:	be 01 00 00 00       	mov    esi,0x1
c001b56d:	e9 c5 fd ff ff       	jmp    c001b337 <IDE::detect()+0x29>
c001b572:	50                   	push   eax
c001b573:	6a 04                	push   0x4
c001b575:	56                   	push   esi
c001b576:	53                   	push   ebx
c001b577:	e8 f0 f6 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b57c:	83 c4 0c             	add    esp,0xc
c001b57f:	6a 05                	push   0x5
c001b581:	56                   	push   esi
c001b582:	53                   	push   ebx
c001b583:	89 c5                	mov    ebp,eax
c001b585:	e8 e2 f6 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b58a:	89 e9                	mov    ecx,ebp
c001b58c:	83 c4 10             	add    esp,0x10
c001b58f:	0f b6 e9             	movzx  ebp,cl
c001b592:	83 fd 14             	cmp    ebp,0x14
c001b595:	74 2d                	je     c001b5c4 <IDE::detect()+0x2b6>
c001b597:	83 fd 69             	cmp    ebp,0x69
c001b59a:	75 b5                	jne    c001b551 <IDE::detect()+0x243>
c001b59c:	3c 96                	cmp    al,0x96
c001b59e:	75 b1                	jne    c001b551 <IDE::detect()+0x243>
c001b5a0:	68 a1 00 00 00       	push   0xa1
c001b5a5:	6a 07                	push   0x7
c001b5a7:	56                   	push   esi
c001b5a8:	53                   	push   ebx
c001b5a9:	e8 fe f5 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5ae:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b5b5:	e8 1a 9d ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	b1 01                	mov    cl,0x1
c001b5bf:	e9 70 fe ff ff       	jmp    c001b434 <IDE::detect()+0x126>
c001b5c4:	3c eb                	cmp    al,0xeb
c001b5c6:	75 cf                	jne    c001b597 <IDE::detect()+0x289>
c001b5c8:	eb d6                	jmp    c001b5a0 <IDE::detect()+0x292>
c001b5ca:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b5d0:	5b                   	pop    ebx
c001b5d1:	5e                   	pop    esi
c001b5d2:	5f                   	pop    edi
c001b5d3:	5d                   	pop    ebp
c001b5d4:	c3                   	ret    
c001b5d5:	90                   	nop

c001b5d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b5d6:	55                   	push   ebp
c001b5d7:	57                   	push   edi
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	83 ec 1c             	sub    esp,0x1c
c001b5dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b5e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b5e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b5e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b5f1:	88 c3                	mov    bl,al
c001b5f3:	25 ff 00 00 00       	and    eax,0xff
c001b5f8:	0f 84 88 00 00 00    	je     c001b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b5fe:	83 ec 0c             	sub    esp,0xc
c001b601:	89 c7                	mov    edi,eax
c001b603:	68 03 1a 02 c0       	push   0xc0021a03
c001b608:	e8 30 f3 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	83 ff 01             	cmp    edi,0x1
c001b613:	74 6b                	je     c001b680 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b615:	83 ff 02             	cmp    edi,0x2
c001b618:	75 58                	jne    c001b672 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b61a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b61f:	50                   	push   eax
c001b620:	6a 01                	push   0x1
c001b622:	01 ff                	add    edi,edi
c001b624:	09 fe                	or     esi,edi
c001b626:	89 f0                	mov    eax,esi
c001b628:	0f b6 f0             	movzx  esi,al
c001b62b:	c1 e6 06             	shl    esi,0x6
c001b62e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b636:	50                   	push   eax
c001b637:	55                   	push   ebp
c001b638:	e8 2f f6 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b63d:	83 c4 10             	add    esp,0x10
c001b640:	a8 01                	test   al,0x1
c001b642:	74 02                	je     c001b646 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b644:	b3 07                	mov    bl,0x7
c001b646:	a8 02                	test   al,0x2
c001b648:	74 02                	je     c001b64c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b64a:	b3 03                	mov    bl,0x3
c001b64c:	a8 04                	test   al,0x4
c001b64e:	74 02                	je     c001b652 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b650:	b3 14                	mov    bl,0x14
c001b652:	a8 08                	test   al,0x8
c001b654:	74 02                	je     c001b658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b656:	b3 03                	mov    bl,0x3
c001b658:	a8 10                	test   al,0x10
c001b65a:	74 02                	je     c001b65e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b65c:	b3 15                	mov    bl,0x15
c001b65e:	a8 20                	test   al,0x20
c001b660:	74 02                	je     c001b664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b662:	b3 03                	mov    bl,0x3
c001b664:	a8 40                	test   al,0x40
c001b666:	74 02                	je     c001b66a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b668:	b3 16                	mov    bl,0x16
c001b66a:	a8 80                	test   al,0x80
c001b66c:	74 18                	je     c001b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b66e:	b3 0d                	mov    bl,0xd
c001b670:	eb 14                	jmp    c001b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b672:	83 ff 03             	cmp    edi,0x3
c001b675:	74 0d                	je     c001b684 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b677:	83 ff 04             	cmp    edi,0x4
c001b67a:	75 0a                	jne    c001b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b67c:	b3 08                	mov    bl,0x8
c001b67e:	eb 06                	jmp    c001b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b680:	b3 13                	mov    bl,0x13
c001b682:	eb 02                	jmp    c001b686 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b684:	b3 17                	mov    bl,0x17
c001b686:	83 c4 1c             	add    esp,0x1c
c001b689:	88 d8                	mov    al,bl
c001b68b:	5b                   	pop    ebx
c001b68c:	5e                   	pop    esi
c001b68d:	5f                   	pop    edi
c001b68e:	5d                   	pop    ebp
c001b68f:	c3                   	ret    

c001b690 <IDE::polling(unsigned char, unsigned int)>:
c001b690:	57                   	push   edi
c001b691:	56                   	push   esi
c001b692:	53                   	push   ebx
c001b693:	bb 04 00 00 00       	mov    ebx,0x4
c001b698:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b69c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6a1:	52                   	push   edx
c001b6a2:	6a 0c                	push   0xc
c001b6a4:	56                   	push   esi
c001b6a5:	57                   	push   edi
c001b6a6:	e8 c1 f5 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	4b                   	dec    ebx
c001b6af:	75 f0                	jne    c001b6a1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b6b1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b6b6:	50                   	push   eax
c001b6b7:	6a 0c                	push   0xc
c001b6b9:	56                   	push   esi
c001b6ba:	57                   	push   edi
c001b6bb:	e8 ac f5 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001b6c0:	83 c4 10             	add    esp,0x10
c001b6c3:	a8 01                	test   al,0x1
c001b6c5:	75 17                	jne    c001b6de <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b6c7:	a8 20                	test   al,0x20
c001b6c9:	75 0f                	jne    c001b6da <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b6cb:	4b                   	dec    ebx
c001b6cc:	74 10                	je     c001b6de <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b6ce:	a8 80                	test   al,0x80
c001b6d0:	75 e4                	jne    c001b6b6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b6d2:	a8 08                	test   al,0x8
c001b6d4:	74 e0                	je     c001b6b6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b6d6:	31 c0                	xor    eax,eax
c001b6d8:	eb 06                	jmp    c001b6e0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b6da:	b0 01                	mov    al,0x1
c001b6dc:	eb 02                	jmp    c001b6e0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b6de:	b0 02                	mov    al,0x2
c001b6e0:	5b                   	pop    ebx
c001b6e1:	5e                   	pop    esi
c001b6e2:	5f                   	pop    edi
c001b6e3:	c3                   	ret    

c001b6e4 <SATABus::close(int, int, void*)>:
c001b6e4:	31 c0                	xor    eax,eax
c001b6e6:	c3                   	ret    
c001b6e7:	90                   	nop

c001b6e8 <SATABus::detect()>:
c001b6e8:	c3                   	ret    
c001b6e9:	90                   	nop

c001b6ea <SATABus::SATABus()>:
c001b6ea:	83 ec 0c             	sub    esp,0xc
c001b6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f1:	83 ec 08             	sub    esp,0x8
c001b6f4:	68 3c 1a 02 c0       	push   0xc0021a3c
c001b6f9:	50                   	push   eax
c001b6fa:	e8 e5 09 ff ff       	call   c000c0e4 <HardDiskController::HardDiskController(char const*)>
c001b6ff:	83 c4 10             	add    esp,0x10
c001b702:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c001b707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70b:	89 10                	mov    DWORD PTR [eax],edx
c001b70d:	83 ec 0c             	sub    esp,0xc
c001b710:	6a 50                	push   0x50
c001b712:	e8 7a c7 fe ff       	call   c0007e91 <Phys::allocateContiguousPages(int)>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	89 c2                	mov    edx,eax
c001b71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b720:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b726:	83 ec 0c             	sub    esp,0xc
c001b729:	6a 50                	push   0x50
c001b72b:	e8 c1 de fe ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	89 c2                	mov    edx,eax
c001b735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b739:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b73f:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b744:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b748:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b74e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b752:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b758:	83 ec 0c             	sub    esp,0xc
c001b75b:	6a 03                	push   0x3
c001b75d:	6a 50                	push   0x50
c001b75f:	51                   	push   ecx
c001b760:	52                   	push   edx
c001b761:	50                   	push   eax
c001b762:	e8 83 e8 fe ff       	call   c0009fea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b767:	83 c4 20             	add    esp,0x20
c001b76a:	90                   	nop
c001b76b:	83 c4 0c             	add    esp,0xc
c001b76e:	c3                   	ret    
c001b76f:	90                   	nop

c001b770 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b774:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b777:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b77a:	09 c2                	or     edx,eax
c001b77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b780:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b786:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b788:	31 c0                	xor    eax,eax
c001b78a:	c1 e9 08             	shr    ecx,0x8
c001b78d:	83 e1 0f             	and    ecx,0xf
c001b790:	39 c8                	cmp    eax,ecx
c001b792:	74 0a                	je     c001b79e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b794:	f6 c2 01             	test   dl,0x1
c001b797:	74 08                	je     c001b7a1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b799:	d1 ea                	shr    edx,1
c001b79b:	40                   	inc    eax
c001b79c:	eb f2                	jmp    c001b790 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b79e:	83 c8 ff             	or     eax,0xffffffff
c001b7a1:	c3                   	ret    

c001b7a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b7a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b7a6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7a9:	89 c2                	mov    edx,eax
c001b7ab:	c1 ea 08             	shr    edx,0x8
c001b7ae:	83 e2 0f             	and    edx,0xf
c001b7b1:	4a                   	dec    edx
c001b7b2:	75 32                	jne    c001b7e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7b4:	83 e0 0f             	and    eax,0xf
c001b7b7:	83 f8 03             	cmp    eax,0x3
c001b7ba:	75 2a                	jne    c001b7e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7bc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b7bf:	b8 02 00 00 00       	mov    eax,0x2
c001b7c4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b7ca:	74 1c                	je     c001b7e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b7cc:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b7d2:	b8 04 00 00 00       	mov    eax,0x4
c001b7d7:	74 0f                	je     c001b7e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b7d9:	31 c0                	xor    eax,eax
c001b7db:	83 fa 03             	cmp    edx,0x3
c001b7de:	0f 94 c0             	sete   al
c001b7e1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b7e5:	c3                   	ret    
c001b7e6:	31 c0                	xor    eax,eax
c001b7e8:	c3                   	ret    
c001b7e9:	90                   	nop

c001b7ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b7f1:	0f ba e2 0f          	bt     edx,0xf
c001b7f5:	72 f7                	jb     c001b7ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b7f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b7fa:	83 ca 10             	or     edx,0x10
c001b7fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b800:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b803:	83 ca 01             	or     edx,0x1
c001b806:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b809:	c3                   	ret    

c001b80a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b80a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b80e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b811:	83 e2 fe             	and    edx,0xfffffffe
c001b814:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b817:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b81a:	83 e2 ef             	and    edx,0xffffffef
c001b81d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b820:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b823:	0f ba e2 0e          	bt     edx,0xe
c001b827:	72 f7                	jb     c001b820 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b829:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b82c:	0f ba e2 0f          	bt     edx,0xf
c001b830:	72 ee                	jb     c001b820 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b832:	c3                   	ret    
c001b833:	90                   	nop

c001b834 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b834:	55                   	push   ebp
c001b835:	57                   	push   edi
c001b836:	56                   	push   esi
c001b837:	53                   	push   ebx
c001b838:	83 ec 1c             	sub    esp,0x1c
c001b83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b83f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b843:	53                   	push   ebx
c001b844:	57                   	push   edi
c001b845:	e8 c0 ff ff ff       	call   c001b80a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b84a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b84e:	83 ec 0c             	sub    esp,0xc
c001b851:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b857:	c1 e5 0a             	shl    ebp,0xa
c001b85a:	01 e8                	add    eax,ebp
c001b85c:	89 03                	mov    DWORD PTR [ebx],eax
c001b85e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b860:	68 00 04 00 00       	push   0x400
c001b865:	6a 00                	push   0x0
c001b867:	50                   	push   eax
c001b868:	e8 83 4c fe ff       	call   c00004f0 <memset>
c001b86d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b873:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b877:	83 c4 1c             	add    esp,0x1c
c001b87a:	01 e8                	add    eax,ebp
c001b87c:	89 03                	mov    DWORD PTR [ebx],eax
c001b87e:	c1 e6 08             	shl    esi,0x8
c001b881:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b888:	81 c6 00 80 00 00    	add    esi,0x8000
c001b88e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b894:	01 f0                	add    eax,esi
c001b896:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b899:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b89c:	68 00 01 00 00       	push   0x100
c001b8a1:	6a 00                	push   0x0
c001b8a3:	50                   	push   eax
c001b8a4:	e8 47 4c fe ff       	call   c00004f0 <memset>
c001b8a9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b8af:	31 d2                	xor    edx,edx
c001b8b1:	01 f0                	add    eax,esi
c001b8b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8b6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b8bd:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b8c3:	01 ee                	add    esi,ebp
c001b8c5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	c1 e5 0d             	shl    ebp,0xd
c001b8cf:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b8d5:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b8db:	83 c6 20             	add    esi,0x20
c001b8de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b8e2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b8e8:	01 e8                	add    eax,ebp
c001b8ea:	01 d0                	add    eax,edx
c001b8ec:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b8ef:	52                   	push   edx
c001b8f0:	68 00 01 00 00       	push   0x100
c001b8f5:	6a 00                	push   0x0
c001b8f7:	50                   	push   eax
c001b8f8:	e8 f3 4b fe ff       	call   c00004f0 <memset>
c001b8fd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b903:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b90a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	01 e8                	add    eax,ebp
c001b913:	01 d0                	add    eax,edx
c001b915:	81 c2 00 01 00 00    	add    edx,0x100
c001b91b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b91e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b924:	75 af                	jne    c001b8d5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b926:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b92d:	50                   	push   eax
c001b92e:	50                   	push   eax
c001b92f:	53                   	push   ebx
c001b930:	57                   	push   edi
c001b931:	e8 b4 fe ff ff       	call   c001b7ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b936:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b93d:	83 c4 2c             	add    esp,0x2c
c001b940:	5b                   	pop    ebx
c001b941:	5e                   	pop    esi
c001b942:	5f                   	pop    edi
c001b943:	5d                   	pop    ebp
c001b944:	c3                   	ret    
c001b945:	90                   	nop

c001b946 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b946:	55                   	push   ebp
c001b947:	57                   	push   edi
c001b948:	56                   	push   esi
c001b949:	53                   	push   ebx
c001b94a:	31 db                	xor    ebx,ebx
c001b94c:	83 ec 0c             	sub    esp,0xc
c001b94f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b953:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b957:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b95a:	f7 c7 01 00 00 00    	test   edi,0x1
c001b960:	74 7a                	je     c001b9dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b962:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b966:	89 d8                	mov    eax,ebx
c001b968:	c1 e0 07             	shl    eax,0x7
c001b96b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b972:	55                   	push   ebp
c001b973:	56                   	push   esi
c001b974:	e8 29 fe ff ff       	call   c001b7a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b979:	5a                   	pop    edx
c001b97a:	59                   	pop    ecx
c001b97b:	83 f8 01             	cmp    eax,0x1
c001b97e:	75 21                	jne    c001b9a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b980:	50                   	push   eax
c001b981:	53                   	push   ebx
c001b982:	55                   	push   ebp
c001b983:	56                   	push   esi
c001b984:	e8 ab fe ff ff       	call   c001b834 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b989:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b990:	e8 22 c1 fe ff       	call   c0007ab7 <malloc>
c001b995:	89 04 24             	mov    DWORD PTR [esp],eax
c001b998:	89 c5                	mov    ebp,eax
c001b99a:	e8 c1 10 00 00       	call   c001ca60 <SATA::SATA()>
c001b99f:	eb 24                	jmp    c001b9c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b9a1:	83 f8 04             	cmp    eax,0x4
c001b9a4:	75 36                	jne    c001b9dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9a6:	51                   	push   ecx
c001b9a7:	53                   	push   ebx
c001b9a8:	55                   	push   ebp
c001b9a9:	56                   	push   esi
c001b9aa:	e8 85 fe ff ff       	call   c001b834 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9af:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b9b6:	e8 fc c0 fe ff       	call   c0007ab7 <malloc>
c001b9bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9be:	89 c5                	mov    ebp,eax
c001b9c0:	e8 f5 17 00 00       	call   c001d1ba <SATAPI::SATAPI()>
c001b9c5:	58                   	pop    eax
c001b9c6:	5a                   	pop    edx
c001b9c7:	55                   	push   ebp
c001b9c8:	56                   	push   esi
c001b9c9:	e8 d2 03 ff ff       	call   c000bda0 <Device::addChild(Device*)>
c001b9ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9d1:	56                   	push   esi
c001b9d2:	6a 00                	push   0x0
c001b9d4:	53                   	push   ebx
c001b9d5:	55                   	push   ebp
c001b9d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9d9:	83 c4 20             	add    esp,0x20
c001b9dc:	d1 ef                	shr    edi,1
c001b9de:	43                   	inc    ebx
c001b9df:	83 fb 20             	cmp    ebx,0x20
c001b9e2:	0f 85 72 ff ff ff    	jne    c001b95a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b9e8:	83 c4 0c             	add    esp,0xc
c001b9eb:	5b                   	pop    ebx
c001b9ec:	5e                   	pop    esi
c001b9ed:	5f                   	pop    edi
c001b9ee:	5d                   	pop    ebp
c001b9ef:	c3                   	ret    

c001b9f0 <SATABus::open(int, int, void*)>:
c001b9f0:	83 ec 14             	sub    esp,0x14
c001b9f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9f7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b9fd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba03:	52                   	push   edx
c001ba04:	50                   	push   eax
c001ba05:	e8 3c ff ff ff       	call   c001b946 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba0a:	31 c0                	xor    eax,eax
c001ba0c:	83 c4 1c             	add    esp,0x1c
c001ba0f:	c3                   	ret    

c001ba10 <ATA::close(int, int, void*)>:
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba1d:	85 c0                	test   eax,eax
c001ba1f:	74 0c                	je     c001ba2d <ATA::close(int, int, void*)+0x1d>
c001ba21:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba23:	83 ec 0c             	sub    esp,0xc
c001ba26:	50                   	push   eax
c001ba27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba2a:	83 c4 10             	add    esp,0x10
c001ba2d:	31 c0                	xor    eax,eax
c001ba2f:	83 c4 0c             	add    esp,0xc
c001ba32:	c3                   	ret    
c001ba33:	90                   	nop

c001ba34 <ATA::powerSaving(PowerSavingLevel)>:
c001ba34:	c3                   	ret    
c001ba35:	90                   	nop

c001ba36 <ATA::ATA()>:
c001ba36:	83 ec 0c             	sub    esp,0xc
c001ba39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3d:	83 ec 04             	sub    esp,0x4
c001ba40:	68 00 02 00 00       	push   0x200
c001ba45:	68 35 1b 02 c0       	push   0xc0021b35
c001ba4a:	50                   	push   eax
c001ba4b:	e8 1e 07 ff ff       	call   c000c16e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5c:	89 10                	mov    DWORD PTR [eax],edx
c001ba5e:	90                   	nop
c001ba5f:	83 c4 0c             	add    esp,0xc
c001ba62:	c3                   	ret    
c001ba63:	90                   	nop

c001ba64 <ATA::flush(bool)>:
c001ba64:	53                   	push   ebx
c001ba65:	83 ec 08             	sub    esp,0x8
c001ba68:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba71:	83 f8 01             	cmp    eax,0x1
c001ba74:	19 c0                	sbb    eax,eax
c001ba76:	83 e0 fd             	and    eax,0xfffffffd
c001ba79:	05 ea 00 00 00       	add    eax,0xea
c001ba7e:	50                   	push   eax
c001ba7f:	6a 07                	push   0x7
c001ba81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ba88:	50                   	push   eax
c001ba89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ba8f:	e8 18 f1 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba94:	83 c4 0c             	add    esp,0xc
c001ba97:	6a 00                	push   0x0
c001ba99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001baa0:	50                   	push   eax
c001baa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001baa7:	e8 e4 fb ff ff       	call   c001b690 <IDE::polling(unsigned char, unsigned int)>
c001baac:	83 c4 18             	add    esp,0x18
c001baaf:	5b                   	pop    ebx
c001bab0:	c3                   	ret    
c001bab1:	90                   	nop

c001bab2 <ATA::readyForCommand()>:
c001bab2:	56                   	push   esi
c001bab3:	53                   	push   ebx
c001bab4:	53                   	push   ebx
c001bab5:	31 db                	xor    ebx,ebx
c001bab7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001babb:	51                   	push   ecx
c001babc:	6a 0c                	push   0xc
c001babe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bac5:	50                   	push   eax
c001bac6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bacc:	e8 9b f1 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	a8 88                	test   al,0x88
c001bad6:	74 1f                	je     c001baf7 <ATA::readyForCommand()+0x45>
c001bad8:	43                   	inc    ebx
c001bad9:	83 fb 63             	cmp    ebx,0x63
c001badc:	7e dd                	jle    c001babb <ATA::readyForCommand()+0x9>
c001bade:	83 ec 0c             	sub    esp,0xc
c001bae1:	6a 0a                	push   0xa
c001bae3:	e8 ec 97 ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001baf1:	75 c8                	jne    c001babb <ATA::readyForCommand()+0x9>
c001baf3:	31 c0                	xor    eax,eax
c001baf5:	eb 02                	jmp    c001baf9 <ATA::readyForCommand()+0x47>
c001baf7:	b0 01                	mov    al,0x1
c001baf9:	5a                   	pop    edx
c001bafa:	5b                   	pop    ebx
c001bafb:	5e                   	pop    esi
c001bafc:	c3                   	ret    
c001bafd:	90                   	nop

c001bafe <ATA::access(unsigned long long, int, void*, bool)>:
c001bafe:	55                   	push   ebp
c001baff:	57                   	push   edi
c001bb00:	56                   	push   esi
c001bb01:	53                   	push   ebx
c001bb02:	83 ec 2c             	sub    esp,0x2c
c001bb05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb0d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb11:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb19:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb1d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bb21:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb2b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb35:	c1 e0 06             	shl    eax,0x6
c001bb38:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb40:	74 5b                	je     c001bb9d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bb42:	89 fa                	mov    edx,edi
c001bb44:	89 f0                	mov    eax,esi
c001bb46:	c1 ea 1c             	shr    edx,0x1c
c001bb49:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bb4d:	89 d1                	mov    ecx,edx
c001bb4f:	09 c1                	or     ecx,eax
c001bb51:	74 25                	je     c001bb78 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bb53:	31 ed                	xor    ebp,ebp
c001bb55:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bb5c:	89 fa                	mov    edx,edi
c001bb5e:	89 f0                	mov    eax,esi
c001bb60:	0f ad d0             	shrd   eax,edx,cl
c001bb63:	d3 ea                	shr    edx,cl
c001bb65:	f6 c1 20             	test   cl,0x20
c001bb68:	74 02                	je     c001bb6c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bb6a:	89 d0                	mov    eax,edx
c001bb6c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bb70:	45                   	inc    ebp
c001bb71:	83 fd 06             	cmp    ebp,0x6
c001bb74:	75 df                	jne    c001bb55 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bb76:	eb 71                	jmp    c001bbe9 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bb78:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bb7d:	89 f0                	mov    eax,esi
c001bb7f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bb86:	0f ac f8 10          	shrd   eax,edi,0x10
c001bb8a:	bf 01 00 00 00       	mov    edi,0x1
c001bb8f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bb93:	c1 ee 18             	shr    esi,0x18
c001bb96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bb9b:	eb 53                	jmp    c001bbf0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bb9d:	6a 00                	push   0x0
c001bb9f:	6a 3f                	push   0x3f
c001bba1:	57                   	push   edi
c001bba2:	56                   	push   esi
c001bba3:	e8 d8 2a 00 00       	call   c001e680 <__umoddi3>
c001bba8:	83 c4 10             	add    esp,0x10
c001bbab:	40                   	inc    eax
c001bbac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bbb0:	6a 00                	push   0x0
c001bbb2:	68 f0 03 00 00       	push   0x3f0
c001bbb7:	57                   	push   edi
c001bbb8:	56                   	push   esi
c001bbb9:	e8 c2 29 00 00       	call   c001e580 <__udivdi3>
c001bbbe:	83 c4 10             	add    esp,0x10
c001bbc1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bbc6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbcd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbd2:	6a 00                	push   0x0
c001bbd4:	6a 3f                	push   0x3f
c001bbd6:	57                   	push   edi
c001bbd7:	31 ff                	xor    edi,edi
c001bbd9:	56                   	push   esi
c001bbda:	e8 a1 29 00 00       	call   c001e580 <__udivdi3>
c001bbdf:	83 c4 10             	add    esp,0x10
c001bbe2:	83 e0 0f             	and    eax,0xf
c001bbe5:	89 c6                	mov    esi,eax
c001bbe7:	eb 07                	jmp    c001bbf0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bbe9:	31 f6                	xor    esi,esi
c001bbeb:	bf 02 00 00 00       	mov    edi,0x2
c001bbf0:	50                   	push   eax
c001bbf1:	6a 00                	push   0x0
c001bbf3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bbfa:	50                   	push   eax
c001bbfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bbff:	e8 b6 f1 ff ff       	call   c001adba <IDE::enableIRQs(unsigned char, bool)>
c001bc04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc07:	e8 a6 fe ff ff       	call   c001bab2 <ATA::readyForCommand()>
c001bc0c:	83 c4 10             	add    esp,0x10
c001bc0f:	84 c0                	test   al,al
c001bc11:	75 0a                	jne    c001bc1d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bc13:	be 01 00 00 00       	mov    esi,0x1
c001bc18:	e9 9b 02 00 00       	jmp    c001beb8 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bc1d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc23:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc29:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc30:	c1 e0 04             	shl    eax,0x4
c001bc33:	09 c6                	or     esi,eax
c001bc35:	f7 c7 03 00 00 00    	test   edi,0x3
c001bc3b:	75 05                	jne    c001bc42 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bc3d:	83 ce a0             	or     esi,0xffffffa0
c001bc40:	eb 03                	jmp    c001bc45 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bc42:	83 ce e0             	or     esi,0xffffffe0
c001bc45:	89 f0                	mov    eax,esi
c001bc47:	0f b6 f0             	movzx  esi,al
c001bc4a:	56                   	push   esi
c001bc4b:	6a 06                	push   0x6
c001bc4d:	51                   	push   ecx
c001bc4e:	52                   	push   edx
c001bc4f:	e8 58 ef ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 01                	push   0x1
c001bc5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc62:	50                   	push   eax
c001bc63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc69:	e8 3e ef ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc6e:	89 f8                	mov    eax,edi
c001bc70:	83 c4 10             	add    esp,0x10
c001bc73:	0f b6 f0             	movzx  esi,al
c001bc76:	83 fe 02             	cmp    esi,0x2
c001bc79:	75 6e                	jne    c001bce9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bc7b:	6a 00                	push   0x0
c001bc7d:	6a 08                	push   0x8
c001bc7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc86:	50                   	push   eax
c001bc87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc8d:	e8 1a ef ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc92:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bc97:	50                   	push   eax
c001bc98:	6a 09                	push   0x9
c001bc9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bca1:	50                   	push   eax
c001bca2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bca8:	e8 ff ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcad:	83 c4 20             	add    esp,0x20
c001bcb0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bcb5:	50                   	push   eax
c001bcb6:	6a 0a                	push   0xa
c001bcb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcbf:	50                   	push   eax
c001bcc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcc6:	e8 e1 ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bccb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bcd0:	50                   	push   eax
c001bcd1:	6a 0b                	push   0xb
c001bcd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcda:	50                   	push   eax
c001bcdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bce1:	e8 c6 ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce6:	83 c4 20             	add    esp,0x20
c001bce9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bcee:	50                   	push   eax
c001bcef:	6a 02                	push   0x2
c001bcf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcf8:	50                   	push   eax
c001bcf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcff:	e8 a8 ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd04:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd09:	50                   	push   eax
c001bd0a:	6a 03                	push   0x3
c001bd0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd13:	50                   	push   eax
c001bd14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd1a:	e8 8d ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd1f:	83 c4 20             	add    esp,0x20
c001bd22:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd27:	50                   	push   eax
c001bd28:	6a 04                	push   0x4
c001bd2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd31:	50                   	push   eax
c001bd32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd38:	e8 6f ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd42:	50                   	push   eax
c001bd43:	6a 05                	push   0x5
c001bd45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd4c:	50                   	push   eax
c001bd4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd53:	e8 54 ee ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd58:	83 c4 20             	add    esp,0x20
c001bd5b:	83 fe 02             	cmp    esi,0x2
c001bd5e:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bd63:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bd68:	85 c9                	test   ecx,ecx
c001bd6a:	74 07                	je     c001bd73 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001bd6c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bd71:	75 47                	jne    c001bdba <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001bd73:	89 f8                	mov    eax,edi
c001bd75:	0f b6 f8             	movzx  edi,al
c001bd78:	31 c0                	xor    eax,eax
c001bd7a:	83 ff 02             	cmp    edi,0x2
c001bd7d:	0f 95 c0             	setne  al
c001bd80:	89 c6                	mov    esi,eax
c001bd82:	74 0c                	je     c001bd90 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001bd84:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bd89:	b8 30 00 00 00       	mov    eax,0x30
c001bd8e:	75 2f                	jne    c001bdbf <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bd90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd94:	83 f2 01             	xor    edx,0x1
c001bd97:	85 c9                	test   ecx,ecx
c001bd99:	74 09                	je     c001bda4 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001bd9b:	84 d2                	test   dl,dl
c001bd9d:	b8 24 00 00 00       	mov    eax,0x24
c001bda2:	75 1b                	jne    c001bdbf <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bda4:	85 f6                	test   esi,esi
c001bda6:	0f 84 67 fe ff ff    	je     c001bc13 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bdac:	84 d2                	test   dl,dl
c001bdae:	b8 20 00 00 00       	mov    eax,0x20
c001bdb3:	75 0a                	jne    c001bdbf <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bdb5:	e9 59 fe ff ff       	jmp    c001bc13 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bdba:	b8 34 00 00 00       	mov    eax,0x34
c001bdbf:	50                   	push   eax
c001bdc0:	6a 07                	push   0x7
c001bdc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdc9:	50                   	push   eax
c001bdca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdd0:	e8 d7 ed ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdd5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bdd9:	83 c4 10             	add    esp,0x10
c001bddc:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001bde1:	85 f6                	test   esi,esi
c001bde3:	0f 84 b5 00 00 00    	je     c001be9e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001bde9:	50                   	push   eax
c001bdea:	6a 01                	push   0x1
c001bdec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdf3:	50                   	push   eax
c001bdf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdfa:	e8 91 f8 ff ff       	call   c001b690 <IDE::polling(unsigned char, unsigned int)>
c001bdff:	83 c4 10             	add    esp,0x10
c001be02:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be08:	0f b6 c0             	movzx  eax,al
c001be0b:	85 c0                	test   eax,eax
c001be0d:	74 1f                	je     c001be2e <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001be0f:	50                   	push   eax
c001be10:	89 c6                	mov    esi,eax
c001be12:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be19:	0f b6 d2             	movzx  edx,dl
c001be1c:	50                   	push   eax
c001be1d:	52                   	push   edx
c001be1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be24:	e8 ad f7 ff ff       	call   c001b5d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be29:	e9 87 00 00 00       	jmp    c001beb5 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001be2e:	85 ed                	test   ebp,ebp
c001be30:	74 3b                	je     c001be6d <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001be32:	31 ff                	xor    edi,edi
c001be34:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be38:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001be3c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001be41:	50                   	push   eax
c001be42:	50                   	push   eax
c001be43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be4a:	50                   	push   eax
c001be4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be51:	e8 44 ed ff ff       	call   c001ab9a <IDE::getBase(unsigned char)>
c001be56:	89 c2                	mov    edx,eax
c001be58:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001be5d:	66 ef                	out    dx,ax
c001be5f:	47                   	inc    edi
c001be60:	83 c4 10             	add    esp,0x10
c001be63:	81 ff 00 01 00 00    	cmp    edi,0x100
c001be69:	75 c9                	jne    c001be34 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001be6b:	eb 23                	jmp    c001be90 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001be6d:	51                   	push   ecx
c001be6e:	0f b6 d2             	movzx  edx,dl
c001be71:	51                   	push   ecx
c001be72:	52                   	push   edx
c001be73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be79:	e8 1c ed ff ff       	call   c001ab9a <IDE::getBase(unsigned char)>
c001be7e:	b9 00 01 00 00       	mov    ecx,0x100
c001be83:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001be87:	89 c2                	mov    edx,eax
c001be89:	fc                   	cld    
c001be8a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001be8d:	83 c4 10             	add    esp,0x10
c001be90:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001be98:	4e                   	dec    esi
c001be99:	e9 43 ff ff ff       	jmp    c001bde1 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001be9e:	31 f6                	xor    esi,esi
c001bea0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bea5:	74 11                	je     c001beb8 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bea7:	50                   	push   eax
c001bea8:	50                   	push   eax
c001bea9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001beae:	50                   	push   eax
c001beaf:	53                   	push   ebx
c001beb0:	e8 af fb ff ff       	call   c001ba64 <ATA::flush(bool)>
c001beb5:	83 c4 10             	add    esp,0x10
c001beb8:	83 c4 2c             	add    esp,0x2c
c001bebb:	89 f0                	mov    eax,esi
c001bebd:	5b                   	pop    ebx
c001bebe:	5e                   	pop    esi
c001bebf:	5f                   	pop    edi
c001bec0:	5d                   	pop    ebp
c001bec1:	c3                   	ret    

c001bec2 <ATA::detectCHS()>:
c001bec2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bec6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001becc:	c1 e0 06             	shl    eax,0x6
c001becf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bed5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bedf:	c7 44 24 04 8c 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a8c
c001bee7:	e9 d5 48 ff ff       	jmp    c00107c1 <KePanic(char const*)>

c001beec <ATA::open(int, int, void*)>:
c001beec:	53                   	push   ebx
c001beed:	83 ec 08             	sub    esp,0x8
c001bef0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bef4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bef8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001befc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf02:	c1 e0 06             	shl    eax,0x6
c001bf05:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf0b:	01 d0                	add    eax,edx
c001bf0d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf14:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf1a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf21:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf2b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf32:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf38:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf3f:	75 0c                	jne    c001bf4d <ATA::open(int, int, void*)+0x61>
c001bf41:	83 ec 0c             	sub    esp,0xc
c001bf44:	53                   	push   ebx
c001bf45:	e8 78 ff ff ff       	call   c001bec2 <ATA::detectCHS()>
c001bf4a:	83 c4 10             	add    esp,0x10
c001bf4d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf53:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bf59:	c1 e0 06             	shl    eax,0x6
c001bf5c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bf63:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf6d:	d1 e8                	shr    eax,1
c001bf6f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bf75:	6a 04                	push   0x4
c001bf77:	6a 0c                	push   0xc
c001bf79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf80:	50                   	push   eax
c001bf81:	52                   	push   edx
c001bf82:	e8 25 ec ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf87:	90                   	nop
c001bf88:	90                   	nop
c001bf89:	6a 00                	push   0x0
c001bf8b:	6a 0c                	push   0xc
c001bf8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf94:	50                   	push   eax
c001bf95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf9b:	e8 0c ec ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfa0:	83 c4 14             	add    esp,0x14
c001bfa3:	53                   	push   ebx
c001bfa4:	e8 2d 02 ff ff       	call   c000c1d6 <PhysicalDisk::startCache()>
c001bfa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfac:	e8 71 14 ff ff       	call   c000d422 <createPartitionsForDisk(PhysicalDisk*)>
c001bfb1:	83 c4 18             	add    esp,0x18
c001bfb4:	31 c0                	xor    eax,eax
c001bfb6:	5b                   	pop    ebx
c001bfb7:	c3                   	ret    

c001bfb8 <combineCharAndColour(char, unsigned char)>:
c001bfb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfbd:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bfc3:	c1 e0 08             	shl    eax,0x8
c001bfc6:	09 d0                	or     eax,edx
c001bfc8:	c3                   	ret    

c001bfc9 <combineColours(unsigned char, unsigned char)>:
c001bfc9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfce:	c1 e0 04             	shl    eax,0x4
c001bfd1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001bfd5:	c3                   	ret    

c001bfd6 <ATA::read(unsigned long long, int, void*)>:
c001bfd6:	55                   	push   ebp
c001bfd7:	57                   	push   edi
c001bfd8:	56                   	push   esi
c001bfd9:	be 04 00 00 00       	mov    esi,0x4
c001bfde:	53                   	push   ebx
c001bfdf:	83 ec 0c             	sub    esp,0xc
c001bfe2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bfe6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bfea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bff2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bff5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bffb:	0f 87 a1 01 00 00    	ja     c001c1a2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c001:	85 c9                	test   ecx,ecx
c001c003:	be 06 00 00 00       	mov    esi,0x6
c001c008:	0f 84 94 01 00 00    	je     c001c1a2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c00e:	55                   	push   ebp
c001c00f:	55                   	push   ebp
c001c010:	6a 00                	push   0x0
c001c012:	51                   	push   ecx
c001c013:	53                   	push   ebx
c001c014:	52                   	push   edx
c001c015:	50                   	push   eax
c001c016:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c01a:	e8 df fa ff ff       	call   c001bafe <ATA::access(unsigned long long, int, void*, bool)>
c001c01f:	83 c4 20             	add    esp,0x20
c001c022:	85 c0                	test   eax,eax
c001c024:	89 c6                	mov    esi,eax
c001c026:	0f 85 71 01 00 00    	jne    c001c19d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c02c:	50                   	push   eax
c001c02d:	bd 10 27 00 00       	mov    ebp,0x2710
c001c032:	50                   	push   eax
c001c033:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c039:	6a 0f                	push   0xf
c001c03b:	6a 00                	push   0x0
c001c03d:	89 da                	mov    edx,ebx
c001c03f:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c045:	e8 7f ff ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001c04a:	59                   	pop    ecx
c001c04b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c050:	5b                   	pop    ebx
c001c051:	0f b6 d8             	movzx  ebx,al
c001c054:	89 d0                	mov    eax,edx
c001c056:	53                   	push   ebx
c001c057:	99                   	cdq    
c001c058:	f7 fd                	idiv   ebp
c001c05a:	99                   	cdq    
c001c05b:	f7 f9                	idiv   ecx
c001c05d:	83 c2 30             	add    edx,0x30
c001c060:	0f b6 d2             	movzx  edx,dl
c001c063:	52                   	push   edx
c001c064:	e8 4f ff ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c069:	5f                   	pop    edi
c001c06a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c06f:	5a                   	pop    edx
c001c070:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c076:	53                   	push   ebx
c001c077:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c07c:	99                   	cdq    
c001c07d:	f7 ff                	idiv   edi
c001c07f:	99                   	cdq    
c001c080:	f7 f9                	idiv   ecx
c001c082:	8d 42 30             	lea    eax,[edx+0x30]
c001c085:	0f b6 c0             	movzx  eax,al
c001c088:	50                   	push   eax
c001c089:	e8 2a ff ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c08e:	5f                   	pop    edi
c001c08f:	bf 64 00 00 00       	mov    edi,0x64
c001c094:	5a                   	pop    edx
c001c095:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c09b:	53                   	push   ebx
c001c09c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0a1:	99                   	cdq    
c001c0a2:	f7 ff                	idiv   edi
c001c0a4:	99                   	cdq    
c001c0a5:	f7 f9                	idiv   ecx
c001c0a7:	8d 42 30             	lea    eax,[edx+0x30]
c001c0aa:	0f b6 c0             	movzx  eax,al
c001c0ad:	50                   	push   eax
c001c0ae:	e8 05 ff ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c0b3:	5a                   	pop    edx
c001c0b4:	5a                   	pop    edx
c001c0b5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c0bb:	53                   	push   ebx
c001c0bc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0c1:	99                   	cdq    
c001c0c2:	f7 f9                	idiv   ecx
c001c0c4:	99                   	cdq    
c001c0c5:	f7 f9                	idiv   ecx
c001c0c7:	8d 42 30             	lea    eax,[edx+0x30]
c001c0ca:	0f b6 c0             	movzx  eax,al
c001c0cd:	50                   	push   eax
c001c0ce:	e8 e5 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c0d3:	5a                   	pop    edx
c001c0d4:	5a                   	pop    edx
c001c0d5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c0db:	53                   	push   ebx
c001c0dc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0e1:	99                   	cdq    
c001c0e2:	f7 f9                	idiv   ecx
c001c0e4:	83 c2 30             	add    edx,0x30
c001c0e7:	0f b6 d2             	movzx  edx,dl
c001c0ea:	52                   	push   edx
c001c0eb:	e8 c8 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c0f0:	5a                   	pop    edx
c001c0f1:	5a                   	pop    edx
c001c0f2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c0f8:	53                   	push   ebx
c001c0f9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0fe:	99                   	cdq    
c001c0ff:	f7 fd                	idiv   ebp
c001c101:	99                   	cdq    
c001c102:	f7 f9                	idiv   ecx
c001c104:	8d 42 30             	lea    eax,[edx+0x30]
c001c107:	0f b6 c0             	movzx  eax,al
c001c10a:	50                   	push   eax
c001c10b:	e8 a8 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c110:	5d                   	pop    ebp
c001c111:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c116:	5a                   	pop    edx
c001c117:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c11d:	53                   	push   ebx
c001c11e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c123:	99                   	cdq    
c001c124:	f7 fd                	idiv   ebp
c001c126:	99                   	cdq    
c001c127:	f7 f9                	idiv   ecx
c001c129:	8d 42 30             	lea    eax,[edx+0x30]
c001c12c:	0f b6 c0             	movzx  eax,al
c001c12f:	50                   	push   eax
c001c130:	e8 83 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c135:	5d                   	pop    ebp
c001c136:	5a                   	pop    edx
c001c137:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c13d:	53                   	push   ebx
c001c13e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c143:	99                   	cdq    
c001c144:	f7 ff                	idiv   edi
c001c146:	99                   	cdq    
c001c147:	f7 f9                	idiv   ecx
c001c149:	8d 42 30             	lea    eax,[edx+0x30]
c001c14c:	0f b6 c0             	movzx  eax,al
c001c14f:	50                   	push   eax
c001c150:	e8 63 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c155:	5f                   	pop    edi
c001c156:	5d                   	pop    ebp
c001c157:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c15d:	53                   	push   ebx
c001c15e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c163:	99                   	cdq    
c001c164:	f7 f9                	idiv   ecx
c001c166:	99                   	cdq    
c001c167:	f7 f9                	idiv   ecx
c001c169:	8d 42 30             	lea    eax,[edx+0x30]
c001c16c:	0f b6 c0             	movzx  eax,al
c001c16f:	50                   	push   eax
c001c170:	e8 43 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c175:	5a                   	pop    edx
c001c176:	5f                   	pop    edi
c001c177:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c17d:	53                   	push   ebx
c001c17e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c183:	99                   	cdq    
c001c184:	f7 f9                	idiv   ecx
c001c186:	83 c2 30             	add    edx,0x30
c001c189:	0f b6 d2             	movzx  edx,dl
c001c18c:	52                   	push   edx
c001c18d:	e8 26 fe ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c192:	83 c4 10             	add    esp,0x10
c001c195:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c19b:	eb 05                	jmp    c001c1a2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c19d:	be 01 00 00 00       	mov    esi,0x1
c001c1a2:	83 c4 0c             	add    esp,0xc
c001c1a5:	89 f0                	mov    eax,esi
c001c1a7:	5b                   	pop    ebx
c001c1a8:	5e                   	pop    esi
c001c1a9:	5f                   	pop    edi
c001c1aa:	5d                   	pop    ebp
c001c1ab:	c3                   	ret    

c001c1ac <ATA::write(unsigned long long, int, void*)>:
c001c1ac:	55                   	push   ebp
c001c1ad:	57                   	push   edi
c001c1ae:	56                   	push   esi
c001c1af:	be 04 00 00 00       	mov    esi,0x4
c001c1b4:	53                   	push   ebx
c001c1b5:	83 ec 0c             	sub    esp,0xc
c001c1b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c1bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c1c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1c8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c1cb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c1d1:	0f 87 9c 01 00 00    	ja     c001c373 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1d7:	85 c9                	test   ecx,ecx
c001c1d9:	be 06 00 00 00       	mov    esi,0x6
c001c1de:	0f 84 8f 01 00 00    	je     c001c373 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1e4:	55                   	push   ebp
c001c1e5:	55                   	push   ebp
c001c1e6:	6a 01                	push   0x1
c001c1e8:	51                   	push   ecx
c001c1e9:	53                   	push   ebx
c001c1ea:	52                   	push   edx
c001c1eb:	50                   	push   eax
c001c1ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1f0:	e8 09 f9 ff ff       	call   c001bafe <ATA::access(unsigned long long, int, void*, bool)>
c001c1f5:	83 c4 20             	add    esp,0x20
c001c1f8:	85 c0                	test   eax,eax
c001c1fa:	89 c6                	mov    esi,eax
c001c1fc:	0f 85 6c 01 00 00    	jne    c001c36e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c202:	50                   	push   eax
c001c203:	bd 10 27 00 00       	mov    ebp,0x2710
c001c208:	50                   	push   eax
c001c209:	6a 0f                	push   0xf
c001c20b:	6a 00                	push   0x0
c001c20d:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c213:	e8 b1 fd ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001c218:	5a                   	pop    edx
c001c219:	59                   	pop    ecx
c001c21a:	b9 0a 00 00 00       	mov    ecx,0xa
c001c21f:	0f b6 d8             	movzx  ebx,al
c001c222:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c227:	53                   	push   ebx
c001c228:	99                   	cdq    
c001c229:	f7 fd                	idiv   ebp
c001c22b:	99                   	cdq    
c001c22c:	f7 f9                	idiv   ecx
c001c22e:	8d 42 30             	lea    eax,[edx+0x30]
c001c231:	0f b6 c0             	movzx  eax,al
c001c234:	50                   	push   eax
c001c235:	e8 7e fd ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c23a:	5f                   	pop    edi
c001c23b:	bf e8 03 00 00       	mov    edi,0x3e8
c001c240:	5a                   	pop    edx
c001c241:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c247:	53                   	push   ebx
c001c248:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c24d:	99                   	cdq    
c001c24e:	f7 ff                	idiv   edi
c001c250:	99                   	cdq    
c001c251:	f7 f9                	idiv   ecx
c001c253:	8d 42 30             	lea    eax,[edx+0x30]
c001c256:	0f b6 c0             	movzx  eax,al
c001c259:	50                   	push   eax
c001c25a:	e8 59 fd ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c25f:	5f                   	pop    edi
c001c260:	bf 64 00 00 00       	mov    edi,0x64
c001c265:	5a                   	pop    edx
c001c266:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c26c:	53                   	push   ebx
c001c26d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c272:	99                   	cdq    
c001c273:	f7 ff                	idiv   edi
c001c275:	99                   	cdq    
c001c276:	f7 f9                	idiv   ecx
c001c278:	8d 42 30             	lea    eax,[edx+0x30]
c001c27b:	0f b6 c0             	movzx  eax,al
c001c27e:	50                   	push   eax
c001c27f:	e8 34 fd ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c284:	5a                   	pop    edx
c001c285:	5a                   	pop    edx
c001c286:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c28c:	53                   	push   ebx
c001c28d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c292:	99                   	cdq    
c001c293:	f7 f9                	idiv   ecx
c001c295:	99                   	cdq    
c001c296:	f7 f9                	idiv   ecx
c001c298:	8d 42 30             	lea    eax,[edx+0x30]
c001c29b:	0f b6 c0             	movzx  eax,al
c001c29e:	50                   	push   eax
c001c29f:	e8 14 fd ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c2a4:	5a                   	pop    edx
c001c2a5:	5a                   	pop    edx
c001c2a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c2ac:	53                   	push   ebx
c001c2ad:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2b2:	99                   	cdq    
c001c2b3:	f7 f9                	idiv   ecx
c001c2b5:	83 c2 30             	add    edx,0x30
c001c2b8:	0f b6 d2             	movzx  edx,dl
c001c2bb:	52                   	push   edx
c001c2bc:	e8 f7 fc ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c2c1:	5a                   	pop    edx
c001c2c2:	5a                   	pop    edx
c001c2c3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c2c9:	53                   	push   ebx
c001c2ca:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2cf:	99                   	cdq    
c001c2d0:	f7 fd                	idiv   ebp
c001c2d2:	99                   	cdq    
c001c2d3:	f7 f9                	idiv   ecx
c001c2d5:	8d 42 30             	lea    eax,[edx+0x30]
c001c2d8:	0f b6 c0             	movzx  eax,al
c001c2db:	50                   	push   eax
c001c2dc:	e8 d7 fc ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c2e1:	5d                   	pop    ebp
c001c2e2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c2e7:	5a                   	pop    edx
c001c2e8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c2ee:	53                   	push   ebx
c001c2ef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2f4:	99                   	cdq    
c001c2f5:	f7 fd                	idiv   ebp
c001c2f7:	99                   	cdq    
c001c2f8:	f7 f9                	idiv   ecx
c001c2fa:	8d 42 30             	lea    eax,[edx+0x30]
c001c2fd:	0f b6 c0             	movzx  eax,al
c001c300:	50                   	push   eax
c001c301:	e8 b2 fc ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c306:	5d                   	pop    ebp
c001c307:	5a                   	pop    edx
c001c308:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c30e:	53                   	push   ebx
c001c30f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c314:	99                   	cdq    
c001c315:	f7 ff                	idiv   edi
c001c317:	99                   	cdq    
c001c318:	f7 f9                	idiv   ecx
c001c31a:	8d 42 30             	lea    eax,[edx+0x30]
c001c31d:	0f b6 c0             	movzx  eax,al
c001c320:	50                   	push   eax
c001c321:	e8 92 fc ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c326:	5f                   	pop    edi
c001c327:	5d                   	pop    ebp
c001c328:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c32e:	53                   	push   ebx
c001c32f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c334:	99                   	cdq    
c001c335:	f7 f9                	idiv   ecx
c001c337:	99                   	cdq    
c001c338:	f7 f9                	idiv   ecx
c001c33a:	8d 42 30             	lea    eax,[edx+0x30]
c001c33d:	0f b6 c0             	movzx  eax,al
c001c340:	50                   	push   eax
c001c341:	e8 72 fc ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c346:	5a                   	pop    edx
c001c347:	5f                   	pop    edi
c001c348:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c34e:	53                   	push   ebx
c001c34f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c354:	99                   	cdq    
c001c355:	f7 f9                	idiv   ecx
c001c357:	83 c2 30             	add    edx,0x30
c001c35a:	0f b6 d2             	movzx  edx,dl
c001c35d:	52                   	push   edx
c001c35e:	e8 55 fc ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001c363:	83 c4 10             	add    esp,0x10
c001c366:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c36c:	eb 05                	jmp    c001c373 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c36e:	be 01 00 00 00       	mov    esi,0x1
c001c373:	83 c4 0c             	add    esp,0xc
c001c376:	89 f0                	mov    eax,esi
c001c378:	5b                   	pop    ebx
c001c379:	5e                   	pop    esi
c001c37a:	5f                   	pop    edi
c001c37b:	5d                   	pop    ebp
c001c37c:	c3                   	ret    
c001c37d:	90                   	nop

c001c37e <ATAPI::write(unsigned long long, int, void*)>:
c001c37e:	b8 03 00 00 00       	mov    eax,0x3
c001c383:	c3                   	ret    

c001c384 <ATAPI::close(int, int, void*)>:
c001c384:	83 ec 0c             	sub    esp,0xc
c001c387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c391:	85 c0                	test   eax,eax
c001c393:	74 0c                	je     c001c3a1 <ATAPI::close(int, int, void*)+0x1d>
c001c395:	8b 10                	mov    edx,DWORD PTR [eax]
c001c397:	83 ec 0c             	sub    esp,0xc
c001c39a:	50                   	push   eax
c001c39b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c39e:	83 c4 10             	add    esp,0x10
c001c3a1:	31 c0                	xor    eax,eax
c001c3a3:	83 c4 0c             	add    esp,0xc
c001c3a6:	c3                   	ret    
c001c3a7:	90                   	nop

c001c3a8 <ATAPI::ATAPI()>:
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3af:	83 ec 04             	sub    esp,0x4
c001c3b2:	68 00 08 00 00       	push   0x800
c001c3b7:	68 d5 1b 02 c0       	push   0xc0021bd5
c001c3bc:	50                   	push   eax
c001c3bd:	e8 ac fd fe ff       	call   c000c16e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3c2:	83 c4 10             	add    esp,0x10
c001c3c5:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ce:	89 10                	mov    DWORD PTR [eax],edx
c001c3d0:	90                   	nop
c001c3d1:	83 c4 0c             	add    esp,0xc
c001c3d4:	c3                   	ret    
c001c3d5:	90                   	nop

c001c3d6 <ATAPI::readyForCommand()>:
c001c3d6:	56                   	push   esi
c001c3d7:	53                   	push   ebx
c001c3d8:	53                   	push   ebx
c001c3d9:	31 db                	xor    ebx,ebx
c001c3db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3df:	51                   	push   ecx
c001c3e0:	6a 0c                	push   0xc
c001c3e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c3e9:	50                   	push   eax
c001c3ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c3f0:	e8 77 e8 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001c3f5:	83 c4 10             	add    esp,0x10
c001c3f8:	a8 88                	test   al,0x88
c001c3fa:	74 25                	je     c001c421 <ATAPI::readyForCommand()+0x4b>
c001c3fc:	43                   	inc    ebx
c001c3fd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c403:	7e da                	jle    c001c3df <ATAPI::readyForCommand()+0x9>
c001c405:	83 ec 0c             	sub    esp,0xc
c001c408:	68 5e 01 00 00       	push   0x15e
c001c40d:	e8 c2 8e ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001c412:	83 c4 10             	add    esp,0x10
c001c415:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c41b:	75 c2                	jne    c001c3df <ATAPI::readyForCommand()+0x9>
c001c41d:	31 c0                	xor    eax,eax
c001c41f:	eb 02                	jmp    c001c423 <ATAPI::readyForCommand()+0x4d>
c001c421:	b0 01                	mov    al,0x1
c001c423:	5a                   	pop    edx
c001c424:	5b                   	pop    ebx
c001c425:	5e                   	pop    esi
c001c426:	c3                   	ret    
c001c427:	90                   	nop

c001c428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c428:	55                   	push   ebp
c001c429:	57                   	push   edi
c001c42a:	56                   	push   esi
c001c42b:	53                   	push   ebx
c001c42c:	83 ec 20             	sub    esp,0x20
c001c42f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c433:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c437:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c43b:	6a 01                	push   0x1
c001c43d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c444:	50                   	push   eax
c001c445:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c44b:	e8 6a e9 ff ff       	call   c001adba <IDE::enableIRQs(unsigned char, bool)>
c001c450:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c457:	59                   	pop    ecx
c001c458:	5e                   	pop    esi
c001c459:	50                   	push   eax
c001c45a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c460:	e8 21 e7 ff ff       	call   c001ab86 <IDE::prepareInterrupt(unsigned char)>
c001c465:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c468:	e8 69 ff ff ff       	call   c001c3d6 <ATAPI::readyForCommand()>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	84 c0                	test   al,al
c001c472:	75 0a                	jne    c001c47e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c474:	bb 01 00 00 00       	mov    ebx,0x1
c001c479:	e9 5f 02 00 00       	jmp    c001c6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c47e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c484:	c1 e0 04             	shl    eax,0x4
c001c487:	0f b6 c0             	movzx  eax,al
c001c48a:	50                   	push   eax
c001c48b:	6a 06                	push   0x6
c001c48d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c494:	50                   	push   eax
c001c495:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c49b:	e8 0c e7 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a0:	6a 00                	push   0x0
c001c4a2:	6a 01                	push   0x1
c001c4a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ab:	50                   	push   eax
c001c4ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4b2:	e8 f5 e6 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4b7:	83 c4 20             	add    esp,0x20
c001c4ba:	0f b6 c3             	movzx  eax,bl
c001c4bd:	50                   	push   eax
c001c4be:	0f b6 df             	movzx  ebx,bh
c001c4c1:	6a 04                	push   0x4
c001c4c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ca:	50                   	push   eax
c001c4cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4d1:	e8 d6 e6 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4d6:	53                   	push   ebx
c001c4d7:	6a 05                	push   0x5
c001c4d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4e0:	50                   	push   eax
c001c4e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4e7:	e8 c0 e6 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ec:	83 c4 20             	add    esp,0x20
c001c4ef:	68 a0 00 00 00       	push   0xa0
c001c4f4:	6a 07                	push   0x7
c001c4f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4fd:	50                   	push   eax
c001c4fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c504:	e8 a3 e6 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c509:	83 c4 0c             	add    esp,0xc
c001c50c:	6a 01                	push   0x1
c001c50e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c515:	50                   	push   eax
c001c516:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c51c:	e8 6f f1 ff ff       	call   c001b690 <IDE::polling(unsigned char, unsigned int)>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	0f b6 d8             	movzx  ebx,al
c001c527:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c52d:	85 db                	test   ebx,ebx
c001c52f:	74 20                	je     c001c551 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c531:	53                   	push   ebx
c001c532:	0f b6 c0             	movzx  eax,al
c001c535:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c53c:	52                   	push   edx
c001c53d:	50                   	push   eax
c001c53e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c544:	e8 8d f0 ff ff       	call   c001b5d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c549:	83 c4 10             	add    esp,0x10
c001c54c:	e9 8c 01 00 00       	jmp    c001c6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c551:	52                   	push   edx
c001c552:	0f b6 c0             	movzx  eax,al
c001c555:	52                   	push   edx
c001c556:	50                   	push   eax
c001c557:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c55d:	e8 38 e6 ff ff       	call   c001ab9a <IDE::getBase(unsigned char)>
c001c562:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c566:	b9 06 00 00 00       	mov    ecx,0x6
c001c56b:	89 c2                	mov    edx,eax
c001c56d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c570:	89 e8                	mov    eax,ebp
c001c572:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c576:	83 c4 10             	add    esp,0x10
c001c579:	0f b6 c0             	movzx  eax,al
c001c57c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c580:	85 db                	test   ebx,ebx
c001c582:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c588:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c58f:	0f 84 eb 00 00 00    	je     c001c680 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c595:	55                   	push   ebp
c001c596:	55                   	push   ebp
c001c597:	52                   	push   edx
c001c598:	50                   	push   eax
c001c599:	e8 82 e7 ff ff       	call   c001ad20 <IDE::waitInterrupt(unsigned char)>
c001c59e:	83 c4 10             	add    esp,0x10
c001c5a1:	84 c0                	test   al,al
c001c5a3:	0f 84 cb fe ff ff    	je     c001c474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c5a9:	56                   	push   esi
c001c5aa:	56                   	push   esi
c001c5ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5b2:	50                   	push   eax
c001c5b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5b9:	e8 c8 e5 ff ff       	call   c001ab86 <IDE::prepareInterrupt(unsigned char)>
c001c5be:	83 c4 0c             	add    esp,0xc
c001c5c1:	6a 04                	push   0x4
c001c5c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5ca:	50                   	push   eax
c001c5cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5d1:	e8 96 e6 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001c5d6:	83 c4 0c             	add    esp,0xc
c001c5d9:	6a 05                	push   0x5
c001c5db:	89 c6                	mov    esi,eax
c001c5dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5e4:	50                   	push   eax
c001c5e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5eb:	e8 7c e6 ff ff       	call   c001ac6c <IDE::read(unsigned char, unsigned char)>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	0f b6 e8             	movzx  ebp,al
c001c5f6:	89 f0                	mov    eax,esi
c001c5f8:	c1 e5 08             	shl    ebp,0x8
c001c5fb:	0f b6 f0             	movzx  esi,al
c001c5fe:	09 f5                	or     ebp,esi
c001c600:	31 f6                	xor    esi,esi
c001c602:	d1 fd                	sar    ebp,1
c001c604:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c609:	74 5c                	je     c001c667 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c60b:	39 ee                	cmp    esi,ebp
c001c60d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c613:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c61a:	75 0d                	jne    c001c629 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c61c:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c61f:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c623:	4b                   	dec    ebx
c001c624:	e9 57 ff ff ff       	jmp    c001c580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c629:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c62d:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c631:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c636:	51                   	push   ecx
c001c637:	51                   	push   ecx
c001c638:	52                   	push   edx
c001c639:	50                   	push   eax
c001c63a:	e8 5b e5 ff ff       	call   c001ab9a <IDE::getBase(unsigned char)>
c001c63f:	89 c2                	mov    edx,eax
c001c641:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c646:	66 ef                	out    dx,ax
c001c648:	46                   	inc    esi
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	eb bd                	jmp    c001c60b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c64e:	51                   	push   ecx
c001c64f:	51                   	push   ecx
c001c650:	52                   	push   edx
c001c651:	50                   	push   eax
c001c652:	e8 43 e5 ff ff       	call   c001ab9a <IDE::getBase(unsigned char)>
c001c657:	89 c2                	mov    edx,eax
c001c659:	66 ed                	in     ax,dx
c001c65b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c666:	46                   	inc    esi
c001c667:	39 ee                	cmp    esi,ebp
c001c669:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c66f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c676:	75 d6                	jne    c001c64e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c678:	01 f6                	add    esi,esi
c001c67a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c67e:	eb a3                	jmp    c001c623 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c680:	51                   	push   ecx
c001c681:	51                   	push   ecx
c001c682:	52                   	push   edx
c001c683:	50                   	push   eax
c001c684:	e8 97 e6 ff ff       	call   c001ad20 <IDE::waitInterrupt(unsigned char)>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	84 c0                	test   al,al
c001c68e:	0f 84 e0 fd ff ff    	je     c001c474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c694:	52                   	push   edx
c001c695:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c69a:	52                   	push   edx
c001c69b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6a2:	50                   	push   eax
c001c6a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6a9:	e8 d8 e4 ff ff       	call   c001ab86 <IDE::prepareInterrupt(unsigned char)>
c001c6ae:	83 c4 10             	add    esp,0x10
c001c6b1:	50                   	push   eax
c001c6b2:	50                   	push   eax
c001c6b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6ba:	50                   	push   eax
c001c6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6c1:	e8 d4 e4 ff ff       	call   c001ab9a <IDE::getBase(unsigned char)>
c001c6c6:	8d 50 07             	lea    edx,[eax+0x7]
c001c6c9:	ec                   	in     al,dx
c001c6ca:	83 c4 10             	add    esp,0x10
c001c6cd:	a8 88                	test   al,0x88
c001c6cf:	74 0a                	je     c001c6db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c6d1:	4b                   	dec    ebx
c001c6d2:	75 dd                	jne    c001c6b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c6d4:	bb 02 00 00 00       	mov    ebx,0x2
c001c6d9:	eb 02                	jmp    c001c6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c6db:	31 db                	xor    ebx,ebx
c001c6dd:	83 c4 1c             	add    esp,0x1c
c001c6e0:	89 d8                	mov    eax,ebx
c001c6e2:	5b                   	pop    ebx
c001c6e3:	5e                   	pop    esi
c001c6e4:	5f                   	pop    edi
c001c6e5:	5d                   	pop    ebp
c001c6e6:	c3                   	ret    
c001c6e7:	90                   	nop

c001c6e8 <ATAPI::diskRemoved()>:
c001c6e8:	53                   	push   ebx
c001c6e9:	83 ec 14             	sub    esp,0x14
c001c6ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c6f0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c6f7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c6fd:	e8 0e 0a ff ff       	call   c000d110 <LogicalDisk::unmount()>
c001c702:	58                   	pop    eax
c001c703:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c709:	e8 e6 13 ff ff       	call   c000daf4 <VCache::writeWriteBuffer()>
c001c70e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c714:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c718:	83 c4 18             	add    esp,0x18
c001c71b:	5b                   	pop    ebx
c001c71c:	e9 c3 13 ff ff       	jmp    c000dae4 <VCache::invalidateReadBuffer()>
c001c721:	90                   	nop

c001c722 <ATAPI::eject()>:
c001c722:	57                   	push   edi
c001c723:	b9 03 00 00 00       	mov    ecx,0x3
c001c728:	53                   	push   ebx
c001c729:	83 ec 14             	sub    esp,0x14
c001c72c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c730:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c734:	fc                   	cld    
c001c735:	31 c0                	xor    eax,eax
c001c737:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c739:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c73e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c743:	50                   	push   eax
c001c744:	50                   	push   eax
c001c745:	6a 00                	push   0x0
c001c747:	6a 00                	push   0x0
c001c749:	6a 00                	push   0x0
c001c74b:	6a 02                	push   0x2
c001c74d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c751:	50                   	push   eax
c001c752:	53                   	push   ebx
c001c753:	e8 d0 fc ff ff       	call   c001c428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c758:	83 c4 14             	add    esp,0x14
c001c75b:	53                   	push   ebx
c001c75c:	e8 87 ff ff ff       	call   c001c6e8 <ATAPI::diskRemoved()>
c001c761:	83 c4 24             	add    esp,0x24
c001c764:	31 c0                	xor    eax,eax
c001c766:	5b                   	pop    ebx
c001c767:	5f                   	pop    edi
c001c768:	c3                   	ret    
c001c769:	90                   	nop

c001c76a <ATAPI::diskInserted()>:
c001c76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c76e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c775:	c3                   	ret    

c001c776 <ATAPI::detectMedia()>:
c001c776:	56                   	push   esi
c001c777:	53                   	push   ebx
c001c778:	83 ec 28             	sub    esp,0x28
c001c77b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c77f:	6a 0c                	push   0xc
c001c781:	6a 00                	push   0x0
c001c783:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c787:	56                   	push   esi
c001c788:	e8 63 3d fe ff       	call   c00004f0 <memset>
c001c78d:	58                   	pop    eax
c001c78e:	5a                   	pop    edx
c001c78f:	6a 00                	push   0x0
c001c791:	6a 00                	push   0x0
c001c793:	6a 00                	push   0x0
c001c795:	6a 00                	push   0x0
c001c797:	56                   	push   esi
c001c798:	53                   	push   ebx
c001c799:	e8 8a fc ff ff       	call   c001c428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c79e:	83 c4 1c             	add    esp,0x1c
c001c7a1:	6a 0c                	push   0xc
c001c7a3:	6a 00                	push   0x0
c001c7a5:	56                   	push   esi
c001c7a6:	e8 45 3d fe ff       	call   c00004f0 <memset>
c001c7ab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c7b0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c7b5:	59                   	pop    ecx
c001c7b6:	58                   	pop    eax
c001c7b7:	6a 01                	push   0x1
c001c7b9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c7bd:	50                   	push   eax
c001c7be:	6a 00                	push   0x0
c001c7c0:	6a 12                	push   0x12
c001c7c2:	56                   	push   esi
c001c7c3:	53                   	push   ebx
c001c7c4:	e8 5f fc ff ff       	call   c001c428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7c9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c7cd:	83 c4 20             	add    esp,0x20
c001c7d0:	83 e0 7f             	and    eax,0x7f
c001c7d3:	83 f8 70             	cmp    eax,0x70
c001c7d6:	74 15                	je     c001c7ed <ATAPI::detectMedia()+0x77>
c001c7d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c7df:	75 0c                	jne    c001c7ed <ATAPI::detectMedia()+0x77>
c001c7e1:	83 ec 0c             	sub    esp,0xc
c001c7e4:	53                   	push   ebx
c001c7e5:	e8 80 ff ff ff       	call   c001c76a <ATAPI::diskInserted()>
c001c7ea:	83 c4 10             	add    esp,0x10
c001c7ed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c7f1:	83 e0 0f             	and    eax,0xf
c001c7f4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c7f9:	0f b6 c0             	movzx  eax,al
c001c7fc:	75 19                	jne    c001c817 <ATAPI::detectMedia()+0xa1>
c001c7fe:	83 f8 02             	cmp    eax,0x2
c001c801:	75 14                	jne    c001c817 <ATAPI::detectMedia()+0xa1>
c001c803:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c80a:	74 24                	je     c001c830 <ATAPI::detectMedia()+0xba>
c001c80c:	83 ec 0c             	sub    esp,0xc
c001c80f:	53                   	push   ebx
c001c810:	e8 d3 fe ff ff       	call   c001c6e8 <ATAPI::diskRemoved()>
c001c815:	eb 16                	jmp    c001c82d <ATAPI::detectMedia()+0xb7>
c001c817:	85 c0                	test   eax,eax
c001c819:	75 15                	jne    c001c830 <ATAPI::detectMedia()+0xba>
c001c81b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c822:	75 0c                	jne    c001c830 <ATAPI::detectMedia()+0xba>
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	53                   	push   ebx
c001c828:	e8 3d ff ff ff       	call   c001c76a <ATAPI::diskInserted()>
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	83 c4 24             	add    esp,0x24
c001c833:	5b                   	pop    ebx
c001c834:	5e                   	pop    esi
c001c835:	c3                   	ret    

c001c836 <ATAPI::open(int, int, void*)>:
c001c836:	56                   	push   esi
c001c837:	53                   	push   ebx
c001c838:	50                   	push   eax
c001c839:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c83d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c841:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c845:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c84b:	c1 e0 06             	shl    eax,0x6
c001c84e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c854:	01 d0                	add    eax,edx
c001c856:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c85d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c863:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c86a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c874:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c87b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c881:	6a 04                	push   0x4
c001c883:	6a 0c                	push   0xc
c001c885:	51                   	push   ecx
c001c886:	52                   	push   edx
c001c887:	e8 20 e3 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c88c:	90                   	nop
c001c88d:	90                   	nop
c001c88e:	6a 00                	push   0x0
c001c890:	6a 0c                	push   0xc
c001c892:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c899:	50                   	push   eax
c001c89a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8a0:	e8 07 e3 ff ff       	call   c001abac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a5:	83 c4 14             	add    esp,0x14
c001c8a8:	68 78 01 00 00       	push   0x178
c001c8ad:	e8 05 b2 fe ff       	call   c0007ab7 <malloc>
c001c8b2:	83 c4 0c             	add    esp,0xc
c001c8b5:	6a 00                	push   0x0
c001c8b7:	68 ff ff ff 7f       	push   0x7fffffff
c001c8bc:	6a 00                	push   0x0
c001c8be:	6a 00                	push   0x0
c001c8c0:	53                   	push   ebx
c001c8c1:	68 87 1c 02 c0       	push   0xc0021c87
c001c8c6:	89 c6                	mov    esi,eax
c001c8c8:	50                   	push   eax
c001c8c9:	e8 80 06 ff ff       	call   c000cf4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c8ce:	83 c4 14             	add    esp,0x14
c001c8d1:	56                   	push   esi
c001c8d2:	e8 37 07 ff ff       	call   c000d00e <LogicalDisk::assignDriveLetter()>
c001c8d7:	5a                   	pop    edx
c001c8d8:	59                   	pop    ecx
c001c8d9:	0f be c0             	movsx  eax,al
c001c8dc:	50                   	push   eax
c001c8dd:	68 d8 1a 02 c0       	push   0xc0021ad8
c001c8e2:	e8 56 e0 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001c8e7:	58                   	pop    eax
c001c8e8:	5a                   	pop    edx
c001c8e9:	56                   	push   esi
c001c8ea:	53                   	push   ebx
c001c8eb:	e8 b0 f4 fe ff       	call   c000bda0 <Device::addChild(Device*)>
c001c8f0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c8f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8f9:	e8 d8 f8 fe ff       	call   c000c1d6 <PhysicalDisk::startCache()>
c001c8fe:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c905:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c908:	e8 69 fe ff ff       	call   c001c776 <ATAPI::detectMedia()>
c001c90d:	83 c4 14             	add    esp,0x14
c001c910:	31 c0                	xor    eax,eax
c001c912:	5b                   	pop    ebx
c001c913:	5e                   	pop    esi
c001c914:	c3                   	ret    
c001c915:	90                   	nop

c001c916 <ATAPI::read(unsigned long long, int, void*)>:
c001c916:	55                   	push   ebp
c001c917:	57                   	push   edi
c001c918:	56                   	push   esi
c001c919:	53                   	push   ebx
c001c91a:	83 ec 1c             	sub    esp,0x1c
c001c91d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c921:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c925:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c929:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c930:	74 3c                	je     c001c96e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c932:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c936:	b9 03 00 00 00       	mov    ecx,0x3
c001c93b:	fc                   	cld    
c001c93c:	31 c0                	xor    eax,eax
c001c93e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c940:	89 e8                	mov    eax,ebp
c001c942:	0f ce                	bswap  esi
c001c944:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c948:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c94d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c951:	50                   	push   eax
c001c952:	50                   	push   eax
c001c953:	55                   	push   ebp
c001c954:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c958:	c1 e5 0b             	shl    ebp,0xb
c001c95b:	6a 00                	push   0x0
c001c95d:	55                   	push   ebp
c001c95e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c962:	50                   	push   eax
c001c963:	53                   	push   ebx
c001c964:	e8 bf fa ff ff       	call   c001c428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c969:	83 c4 20             	add    esp,0x20
c001c96c:	eb 1a                	jmp    c001c988 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c96e:	83 ec 0c             	sub    esp,0xc
c001c971:	53                   	push   ebx
c001c972:	e8 ff fd ff ff       	call   c001c776 <ATAPI::detectMedia()>
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c981:	75 af                	jne    c001c932 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c983:	b8 02 00 00 00       	mov    eax,0x2
c001c988:	83 c4 1c             	add    esp,0x1c
c001c98b:	5b                   	pop    ebx
c001c98c:	5e                   	pop    esi
c001c98d:	5f                   	pop    edi
c001c98e:	5d                   	pop    ebp
c001c98f:	c3                   	ret    

c001c990 <SATA::close(int, int, void*)>:
c001c990:	83 ec 0c             	sub    esp,0xc
c001c993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c997:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c99d:	85 c0                	test   eax,eax
c001c99f:	74 0c                	je     c001c9ad <SATA::close(int, int, void*)+0x1d>
c001c9a1:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9a3:	83 ec 0c             	sub    esp,0xc
c001c9a6:	50                   	push   eax
c001c9a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9aa:	83 c4 10             	add    esp,0x10
c001c9ad:	31 c0                	xor    eax,eax
c001c9af:	83 c4 0c             	add    esp,0xc
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <SATA::powerSaving(PowerSavingLevel)>:
c001c9b4:	c3                   	ret    
c001c9b5:	90                   	nop

c001c9b6 <SATA::open(int, int, void*)>:
c001c9b6:	56                   	push   esi
c001c9b7:	53                   	push   ebx
c001c9b8:	50                   	push   eax
c001c9b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9c1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9cb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c9d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9d5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c9df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c9e9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c9f0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c9f6:	e8 c7 b3 fe ff       	call   c0007dc2 <Phys::allocatePage()>
c001c9fb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca01:	89 c6                	mov    esi,eax
c001ca03:	e8 ba b3 fe ff       	call   c0007dc2 <Phys::allocatePage()>
c001ca08:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca0e:	39 c6                	cmp    esi,eax
c001ca10:	74 10                	je     c001ca22 <SATA::open(int, int, void*)+0x6c>
c001ca12:	83 ec 0c             	sub    esp,0xc
c001ca15:	68 20 1b 02 c0       	push   0xc0021b20
c001ca1a:	e8 a2 3d ff ff       	call   c00107c1 <KePanic(char const*)>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	83 ec 0c             	sub    esp,0xc
c001ca25:	6a 02                	push   0x2
c001ca27:	e8 c5 cb fe ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001ca2c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca32:	6a 03                	push   0x3
c001ca34:	50                   	push   eax
c001ca35:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca3b:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca41:	e8 8a d2 fe ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca46:	83 c4 14             	add    esp,0x14
c001ca49:	53                   	push   ebx
c001ca4a:	e8 87 f7 fe ff       	call   c000c1d6 <PhysicalDisk::startCache()>
c001ca4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca52:	e8 cb 09 ff ff       	call   c000d422 <createPartitionsForDisk(PhysicalDisk*)>
c001ca57:	83 c4 14             	add    esp,0x14
c001ca5a:	31 c0                	xor    eax,eax
c001ca5c:	5b                   	pop    ebx
c001ca5d:	5e                   	pop    esi
c001ca5e:	c3                   	ret    
c001ca5f:	90                   	nop

c001ca60 <SATA::SATA()>:
c001ca60:	83 ec 0c             	sub    esp,0xc
c001ca63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca67:	83 ec 04             	sub    esp,0x4
c001ca6a:	68 00 02 00 00       	push   0x200
c001ca6f:	68 34 1b 02 c0       	push   0xc0021b34
c001ca74:	50                   	push   eax
c001ca75:	e8 f4 f6 fe ff       	call   c000c16e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca7a:	83 c4 10             	add    esp,0x10
c001ca7d:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001ca82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca86:	89 10                	mov    DWORD PTR [eax],edx
c001ca88:	90                   	nop
c001ca89:	83 c4 0c             	add    esp,0xc
c001ca8c:	c3                   	ret    
c001ca8d:	90                   	nop

c001ca8e <SATA::access(unsigned long long, int, void*, bool)>:
c001ca8e:	55                   	push   ebp
c001ca8f:	57                   	push   edi
c001ca90:	56                   	push   esi
c001ca91:	53                   	push   ebx
c001ca92:	83 ec 2c             	sub    esp,0x2c
c001ca95:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ca99:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ca9e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001caa2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001caa6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001caaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caae:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cab6:	7e 10                	jle    c001cac8 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cab8:	83 ec 0c             	sub    esp,0xc
c001cabb:	68 44 1b 02 c0       	push   0xc0021b44
c001cac0:	e8 fc 3c ff ff       	call   c00107c1 <KePanic(char const*)>
c001cac5:	83 c4 10             	add    esp,0x10
c001cac8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cace:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cad4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cada:	89 e8                	mov    eax,ebp
c001cadc:	c1 e0 07             	shl    eax,0x7
c001cadf:	01 d0                	add    eax,edx
c001cae1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001caeb:	8d 45 02             	lea    eax,[ebp+0x2]
c001caee:	51                   	push   ecx
c001caef:	c1 e0 07             	shl    eax,0x7
c001caf2:	51                   	push   ecx
c001caf3:	01 d0                	add    eax,edx
c001caf5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001caf9:	50                   	push   eax
c001cafa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb00:	e8 6b ec ff ff       	call   c001b770 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb09:	83 c4 10             	add    esp,0x10
c001cb0c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cb11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cb15:	0f 84 5b 01 00 00    	je     c001cc76 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb1f:	c1 e0 09             	shl    eax,0x9
c001cb22:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cb27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb2b:	74 0e                	je     c001cb3b <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cb2d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb33:	89 c1                	mov    ecx,eax
c001cb35:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb3f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb45:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb48:	c1 e0 07             	shl    eax,0x7
c001cb4b:	01 d0                	add    eax,edx
c001cb4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb4f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cb55:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cb5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb5f:	c1 e1 05             	shl    ecx,0x5
c001cb62:	01 c8                	add    eax,ecx
c001cb64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cb68:	83 e1 01             	and    ecx,0x1
c001cb6b:	89 ce                	mov    esi,ecx
c001cb6d:	8a 08                	mov    cl,BYTE PTR [eax]
c001cb6f:	c1 e6 06             	shl    esi,0x6
c001cb72:	83 e1 bf             	and    ecx,0xffffffbf
c001cb75:	09 f1                	or     ecx,esi
c001cb77:	88 08                	mov    BYTE PTR [eax],cl
c001cb79:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cb7b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cb81:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cb87:	89 08                	mov    DWORD PTR [eax],ecx
c001cb89:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb8f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cb95:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cb9b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cb9e:	50                   	push   eax
c001cb9f:	68 90 00 00 00       	push   0x90
c001cba4:	6a 00                	push   0x0
c001cba6:	56                   	push   esi
c001cba7:	e8 44 39 fe ff       	call   c00004f0 <memset>
c001cbac:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cbb2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbbc:	83 c4 10             	add    esp,0x10
c001cbbf:	48                   	dec    eax
c001cbc0:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cbc5:	89 c1                	mov    ecx,eax
c001cbc7:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cbcd:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cbd2:	09 c8                	or     eax,ecx
c001cbd4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cbda:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cbe0:	83 c8 80             	or     eax,0xffffff80
c001cbe3:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cbe9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cbec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbf0:	25 00 7f 00 00       	and    eax,0x7f00
c001cbf5:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cbfa:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cbff:	66 89 06             	mov    WORD PTR [esi],ax
c001cc02:	b0 35                	mov    al,0x35
c001cc04:	75 02                	jne    c001cc08 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001cc06:	b0 25                	mov    al,0x25
c001cc08:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc0f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc13:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001cc17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc1b:	c1 e8 10             	shr    eax,0x10
c001cc1e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc25:	c1 e8 18             	shr    eax,0x18
c001cc28:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc2b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc2f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc36:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc3d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc41:	89 ee                	mov    esi,ebp
c001cc43:	31 c0                	xor    eax,eax
c001cc45:	c1 e6 07             	shl    esi,0x7
c001cc48:	01 d6                	add    esi,edx
c001cc4a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cc50:	80 e1 88             	and    cl,0x88
c001cc53:	74 0a                	je     c001cc5f <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cc55:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc5a:	74 0a                	je     c001cc66 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cc5c:	40                   	inc    eax
c001cc5d:	eb eb                	jmp    c001cc4a <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cc5f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc64:	75 17                	jne    c001cc7d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cc66:	83 ec 0c             	sub    esp,0xc
c001cc69:	68 7d 1b 02 c0       	push   0xc0021b7d
c001cc6e:	e8 ca dc fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	b8 01 00 00 00       	mov    eax,0x1
c001cc7b:	eb 5b                	jmp    c001ccd8 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cc7d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cc81:	c1 e5 07             	shl    ebp,0x7
c001cc84:	b8 01 00 00 00       	mov    eax,0x1
c001cc89:	01 ea                	add    edx,ebp
c001cc8b:	d3 e0                	shl    eax,cl
c001cc8d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cc93:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cc99:	85 c8                	test   eax,ecx
c001cc9b:	74 16                	je     c001ccb3 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cc9d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cca3:	0f ba e1 1e          	bt     ecx,0x1e
c001cca7:	73 ea                	jae    c001cc93 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cca9:	83 ec 0c             	sub    esp,0xc
c001ccac:	68 8b 1b 02 c0       	push   0xc0021b8b
c001ccb1:	eb bb                	jmp    c001cc6e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ccb3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ccb9:	0f ba e0 1e          	bt     eax,0x1e
c001ccbd:	72 b7                	jb     c001cc76 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ccbf:	31 c0                	xor    eax,eax
c001ccc1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ccc6:	75 10                	jne    c001ccd8 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001ccc8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ccce:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ccd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ccd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccd8:	83 c4 2c             	add    esp,0x2c
c001ccdb:	5b                   	pop    ebx
c001ccdc:	5e                   	pop    esi
c001ccdd:	5f                   	pop    edi
c001ccde:	5d                   	pop    ebp
c001ccdf:	c3                   	ret    

c001cce0 <SATA::read(unsigned long long, int, void*)>:
c001cce0:	55                   	push   ebp
c001cce1:	57                   	push   edi
c001cce2:	56                   	push   esi
c001cce3:	be 04 00 00 00       	mov    esi,0x4
c001cce8:	53                   	push   ebx
c001cce9:	83 ec 0c             	sub    esp,0xc
c001ccec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ccf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ccfc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ccff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd05:	0f 87 1a 02 00 00    	ja     c001cf25 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd0b:	85 c9                	test   ecx,ecx
c001cd0d:	be 06 00 00 00       	mov    esi,0x6
c001cd12:	0f 84 0d 02 00 00    	je     c001cf25 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd18:	56                   	push   esi
c001cd19:	56                   	push   esi
c001cd1a:	6a 00                	push   0x0
c001cd1c:	51                   	push   ecx
c001cd1d:	53                   	push   ebx
c001cd1e:	52                   	push   edx
c001cd1f:	50                   	push   eax
c001cd20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd24:	e8 65 fd ff ff       	call   c001ca8e <SATA::access(unsigned long long, int, void*, bool)>
c001cd29:	83 c4 20             	add    esp,0x20
c001cd2c:	85 c0                	test   eax,eax
c001cd2e:	89 c6                	mov    esi,eax
c001cd30:	0f 85 ea 01 00 00    	jne    c001cf20 <SATA::read(unsigned long long, int, void*)+0x240>
c001cd36:	50                   	push   eax
c001cd37:	50                   	push   eax
c001cd38:	6a 0f                	push   0xf
c001cd3a:	6a 00                	push   0x0
c001cd3c:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd42:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd47:	e8 7d f2 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cd4c:	5a                   	pop    edx
c001cd4d:	59                   	pop    ecx
c001cd4e:	b9 10 27 00 00       	mov    ecx,0x2710
c001cd53:	0f b6 c0             	movzx  eax,al
c001cd56:	50                   	push   eax
c001cd57:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd5c:	99                   	cdq    
c001cd5d:	f7 f9                	idiv   ecx
c001cd5f:	99                   	cdq    
c001cd60:	f7 fb                	idiv   ebx
c001cd62:	8d 42 30             	lea    eax,[edx+0x30]
c001cd65:	0f b6 c0             	movzx  eax,al
c001cd68:	50                   	push   eax
c001cd69:	e8 4a f2 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001cd6e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd74:	5f                   	pop    edi
c001cd75:	5d                   	pop    ebp
c001cd76:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd7b:	6a 0f                	push   0xf
c001cd7d:	6a 00                	push   0x0
c001cd7f:	e8 45 f2 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cd84:	5a                   	pop    edx
c001cd85:	59                   	pop    ecx
c001cd86:	0f b6 c0             	movzx  eax,al
c001cd89:	50                   	push   eax
c001cd8a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd8f:	99                   	cdq    
c001cd90:	f7 fd                	idiv   ebp
c001cd92:	99                   	cdq    
c001cd93:	f7 fb                	idiv   ebx
c001cd95:	8d 42 30             	lea    eax,[edx+0x30]
c001cd98:	0f b6 c0             	movzx  eax,al
c001cd9b:	50                   	push   eax
c001cd9c:	e8 17 f2 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001cda1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cda7:	5f                   	pop    edi
c001cda8:	bf 64 00 00 00       	mov    edi,0x64
c001cdad:	58                   	pop    eax
c001cdae:	6a 0f                	push   0xf
c001cdb0:	6a 00                	push   0x0
c001cdb2:	e8 12 f2 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cdb7:	5a                   	pop    edx
c001cdb8:	59                   	pop    ecx
c001cdb9:	0f b6 c0             	movzx  eax,al
c001cdbc:	50                   	push   eax
c001cdbd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdc2:	99                   	cdq    
c001cdc3:	f7 ff                	idiv   edi
c001cdc5:	99                   	cdq    
c001cdc6:	f7 fb                	idiv   ebx
c001cdc8:	8d 42 30             	lea    eax,[edx+0x30]
c001cdcb:	0f b6 c0             	movzx  eax,al
c001cdce:	50                   	push   eax
c001cdcf:	e8 e4 f1 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001cdd4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdda:	58                   	pop    eax
c001cddb:	5a                   	pop    edx
c001cddc:	6a 0f                	push   0xf
c001cdde:	6a 00                	push   0x0
c001cde0:	e8 e4 f1 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cde5:	59                   	pop    ecx
c001cde6:	5a                   	pop    edx
c001cde7:	0f b6 c0             	movzx  eax,al
c001cdea:	50                   	push   eax
c001cdeb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdf0:	99                   	cdq    
c001cdf1:	f7 fb                	idiv   ebx
c001cdf3:	99                   	cdq    
c001cdf4:	f7 fb                	idiv   ebx
c001cdf6:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf9:	0f b6 c0             	movzx  eax,al
c001cdfc:	50                   	push   eax
c001cdfd:	e8 b6 f1 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001ce02:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce08:	59                   	pop    ecx
c001ce09:	58                   	pop    eax
c001ce0a:	6a 0f                	push   0xf
c001ce0c:	6a 00                	push   0x0
c001ce0e:	e8 b6 f1 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001ce13:	5a                   	pop    edx
c001ce14:	59                   	pop    ecx
c001ce15:	0f b6 c0             	movzx  eax,al
c001ce18:	50                   	push   eax
c001ce19:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce1e:	99                   	cdq    
c001ce1f:	f7 fb                	idiv   ebx
c001ce21:	83 c2 30             	add    edx,0x30
c001ce24:	0f b6 d2             	movzx  edx,dl
c001ce27:	52                   	push   edx
c001ce28:	e8 8b f1 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001ce2d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce33:	58                   	pop    eax
c001ce34:	5a                   	pop    edx
c001ce35:	6a 0f                	push   0xf
c001ce37:	6a 00                	push   0x0
c001ce39:	e8 8b f1 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001ce3e:	59                   	pop    ecx
c001ce3f:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce44:	5a                   	pop    edx
c001ce45:	0f b6 c0             	movzx  eax,al
c001ce48:	50                   	push   eax
c001ce49:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce4e:	99                   	cdq    
c001ce4f:	f7 f9                	idiv   ecx
c001ce51:	99                   	cdq    
c001ce52:	f7 fb                	idiv   ebx
c001ce54:	8d 42 30             	lea    eax,[edx+0x30]
c001ce57:	0f b6 c0             	movzx  eax,al
c001ce5a:	50                   	push   eax
c001ce5b:	e8 58 f1 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001ce60:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce66:	59                   	pop    ecx
c001ce67:	58                   	pop    eax
c001ce68:	6a 0f                	push   0xf
c001ce6a:	6a 00                	push   0x0
c001ce6c:	e8 58 f1 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001ce71:	5a                   	pop    edx
c001ce72:	59                   	pop    ecx
c001ce73:	0f b6 c0             	movzx  eax,al
c001ce76:	50                   	push   eax
c001ce77:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce7c:	99                   	cdq    
c001ce7d:	f7 fd                	idiv   ebp
c001ce7f:	99                   	cdq    
c001ce80:	f7 fb                	idiv   ebx
c001ce82:	8d 42 30             	lea    eax,[edx+0x30]
c001ce85:	0f b6 c0             	movzx  eax,al
c001ce88:	50                   	push   eax
c001ce89:	e8 2a f1 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001ce8e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce94:	5d                   	pop    ebp
c001ce95:	58                   	pop    eax
c001ce96:	6a 0f                	push   0xf
c001ce98:	6a 00                	push   0x0
c001ce9a:	e8 2a f1 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001ce9f:	5a                   	pop    edx
c001cea0:	59                   	pop    ecx
c001cea1:	0f b6 c0             	movzx  eax,al
c001cea4:	50                   	push   eax
c001cea5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceaa:	99                   	cdq    
c001ceab:	f7 ff                	idiv   edi
c001cead:	99                   	cdq    
c001ceae:	f7 fb                	idiv   ebx
c001ceb0:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb3:	0f b6 c0             	movzx  eax,al
c001ceb6:	50                   	push   eax
c001ceb7:	e8 fc f0 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001cebc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cec2:	5f                   	pop    edi
c001cec3:	5d                   	pop    ebp
c001cec4:	6a 0f                	push   0xf
c001cec6:	6a 00                	push   0x0
c001cec8:	e8 fc f0 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cecd:	5a                   	pop    edx
c001cece:	59                   	pop    ecx
c001cecf:	0f b6 c0             	movzx  eax,al
c001ced2:	50                   	push   eax
c001ced3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ced8:	99                   	cdq    
c001ced9:	f7 fb                	idiv   ebx
c001cedb:	99                   	cdq    
c001cedc:	f7 fb                	idiv   ebx
c001cede:	8d 42 30             	lea    eax,[edx+0x30]
c001cee1:	0f b6 c0             	movzx  eax,al
c001cee4:	50                   	push   eax
c001cee5:	e8 ce f0 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001ceea:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cef0:	5f                   	pop    edi
c001cef1:	5d                   	pop    ebp
c001cef2:	6a 0f                	push   0xf
c001cef4:	6a 00                	push   0x0
c001cef6:	e8 ce f0 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cefb:	5a                   	pop    edx
c001cefc:	59                   	pop    ecx
c001cefd:	0f b6 c0             	movzx  eax,al
c001cf00:	50                   	push   eax
c001cf01:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf06:	99                   	cdq    
c001cf07:	f7 fb                	idiv   ebx
c001cf09:	83 c2 30             	add    edx,0x30
c001cf0c:	0f b6 d2             	movzx  edx,dl
c001cf0f:	52                   	push   edx
c001cf10:	e8 a3 f0 ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf1e:	eb 05                	jmp    c001cf25 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf20:	be 01 00 00 00       	mov    esi,0x1
c001cf25:	83 c4 0c             	add    esp,0xc
c001cf28:	89 f0                	mov    eax,esi
c001cf2a:	5b                   	pop    ebx
c001cf2b:	5e                   	pop    esi
c001cf2c:	5f                   	pop    edi
c001cf2d:	5d                   	pop    ebp
c001cf2e:	c3                   	ret    
c001cf2f:	90                   	nop

c001cf30 <SATA::write(unsigned long long, int, void*)>:
c001cf30:	55                   	push   ebp
c001cf31:	57                   	push   edi
c001cf32:	56                   	push   esi
c001cf33:	53                   	push   ebx
c001cf34:	83 ec 0c             	sub    esp,0xc
c001cf37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cf3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cf43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cf47:	8d 70 ff             	lea    esi,[eax-0x1]
c001cf4a:	b8 04 00 00 00       	mov    eax,0x4
c001cf4f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cf55:	0f 87 2c 02 00 00    	ja     c001d187 <SATA::write(unsigned long long, int, void*)+0x257>
c001cf5b:	85 db                	test   ebx,ebx
c001cf5d:	b8 06 00 00 00       	mov    eax,0x6
c001cf62:	0f 84 1f 02 00 00    	je     c001d187 <SATA::write(unsigned long long, int, void*)+0x257>
c001cf68:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf6c:	c1 e6 09             	shl    esi,0x9
c001cf6f:	01 de                	add    esi,ebx
c001cf71:	50                   	push   eax
c001cf72:	89 d7                	mov    edi,edx
c001cf74:	50                   	push   eax
c001cf75:	83 c7 01             	add    edi,0x1
c001cf78:	6a 01                	push   0x1
c001cf7a:	89 cd                	mov    ebp,ecx
c001cf7c:	53                   	push   ebx
c001cf7d:	83 d5 00             	adc    ebp,0x0
c001cf80:	6a 01                	push   0x1
c001cf82:	81 c3 00 02 00 00    	add    ebx,0x200
c001cf88:	51                   	push   ecx
c001cf89:	52                   	push   edx
c001cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf8e:	e8 fb fa ff ff       	call   c001ca8e <SATA::access(unsigned long long, int, void*, bool)>
c001cf93:	83 c4 20             	add    esp,0x20
c001cf96:	39 f3                	cmp    ebx,esi
c001cf98:	89 fa                	mov    edx,edi
c001cf9a:	89 e9                	mov    ecx,ebp
c001cf9c:	75 d3                	jne    c001cf71 <SATA::write(unsigned long long, int, void*)+0x41>
c001cf9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cfa2:	bd 10 27 00 00       	mov    ebp,0x2710
c001cfa7:	bb 0a 00 00 00       	mov    ebx,0xa
c001cfac:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001cfb2:	50                   	push   eax
c001cfb3:	50                   	push   eax
c001cfb4:	6a 0f                	push   0xf
c001cfb6:	6a 00                	push   0x0
c001cfb8:	e8 0c f0 ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cfbd:	5a                   	pop    edx
c001cfbe:	59                   	pop    ecx
c001cfbf:	0f b6 c0             	movzx  eax,al
c001cfc2:	50                   	push   eax
c001cfc3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cfc8:	99                   	cdq    
c001cfc9:	f7 fd                	idiv   ebp
c001cfcb:	99                   	cdq    
c001cfcc:	f7 fb                	idiv   ebx
c001cfce:	8d 42 30             	lea    eax,[edx+0x30]
c001cfd1:	0f b6 c0             	movzx  eax,al
c001cfd4:	50                   	push   eax
c001cfd5:	e8 de ef ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001cfda:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cfe0:	5e                   	pop    esi
c001cfe1:	5f                   	pop    edi
c001cfe2:	bf e8 03 00 00       	mov    edi,0x3e8
c001cfe7:	6a 0f                	push   0xf
c001cfe9:	6a 00                	push   0x0
c001cfeb:	e8 d9 ef ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001cff0:	5a                   	pop    edx
c001cff1:	59                   	pop    ecx
c001cff2:	0f b6 c0             	movzx  eax,al
c001cff5:	50                   	push   eax
c001cff6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cffb:	99                   	cdq    
c001cffc:	f7 ff                	idiv   edi
c001cffe:	99                   	cdq    
c001cfff:	f7 fb                	idiv   ebx
c001d001:	8d 42 30             	lea    eax,[edx+0x30]
c001d004:	0f b6 c0             	movzx  eax,al
c001d007:	50                   	push   eax
c001d008:	e8 ab ef ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d00d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d013:	5e                   	pop    esi
c001d014:	be 64 00 00 00       	mov    esi,0x64
c001d019:	58                   	pop    eax
c001d01a:	6a 0f                	push   0xf
c001d01c:	6a 00                	push   0x0
c001d01e:	e8 a6 ef ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d023:	5a                   	pop    edx
c001d024:	59                   	pop    ecx
c001d025:	0f b6 c0             	movzx  eax,al
c001d028:	50                   	push   eax
c001d029:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d02e:	99                   	cdq    
c001d02f:	f7 fe                	idiv   esi
c001d031:	99                   	cdq    
c001d032:	f7 fb                	idiv   ebx
c001d034:	8d 42 30             	lea    eax,[edx+0x30]
c001d037:	0f b6 c0             	movzx  eax,al
c001d03a:	50                   	push   eax
c001d03b:	e8 78 ef ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d040:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d046:	58                   	pop    eax
c001d047:	5a                   	pop    edx
c001d048:	6a 0f                	push   0xf
c001d04a:	6a 00                	push   0x0
c001d04c:	e8 78 ef ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d051:	59                   	pop    ecx
c001d052:	5a                   	pop    edx
c001d053:	0f b6 c0             	movzx  eax,al
c001d056:	50                   	push   eax
c001d057:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d05c:	99                   	cdq    
c001d05d:	f7 fb                	idiv   ebx
c001d05f:	99                   	cdq    
c001d060:	f7 fb                	idiv   ebx
c001d062:	8d 42 30             	lea    eax,[edx+0x30]
c001d065:	0f b6 c0             	movzx  eax,al
c001d068:	50                   	push   eax
c001d069:	e8 4a ef ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d06e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d074:	59                   	pop    ecx
c001d075:	58                   	pop    eax
c001d076:	6a 0f                	push   0xf
c001d078:	6a 00                	push   0x0
c001d07a:	e8 4a ef ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d07f:	5a                   	pop    edx
c001d080:	59                   	pop    ecx
c001d081:	0f b6 c0             	movzx  eax,al
c001d084:	50                   	push   eax
c001d085:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d08a:	99                   	cdq    
c001d08b:	f7 fb                	idiv   ebx
c001d08d:	83 c2 30             	add    edx,0x30
c001d090:	0f b6 d2             	movzx  edx,dl
c001d093:	52                   	push   edx
c001d094:	e8 1f ef ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d099:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d09f:	58                   	pop    eax
c001d0a0:	5a                   	pop    edx
c001d0a1:	6a 0f                	push   0xf
c001d0a3:	6a 00                	push   0x0
c001d0a5:	e8 1f ef ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d0aa:	59                   	pop    ecx
c001d0ab:	5a                   	pop    edx
c001d0ac:	0f b6 c0             	movzx  eax,al
c001d0af:	50                   	push   eax
c001d0b0:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0b5:	99                   	cdq    
c001d0b6:	f7 fd                	idiv   ebp
c001d0b8:	99                   	cdq    
c001d0b9:	f7 fb                	idiv   ebx
c001d0bb:	8d 42 30             	lea    eax,[edx+0x30]
c001d0be:	0f b6 c0             	movzx  eax,al
c001d0c1:	50                   	push   eax
c001d0c2:	e8 f1 ee ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d0c7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0cd:	59                   	pop    ecx
c001d0ce:	5d                   	pop    ebp
c001d0cf:	6a 0f                	push   0xf
c001d0d1:	6a 00                	push   0x0
c001d0d3:	e8 f1 ee ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d0d8:	5a                   	pop    edx
c001d0d9:	59                   	pop    ecx
c001d0da:	0f b6 c0             	movzx  eax,al
c001d0dd:	50                   	push   eax
c001d0de:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0e3:	99                   	cdq    
c001d0e4:	f7 ff                	idiv   edi
c001d0e6:	99                   	cdq    
c001d0e7:	f7 fb                	idiv   ebx
c001d0e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d0ec:	0f b6 c0             	movzx  eax,al
c001d0ef:	50                   	push   eax
c001d0f0:	e8 c3 ee ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d0f5:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d0fb:	5f                   	pop    edi
c001d0fc:	5d                   	pop    ebp
c001d0fd:	6a 0f                	push   0xf
c001d0ff:	6a 00                	push   0x0
c001d101:	e8 c3 ee ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d106:	5a                   	pop    edx
c001d107:	59                   	pop    ecx
c001d108:	0f b6 c0             	movzx  eax,al
c001d10b:	50                   	push   eax
c001d10c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d111:	99                   	cdq    
c001d112:	f7 fe                	idiv   esi
c001d114:	99                   	cdq    
c001d115:	f7 fb                	idiv   ebx
c001d117:	8d 42 30             	lea    eax,[edx+0x30]
c001d11a:	0f b6 c0             	movzx  eax,al
c001d11d:	50                   	push   eax
c001d11e:	e8 95 ee ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d123:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d129:	5e                   	pop    esi
c001d12a:	5f                   	pop    edi
c001d12b:	6a 0f                	push   0xf
c001d12d:	6a 00                	push   0x0
c001d12f:	e8 95 ee ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d134:	5d                   	pop    ebp
c001d135:	5a                   	pop    edx
c001d136:	0f b6 c0             	movzx  eax,al
c001d139:	50                   	push   eax
c001d13a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d13f:	99                   	cdq    
c001d140:	f7 fb                	idiv   ebx
c001d142:	99                   	cdq    
c001d143:	f7 fb                	idiv   ebx
c001d145:	8d 42 30             	lea    eax,[edx+0x30]
c001d148:	0f b6 c0             	movzx  eax,al
c001d14b:	50                   	push   eax
c001d14c:	e8 67 ee ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d151:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d157:	59                   	pop    ecx
c001d158:	5e                   	pop    esi
c001d159:	6a 0f                	push   0xf
c001d15b:	6a 00                	push   0x0
c001d15d:	e8 67 ee ff ff       	call   c001bfc9 <combineColours(unsigned char, unsigned char)>
c001d162:	5f                   	pop    edi
c001d163:	5d                   	pop    ebp
c001d164:	0f b6 c0             	movzx  eax,al
c001d167:	50                   	push   eax
c001d168:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d16d:	99                   	cdq    
c001d16e:	f7 fb                	idiv   ebx
c001d170:	83 c2 30             	add    edx,0x30
c001d173:	0f b6 d2             	movzx  edx,dl
c001d176:	52                   	push   edx
c001d177:	e8 3c ee ff ff       	call   c001bfb8 <combineCharAndColour(char, unsigned char)>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d185:	31 c0                	xor    eax,eax
c001d187:	83 c4 0c             	add    esp,0xc
c001d18a:	5b                   	pop    ebx
c001d18b:	5e                   	pop    esi
c001d18c:	5f                   	pop    edi
c001d18d:	5d                   	pop    ebp
c001d18e:	c3                   	ret    
c001d18f:	90                   	nop

c001d190 <SATAPI::write(unsigned long long, int, void*)>:
c001d190:	b8 03 00 00 00       	mov    eax,0x3
c001d195:	c3                   	ret    

c001d196 <SATAPI::close(int, int, void*)>:
c001d196:	83 ec 0c             	sub    esp,0xc
c001d199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1a3:	85 c0                	test   eax,eax
c001d1a5:	74 0c                	je     c001d1b3 <SATAPI::close(int, int, void*)+0x1d>
c001d1a7:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	50                   	push   eax
c001d1ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1b0:	83 c4 10             	add    esp,0x10
c001d1b3:	31 c0                	xor    eax,eax
c001d1b5:	83 c4 0c             	add    esp,0xc
c001d1b8:	c3                   	ret    
c001d1b9:	90                   	nop

c001d1ba <SATAPI::SATAPI()>:
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c1:	83 ec 04             	sub    esp,0x4
c001d1c4:	68 00 08 00 00       	push   0x800
c001d1c9:	68 d4 1b 02 c0       	push   0xc0021bd4
c001d1ce:	50                   	push   eax
c001d1cf:	e8 9a ef fe ff       	call   c000c16e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1d4:	83 c4 10             	add    esp,0x10
c001d1d7:	ba c8 1c 02 c0       	mov    edx,0xc0021cc8
c001d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e0:	89 10                	mov    DWORD PTR [eax],edx
c001d1e2:	90                   	nop
c001d1e3:	83 c4 0c             	add    esp,0xc
c001d1e6:	c3                   	ret    
c001d1e7:	90                   	nop

c001d1e8 <SATAPI::diskRemoved()>:
c001d1e8:	c3                   	ret    
c001d1e9:	90                   	nop

c001d1ea <SATAPI::diskInserted()>:
c001d1ea:	83 ec 18             	sub    esp,0x18
c001d1ed:	68 e0 1b 02 c0       	push   0xc0021be0
c001d1f2:	e8 46 d7 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001d1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fb:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d202:	83 c4 1c             	add    esp,0x1c
c001d205:	c3                   	ret    

c001d206 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d206:	55                   	push   ebp
c001d207:	57                   	push   edi
c001d208:	56                   	push   esi
c001d209:	53                   	push   ebx
c001d20a:	83 ec 34             	sub    esp,0x34
c001d20d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d211:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d219:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d21d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d221:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d227:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d22d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d231:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d237:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d23b:	83 c0 02             	add    eax,0x2
c001d23e:	c1 e0 07             	shl    eax,0x7
c001d241:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d249:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d24d:	c1 e0 07             	shl    eax,0x7
c001d250:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d258:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d262:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d266:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d26c:	e8 ff e4 ff ff       	call   c001b770 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d271:	83 c4 10             	add    esp,0x10
c001d274:	89 c2                	mov    edx,eax
c001d276:	b8 01 00 00 00       	mov    eax,0x1
c001d27b:	83 fa ff             	cmp    edx,0xffffffff
c001d27e:	0f 84 5f 02 00 00    	je     c001d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d292:	8b 00                	mov    eax,DWORD PTR [eax]
c001d294:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d29a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d2a0:	89 d1                	mov    ecx,edx
c001d2a2:	c1 e1 05             	shl    ecx,0x5
c001d2a5:	01 c8                	add    eax,ecx
c001d2a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d2a9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d2af:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d2b5:	89 08                	mov    DWORD PTR [eax],ecx
c001d2b7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2bd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d2c3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d2c9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d2cc:	50                   	push   eax
c001d2cd:	68 90 00 00 00       	push   0x90
c001d2d2:	6a 00                	push   0x0
c001d2d4:	53                   	push   ebx
c001d2d5:	e8 16 32 fe ff       	call   c00004f0 <memset>
c001d2da:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d2dd:	b9 0c 00 00 00       	mov    ecx,0xc
c001d2e2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d2e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d2e8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d2ee:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d2f2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d2f6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d2fc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d300:	48                   	dec    eax
c001d301:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d306:	89 c1                	mov    ecx,eax
c001d308:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d30e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d313:	09 c8                	or     eax,ecx
c001d315:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d31b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d321:	83 c8 80             	or     eax,0xffffff80
c001d324:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d32a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d32d:	25 00 7f 00 00       	and    eax,0x7f00
c001d332:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d337:	66 89 03             	mov    WORD PTR [ebx],ax
c001d33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d346:	c1 e8 10             	shr    eax,0x10
c001d349:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d350:	c1 e8 18             	shr    eax,0x18
c001d353:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d356:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d35a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d35d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d361:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d364:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d368:	83 c4 10             	add    esp,0x10
c001d36b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d36f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d373:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d377:	31 c0                	xor    eax,eax
c001d379:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d37f:	80 e1 88             	and    cl,0x88
c001d382:	74 0a                	je     c001d38e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d384:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d389:	74 0a                	je     c001d395 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d38b:	40                   	inc    eax
c001d38c:	eb eb                	jmp    c001d379 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d38e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d393:	75 43                	jne    c001d3d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d395:	83 ec 0c             	sub    esp,0xc
c001d398:	68 f8 1b 02 c0       	push   0xc0021bf8
c001d39d:	e8 9b d5 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001d3a2:	58                   	pop    eax
c001d3a3:	5a                   	pop    edx
c001d3a4:	68 0d 1c 02 c0       	push   0xc0021c0d
c001d3a9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d3af:	e8 ce b6 fe ff       	call   c0008a82 <VgaText::puts(char const*)>
c001d3b4:	59                   	pop    ecx
c001d3b5:	5b                   	pop    ebx
c001d3b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3ba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3c0:	e8 45 e4 ff ff       	call   c001b80a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3c5:	5e                   	pop    esi
c001d3c6:	5f                   	pop    edi
c001d3c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3cb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3d1:	e8 14 e4 ff ff       	call   c001b7ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d3d6:	eb 48                	jmp    c001d420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d3d8:	b8 01 00 00 00       	mov    eax,0x1
c001d3dd:	88 d1                	mov    cl,dl
c001d3df:	d3 e0                	shl    eax,cl
c001d3e1:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d3e6:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d3ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d3f0:	89 c7                	mov    edi,eax
c001d3f2:	c1 e3 07             	shl    ebx,0x7
c001d3f5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d3f9:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d3ff:	85 c7                	test   edi,eax
c001d401:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d407:	0f 84 a3 00 00 00    	je     c001d4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d40d:	0f ba e0 1e          	bt     eax,0x1e
c001d411:	73 1a                	jae    c001d42d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d413:	83 ec 0c             	sub    esp,0xc
c001d416:	68 1f 1c 02 c0       	push   0xc0021c1f
c001d41b:	e8 1d d5 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001d420:	83 c4 10             	add    esp,0x10
c001d423:	b8 01 00 00 00       	mov    eax,0x1
c001d428:	e9 b6 00 00 00       	jmp    c001d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d42d:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d433:	83 f8 0d             	cmp    eax,0xd
c001d436:	77 0a                	ja     c001d442 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	68 c8 00 00 00       	push   0xc8
c001d440:	eb 28                	jmp    c001d46a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d442:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d448:	83 f8 0d             	cmp    eax,0xd
c001d44b:	77 0a                	ja     c001d457 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d44d:	83 ec 0c             	sub    esp,0xc
c001d450:	68 58 02 00 00       	push   0x258
c001d455:	eb 13                	jmp    c001d46a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d457:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d45d:	83 f8 06             	cmp    eax,0x6
c001d460:	77 10                	ja     c001d472 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d462:	83 ec 0c             	sub    esp,0xc
c001d465:	68 dc 05 00 00       	push   0x5dc
c001d46a:	e8 65 7e ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001d46f:	83 c4 10             	add    esp,0x10
c001d472:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d476:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d479:	75 06                	jne    c001d481 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d47b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d47f:	74 15                	je     c001d496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d481:	83 fe 06             	cmp    esi,0x6
c001d484:	77 10                	ja     c001d496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	68 c4 09 00 00       	push   0x9c4
c001d48e:	e8 41 7e ff ff       	call   c00152d4 <milliTenthSleep(unsigned int)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	46                   	inc    esi
c001d497:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d49d:	0f 85 56 ff ff ff    	jne    c001d3f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d4a3:	83 ec 0c             	sub    esp,0xc
c001d4a6:	68 32 1c 02 c0       	push   0xc0021c32
c001d4ab:	e9 6b ff ff ff       	jmp    c001d41b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d4b0:	0f ba e0 1e          	bt     eax,0x1e
c001d4b4:	73 0d                	jae    c001d4c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d4b6:	83 ec 0c             	sub    esp,0xc
c001d4b9:	68 46 1c 02 c0       	push   0xc0021c46
c001d4be:	e9 58 ff ff ff       	jmp    c001d41b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d4c3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d4c8:	74 17                	je     c001d4e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d4ca:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d4cf:	74 10                	je     c001d4e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d4d1:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d4d7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d4db:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d4df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4e1:	31 c0                	xor    eax,eax
c001d4e3:	83 c4 2c             	add    esp,0x2c
c001d4e6:	5b                   	pop    ebx
c001d4e7:	5e                   	pop    esi
c001d4e8:	5f                   	pop    edi
c001d4e9:	5d                   	pop    ebp
c001d4ea:	c3                   	ret    
c001d4eb:	90                   	nop

c001d4ec <SATAPI::eject()>:
c001d4ec:	57                   	push   edi
c001d4ed:	b9 03 00 00 00       	mov    ecx,0x3
c001d4f2:	83 ec 18             	sub    esp,0x18
c001d4f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4f9:	fc                   	cld    
c001d4fa:	31 c0                	xor    eax,eax
c001d4fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4fe:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d503:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d508:	50                   	push   eax
c001d509:	6a 00                	push   0x0
c001d50b:	6a 00                	push   0x0
c001d50d:	6a 00                	push   0x0
c001d50f:	6a 00                	push   0x0
c001d511:	6a 02                	push   0x2
c001d513:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d517:	50                   	push   eax
c001d518:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d51c:	e8 e5 fc ff ff       	call   c001d206 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d521:	83 c4 38             	add    esp,0x38
c001d524:	31 c0                	xor    eax,eax
c001d526:	5f                   	pop    edi
c001d527:	c3                   	ret    

c001d528 <SATAPI::detectMedia()>:
c001d528:	53                   	push   ebx
c001d529:	83 ec 14             	sub    esp,0x14
c001d52c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d530:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d536:	e8 b9 05 ff ff       	call   c000daf4 <VCache::writeWriteBuffer()>
c001d53b:	59                   	pop    ecx
c001d53c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d542:	e8 9d 05 ff ff       	call   c000dae4 <VCache::invalidateReadBuffer()>
c001d547:	c7 04 24 5b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c5b
c001d54e:	e8 ea d3 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001d553:	83 c4 10             	add    esp,0x10
c001d556:	31 c0                	xor    eax,eax
c001d558:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d55f:	85 d2                	test   edx,edx
c001d561:	74 0f                	je     c001d572 <SATAPI::detectMedia()+0x4a>
c001d563:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d569:	75 07                	jne    c001d572 <SATAPI::detectMedia()+0x4a>
c001d56b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d572:	40                   	inc    eax
c001d573:	83 f8 1a             	cmp    eax,0x1a
c001d576:	75 e0                	jne    c001d558 <SATAPI::detectMedia()+0x30>
c001d578:	83 c4 08             	add    esp,0x8
c001d57b:	5b                   	pop    ebx
c001d57c:	c3                   	ret    
c001d57d:	90                   	nop

c001d57e <SATAPI::open(int, int, void*)>:
c001d57e:	56                   	push   esi
c001d57f:	53                   	push   ebx
c001d580:	51                   	push   ecx
c001d581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d589:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d593:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d59d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5a7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5b1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5b8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5be:	e8 ff a7 fe ff       	call   c0007dc2 <Phys::allocatePage()>
c001d5c3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d5c9:	89 c6                	mov    esi,eax
c001d5cb:	e8 f2 a7 fe ff       	call   c0007dc2 <Phys::allocatePage()>
c001d5d0:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5d6:	39 c6                	cmp    esi,eax
c001d5d8:	74 10                	je     c001d5ea <SATAPI::open(int, int, void*)+0x6c>
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	68 70 1c 02 c0       	push   0xc0021c70
c001d5e2:	e8 da 31 ff ff       	call   c00107c1 <KePanic(char const*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	83 ec 0c             	sub    esp,0xc
c001d5ed:	6a 02                	push   0x2
c001d5ef:	e8 fd bf fe ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001d5f4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d5fa:	6a 03                	push   0x3
c001d5fc:	50                   	push   eax
c001d5fd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d603:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d609:	e8 c2 c6 fe ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d60e:	83 c4 14             	add    esp,0x14
c001d611:	68 78 01 00 00       	push   0x178
c001d616:	e8 9c a4 fe ff       	call   c0007ab7 <malloc>
c001d61b:	83 c4 0c             	add    esp,0xc
c001d61e:	6a 00                	push   0x0
c001d620:	68 ff ff ff 7f       	push   0x7fffffff
c001d625:	6a 00                	push   0x0
c001d627:	6a 00                	push   0x0
c001d629:	53                   	push   ebx
c001d62a:	68 86 1c 02 c0       	push   0xc0021c86
c001d62f:	89 c6                	mov    esi,eax
c001d631:	50                   	push   eax
c001d632:	e8 17 f9 fe ff       	call   c000cf4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d637:	83 c4 14             	add    esp,0x14
c001d63a:	56                   	push   esi
c001d63b:	e8 ce f9 fe ff       	call   c000d00e <LogicalDisk::assignDriveLetter()>
c001d640:	5a                   	pop    edx
c001d641:	59                   	pop    ecx
c001d642:	0f be c0             	movsx  eax,al
c001d645:	50                   	push   eax
c001d646:	68 d8 1a 02 c0       	push   0xc0021ad8
c001d64b:	e8 ed d2 fe ff       	call   c000a93d <Dbg::kprintf(char const*, ...)>
c001d650:	58                   	pop    eax
c001d651:	5a                   	pop    edx
c001d652:	56                   	push   esi
c001d653:	53                   	push   ebx
c001d654:	e8 47 e7 fe ff       	call   c000bda0 <Device::addChild(Device*)>
c001d659:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d65f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d662:	e8 6f eb fe ff       	call   c000c1d6 <PhysicalDisk::startCache()>
c001d667:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d66e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d671:	e8 b2 fe ff ff       	call   c001d528 <SATAPI::detectMedia()>
c001d676:	83 c4 14             	add    esp,0x14
c001d679:	31 c0                	xor    eax,eax
c001d67b:	5b                   	pop    ebx
c001d67c:	5e                   	pop    esi
c001d67d:	c3                   	ret    

c001d67e <SATAPI::read(unsigned long long, int, void*)>:
c001d67e:	55                   	push   ebp
c001d67f:	57                   	push   edi
c001d680:	56                   	push   esi
c001d681:	53                   	push   ebx
c001d682:	83 ec 3c             	sub    esp,0x3c
c001d685:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d689:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d68d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d691:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d695:	83 fd 04             	cmp    ebp,0x4
c001d698:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d69c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d6a0:	7e 10                	jle    c001d6b2 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d6a2:	83 ec 0c             	sub    esp,0xc
c001d6a5:	68 94 1c 02 c0       	push   0xc0021c94
c001d6aa:	e8 12 31 ff ff       	call   c00107c1 <KePanic(char const*)>
c001d6af:	83 c4 10             	add    esp,0x10
c001d6b2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6b8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d6be:	51                   	push   ecx
c001d6bf:	50                   	push   eax
c001d6c0:	83 c0 02             	add    eax,0x2
c001d6c3:	c1 e0 07             	shl    eax,0x7
c001d6c6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d6cc:	50                   	push   eax
c001d6cd:	52                   	push   edx
c001d6ce:	e8 61 e1 ff ff       	call   c001b834 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d6d3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d6d7:	b9 03 00 00 00       	mov    ecx,0x3
c001d6dc:	fc                   	cld    
c001d6dd:	31 c0                	xor    eax,eax
c001d6df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d6e1:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d6e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d6eb:	83 c4 0c             	add    esp,0xc
c001d6ee:	6a 00                	push   0x0
c001d6f0:	6a 00                	push   0x0
c001d6f2:	6a 00                	push   0x0
c001d6f4:	6a 00                	push   0x0
c001d6f6:	6a 02                	push   0x2
c001d6f8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d6fc:	50                   	push   eax
c001d6fd:	53                   	push   ebx
c001d6fe:	e8 03 fb ff ff       	call   c001d206 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d703:	83 c4 20             	add    esp,0x20
c001d706:	85 c0                	test   eax,eax
c001d708:	89 c6                	mov    esi,eax
c001d70a:	75 46                	jne    c001d752 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d70c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d710:	b9 03 00 00 00       	mov    ecx,0x3
c001d715:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d717:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d71b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d720:	0f c8                	bswap  eax
c001d722:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d726:	89 e8                	mov    eax,ebp
c001d728:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d72c:	50                   	push   eax
c001d72d:	55                   	push   ebp
c001d72e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d732:	c1 e5 0b             	shl    ebp,0xb
c001d735:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d739:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d73d:	55                   	push   ebp
c001d73e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d742:	50                   	push   eax
c001d743:	53                   	push   ebx
c001d744:	e8 bd fa ff ff       	call   c001d206 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d749:	83 c4 20             	add    esp,0x20
c001d74c:	85 c0                	test   eax,eax
c001d74e:	89 c6                	mov    esi,eax
c001d750:	74 0c                	je     c001d75e <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d752:	83 ec 0c             	sub    esp,0xc
c001d755:	53                   	push   ebx
c001d756:	e8 cd fd ff ff       	call   c001d528 <SATAPI::detectMedia()>
c001d75b:	83 c4 10             	add    esp,0x10
c001d75e:	83 c4 3c             	add    esp,0x3c
c001d761:	89 f0                	mov    eax,esi
c001d763:	5b                   	pop    ebx
c001d764:	5e                   	pop    esi
c001d765:	5f                   	pop    edi
c001d766:	5d                   	pop    ebp
c001d767:	c3                   	ret    

c001d768 <IOAPIC::close(int, int, void*)>:
c001d768:	b8 00 00 00 00       	mov    eax,0x0
c001d76d:	c3                   	ret    

c001d76e <apicGetBase()>:
c001d76e:	55                   	push   ebp
c001d76f:	89 e5                	mov    ebp,esp
c001d771:	83 ec 18             	sub    esp,0x18
c001d774:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d779:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d77f:	83 e0 08             	and    eax,0x8
c001d782:	0f b6 c0             	movzx  eax,al
c001d785:	85 c0                	test   eax,eax
c001d787:	75 07                	jne    c001d790 <apicGetBase()+0x22>
c001d789:	b8 00 00 00 00       	mov    eax,0x0
c001d78e:	eb 21                	jmp    c001d7b1 <apicGetBase()+0x43>
c001d790:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d795:	83 ec 08             	sub    esp,0x8
c001d798:	6a 1b                	push   0x1b
c001d79a:	50                   	push   eax
c001d79b:	e8 3a 99 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d7a0:	83 c4 10             	add    esp,0x10
c001d7a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d7a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d7a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7ac:	25 00 00 ff ff       	and    eax,0xffff0000
c001d7b1:	c9                   	leave  
c001d7b2:	c3                   	ret    
c001d7b3:	90                   	nop

c001d7b4 <IOAPIC::IOAPIC()>:
c001d7b4:	83 ec 0c             	sub    esp,0xc
c001d7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7bb:	83 ec 08             	sub    esp,0x8
c001d7be:	68 f8 1c 02 c0       	push   0xc0021cf8
c001d7c3:	50                   	push   eax
c001d7c4:	e8 6f e7 fe ff       	call   c000bf38 <Device::Device(char const*)>
c001d7c9:	83 c4 10             	add    esp,0x10
c001d7cc:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001d7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d5:	89 10                	mov    DWORD PTR [eax],edx
c001d7d7:	90                   	nop
c001d7d8:	83 c4 0c             	add    esp,0xc
c001d7db:	c3                   	ret    

c001d7dc <apicOpen()>:
c001d7dc:	55                   	push   ebp
c001d7dd:	89 e5                	mov    ebp,esp
c001d7df:	53                   	push   ebx
c001d7e0:	83 ec 34             	sub    esp,0x34
c001d7e3:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d7e8:	83 f0 01             	xor    eax,0x1
c001d7eb:	0f b6 c0             	movzx  eax,al
c001d7ee:	85 c0                	test   eax,eax
c001d7f0:	0f 84 a3 00 00 00    	je     c001d899 <apicOpen()+0xbd>
c001d7f6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d7fa:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d7ff:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d803:	0f b6 c0             	movzx  eax,al
c001d806:	39 c2                	cmp    edx,eax
c001d808:	0f 83 84 00 00 00    	jae    c001d892 <apicOpen()+0xb6>
c001d80e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d81b:	e8 97 a2 fe ff       	call   c0007ab7 <malloc>
c001d820:	83 c4 10             	add    esp,0x10
c001d823:	89 c3                	mov    ebx,eax
c001d825:	83 ec 0c             	sub    esp,0xc
c001d828:	53                   	push   ebx
c001d829:	e8 86 ff ff ff       	call   c001d7b4 <IOAPIC::IOAPIC()>
c001d82e:	83 c4 10             	add    esp,0x10
c001d831:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d834:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d838:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d83b:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d842:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d847:	83 c0 01             	add    eax,0x1
c001d84a:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d84f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d854:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d85a:	83 ec 08             	sub    esp,0x8
c001d85d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d860:	50                   	push   eax
c001d861:	e8 3a e5 fe ff       	call   c000bda0 <Device::addChild(Device*)>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d86c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d86e:	83 c0 08             	add    eax,0x8
c001d871:	8b 00                	mov    eax,DWORD PTR [eax]
c001d873:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d877:	6a 00                	push   0x0
c001d879:	6a 00                	push   0x0
c001d87b:	52                   	push   edx
c001d87c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d87f:	ff d0                	call   eax
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d887:	83 c0 01             	add    eax,0x1
c001d88a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d88d:	e9 68 ff ff ff       	jmp    c001d7fa <apicOpen()+0x1e>
c001d892:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d899:	e8 d0 fe ff ff       	call   c001d76e <apicGetBase()>
c001d89e:	05 f0 00 00 00       	add    eax,0xf0
c001d8a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d8a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8ab:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d8ae:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d8b5:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d8bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8bf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8c2:	89 10                	mov    DWORD PTR [eax],edx
c001d8c4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d8cb:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d8d0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d8d3:	7d 7c                	jge    c001d951 <apicOpen()+0x175>
c001d8d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8d8:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8df:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d8e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8e5:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8ec:	c1 e8 08             	shr    eax,0x8
c001d8ef:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d8f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8f6:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8fd:	c1 e8 18             	shr    eax,0x18
c001d900:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d903:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d907:	3d ff 00 00 00       	cmp    eax,0xff
c001d90c:	75 3a                	jne    c001d948 <apicOpen()+0x16c>
c001d90e:	e8 5b fe ff ff       	call   c001d76e <apicGetBase()>
c001d913:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d917:	83 fa 01             	cmp    edx,0x1
c001d91a:	75 07                	jne    c001d923 <apicOpen()+0x147>
c001d91c:	ba 60 03 00 00       	mov    edx,0x360
c001d921:	eb 05                	jmp    c001d928 <apicOpen()+0x14c>
c001d923:	ba 50 03 00 00       	mov    edx,0x350
c001d928:	01 d0                	add    eax,edx
c001d92a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d92d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d930:	8b 00                	mov    eax,DWORD PTR [eax]
c001d932:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d935:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d93c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d940:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d943:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d946:	89 10                	mov    DWORD PTR [eax],edx
c001d948:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d94c:	e9 7a ff ff ff       	jmp    c001d8cb <apicOpen()+0xef>
c001d951:	90                   	nop
c001d952:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d955:	c9                   	leave  
c001d956:	c3                   	ret    
c001d957:	90                   	nop

c001d958 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d958:	55                   	push   ebp
c001d959:	89 e5                	mov    ebp,esp
c001d95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d95e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d964:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d967:	72 1d                	jb     c001d986 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d96c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d975:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d97b:	01 d0                	add    eax,edx
c001d97d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d980:	73 04                	jae    c001d986 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d982:	b0 01                	mov    al,0x1
c001d984:	eb 02                	jmp    c001d988 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d986:	b0 00                	mov    al,0x0
c001d988:	5d                   	pop    ebp
c001d989:	c3                   	ret    

c001d98a <IOAPIC::read(int)>:
c001d98a:	55                   	push   ebp
c001d98b:	89 e5                	mov    ebp,esp
c001d98d:	83 ec 10             	sub    esp,0x10
c001d990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d993:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d999:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d99c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d99f:	0f b6 d0             	movzx  edx,al
c001d9a2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9a5:	89 10                	mov    DWORD PTR [eax],edx
c001d9a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9aa:	83 c0 10             	add    eax,0x10
c001d9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9af:	c9                   	leave  
c001d9b0:	c3                   	ret    
c001d9b1:	90                   	nop

c001d9b2 <IOAPIC::open(int, int, void*)>:
c001d9b2:	55                   	push   ebp
c001d9b3:	89 e5                	mov    ebp,esp
c001d9b5:	57                   	push   edi
c001d9b6:	56                   	push   esi
c001d9b7:	53                   	push   ebx
c001d9b8:	83 ec 04             	sub    esp,0x4
c001d9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9d0:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9e9:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da0b:	0f b6 f0             	movzx  esi,al
c001da0e:	89 d0                	mov    eax,edx
c001da10:	ba 00 00 00 00       	mov    edx,0x0
c001da15:	89 c7                	mov    edi,eax
c001da17:	83 e7 ff             	and    edi,0xffffffff
c001da1a:	89 f9                	mov    ecx,edi
c001da1c:	0f b6 da             	movzx  ebx,dl
c001da1f:	89 c8                	mov    eax,ecx
c001da21:	89 da                	mov    edx,ebx
c001da23:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da26:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da29:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da2d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da31:	83 e0 00             	and    eax,0x0
c001da34:	09 d0                	or     eax,edx
c001da36:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da43:	8d 50 01             	lea    edx,[eax+0x1]
c001da46:	88 d1                	mov    cl,dl
c001da48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001da4b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001da51:	0f b6 d0             	movzx  edx,al
c001da54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da57:	83 c2 08             	add    edx,0x8
c001da5a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001da5e:	0f b6 c9             	movzx  ecx,cl
c001da61:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001da67:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001da6b:	6a 01                	push   0x1
c001da6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da70:	e8 15 ff ff ff       	call   c001d98a <IOAPIC::read(int)>
c001da75:	83 c4 08             	add    esp,0x8
c001da78:	c1 f8 10             	sar    eax,0x10
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	8d 50 01             	lea    edx,[eax+0x1]
c001da81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da84:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001da8a:	b8 00 00 00 00       	mov    eax,0x0
c001da8f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001da92:	5b                   	pop    ebx
c001da93:	5e                   	pop    esi
c001da94:	5f                   	pop    edi
c001da95:	5d                   	pop    ebp
c001da96:	c3                   	ret    
c001da97:	90                   	nop

c001da98 <IOAPIC::write(int, int)>:
c001da98:	55                   	push   ebp
c001da99:	89 e5                	mov    ebp,esp
c001da9b:	83 ec 10             	sub    esp,0x10
c001da9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001daa7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001daaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001daad:	0f b6 d0             	movzx  edx,al
c001dab0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dab3:	89 10                	mov    DWORD PTR [eax],edx
c001dab5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dab8:	8d 50 10             	lea    edx,[eax+0x10]
c001dabb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dabe:	89 02                	mov    DWORD PTR [edx],eax
c001dac0:	90                   	nop
c001dac1:	c9                   	leave  
c001dac2:	c3                   	ret    
c001dac3:	90                   	nop

c001dac4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dac4:	55                   	push   ebp
c001dac5:	89 e5                	mov    ebp,esp
c001dac7:	53                   	push   ebx
c001dac8:	83 ec 2c             	sub    esp,0x2c
c001dacb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dace:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dad1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001dad4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001dad7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dada:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dadd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dae0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dae3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dae6:	88 d8                	mov    al,bl
c001dae8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001daeb:	88 c8                	mov    al,cl
c001daed:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001daf0:	88 d0                	mov    al,dl
c001daf2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001daf5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001daf9:	83 c0 08             	add    eax,0x8
c001dafc:	d1 e0                	shl    eax,1
c001dafe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db05:	83 c0 08             	add    eax,0x8
c001db08:	d1 e0                	shl    eax,1
c001db0a:	83 c0 01             	add    eax,0x1
c001db0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db10:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db13:	50                   	push   eax
c001db14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db17:	e8 6e fe ff ff       	call   c001d98a <IOAPIC::read(int)>
c001db1c:	83 c4 08             	add    esp,0x8
c001db1f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db22:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db2c:	c1 e0 18             	shl    eax,0x18
c001db2f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db32:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db38:	52                   	push   edx
c001db39:	50                   	push   eax
c001db3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db3d:	e8 56 ff ff ff       	call   c001da98 <IOAPIC::write(int, int)>
c001db42:	83 c4 0c             	add    esp,0xc
c001db45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db48:	50                   	push   eax
c001db49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db4c:	e8 39 fe ff ff       	call   c001d98a <IOAPIC::read(int)>
c001db51:	83 c4 08             	add    esp,0x8
c001db54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001db57:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001db5e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001db65:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001db6c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001db70:	85 c0                	test   eax,eax
c001db72:	74 09                	je     c001db7d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001db74:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001db7b:	eb 07                	jmp    c001db84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001db7d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001db84:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001db88:	85 c0                	test   eax,eax
c001db8a:	74 09                	je     c001db95 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001db8c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001db93:	eb 07                	jmp    c001db9c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001db95:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001db9c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dba3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dba7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dbaa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dbad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbb0:	52                   	push   edx
c001dbb1:	50                   	push   eax
c001dbb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbb5:	e8 de fe ff ff       	call   c001da98 <IOAPIC::write(int, int)>
c001dbba:	83 c4 0c             	add    esp,0xc
c001dbbd:	90                   	nop
c001dbbe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dbc1:	c9                   	leave  
c001dbc2:	c3                   	ret    
c001dbc3:	90                   	nop

c001dbc4 <APICTimer::close(int, int, void*)>:
c001dbc4:	b8 00 00 00 00       	mov    eax,0x0
c001dbc9:	c3                   	ret    
c001dbca:	66 90                	xchg   ax,ax

c001dbcc <apicTimerHandler(regs*, void*)>:
c001dbcc:	83 ec 0c             	sub    esp,0xc
c001dbcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dbd5:	b8 10 27 00 00       	mov    eax,0x2710
c001dbda:	ba 00 00 00 00       	mov    edx,0x0
c001dbdf:	f7 f1                	div    ecx
c001dbe1:	83 ec 0c             	sub    esp,0xc
c001dbe4:	50                   	push   eax
c001dbe5:	e8 22 fc fe ff       	call   c000d80c <timerHandler(unsigned int)>
c001dbea:	83 c4 10             	add    esp,0x10
c001dbed:	90                   	nop
c001dbee:	83 c4 0c             	add    esp,0xc
c001dbf1:	c3                   	ret    
c001dbf2:	66 90                	xchg   ax,ax

c001dbf4 <APICTimer::open(int, int, void*)>:
c001dbf4:	83 ec 0c             	sub    esp,0xc
c001dbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbfd:	83 c0 24             	add    eax,0x24
c001dc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc02:	83 ec 08             	sub    esp,0x8
c001dc05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc0d:	ff d0                	call   eax
c001dc0f:	83 c4 10             	add    esp,0x10
c001dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc28:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc38:	83 ec 0c             	sub    esp,0xc
c001dc3b:	51                   	push   ecx
c001dc3c:	6a 01                	push   0x1
c001dc3e:	68 cc db 01 c0       	push   0xc001dbcc
c001dc43:	52                   	push   edx
c001dc44:	50                   	push   eax
c001dc45:	e8 02 e1 fe ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc4a:	83 c4 20             	add    esp,0x20
c001dc4d:	89 c2                	mov    edx,eax
c001dc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc59:	b8 00 00 00 00       	mov    eax,0x0
c001dc5e:	83 c4 0c             	add    esp,0xc
c001dc61:	c3                   	ret    
c001dc62:	66 90                	xchg   ax,ax

c001dc64 <APICTimer::write(int)>:
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	83 ec 0c             	sub    esp,0xc
c001dc6a:	68 2c 1d 02 c0       	push   0xc0021d2c
c001dc6f:	e8 4d 2b ff ff       	call   c00107c1 <KePanic(char const*)>
c001dc74:	83 c4 10             	add    esp,0x10
c001dc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc85:	90                   	nop
c001dc86:	83 c4 0c             	add    esp,0xc
c001dc89:	c3                   	ret    
c001dc8a:	66 90                	xchg   ax,ax

c001dc8c <APICTimer::APICTimer()>:
c001dc8c:	83 ec 0c             	sub    esp,0xc
c001dc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc93:	83 ec 08             	sub    esp,0x8
c001dc96:	68 3c 1d 02 c0       	push   0xc0021d3c
c001dc9b:	50                   	push   eax
c001dc9c:	e8 9f fa fe ff       	call   c000d740 <Timer::Timer(char const*)>
c001dca1:	83 c4 10             	add    esp,0x10
c001dca4:	ba 50 1d 02 c0       	mov    edx,0xc0021d50
c001dca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcad:	89 10                	mov    DWORD PTR [eax],edx
c001dcaf:	90                   	nop
c001dcb0:	83 c4 0c             	add    esp,0xc
c001dcb3:	c3                   	ret    

c001dcb4 <PIT::write(int)>:
c001dcb4:	83 ec 10             	sub    esp,0x10
c001dcb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcc9:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dcce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dcd3:	89 c2                	mov    edx,eax
c001dcd5:	c1 fa 1f             	sar    edx,0x1f
c001dcd8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dcdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dce0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dce7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dcec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dcf0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dcf5:	ee                   	out    dx,al
c001dcf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcfa:	0f b6 c0             	movzx  eax,al
c001dcfd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd11:	ee                   	out    dx,al
c001dd12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd16:	c1 f8 08             	sar    eax,0x8
c001dd19:	0f b6 c0             	movzx  eax,al
c001dd1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd30:	ee                   	out    dx,al
c001dd31:	90                   	nop
c001dd32:	83 c4 10             	add    esp,0x10
c001dd35:	c3                   	ret    
c001dd36:	66 90                	xchg   ax,ax

c001dd38 <pitHandler(regs*, void*)>:
c001dd38:	83 ec 0c             	sub    esp,0xc
c001dd3b:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd41:	b8 10 27 00 00       	mov    eax,0x2710
c001dd46:	89 c2                	mov    edx,eax
c001dd48:	c1 fa 1f             	sar    edx,0x1f
c001dd4b:	f7 f9                	idiv   ecx
c001dd4d:	83 ec 0c             	sub    esp,0xc
c001dd50:	50                   	push   eax
c001dd51:	e8 b6 fa fe ff       	call   c000d80c <timerHandler(unsigned int)>
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	90                   	nop
c001dd5a:	83 c4 0c             	add    esp,0xc
c001dd5d:	c3                   	ret    
c001dd5e:	66 90                	xchg   ax,ax

c001dd60 <PIT::open(int, int, void*)>:
c001dd60:	83 ec 0c             	sub    esp,0xc
c001dd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd67:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd69:	83 c0 24             	add    eax,0x24
c001dd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd6e:	83 ec 08             	sub    esp,0x8
c001dd71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd79:	ff d0                	call   eax
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	6a 00                	push   0x0
c001dd87:	6a 01                	push   0x1
c001dd89:	68 38 dd 01 c0       	push   0xc001dd38
c001dd8e:	6a 00                	push   0x0
c001dd90:	50                   	push   eax
c001dd91:	e8 b6 df fe ff       	call   c000bd4c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd96:	83 c4 20             	add    esp,0x20
c001dd99:	89 c2                	mov    edx,eax
c001dd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dda5:	b8 00 00 00 00       	mov    eax,0x0
c001ddaa:	83 c4 0c             	add    esp,0xc
c001ddad:	c3                   	ret    
c001ddae:	66 90                	xchg   ax,ax

c001ddb0 <PIT::close(int, int, void*)>:
c001ddb0:	83 ec 0c             	sub    esp,0xc
c001ddb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ddc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc5:	6a 01                	push   0x1
c001ddc7:	68 38 dd 01 c0       	push   0xc001dd38
c001ddcc:	6a 00                	push   0x0
c001ddce:	50                   	push   eax
c001ddcf:	e8 ae df fe ff       	call   c000bd82 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ddd4:	83 c4 10             	add    esp,0x10
c001ddd7:	b8 00 00 00 00       	mov    eax,0x0
c001dddc:	83 c4 0c             	add    esp,0xc
c001dddf:	c3                   	ret    

c001dde0 <PIT::PIT()>:
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde7:	83 ec 08             	sub    esp,0x8
c001ddea:	68 78 1d 02 c0       	push   0xc0021d78
c001ddef:	50                   	push   eax
c001ddf0:	e8 4b f9 fe ff       	call   c000d740 <Timer::Timer(char const*)>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c001ddfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de01:	89 10                	mov    DWORD PTR [eax],edx
c001de03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de0d:	0f b6 d0             	movzx  edx,al
c001de10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de14:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de25:	0f b6 d0             	movzx  edx,al
c001de28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de3b:	8d 50 01             	lea    edx,[eax+0x1]
c001de3e:	88 d1                	mov    cl,dl
c001de40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de44:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de4a:	0f b6 d0             	movzx  edx,al
c001de4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001de55:	83 e1 3f             	and    ecx,0x3f
c001de58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001de5c:	90                   	nop
c001de5d:	83 c4 0c             	add    esp,0xc
c001de60:	c3                   	ret    
c001de61:	66 90                	xchg   ax,ax
c001de63:	66 90                	xchg   ax,ax
c001de65:	66 90                	xchg   ax,ax
c001de67:	66 90                	xchg   ax,ax
c001de69:	66 90                	xchg   ax,ax
c001de6b:	66 90                	xchg   ax,ax
c001de6d:	66 90                	xchg   ax,ax
c001de6f:	90                   	nop

c001de70 <avxDetect>:
c001de70:	b8 01 00 00 00       	mov    eax,0x1
c001de75:	0f a2                	cpuid  
c001de77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001de7d:	74 15                	je     c001de94 <avxDetect.noAVX>
c001de7f:	b8 01 00 00 00       	mov    eax,0x1
c001de84:	0f a2                	cpuid  
c001de86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001de8c:	74 06                	je     c001de94 <avxDetect.noAVX>
c001de8e:	b8 01 00 00 00       	mov    eax,0x1
c001de93:	c3                   	ret    

c001de94 <avxDetect.noAVX>:
c001de94:	b8 00 00 00 00       	mov    eax,0x0
c001de99:	c3                   	ret    

c001de9a <avxSave>:
c001de9a:	53                   	push   ebx
c001de9b:	52                   	push   edx
c001de9c:	31 c0                	xor    eax,eax
c001de9e:	48                   	dec    eax
c001de9f:	89 c2                	mov    edx,eax
c001dea1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dea5:	0f ae 23             	xsave  [ebx]
c001dea8:	5a                   	pop    edx
c001dea9:	5b                   	pop    ebx
c001deaa:	c3                   	ret    

c001deab <avxLoad>:
c001deab:	53                   	push   ebx
c001deac:	52                   	push   edx
c001dead:	31 c0                	xor    eax,eax
c001deaf:	48                   	dec    eax
c001deb0:	89 c2                	mov    edx,eax
c001deb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001deb6:	0f ae 2b             	xrstor [ebx]
c001deb9:	5a                   	pop    edx
c001deba:	5b                   	pop    ebx
c001debb:	c3                   	ret    

c001debc <avxInit>:
c001debc:	e8 67 03 00 00       	call   c001e228 <sseInit>
c001dec1:	50                   	push   eax
c001dec2:	51                   	push   ecx
c001dec3:	0f 20 e0             	mov    eax,cr4
c001dec6:	0d 00 00 04 00       	or     eax,0x40000
c001decb:	0f 22 e0             	mov    cr4,eax
c001dece:	31 c9                	xor    ecx,ecx
c001ded0:	0f 01 d0             	xgetbv 
c001ded3:	0d 07 00 00 00       	or     eax,0x7
c001ded8:	0f 01 d1             	xsetbv 
c001dedb:	59                   	pop    ecx
c001dedc:	58                   	pop    eax
c001dedd:	c3                   	ret    

c001dede <avxClose>:
c001dede:	c3                   	ret    

c001dedf <wouldSheSayYes>:
c001dedf:	c3                   	ret    
c001dee0:	49                   	dec    ecx
c001dee1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dee5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dee9:	75 20                	jne    c001df0b <isr0+0xb>
c001deeb:	4e                   	dec    esi
c001deec:	79 61                	jns    c001df4f <isr7+0x3>
c001deee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001def3:	66 90                	xchg   ax,ax
c001def5:	66 90                	xchg   ax,ax
c001def7:	66 90                	xchg   ax,ax
c001def9:	66 90                	xchg   ax,ax
c001defb:	66 90                	xchg   ax,ax
c001defd:	66 90                	xchg   ax,ax
c001deff:	90                   	nop

c001df00 <isr0>:
c001df00:	fa                   	cli    
c001df01:	68 00 00 00 00       	push   0x0
c001df06:	68 00 00 00 00       	push   0x0
c001df0b:	e9 56 01 00 00       	jmp    c001e066 <int_common_stub>

c001df10 <isr1>:
c001df10:	fa                   	cli    
c001df11:	6a 00                	push   0x0
c001df13:	6a 01                	push   0x1
c001df15:	e9 4c 01 00 00       	jmp    c001e066 <int_common_stub>

c001df1a <isr2>:
c001df1a:	fa                   	cli    
c001df1b:	6a 00                	push   0x0
c001df1d:	6a 02                	push   0x2
c001df1f:	e9 42 01 00 00       	jmp    c001e066 <int_common_stub>

c001df24 <isr3>:
c001df24:	fa                   	cli    
c001df25:	6a 00                	push   0x0
c001df27:	6a 03                	push   0x3
c001df29:	e9 38 01 00 00       	jmp    c001e066 <int_common_stub>

c001df2e <isr4>:
c001df2e:	fa                   	cli    
c001df2f:	6a 00                	push   0x0
c001df31:	6a 04                	push   0x4
c001df33:	e9 2e 01 00 00       	jmp    c001e066 <int_common_stub>

c001df38 <isr5>:
c001df38:	fa                   	cli    
c001df39:	6a 00                	push   0x0
c001df3b:	6a 05                	push   0x5
c001df3d:	e9 24 01 00 00       	jmp    c001e066 <int_common_stub>

c001df42 <isr6>:
c001df42:	fa                   	cli    
c001df43:	6a 00                	push   0x0
c001df45:	6a 06                	push   0x6
c001df47:	e9 1a 01 00 00       	jmp    c001e066 <int_common_stub>

c001df4c <isr7>:
c001df4c:	fa                   	cli    
c001df4d:	6a 00                	push   0x0
c001df4f:	6a 07                	push   0x7
c001df51:	e9 10 01 00 00       	jmp    c001e066 <int_common_stub>

c001df56 <isr8>:
c001df56:	fa                   	cli    
c001df57:	6a 08                	push   0x8
c001df59:	e9 08 01 00 00       	jmp    c001e066 <int_common_stub>

c001df5e <isr9>:
c001df5e:	fa                   	cli    
c001df5f:	6a 00                	push   0x0
c001df61:	6a 09                	push   0x9
c001df63:	e9 fe 00 00 00       	jmp    c001e066 <int_common_stub>

c001df68 <isr10>:
c001df68:	fa                   	cli    
c001df69:	6a 0a                	push   0xa
c001df6b:	e9 f6 00 00 00       	jmp    c001e066 <int_common_stub>

c001df70 <isr11>:
c001df70:	fa                   	cli    
c001df71:	6a 0b                	push   0xb
c001df73:	e9 ee 00 00 00       	jmp    c001e066 <int_common_stub>

c001df78 <isr12>:
c001df78:	fa                   	cli    
c001df79:	6a 0c                	push   0xc
c001df7b:	e9 e6 00 00 00       	jmp    c001e066 <int_common_stub>

c001df80 <isr13>:
c001df80:	fa                   	cli    
c001df81:	6a 0d                	push   0xd
c001df83:	53                   	push   ebx
c001df84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df88:	81 fb 56 e1 01 c0    	cmp    ebx,0xc001e156
c001df8e:	5b                   	pop    ebx
c001df8f:	0f 84 c3 01 00 00    	je     c001e158 <finishSignal2>
c001df95:	e9 cc 00 00 00       	jmp    c001e066 <int_common_stub>

c001df9a <isr14>:
c001df9a:	fa                   	cli    
c001df9b:	6a 0e                	push   0xe
c001df9d:	e9 c4 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfa2 <isr15>:
c001dfa2:	fa                   	cli    
c001dfa3:	6a 00                	push   0x0
c001dfa5:	6a 0f                	push   0xf
c001dfa7:	e9 ba 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfac <isr16>:
c001dfac:	fa                   	cli    
c001dfad:	6a 00                	push   0x0
c001dfaf:	6a 10                	push   0x10
c001dfb1:	e9 b0 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfb6 <isr17>:
c001dfb6:	fa                   	cli    
c001dfb7:	6a 00                	push   0x0
c001dfb9:	6a 11                	push   0x11
c001dfbb:	e9 a6 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfc0 <isr18>:
c001dfc0:	fa                   	cli    
c001dfc1:	6a 00                	push   0x0
c001dfc3:	6a 12                	push   0x12
c001dfc5:	e9 9c 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfca <irq3>:
c001dfca:	fa                   	cli    
c001dfcb:	6a 00                	push   0x0
c001dfcd:	6a 23                	push   0x23
c001dfcf:	e9 92 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfd4 <irq4>:
c001dfd4:	fa                   	cli    
c001dfd5:	6a 00                	push   0x0
c001dfd7:	6a 24                	push   0x24
c001dfd9:	e9 88 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfde <irq5>:
c001dfde:	fa                   	cli    
c001dfdf:	6a 00                	push   0x0
c001dfe1:	6a 25                	push   0x25
c001dfe3:	e9 7e 00 00 00       	jmp    c001e066 <int_common_stub>

c001dfe8 <irq6>:
c001dfe8:	fa                   	cli    
c001dfe9:	6a 00                	push   0x0
c001dfeb:	6a 26                	push   0x26
c001dfed:	e9 74 00 00 00       	jmp    c001e066 <int_common_stub>

c001dff2 <irq7>:
c001dff2:	fa                   	cli    
c001dff3:	6a 00                	push   0x0
c001dff5:	6a 27                	push   0x27
c001dff7:	e9 6a 00 00 00       	jmp    c001e066 <int_common_stub>

c001dffc <irq8>:
c001dffc:	fa                   	cli    
c001dffd:	6a 00                	push   0x0
c001dfff:	6a 28                	push   0x28
c001e001:	e9 60 00 00 00       	jmp    c001e066 <int_common_stub>

c001e006 <irq9>:
c001e006:	fa                   	cli    
c001e007:	6a 00                	push   0x0
c001e009:	6a 29                	push   0x29
c001e00b:	e9 56 00 00 00       	jmp    c001e066 <int_common_stub>

c001e010 <irq10>:
c001e010:	fa                   	cli    
c001e011:	6a 00                	push   0x0
c001e013:	6a 2a                	push   0x2a
c001e015:	e9 4c 00 00 00       	jmp    c001e066 <int_common_stub>

c001e01a <irq11>:
c001e01a:	fa                   	cli    
c001e01b:	6a 00                	push   0x0
c001e01d:	6a 2b                	push   0x2b
c001e01f:	e9 42 00 00 00       	jmp    c001e066 <int_common_stub>

c001e024 <irq12>:
c001e024:	fa                   	cli    
c001e025:	6a 00                	push   0x0
c001e027:	6a 2c                	push   0x2c
c001e029:	e9 38 00 00 00       	jmp    c001e066 <int_common_stub>

c001e02e <irq13>:
c001e02e:	fa                   	cli    
c001e02f:	6a 00                	push   0x0
c001e031:	6a 2d                	push   0x2d
c001e033:	e9 2e 00 00 00       	jmp    c001e066 <int_common_stub>

c001e038 <irq14>:
c001e038:	fa                   	cli    
c001e039:	6a 00                	push   0x0
c001e03b:	6a 2e                	push   0x2e
c001e03d:	e9 24 00 00 00       	jmp    c001e066 <int_common_stub>

c001e042 <irq15>:
c001e042:	fa                   	cli    
c001e043:	6a 00                	push   0x0
c001e045:	6a 2f                	push   0x2f
c001e047:	e9 1a 00 00 00       	jmp    c001e066 <int_common_stub>

c001e04c <irq1>:
c001e04c:	fa                   	cli    
c001e04d:	6a 00                	push   0x0
c001e04f:	6a 21                	push   0x21
c001e051:	eb 13                	jmp    c001e066 <int_common_stub>

c001e053 <irq2>:
c001e053:	fa                   	cli    
c001e054:	6a 00                	push   0x0
c001e056:	6a 22                	push   0x22
c001e058:	eb 0c                	jmp    c001e066 <int_common_stub>

c001e05a <isr96>:
c001e05a:	6a 00                	push   0x0
c001e05c:	6a 60                	push   0x60
c001e05e:	fb                   	sti    
c001e05f:	eb 37                	jmp    c001e098 <syscall_common_stub>

c001e061 <irq0>:
c001e061:	fa                   	cli    
c001e062:	6a 00                	push   0x0
c001e064:	6a 20                	push   0x20

c001e066 <int_common_stub>:
c001e066:	60                   	pusha  
c001e067:	1e                   	push   ds
c001e068:	06                   	push   es
c001e069:	0f a0                	push   fs
c001e06b:	0f a8                	push   gs
c001e06d:	66 b8 10 00          	mov    ax,0x10
c001e071:	66 8e d8             	mov    ds,ax
c001e074:	66 8e c0             	mov    es,ax
c001e077:	66 8e e0             	mov    fs,ax
c001e07a:	66 8e e8             	mov    gs,ax
c001e07d:	54                   	push   esp
c001e07e:	fc                   	cld    
c001e07f:	e8 c8 e1 fe ff       	call   c000c24c <int_handler>
c001e084:	81 c4 04 00 00 00    	add    esp,0x4
c001e08a:	0f a9                	pop    gs
c001e08c:	0f a1                	pop    fs
c001e08e:	07                   	pop    es
c001e08f:	1f                   	pop    ds
c001e090:	61                   	popa   
c001e091:	81 c4 08 00 00 00    	add    esp,0x8
c001e097:	cf                   	iret   

c001e098 <syscall_common_stub>:
c001e098:	60                   	pusha  
c001e099:	1e                   	push   ds
c001e09a:	06                   	push   es
c001e09b:	0f a0                	push   fs
c001e09d:	0f a8                	push   gs
c001e09f:	66 b8 10 00          	mov    ax,0x10
c001e0a3:	66 8e d8             	mov    ds,ax
c001e0a6:	66 8e c0             	mov    es,ax
c001e0a9:	66 8e e0             	mov    fs,ax
c001e0ac:	66 8e e8             	mov    gs,ax
c001e0af:	54                   	push   esp
c001e0b0:	fc                   	cld    
c001e0b1:	e8 96 e1 fe ff       	call   c000c24c <int_handler>
c001e0b6:	81 c4 04 00 00 00    	add    esp,0x4
c001e0bc:	0f a9                	pop    gs
c001e0be:	0f a1                	pop    fs
c001e0c0:	07                   	pop    es
c001e0c1:	1f                   	pop    ds
c001e0c2:	e8 00 2d ff ff       	call   c0010dc7 <KiCheckSignalZ>
c001e0c7:	3d 00 00 00 00       	cmp    eax,0x0
c001e0cc:	0f 84 c0 00 00 00    	je     c001e192 <skipSignals>
c001e0d2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e0d7:	61                   	popa   
c001e0d8:	53                   	push   ebx
c001e0d9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e0df:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e0e2:	5b                   	pop    ebx
c001e0e3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e0e8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e0eb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e0ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0f1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e0f4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e0f7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e0fa:	81 c4 08 00 00 00    	add    esp,0x8
c001e100:	5e                   	pop    esi
c001e101:	5b                   	pop    ebx
c001e102:	59                   	pop    ecx
c001e103:	5a                   	pop    edx
c001e104:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e107:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e10a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e10d:	52                   	push   edx
c001e10e:	51                   	push   ecx
c001e10f:	53                   	push   ebx
c001e110:	56                   	push   esi
c001e111:	81 ec 08 00 00 00    	sub    esp,0x8
c001e117:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e11a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e11d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e120:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e123:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e126:	60                   	pusha  
c001e127:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e12d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e130:	89 e3                	mov    ebx,esp
c001e132:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e135:	52                   	push   edx
c001e136:	68 56 e1 01 c0       	push   0xc001e156
c001e13b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e13e:	89 dc                	mov    esp,ebx
c001e140:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e143:	68 23 00 00 00       	push   0x23
c001e148:	51                   	push   ecx
c001e149:	68 02 02 00 00       	push   0x202
c001e14e:	68 1b 00 00 00       	push   0x1b
c001e153:	ff 36                	push   DWORD PTR [esi]
c001e155:	cf                   	iret   

c001e156 <finishSignal>:
c001e156:	cd 0f                	int    0xf

c001e158 <finishSignal2>:
c001e158:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e15e:	e8 e1 2c ff ff       	call   c0010e44 <KiFinishSignalZ>
c001e163:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e169:	68 23 00 00 00       	push   0x23
c001e16e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e171:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e174:	68 1b 00 00 00       	push   0x1b
c001e179:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e17c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e17f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e182:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e185:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e188:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e18b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e18e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e191:	cf                   	iret   

c001e192 <skipSignals>:
c001e192:	61                   	popa   
c001e193:	81 c4 08 00 00 00    	add    esp,0x8
c001e199:	cf                   	iret   
c001e19a:	90                   	nop
c001e19b:	90                   	nop

c001e19c <irq16>:
c001e19c:	fa                   	cli    
c001e19d:	6a 00                	push   0x0
c001e19f:	6a 30                	push   0x30
c001e1a1:	e9 c0 fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1a6 <irq17>:
c001e1a6:	fa                   	cli    
c001e1a7:	6a 00                	push   0x0
c001e1a9:	6a 31                	push   0x31
c001e1ab:	e9 b6 fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1b0 <irq18>:
c001e1b0:	fa                   	cli    
c001e1b1:	6a 00                	push   0x0
c001e1b3:	6a 32                	push   0x32
c001e1b5:	e9 ac fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1ba <irq19>:
c001e1ba:	fa                   	cli    
c001e1bb:	6a 00                	push   0x0
c001e1bd:	6a 33                	push   0x33
c001e1bf:	e9 a2 fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1c4 <irq20>:
c001e1c4:	fa                   	cli    
c001e1c5:	6a 00                	push   0x0
c001e1c7:	6a 34                	push   0x34
c001e1c9:	e9 98 fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1ce <irq21>:
c001e1ce:	fa                   	cli    
c001e1cf:	6a 00                	push   0x0
c001e1d1:	6a 35                	push   0x35
c001e1d3:	e9 8e fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1d8 <irq22>:
c001e1d8:	fa                   	cli    
c001e1d9:	6a 00                	push   0x0
c001e1db:	6a 36                	push   0x36
c001e1dd:	e9 84 fe ff ff       	jmp    c001e066 <int_common_stub>

c001e1e2 <irq23>:
c001e1e2:	fa                   	cli    
c001e1e3:	6a 00                	push   0x0
c001e1e5:	6a 37                	push   0x37
c001e1e7:	e9 7a fe ff ff       	jmp    c001e066 <int_common_stub>
c001e1ec:	66 90                	xchg   ax,ax
c001e1ee:	66 90                	xchg   ax,ax

c001e1f0 <i386GetRDRAND>:
c001e1f0:	b9 64 00 00 00       	mov    ecx,0x64

c001e1f5 <retry>:
c001e1f5:	0f c7 f0             	rdrand eax
c001e1f8:	72 05                	jb     c001e1ff <retry.done>
c001e1fa:	e2 f9                	loop   c001e1f5 <retry>

c001e1fc <retry.fail>:
c001e1fc:	31 c0                	xor    eax,eax
c001e1fe:	c3                   	ret    

c001e1ff <retry.done>:
c001e1ff:	c3                   	ret    

c001e200 <absolutelyNoChanceInHell>:
c001e200:	b8 01 00 00 00       	mov    eax,0x1
c001e205:	0f a2                	cpuid  
c001e207:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e20d:	74 06                	je     c001e215 <sseDetect.noSSE>
c001e20f:	b8 01 00 00 00       	mov    eax,0x1
c001e214:	c3                   	ret    

c001e215 <sseDetect.noSSE>:
c001e215:	31 c0                	xor    eax,eax
c001e217:	c3                   	ret    

c001e218 <sseSave>:
c001e218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e21c:	0f ae 00             	fxsave [eax]
c001e21f:	c3                   	ret    

c001e220 <sseLoad>:
c001e220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e224:	0f ae 08             	fxrstor [eax]
c001e227:	c3                   	ret    

c001e228 <sseInit>:
c001e228:	e8 42 00 00 00       	call   c001e26f <x87Init>
c001e22d:	0f 20 e0             	mov    eax,cr4
c001e230:	66 0d 00 06          	or     ax,0x600
c001e234:	0f 22 e0             	mov    cr4,eax
c001e237:	c3                   	ret    

c001e238 <sseClose>:
c001e238:	c3                   	ret    
c001e239:	66 90                	xchg   ax,ax
c001e23b:	66 90                	xchg   ax,ax
c001e23d:	66 90                	xchg   ax,ax
c001e23f:	90                   	nop

c001e240 <value_37F>:
c001e240:	7f 03                	jg     c001e245 <value_37A+0x1>

c001e242 <value_37E>:
c001e242:	7e 03                	jle    c001e247 <x87Detect+0x1>

c001e244 <value_37A>:
c001e244:	7a 03                	jp     c001e249 <x87Detect+0x3>

c001e246 <x87Detect>:
c001e246:	b8 01 00 00 00       	mov    eax,0x1
c001e24b:	0f a2                	cpuid  
c001e24d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e253:	74 06                	je     c001e25b <x87Detect.nox87>
c001e255:	b8 01 00 00 00       	mov    eax,0x1
c001e25a:	c3                   	ret    

c001e25b <x87Detect.nox87>:
c001e25b:	b8 00 00 00 00       	mov    eax,0x0
c001e260:	c3                   	ret    

c001e261 <x87Save>:
c001e261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e265:	dd 30                	fnsave [eax]
c001e267:	c3                   	ret    

c001e268 <x87Load>:
c001e268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e26c:	dd 20                	frstor [eax]
c001e26e:	c3                   	ret    

c001e26f <x87Init>:
c001e26f:	0f 20 c0             	mov    eax,cr0
c001e272:	66 25 fb ff          	and    ax,0xfffb
c001e276:	66 0d 22 00          	or     ax,0x22
c001e27a:	0f 22 c0             	mov    cr0,eax
c001e27d:	db e3                	fninit 
c001e27f:	0f 06                	clts   
c001e281:	d9 2d 44 e2 01 c0    	fldcw  WORD PTR ds:0xc001e244
c001e287:	c3                   	ret    

c001e288 <x87Close>:
c001e288:	c3                   	ret    
c001e289:	66 90                	xchg   ax,ax
c001e28b:	90                   	nop

c001e28c <__do_global_ctors_aux>:
c001e28c:	a1 40 f2 01 c0       	mov    eax,ds:0xc001f240
c001e291:	83 f8 ff             	cmp    eax,0xffffffff
c001e294:	74 1a                	je     c001e2b0 <__do_global_ctors_aux+0x24>
c001e296:	55                   	push   ebp
c001e297:	89 e5                	mov    ebp,esp
c001e299:	53                   	push   ebx
c001e29a:	52                   	push   edx
c001e29b:	bb 40 f2 01 c0       	mov    ebx,0xc001f240
c001e2a0:	ff d0                	call   eax
c001e2a2:	83 eb 04             	sub    ebx,0x4
c001e2a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2a7:	83 f8 ff             	cmp    eax,0xffffffff
c001e2aa:	75 f4                	jne    c001e2a0 <__do_global_ctors_aux+0x14>
c001e2ac:	58                   	pop    eax
c001e2ad:	5b                   	pop    ebx
c001e2ae:	5d                   	pop    ebp
c001e2af:	c3                   	ret    
c001e2b0:	c3                   	ret    
c001e2b1:	66 90                	xchg   ax,ax
c001e2b3:	90                   	nop

c001e2b4 <__divdi3>:
c001e2b4:	55                   	push   ebp
c001e2b5:	57                   	push   edi
c001e2b6:	56                   	push   esi
c001e2b7:	53                   	push   ebx
c001e2b8:	83 ec 1c             	sub    esp,0x1c
c001e2bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e2bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e2c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e2ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e2ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2d2:	85 db                	test   ebx,ebx
c001e2d4:	0f 88 8e 00 00 00    	js     c001e368 <__divdi3+0xb4>
c001e2da:	89 dd                	mov    ebp,ebx
c001e2dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e2e4:	89 d3                	mov    ebx,edx
c001e2e6:	85 d2                	test   edx,edx
c001e2e8:	79 0d                	jns    c001e2f7 <__divdi3+0x43>
c001e2ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e2ee:	f7 d8                	neg    eax
c001e2f0:	83 d2 00             	adc    edx,0x0
c001e2f3:	f7 da                	neg    edx
c001e2f5:	89 d3                	mov    ebx,edx
c001e2f7:	89 c7                	mov    edi,eax
c001e2f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e2fc:	85 db                	test   ebx,ebx
c001e2fe:	75 48                	jne    c001e348 <__divdi3+0x94>
c001e300:	39 ef                	cmp    edi,ebp
c001e302:	76 24                	jbe    c001e328 <__divdi3+0x74>
c001e304:	89 ea                	mov    edx,ebp
c001e306:	f7 f7                	div    edi
c001e308:	89 c1                	mov    ecx,eax
c001e30a:	31 f6                	xor    esi,esi
c001e30c:	89 c8                	mov    eax,ecx
c001e30e:	89 f2                	mov    edx,esi
c001e310:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e314:	85 c9                	test   ecx,ecx
c001e316:	74 07                	je     c001e31f <__divdi3+0x6b>
c001e318:	f7 d8                	neg    eax
c001e31a:	83 d2 00             	adc    edx,0x0
c001e31d:	f7 da                	neg    edx
c001e31f:	83 c4 1c             	add    esp,0x1c
c001e322:	5b                   	pop    ebx
c001e323:	5e                   	pop    esi
c001e324:	5f                   	pop    edi
c001e325:	5d                   	pop    ebp
c001e326:	c3                   	ret    
c001e327:	90                   	nop
c001e328:	85 ff                	test   edi,edi
c001e32a:	75 0b                	jne    c001e337 <__divdi3+0x83>
c001e32c:	b8 01 00 00 00       	mov    eax,0x1
c001e331:	31 d2                	xor    edx,edx
c001e333:	f7 f3                	div    ebx
c001e335:	89 c7                	mov    edi,eax
c001e337:	31 d2                	xor    edx,edx
c001e339:	89 e8                	mov    eax,ebp
c001e33b:	f7 f7                	div    edi
c001e33d:	89 c6                	mov    esi,eax
c001e33f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e342:	f7 f7                	div    edi
c001e344:	89 c1                	mov    ecx,eax
c001e346:	eb c4                	jmp    c001e30c <__divdi3+0x58>
c001e348:	39 eb                	cmp    ebx,ebp
c001e34a:	77 3c                	ja     c001e388 <__divdi3+0xd4>
c001e34c:	0f bd f3             	bsr    esi,ebx
c001e34f:	83 f6 1f             	xor    esi,0x1f
c001e352:	75 40                	jne    c001e394 <__divdi3+0xe0>
c001e354:	39 eb                	cmp    ebx,ebp
c001e356:	72 09                	jb     c001e361 <__divdi3+0xad>
c001e358:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e35b:	0f 87 97 00 00 00    	ja     c001e3f8 <__divdi3+0x144>
c001e361:	b9 01 00 00 00       	mov    ecx,0x1
c001e366:	eb a4                	jmp    c001e30c <__divdi3+0x58>
c001e368:	f7 d9                	neg    ecx
c001e36a:	83 d3 00             	adc    ebx,0x0
c001e36d:	f7 db                	neg    ebx
c001e36f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e372:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e376:	89 dd                	mov    ebp,ebx
c001e378:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e380:	e9 5f ff ff ff       	jmp    c001e2e4 <__divdi3+0x30>
c001e385:	8d 76 00             	lea    esi,[esi+0x0]
c001e388:	31 f6                	xor    esi,esi
c001e38a:	31 c9                	xor    ecx,ecx
c001e38c:	e9 7b ff ff ff       	jmp    c001e30c <__divdi3+0x58>
c001e391:	8d 76 00             	lea    esi,[esi+0x0]
c001e394:	b8 20 00 00 00       	mov    eax,0x20
c001e399:	29 f0                	sub    eax,esi
c001e39b:	89 f1                	mov    ecx,esi
c001e39d:	d3 e3                	shl    ebx,cl
c001e39f:	89 fa                	mov    edx,edi
c001e3a1:	88 c1                	mov    cl,al
c001e3a3:	d3 ea                	shr    edx,cl
c001e3a5:	09 da                	or     edx,ebx
c001e3a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3ab:	89 f1                	mov    ecx,esi
c001e3ad:	d3 e7                	shl    edi,cl
c001e3af:	89 eb                	mov    ebx,ebp
c001e3b1:	88 c1                	mov    cl,al
c001e3b3:	d3 eb                	shr    ebx,cl
c001e3b5:	89 f1                	mov    ecx,esi
c001e3b7:	d3 e5                	shl    ebp,cl
c001e3b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e3bc:	88 c1                	mov    cl,al
c001e3be:	d3 ea                	shr    edx,cl
c001e3c0:	09 d5                	or     ebp,edx
c001e3c2:	89 e8                	mov    eax,ebp
c001e3c4:	89 da                	mov    edx,ebx
c001e3c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e3ca:	89 d3                	mov    ebx,edx
c001e3cc:	89 c5                	mov    ebp,eax
c001e3ce:	f7 e7                	mul    edi
c001e3d0:	39 d3                	cmp    ebx,edx
c001e3d2:	72 18                	jb     c001e3ec <__divdi3+0x138>
c001e3d4:	74 0a                	je     c001e3e0 <__divdi3+0x12c>
c001e3d6:	89 e9                	mov    ecx,ebp
c001e3d8:	31 f6                	xor    esi,esi
c001e3da:	e9 2d ff ff ff       	jmp    c001e30c <__divdi3+0x58>
c001e3df:	90                   	nop
c001e3e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e3e3:	89 f1                	mov    ecx,esi
c001e3e5:	d3 e7                	shl    edi,cl
c001e3e7:	39 c7                	cmp    edi,eax
c001e3e9:	73 eb                	jae    c001e3d6 <__divdi3+0x122>
c001e3eb:	90                   	nop
c001e3ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e3ef:	31 f6                	xor    esi,esi
c001e3f1:	e9 16 ff ff ff       	jmp    c001e30c <__divdi3+0x58>
c001e3f6:	66 90                	xchg   ax,ax
c001e3f8:	31 c9                	xor    ecx,ecx
c001e3fa:	e9 0d ff ff ff       	jmp    c001e30c <__divdi3+0x58>
c001e3ff:	90                   	nop

c001e400 <__moddi3>:
c001e400:	55                   	push   ebp
c001e401:	57                   	push   edi
c001e402:	56                   	push   esi
c001e403:	53                   	push   ebx
c001e404:	83 ec 2c             	sub    esp,0x2c
c001e407:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e40b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e40f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e413:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e417:	85 db                	test   ebx,ebx
c001e419:	0f 88 85 00 00 00    	js     c001e4a4 <__moddi3+0xa4>
c001e41f:	89 de                	mov    esi,ebx
c001e421:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e429:	89 d7                	mov    edi,edx
c001e42b:	85 d2                	test   edx,edx
c001e42d:	79 09                	jns    c001e438 <__moddi3+0x38>
c001e42f:	f7 d8                	neg    eax
c001e431:	83 d2 00             	adc    edx,0x0
c001e434:	f7 da                	neg    edx
c001e436:	89 d7                	mov    edi,edx
c001e438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e43c:	89 cd                	mov    ebp,ecx
c001e43e:	85 ff                	test   edi,edi
c001e440:	75 52                	jne    c001e494 <__moddi3+0x94>
c001e442:	89 c3                	mov    ebx,eax
c001e444:	39 f0                	cmp    eax,esi
c001e446:	76 24                	jbe    c001e46c <__moddi3+0x6c>
c001e448:	89 c8                	mov    eax,ecx
c001e44a:	89 f2                	mov    edx,esi
c001e44c:	f7 f3                	div    ebx
c001e44e:	89 d6                	mov    esi,edx
c001e450:	89 f0                	mov    eax,esi
c001e452:	31 d2                	xor    edx,edx
c001e454:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e458:	85 c9                	test   ecx,ecx
c001e45a:	74 07                	je     c001e463 <__moddi3+0x63>
c001e45c:	f7 d8                	neg    eax
c001e45e:	83 d2 00             	adc    edx,0x0
c001e461:	f7 da                	neg    edx
c001e463:	83 c4 2c             	add    esp,0x2c
c001e466:	5b                   	pop    ebx
c001e467:	5e                   	pop    esi
c001e468:	5f                   	pop    edi
c001e469:	5d                   	pop    ebp
c001e46a:	c3                   	ret    
c001e46b:	90                   	nop
c001e46c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e470:	85 db                	test   ebx,ebx
c001e472:	75 0d                	jne    c001e481 <__moddi3+0x81>
c001e474:	b8 01 00 00 00       	mov    eax,0x1
c001e479:	31 d2                	xor    edx,edx
c001e47b:	f7 f7                	div    edi
c001e47d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e481:	89 f0                	mov    eax,esi
c001e483:	31 d2                	xor    edx,edx
c001e485:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e489:	f7 f7                	div    edi
c001e48b:	89 e8                	mov    eax,ebp
c001e48d:	f7 f7                	div    edi
c001e48f:	89 d6                	mov    esi,edx
c001e491:	eb bd                	jmp    c001e450 <__moddi3+0x50>
c001e493:	90                   	nop
c001e494:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e498:	39 f7                	cmp    edi,esi
c001e49a:	76 20                	jbe    c001e4bc <__moddi3+0xbc>
c001e49c:	89 c8                	mov    eax,ecx
c001e49e:	89 f2                	mov    edx,esi
c001e4a0:	eb b2                	jmp    c001e454 <__moddi3+0x54>
c001e4a2:	66 90                	xchg   ax,ax
c001e4a4:	f7 d9                	neg    ecx
c001e4a6:	83 d3 00             	adc    ebx,0x0
c001e4a9:	f7 db                	neg    ebx
c001e4ab:	89 de                	mov    esi,ebx
c001e4ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e4b5:	e9 6f ff ff ff       	jmp    c001e429 <__moddi3+0x29>
c001e4ba:	66 90                	xchg   ax,ax
c001e4bc:	0f bd c7             	bsr    eax,edi
c001e4bf:	83 f0 1f             	xor    eax,0x1f
c001e4c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4c6:	75 24                	jne    c001e4ec <__moddi3+0xec>
c001e4c8:	39 f7                	cmp    edi,esi
c001e4ca:	72 06                	jb     c001e4d2 <__moddi3+0xd2>
c001e4cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e4d0:	77 0c                	ja     c001e4de <__moddi3+0xde>
c001e4d2:	89 e9                	mov    ecx,ebp
c001e4d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e4d8:	19 fe                	sbb    esi,edi
c001e4da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4e2:	89 f2                	mov    edx,esi
c001e4e4:	e9 6b ff ff ff       	jmp    c001e454 <__moddi3+0x54>
c001e4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e4ec:	b8 20 00 00 00       	mov    eax,0x20
c001e4f1:	89 c2                	mov    edx,eax
c001e4f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e4f7:	29 da                	sub    edx,ebx
c001e4f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4fd:	88 d9                	mov    cl,bl
c001e4ff:	d3 e7                	shl    edi,cl
c001e501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e505:	88 d1                	mov    cl,dl
c001e507:	d3 e8                	shr    eax,cl
c001e509:	09 c7                	or     edi,eax
c001e50b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e50f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e513:	89 d8                	mov    eax,ebx
c001e515:	88 d9                	mov    cl,bl
c001e517:	d3 e7                	shl    edi,cl
c001e519:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e51d:	89 f3                	mov    ebx,esi
c001e51f:	88 d1                	mov    cl,dl
c001e521:	d3 eb                	shr    ebx,cl
c001e523:	89 c7                	mov    edi,eax
c001e525:	88 c1                	mov    cl,al
c001e527:	d3 e6                	shl    esi,cl
c001e529:	89 e8                	mov    eax,ebp
c001e52b:	88 d1                	mov    cl,dl
c001e52d:	d3 e8                	shr    eax,cl
c001e52f:	09 f0                	or     eax,esi
c001e531:	89 f9                	mov    ecx,edi
c001e533:	d3 e5                	shl    ebp,cl
c001e535:	89 da                	mov    edx,ebx
c001e537:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e53b:	89 d3                	mov    ebx,edx
c001e53d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e541:	89 c6                	mov    esi,eax
c001e543:	89 d1                	mov    ecx,edx
c001e545:	39 d3                	cmp    ebx,edx
c001e547:	72 27                	jb     c001e570 <__moddi3+0x170>
c001e549:	74 21                	je     c001e56c <__moddi3+0x16c>
c001e54b:	29 f5                	sub    ebp,esi
c001e54d:	19 cb                	sbb    ebx,ecx
c001e54f:	89 de                	mov    esi,ebx
c001e551:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e555:	d3 e6                	shl    esi,cl
c001e557:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e55b:	89 f9                	mov    ecx,edi
c001e55d:	d3 ed                	shr    ebp,cl
c001e55f:	09 ee                	or     esi,ebp
c001e561:	89 f0                	mov    eax,esi
c001e563:	d3 eb                	shr    ebx,cl
c001e565:	89 da                	mov    edx,ebx
c001e567:	e9 e8 fe ff ff       	jmp    c001e454 <__moddi3+0x54>
c001e56c:	39 c5                	cmp    ebp,eax
c001e56e:	73 db                	jae    c001e54b <__moddi3+0x14b>
c001e570:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e574:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e578:	89 d1                	mov    ecx,edx
c001e57a:	89 c6                	mov    esi,eax
c001e57c:	eb cd                	jmp    c001e54b <__moddi3+0x14b>
c001e57e:	66 90                	xchg   ax,ax

c001e580 <__udivdi3>:
c001e580:	55                   	push   ebp
c001e581:	57                   	push   edi
c001e582:	56                   	push   esi
c001e583:	53                   	push   ebx
c001e584:	83 ec 1c             	sub    esp,0x1c
c001e587:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e58b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e58f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e593:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e597:	85 d2                	test   edx,edx
c001e599:	75 41                	jne    c001e5dc <__udivdi3+0x5c>
c001e59b:	39 f7                	cmp    edi,esi
c001e59d:	76 15                	jbe    c001e5b4 <__udivdi3+0x34>
c001e59f:	89 e8                	mov    eax,ebp
c001e5a1:	89 f2                	mov    edx,esi
c001e5a3:	f7 f7                	div    edi
c001e5a5:	31 db                	xor    ebx,ebx
c001e5a7:	89 da                	mov    edx,ebx
c001e5a9:	83 c4 1c             	add    esp,0x1c
c001e5ac:	5b                   	pop    ebx
c001e5ad:	5e                   	pop    esi
c001e5ae:	5f                   	pop    edi
c001e5af:	5d                   	pop    ebp
c001e5b0:	c3                   	ret    
c001e5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5b4:	89 f9                	mov    ecx,edi
c001e5b6:	85 ff                	test   edi,edi
c001e5b8:	75 0b                	jne    c001e5c5 <__udivdi3+0x45>
c001e5ba:	b8 01 00 00 00       	mov    eax,0x1
c001e5bf:	31 d2                	xor    edx,edx
c001e5c1:	f7 f7                	div    edi
c001e5c3:	89 c1                	mov    ecx,eax
c001e5c5:	31 d2                	xor    edx,edx
c001e5c7:	89 f0                	mov    eax,esi
c001e5c9:	f7 f1                	div    ecx
c001e5cb:	89 c3                	mov    ebx,eax
c001e5cd:	89 e8                	mov    eax,ebp
c001e5cf:	f7 f1                	div    ecx
c001e5d1:	89 da                	mov    edx,ebx
c001e5d3:	83 c4 1c             	add    esp,0x1c
c001e5d6:	5b                   	pop    ebx
c001e5d7:	5e                   	pop    esi
c001e5d8:	5f                   	pop    edi
c001e5d9:	5d                   	pop    ebp
c001e5da:	c3                   	ret    
c001e5db:	90                   	nop
c001e5dc:	39 f2                	cmp    edx,esi
c001e5de:	77 1c                	ja     c001e5fc <__udivdi3+0x7c>
c001e5e0:	0f bd da             	bsr    ebx,edx
c001e5e3:	83 f3 1f             	xor    ebx,0x1f
c001e5e6:	75 24                	jne    c001e60c <__udivdi3+0x8c>
c001e5e8:	39 f2                	cmp    edx,esi
c001e5ea:	72 08                	jb     c001e5f4 <__udivdi3+0x74>
c001e5ec:	39 ef                	cmp    edi,ebp
c001e5ee:	0f 87 84 00 00 00    	ja     c001e678 <__udivdi3+0xf8>
c001e5f4:	b8 01 00 00 00       	mov    eax,0x1
c001e5f9:	eb ac                	jmp    c001e5a7 <__udivdi3+0x27>
c001e5fb:	90                   	nop
c001e5fc:	31 db                	xor    ebx,ebx
c001e5fe:	31 c0                	xor    eax,eax
c001e600:	89 da                	mov    edx,ebx
c001e602:	83 c4 1c             	add    esp,0x1c
c001e605:	5b                   	pop    ebx
c001e606:	5e                   	pop    esi
c001e607:	5f                   	pop    edi
c001e608:	5d                   	pop    ebp
c001e609:	c3                   	ret    
c001e60a:	66 90                	xchg   ax,ax
c001e60c:	b8 20 00 00 00       	mov    eax,0x20
c001e611:	29 d8                	sub    eax,ebx
c001e613:	88 d9                	mov    cl,bl
c001e615:	d3 e2                	shl    edx,cl
c001e617:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e61b:	89 fa                	mov    edx,edi
c001e61d:	88 c1                	mov    cl,al
c001e61f:	d3 ea                	shr    edx,cl
c001e621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e625:	09 d1                	or     ecx,edx
c001e627:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e62b:	88 d9                	mov    cl,bl
c001e62d:	d3 e7                	shl    edi,cl
c001e62f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e633:	89 f7                	mov    edi,esi
c001e635:	88 c1                	mov    cl,al
c001e637:	d3 ef                	shr    edi,cl
c001e639:	88 d9                	mov    cl,bl
c001e63b:	d3 e6                	shl    esi,cl
c001e63d:	89 ea                	mov    edx,ebp
c001e63f:	88 c1                	mov    cl,al
c001e641:	d3 ea                	shr    edx,cl
c001e643:	09 d6                	or     esi,edx
c001e645:	89 f0                	mov    eax,esi
c001e647:	89 fa                	mov    edx,edi
c001e649:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e64d:	89 d7                	mov    edi,edx
c001e64f:	89 c6                	mov    esi,eax
c001e651:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e655:	39 d7                	cmp    edi,edx
c001e657:	72 13                	jb     c001e66c <__udivdi3+0xec>
c001e659:	74 09                	je     c001e664 <__udivdi3+0xe4>
c001e65b:	89 f0                	mov    eax,esi
c001e65d:	31 db                	xor    ebx,ebx
c001e65f:	e9 43 ff ff ff       	jmp    c001e5a7 <__udivdi3+0x27>
c001e664:	88 d9                	mov    cl,bl
c001e666:	d3 e5                	shl    ebp,cl
c001e668:	39 c5                	cmp    ebp,eax
c001e66a:	73 ef                	jae    c001e65b <__udivdi3+0xdb>
c001e66c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e66f:	31 db                	xor    ebx,ebx
c001e671:	e9 31 ff ff ff       	jmp    c001e5a7 <__udivdi3+0x27>
c001e676:	66 90                	xchg   ax,ax
c001e678:	31 c0                	xor    eax,eax
c001e67a:	e9 28 ff ff ff       	jmp    c001e5a7 <__udivdi3+0x27>
c001e67f:	90                   	nop

c001e680 <__umoddi3>:
c001e680:	55                   	push   ebp
c001e681:	57                   	push   edi
c001e682:	56                   	push   esi
c001e683:	53                   	push   ebx
c001e684:	83 ec 1c             	sub    esp,0x1c
c001e687:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e68b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e68f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e693:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e697:	89 da                	mov    edx,ebx
c001e699:	85 c0                	test   eax,eax
c001e69b:	75 37                	jne    c001e6d4 <__umoddi3+0x54>
c001e69d:	39 df                	cmp    edi,ebx
c001e69f:	76 13                	jbe    c001e6b4 <__umoddi3+0x34>
c001e6a1:	89 f0                	mov    eax,esi
c001e6a3:	f7 f7                	div    edi
c001e6a5:	89 d0                	mov    eax,edx
c001e6a7:	31 d2                	xor    edx,edx
c001e6a9:	83 c4 1c             	add    esp,0x1c
c001e6ac:	5b                   	pop    ebx
c001e6ad:	5e                   	pop    esi
c001e6ae:	5f                   	pop    edi
c001e6af:	5d                   	pop    ebp
c001e6b0:	c3                   	ret    
c001e6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6b4:	89 fd                	mov    ebp,edi
c001e6b6:	85 ff                	test   edi,edi
c001e6b8:	75 0b                	jne    c001e6c5 <__umoddi3+0x45>
c001e6ba:	b8 01 00 00 00       	mov    eax,0x1
c001e6bf:	31 d2                	xor    edx,edx
c001e6c1:	f7 f7                	div    edi
c001e6c3:	89 c5                	mov    ebp,eax
c001e6c5:	89 d8                	mov    eax,ebx
c001e6c7:	31 d2                	xor    edx,edx
c001e6c9:	f7 f5                	div    ebp
c001e6cb:	89 f0                	mov    eax,esi
c001e6cd:	f7 f5                	div    ebp
c001e6cf:	89 d0                	mov    eax,edx
c001e6d1:	eb d4                	jmp    c001e6a7 <__umoddi3+0x27>
c001e6d3:	90                   	nop
c001e6d4:	89 f1                	mov    ecx,esi
c001e6d6:	39 d8                	cmp    eax,ebx
c001e6d8:	76 0a                	jbe    c001e6e4 <__umoddi3+0x64>
c001e6da:	89 f0                	mov    eax,esi
c001e6dc:	83 c4 1c             	add    esp,0x1c
c001e6df:	5b                   	pop    ebx
c001e6e0:	5e                   	pop    esi
c001e6e1:	5f                   	pop    edi
c001e6e2:	5d                   	pop    ebp
c001e6e3:	c3                   	ret    
c001e6e4:	0f bd e8             	bsr    ebp,eax
c001e6e7:	83 f5 1f             	xor    ebp,0x1f
c001e6ea:	75 1c                	jne    c001e708 <__umoddi3+0x88>
c001e6ec:	39 d8                	cmp    eax,ebx
c001e6ee:	72 04                	jb     c001e6f4 <__umoddi3+0x74>
c001e6f0:	39 f7                	cmp    edi,esi
c001e6f2:	77 08                	ja     c001e6fc <__umoddi3+0x7c>
c001e6f4:	89 da                	mov    edx,ebx
c001e6f6:	29 fe                	sub    esi,edi
c001e6f8:	19 c2                	sbb    edx,eax
c001e6fa:	89 f1                	mov    ecx,esi
c001e6fc:	89 c8                	mov    eax,ecx
c001e6fe:	83 c4 1c             	add    esp,0x1c
c001e701:	5b                   	pop    ebx
c001e702:	5e                   	pop    esi
c001e703:	5f                   	pop    edi
c001e704:	5d                   	pop    ebp
c001e705:	c3                   	ret    
c001e706:	66 90                	xchg   ax,ax
c001e708:	ba 20 00 00 00       	mov    edx,0x20
c001e70d:	29 ea                	sub    edx,ebp
c001e70f:	89 e9                	mov    ecx,ebp
c001e711:	d3 e0                	shl    eax,cl
c001e713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e717:	89 f8                	mov    eax,edi
c001e719:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e71d:	88 d1                	mov    cl,dl
c001e71f:	d3 e8                	shr    eax,cl
c001e721:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e725:	09 c1                	or     ecx,eax
c001e727:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e72b:	89 e9                	mov    ecx,ebp
c001e72d:	d3 e7                	shl    edi,cl
c001e72f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e733:	89 d8                	mov    eax,ebx
c001e735:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e739:	88 d1                	mov    cl,dl
c001e73b:	d3 e8                	shr    eax,cl
c001e73d:	89 c7                	mov    edi,eax
c001e73f:	89 e9                	mov    ecx,ebp
c001e741:	d3 e3                	shl    ebx,cl
c001e743:	89 f0                	mov    eax,esi
c001e745:	88 d1                	mov    cl,dl
c001e747:	d3 e8                	shr    eax,cl
c001e749:	09 d8                	or     eax,ebx
c001e74b:	89 e9                	mov    ecx,ebp
c001e74d:	d3 e6                	shl    esi,cl
c001e74f:	89 f3                	mov    ebx,esi
c001e751:	89 fa                	mov    edx,edi
c001e753:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e757:	89 d1                	mov    ecx,edx
c001e759:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e75d:	89 c6                	mov    esi,eax
c001e75f:	89 d7                	mov    edi,edx
c001e761:	39 d1                	cmp    ecx,edx
c001e763:	72 27                	jb     c001e78c <__umoddi3+0x10c>
c001e765:	74 21                	je     c001e788 <__umoddi3+0x108>
c001e767:	89 ca                	mov    edx,ecx
c001e769:	29 f3                	sub    ebx,esi
c001e76b:	19 fa                	sbb    edx,edi
c001e76d:	89 d0                	mov    eax,edx
c001e76f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e773:	d3 e0                	shl    eax,cl
c001e775:	89 e9                	mov    ecx,ebp
c001e777:	d3 eb                	shr    ebx,cl
c001e779:	09 d8                	or     eax,ebx
c001e77b:	d3 ea                	shr    edx,cl
c001e77d:	83 c4 1c             	add    esp,0x1c
c001e780:	5b                   	pop    ebx
c001e781:	5e                   	pop    esi
c001e782:	5f                   	pop    edi
c001e783:	5d                   	pop    ebp
c001e784:	c3                   	ret    
c001e785:	8d 76 00             	lea    esi,[esi+0x0]
c001e788:	39 c3                	cmp    ebx,eax
c001e78a:	73 db                	jae    c001e767 <__umoddi3+0xe7>
c001e78c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e790:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e794:	89 d7                	mov    edi,edx
c001e796:	89 c6                	mov    esi,eax
c001e798:	eb cd                	jmp    c001e767 <__umoddi3+0xe7>

Disassembly of section .init:

c001e79a <_init>:
c001e79a:	55                   	push   ebp
c001e79b:	89 e5                	mov    ebp,esp
c001e79d:	e8 52 19 fe ff       	call   c00000f4 <frame_dummy>
c001e7a2:	e8 e5 fa ff ff       	call   c001e28c <__do_global_ctors_aux>
c001e7a7:	5d                   	pop    ebp
c001e7a8:	c3                   	ret    

Disassembly of section .fini:

c001e7a9 <_fini>:
c001e7a9:	55                   	push   ebp
c001e7aa:	89 e5                	mov    ebp,esp
c001e7ac:	e8 d3 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e7b1:	5d                   	pop    ebp
c001e7b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e7b4 <Computer::~Computer()>:
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c001e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c0:	89 10                	mov    DWORD PTR [eax],edx
c001e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c6:	83 ec 0c             	sub    esp,0xc
c001e7c9:	50                   	push   eax
c001e7ca:	e8 d3 d4 fe ff       	call   c000bca2 <Device::~Device()>
c001e7cf:	83 c4 10             	add    esp,0x10
c001e7d2:	90                   	nop
c001e7d3:	83 c4 0c             	add    esp,0xc
c001e7d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e7d8 <Computer::~Computer()>:
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	83 ec 0c             	sub    esp,0xc
c001e7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e2:	e8 cd ff ff ff       	call   c001e7b4 <Computer::~Computer()>
c001e7e7:	83 c4 10             	add    esp,0x10
c001e7ea:	83 ec 08             	sub    esp,0x8
c001e7ed:	68 70 01 00 00       	push   0x170
c001e7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7f6:	e8 44 c0 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001e7fb:	83 c4 10             	add    esp,0x10
c001e7fe:	83 c4 0c             	add    esp,0xc
c001e801:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e802 <idleCommon()>:
c001e802:	83 ec 0c             	sub    esp,0xc
c001e805:	fa                   	cli    
c001e806:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e80c:	e8 a7 67 ff ff       	call   c0014fb8 <schedule()>
c001e811:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e816:	48                   	dec    eax
c001e817:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e81c:	75 01                	jne    c001e81f <idleCommon()+0x1d>
c001e81e:	fb                   	sti    
c001e81f:	83 c4 0c             	add    esp,0xc
c001e822:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e824 <LinkedList<UnixFile>::~LinkedList()>:
c001e824:	90                   	nop
c001e825:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e826 <LinkedList<UnixFile>::LinkedList()>:
c001e826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e82a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e83f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e84a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e85b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e866:	90                   	nop
c001e867:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e868 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e870:	75 10                	jne    c001e882 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e872:	83 ec 0c             	sub    esp,0xc
c001e875:	68 c4 fc 01 c0       	push   0xc001fcc4
c001e87a:	e8 42 1f ff ff       	call   c00107c1 <KePanic(char const*)>
c001e87f:	83 c4 10             	add    esp,0x10
c001e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e886:	8b 00                	mov    eax,DWORD PTR [eax]
c001e888:	85 c0                	test   eax,eax
c001e88a:	74 34                	je     c001e8c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e890:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e893:	85 c0                	test   eax,eax
c001e895:	74 29                	je     c001e8c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e89e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8be:	eb 65                	jmp    c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8c6:	85 c0                	test   eax,eax
c001e8c8:	75 4b                	jne    c001e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8d1:	85 c0                	test   eax,eax
c001e8d3:	75 40                	jne    c001e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8dd:	89 10                	mov    DWORD PTR [eax],edx
c001e8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8ff:	85 c0                	test   eax,eax
c001e901:	74 22                	je     c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e903:	83 ec 0c             	sub    esp,0xc
c001e906:	68 e6 fc 01 c0       	push   0xc001fce6
c001e90b:	e8 b1 1e ff ff       	call   c00107c1 <KePanic(char const*)>
c001e910:	83 c4 10             	add    esp,0x10
c001e913:	eb 10                	jmp    c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e915:	83 ec 0c             	sub    esp,0xc
c001e918:	68 f0 fc 01 c0       	push   0xc001fcf0
c001e91d:	e8 9f 1e ff ff       	call   c00107c1 <KePanic(char const*)>
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e92c:	8d 50 01             	lea    edx,[eax+0x1]
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e936:	90                   	nop
c001e937:	83 c4 0c             	add    esp,0xc
c001e93a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e93c <LinkedList<UnixFile>::getFirstElement()>:
c001e93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e940:	8b 00                	mov    eax,DWORD PTR [eax]
c001e942:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e944 <LinkedList<UnixFile>::removeFirst()>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e94d:	85 c0                	test   eax,eax
c001e94f:	75 12                	jne    c001e963 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e951:	83 ec 0c             	sub    esp,0xc
c001e954:	68 fc fc 01 c0       	push   0xc001fcfc
c001e959:	e8 63 1e ff ff       	call   c00107c1 <KePanic(char const*)>
c001e95e:	83 c4 10             	add    esp,0x10
c001e961:	eb 7e                	jmp    c001e9e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e967:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e96a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e96d:	85 c0                	test   eax,eax
c001e96f:	74 10                	je     c001e981 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e971:	83 ec 0c             	sub    esp,0xc
c001e974:	68 47 fd 01 c0       	push   0xc001fd47
c001e979:	e8 43 1e ff ff       	call   c00107c1 <KePanic(char const*)>
c001e97e:	83 c4 10             	add    esp,0x10
c001e981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e985:	8b 00                	mov    eax,DWORD PTR [eax]
c001e987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e98a:	85 c0                	test   eax,eax
c001e98c:	75 33                	jne    c001e9c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e992:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9aa:	83 f8 01             	cmp    eax,0x1
c001e9ad:	74 21                	je     c001e9d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9af:	83 ec 0c             	sub    esp,0xc
c001e9b2:	68 20 fd 01 c0       	push   0xc001fd20
c001e9b7:	e8 05 1e ff ff       	call   c00107c1 <KePanic(char const*)>
c001e9bc:	83 c4 10             	add    esp,0x10
c001e9bf:	eb 0f                	jmp    c001e9d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ce:	89 10                	mov    DWORD PTR [eax],edx
c001e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9e1:	83 c4 0c             	add    esp,0xc
c001e9e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e9e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e9ee <DriverlessDevice::~DriverlessDevice()>:
c001e9ee:	ba 9c 03 02 c0       	mov    edx,0xc002039c
c001e9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f7:	89 10                	mov    DWORD PTR [eax],edx
c001e9f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9fd:	50                   	push   eax
c001e9fe:	e8 9f d2 fe ff       	call   c000bca2 <Device::~Device()>
c001ea03:	83 c4 04             	add    esp,0x4
c001ea06:	90                   	nop
c001ea07:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea08 <DriverlessDevice::~DriverlessDevice()>:
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	83 ec 0c             	sub    esp,0xc
c001ea0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea12:	e8 d7 ff ff ff       	call   c001e9ee <DriverlessDevice::~DriverlessDevice()>
c001ea17:	83 c4 10             	add    esp,0x10
c001ea1a:	83 ec 08             	sub    esp,0x8
c001ea1d:	68 58 01 00 00       	push   0x158
c001ea22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea26:	e8 14 be fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	83 c4 0c             	add    esp,0xc
c001ea31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea32 <LinkedList<Device>::addElement(Device*)>:
c001ea32:	83 ec 0c             	sub    esp,0xc
c001ea35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea3a:	75 10                	jne    c001ea4c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	68 c4 fc 01 c0       	push   0xc001fcc4
c001ea44:	e8 78 1d ff ff       	call   c00107c1 <KePanic(char const*)>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea52:	85 c0                	test   eax,eax
c001ea54:	74 3a                	je     c001ea90 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea5d:	85 c0                	test   eax,eax
c001ea5f:	74 2f                	je     c001ea90 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea6c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ea72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea84:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ea8e:	eb 68                	jmp    c001eaf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea96:	85 c0                	test   eax,eax
c001ea98:	75 4e                	jne    c001eae8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa1:	85 c0                	test   eax,eax
c001eaa3:	75 43                	jne    c001eae8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaad:	89 10                	mov    DWORD PTR [eax],edx
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eab7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eac1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ead2:	85 c0                	test   eax,eax
c001ead4:	74 22                	je     c001eaf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	68 e6 fc 01 c0       	push   0xc001fce6
c001eade:	e8 de 1c ff ff       	call   c00107c1 <KePanic(char const*)>
c001eae3:	83 c4 10             	add    esp,0x10
c001eae6:	eb 10                	jmp    c001eaf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	68 f0 fc 01 c0       	push   0xc001fcf0
c001eaf0:	e8 cc 1c ff ff       	call   c00107c1 <KePanic(char const*)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eaff:	8d 50 01             	lea    edx,[eax+0x1]
c001eb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb09:	90                   	nop
c001eb0a:	83 c4 0c             	add    esp,0xc
c001eb0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb0e <LinkedList<Device>::LinkedList()>:
c001eb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb4e:	90                   	nop
c001eb4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb56:	85 c0                	test   eax,eax
c001eb58:	75 0e                	jne    c001eb68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb61:	85 c0                	test   eax,eax
c001eb63:	75 03                	jne    c001eb68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb65:	b0 01                	mov    al,0x1
c001eb67:	c3                   	ret    
c001eb68:	b0 00                	mov    al,0x0
c001eb6a:	90                   	nop
c001eb6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb70:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb74:	83 ec 0c             	sub    esp,0xc
c001eb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb7d:	85 c0                	test   eax,eax
c001eb7f:	75 17                	jne    c001eb98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001eb81:	83 ec 0c             	sub    esp,0xc
c001eb84:	68 fc fc 01 c0       	push   0xc001fcfc
c001eb89:	e8 33 1c ff ff       	call   c00107c1 <KePanic(char const*)>
c001eb8e:	83 c4 10             	add    esp,0x10
c001eb91:	e9 96 00 00 00       	jmp    c001ec2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001eb96:	66 90                	xchg   ax,ax
c001eb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eba2:	85 c0                	test   eax,eax
c001eba4:	0f 95 c0             	setne  al
c001eba7:	0f b6 c0             	movzx  eax,al
c001ebaa:	85 c0                	test   eax,eax
c001ebac:	74 12                	je     c001ebc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ebae:	83 ec 0c             	sub    esp,0xc
c001ebb1:	68 47 fd 01 c0       	push   0xc001fd47
c001ebb6:	e8 06 1c ff ff       	call   c00107c1 <KePanic(char const*)>
c001ebbb:	83 c4 10             	add    esp,0x10
c001ebbe:	66 90                	xchg   ax,ax
c001ebc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebc9:	85 c0                	test   eax,eax
c001ebcb:	0f 94 c0             	sete   al
c001ebce:	0f b6 c0             	movzx  eax,al
c001ebd1:	85 c0                	test   eax,eax
c001ebd3:	74 33                	je     c001ec08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebf1:	83 f8 01             	cmp    eax,0x1
c001ebf4:	74 22                	je     c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ebf6:	83 ec 0c             	sub    esp,0xc
c001ebf9:	68 20 fd 01 c0       	push   0xc001fd20
c001ebfe:	e8 be 1b ff ff       	call   c00107c1 <KePanic(char const*)>
c001ec03:	83 c4 10             	add    esp,0x10
c001ec06:	eb 10                	jmp    c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec15:	89 10                	mov    DWORD PTR [eax],edx
c001ec17:	90                   	nop
c001ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec1f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec29:	8d 76 00             	lea    esi,[esi+0x0]
c001ec2c:	83 c4 0c             	add    esp,0xc
c001ec2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec30:	83 ec 0c             	sub    esp,0xc
c001ec33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec38:	75 12                	jne    c001ec4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	68 c4 fc 01 c0       	push   0xc001fcc4
c001ec42:	e8 7a 1b ff ff       	call   c00107c1 <KePanic(char const*)>
c001ec47:	83 c4 10             	add    esp,0x10
c001ec4a:	66 90                	xchg   ax,ax
c001ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec52:	85 c0                	test   eax,eax
c001ec54:	74 36                	je     c001ec8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec5d:	85 c0                	test   eax,eax
c001ec5f:	74 2b                	je     c001ec8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ec6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ec88:	eb 6a                	jmp    c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ec8a:	66 90                	xchg   ax,ax
c001ec8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec92:	85 c0                	test   eax,eax
c001ec94:	75 4e                	jne    c001ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ec96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec9d:	85 c0                	test   eax,eax
c001ec9f:	75 43                	jne    c001ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001eca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eca9:	89 10                	mov    DWORD PTR [eax],edx
c001ecab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eccb:	85 c0                	test   eax,eax
c001eccd:	74 25                	je     c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001eccf:	83 ec 0c             	sub    esp,0xc
c001ecd2:	68 e6 fc 01 c0       	push   0xc001fce6
c001ecd7:	e8 e5 1a ff ff       	call   c00107c1 <KePanic(char const*)>
c001ecdc:	83 c4 10             	add    esp,0x10
c001ecdf:	eb 13                	jmp    c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ece1:	8d 76 00             	lea    esi,[esi+0x0]
c001ece4:	83 ec 0c             	sub    esp,0xc
c001ece7:	68 f0 fc 01 c0       	push   0xc001fcf0
c001ecec:	e8 d0 1a ff ff       	call   c00107c1 <KePanic(char const*)>
c001ecf1:	83 c4 10             	add    esp,0x10
c001ecf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecfb:	8d 50 01             	lea    edx,[eax+0x1]
c001ecfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed05:	90                   	nop
c001ed06:	83 c4 0c             	add    esp,0xc
c001ed09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed0c <ACPI::~ACPI()>:
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	ba 68 09 02 c0       	mov    edx,0xc0020968
c001ed14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed18:	89 10                	mov    DWORD PTR [eax],edx
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	83 ec 0c             	sub    esp,0xc
c001ed21:	50                   	push   eax
c001ed22:	e8 7b cf fe ff       	call   c000bca2 <Device::~Device()>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	90                   	nop
c001ed2b:	83 c4 0c             	add    esp,0xc
c001ed2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed30 <ACPI::~ACPI()>:
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	83 ec 0c             	sub    esp,0xc
c001ed36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed3a:	e8 cd ff ff ff       	call   c001ed0c <ACPI::~ACPI()>
c001ed3f:	83 c4 10             	add    esp,0x10
c001ed42:	83 ec 08             	sub    esp,0x8
c001ed45:	68 64 12 00 00       	push   0x1264
c001ed4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed4e:	e8 ec ba fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	83 c4 0c             	add    esp,0xc
c001ed59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ed5c <LinkedList<Device>::~LinkedList()>:
c001ed5c:	90                   	nop
c001ed5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ed60 <LinkedList<Device>::isEmpty()>:
c001ed60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed66:	85 c0                	test   eax,eax
c001ed68:	75 0e                	jne    c001ed78 <LinkedList<Device>::isEmpty()+0x18>
c001ed6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed71:	85 c0                	test   eax,eax
c001ed73:	75 03                	jne    c001ed78 <LinkedList<Device>::isEmpty()+0x18>
c001ed75:	b0 01                	mov    al,0x1
c001ed77:	c3                   	ret    
c001ed78:	b0 00                	mov    al,0x0
c001ed7a:	90                   	nop
c001ed7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ed7c <LinkedList<Device>::getFirstElement()>:
c001ed7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ed84 <LinkedList<Device>::removeFirst()>:
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed8d:	85 c0                	test   eax,eax
c001ed8f:	75 17                	jne    c001eda8 <LinkedList<Device>::removeFirst()+0x24>
c001ed91:	83 ec 0c             	sub    esp,0xc
c001ed94:	68 fc fc 01 c0       	push   0xc001fcfc
c001ed99:	e8 23 1a ff ff       	call   c00107c1 <KePanic(char const*)>
c001ed9e:	83 c4 10             	add    esp,0x10
c001eda1:	e9 92 00 00 00       	jmp    c001ee38 <LinkedList<Device>::removeFirst()+0xb4>
c001eda6:	66 90                	xchg   ax,ax
c001eda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edaf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001edb5:	85 c0                	test   eax,eax
c001edb7:	74 13                	je     c001edcc <LinkedList<Device>::removeFirst()+0x48>
c001edb9:	83 ec 0c             	sub    esp,0xc
c001edbc:	68 47 fd 01 c0       	push   0xc001fd47
c001edc1:	e8 fb 19 ff ff       	call   c00107c1 <KePanic(char const*)>
c001edc6:	83 c4 10             	add    esp,0x10
c001edc9:	8d 76 00             	lea    esi,[esi+0x0]
c001edcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001edd8:	85 c0                	test   eax,eax
c001edda:	75 34                	jne    c001ee10 <LinkedList<Device>::removeFirst()+0x8c>
c001eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ede6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edf8:	83 f8 01             	cmp    eax,0x1
c001edfb:	74 27                	je     c001ee24 <LinkedList<Device>::removeFirst()+0xa0>
c001edfd:	83 ec 0c             	sub    esp,0xc
c001ee00:	68 20 fd 01 c0       	push   0xc001fd20
c001ee05:	e8 b7 19 ff ff       	call   c00107c1 <KePanic(char const*)>
c001ee0a:	83 c4 10             	add    esp,0x10
c001ee0d:	eb 15                	jmp    c001ee24 <LinkedList<Device>::removeFirst()+0xa0>
c001ee0f:	90                   	nop
c001ee10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee20:	89 10                	mov    DWORD PTR [eax],edx
c001ee22:	66 90                	xchg   ax,ax
c001ee24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee2b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee35:	8d 76 00             	lea    esi,[esi+0x0]
c001ee38:	83 c4 0c             	add    esp,0xc
c001ee3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee3c <CPU::~CPU()>:
c001ee3c:	83 ec 0c             	sub    esp,0xc
c001ee3f:	ba 04 0b 02 c0       	mov    edx,0xc0020b04
c001ee44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee48:	89 10                	mov    DWORD PTR [eax],edx
c001ee4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4e:	83 ec 0c             	sub    esp,0xc
c001ee51:	50                   	push   eax
c001ee52:	e8 4b ce fe ff       	call   c000bca2 <Device::~Device()>
c001ee57:	83 c4 10             	add    esp,0x10
c001ee5a:	90                   	nop
c001ee5b:	83 c4 0c             	add    esp,0xc
c001ee5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ee60 <CPU::~CPU()>:
c001ee60:	83 ec 0c             	sub    esp,0xc
c001ee63:	83 ec 0c             	sub    esp,0xc
c001ee66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee6a:	e8 cd ff ff ff       	call   c001ee3c <CPU::~CPU()>
c001ee6f:	83 c4 10             	add    esp,0x10
c001ee72:	83 ec 08             	sub    esp,0x8
c001ee75:	68 94 11 00 00       	push   0x1194
c001ee7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee7e:	e8 bc b9 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001ee83:	83 c4 10             	add    esp,0x10
c001ee86:	83 c4 0c             	add    esp,0xc
c001ee89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ee8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ee94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ee94:	90                   	nop
c001ee95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ee98 <ThreadControlBlock::ThreadControlBlock()>:
c001ee98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eea7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeb2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eeb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eebd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001eec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001eecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001eed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eedb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001eedf:	90                   	nop
c001eee0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eee8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eeee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eefd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef24:	90                   	nop
c001ef25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef26 <PCI::~PCI()>:
c001ef26:	83 ec 0c             	sub    esp,0xc
c001ef29:	ba 64 19 02 c0       	mov    edx,0xc0021964
c001ef2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef32:	89 10                	mov    DWORD PTR [eax],edx
c001ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	50                   	push   eax
c001ef3c:	e8 f3 c7 fe ff       	call   c000b734 <Bus::~Bus()>
c001ef41:	83 c4 10             	add    esp,0x10
c001ef44:	90                   	nop
c001ef45:	83 c4 0c             	add    esp,0xc
c001ef48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef4a <PCI::~PCI()>:
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	83 ec 0c             	sub    esp,0xc
c001ef50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef54:	e8 cd ff ff ff       	call   c001ef26 <PCI::~PCI()>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	83 ec 08             	sub    esp,0x8
c001ef5f:	68 5c 01 00 00       	push   0x15c
c001ef64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef68:	e8 d2 b8 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001ef6d:	83 c4 10             	add    esp,0x10
c001ef70:	83 c4 0c             	add    esp,0xc
c001ef73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ef74 <IDE::~IDE()>:
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c001ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef80:	89 10                	mov    DWORD PTR [eax],edx
c001ef82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	50                   	push   eax
c001ef8a:	e8 8d d1 fe ff       	call   c000c11c <HardDiskController::~HardDiskController()>
c001ef8f:	83 c4 10             	add    esp,0x10
c001ef92:	90                   	nop
c001ef93:	83 c4 0c             	add    esp,0xc
c001ef96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ef98 <IDE::~IDE()>:
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	83 ec 0c             	sub    esp,0xc
c001ef9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa2:	e8 cd ff ff ff       	call   c001ef74 <IDE::~IDE()>
c001efa7:	83 c4 10             	add    esp,0x10
c001efaa:	83 ec 08             	sub    esp,0x8
c001efad:	68 70 02 00 00       	push   0x270
c001efb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb6:	e8 84 b8 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001efbb:	83 c4 10             	add    esp,0x10
c001efbe:	83 c4 0c             	add    esp,0xc
c001efc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001efc2 <SATABus::~SATABus()>:
c001efc2:	83 ec 0c             	sub    esp,0xc
c001efc5:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c001efca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efce:	89 10                	mov    DWORD PTR [eax],edx
c001efd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	50                   	push   eax
c001efd8:	e8 3f d1 fe ff       	call   c000c11c <HardDiskController::~HardDiskController()>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	90                   	nop
c001efe1:	83 c4 0c             	add    esp,0xc
c001efe4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001efe6 <SATABus::~SATABus()>:
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	83 ec 0c             	sub    esp,0xc
c001efec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff0:	e8 cd ff ff ff       	call   c001efc2 <SATABus::~SATABus()>
c001eff5:	83 c4 10             	add    esp,0x10
c001eff8:	83 ec 08             	sub    esp,0x8
c001effb:	68 64 01 00 00       	push   0x164
c001f000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f004:	e8 36 b8 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	83 c4 0c             	add    esp,0xc
c001f00f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f010 <ATA::~ATA()>:
c001f010:	83 ec 0c             	sub    esp,0xc
c001f013:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001f018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01c:	89 10                	mov    DWORD PTR [eax],edx
c001f01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f022:	83 ec 0c             	sub    esp,0xc
c001f025:	50                   	push   eax
c001f026:	e8 d3 d1 fe ff       	call   c000c1fe <PhysicalDisk::~PhysicalDisk()>
c001f02b:	83 c4 10             	add    esp,0x10
c001f02e:	90                   	nop
c001f02f:	83 c4 0c             	add    esp,0xc
c001f032:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f034 <ATA::~ATA()>:
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	83 ec 0c             	sub    esp,0xc
c001f03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f03e:	e8 cd ff ff ff       	call   c001f010 <ATA::~ATA()>
c001f043:	83 c4 10             	add    esp,0x10
c001f046:	83 ec 08             	sub    esp,0x8
c001f049:	68 7c 01 00 00       	push   0x17c
c001f04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f052:	e8 e8 b7 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f057:	83 c4 10             	add    esp,0x10
c001f05a:	83 c4 0c             	add    esp,0xc
c001f05d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f05e <ATAPI::~ATAPI()>:
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001f066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06a:	89 10                	mov    DWORD PTR [eax],edx
c001f06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	50                   	push   eax
c001f074:	e8 85 d1 fe ff       	call   c000c1fe <PhysicalDisk::~PhysicalDisk()>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	90                   	nop
c001f07d:	83 c4 0c             	add    esp,0xc
c001f080:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f082 <ATAPI::~ATAPI()>:
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	83 ec 0c             	sub    esp,0xc
c001f088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08c:	e8 cd ff ff ff       	call   c001f05e <ATAPI::~ATAPI()>
c001f091:	83 c4 10             	add    esp,0x10
c001f094:	83 ec 08             	sub    esp,0x8
c001f097:	68 84 01 00 00       	push   0x184
c001f09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a0:	e8 9a b7 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	83 c4 0c             	add    esp,0xc
c001f0ab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f0ac <SATA::~SATA()>:
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001f0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b8:	89 10                	mov    DWORD PTR [eax],edx
c001f0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0be:	83 ec 0c             	sub    esp,0xc
c001f0c1:	50                   	push   eax
c001f0c2:	e8 37 d1 fe ff       	call   c000c1fe <PhysicalDisk::~PhysicalDisk()>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	90                   	nop
c001f0cb:	83 c4 0c             	add    esp,0xc
c001f0ce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f0d0 <SATA::~SATA()>:
c001f0d0:	83 ec 0c             	sub    esp,0xc
c001f0d3:	83 ec 0c             	sub    esp,0xc
c001f0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0da:	e8 cd ff ff ff       	call   c001f0ac <SATA::~SATA()>
c001f0df:	83 c4 10             	add    esp,0x10
c001f0e2:	83 ec 08             	sub    esp,0x8
c001f0e5:	68 7c 01 00 00       	push   0x17c
c001f0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ee:	e8 4c b7 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f0f3:	83 c4 10             	add    esp,0x10
c001f0f6:	83 c4 0c             	add    esp,0xc
c001f0f9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f0fa <SATAPI::~SATAPI()>:
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	ba c8 1c 02 c0       	mov    edx,0xc0021cc8
c001f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f106:	89 10                	mov    DWORD PTR [eax],edx
c001f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	50                   	push   eax
c001f110:	e8 e9 d0 fe ff       	call   c000c1fe <PhysicalDisk::~PhysicalDisk()>
c001f115:	83 c4 10             	add    esp,0x10
c001f118:	90                   	nop
c001f119:	83 c4 0c             	add    esp,0xc
c001f11c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f11e <SATAPI::~SATAPI()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f128:	e8 cd ff ff ff       	call   c001f0fa <SATAPI::~SATAPI()>
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	83 ec 08             	sub    esp,0x8
c001f133:	68 84 01 00 00       	push   0x184
c001f138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13c:	e8 fe b6 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	83 c4 0c             	add    esp,0xc
c001f147:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f148 <IOAPIC::~IOAPIC()>:
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f154:	89 10                	mov    DWORD PTR [eax],edx
c001f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	50                   	push   eax
c001f15e:	e8 3f cb fe ff       	call   c000bca2 <Device::~Device()>
c001f163:	83 c4 10             	add    esp,0x10
c001f166:	90                   	nop
c001f167:	83 c4 0c             	add    esp,0xc
c001f16a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f16c <IOAPIC::~IOAPIC()>:
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f176:	e8 cd ff ff ff       	call   c001f148 <IOAPIC::~IOAPIC()>
c001f17b:	83 c4 10             	add    esp,0x10
c001f17e:	83 ec 08             	sub    esp,0x8
c001f181:	68 68 01 00 00       	push   0x168
c001f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18a:	e8 b0 b6 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	83 c4 0c             	add    esp,0xc
c001f195:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f198 <APICTimer::~APICTimer()>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	ba 50 1d 02 c0       	mov    edx,0xc0021d50
c001f1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	50                   	push   eax
c001f1ae:	e8 c5 e5 fe ff       	call   c000d778 <Timer::~Timer()>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	90                   	nop
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f1bc <APICTimer::~APICTimer()>:
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c6:	e8 cd ff ff ff       	call   c001f198 <APICTimer::~APICTimer()>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	83 ec 08             	sub    esp,0x8
c001f1d1:	68 60 01 00 00       	push   0x160
c001f1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1da:	e8 60 b6 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f1df:	83 c4 10             	add    esp,0x10
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f1e8 <PIT::~PIT()>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c001f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f4:	89 10                	mov    DWORD PTR [eax],edx
c001f1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	50                   	push   eax
c001f1fe:	e8 75 e5 fe ff       	call   c000d778 <Timer::~Timer()>
c001f203:	83 c4 10             	add    esp,0x10
c001f206:	90                   	nop
c001f207:	83 c4 0c             	add    esp,0xc
c001f20a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f20c <PIT::~PIT()>:
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	83 ec 0c             	sub    esp,0xc
c001f212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f216:	e8 cd ff ff ff       	call   c001f1e8 <PIT::~PIT()>
c001f21b:	83 c4 10             	add    esp,0x10
c001f21e:	83 ec 08             	sub    esp,0x8
c001f221:	68 5c 01 00 00       	push   0x15c
c001f226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22a:	e8 10 b6 fe ff       	call   c000a83f <operator delete(void*, unsigned long)>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	83 c4 0c             	add    esp,0xc
c001f235:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be f5 0b 02 c0       	mov    esi,0xc0020bf5
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 11 0c 02 c0       	mov    esi,0xc0020c11
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
