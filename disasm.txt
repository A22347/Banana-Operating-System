
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e5 9d 00 00       	call   c0009e05 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d5 29 02 00       	call   c00229fa <_init>
c0000025:	c3                   	ret    
c0000026:	bb 7e 36 02 c0       	mov    ebx,0xc002367e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 8c 36 02 c0    	cmp    ebx,0xc002368c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 7c 02 c0       	mov    eax,0xc0027c98
c0000049:	3d 98 7c 02 c0       	cmp    eax,0xc0027c98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 7c 02 c0       	push   0xc0027c98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 7c 02 c0       	mov    eax,0xc0027c98
c0000075:	2d 98 7c 02 c0       	sub    eax,0xc0027c98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 7c 02 c0       	push   0xc0027c98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027e20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 94 36 02 c0       	mov    ebx,0xc0023694
c00000bb:	81 eb 90 36 02 c0    	sub    ebx,0xc0023690
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 90 36 02 c0       	mov    esi,0xc0023690
c00000ca:	a1 24 7e 02 c0       	mov    eax,ds:0xc0027e24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 7e 02 c0       	mov    ds:0xc0027e24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 7e 02 c0       	mov    eax,ds:0xc0027e24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 7c 02 c0       	push   0xc0027c98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 7e 02 c0 01 	mov    BYTE PTR ds:0xc0027e20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 7e 02 c0       	push   0xc0027e28
c000012c:	68 98 7c 02 c0       	push   0xc0027c98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 ac 7c 01 00       	call   c0017f84 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 c8 ca 00 00       	call   c000cdb8 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 8a 7c 01 00       	call   c0017f84 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 53 81 01 00       	call   c001846c <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 96 87 01 00       	call   c0018ab8 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 70 82 02 c0 	lgdtd  ds:0xc0028270
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 da e8 00 00       	call   c000edf1 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 40 7e 02 c0       	mov    ds:0xc0027e40,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 40 7e 02 c0    	mov    DWORD PTR ds:0xc0027e40,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 40 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e40
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 36 02 c0 02 	test   BYTE PTR [edx-0x3ffdc960],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc960],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 36 02 c0 08 	test   BYTE PTR [edx-0x3ffdc960],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 36 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc960],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc960],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 60 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e60
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 60 7e 02 c0    	mov    DWORD PTR ds:0xc0027e60,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 64 7e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd819c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 64 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd819c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 60 7e 02 c0    	mov    DWORD PTR ds:0xc0027e60,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 8c 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e8c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 9c 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e9c
c0000d6c:	c7 42 0c 94 7e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027e94
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 9c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e9c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 8c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e8c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 60 7e 02 c0 02 	test   BYTE PTR ds:0xc0027e60,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 bb 8d 00 00       	call   c0009c08 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 fd 8c 00 00       	call   c0009c08 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 e7 8c 00 00       	call   c0009c08 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 c3 8c 00 00       	call   c0009c08 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 60 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e60
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 64 7e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd819c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 64 7e 02 c0 	mov    DWORD PTR [edx*4-0x3ffd819c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 94 7e 02 c0 	lea    edx,[eax*8-0x3ffd816c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d a0 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ea0
c00010ee:	81 fb 94 7e 02 c0    	cmp    ebx,0xc0027e94
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 94 7e 02 c0       	cmp    eax,0xc0027e94
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 90 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e90,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 9c 7e 02 c0       	mov    ds:0xc0027e9c,eax
c000112a:	a3 a0 7e 02 c0       	mov    ds:0xc0027ea0,eax
c000112f:	a3 90 7e 02 c0       	mov    ds:0xc0027e90,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 94 7e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027e94
c000113d:	c7 40 0c 94 7e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027e94
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 a0 7e 02 c0       	mov    ds:0xc0027ea0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 94 7e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027e94
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 58 7e 02 c0 	lea    ebp,[edx*4-0x3ffd81a8]
c000118e:	8b 14 95 60 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd81a0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 60 7e 02 c0 	lea    ecx,[edx*4-0x3ffd81a0]
c00011a9:	8b 14 95 60 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd81a0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 94 81 02 c0 	or     DWORD PTR [edi*4-0x3ffd7e6c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 94 7e 02 c0 	lea    eax,[eax*8-0x3ffd816c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 9c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e9c,ecx
c0001263:	89 0d a0 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea0,ecx
c0001269:	c7 41 08 94 7e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027e94
c0001270:	c7 41 0c 94 7e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027e94
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 8c 7e 02 c0 	lea    edx,[ecx*8-0x3ffd8174]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 94 81 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7e6c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 94 81 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7e6c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 8c 7e 02 c0 	lea    edx,[eax*4-0x3ffd8174]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 94 81 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7e6c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 9c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e9c,edi
c0001336:	89 3d a0 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea0,edi
c000133c:	c7 47 08 94 7e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027e94
c0001343:	c7 47 0c 94 7e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027e94
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 90 7e 02 c0    	mov    DWORD PTR ds:0xc0027e90,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 8c 7e 02 c0       	mov    eax,ds:0xc0027e8c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 8c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e8c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 60 7e 02 c0       	mov    edx,0xc0027e60
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 60 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027e60,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d b4 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281b4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 b4 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281b4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d b4 81 02 c0    	mov    DWORD PTR ds:0xc00281b4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 8c 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e8c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 8c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e8c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 60 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027e60,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 bc 81 02 c0    	push   DWORD PTR ds:0xc00281bc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 60 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027e60,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 bc 81 02 c0       	mov    eax,ds:0xc00281bc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 8c 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027e8c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 8c 7e 02 c0       	mov    eax,ds:0xc0027e8c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 64 7e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd819c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 94 7e 02 c0       	mov    eax,0xc0027e94
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 8c 81 02 c0       	cmp    eax,0xc002818c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 b0 81 02 c0    	mov    esi,DWORD PTR ds:0xc00281b0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 c4 81 02 c0    	mov    esi,DWORD PTR ds:0xc00281c4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 d4 81 02 c0    	mov    esi,DWORD PTR ds:0xc00281d4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 60 7e 02 c0       	mov    eax,0xc0027e60
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 37 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc85c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 60 7e 02 c0       	mov    eax,ds:0xc0027e60
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 60 7e 02 c0       	mov    ds:0xc0027e60,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d a8 81 02 c0    	mov    DWORD PTR ds:0xc00281a8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 b4 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281b4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 20 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66e0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 b6 9d 01 00       	jmp    c001b8dc <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 20 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66e0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 e8 9d 01 00       	jmp    c001b924 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 20 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66e0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 11 9e 01 00       	jmp    c001b96c <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 a2 09 02 00       	call   c00227e0 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 38 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc740]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 38 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc740]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 38 02 c0       	mov    edx,0xc00238e0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 54 66 02 c0       	mov    edx,0xc0026654
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 38 02 c0       	mov    edx,0xc00238ec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 00 82 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7e00]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 e0 81 02 c0    	mov    ax,ds:0xc00281e0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 e0 81 02 c0    	mov    ds:0xc00281e0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 9f f7 01 00       	call   c00227e0 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 38 02 c0       	mov    eax,0xc00238f2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 38 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc7c0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 38 02 c0       	mov    eax,0xc00238fb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc740]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 6a e1 01 00       	call   c00227e0 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 37 02 c0       	mov    edx,0xc00237d0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 00 82 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7e00]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 00 82 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7e00],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 31 cb 01 00       	call   c00227e0 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 17 cb 01 00       	call   c00227e0 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 38 02 c0       	mov    eax,0xc0023817
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 38 02 c0       	mov    eax,0xc0023810
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 b0 b6 01 00       	call   c00227e0 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 00 82 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7e00]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 38 02 c0       	mov    esi,0xc0023800
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 24 b0 01 00       	call   c00227e0 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 38 02 c0       	mov    edx,0xc00238e0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 39 02 c0       	mov    edx,0xc0023902
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 39 02 c0       	mov    edx,0xc002390e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 39 02 c0       	mov    edx,0xc0023922
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 6c 17 00 00       	call   c0009d3f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 64 17 00 00       	call   c0009d4f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 40 3c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023c40
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 40 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023c40
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 40 3a 02 c0       	mov    eax,0xc0023a40
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 40 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6c0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 c6 14 00 00       	jmp    c0009d3f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 e1 14 00 00       	jmp    c0009d5f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000888b:	48                   	dec    eax
c000888c:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00088a2:	48                   	dec    eax
c00088a3:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c00088b3:	ff 05 84 97 02 c0    	inc    DWORD PTR ds:0xc0029784
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c00088c2:	48                   	dec    eax
c00088c3:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 80 97 02 c0 00 	cmp    DWORD PTR ds:0xc0029780,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00088dd:	e8 f6 fd 00 00       	call   c00186d8 <schedule()>
c00088e2:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00088e7:	48                   	dec    eax
c00088e8:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 94 83 02 c0       	mov    eax,ds:0xc0028394
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 40 3d 02 c0       	push   0xc0023d40
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 68 82 02 c0       	mov    eax,0xc0028268
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 49 3d 02 c0       	push   0xc0023d49
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 53 3d 02 c0       	push   0xc0023d53
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 14 25 02 c0       	mov    eax,0xc0022514
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 5c 3d 02 c0       	push   0xc0023d5c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 e0 28 02 c0       	mov    eax,0xc00228e0
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 66 3d 02 c0       	push   0xc0023d66
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 60 26 02 c0       	mov    eax,0xc0022660
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 6f 3d 02 c0       	push   0xc0023d6f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 6c 82 02 c0       	mov    eax,0xc002826c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 7c 3d 02 c0       	push   0xc0023d7c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 6d 82 02 c0       	mov    eax,0xc002826d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 43 5c 00 00       	call   c000e688 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 89 3d 02 c0       	push   0xc0023d89
c0008a75:	e8 1f 13 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 a0 3d 02 c0 	mov    DWORD PTR [esp],0xc0023da0
c0008a82:	e8 12 13 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 ac 12 00 00       	call   c0009d3f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c0008aa2:	68 b9 3d 02 c0       	push   0xc0023db9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 05 f8 00 00       	call   c00182b4 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 37 97 00 c0       	push   0xc0009737
c0008abe:	53                   	push   ebx
c0008abf:	e8 f8 f9 00 00       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 00 8f 01 c0       	push   0xc0018f00
c0008acd:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c0008ad3:	e8 e4 f9 00 00       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0008ae0:	68 04 40 02 c0       	push   0xc0024004
c0008ae5:	c6 05 6d 82 02 c0 01 	mov    BYTE PTR ds:0xc002826d,0x1
c0008aec:	e8 a8 12 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 e5 07 01 00       	call   c00192db <Vm::initialise8086()>
c0008af6:	e8 e7 48 00 00       	call   c000d3e2 <Fs::initVFS()>
c0008afb:	c7 04 24 c6 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dc6
c0008b02:	e8 92 12 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 04 40 02 c0       	push   0xc0024004
c0008b26:	e8 6e 12 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 f2 df 00 00       	call   c0016b22 <Sys::loadSyscalls()>
c0008b30:	e8 2f c4 00 00       	call   c0014f64 <Krnl::loadSystemEnv()>
c0008b35:	e8 81 c8 00 00       	call   c00153bb <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 e0 3d 02 c0       	push   0xc0023de0
c0008b44:	68 e9 3d 02 c0       	push   0xc0023de9
c0008b49:	e8 97 cd 00 00       	call   c00158e5 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 ea 53 00 00       	call   c000df40 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 28 40 02 c0 	mov    DWORD PTR [esp],0xc0024028
c0008b5d:	e8 37 12 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 d5 5a 00 00       	call   c000e648 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 f1 3d 02 c0 	mov    DWORD PTR [esp],0xc0023df1
c0008b7a:	e8 1a 12 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 48 bf 00 00       	call   c0014acc <Krnl::startCPUs()>
c0008b84:	c7 04 24 0b 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e0b
c0008b8b:	e8 09 12 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 1c 3e 02 c0       	push   0xc0023e1c
c0008b9f:	e8 4e f1 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 76 f3 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 16 fd 00 00       	call   c00188d0 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 38 3e 02 c0       	push   0xc0023e38
c0008bcf:	50                   	push   eax
c0008bd0:	e8 2d 5b 00 00       	call   c000e702 <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba 98 40 02 c0       	mov    edx,0xc0024098
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 81 82 02 c0 04 	test   BYTE PTR ds:0xc0028281,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 3d 97 01 00       	call   c00224a6 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 ee a8 00 00       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 c7 a8 00 00       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 a5 a8 00 00       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 83 a8 00 00       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 80 82 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028280,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 91 a7 00 00       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 6c a7 00 00       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 a7 95 01 00       	call   c0022460 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 e4 94 01 00       	call   c00223c0 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 88 a7 00 00       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	53                   	push   ebx
c0008f29:	83 ec 14             	sub    esp,0x14
c0008f2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f30:	68 48 3e 02 c0       	push   0xc0023e48
c0008f35:	e8 11 41 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0008f3a:	83 c4 10             	add    esp,0x10
c0008f3d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f44:	0f 85 73 02 00 00    	jne    c00091bd <Computer::displayFeatures()+0x295>
c0008f4a:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0008f4f:	83 ec 08             	sub    esp,0x8
c0008f52:	50                   	push   eax
c0008f53:	68 5b 3e 02 c0       	push   0xc0023e5b
c0008f58:	e8 ee 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0008f5d:	83 c4 10             	add    esp,0x10
c0008f60:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f67:	0f 85 8c 02 00 00    	jne    c00091f9 <Computer::displayFeatures()+0x2d1>
c0008f6d:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0008f72:	83 ec 08             	sub    esp,0x8
c0008f75:	50                   	push   eax
c0008f76:	68 6c 3e 02 c0       	push   0xc0023e6c
c0008f7b:	e8 cb 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f8a:	0f 85 5f 02 00 00    	jne    c00091ef <Computer::displayFeatures()+0x2c7>
c0008f90:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0008f95:	83 ec 08             	sub    esp,0x8
c0008f98:	50                   	push   eax
c0008f99:	68 7d 3e 02 c0       	push   0xc0023e7d
c0008f9e:	e8 a8 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0008fa3:	83 c4 10             	add    esp,0x10
c0008fa6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fad:	0f 85 32 02 00 00    	jne    c00091e5 <Computer::displayFeatures()+0x2bd>
c0008fb3:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0008fb8:	83 ec 08             	sub    esp,0x8
c0008fbb:	50                   	push   eax
c0008fbc:	68 8e 3e 02 c0       	push   0xc0023e8e
c0008fc1:	e8 85 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fd0:	0f 85 05 02 00 00    	jne    c00091db <Computer::displayFeatures()+0x2b3>
c0008fd6:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0008fdb:	83 ec 08             	sub    esp,0x8
c0008fde:	50                   	push   eax
c0008fdf:	68 9f 3e 02 c0       	push   0xc0023e9f
c0008fe4:	e8 62 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0008fe9:	83 c4 10             	add    esp,0x10
c0008fec:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008ff3:	0f 85 d8 01 00 00    	jne    c00091d1 <Computer::displayFeatures()+0x2a9>
c0008ff9:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0008ffe:	83 ec 08             	sub    esp,0x8
c0009001:	50                   	push   eax
c0009002:	68 b0 3e 02 c0       	push   0xc0023eb0
c0009007:	e8 3f 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000900c:	83 c4 10             	add    esp,0x10
c000900f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009016:	0f 85 ab 01 00 00    	jne    c00091c7 <Computer::displayFeatures()+0x29f>
c000901c:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0009021:	83 ec 08             	sub    esp,0x8
c0009024:	50                   	push   eax
c0009025:	68 c1 3e 02 c0       	push   0xc0023ec1
c000902a:	e8 1c 40 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000902f:	83 c4 10             	add    esp,0x10
c0009032:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009039:	0f 88 1b 02 00 00    	js     c000925a <Computer::displayFeatures()+0x332>
c000903f:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0009044:	83 ec 08             	sub    esp,0x8
c0009047:	50                   	push   eax
c0009048:	68 d2 3e 02 c0       	push   0xc0023ed2
c000904d:	e8 f9 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000905c:	0f 85 a1 01 00 00    	jne    c0009203 <Computer::displayFeatures()+0x2db>
c0009062:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0009067:	83 ec 08             	sub    esp,0x8
c000906a:	50                   	push   eax
c000906b:	68 e3 3e 02 c0       	push   0xc0023ee3
c0009070:	e8 d6 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000907f:	0f 85 cb 01 00 00    	jne    c0009250 <Computer::displayFeatures()+0x328>
c0009085:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c000908a:	83 ec 08             	sub    esp,0x8
c000908d:	50                   	push   eax
c000908e:	68 f4 3e 02 c0       	push   0xc0023ef4
c0009093:	e8 b3 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090a2:	0f 85 9e 01 00 00    	jne    c0009246 <Computer::displayFeatures()+0x31e>
c00090a8:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00090ad:	83 ec 08             	sub    esp,0x8
c00090b0:	50                   	push   eax
c00090b1:	68 05 3f 02 c0       	push   0xc0023f05
c00090b6:	e8 90 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00090bb:	83 c4 10             	add    esp,0x10
c00090be:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090c5:	0f 85 71 01 00 00    	jne    c000923c <Computer::displayFeatures()+0x314>
c00090cb:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00090d0:	83 ec 08             	sub    esp,0x8
c00090d3:	50                   	push   eax
c00090d4:	68 16 3f 02 c0       	push   0xc0023f16
c00090d9:	e8 6d 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e8:	0f 85 44 01 00 00    	jne    c0009232 <Computer::displayFeatures()+0x30a>
c00090ee:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00090f3:	83 ec 08             	sub    esp,0x8
c00090f6:	50                   	push   eax
c00090f7:	68 27 3f 02 c0       	push   0xc0023f27
c00090fc:	e8 4a 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000910b:	0f 85 17 01 00 00    	jne    c0009228 <Computer::displayFeatures()+0x300>
c0009111:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0009116:	83 ec 08             	sub    esp,0x8
c0009119:	50                   	push   eax
c000911a:	68 38 3f 02 c0       	push   0xc0023f38
c000911f:	e8 27 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009124:	83 c4 10             	add    esp,0x10
c0009127:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000912e:	0f 85 ea 00 00 00    	jne    c000921e <Computer::displayFeatures()+0x2f6>
c0009134:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0009139:	83 ec 08             	sub    esp,0x8
c000913c:	50                   	push   eax
c000913d:	68 49 3f 02 c0       	push   0xc0023f49
c0009142:	e8 04 3f 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009151:	0f 88 0d 01 00 00    	js     c0009264 <Computer::displayFeatures()+0x33c>
c0009157:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c000915c:	83 ec 08             	sub    esp,0x8
c000915f:	50                   	push   eax
c0009160:	68 5a 3f 02 c0       	push   0xc0023f5a
c0009165:	e8 e1 3e 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000916a:	83 c4 10             	add    esp,0x10
c000916d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009174:	0f 85 9a 00 00 00    	jne    c0009214 <Computer::displayFeatures()+0x2ec>
c000917a:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c000917f:	83 ec 08             	sub    esp,0x8
c0009182:	50                   	push   eax
c0009183:	68 6b 3f 02 c0       	push   0xc0023f6b
c0009188:	e8 be 3e 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000918d:	83 c4 10             	add    esp,0x10
c0009190:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c0009197:	75 74                	jne    c000920d <Computer::displayFeatures()+0x2e5>
c0009199:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c000919e:	83 ec 08             	sub    esp,0x8
c00091a1:	50                   	push   eax
c00091a2:	68 7c 3f 02 c0       	push   0xc0023f7c
c00091a7:	e8 9f 3e 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00091ac:	c7 44 24 20 5b 5e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025e5b
c00091b4:	83 c4 18             	add    esp,0x18
c00091b7:	5b                   	pop    ebx
c00091b8:	e9 8e 3e 00 00       	jmp    c000d04b <Dbg::kprintf(char const*, ...)>
c00091bd:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091c2:	e9 88 fd ff ff       	jmp    c0008f4f <Computer::displayFeatures()+0x27>
c00091c7:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091cc:	e9 50 fe ff ff       	jmp    c0009021 <Computer::displayFeatures()+0xf9>
c00091d1:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091d6:	e9 23 fe ff ff       	jmp    c0008ffe <Computer::displayFeatures()+0xd6>
c00091db:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091e0:	e9 f6 fd ff ff       	jmp    c0008fdb <Computer::displayFeatures()+0xb3>
c00091e5:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091ea:	e9 c9 fd ff ff       	jmp    c0008fb8 <Computer::displayFeatures()+0x90>
c00091ef:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091f4:	e9 9c fd ff ff       	jmp    c0008f95 <Computer::displayFeatures()+0x6d>
c00091f9:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00091fe:	e9 6f fd ff ff       	jmp    c0008f72 <Computer::displayFeatures()+0x4a>
c0009203:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009208:	e9 5a fe ff ff       	jmp    c0009067 <Computer::displayFeatures()+0x13f>
c000920d:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009212:	eb 8a                	jmp    c000919e <Computer::displayFeatures()+0x276>
c0009214:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009219:	e9 61 ff ff ff       	jmp    c000917f <Computer::displayFeatures()+0x257>
c000921e:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009223:	e9 11 ff ff ff       	jmp    c0009139 <Computer::displayFeatures()+0x211>
c0009228:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c000922d:	e9 e4 fe ff ff       	jmp    c0009116 <Computer::displayFeatures()+0x1ee>
c0009232:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009237:	e9 b7 fe ff ff       	jmp    c00090f3 <Computer::displayFeatures()+0x1cb>
c000923c:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009241:	e9 8a fe ff ff       	jmp    c00090d0 <Computer::displayFeatures()+0x1a8>
c0009246:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c000924b:	e9 5d fe ff ff       	jmp    c00090ad <Computer::displayFeatures()+0x185>
c0009250:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009255:	e9 30 fe ff ff       	jmp    c000908a <Computer::displayFeatures()+0x162>
c000925a:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c000925f:	e9 e0 fd ff ff       	jmp    c0009044 <Computer::displayFeatures()+0x11c>
c0009264:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0009269:	e9 ee fe ff ff       	jmp    c000915c <Computer::displayFeatures()+0x234>

c000926e <Computer::rdmsr(unsigned int)>:
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009275:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000927c:	74 0a                	je     c0009288 <Computer::rdmsr(unsigned int)+0x1a>
c000927e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009282:	0f 32                	rdmsr  
c0009284:	83 c4 0c             	add    esp,0xc
c0009287:	c3                   	ret    
c0009288:	83 ec 0c             	sub    esp,0xc
c000928b:	68 8d 3f 02 c0       	push   0xc0023f8d
c0009290:	e8 d8 bd 00 00       	call   c001506d <Krnl::panic(char const*)>
c0009295:	83 c4 10             	add    esp,0x10
c0009298:	eb e4                	jmp    c000927e <Computer::rdmsr(unsigned int)+0x10>

c000929a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000929a:	57                   	push   edi
c000929b:	56                   	push   esi
c000929c:	52                   	push   edx
c000929d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092b0:	74 0e                	je     c00092c0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092b6:	89 f0                	mov    eax,esi
c00092b8:	89 fa                	mov    edx,edi
c00092ba:	0f 30                	wrmsr  
c00092bc:	58                   	pop    eax
c00092bd:	5e                   	pop    esi
c00092be:	5f                   	pop    edi
c00092bf:	c3                   	ret    
c00092c0:	83 ec 0c             	sub    esp,0xc
c00092c3:	68 93 3f 02 c0       	push   0xc0023f93
c00092c8:	e8 a0 bd 00 00       	call   c001506d <Krnl::panic(char const*)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	eb e0                	jmp    c00092b2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092d2 <Computer::shutdown()>:
c00092d2:	83 ec 0c             	sub    esp,0xc
c00092d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092db:	6a 00                	push   0x0
c00092dd:	6a 00                	push   0x0
c00092df:	6a 00                	push   0x0
c00092e1:	50                   	push   eax
c00092e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092e5:	83 c4 1c             	add    esp,0x1c
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop

c00092ea <Computer::restart()>:
c00092ea:	83 ec 0c             	sub    esp,0xc
c00092ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092f3:	6a 00                	push   0x0
c00092f5:	6a 00                	push   0x0
c00092f7:	6a 01                	push   0x1
c00092f9:	50                   	push   eax
c00092fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092fd:	83 c4 1c             	add    esp,0x1c
c0009300:	c3                   	ret    
c0009301:	90                   	nop

c0009302 <Computer::sleep()>:
c0009302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009306:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000930c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009310:	e9 4b 99 00 00       	jmp    c0012c60 <ACPI::sleep()>
c0009315:	90                   	nop

c0009316 <Computer::nmiEnabled()>:
c0009316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009320:	c3                   	ret    
c0009321:	90                   	nop

c0009322 <Computer::readCMOS(unsigned char)>:
c0009322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009326:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000932d:	19 c0                	sbb    eax,eax
c000932f:	83 e0 80             	and    eax,0xffffff80
c0009332:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009336:	e6 70                	out    0x70,al
c0009338:	e4 71                	in     al,0x71
c000933a:	c3                   	ret    
c000933b:	90                   	nop

c000933c <Computer::enableNMI(bool)>:
c000933c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009344:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000934a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009352:	eb ce                	jmp    c0009322 <Computer::readCMOS(unsigned char)>

c0009354 <Computer::open(int, int, void*)>:
c0009354:	56                   	push   esi
c0009355:	53                   	push   ebx
c0009356:	83 ec 10             	sub    esp,0x10
c0009359:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000935d:	68 48 40 02 c0       	push   0xc0024048
c0009362:	e8 32 0a 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0009367:	f6 05 80 82 02 c0 04 	test   BYTE PTR ds:0xc0028280,0x4
c000936e:	c7 04 24 99 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f99
c0009375:	0f 94 05 40 76 02 c0 	sete   BYTE PTR ds:0xc0027640
c000937c:	e8 18 0a 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0009381:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009388:	e8 b2 09 00 00       	call   c0009d3f <malloc>
c000938d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009390:	89 c6                	mov    esi,eax
c0009392:	e8 81 91 00 00       	call   c0012518 <ACPI::ACPI()>
c0009397:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000939d:	58                   	pop    eax
c000939e:	5a                   	pop    edx
c000939f:	56                   	push   esi
c00093a0:	53                   	push   ebx
c00093a1:	e8 58 51 00 00       	call   c000e4fe <Device::addChild(Device*)>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 70 f9 ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00093ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093b1:	e8 72 fb ff ff       	call   c0008f28 <Computer::displayFeatures()>
c00093b6:	59                   	pop    ecx
c00093b7:	5e                   	pop    esi
c00093b8:	6a 01                	push   0x1
c00093ba:	53                   	push   ebx
c00093bb:	e8 7c ff ff ff       	call   c000933c <Computer::enableNMI(bool)>
c00093c0:	c7 04 24 f1 3d 02 c0 	mov    DWORD PTR [esp],0xc0023df1
c00093c7:	e8 cd 09 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00093cc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00093d3:	e8 67 09 00 00       	call   c0009d3f <malloc>
c00093d8:	89 c6                	mov    esi,eax
c00093da:	89 04 24             	mov    DWORD PTR [esp],eax
c00093dd:	e8 68 a3 00 00       	call   c001374a <CPU::CPU()>
c00093e2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e8:	58                   	pop    eax
c00093e9:	5a                   	pop    edx
c00093ea:	56                   	push   esi
c00093eb:	53                   	push   ebx
c00093ec:	e8 0d 51 00 00       	call   c000e4fe <Device::addChild(Device*)>
c00093f1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093fd:	6a 00                	push   0x0
c00093ff:	6a 00                	push   0x0
c0009401:	50                   	push   eax
c0009402:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009405:	83 c4 14             	add    esp,0x14
c0009408:	68 6c 40 02 c0       	push   0xc002406c
c000940d:	e8 87 09 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0009412:	e8 83 56 00 00       	call   c000ea9a <setupFPU()>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009420:	85 c0                	test   eax,eax
c0009422:	74 1f                	je     c0009443 <Computer::open(int, int, void*)+0xef>
c0009424:	83 ec 08             	sub    esp,0x8
c0009427:	50                   	push   eax
c0009428:	53                   	push   ebx
c0009429:	e8 d0 50 00 00       	call   c000e4fe <Device::addChild(Device*)>
c000942e:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009434:	8b 10                	mov    edx,DWORD PTR [eax]
c0009436:	6a 00                	push   0x0
c0009438:	6a 00                	push   0x0
c000943a:	6a 00                	push   0x0
c000943c:	50                   	push   eax
c000943d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009440:	83 c4 20             	add    esp,0x20
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	68 b1 3f 02 c0       	push   0xc0023fb1
c000944b:	e8 49 09 00 00       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0009450:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009457:	e8 74 f1 00 00       	call   c00185d0 <setupMultitasking(void (*)())>
c000945c:	83 c4 14             	add    esp,0x14
c000945f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009464:	5b                   	pop    ebx
c0009465:	5e                   	pop    esi
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <Computer::disableNMI()>:
c0009468:	6a 00                	push   0x0
c000946a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000946e:	e8 c9 fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009473:	58                   	pop    eax
c0009474:	5a                   	pop    edx
c0009475:	c3                   	ret    

c0009476 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000947a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009481:	19 c0                	sbb    eax,eax
c0009483:	83 e0 80             	and    eax,0xffffff80
c0009486:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000948a:	e6 70                	out    0x70,al
c000948c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009490:	e6 71                	out    0x71,al
c0009492:	c3                   	ret    
c0009493:	90                   	nop

c0009494 <Computer::handleNMI()>:
c0009494:	56                   	push   esi
c0009495:	53                   	push   ebx
c0009496:	83 ec 10             	sub    esp,0x10
c0009499:	e4 92                	in     al,0x92
c000949b:	89 c6                	mov    esi,eax
c000949d:	e4 61                	in     al,0x61
c000949f:	68 cc 3f 02 c0       	push   0xc0023fcc
c00094a4:	88 c3                	mov    bl,al
c00094a6:	e8 a0 3b 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	83 e6 10             	and    esi,0x10
c00094b1:	75 0d                	jne    c00094c0 <Computer::handleNMI()+0x2c>
c00094b3:	f6 c3 40             	test   bl,0x40
c00094b6:	75 1d                	jne    c00094d5 <Computer::handleNMI()+0x41>
c00094b8:	84 db                	test   bl,bl
c00094ba:	78 2d                	js     c00094e9 <Computer::handleNMI()+0x55>
c00094bc:	58                   	pop    eax
c00094bd:	5b                   	pop    ebx
c00094be:	5e                   	pop    esi
c00094bf:	c3                   	ret    
c00094c0:	83 ec 0c             	sub    esp,0xc
c00094c3:	68 dd 3f 02 c0       	push   0xc0023fdd
c00094c8:	e8 a0 bb 00 00       	call   c001506d <Krnl::panic(char const*)>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	f6 c3 40             	test   bl,0x40
c00094d3:	74 e3                	je     c00094b8 <Computer::handleNMI()+0x24>
c00094d5:	83 ec 0c             	sub    esp,0xc
c00094d8:	68 ea 3f 02 c0       	push   0xc0023fea
c00094dd:	e8 8b bb 00 00       	call   c001506d <Krnl::panic(char const*)>
c00094e2:	83 c4 10             	add    esp,0x10
c00094e5:	84 db                	test   bl,bl
c00094e7:	79 d3                	jns    c00094bc <Computer::handleNMI()+0x28>
c00094e9:	c7 44 24 10 f4 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ff4
c00094f1:	5a                   	pop    edx
c00094f2:	5b                   	pop    ebx
c00094f3:	5e                   	pop    esi
c00094f4:	e9 74 bb 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c00094f9:	90                   	nop

c00094fa <Computer::setDiskActivityLight(int, bool)>:
c00094fa:	56                   	push   esi
c00094fb:	53                   	push   ebx
c00094fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009500:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009505:	77 1b                	ja     c0009522 <Computer::setDiskActivityLight(int, bool)+0x28>
c0009507:	e4 92                	in     al,0x92
c0009509:	bb 40 00 00 00       	mov    ebx,0x40
c000950e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009512:	89 da                	mov    edx,ebx
c0009514:	d3 e2                	shl    edx,cl
c0009516:	89 f1                	mov    ecx,esi
c0009518:	f7 d2                	not    edx
c000951a:	d3 e3                	shl    ebx,cl
c000951c:	21 d0                	and    eax,edx
c000951e:	09 d8                	or     eax,ebx
c0009520:	e6 92                	out    0x92,al
c0009522:	5b                   	pop    ebx
c0009523:	5e                   	pop    esi
c0009524:	c3                   	ret    
c0009525:	90                   	nop

c0009526 <GDTEntry::setBase(unsigned int)>:
c0009526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000952a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000952e:	89 c1                	mov    ecx,eax
c0009530:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009534:	c1 e9 10             	shr    ecx,0x10
c0009537:	c1 e8 18             	shr    eax,0x18
c000953a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000953d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009540:	c3                   	ret    
c0009541:	90                   	nop

c0009542 <GDTEntry::setLimit(unsigned int)>:
c0009542:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000954a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000954d:	66 89 01             	mov    WORD PTR [ecx],ax
c0009550:	83 e2 f0             	and    edx,0xfffffff0
c0009553:	c1 e8 10             	shr    eax,0x10
c0009556:	83 e0 0f             	and    eax,0xf
c0009559:	09 d0                	or     eax,edx
c000955b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000955e:	c3                   	ret    
c000955f:	90                   	nop

c0009560 <GDT::GDT()>:
c0009560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009564:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009574:	90                   	nop
c0009575:	c3                   	ret    

c0009576 <GDT::addEntry(GDTEntry)>:
c0009576:	53                   	push   ebx
c0009577:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000957b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000957f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009585:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009589:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000958d:	8d 48 01             	lea    ecx,[eax+0x1]
c0009590:	c1 e0 03             	shl    eax,0x3
c0009593:	89 0a                	mov    DWORD PTR [edx],ecx
c0009595:	5b                   	pop    ebx
c0009596:	c3                   	ret    
c0009597:	90                   	nop

c0009598 <GDT::getNumberOfEntries()>:
c0009598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000959c:	8b 00                	mov    eax,DWORD PTR [eax]
c000959e:	c3                   	ret    
c000959f:	90                   	nop

c00095a0 <GDT::flush()>:
c00095a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00095a6:	83 c0 04             	add    eax,0x4
c00095a9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00095b0:	a3 72 82 02 c0       	mov    ds:0xc0028272,eax
c00095b5:	66 89 15 70 82 02 c0 	mov    WORD PTR ds:0xc0028270,dx
c00095bc:	e9 c4 6d ff ff       	jmp    c0000385 <loadGDT>
c00095c1:	90                   	nop

c00095c2 <GDT::setup()>:
c00095c2:	57                   	push   edi
c00095c3:	56                   	push   esi
c00095c4:	53                   	push   ebx
c00095c5:	83 ec 40             	sub    esp,0x40
c00095c8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00095cc:	6a 00                	push   0x0
c00095ce:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00095d2:	56                   	push   esi
c00095d3:	e8 4e ff ff ff       	call   c0009526 <GDTEntry::setBase(unsigned int)>
c00095d8:	6a 00                	push   0x0
c00095da:	56                   	push   esi
c00095db:	e8 62 ff ff ff       	call   c0009542 <GDTEntry::setLimit(unsigned int)>
c00095e0:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095e8:	6a 00                	push   0x0
c00095ea:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095ee:	56                   	push   esi
c00095ef:	e8 32 ff ff ff       	call   c0009526 <GDTEntry::setBase(unsigned int)>
c00095f4:	68 ff ff ff 00       	push   0xffffff
c00095f9:	56                   	push   esi
c00095fa:	e8 43 ff ff ff       	call   c0009542 <GDTEntry::setLimit(unsigned int)>
c00095ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0009603:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009608:	0d 00 9a c0 00       	or     eax,0xc09a00
c000960d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009611:	83 c4 20             	add    esp,0x20
c0009614:	6a 00                	push   0x0
c0009616:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000961a:	56                   	push   esi
c000961b:	e8 06 ff ff ff       	call   c0009526 <GDTEntry::setBase(unsigned int)>
c0009620:	68 ff ff ff 00       	push   0xffffff
c0009625:	56                   	push   esi
c0009626:	e8 17 ff ff ff       	call   c0009542 <GDTEntry::setLimit(unsigned int)>
c000962b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000962f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0009633:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009637:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000963b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000963f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009644:	0d 00 92 c0 00       	or     eax,0xc09200
c0009649:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000964d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009651:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009655:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009659:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000965d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009661:	89 fa                	mov    edx,edi
c0009663:	80 cc 60             	or     ah,0x60
c0009666:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000966c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009670:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009674:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009678:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000967c:	80 cc 60             	or     ah,0x60
c000967f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009683:	89 f8                	mov    eax,edi
c0009685:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000968a:	09 d0                	or     eax,edx
c000968c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009690:	89 c7                	mov    edi,eax
c0009692:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009696:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000969a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000969e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a2:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00096a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ac:	25 ff ff 00 ff       	and    eax,0xff00ffff
c00096b1:	09 d0                	or     eax,edx
c00096b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096b7:	83 c4 0c             	add    esp,0xc
c00096ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00096be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00096c2:	53                   	push   ebx
c00096c3:	e8 ae fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c00096c8:	83 c4 0c             	add    esp,0xc
c00096cb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00096cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00096d3:	53                   	push   ebx
c00096d4:	e8 9d fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c00096d9:	83 c4 0c             	add    esp,0xc
c00096dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096e4:	53                   	push   ebx
c00096e5:	e8 8c fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c00096ea:	83 c4 0c             	add    esp,0xc
c00096ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096f5:	53                   	push   ebx
c00096f6:	e8 7b fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c00096fb:	83 c4 0c             	add    esp,0xc
c00096fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009702:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009706:	53                   	push   ebx
c0009707:	e8 6a fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c000970c:	83 c4 0c             	add    esp,0xc
c000970f:	57                   	push   edi
c0009710:	56                   	push   esi
c0009711:	53                   	push   ebx
c0009712:	e8 5f fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c0009717:	83 c4 0c             	add    esp,0xc
c000971a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000971e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009722:	53                   	push   ebx
c0009723:	e8 4e fe ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c0009728:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000972b:	e8 70 fe ff ff       	call   c00095a0 <GDT::flush()>
c0009730:	83 c4 50             	add    esp,0x50
c0009733:	5b                   	pop    ebx
c0009734:	5e                   	pop    esi
c0009735:	5f                   	pop    edi
c0009736:	c3                   	ret    

c0009737 <idleFunction(void*)>:
c0009737:	53                   	push   ebx
c0009738:	83 ec 08             	sub    esp,0x8
c000973b:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0009740:	48                   	dec    eax
c0009741:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0009746:	75 01                	jne    c0009749 <idleFunction(void*)+0x12>
c0009748:	fb                   	sti    
c0009749:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000974e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009754:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000975b:	74 3c                	je     c0009799 <idleFunction(void*)+0x62>
c000975d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009764:	74 33                	je     c0009799 <idleFunction(void*)+0x62>
c0009766:	31 db                	xor    ebx,ebx
c0009768:	52                   	push   edx
c0009769:	52                   	push   edx
c000976a:	68 e1 00 00 00       	push   0xe1
c000976f:	50                   	push   eax
c0009770:	e8 f9 fa ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0009775:	53                   	push   ebx
c0009776:	83 e0 02             	and    eax,0x2
c0009779:	50                   	push   eax
c000977a:	68 e1 00 00 00       	push   0xe1
c000977f:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c0009785:	e8 10 fb ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c000978a:	83 c4 20             	add    esp,0x20
c000978d:	e8 22 6a ff ff       	call   c00001b4 <doTPAUSE>
c0009792:	e8 cb 92 01 00       	call   c0022a62 <idleCommon()>
c0009797:	eb f4                	jmp    c000978d <idleFunction(void*)+0x56>
c0009799:	fb                   	sti    
c000979a:	f4                   	hlt    
c000979b:	e8 c2 92 01 00       	call   c0022a62 <idleCommon()>
c00097a0:	eb f7                	jmp    c0009799 <idleFunction(void*)+0x62>
c00097a2:	66 90                	xchg   ax,ax

c00097a4 <IDTEntry::IDTEntry(bool)>:
c00097a4:	83 ec 04             	sub    esp,0x4
c00097a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097ab:	88 04 24             	mov    BYTE PTR [esp],al
c00097ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097b2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097c4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097c7:	83 e2 f0             	and    edx,0xfffffff0
c00097ca:	83 ca 0e             	or     edx,0xe
c00097cd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097d7:	83 e2 ef             	and    edx,0xffffffef
c00097da:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097dd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097e1:	74 05                	je     c00097e8 <IDTEntry::IDTEntry(bool)+0x44>
c00097e3:	b2 03                	mov    dl,0x3
c00097e5:	eb 05                	jmp    c00097ec <IDTEntry::IDTEntry(bool)+0x48>
c00097e7:	90                   	nop
c00097e8:	b2 00                	mov    dl,0x0
c00097ea:	66 90                	xchg   ax,ax
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	83 e2 03             	and    edx,0x3
c00097f3:	88 d1                	mov    cl,dl
c00097f5:	c1 e1 05             	shl    ecx,0x5
c00097f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097fb:	83 e2 9f             	and    edx,0xffffff9f
c00097fe:	09 ca                	or     edx,ecx
c0009800:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009807:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000980a:	83 ca 80             	or     edx,0xffffff80
c000980d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009810:	90                   	nop
c0009811:	83 c4 04             	add    esp,0x4
c0009814:	c3                   	ret    
c0009815:	90                   	nop

c0009816 <IDTEntry::setOffset(unsigned int)>:
c0009816:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000981a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000981e:	66 89 02             	mov    WORD PTR [edx],ax
c0009821:	c1 e8 10             	shr    eax,0x10
c0009824:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009828:	c3                   	ret    
c0009829:	90                   	nop
c000982a:	66 90                	xchg   ax,ax

c000982c <IDT::IDT()>:
c000982c:	90                   	nop
c000982d:	c3                   	ret    

c000982e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000982e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009832:	83 c0 30             	add    eax,0x30
c0009835:	c3                   	ret    

c0009836 <IDT::addEntry(IDTEntry, int)>:
c0009836:	53                   	push   ebx
c0009837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000983b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000983f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009847:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000984a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000984e:	5b                   	pop    ebx
c000984f:	c3                   	ret    

c0009850 <IDT::addEntry(int, void (*)(), bool)>:
c0009850:	53                   	push   ebx
c0009851:	83 ec 10             	sub    esp,0x10
c0009854:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009859:	50                   	push   eax
c000985a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000985e:	53                   	push   ebx
c000985f:	e8 40 ff ff ff       	call   c00097a4 <IDTEntry::IDTEntry(bool)>
c0009864:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009868:	53                   	push   ebx
c0009869:	e8 a8 ff ff ff       	call   c0009816 <IDTEntry::setOffset(unsigned int)>
c000986e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009872:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009876:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000987a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000987e:	e8 b3 ff ff ff       	call   c0009836 <IDT::addEntry(IDTEntry, int)>
c0009883:	83 c4 30             	add    esp,0x30
c0009886:	5b                   	pop    ebx
c0009887:	c3                   	ret    

c0009888 <IDT::flush()>:
c0009888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988c:	66 c7 05 78 82 02 c0 ff 07 	mov    WORD PTR ds:0xc0028278,0x7ff
c0009895:	a3 7a 82 02 c0       	mov    ds:0xc002827a,eax
c000989a:	0f 01 1d 78 82 02 c0 	lidtd  ds:0xc0028278
c00098a1:	c3                   	ret    

c00098a2 <IDT::setup()>:
c00098a2:	57                   	push   edi
c00098a3:	56                   	push   esi
c00098a4:	53                   	push   ebx
c00098a5:	83 ec 10             	sub    esp,0x10
c00098a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098ac:	6a 00                	push   0x0
c00098ae:	68 a5 03 00 c0       	push   0xc00003a5
c00098b3:	6a 00                	push   0x0
c00098b5:	53                   	push   ebx
c00098b6:	e8 95 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00098bb:	6a 00                	push   0x0
c00098bd:	68 b5 03 00 c0       	push   0xc00003b5
c00098c2:	6a 01                	push   0x1
c00098c4:	53                   	push   ebx
c00098c5:	e8 86 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00098ca:	83 c4 20             	add    esp,0x20
c00098cd:	6a 00                	push   0x0
c00098cf:	68 bf 03 00 c0       	push   0xc00003bf
c00098d4:	6a 02                	push   0x2
c00098d6:	53                   	push   ebx
c00098d7:	e8 74 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00098dc:	6a 00                	push   0x0
c00098de:	68 c9 03 00 c0       	push   0xc00003c9
c00098e3:	6a 03                	push   0x3
c00098e5:	53                   	push   ebx
c00098e6:	e8 65 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00098eb:	83 c4 20             	add    esp,0x20
c00098ee:	6a 00                	push   0x0
c00098f0:	68 d3 03 00 c0       	push   0xc00003d3
c00098f5:	6a 04                	push   0x4
c00098f7:	53                   	push   ebx
c00098f8:	e8 53 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00098fd:	6a 00                	push   0x0
c00098ff:	68 dd 03 00 c0       	push   0xc00003dd
c0009904:	6a 05                	push   0x5
c0009906:	53                   	push   ebx
c0009907:	e8 44 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c000990c:	83 c4 20             	add    esp,0x20
c000990f:	6a 00                	push   0x0
c0009911:	68 e7 03 00 c0       	push   0xc00003e7
c0009916:	6a 06                	push   0x6
c0009918:	53                   	push   ebx
c0009919:	e8 32 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c000991e:	6a 00                	push   0x0
c0009920:	68 f1 03 00 c0       	push   0xc00003f1
c0009925:	6a 07                	push   0x7
c0009927:	53                   	push   ebx
c0009928:	e8 23 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c000992d:	83 c4 20             	add    esp,0x20
c0009930:	6a 00                	push   0x0
c0009932:	68 fb 03 00 c0       	push   0xc00003fb
c0009937:	6a 08                	push   0x8
c0009939:	53                   	push   ebx
c000993a:	e8 11 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c000993f:	6a 00                	push   0x0
c0009941:	68 03 04 00 c0       	push   0xc0000403
c0009946:	6a 09                	push   0x9
c0009948:	53                   	push   ebx
c0009949:	e8 02 ff ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c000994e:	83 c4 20             	add    esp,0x20
c0009951:	6a 00                	push   0x0
c0009953:	68 0d 04 00 c0       	push   0xc000040d
c0009958:	6a 0a                	push   0xa
c000995a:	53                   	push   ebx
c000995b:	e8 f0 fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009960:	6a 00                	push   0x0
c0009962:	68 15 04 00 c0       	push   0xc0000415
c0009967:	6a 0b                	push   0xb
c0009969:	53                   	push   ebx
c000996a:	e8 e1 fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c000996f:	83 c4 20             	add    esp,0x20
c0009972:	6a 00                	push   0x0
c0009974:	68 1d 04 00 c0       	push   0xc000041d
c0009979:	6a 0c                	push   0xc
c000997b:	53                   	push   ebx
c000997c:	e8 cf fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009981:	6a 00                	push   0x0
c0009983:	68 25 04 00 c0       	push   0xc0000425
c0009988:	6a 0d                	push   0xd
c000998a:	53                   	push   ebx
c000998b:	e8 c0 fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009990:	83 c4 20             	add    esp,0x20
c0009993:	6a 00                	push   0x0
c0009995:	68 2d 04 00 c0       	push   0xc000042d
c000999a:	6a 0e                	push   0xe
c000999c:	53                   	push   ebx
c000999d:	e8 ae fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00099a2:	6a 00                	push   0x0
c00099a4:	68 35 04 00 c0       	push   0xc0000435
c00099a9:	6a 0f                	push   0xf
c00099ab:	53                   	push   ebx
c00099ac:	e8 9f fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00099b1:	83 c4 20             	add    esp,0x20
c00099b4:	6a 00                	push   0x0
c00099b6:	68 3f 04 00 c0       	push   0xc000043f
c00099bb:	6a 10                	push   0x10
c00099bd:	53                   	push   ebx
c00099be:	e8 8d fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00099c3:	6a 00                	push   0x0
c00099c5:	68 49 04 00 c0       	push   0xc0000449
c00099ca:	6a 11                	push   0x11
c00099cc:	53                   	push   ebx
c00099cd:	e8 7e fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00099d2:	83 c4 20             	add    esp,0x20
c00099d5:	6a 00                	push   0x0
c00099d7:	68 53 04 00 c0       	push   0xc0000453
c00099dc:	6a 12                	push   0x12
c00099de:	53                   	push   ebx
c00099df:	e8 6c fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00099e4:	6a 01                	push   0x1
c00099e6:	68 ed 04 00 c0       	push   0xc00004ed
c00099eb:	6a 60                	push   0x60
c00099ed:	53                   	push   ebx
c00099ee:	e8 5d fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c00099f3:	83 c4 20             	add    esp,0x20
c00099f6:	6a 00                	push   0x0
c00099f8:	68 f4 04 00 c0       	push   0xc00004f4
c00099fd:	6a 20                	push   0x20
c00099ff:	53                   	push   ebx
c0009a00:	e8 4b fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a05:	6a 00                	push   0x0
c0009a07:	68 df 04 00 c0       	push   0xc00004df
c0009a0c:	6a 21                	push   0x21
c0009a0e:	53                   	push   ebx
c0009a0f:	e8 3c fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a14:	83 c4 20             	add    esp,0x20
c0009a17:	6a 00                	push   0x0
c0009a19:	68 e6 04 00 c0       	push   0xc00004e6
c0009a1e:	6a 22                	push   0x22
c0009a20:	53                   	push   ebx
c0009a21:	e8 2a fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a26:	6a 00                	push   0x0
c0009a28:	68 5d 04 00 c0       	push   0xc000045d
c0009a2d:	6a 23                	push   0x23
c0009a2f:	53                   	push   ebx
c0009a30:	e8 1b fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a35:	83 c4 20             	add    esp,0x20
c0009a38:	6a 00                	push   0x0
c0009a3a:	68 67 04 00 c0       	push   0xc0000467
c0009a3f:	6a 24                	push   0x24
c0009a41:	53                   	push   ebx
c0009a42:	e8 09 fe ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a47:	6a 00                	push   0x0
c0009a49:	68 71 04 00 c0       	push   0xc0000471
c0009a4e:	6a 25                	push   0x25
c0009a50:	53                   	push   ebx
c0009a51:	e8 fa fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a56:	83 c4 20             	add    esp,0x20
c0009a59:	6a 00                	push   0x0
c0009a5b:	68 7b 04 00 c0       	push   0xc000047b
c0009a60:	6a 26                	push   0x26
c0009a62:	53                   	push   ebx
c0009a63:	e8 e8 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a68:	6a 00                	push   0x0
c0009a6a:	68 85 04 00 c0       	push   0xc0000485
c0009a6f:	6a 27                	push   0x27
c0009a71:	53                   	push   ebx
c0009a72:	e8 d9 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a77:	83 c4 20             	add    esp,0x20
c0009a7a:	6a 00                	push   0x0
c0009a7c:	68 8f 04 00 c0       	push   0xc000048f
c0009a81:	6a 28                	push   0x28
c0009a83:	53                   	push   ebx
c0009a84:	e8 c7 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a89:	6a 00                	push   0x0
c0009a8b:	68 99 04 00 c0       	push   0xc0000499
c0009a90:	6a 29                	push   0x29
c0009a92:	53                   	push   ebx
c0009a93:	e8 b8 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009a98:	83 c4 20             	add    esp,0x20
c0009a9b:	6a 00                	push   0x0
c0009a9d:	68 a3 04 00 c0       	push   0xc00004a3
c0009aa2:	6a 2a                	push   0x2a
c0009aa4:	53                   	push   ebx
c0009aa5:	e8 a6 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009aaa:	6a 00                	push   0x0
c0009aac:	68 ad 04 00 c0       	push   0xc00004ad
c0009ab1:	6a 2b                	push   0x2b
c0009ab3:	53                   	push   ebx
c0009ab4:	e8 97 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009ab9:	83 c4 20             	add    esp,0x20
c0009abc:	6a 00                	push   0x0
c0009abe:	68 b7 04 00 c0       	push   0xc00004b7
c0009ac3:	6a 2c                	push   0x2c
c0009ac5:	53                   	push   ebx
c0009ac6:	e8 85 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009acb:	6a 00                	push   0x0
c0009acd:	68 c1 04 00 c0       	push   0xc00004c1
c0009ad2:	6a 2d                	push   0x2d
c0009ad4:	53                   	push   ebx
c0009ad5:	e8 76 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009ada:	83 c4 20             	add    esp,0x20
c0009add:	6a 00                	push   0x0
c0009adf:	68 cb 04 00 c0       	push   0xc00004cb
c0009ae4:	6a 2e                	push   0x2e
c0009ae6:	53                   	push   ebx
c0009ae7:	e8 64 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009aec:	6a 00                	push   0x0
c0009aee:	68 d5 04 00 c0       	push   0xc00004d5
c0009af3:	6a 2f                	push   0x2f
c0009af5:	53                   	push   ebx
c0009af6:	e8 55 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009afb:	83 c4 20             	add    esp,0x20
c0009afe:	6a 00                	push   0x0
c0009b00:	68 2b 05 00 c0       	push   0xc000052b
c0009b05:	6a 30                	push   0x30
c0009b07:	53                   	push   ebx
c0009b08:	e8 43 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b0d:	6a 00                	push   0x0
c0009b0f:	68 35 05 00 c0       	push   0xc0000535
c0009b14:	6a 31                	push   0x31
c0009b16:	53                   	push   ebx
c0009b17:	e8 34 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b1c:	83 c4 20             	add    esp,0x20
c0009b1f:	6a 00                	push   0x0
c0009b21:	68 3f 05 00 c0       	push   0xc000053f
c0009b26:	6a 32                	push   0x32
c0009b28:	53                   	push   ebx
c0009b29:	e8 22 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b2e:	6a 00                	push   0x0
c0009b30:	68 49 05 00 c0       	push   0xc0000549
c0009b35:	6a 33                	push   0x33
c0009b37:	53                   	push   ebx
c0009b38:	e8 13 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b3d:	83 c4 20             	add    esp,0x20
c0009b40:	6a 00                	push   0x0
c0009b42:	68 53 05 00 c0       	push   0xc0000553
c0009b47:	6a 34                	push   0x34
c0009b49:	53                   	push   ebx
c0009b4a:	e8 01 fd ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b4f:	6a 00                	push   0x0
c0009b51:	68 5d 05 00 c0       	push   0xc000055d
c0009b56:	6a 35                	push   0x35
c0009b58:	53                   	push   ebx
c0009b59:	e8 f2 fc ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b5e:	83 c4 20             	add    esp,0x20
c0009b61:	6a 00                	push   0x0
c0009b63:	68 67 05 00 c0       	push   0xc0000567
c0009b68:	6a 36                	push   0x36
c0009b6a:	53                   	push   ebx
c0009b6b:	e8 e0 fc ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b70:	6a 00                	push   0x0
c0009b72:	68 71 05 00 c0       	push   0xc0000571
c0009b77:	6a 37                	push   0x37
c0009b79:	53                   	push   ebx
c0009b7a:	e8 d1 fc ff ff       	call   c0009850 <IDT::addEntry(int, void (*)(), bool)>
c0009b7f:	83 c4 1c             	add    esp,0x1c
c0009b82:	6a 03                	push   0x3
c0009b84:	6a 02                	push   0x2
c0009b86:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c0009b8c:	e8 cd 28 00 00       	call   c000c45e <VAS::allocatePages(int, int)>
c0009b91:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b98:	89 c6                	mov    esi,eax
c0009b9a:	e8 a0 01 00 00       	call   c0009d3f <malloc>
c0009b9f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009ba5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ba8:	89 c7                	mov    edi,eax
c0009baa:	e8 85 1a 00 00       	call   c000b634 <TSS::TSS()>
c0009baf:	83 c4 0c             	add    esp,0xc
c0009bb2:	68 fb 03 00 c0       	push   0xc00003fb
c0009bb7:	56                   	push   esi
c0009bb8:	57                   	push   edi
c0009bb9:	e8 ba 1a 00 00       	call   c000b678 <TSS::setup(unsigned long, unsigned long)>
c0009bbe:	89 c6                	mov    esi,eax
c0009bc0:	58                   	pop    eax
c0009bc1:	5a                   	pop    edx
c0009bc2:	6a 00                	push   0x0
c0009bc4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009bc8:	50                   	push   eax
c0009bc9:	e8 d6 fb ff ff       	call   c00097a4 <IDTEntry::IDTEntry(bool)>
c0009bce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bd2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009bd7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009bde:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009be4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009be8:	80 ce 05             	or     dh,0x5
c0009beb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009bee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bf6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bfc:	e8 87 fc ff ff       	call   c0009888 <IDT::flush()>
c0009c01:	83 c4 20             	add    esp,0x20
c0009c04:	5b                   	pop    ebx
c0009c05:	5e                   	pop    esi
c0009c06:	5f                   	pop    edi
c0009c07:	c3                   	ret    

c0009c08 <sbrk>:
c0009c08:	55                   	push   ebp
c0009c09:	57                   	push   edi
c0009c0a:	56                   	push   esi
c0009c0b:	53                   	push   ebx
c0009c0c:	83 ec 24             	sub    esp,0x24
c0009c0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c13:	53                   	push   ebx
c0009c14:	68 bc 40 02 c0       	push   0xc00240bc
c0009c19:	e8 2d 34 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	85 db                	test   ebx,ebx
c0009c23:	74 5f                	je     c0009c84 <sbrk+0x7c>
c0009c25:	78 64                	js     c0009c8b <sbrk+0x83>
c0009c27:	a1 dc 74 02 c0       	mov    eax,ds:0xc00274dc
c0009c2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c30:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c36:	89 dd                	mov    ebp,ebx
c0009c38:	78 69                	js     c0009ca3 <sbrk+0x9b>
c0009c3a:	c1 fd 0c             	sar    ebp,0xc
c0009c3d:	bb 00 00 00 00       	mov    ebx,0x0
c0009c42:	8b 35 94 83 02 c0    	mov    esi,DWORD PTR ds:0xc0028394
c0009c48:	8b 3d dc 74 02 c0    	mov    edi,DWORD PTR ds:0xc00274dc
c0009c4e:	e8 a3 07 00 00       	call   c000a3f6 <Phys::allocatePage()>
c0009c53:	68 01 04 00 00       	push   0x401
c0009c58:	57                   	push   edi
c0009c59:	50                   	push   eax
c0009c5a:	56                   	push   esi
c0009c5b:	e8 fc 26 00 00       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c60:	81 05 dc 74 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00274dc,0x1000
c0009c6a:	43                   	inc    ebx
c0009c6b:	83 c4 10             	add    esp,0x10
c0009c6e:	39 dd                	cmp    ebp,ebx
c0009c70:	75 d0                	jne    c0009c42 <sbrk+0x3a>
c0009c72:	0f 20 d8             	mov    eax,cr3
c0009c75:	0f 22 d8             	mov    cr3,eax
c0009c78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c7c:	83 c4 1c             	add    esp,0x1c
c0009c7f:	5b                   	pop    ebx
c0009c80:	5e                   	pop    esi
c0009c81:	5f                   	pop    edi
c0009c82:	5d                   	pop    ebp
c0009c83:	c3                   	ret    
c0009c84:	a1 dc 74 02 c0       	mov    eax,ds:0xc00274dc
c0009c89:	eb f1                	jmp    c0009c7c <sbrk+0x74>
c0009c8b:	83 ec 08             	sub    esp,0x8
c0009c8e:	53                   	push   ebx
c0009c8f:	68 e8 40 02 c0       	push   0xc00240e8
c0009c94:	e8 b2 33 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009c99:	83 c4 10             	add    esp,0x10
c0009c9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009ca1:	eb d9                	jmp    c0009c7c <sbrk+0x74>
c0009ca3:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009ca9:	eb 8f                	jmp    c0009c3a <sbrk+0x32>

c0009cab <mmap>:
c0009cab:	83 ec 18             	sub    esp,0x18
c0009cae:	68 da 40 02 c0       	push   0xc00240da
c0009cb3:	e8 b5 b3 00 00       	call   c001506d <Krnl::panic(char const*)>
c0009cb8:	b8 00 00 00 00       	mov    eax,0x0
c0009cbd:	83 c4 1c             	add    esp,0x1c
c0009cc0:	c3                   	ret    

c0009cc1 <munmap>:
c0009cc1:	83 ec 18             	sub    esp,0x18
c0009cc4:	68 df 40 02 c0       	push   0xc00240df
c0009cc9:	e8 9f b3 00 00       	call   c001506d <Krnl::panic(char const*)>
c0009cce:	b8 00 00 00 00       	mov    eax,0x0
c0009cd3:	83 c4 1c             	add    esp,0x1c
c0009cd6:	c3                   	ret    

c0009cd7 <liballoc_lock()>:
c0009cd7:	fa                   	cli    
c0009cd8:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0009cde:	b8 00 00 00 00       	mov    eax,0x0
c0009ce3:	c3                   	ret    

c0009ce4 <liballoc_unlock()>:
c0009ce4:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0009ce9:	48                   	dec    eax
c0009cea:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0009cef:	75 01                	jne    c0009cf2 <liballoc_unlock()+0xe>
c0009cf1:	fb                   	sti    
c0009cf2:	b8 00 00 00 00       	mov    eax,0x0
c0009cf7:	c3                   	ret    

c0009cf8 <liballoc_alloc(int)>:
c0009cf8:	83 ec 10             	sub    esp,0x10
c0009cfb:	6a 01                	push   0x1
c0009cfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d01:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c0009d07:	e8 52 27 00 00       	call   c000c45e <VAS::allocatePages(int, int)>
c0009d0c:	83 c4 1c             	add    esp,0x1c
c0009d0f:	c3                   	ret    

c0009d10 <liballoc_free(void*, int)>:
c0009d10:	83 ec 14             	sub    esp,0x14
c0009d13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d17:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c0009d1d:	e8 e6 23 00 00       	call   c000c108 <VAS::freeAllocatedPages(unsigned long)>
c0009d22:	b8 00 00 00 00       	mov    eax,0x0
c0009d27:	83 c4 1c             	add    esp,0x1c
c0009d2a:	c3                   	ret    

c0009d2b <realloc>:
c0009d2b:	83 ec 14             	sub    esp,0x14
c0009d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d36:	e8 25 78 ff ff       	call   c0001560 <dlrealloc>
c0009d3b:	83 c4 1c             	add    esp,0x1c
c0009d3e:	c3                   	ret    

c0009d3f <malloc>:
c0009d3f:	83 ec 18             	sub    esp,0x18
c0009d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d46:	e8 d8 72 ff ff       	call   c0001023 <dlmalloc>
c0009d4b:	83 c4 1c             	add    esp,0x1c
c0009d4e:	c3                   	ret    

c0009d4f <free>:
c0009d4f:	83 ec 18             	sub    esp,0x18
c0009d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d56:	e8 6d 6f ff ff       	call   c0000cc8 <dlfree>
c0009d5b:	83 c4 1c             	add    esp,0x1c
c0009d5e:	c3                   	ret    

c0009d5f <rfree>:
c0009d5f:	83 ec 18             	sub    esp,0x18
c0009d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d66:	e8 5d 6f ff ff       	call   c0000cc8 <dlfree>
c0009d6b:	83 c4 1c             	add    esp,0x1c
c0009d6e:	c3                   	ret    

c0009d6f <calloc>:
c0009d6f:	56                   	push   esi
c0009d70:	53                   	push   ebx
c0009d71:	83 ec 10             	sub    esp,0x10
c0009d74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d78:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d7d:	53                   	push   ebx
c0009d7e:	e8 bc ff ff ff       	call   c0009d3f <malloc>
c0009d83:	89 c6                	mov    esi,eax
c0009d85:	83 c4 0c             	add    esp,0xc
c0009d88:	53                   	push   ebx
c0009d89:	6a 00                	push   0x0
c0009d8b:	50                   	push   eax
c0009d8c:	e8 f3 68 ff ff       	call   c0000684 <memset>
c0009d91:	89 f0                	mov    eax,esi
c0009d93:	83 c4 14             	add    esp,0x14
c0009d96:	5b                   	pop    ebx
c0009d97:	5e                   	pop    esi
c0009d98:	c3                   	ret    

c0009d99 <Krnl::setBootMessage(char const*)>:
c0009d99:	57                   	push   edi
c0009d9a:	56                   	push   esi
c0009d9b:	53                   	push   ebx
c0009d9c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009da2:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009da9:	68 9e 00 00 00       	push   0x9e
c0009dae:	6a 00                	push   0x0
c0009db0:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009db4:	56                   	push   esi
c0009db5:	e8 ca 68 ff ff       	call   c0000684 <memset>
c0009dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009dbd:	e8 de 68 ff ff       	call   c00006a0 <strlen>
c0009dc2:	ba 50 00 00 00       	mov    edx,0x50
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	29 c2                	sub    edx,eax
c0009dcc:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009dd0:	d1 ea                	shr    edx,1
c0009dd2:	84 c0                	test   al,al
c0009dd4:	74 19                	je     c0009def <Krnl::setBootMessage(char const*)+0x56>
c0009dd6:	01 d2                	add    edx,edx
c0009dd8:	43                   	inc    ebx
c0009dd9:	01 f2                	add    edx,esi
c0009ddb:	80 cc 0f             	or     ah,0xf
c0009dde:	83 c2 02             	add    edx,0x2
c0009de1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009de5:	43                   	inc    ebx
c0009de6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009deb:	84 c0                	test   al,al
c0009ded:	75 ec                	jne    c0009ddb <Krnl::setBootMessage(char const*)+0x42>
c0009def:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009df4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009df9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009dfb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e01:	5b                   	pop    ebx
c0009e02:	5e                   	pop    esi
c0009e03:	5f                   	pop    edi
c0009e04:	c3                   	ret    

c0009e05 <kernel_main>:
c0009e05:	57                   	push   edi
c0009e06:	56                   	push   esi
c0009e07:	53                   	push   ebx
c0009e08:	83 ec 20             	sub    esp,0x20
c0009e0b:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e10:	a3 80 82 02 c0       	mov    ds:0xc0028280,eax
c0009e15:	f6 c4 08             	test   ah,0x8
c0009e18:	0f 85 7a 03 00 00    	jne    c000a198 <kernel_main+0x393>
c0009e1e:	31 f6                	xor    esi,esi
c0009e20:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e25:	89 f0                	mov    eax,esi
c0009e27:	89 fa                	mov    edx,edi
c0009e29:	ee                   	out    dx,al
c0009e2a:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e2f:	b0 80                	mov    al,0x80
c0009e31:	89 da                	mov    edx,ebx
c0009e33:	ee                   	out    dx,al
c0009e34:	b1 03                	mov    cl,0x3
c0009e36:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e3b:	88 c8                	mov    al,cl
c0009e3d:	ee                   	out    dx,al
c0009e3e:	89 f0                	mov    eax,esi
c0009e40:	89 fa                	mov    edx,edi
c0009e42:	ee                   	out    dx,al
c0009e43:	88 c8                	mov    al,cl
c0009e45:	89 da                	mov    edx,ebx
c0009e47:	ee                   	out    dx,al
c0009e48:	b0 c7                	mov    al,0xc7
c0009e4a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e4f:	ee                   	out    dx,al
c0009e50:	b0 0b                	mov    al,0xb
c0009e52:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e57:	ee                   	out    dx,al
c0009e58:	83 ec 0c             	sub    esp,0xc
c0009e5b:	68 18 41 02 c0       	push   0xc0024118
c0009e60:	e8 e6 31 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0009e65:	83 c4 10             	add    esp,0x10
c0009e68:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009e6f:	0f 85 eb 02 00 00    	jne    c000a160 <kernel_main+0x35b>
c0009e75:	e8 c6 0c 00 00       	call   c000ab40 <installVgaTextImplementation()>
c0009e7a:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009e81:	0f 85 94 02 00 00    	jne    c000a11b <kernel_main+0x316>
c0009e87:	0f b6 05 e0 74 02 c0 	movzx  eax,BYTE PTR ds:0xc00274e0
c0009e8e:	84 c0                	test   al,al
c0009e90:	74 7b                	je     c0009f0d <kernel_main+0x108>
c0009e92:	31 db                	xor    ebx,ebx
c0009e94:	bf 0a 00 00 00       	mov    edi,0xa
c0009e99:	be 05 00 00 00       	mov    esi,0x5
c0009e9e:	31 c9                	xor    ecx,ecx
c0009ea0:	eb 2a                	jmp    c0009ecc <kernel_main+0xc7>
c0009ea2:	3c 0d                	cmp    al,0xd
c0009ea4:	74 1a                	je     c0009ec0 <kernel_main+0xbb>
c0009ea6:	3c 0a                	cmp    al,0xa
c0009ea8:	74 40                	je     c0009eea <kernel_main+0xe5>
c0009eaa:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ead:	80 cc 0e             	or     ah,0xe
c0009eb0:	c1 e2 04             	shl    edx,0x4
c0009eb3:	01 ca                	add    edx,ecx
c0009eb5:	41                   	inc    ecx
c0009eb6:	01 fa                	add    edx,edi
c0009eb8:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009ec0:	43                   	inc    ebx
c0009ec1:	0f b6 83 e0 74 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8b20]
c0009ec8:	84 c0                	test   al,al
c0009eca:	74 32                	je     c0009efe <kernel_main+0xf9>
c0009ecc:	80 b9 16 75 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8aea],0xdb
c0009ed3:	75 cd                	jne    c0009ea2 <kernel_main+0x9d>
c0009ed5:	0f b6 91 15 75 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8aeb]
c0009edc:	83 e2 fe             	and    edx,0xfffffffe
c0009edf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009ee5:	75 bb                	jne    c0009ea2 <kernel_main+0x9d>
c0009ee7:	47                   	inc    edi
c0009ee8:	eb b8                	jmp    c0009ea2 <kernel_main+0x9d>
c0009eea:	43                   	inc    ebx
c0009eeb:	46                   	inc    esi
c0009eec:	31 c9                	xor    ecx,ecx
c0009eee:	0f b6 83 e0 74 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8b20]
c0009ef5:	bf 0a 00 00 00       	mov    edi,0xa
c0009efa:	84 c0                	test   al,al
c0009efc:	75 ce                	jne    c0009ecc <kernel_main+0xc7>
c0009efe:	8b 15 80 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028280
c0009f04:	80 e6 08             	and    dh,0x8
c0009f07:	0f 85 bf 00 00 00    	jne    c0009fcc <kernel_main+0x1c7>
c0009f0d:	83 ec 0c             	sub    esp,0xc
c0009f10:	68 b4 41 02 c0       	push   0xc00241b4
c0009f15:	e8 7f fe ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0009f1a:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f1f:	05 ff 0f 00 00       	add    eax,0xfff
c0009f24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f2c:	e8 44 06 00 00       	call   c000a575 <Phys::physicalMemorySetup(unsigned int)>
c0009f31:	83 c4 10             	add    esp,0x10
c0009f34:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009f3b:	0f 85 a2 01 00 00    	jne    c000a0e3 <kernel_main+0x2de>
c0009f41:	e8 6a 1f 00 00       	call   c000beb0 <Virt::virtualMemorySetup()>
c0009f46:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009f4d:	0f 85 58 01 00 00    	jne    c000a0ab <kernel_main+0x2a6>
c0009f53:	83 ec 0c             	sub    esp,0xc
c0009f56:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f5a:	56                   	push   esi
c0009f5b:	e8 26 2b 00 00       	call   c000ca86 <VAS::VAS()>
c0009f60:	83 c4 10             	add    esp,0x10
c0009f63:	89 35 94 83 02 c0    	mov    DWORD PTR ds:0xc0028394,esi
c0009f69:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009f70:	0f 85 fd 00 00 00    	jne    c000a073 <kernel_main+0x26e>
c0009f76:	e8 a5 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f7b:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009f82:	0f 85 b3 00 00 00    	jne    c000a03b <kernel_main+0x236>
c0009f88:	83 ec 0c             	sub    esp,0xc
c0009f8b:	68 ec 01 00 00       	push   0x1ec
c0009f90:	e8 aa fd ff ff       	call   c0009d3f <malloc>
c0009f95:	89 c3                	mov    ebx,eax
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 21 ec ff ff       	call   c0008bc0 <Computer::Computer()>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 1d 68 82 02 c0    	mov    DWORD PTR ds:0xc0028268,ebx
c0009fa8:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0009faf:	75 53                	jne    c000a004 <kernel_main+0x1ff>
c0009fb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fb3:	6a 00                	push   0x0
c0009fb5:	6a 00                	push   0x0
c0009fb7:	6a 00                	push   0x0
c0009fb9:	53                   	push   ebx
c0009fba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009fbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc0:	e8 1b 22 00 00       	call   c000c1e0 <VAS::~VAS()>
c0009fc5:	83 c4 30             	add    esp,0x30
c0009fc8:	5b                   	pop    ebx
c0009fc9:	5e                   	pop    esi
c0009fca:	5f                   	pop    edi
c0009fcb:	c3                   	ret    
c0009fcc:	83 ec 0c             	sub    esp,0xc
c0009fcf:	68 63 41 02 c0       	push   0xc0024163
c0009fd4:	e8 c0 fd ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0009fe3:	0f 85 24 ff ff ff    	jne    c0009f0d <kernel_main+0x108>
c0009fe9:	eb 04                	jmp    c0009fef <kernel_main+0x1ea>
c0009feb:	3c 1c                	cmp    al,0x1c
c0009fed:	74 06                	je     c0009ff5 <kernel_main+0x1f0>
c0009fef:	e4 60                	in     al,0x60
c0009ff1:	3c 5a                	cmp    al,0x5a
c0009ff3:	75 f6                	jne    c0009feb <kernel_main+0x1e6>
c0009ff5:	e4 60                	in     al,0x60
c0009ff7:	3c 5a                	cmp    al,0x5a
c0009ff9:	74 fa                	je     c0009ff5 <kernel_main+0x1f0>
c0009ffb:	3c 1c                	cmp    al,0x1c
c0009ffd:	74 f6                	je     c0009ff5 <kernel_main+0x1f0>
c0009fff:	e9 09 ff ff ff       	jmp    c0009f0d <kernel_main+0x108>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	68 a2 41 02 c0       	push   0xc00241a2
c000a00c:	e8 88 fd ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a01b:	74 0c                	je     c000a029 <kernel_main+0x224>
c000a01d:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c000a023:	eb 8c                	jmp    c0009fb1 <kernel_main+0x1ac>
c000a025:	3c 1c                	cmp    al,0x1c
c000a027:	74 06                	je     c000a02f <kernel_main+0x22a>
c000a029:	e4 60                	in     al,0x60
c000a02b:	3c 5a                	cmp    al,0x5a
c000a02d:	75 f6                	jne    c000a025 <kernel_main+0x220>
c000a02f:	e4 60                	in     al,0x60
c000a031:	3c 5a                	cmp    al,0x5a
c000a033:	74 fa                	je     c000a02f <kernel_main+0x22a>
c000a035:	3c 1c                	cmp    al,0x1c
c000a037:	74 f6                	je     c000a02f <kernel_main+0x22a>
c000a039:	eb e2                	jmp    c000a01d <kernel_main+0x218>
c000a03b:	83 ec 0c             	sub    esp,0xc
c000a03e:	68 8f 41 02 c0       	push   0xc002418f
c000a043:	e8 51 fd ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a048:	83 c4 10             	add    esp,0x10
c000a04b:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a052:	0f 85 30 ff ff ff    	jne    c0009f88 <kernel_main+0x183>
c000a058:	eb 04                	jmp    c000a05e <kernel_main+0x259>
c000a05a:	3c 1c                	cmp    al,0x1c
c000a05c:	74 06                	je     c000a064 <kernel_main+0x25f>
c000a05e:	e4 60                	in     al,0x60
c000a060:	3c 5a                	cmp    al,0x5a
c000a062:	75 f6                	jne    c000a05a <kernel_main+0x255>
c000a064:	e4 60                	in     al,0x60
c000a066:	3c 5a                	cmp    al,0x5a
c000a068:	74 fa                	je     c000a064 <kernel_main+0x25f>
c000a06a:	3c 1c                	cmp    al,0x1c
c000a06c:	74 f6                	je     c000a064 <kernel_main+0x25f>
c000a06e:	e9 15 ff ff ff       	jmp    c0009f88 <kernel_main+0x183>
c000a073:	83 ec 0c             	sub    esp,0xc
c000a076:	68 85 41 02 c0       	push   0xc0024185
c000a07b:	e8 19 fd ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a08a:	0f 85 e6 fe ff ff    	jne    c0009f76 <kernel_main+0x171>
c000a090:	eb 04                	jmp    c000a096 <kernel_main+0x291>
c000a092:	3c 1c                	cmp    al,0x1c
c000a094:	74 06                	je     c000a09c <kernel_main+0x297>
c000a096:	e4 60                	in     al,0x60
c000a098:	3c 5a                	cmp    al,0x5a
c000a09a:	75 f6                	jne    c000a092 <kernel_main+0x28d>
c000a09c:	e4 60                	in     al,0x60
c000a09e:	3c 5a                	cmp    al,0x5a
c000a0a0:	74 fa                	je     c000a09c <kernel_main+0x297>
c000a0a2:	3c 1c                	cmp    al,0x1c
c000a0a4:	74 f6                	je     c000a09c <kernel_main+0x297>
c000a0a6:	e9 cb fe ff ff       	jmp    c0009f76 <kernel_main+0x171>
c000a0ab:	83 ec 0c             	sub    esp,0xc
c000a0ae:	68 7a 41 02 c0       	push   0xc002417a
c000a0b3:	e8 e1 fc ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a0b8:	83 c4 10             	add    esp,0x10
c000a0bb:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a0c2:	0f 85 8b fe ff ff    	jne    c0009f53 <kernel_main+0x14e>
c000a0c8:	eb 04                	jmp    c000a0ce <kernel_main+0x2c9>
c000a0ca:	3c 1c                	cmp    al,0x1c
c000a0cc:	74 06                	je     c000a0d4 <kernel_main+0x2cf>
c000a0ce:	e4 60                	in     al,0x60
c000a0d0:	3c 5a                	cmp    al,0x5a
c000a0d2:	75 f6                	jne    c000a0ca <kernel_main+0x2c5>
c000a0d4:	e4 60                	in     al,0x60
c000a0d6:	3c 5a                	cmp    al,0x5a
c000a0d8:	74 fa                	je     c000a0d4 <kernel_main+0x2cf>
c000a0da:	3c 1c                	cmp    al,0x1c
c000a0dc:	74 f6                	je     c000a0d4 <kernel_main+0x2cf>
c000a0de:	e9 70 fe ff ff       	jmp    c0009f53 <kernel_main+0x14e>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 6f 41 02 c0       	push   0xc002416f
c000a0eb:	e8 a9 fc ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a0f0:	83 c4 10             	add    esp,0x10
c000a0f3:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a0fa:	0f 85 41 fe ff ff    	jne    c0009f41 <kernel_main+0x13c>
c000a100:	eb 04                	jmp    c000a106 <kernel_main+0x301>
c000a102:	3c 1c                	cmp    al,0x1c
c000a104:	74 06                	je     c000a10c <kernel_main+0x307>
c000a106:	e4 60                	in     al,0x60
c000a108:	3c 5a                	cmp    al,0x5a
c000a10a:	75 f6                	jne    c000a102 <kernel_main+0x2fd>
c000a10c:	e4 60                	in     al,0x60
c000a10e:	3c 5a                	cmp    al,0x5a
c000a110:	74 fa                	je     c000a10c <kernel_main+0x307>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 f6                	je     c000a10c <kernel_main+0x307>
c000a116:	e9 26 fe ff ff       	jmp    c0009f41 <kernel_main+0x13c>
c000a11b:	83 ec 0c             	sub    esp,0xc
c000a11e:	68 51 41 02 c0       	push   0xc0024151
c000a123:	e8 71 fc ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a128:	8b 15 80 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028280
c000a12e:	83 c4 10             	add    esp,0x10
c000a131:	f6 c2 80             	test   dl,0x80
c000a134:	74 18                	je     c000a14e <kernel_main+0x349>
c000a136:	0f b6 05 e0 74 02 c0 	movzx  eax,BYTE PTR ds:0xc00274e0
c000a13d:	84 c0                	test   al,al
c000a13f:	0f 85 4d fd ff ff    	jne    c0009e92 <kernel_main+0x8d>
c000a145:	e9 ba fd ff ff       	jmp    c0009f04 <kernel_main+0xff>
c000a14a:	3c 1c                	cmp    al,0x1c
c000a14c:	74 06                	je     c000a154 <kernel_main+0x34f>
c000a14e:	e4 60                	in     al,0x60
c000a150:	3c 5a                	cmp    al,0x5a
c000a152:	75 f6                	jne    c000a14a <kernel_main+0x345>
c000a154:	e4 60                	in     al,0x60
c000a156:	3c 5a                	cmp    al,0x5a
c000a158:	74 fa                	je     c000a154 <kernel_main+0x34f>
c000a15a:	3c 1c                	cmp    al,0x1c
c000a15c:	74 f6                	je     c000a154 <kernel_main+0x34f>
c000a15e:	eb d6                	jmp    c000a136 <kernel_main+0x331>
c000a160:	83 ec 0c             	sub    esp,0xc
c000a163:	68 42 41 02 c0       	push   0xc0024142
c000a168:	e8 2c fc ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a16d:	83 c4 10             	add    esp,0x10
c000a170:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a177:	0f 85 f8 fc ff ff    	jne    c0009e75 <kernel_main+0x70>
c000a17d:	eb 04                	jmp    c000a183 <kernel_main+0x37e>
c000a17f:	3c 1c                	cmp    al,0x1c
c000a181:	74 06                	je     c000a189 <kernel_main+0x384>
c000a183:	e4 60                	in     al,0x60
c000a185:	3c 5a                	cmp    al,0x5a
c000a187:	75 f6                	jne    c000a17f <kernel_main+0x37a>
c000a189:	e4 60                	in     al,0x60
c000a18b:	3c 5a                	cmp    al,0x5a
c000a18d:	74 fa                	je     c000a189 <kernel_main+0x384>
c000a18f:	3c 1c                	cmp    al,0x1c
c000a191:	74 f6                	je     c000a189 <kernel_main+0x384>
c000a193:	e9 dd fc ff ff       	jmp    c0009e75 <kernel_main+0x70>
c000a198:	83 ec 0c             	sub    esp,0xc
c000a19b:	68 2f 41 02 c0       	push   0xc002412f
c000a1a0:	e8 f4 fb ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c000a1af:	0f 85 69 fc ff ff    	jne    c0009e1e <kernel_main+0x19>
c000a1b5:	eb 04                	jmp    c000a1bb <kernel_main+0x3b6>
c000a1b7:	3c 1c                	cmp    al,0x1c
c000a1b9:	74 06                	je     c000a1c1 <kernel_main+0x3bc>
c000a1bb:	e4 60                	in     al,0x60
c000a1bd:	3c 5a                	cmp    al,0x5a
c000a1bf:	75 f6                	jne    c000a1b7 <kernel_main+0x3b2>
c000a1c1:	e4 60                	in     al,0x60
c000a1c3:	3c 5a                	cmp    al,0x5a
c000a1c5:	74 fa                	je     c000a1c1 <kernel_main+0x3bc>
c000a1c7:	3c 1c                	cmp    al,0x1c
c000a1c9:	74 f6                	je     c000a1c1 <kernel_main+0x3bc>
c000a1cb:	e9 4e fc ff ff       	jmp    c0009e1e <kernel_main+0x19>

c000a1d0 <Phys::allocateDMA(unsigned long)>:
c000a1d0:	55                   	push   ebp
c000a1d1:	31 ed                	xor    ebp,ebp
c000a1d3:	57                   	push   edi
c000a1d4:	56                   	push   esi
c000a1d5:	53                   	push   ebx
c000a1d6:	31 db                	xor    ebx,ebx
c000a1d8:	83 ec 28             	sub    esp,0x28
c000a1db:	68 d3 41 02 c0       	push   0xc00241d3
c000a1e0:	e8 66 2e 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a1e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a1e9:	83 c4 10             	add    esp,0x10
c000a1ec:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a1f2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a1fa:	c1 ef 0c             	shr    edi,0xc
c000a1fd:	31 c0                	xor    eax,eax
c000a1ff:	eb 19                	jmp    c000a21a <Phys::allocateDMA(unsigned long)+0x4a>
c000a201:	85 c0                	test   eax,eax
c000a203:	75 06                	jne    c000a20b <Phys::allocateDMA(unsigned long)+0x3b>
c000a205:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a209:	89 dd                	mov    ebp,ebx
c000a20b:	8d 70 01             	lea    esi,[eax+0x1]
c000a20e:	39 f7                	cmp    edi,esi
c000a210:	74 3f                	je     c000a251 <Phys::allocateDMA(unsigned long)+0x81>
c000a212:	89 f0                	mov    eax,esi
c000a214:	43                   	inc    ebx
c000a215:	83 fb 0f             	cmp    ebx,0xf
c000a218:	7f 11                	jg     c000a22b <Phys::allocateDMA(unsigned long)+0x5b>
c000a21a:	80 bb 9c 82 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7d64],0x0
c000a221:	74 de                	je     c000a201 <Phys::allocateDMA(unsigned long)+0x31>
c000a223:	31 c0                	xor    eax,eax
c000a225:	43                   	inc    ebx
c000a226:	83 fb 0f             	cmp    ebx,0xf
c000a229:	7e ef                	jle    c000a21a <Phys::allocateDMA(unsigned long)+0x4a>
c000a22b:	83 ec 0c             	sub    esp,0xc
c000a22e:	68 03 42 02 c0       	push   0xc0024203
c000a233:	e8 13 2e 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a238:	c7 04 24 c0 42 02 c0 	mov    DWORD PTR [esp],0xc00242c0
c000a23f:	e8 29 ae 00 00       	call   c001506d <Krnl::panic(char const*)>
c000a244:	83 c4 10             	add    esp,0x10
c000a247:	31 c0                	xor    eax,eax
c000a249:	83 c4 1c             	add    esp,0x1c
c000a24c:	5b                   	pop    ebx
c000a24d:	5e                   	pop    esi
c000a24e:	5f                   	pop    edi
c000a24f:	5d                   	pop    ebp
c000a250:	c3                   	ret    
c000a251:	89 e9                	mov    ecx,ebp
c000a253:	c1 f9 04             	sar    ecx,0x4
c000a256:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a25a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a25e:	89 ca                	mov    edx,ecx
c000a260:	4a                   	dec    edx
c000a261:	79 03                	jns    c000a266 <Phys::allocateDMA(unsigned long)+0x96>
c000a263:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a266:	c1 fa 04             	sar    edx,0x4
c000a269:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a26d:	74 08                	je     c000a277 <Phys::allocateDMA(unsigned long)+0xa7>
c000a26f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a273:	31 c0                	xor    eax,eax
c000a275:	eb ae                	jmp    c000a225 <Phys::allocateDMA(unsigned long)+0x55>
c000a277:	85 f6                	test   esi,esi
c000a279:	74 15                	je     c000a290 <Phys::allocateDMA(unsigned long)+0xc0>
c000a27b:	8d 95 9c 82 02 c0    	lea    edx,[ebp-0x3ffd7d64]
c000a281:	8d 84 05 9d 82 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7d63]
c000a288:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a28b:	42                   	inc    edx
c000a28c:	39 d0                	cmp    eax,edx
c000a28e:	75 f8                	jne    c000a288 <Phys::allocateDMA(unsigned long)+0xb8>
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	01 3d 94 82 02 c0    	add    DWORD PTR ds:0xc0028294,edi
c000a299:	68 ec 41 02 c0       	push   0xc00241ec
c000a29e:	e8 a8 2d 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2aa:	85 c0                	test   eax,eax
c000a2ac:	74 23                	je     c000a2d1 <Phys::allocateDMA(unsigned long)+0x101>
c000a2ae:	83 ec 0c             	sub    esp,0xc
c000a2b1:	68 2c 71 02 c0       	push   0xc002712c
c000a2b6:	e8 90 2d 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a2bb:	c7 04 24 c0 42 02 c0 	mov    DWORD PTR [esp],0xc00242c0
c000a2c2:	e8 a6 ad 00 00       	call   c001506d <Krnl::panic(char const*)>
c000a2c7:	83 c4 10             	add    esp,0x10
c000a2ca:	89 f0                	mov    eax,esi
c000a2cc:	e9 43 ff ff ff       	jmp    c000a214 <Phys::allocateDMA(unsigned long)+0x44>
c000a2d1:	c1 e5 0c             	shl    ebp,0xc
c000a2d4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2da:	e9 6a ff ff ff       	jmp    c000a249 <Phys::allocateDMA(unsigned long)+0x79>

c000a2df <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2df:	83 ec 18             	sub    esp,0x18
c000a2e2:	68 07 42 02 c0       	push   0xc0024207
c000a2e7:	e8 5f 2d 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a2ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2f0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a2fa:	c1 ea 0c             	shr    edx,0xc
c000a2fd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a302:	29 15 94 82 02 c0    	sub    DWORD PTR ds:0xc0028294,edx
c000a308:	c1 e8 0c             	shr    eax,0xc
c000a30b:	83 c4 10             	add    esp,0x10
c000a30e:	85 d2                	test   edx,edx
c000a310:	74 0f                	je     c000a321 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a312:	05 9c 82 02 c0       	add    eax,0xc002829c
c000a317:	01 c2                	add    edx,eax
c000a319:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a31c:	40                   	inc    eax
c000a31d:	39 d0                	cmp    eax,edx
c000a31f:	75 f8                	jne    c000a319 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a321:	83 c4 0c             	add    esp,0xc
c000a324:	c3                   	ret    

c000a325 <Phys::setPageState(unsigned long, bool)>:
c000a325:	56                   	push   esi
c000a326:	ba 01 00 00 00       	mov    edx,0x1
c000a32b:	53                   	push   ebx
c000a32c:	8b 35 24 76 02 c0    	mov    esi,DWORD PTR ds:0xc0027624
c000a332:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a336:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a33a:	89 c8                	mov    eax,ecx
c000a33c:	83 e1 07             	and    ecx,0x7
c000a33f:	c1 e8 03             	shr    eax,0x3
c000a342:	d3 e3                	shl    ebx,cl
c000a344:	01 c6                	add    esi,eax
c000a346:	d3 e2                	shl    edx,cl
c000a348:	f7 d2                	not    edx
c000a34a:	20 16                	and    BYTE PTR [esi],dl
c000a34c:	03 05 24 76 02 c0    	add    eax,DWORD PTR ds:0xc0027624
c000a352:	08 18                	or     BYTE PTR [eax],bl
c000a354:	5b                   	pop    ebx
c000a355:	5e                   	pop    esi
c000a356:	c3                   	ret    

c000a357 <Phys::getPageState(unsigned long)>:
c000a357:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a35b:	8b 15 24 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027624
c000a361:	89 c8                	mov    eax,ecx
c000a363:	83 e1 07             	and    ecx,0x7
c000a366:	c1 e8 03             	shr    eax,0x3
c000a369:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a36d:	d3 f8                	sar    eax,cl
c000a36f:	83 e0 01             	and    eax,0x1
c000a372:	c3                   	ret    

c000a373 <Phys::freePage(unsigned long)>:
c000a373:	53                   	push   ebx
c000a374:	83 ec 10             	sub    esp,0x10
c000a377:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a37b:	53                   	push   ebx
c000a37c:	68 1d 42 02 c0       	push   0xc002421d
c000a381:	e8 c5 2c 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a386:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a38c:	83 c4 10             	add    esp,0x10
c000a38f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a394:	76 3d                	jbe    c000a3d3 <Phys::freePage(unsigned long)+0x60>
c000a396:	83 ec 0c             	sub    esp,0xc
c000a399:	c1 eb 0c             	shr    ebx,0xc
c000a39c:	53                   	push   ebx
c000a39d:	e8 b5 ff ff ff       	call   c000a357 <Phys::getPageState(unsigned long)>
c000a3a2:	83 c4 10             	add    esp,0x10
c000a3a5:	84 c0                	test   al,al
c000a3a7:	74 19                	je     c000a3c2 <Phys::freePage(unsigned long)+0x4f>
c000a3a9:	83 ec 08             	sub    esp,0x8
c000a3ac:	ff 0d 94 82 02 c0    	dec    DWORD PTR ds:0xc0028294
c000a3b2:	6a 00                	push   0x0
c000a3b4:	53                   	push   ebx
c000a3b5:	e8 6b ff ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	83 c4 08             	add    esp,0x8
c000a3c0:	5b                   	pop    ebx
c000a3c1:	c3                   	ret    
c000a3c2:	c7 44 24 10 47 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024247
c000a3ca:	83 c4 08             	add    esp,0x8
c000a3cd:	5b                   	pop    ebx
c000a3ce:	e9 9a ac 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c000a3d3:	83 ec 08             	sub    esp,0x8
c000a3d6:	53                   	push   ebx
c000a3d7:	68 30 42 02 c0       	push   0xc0024230
c000a3dc:	e8 6a 2c 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a3e1:	58                   	pop    eax
c000a3e2:	5a                   	pop    edx
c000a3e3:	68 00 10 00 00       	push   0x1000
c000a3e8:	53                   	push   ebx
c000a3e9:	e8 f1 fe ff ff       	call   c000a2df <Phys::freeDMA(unsigned long, unsigned long)>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	83 c4 08             	add    esp,0x8
c000a3f4:	5b                   	pop    ebx
c000a3f5:	c3                   	ret    

c000a3f6 <Phys::allocatePage()>:
c000a3f6:	56                   	push   esi
c000a3f7:	53                   	push   ebx
c000a3f8:	83 ec 14             	sub    esp,0x14
c000a3fb:	8b 35 88 82 02 c0    	mov    esi,DWORD PTR ds:0xc0028288
c000a401:	89 f3                	mov    ebx,esi
c000a403:	eb 0a                	jmp    c000a40f <Phys::allocatePage()+0x19>
c000a405:	89 1d 88 82 02 c0    	mov    DWORD PTR ds:0xc0028288,ebx
c000a40b:	39 de                	cmp    esi,ebx
c000a40d:	74 24                	je     c000a433 <Phys::allocatePage()+0x3d>
c000a40f:	53                   	push   ebx
c000a410:	e8 42 ff ff ff       	call   c000a357 <Phys::getPageState(unsigned long)>
c000a415:	5a                   	pop    edx
c000a416:	84 c0                	test   al,al
c000a418:	74 69                	je     c000a483 <Phys::allocatePage()+0x8d>
c000a41a:	43                   	inc    ebx
c000a41b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a421:	75 e2                	jne    c000a405 <Phys::allocatePage()+0xf>
c000a423:	31 db                	xor    ebx,ebx
c000a425:	c7 05 88 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028288,0x0
c000a42f:	39 de                	cmp    esi,ebx
c000a431:	75 dc                	jne    c000a40f <Phys::allocatePage()+0x19>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	80 35 ac 82 02 c0 01 	xor    BYTE PTR ds:0xc00282ac,0x1
c000a43d:	68 e8 42 02 c0       	push   0xc00242e8
c000a442:	e8 04 2c 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a447:	58                   	pop    eax
c000a448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a44d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a450:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a456:	e8 7f 28 00 00       	call   c000ccda <VAS::scanForEviction()>
c000a45b:	83 c4 10             	add    esp,0x10
c000a45e:	85 c0                	test   eax,eax
c000a460:	75 62                	jne    c000a4c4 <Phys::allocatePage()+0xce>
c000a462:	83 ec 0c             	sub    esp,0xc
c000a465:	68 0c 43 02 c0       	push   0xc002430c
c000a46a:	e8 fe ab 00 00       	call   c001506d <Krnl::panic(char const*)>
c000a46f:	83 c4 10             	add    esp,0x10
c000a472:	8b 1d 88 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028288
c000a478:	53                   	push   ebx
c000a479:	e8 d9 fe ff ff       	call   c000a357 <Phys::getPageState(unsigned long)>
c000a47e:	5a                   	pop    edx
c000a47f:	84 c0                	test   al,al
c000a481:	75 97                	jne    c000a41a <Phys::allocatePage()+0x24>
c000a483:	6a 01                	push   0x1
c000a485:	53                   	push   ebx
c000a486:	e8 9a fe ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a48b:	5a                   	pop    edx
c000a48c:	a1 94 82 02 c0       	mov    eax,ds:0xc0028294
c000a491:	59                   	pop    ecx
c000a492:	40                   	inc    eax
c000a493:	8b 15 88 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028288
c000a499:	a3 94 82 02 c0       	mov    ds:0xc0028294,eax
c000a49e:	c1 e2 0c             	shl    edx,0xc
c000a4a1:	52                   	push   edx
c000a4a2:	ff 35 98 82 02 c0    	push   DWORD PTR ds:0xc0028298
c000a4a8:	50                   	push   eax
c000a4a9:	68 5d 42 02 c0       	push   0xc002425d
c000a4ae:	e8 98 2b 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a4b3:	a1 88 82 02 c0       	mov    eax,ds:0xc0028288
c000a4b8:	83 c4 10             	add    esp,0x10
c000a4bb:	c1 e0 0c             	shl    eax,0xc
c000a4be:	83 c4 14             	add    esp,0x14
c000a4c1:	5b                   	pop    ebx
c000a4c2:	5e                   	pop    esi
c000a4c3:	c3                   	ret    
c000a4c4:	83 ec 08             	sub    esp,0x8
c000a4c7:	89 c2                	mov    edx,eax
c000a4c9:	6a 01                	push   0x1
c000a4cb:	c1 ea 0c             	shr    edx,0xc
c000a4ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4d2:	52                   	push   edx
c000a4d3:	e8 4d fe ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a4d8:	83 c4 10             	add    esp,0x10
c000a4db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4df:	eb dd                	jmp    c000a4be <Phys::allocatePage()+0xc8>

c000a4e1 <Phys::allocateContiguousPages(int)>:
c000a4e1:	57                   	push   edi
c000a4e2:	56                   	push   esi
c000a4e3:	53                   	push   ebx
c000a4e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a4e8:	fa                   	cli    
c000a4e9:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c000a4ef:	31 db                	xor    ebx,ebx
c000a4f1:	85 db                	test   ebx,ebx
c000a4f3:	75 11                	jne    c000a506 <Phys::allocateContiguousPages(int)+0x25>
c000a4f5:	e8 fc fe ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000a4fa:	83 fe 01             	cmp    esi,0x1
c000a4fd:	89 c7                	mov    edi,eax
c000a4ff:	74 21                	je     c000a522 <Phys::allocateContiguousPages(int)+0x41>
c000a501:	bb 01 00 00 00       	mov    ebx,0x1
c000a506:	e8 eb fe ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000a50b:	89 da                	mov    edx,ebx
c000a50d:	c1 e2 0c             	shl    edx,0xc
c000a510:	01 fa                	add    edx,edi
c000a512:	39 c2                	cmp    edx,eax
c000a514:	74 20                	je     c000a536 <Phys::allocateContiguousPages(int)+0x55>
c000a516:	bb 01 00 00 00       	mov    ebx,0x1
c000a51b:	89 c7                	mov    edi,eax
c000a51d:	83 fe 01             	cmp    esi,0x1
c000a520:	75 e4                	jne    c000a506 <Phys::allocateContiguousPages(int)+0x25>
c000a522:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000a527:	48                   	dec    eax
c000a528:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000a52d:	75 01                	jne    c000a530 <Phys::allocateContiguousPages(int)+0x4f>
c000a52f:	fb                   	sti    
c000a530:	89 f8                	mov    eax,edi
c000a532:	5b                   	pop    ebx
c000a533:	5e                   	pop    esi
c000a534:	5f                   	pop    edi
c000a535:	c3                   	ret    
c000a536:	43                   	inc    ebx
c000a537:	39 f3                	cmp    ebx,esi
c000a539:	75 b6                	jne    c000a4f1 <Phys::allocateContiguousPages(int)+0x10>
c000a53b:	eb e5                	jmp    c000a522 <Phys::allocateContiguousPages(int)+0x41>

c000a53d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a53d:	56                   	push   esi
c000a53e:	53                   	push   ebx
c000a53f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a543:	39 1d 8c 82 02 c0    	cmp    DWORD PTR ds:0xc002828c,ebx
c000a549:	73 06                	jae    c000a551 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a54b:	89 1d 8c 82 02 c0    	mov    DWORD PTR ds:0xc002828c,ebx
c000a551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a555:	c1 eb 0c             	shr    ebx,0xc
c000a558:	c1 e8 0c             	shr    eax,0xc
c000a55b:	39 d8                	cmp    eax,ebx
c000a55d:	73 13                	jae    c000a572 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a55f:	6a 00                	push   0x0
c000a561:	8d 70 01             	lea    esi,[eax+0x1]
c000a564:	50                   	push   eax
c000a565:	e8 bb fd ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a56a:	5a                   	pop    edx
c000a56b:	89 f0                	mov    eax,esi
c000a56d:	59                   	pop    ecx
c000a56e:	39 f3                	cmp    ebx,esi
c000a570:	75 ed                	jne    c000a55f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a572:	5b                   	pop    ebx
c000a573:	5e                   	pop    esi
c000a574:	c3                   	ret    

c000a575 <Phys::physicalMemorySetup(unsigned int)>:
c000a575:	55                   	push   ebp
c000a576:	57                   	push   edi
c000a577:	56                   	push   esi
c000a578:	53                   	push   ebx
c000a579:	31 db                	xor    ebx,ebx
c000a57b:	83 ec 40             	sub    esp,0x40
c000a57e:	6a 10                	push   0x10
c000a580:	6a 00                	push   0x0
c000a582:	68 9c 82 02 c0       	push   0xc002829c
c000a587:	e8 f8 60 ff ff       	call   c0000684 <memset>
c000a58c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a590:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a595:	05 00 10 00 00       	add    eax,0x1000
c000a59a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a59e:	5a                   	pop    edx
c000a59f:	59                   	pop    ecx
c000a5a0:	50                   	push   eax
c000a5a1:	68 7b 42 02 c0       	push   0xc002427b
c000a5a6:	e8 a0 2a 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a5ab:	83 c4 10             	add    esp,0x10
c000a5ae:	83 ec 08             	sub    esp,0x8
c000a5b1:	6a 01                	push   0x1
c000a5b3:	53                   	push   ebx
c000a5b4:	43                   	inc    ebx
c000a5b5:	e8 6b fd ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a5ba:	83 c4 10             	add    esp,0x10
c000a5bd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5c3:	75 e9                	jne    c000a5ae <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5c5:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a5cc:	66 85 c0             	test   ax,ax
c000a5cf:	0f 84 8e 01 00 00    	je     c000a763 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a5d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5e5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a5ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5ee:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a5f6:	eb 15                	jmp    c000a60d <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a5f8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a5fc:	83 c3 18             	add    ebx,0x18
c000a5ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a603:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a607:	0f 84 66 01 00 00    	je     c000a773 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a60d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a610:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a613:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a616:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a61a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a61e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a620:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a623:	01 f0                	add    eax,esi
c000a625:	55                   	push   ebp
c000a626:	11 fa                	adc    edx,edi
c000a628:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a62c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a630:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a634:	56                   	push   esi
c000a635:	68 3c 43 02 c0       	push   0xc002433c
c000a63a:	e8 0c 2a 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a63f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a643:	83 c4 10             	add    esp,0x10
c000a646:	09 f8                	or     eax,edi
c000a648:	0f 85 25 01 00 00    	jne    c000a773 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a64e:	4d                   	dec    ebp
c000a64f:	75 a7                	jne    c000a5f8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a651:	ba 00 00 08 00       	mov    edx,0x80000
c000a656:	89 c1                	mov    ecx,eax
c000a658:	39 f2                	cmp    edx,esi
c000a65a:	19 f9                	sbb    ecx,edi
c000a65c:	0f 82 a7 00 00 00    	jb     c000a709 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a662:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a666:	89 c1                	mov    ecx,eax
c000a668:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a66c:	0f 83 97 00 00 00    	jae    c000a709 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a672:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a677:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a67b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a67f:	39 fa                	cmp    edx,edi
c000a681:	19 e8                	sbb    eax,ebp
c000a683:	0f 82 9a 01 00 00    	jb     c000a823 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a689:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a68d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a691:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a697:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a69c:	83 d5 ff             	adc    ebp,0xffffffff
c000a69f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6a3:	31 c0                	xor    eax,eax
c000a6a5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6a9:	39 fa                	cmp    edx,edi
c000a6ab:	89 c1                	mov    ecx,eax
c000a6ad:	19 e9                	sbb    ecx,ebp
c000a6af:	0f 83 43 ff ff ff    	jae    c000a5f8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6b5:	be 00 00 08 00       	mov    esi,0x80000
c000a6ba:	51                   	push   ecx
c000a6bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6bf:	57                   	push   edi
c000a6c0:	56                   	push   esi
c000a6c1:	68 60 43 02 c0       	push   0xc0024360
c000a6c6:	e8 80 29 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a6cb:	5d                   	pop    ebp
c000a6cc:	58                   	pop    eax
c000a6cd:	57                   	push   edi
c000a6ce:	56                   	push   esi
c000a6cf:	e8 69 fe ff ff       	call   c000a53d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a6d4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6dc:	83 c4 0c             	add    esp,0xc
c000a6df:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6e3:	03 05 98 82 02 c0    	add    eax,DWORD PTR ds:0xc0028298
c000a6e9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a6f0:	a3 98 82 02 c0       	mov    ds:0xc0028298,eax
c000a6f5:	52                   	push   edx
c000a6f6:	50                   	push   eax
c000a6f7:	68 a1 42 02 c0       	push   0xc00242a1
c000a6fc:	e8 4a 29 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000a701:	83 c4 10             	add    esp,0x10
c000a704:	e9 ef fe ff ff       	jmp    c000a5f8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a709:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a70d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a711:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a715:	39 ea                	cmp    edx,ebp
c000a717:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a71b:	0f 82 d7 fe ff ff    	jb     c000a5f8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a721:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a726:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a72a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a72e:	0f 83 c4 fe ff ff    	jae    c000a5f8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a734:	39 ee                	cmp    esi,ebp
c000a736:	89 f8                	mov    eax,edi
c000a738:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a73c:	0f 83 78 ff ff ff    	jae    c000a6ba <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a74a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a74e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a752:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a756:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a75a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a75e:	e9 57 ff ff ff       	jmp    c000a6ba <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a763:	83 ec 0c             	sub    esp,0xc
c000a766:	68 93 42 02 c0       	push   0xc0024293
c000a76b:	e8 fd a8 00 00       	call   c001506d <Krnl::panic(char const*)>
c000a770:	83 c4 10             	add    esp,0x10
c000a773:	83 ec 08             	sub    esp,0x8
c000a776:	bb 60 00 00 00       	mov    ebx,0x60
c000a77b:	6a 00                	push   0x0
c000a77d:	6a 06                	push   0x6
c000a77f:	e8 a1 fb ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a784:	58                   	pop    eax
c000a785:	5a                   	pop    edx
c000a786:	6a 00                	push   0x0
c000a788:	6a 07                	push   0x7
c000a78a:	e8 96 fb ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a78f:	83 05 98 82 02 c0 02 	add    DWORD PTR ds:0xc0028298,0x2
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 ec 08             	sub    esp,0x8
c000a79c:	6a 00                	push   0x0
c000a79e:	53                   	push   ebx
c000a79f:	43                   	inc    ebx
c000a7a0:	e8 80 fb ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7ae:	75 e9                	jne    c000a799 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a7b0:	a1 98 82 02 c0       	mov    eax,ds:0xc0028298
c000a7b5:	bb 40 01 00 00       	mov    ebx,0x140
c000a7ba:	83 c0 20             	add    eax,0x20
c000a7bd:	a3 98 82 02 c0       	mov    ds:0xc0028298,eax
c000a7c2:	eb 22                	jmp    c000a7e6 <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a7c4:	83 ec 08             	sub    esp,0x8
c000a7c7:	6a 00                	push   0x0
c000a7c9:	53                   	push   ebx
c000a7ca:	43                   	inc    ebx
c000a7cb:	e8 55 fb ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a7d0:	a1 98 82 02 c0       	mov    eax,ds:0xc0028298
c000a7d5:	83 c4 10             	add    esp,0x10
c000a7d8:	40                   	inc    eax
c000a7d9:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a7df:	a3 98 82 02 c0       	mov    ds:0xc0028298,eax
c000a7e4:	74 07                	je     c000a7ed <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a7e6:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a7eb:	7e d7                	jle    c000a7c4 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a7ed:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a7f2:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a7f7:	7f 22                	jg     c000a81b <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a7f9:	83 ec 08             	sub    esp,0x8
c000a7fc:	6a 00                	push   0x0
c000a7fe:	53                   	push   ebx
c000a7ff:	43                   	inc    ebx
c000a800:	e8 20 fb ff ff       	call   c000a325 <Phys::setPageState(unsigned long, bool)>
c000a805:	a1 98 82 02 c0       	mov    eax,ds:0xc0028298
c000a80a:	83 c4 10             	add    esp,0x10
c000a80d:	40                   	inc    eax
c000a80e:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a814:	a3 98 82 02 c0       	mov    ds:0xc0028298,eax
c000a819:	75 d7                	jne    c000a7f2 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a81b:	83 c4 3c             	add    esp,0x3c
c000a81e:	5b                   	pop    ebx
c000a81f:	5e                   	pop    esi
c000a820:	5f                   	pop    edi
c000a821:	5d                   	pop    ebp
c000a822:	c3                   	ret    
c000a823:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a82b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a833:	e9 51 fe ff ff       	jmp    c000a689 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a838 <Pipe::isAtty()>:
c000a838:	31 c0                	xor    eax,eax
c000a83a:	c3                   	ret    
c000a83b:	90                   	nop

c000a83c <Pipe::~Pipe()>:
c000a83c:	83 ec 0c             	sub    esp,0xc
c000a83f:	ba cc 43 02 c0       	mov    edx,0xc00243cc
c000a844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a848:	89 10                	mov    DWORD PTR [eax],edx
c000a84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a84e:	83 ec 0c             	sub    esp,0xc
c000a851:	50                   	push   eax
c000a852:	e8 39 12 00 00       	call   c000ba90 <UnixFile::~UnixFile()>
c000a857:	83 c4 10             	add    esp,0x10
c000a85a:	90                   	nop
c000a85b:	83 c4 0c             	add    esp,0xc
c000a85e:	c3                   	ret    
c000a85f:	90                   	nop

c000a860 <Pipe::~Pipe()>:
c000a860:	83 ec 0c             	sub    esp,0xc
c000a863:	83 ec 0c             	sub    esp,0xc
c000a866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a86a:	e8 cd ff ff ff       	call   c000a83c <Pipe::~Pipe()>
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	83 ec 08             	sub    esp,0x8
c000a875:	6a 20                	push   0x20
c000a877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a87b:	e8 ea 26 00 00       	call   c000cf6a <operator delete(void*, unsigned long)>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	83 c4 0c             	add    esp,0xc
c000a886:	c3                   	ret    
c000a887:	90                   	nop

c000a888 <Pipe::read(unsigned long long, void*, int*)>:
c000a888:	55                   	push   ebp
c000a889:	57                   	push   edi
c000a88a:	56                   	push   esi
c000a88b:	53                   	push   ebx
c000a88c:	83 ec 1c             	sub    esp,0x1c
c000a88f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a897:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a89b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a89e:	89 c8                	mov    eax,ecx
c000a8a0:	99                   	cdq    
c000a8a1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8a5:	74 24                	je     c000a8cb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8a7:	39 f9                	cmp    ecx,edi
c000a8a9:	89 d1                	mov    ecx,edx
c000a8ab:	19 f1                	sbb    ecx,esi
c000a8ad:	73 1c                	jae    c000a8cb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8af:	fa                   	cli    
c000a8b0:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c000a8b6:	e8 1d de 00 00       	call   c00186d8 <schedule()>
c000a8bb:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000a8c0:	48                   	dec    eax
c000a8c1:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000a8c6:	75 d3                	jne    c000a89b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8c8:	fb                   	sti    
c000a8c9:	eb d0                	jmp    c000a89b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8cb:	39 f8                	cmp    eax,edi
c000a8cd:	89 d1                	mov    ecx,edx
c000a8cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8d2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a8d6:	19 f1                	sbb    ecx,esi
c000a8d8:	73 07                	jae    c000a8e1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a8e4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a8e7:	29 f7                	sub    edi,esi
c000a8e9:	89 f8                	mov    eax,edi
c000a8eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a8ef:	99                   	cdq    
c000a8f0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a8f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8f7:	19 d0                	sbb    eax,edx
c000a8f9:	73 07                	jae    c000a902 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a8fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a902:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a905:	89 ea                	mov    edx,ebp
c000a907:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a90b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a910:	74 0d                	je     c000a91f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a912:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a915:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a919:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a91d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a91f:	85 d2                	test   edx,edx
c000a921:	74 11                	je     c000a934 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a923:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a927:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a92a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a92e:	89 d1                	mov    ecx,edx
c000a930:	89 c7                	mov    edi,eax
c000a932:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a934:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a937:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a93a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a93d:	99                   	cdq    
c000a93e:	89 f7                	mov    edi,esi
c000a940:	03 04 24             	add    eax,DWORD PTR [esp]
c000a943:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a947:	c1 ff 1f             	sar    edi,0x1f
c000a94a:	57                   	push   edi
c000a94b:	56                   	push   esi
c000a94c:	52                   	push   edx
c000a94d:	50                   	push   eax
c000a94e:	e8 8d 7f 01 00       	call   c00228e0 <__umoddi3>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a959:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a95e:	75 10                	jne    c000a970 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a960:	83 ec 0c             	sub    esp,0xc
c000a963:	68 89 43 02 c0       	push   0xc0024389
c000a968:	e8 00 a7 00 00       	call   c001506d <Krnl::panic(char const*)>
c000a96d:	83 c4 10             	add    esp,0x10
c000a970:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a974:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a977:	89 10                	mov    DWORD PTR [eax],edx
c000a979:	83 c4 1c             	add    esp,0x1c
c000a97c:	31 c0                	xor    eax,eax
c000a97e:	5b                   	pop    ebx
c000a97f:	5e                   	pop    esi
c000a980:	5f                   	pop    edi
c000a981:	5d                   	pop    ebp
c000a982:	c3                   	ret    
c000a983:	90                   	nop

c000a984 <Pipe::write(unsigned long long, void*, int*)>:
c000a984:	55                   	push   ebp
c000a985:	57                   	push   edi
c000a986:	56                   	push   esi
c000a987:	53                   	push   ebx
c000a988:	83 ec 1c             	sub    esp,0x1c
c000a98b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a98f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a993:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a996:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a99a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a99d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a1:	89 d8                	mov    eax,ebx
c000a9a3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9a6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9aa:	89 d6                	mov    esi,edx
c000a9ac:	89 d7                	mov    edi,edx
c000a9ae:	c1 ff 1f             	sar    edi,0x1f
c000a9b1:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9b4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9b8:	c1 f8 1f             	sar    eax,0x1f
c000a9bb:	39 f3                	cmp    ebx,esi
c000a9bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9c5:	19 f8                	sbb    eax,edi
c000a9c7:	b8 01 00 00 00       	mov    eax,0x1
c000a9cc:	72 6e                	jb     c000aa3c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a9ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a9d1:	01 d0                	add    eax,edx
c000a9d3:	99                   	cdq    
c000a9d4:	f7 fb                	idiv   ebx
c000a9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9da:	29 d3                	sub    ebx,edx
c000a9dc:	89 d7                	mov    edi,edx
c000a9de:	89 de                	mov    esi,ebx
c000a9e0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9e3:	c1 fb 1f             	sar    ebx,0x1f
c000a9e6:	39 f2                	cmp    edx,esi
c000a9e8:	19 d8                	sbb    eax,ebx
c000a9ea:	b8 00 00 00 00       	mov    eax,0x0
c000a9ef:	72 04                	jb     c000a9f5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a9f1:	89 d0                	mov    eax,edx
c000a9f3:	29 f0                	sub    eax,esi
c000a9f5:	89 d3                	mov    ebx,edx
c000a9f7:	29 c3                	sub    ebx,eax
c000a9f9:	74 0b                	je     c000aa06 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a9fb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a9fe:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa02:	89 d9                	mov    ecx,ebx
c000aa04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa06:	85 c0                	test   eax,eax
c000aa08:	74 0d                	je     c000aa17 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa0a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa0e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa11:	89 de                	mov    esi,ebx
c000aa13:	89 c1                	mov    ecx,eax
c000aa15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa17:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa1a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa1f:	75 10                	jne    c000aa31 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa21:	83 ec 0c             	sub    esp,0xc
c000aa24:	68 a5 43 02 c0       	push   0xc00243a5
c000aa29:	e8 3f a6 00 00       	call   c001506d <Krnl::panic(char const*)>
c000aa2e:	83 c4 10             	add    esp,0x10
c000aa31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa35:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa38:	89 08                	mov    DWORD PTR [eax],ecx
c000aa3a:	31 c0                	xor    eax,eax
c000aa3c:	83 c4 1c             	add    esp,0x1c
c000aa3f:	5b                   	pop    ebx
c000aa40:	5e                   	pop    esi
c000aa41:	5f                   	pop    edi
c000aa42:	5d                   	pop    ebp
c000aa43:	c3                   	ret    

c000aa44 <Pipe::Pipe(int)>:
c000aa44:	83 ec 0c             	sub    esp,0xc
c000aa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa4b:	83 ec 08             	sub    esp,0x8
c000aa4e:	6a 00                	push   0x0
c000aa50:	50                   	push   eax
c000aa51:	e8 58 0e 00 00       	call   c000b8ae <UnixFile::UnixFile(int)>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	ba cc 43 02 c0       	mov    edx,0xc00243cc
c000aa5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa62:	89 10                	mov    DWORD PTR [eax],edx
c000aa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa73:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aa85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa89:	83 ec 0c             	sub    esp,0xc
c000aa8c:	50                   	push   eax
c000aa8d:	e8 ad f2 ff ff       	call   c0009d3f <malloc>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 c2                	mov    edx,eax
c000aa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aaa6:	90                   	nop
c000aaa7:	83 c4 0c             	add    esp,0xc
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <VgaText::isAtty()>:
c000aaac:	b0 01                	mov    al,0x1
c000aaae:	c3                   	ret    
c000aaaf:	90                   	nop

c000aab0 <VgaText::~VgaText()>:
c000aab0:	83 ec 0c             	sub    esp,0xc
c000aab3:	ba 54 44 02 c0       	mov    edx,0xc0024454
c000aab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabc:	89 10                	mov    DWORD PTR [eax],edx
c000aabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac2:	83 ec 0c             	sub    esp,0xc
c000aac5:	50                   	push   eax
c000aac6:	e8 c5 0f 00 00       	call   c000ba90 <UnixFile::~UnixFile()>
c000aacb:	83 c4 10             	add    esp,0x10
c000aace:	90                   	nop
c000aacf:	83 c4 0c             	add    esp,0xc
c000aad2:	c3                   	ret    
c000aad3:	90                   	nop

c000aad4 <VgaText::~VgaText()>:
c000aad4:	83 ec 0c             	sub    esp,0xc
c000aad7:	83 ec 0c             	sub    esp,0xc
c000aada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aade:	e8 cd ff ff ff       	call   c000aab0 <VgaText::~VgaText()>
c000aae3:	83 c4 10             	add    esp,0x10
c000aae6:	83 ec 08             	sub    esp,0x8
c000aae9:	68 b4 01 00 00       	push   0x1b4
c000aaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf2:	e8 73 24 00 00       	call   c000cf6a <operator delete(void*, unsigned long)>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	83 c4 0c             	add    esp,0xc
c000aafd:	c3                   	ret    

c000aafe <VgaText::read(unsigned long long, void*, int*)>:
c000aafe:	83 ec 10             	sub    esp,0x10
c000ab01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab0d:	e8 2f 59 00 00       	call   c0010441 <readKeyboard(VgaText*, char*, unsigned long)>
c000ab12:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab16:	89 02                	mov    DWORD PTR [edx],eax
c000ab18:	31 c0                	xor    eax,eax
c000ab1a:	83 c4 1c             	add    esp,0x1c
c000ab1d:	c3                   	ret    

c000ab1e <setTerminalScrollLock(bool)>:
c000ab1e:	c3                   	ret    

c000ab1f <addToTerminalCycle(VgaText*)>:
c000ab1f:	8b 15 e0 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282e0
c000ab25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab29:	85 d2                	test   edx,edx
c000ab2b:	75 09                	jne    c000ab36 <addToTerminalCycle(VgaText*)+0x17>
c000ab2d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab30:	a3 e0 82 02 c0       	mov    ds:0xc00282e0,eax
c000ab35:	c3                   	ret    
c000ab36:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab39:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab3c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab3f:	c3                   	ret    

c000ab40 <installVgaTextImplementation()>:
c000ab40:	83 ec 10             	sub    esp,0x10
c000ab43:	6a 20                	push   0x20
c000ab45:	6a 00                	push   0x0
c000ab47:	68 c0 82 02 c0       	push   0xc00282c0
c000ab4c:	e8 33 5b ff ff       	call   c0000684 <memset>
c000ab51:	83 c4 1c             	add    esp,0x1c
c000ab54:	c3                   	ret    

c000ab55 <scrollTerminalScrollLock(int)>:
c000ab55:	c3                   	ret    

c000ab56 <VgaText::updateTitle()>:
c000ab56:	53                   	push   ebx
c000ab57:	31 c0                	xor    eax,eax
c000ab59:	83 ec 58             	sub    esp,0x58
c000ab5c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab60:	89 e1                	mov    ecx,esp
c000ab62:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab66:	40                   	inc    eax
c000ab67:	83 f8 50             	cmp    eax,0x50
c000ab6a:	75 f6                	jne    c000ab62 <VgaText::updateTitle()+0xc>
c000ab6c:	31 c0                	xor    eax,eax
c000ab6e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab75:	84 db                	test   bl,bl
c000ab77:	74 06                	je     c000ab7f <VgaText::updateTitle()+0x29>
c000ab79:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ab7c:	40                   	inc    eax
c000ab7d:	eb ef                	jmp    c000ab6e <VgaText::updateTitle()+0x18>
c000ab7f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ab82:	85 c0                	test   eax,eax
c000ab84:	74 09                	je     c000ab8f <VgaText::updateTitle()+0x39>
c000ab86:	53                   	push   ebx
c000ab87:	53                   	push   ebx
c000ab88:	51                   	push   ecx
c000ab89:	52                   	push   edx
c000ab8a:	ff d0                	call   eax
c000ab8c:	83 c4 10             	add    esp,0x10
c000ab8f:	83 c4 58             	add    esp,0x58
c000ab92:	5b                   	pop    ebx
c000ab93:	c3                   	ret    

c000ab94 <VgaText::load()>:
c000ab94:	53                   	push   ebx
c000ab95:	31 c0                	xor    eax,eax
c000ab97:	83 ec 58             	sub    esp,0x58
c000ab9a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab9e:	89 e2                	mov    edx,esp
c000aba0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000aba4:	40                   	inc    eax
c000aba5:	83 f8 50             	cmp    eax,0x50
c000aba8:	75 f6                	jne    c000aba0 <VgaText::load()+0xc>
c000abaa:	31 c0                	xor    eax,eax
c000abac:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abb3:	84 c9                	test   cl,cl
c000abb5:	74 06                	je     c000abbd <VgaText::load()+0x29>
c000abb7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abba:	40                   	inc    eax
c000abbb:	eb ef                	jmp    c000abac <VgaText::load()+0x18>
c000abbd:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000abc0:	85 c0                	test   eax,eax
c000abc2:	74 09                	je     c000abcd <VgaText::load()+0x39>
c000abc4:	51                   	push   ecx
c000abc5:	51                   	push   ecx
c000abc6:	52                   	push   edx
c000abc7:	53                   	push   ebx
c000abc8:	ff d0                	call   eax
c000abca:	83 c4 10             	add    esp,0x10
c000abcd:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000abd0:	85 c0                	test   eax,eax
c000abd2:	74 09                	je     c000abdd <VgaText::load()+0x49>
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	53                   	push   ebx
c000abd8:	ff d0                	call   eax
c000abda:	83 c4 10             	add    esp,0x10
c000abdd:	83 c4 58             	add    esp,0x58
c000abe0:	5b                   	pop    ebx
c000abe1:	c3                   	ret    

c000abe2 <VgaText::updateCursor()>:
c000abe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe6:	39 05 e4 82 02 c0    	cmp    DWORD PTR ds:0xc00282e4,eax
c000abec:	75 09                	jne    c000abf7 <VgaText::updateCursor()+0x15>
c000abee:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000abf1:	85 c0                	test   eax,eax
c000abf3:	74 02                	je     c000abf7 <VgaText::updateCursor()+0x15>
c000abf5:	ff e0                	jmp    eax
c000abf7:	c3                   	ret    

c000abf8 <VgaText::doANSI_SGR(int)>:
c000abf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac00:	85 d2                	test   edx,edx
c000ac02:	75 0b                	jne    c000ac0f <VgaText::doANSI_SGR(int)+0x17>
c000ac04:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac0a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac0d:	eb 59                	jmp    c000ac68 <VgaText::doANSI_SGR(int)+0x70>
c000ac0f:	83 fa 07             	cmp    edx,0x7
c000ac12:	75 0b                	jne    c000ac1f <VgaText::doANSI_SGR(int)+0x27>
c000ac14:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac17:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac1a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac1d:	eb 49                	jmp    c000ac68 <VgaText::doANSI_SGR(int)+0x70>
c000ac1f:	83 fa 1b             	cmp    edx,0x1b
c000ac22:	74 e0                	je     c000ac04 <VgaText::doANSI_SGR(int)+0xc>
c000ac24:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac27:	83 f9 07             	cmp    ecx,0x7
c000ac2a:	77 09                	ja     c000ac35 <VgaText::doANSI_SGR(int)+0x3d>
c000ac2c:	8b 14 8d 60 76 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd89a0]
c000ac33:	eb 20                	jmp    c000ac55 <VgaText::doANSI_SGR(int)+0x5d>
c000ac35:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac38:	83 f9 07             	cmp    ecx,0x7
c000ac3b:	77 09                	ja     c000ac46 <VgaText::doANSI_SGR(int)+0x4e>
c000ac3d:	8b 14 8d 60 76 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd89a0]
c000ac44:	eb 22                	jmp    c000ac68 <VgaText::doANSI_SGR(int)+0x70>
c000ac46:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac49:	83 f9 07             	cmp    ecx,0x7
c000ac4c:	77 0b                	ja     c000ac59 <VgaText::doANSI_SGR(int)+0x61>
c000ac4e:	8b 14 95 18 75 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8ae8]
c000ac55:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac58:	c3                   	ret    
c000ac59:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac5c:	83 f9 07             	cmp    ecx,0x7
c000ac5f:	77 0a                	ja     c000ac6b <VgaText::doANSI_SGR(int)+0x73>
c000ac61:	8b 14 95 f0 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8b10]
c000ac68:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac6b:	c3                   	ret    

c000ac6c <VgaText::setDefaultBgColour(VgaColour)>:
c000ac6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac74:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac77:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac7a:	c3                   	ret    
c000ac7b:	90                   	nop

c000ac7c <VgaText::setDefaultFgColour(VgaColour)>:
c000ac7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac84:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ac87:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac8a:	c3                   	ret    
c000ac8b:	90                   	nop

c000ac8c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac8c:	53                   	push   ebx
c000ac8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac99:	51                   	push   ecx
c000ac9a:	e8 cd ff ff ff       	call   c000ac6c <VgaText::setDefaultBgColour(VgaColour)>
c000ac9f:	58                   	pop    eax
c000aca0:	5a                   	pop    edx
c000aca1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000aca5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aca9:	5b                   	pop    ebx
c000acaa:	eb d0                	jmp    c000ac7c <VgaText::setDefaultFgColour(VgaColour)>

c000acac <VgaText::setTitleTextColour(VgaColour)>:
c000acac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acb4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acb7:	e9 9a fe ff ff       	jmp    c000ab56 <VgaText::updateTitle()>

c000acbc <VgaText::setTitleColour(VgaColour)>:
c000acbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acc4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000acc7:	e9 8a fe ff ff       	jmp    c000ab56 <VgaText::updateTitle()>

c000accc <VgaText::setTitle(char*)>:
c000accc:	53                   	push   ebx
c000accd:	83 ec 10             	sub    esp,0x10
c000acd0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acd8:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000acde:	50                   	push   eax
c000acdf:	e8 5c 5a ff ff       	call   c0000740 <strcpy>
c000ace4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ace8:	83 c4 18             	add    esp,0x18
c000aceb:	5b                   	pop    ebx
c000acec:	e9 65 fe ff ff       	jmp    c000ab56 <VgaText::updateTitle()>
c000acf1:	90                   	nop

c000acf2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000acf2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000acf6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000acfb:	83 e0 0f             	and    eax,0xf
c000acfe:	c1 e2 04             	shl    edx,0x4
c000ad01:	09 d0                	or     eax,edx
c000ad03:	c3                   	ret    

c000ad04 <VgaText::scrollScreen()>:
c000ad04:	55                   	push   ebp
c000ad05:	b9 01 00 00 00       	mov    ecx,0x1
c000ad0a:	57                   	push   edi
c000ad0b:	56                   	push   esi
c000ad0c:	53                   	push   ebx
c000ad0d:	83 ec 0c             	sub    esp,0xc
c000ad10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad14:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad1a:	31 ff                	xor    edi,edi
c000ad1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad1f:	83 f9 17             	cmp    ecx,0x17
c000ad22:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad25:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad2c:	75 27                	jne    c000ad55 <VgaText::scrollScreen()+0x51>
c000ad2e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad31:	01 f5                	add    ebp,esi
c000ad33:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad39:	74 16                	je     c000ad51 <VgaText::scrollScreen()+0x4d>
c000ad3b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad3f:	50                   	push   eax
c000ad40:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad44:	50                   	push   eax
c000ad45:	e8 a8 ff ff ff       	call   c000acf2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ad4a:	5a                   	pop    edx
c000ad4b:	5a                   	pop    edx
c000ad4c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad4f:	eb 04                	jmp    c000ad55 <VgaText::scrollScreen()+0x51>
c000ad51:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad55:	47                   	inc    edi
c000ad56:	46                   	inc    esi
c000ad57:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad5d:	75 bd                	jne    c000ad1c <VgaText::scrollScreen()+0x18>
c000ad5f:	41                   	inc    ecx
c000ad60:	83 f9 18             	cmp    ecx,0x18
c000ad63:	75 af                	jne    c000ad14 <VgaText::scrollScreen()+0x10>
c000ad65:	39 1d e4 82 02 c0    	cmp    DWORD PTR ds:0xc00282e4,ebx
c000ad6b:	75 1b                	jne    c000ad88 <VgaText::scrollScreen()+0x84>
c000ad6d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad71:	74 05                	je     c000ad78 <VgaText::scrollScreen()+0x74>
c000ad73:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad76:	eb 10                	jmp    c000ad88 <VgaText::scrollScreen()+0x84>
c000ad78:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ad7b:	85 c0                	test   eax,eax
c000ad7d:	74 09                	je     c000ad88 <VgaText::scrollScreen()+0x84>
c000ad7f:	83 ec 0c             	sub    esp,0xc
c000ad82:	53                   	push   ebx
c000ad83:	ff d0                	call   eax
c000ad85:	83 c4 10             	add    esp,0x10
c000ad88:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad8c:	83 c4 0c             	add    esp,0xc
c000ad8f:	5b                   	pop    ebx
c000ad90:	5e                   	pop    esi
c000ad91:	5f                   	pop    edi
c000ad92:	5d                   	pop    ebp
c000ad93:	e9 4a fe ff ff       	jmp    c000abe2 <VgaText::updateCursor()>

c000ad98 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad9d:	c1 e0 08             	shl    eax,0x8
c000ada0:	89 c2                	mov    edx,eax
c000ada2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ada7:	09 d0                	or     eax,edx
c000ada9:	c3                   	ret    

c000adaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000adaa:	56                   	push   esi
c000adab:	53                   	push   ebx
c000adac:	51                   	push   ecx
c000adad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adb1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adb6:	50                   	push   eax
c000adb7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adbc:	50                   	push   eax
c000adbd:	e8 30 ff ff ff       	call   c000acf2 <VgaText::combineColours(unsigned char, unsigned char)>
c000adc2:	5b                   	pop    ebx
c000adc3:	0f b6 c0             	movzx  eax,al
c000adc6:	5e                   	pop    esi
c000adc7:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000adcc:	50                   	push   eax
c000adcd:	53                   	push   ebx
c000adce:	e8 c5 ff ff ff       	call   c000ad98 <VgaText::combineCharAndColour(char, unsigned char)>
c000add3:	5a                   	pop    edx
c000add4:	5e                   	pop    esi
c000add5:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000add8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000adde:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ade2:	0f b7 d2             	movzx  edx,dx
c000ade5:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ade9:	39 0d e4 82 02 c0    	cmp    DWORD PTR ds:0xc00282e4,ecx
c000adef:	75 10                	jne    c000ae01 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000adf1:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000adf4:	85 c0                	test   eax,eax
c000adf6:	74 09                	je     c000ae01 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000adf8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000adfc:	5a                   	pop    edx
c000adfd:	5b                   	pop    ebx
c000adfe:	5e                   	pop    esi
c000adff:	ff e0                	jmp    eax
c000ae01:	58                   	pop    eax
c000ae02:	5b                   	pop    ebx
c000ae03:	5e                   	pop    esi
c000ae04:	c3                   	ret    
c000ae05:	90                   	nop

c000ae06 <VgaText::getCursorX()>:
c000ae06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae0a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae0d:	c3                   	ret    

c000ae0e <VgaText::getCursorY()>:
c000ae0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae12:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae15:	c3                   	ret    

c000ae16 <VgaText::setCursor(int, int)>:
c000ae16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae1e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae25:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae28:	e9 b5 fd ff ff       	jmp    c000abe2 <VgaText::updateCursor()>

c000ae2d <setActiveTerminal(VgaText*)>:
c000ae2d:	53                   	push   ebx
c000ae2e:	83 ec 08             	sub    esp,0x8
c000ae31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae35:	85 db                	test   ebx,ebx
c000ae37:	75 11                	jne    c000ae4a <setActiveTerminal(VgaText*)+0x1d>
c000ae39:	c7 44 24 10 e0 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc00243e0
c000ae41:	83 c4 08             	add    esp,0x8
c000ae44:	5b                   	pop    ebx
c000ae45:	e9 23 a2 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c000ae4a:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c000ae4f:	85 c0                	test   eax,eax
c000ae51:	74 0c                	je     c000ae5f <setActiveTerminal(VgaText*)+0x32>
c000ae53:	83 ec 0c             	sub    esp,0xc
c000ae56:	50                   	push   eax
c000ae57:	e8 86 fd ff ff       	call   c000abe2 <VgaText::updateCursor()>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 1d e4 82 02 c0    	mov    DWORD PTR ds:0xc00282e4,ebx
c000ae65:	51                   	push   ecx
c000ae66:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae69:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae6c:	53                   	push   ebx
c000ae6d:	e8 a4 ff ff ff       	call   c000ae16 <VgaText::setCursor(int, int)>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae79:	75 07                	jne    c000ae82 <setActiveTerminal(VgaText*)+0x55>
c000ae7b:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ae82:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae86:	83 c4 08             	add    esp,0x8
c000ae89:	5b                   	pop    ebx
c000ae8a:	e9 05 fd ff ff       	jmp    c000ab94 <VgaText::load()>

c000ae8f <doTerminalCycle()>:
c000ae8f:	83 ec 18             	sub    esp,0x18
c000ae92:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c000ae97:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae9a:	50                   	push   eax
c000ae9b:	a3 e0 82 02 c0       	mov    ds:0xc00282e0,eax
c000aea0:	e8 88 ff ff ff       	call   c000ae2d <setActiveTerminal(VgaText*)>
c000aea5:	83 c4 1c             	add    esp,0x1c
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <VgaText::setCursorX(int)>:
c000aeaa:	83 ec 10             	sub    esp,0x10
c000aead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeb1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aeb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb8:	50                   	push   eax
c000aeb9:	e8 58 ff ff ff       	call   c000ae16 <VgaText::setCursor(int, int)>
c000aebe:	83 c4 1c             	add    esp,0x1c
c000aec1:	c3                   	ret    

c000aec2 <VgaText::setCursorY(int)>:
c000aec2:	83 ec 10             	sub    esp,0x10
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aecd:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aed0:	50                   	push   eax
c000aed1:	e8 40 ff ff ff       	call   c000ae16 <VgaText::setCursor(int, int)>
c000aed6:	83 c4 1c             	add    esp,0x1c
c000aed9:	c3                   	ret    

c000aeda <VgaText::incrementCursor(bool)>:
c000aeda:	56                   	push   esi
c000aedb:	53                   	push   ebx
c000aedc:	51                   	push   ecx
c000aedd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aee1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aee5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aee8:	40                   	inc    eax
c000aee9:	83 f8 50             	cmp    eax,0x50
c000aeec:	74 05                	je     c000aef3 <VgaText::incrementCursor(bool)+0x19>
c000aeee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aef1:	eb 24                	jmp    c000af17 <VgaText::incrementCursor(bool)+0x3d>
c000aef3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aef6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aefd:	8d 50 01             	lea    edx,[eax+0x1]
c000af00:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af03:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af06:	75 0f                	jne    c000af17 <VgaText::incrementCursor(bool)+0x3d>
c000af08:	83 ec 0c             	sub    esp,0xc
c000af0b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af0e:	53                   	push   ebx
c000af0f:	e8 f0 fd ff ff       	call   c000ad04 <VgaText::scrollScreen()>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 f0                	mov    eax,esi
c000af19:	84 c0                	test   al,al
c000af1b:	74 0c                	je     c000af29 <VgaText::incrementCursor(bool)+0x4f>
c000af1d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af21:	5a                   	pop    edx
c000af22:	5b                   	pop    ebx
c000af23:	5e                   	pop    esi
c000af24:	e9 b9 fc ff ff       	jmp    c000abe2 <VgaText::updateCursor()>
c000af29:	58                   	pop    eax
c000af2a:	5b                   	pop    ebx
c000af2b:	5e                   	pop    esi
c000af2c:	c3                   	ret    
c000af2d:	90                   	nop

c000af2e <VgaText::decrementCursor(bool)>:
c000af2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af36:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af39:	85 c0                	test   eax,eax
c000af3b:	74 04                	je     c000af41 <VgaText::decrementCursor(bool)+0x13>
c000af3d:	48                   	dec    eax
c000af3e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af41:	84 c9                	test   cl,cl
c000af43:	74 09                	je     c000af4e <VgaText::decrementCursor(bool)+0x20>
c000af45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af49:	e9 94 fc ff ff       	jmp    c000abe2 <VgaText::updateCursor()>
c000af4e:	c3                   	ret    
c000af4f:	90                   	nop

c000af50 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af50:	53                   	push   ebx
c000af51:	83 ec 08             	sub    esp,0x8
c000af54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af60:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af64:	3c 07                	cmp    al,0x7
c000af66:	75 21                	jne    c000af89 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000af68:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000af70:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000af78:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000af80:	83 c4 08             	add    esp,0x8
c000af83:	5b                   	pop    ebx
c000af84:	e9 5e 2f 00 00       	jmp    c000dee7 <Krnl::beep(int, int, bool)>
c000af89:	3c 0d                	cmp    al,0xd
c000af8b:	75 09                	jne    c000af96 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af8d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af94:	eb 2c                	jmp    c000afc2 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af96:	3c 0a                	cmp    al,0xa
c000af98:	75 31                	jne    c000afcb <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af9a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af9d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afa4:	8d 50 01             	lea    edx,[eax+0x1]
c000afa7:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afaa:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afad:	75 0f                	jne    c000afbe <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000afaf:	83 ec 0c             	sub    esp,0xc
c000afb2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afb5:	53                   	push   ebx
c000afb6:	e8 49 fd ff ff       	call   c000ad04 <VgaText::scrollScreen()>
c000afbb:	83 c4 10             	add    esp,0x10
c000afbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afc2:	83 c4 08             	add    esp,0x8
c000afc5:	5b                   	pop    ebx
c000afc6:	e9 17 fc ff ff       	jmp    c000abe2 <VgaText::updateCursor()>
c000afcb:	3c 08                	cmp    al,0x8
c000afcd:	75 25                	jne    c000aff4 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000afcf:	50                   	push   eax
c000afd0:	50                   	push   eax
c000afd1:	6a 01                	push   0x1
c000afd3:	53                   	push   ebx
c000afd4:	e8 55 ff ff ff       	call   c000af2e <VgaText::decrementCursor(bool)>
c000afd9:	5a                   	pop    edx
c000afda:	59                   	pop    ecx
c000afdb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000afde:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000afe1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afe4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afe7:	6a 20                	push   0x20
c000afe9:	53                   	push   ebx
c000afea:	e8 bb fd ff ff       	call   c000adaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000afef:	83 c4 28             	add    esp,0x28
c000aff2:	5b                   	pop    ebx
c000aff3:	c3                   	ret    
c000aff4:	83 ec 08             	sub    esp,0x8
c000aff7:	0f be c0             	movsx  eax,al
c000affa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000affd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b000:	51                   	push   ecx
c000b001:	52                   	push   edx
c000b002:	50                   	push   eax
c000b003:	53                   	push   ebx
c000b004:	e8 a1 fd ff ff       	call   c000adaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b009:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b00d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b015:	83 c4 28             	add    esp,0x28
c000b018:	5b                   	pop    ebx
c000b019:	e9 bc fe ff ff       	jmp    c000aeda <VgaText::incrementCursor(bool)>

c000b01e <VgaText::doUpdate()>:
c000b01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b022:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b025:	85 c0                	test   eax,eax
c000b027:	74 02                	je     c000b02b <VgaText::doUpdate()+0xd>
c000b029:	ff e0                	jmp    eax
c000b02b:	c3                   	ret    

c000b02c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b02c:	55                   	push   ebp
c000b02d:	31 ed                	xor    ebp,ebp
c000b02f:	57                   	push   edi
c000b030:	56                   	push   esi
c000b031:	53                   	push   ebx
c000b032:	83 ec 1c             	sub    esp,0x1c
c000b035:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b039:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b03e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b045:	50                   	push   eax
c000b046:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b04b:	50                   	push   eax
c000b04c:	e8 a1 fc ff ff       	call   c000acf2 <VgaText::combineColours(unsigned char, unsigned char)>
c000b051:	59                   	pop    ecx
c000b052:	0f b6 c0             	movzx  eax,al
c000b055:	5e                   	pop    esi
c000b056:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b05b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b05f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b066:	0f b7 f6             	movzx  esi,si
c000b069:	01 f6                	add    esi,esi
c000b06b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b06e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b071:	84 c0                	test   al,al
c000b073:	0f 84 fd 00 00 00    	je     c000b176 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b079:	3c 0d                	cmp    al,0xd
c000b07b:	75 0c                	jne    c000b089 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b07d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b084:	e9 e7 00 00 00       	jmp    c000b170 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b089:	3c 0a                	cmp    al,0xa
c000b08b:	75 47                	jne    c000b0d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b08d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b090:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b097:	8d 48 01             	lea    ecx,[eax+0x1]
c000b09a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b09d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0a0:	75 0f                	jne    c000b0b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0a2:	83 ec 0c             	sub    esp,0xc
c000b0a5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0a8:	53                   	push   ebx
c000b0a9:	e8 56 fc ff ff       	call   c000ad04 <VgaText::scrollScreen()>
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	83 ec 0c             	sub    esp,0xc
c000b0b4:	31 ed                	xor    ebp,ebp
c000b0b6:	53                   	push   ebx
c000b0b7:	e8 26 fb ff ff       	call   c000abe2 <VgaText::updateCursor()>
c000b0bc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0c1:	83 c4 10             	add    esp,0x10
c000b0c4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0c7:	0f b7 f6             	movzx  esi,si
c000b0ca:	01 f6                	add    esi,esi
c000b0cc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0cf:	e9 9c 00 00 00       	jmp    c000b170 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0d4:	3c 08                	cmp    al,0x8
c000b0d6:	75 35                	jne    c000b10d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b0d8:	56                   	push   esi
c000b0d9:	56                   	push   esi
c000b0da:	6a 01                	push   0x1
c000b0dc:	53                   	push   ebx
c000b0dd:	e8 4c fe ff ff       	call   c000af2e <VgaText::decrementCursor(bool)>
c000b0e2:	58                   	pop    eax
c000b0e3:	5a                   	pop    edx
c000b0e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0ea:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b0ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b0f0:	6a 20                	push   0x20
c000b0f2:	53                   	push   ebx
c000b0f3:	e8 b2 fc ff ff       	call   c000adaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0f8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0fd:	83 c4 20             	add    esp,0x20
c000b100:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b103:	0f b7 f6             	movzx  esi,si
c000b106:	01 f6                	add    esi,esi
c000b108:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b10b:	eb 63                	jmp    c000b170 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b10d:	51                   	push   ecx
c000b10e:	51                   	push   ecx
c000b10f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b113:	50                   	push   eax
c000b114:	e8 7f fc ff ff       	call   c000ad98 <VgaText::combineCharAndColour(char, unsigned char)>
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	66 89 06             	mov    WORD PTR [esi],ax
c000b11f:	39 1d e4 82 02 c0    	cmp    DWORD PTR ds:0xc00282e4,ebx
c000b125:	75 21                	jne    c000b148 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b127:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b12a:	85 c0                	test   eax,eax
c000b12c:	74 1a                	je     c000b148 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b12e:	52                   	push   edx
c000b12f:	52                   	push   edx
c000b130:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b133:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b136:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b13a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b13e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b141:	51                   	push   ecx
c000b142:	53                   	push   ebx
c000b143:	ff d0                	call   eax
c000b145:	83 c4 20             	add    esp,0x20
c000b148:	83 c6 02             	add    esi,0x2
c000b14b:	50                   	push   eax
c000b14c:	50                   	push   eax
c000b14d:	6a 00                	push   0x0
c000b14f:	53                   	push   ebx
c000b150:	e8 85 fd ff ff       	call   c000aeda <VgaText::incrementCursor(bool)>
c000b155:	83 c4 10             	add    esp,0x10
c000b158:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b15c:	75 0d                	jne    c000b16b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b15e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b163:	0f b7 f6             	movzx  esi,si
c000b166:	01 f6                	add    esi,esi
c000b168:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b16b:	bd 01 00 00 00       	mov    ebp,0x1
c000b170:	47                   	inc    edi
c000b171:	e9 f8 fe ff ff       	jmp    c000b06e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	53                   	push   ebx
c000b17a:	e8 63 fa ff ff       	call   c000abe2 <VgaText::updateCursor()>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	89 e8                	mov    eax,ebp
c000b184:	84 c0                	test   al,al
c000b186:	74 0c                	je     c000b194 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b188:	83 ec 0c             	sub    esp,0xc
c000b18b:	53                   	push   ebx
c000b18c:	e8 8d fe ff ff       	call   c000b01e <VgaText::doUpdate()>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b19b:	83 c4 1c             	add    esp,0x1c
c000b19e:	5b                   	pop    ebx
c000b19f:	5e                   	pop    esi
c000b1a0:	5f                   	pop    edi
c000b1a1:	5d                   	pop    ebp
c000b1a2:	c3                   	ret    
c000b1a3:	90                   	nop

c000b1a4 <VgaText::clearScreen()>:
c000b1a4:	57                   	push   edi
c000b1a5:	56                   	push   esi
c000b1a6:	31 f6                	xor    esi,esi
c000b1a8:	53                   	push   ebx
c000b1a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1ad:	52                   	push   edx
c000b1ae:	6a 00                	push   0x0
c000b1b0:	6a 00                	push   0x0
c000b1b2:	53                   	push   ebx
c000b1b3:	e8 5e fc ff ff       	call   c000ae16 <VgaText::setCursor(int, int)>
c000b1b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b1c5:	7e 20                	jle    c000b1e7 <VgaText::clearScreen()+0x43>
c000b1c7:	31 ff                	xor    edi,edi
c000b1c9:	50                   	push   eax
c000b1ca:	50                   	push   eax
c000b1cb:	56                   	push   esi
c000b1cc:	57                   	push   edi
c000b1cd:	47                   	inc    edi
c000b1ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b1d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1d4:	6a 20                	push   0x20
c000b1d6:	53                   	push   ebx
c000b1d7:	e8 ce fb ff ff       	call   c000adaa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1dc:	83 c4 20             	add    esp,0x20
c000b1df:	83 ff 50             	cmp    edi,0x50
c000b1e2:	75 e5                	jne    c000b1c9 <VgaText::clearScreen()+0x25>
c000b1e4:	46                   	inc    esi
c000b1e5:	eb db                	jmp    c000b1c2 <VgaText::clearScreen()+0x1e>
c000b1e7:	83 ec 0c             	sub    esp,0xc
c000b1ea:	53                   	push   ebx
c000b1eb:	e8 2e fe ff ff       	call   c000b01e <VgaText::doUpdate()>
c000b1f0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1f7:	83 c4 10             	add    esp,0x10
c000b1fa:	5b                   	pop    ebx
c000b1fb:	5e                   	pop    esi
c000b1fc:	5f                   	pop    edi
c000b1fd:	c3                   	ret    

c000b1fe <VgaText::putchar(char)>:
c000b1fe:	56                   	push   esi
c000b1ff:	53                   	push   ebx
c000b200:	83 ec 14             	sub    esp,0x14
c000b203:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b207:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b20b:	3c 5b                	cmp    al,0x5b
c000b20d:	75 18                	jne    c000b227 <VgaText::putchar(char)+0x29>
c000b20f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b213:	74 1f                	je     c000b234 <VgaText::putchar(char)+0x36>
c000b215:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b21b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b222:	e9 bd 00 00 00       	jmp    c000b2e4 <VgaText::putchar(char)+0xe6>
c000b227:	3c 1b                	cmp    al,0x1b
c000b229:	75 09                	jne    c000b234 <VgaText::putchar(char)+0x36>
c000b22b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b22f:	e9 b0 00 00 00       	jmp    c000b2e4 <VgaText::putchar(char)+0xe6>
c000b234:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b237:	84 c9                	test   cl,cl
c000b239:	0f 84 92 00 00 00    	je     c000b2d1 <VgaText::putchar(char)+0xd3>
c000b23f:	8d 50 c0             	lea    edx,[eax-0x40]
c000b242:	80 fa 3e             	cmp    dl,0x3e
c000b245:	77 76                	ja     c000b2bd <VgaText::putchar(char)+0xbf>
c000b247:	3c 6d                	cmp    al,0x6d
c000b249:	75 47                	jne    c000b292 <VgaText::putchar(char)+0x94>
c000b24b:	31 f6                	xor    esi,esi
c000b24d:	31 d2                	xor    edx,edx
c000b24f:	31 c0                	xor    eax,eax
c000b251:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b254:	7e 2d                	jle    c000b283 <VgaText::putchar(char)+0x85>
c000b256:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b25b:	80 fa 3b             	cmp    dl,0x3b
c000b25e:	75 17                	jne    c000b277 <VgaText::putchar(char)+0x79>
c000b260:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b264:	50                   	push   eax
c000b265:	53                   	push   ebx
c000b266:	e8 8d f9 ff ff       	call   c000abf8 <VgaText::doANSI_SGR(int)>
c000b26b:	59                   	pop    ecx
c000b26c:	31 d2                	xor    edx,edx
c000b26e:	58                   	pop    eax
c000b26f:	31 c0                	xor    eax,eax
c000b271:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b275:	eb 09                	jmp    c000b280 <VgaText::putchar(char)+0x82>
c000b277:	6b c0 0a             	imul   eax,eax,0xa
c000b27a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b27e:	88 ca                	mov    dl,cl
c000b280:	46                   	inc    esi
c000b281:	eb ce                	jmp    c000b251 <VgaText::putchar(char)+0x53>
c000b283:	84 d2                	test   dl,dl
c000b285:	74 2e                	je     c000b2b5 <VgaText::putchar(char)+0xb7>
c000b287:	50                   	push   eax
c000b288:	53                   	push   ebx
c000b289:	e8 6a f9 ff ff       	call   c000abf8 <VgaText::doANSI_SGR(int)>
c000b28e:	58                   	pop    eax
c000b28f:	5a                   	pop    edx
c000b290:	eb 23                	jmp    c000b2b5 <VgaText::putchar(char)+0xb7>
c000b292:	3c 4a                	cmp    al,0x4a
c000b294:	75 1f                	jne    c000b2b5 <VgaText::putchar(char)+0xb7>
c000b296:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b29a:	75 19                	jne    c000b2b5 <VgaText::putchar(char)+0xb7>
c000b29c:	83 ec 0c             	sub    esp,0xc
c000b29f:	53                   	push   ebx
c000b2a0:	e8 ff fe ff ff       	call   c000b1a4 <VgaText::clearScreen()>
c000b2a5:	83 c4 0c             	add    esp,0xc
c000b2a8:	6a 00                	push   0x0
c000b2aa:	6a 00                	push   0x0
c000b2ac:	53                   	push   ebx
c000b2ad:	e8 64 fb ff ff       	call   c000ae16 <VgaText::setCursor(int, int)>
c000b2b2:	83 c4 10             	add    esp,0x10
c000b2b5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b2bb:	eb 27                	jmp    c000b2e4 <VgaText::putchar(char)+0xe6>
c000b2bd:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b2c0:	83 fa 0e             	cmp    edx,0xe
c000b2c3:	7f 1f                	jg     c000b2e4 <VgaText::putchar(char)+0xe6>
c000b2c5:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b2c8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b2cb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b2cf:	eb 13                	jmp    c000b2e4 <VgaText::putchar(char)+0xe6>
c000b2d1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b2d4:	0f be c0             	movsx  eax,al
c000b2d7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b2da:	50                   	push   eax
c000b2db:	53                   	push   ebx
c000b2dc:	e8 6f fc ff ff       	call   c000af50 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b2e1:	83 c4 10             	add    esp,0x10
c000b2e4:	83 c4 14             	add    esp,0x14
c000b2e7:	5b                   	pop    ebx
c000b2e8:	5e                   	pop    esi
c000b2e9:	c3                   	ret    

c000b2ea <VgaText::putx(unsigned int)>:
c000b2ea:	57                   	push   edi
c000b2eb:	b9 11 00 00 00       	mov    ecx,0x11
c000b2f0:	56                   	push   esi
c000b2f1:	be ee 43 02 c0       	mov    esi,0xc00243ee
c000b2f6:	53                   	push   ebx
c000b2f7:	83 ec 20             	sub    esp,0x20
c000b2fa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b2fe:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b302:	fc                   	cld    
c000b303:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b305:	be 08 00 00 00       	mov    esi,0x8
c000b30a:	50                   	push   eax
c000b30b:	50                   	push   eax
c000b30c:	89 d8                	mov    eax,ebx
c000b30e:	c1 e3 04             	shl    ebx,0x4
c000b311:	c1 e8 1c             	shr    eax,0x1c
c000b314:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b319:	50                   	push   eax
c000b31a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b31e:	e8 db fe ff ff       	call   c000b1fe <VgaText::putchar(char)>
c000b323:	83 c4 10             	add    esp,0x10
c000b326:	4e                   	dec    esi
c000b327:	75 e1                	jne    c000b30a <VgaText::putx(unsigned int)+0x20>
c000b329:	83 c4 20             	add    esp,0x20
c000b32c:	5b                   	pop    ebx
c000b32d:	5e                   	pop    esi
c000b32e:	5f                   	pop    edi
c000b32f:	c3                   	ret    

c000b330 <VgaText::puts(char const*)>:
c000b330:	53                   	push   ebx
c000b331:	83 ec 08             	sub    esp,0x8
c000b334:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b338:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b33b:	84 c0                	test   al,al
c000b33d:	74 12                	je     c000b351 <VgaText::puts(char const*)+0x21>
c000b33f:	43                   	inc    ebx
c000b340:	51                   	push   ecx
c000b341:	51                   	push   ecx
c000b342:	50                   	push   eax
c000b343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b347:	e8 b2 fe ff ff       	call   c000b1fe <VgaText::putchar(char)>
c000b34c:	83 c4 10             	add    esp,0x10
c000b34f:	eb e7                	jmp    c000b338 <VgaText::puts(char const*)+0x8>
c000b351:	83 c4 08             	add    esp,0x8
c000b354:	5b                   	pop    ebx
c000b355:	c3                   	ret    

c000b356 <VgaText::VgaText(char const*)>:
c000b356:	57                   	push   edi
c000b357:	56                   	push   esi
c000b358:	53                   	push   ebx
c000b359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35d:	83 ec 08             	sub    esp,0x8
c000b360:	6a 00                	push   0x0
c000b362:	50                   	push   eax
c000b363:	e8 46 05 00 00       	call   c000b8ae <UnixFile::UnixFile(int)>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	ba 54 44 02 c0       	mov    edx,0xc0024454
c000b370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b374:	89 10                	mov    DWORD PTR [eax],edx
c000b376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b385:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b390:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b398:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ab:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b3bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cc:	8d 50 60             	lea    edx,[eax+0x60]
c000b3cf:	bb c0 82 02 c0       	mov    ebx,0xc00282c0
c000b3d4:	b8 08 00 00 00       	mov    eax,0x8
c000b3d9:	fc                   	cld    
c000b3da:	89 d7                	mov    edi,edx
c000b3dc:	89 de                	mov    esi,ebx
c000b3de:	89 c1                	mov    ecx,eax
c000b3e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e6:	05 82 00 00 00       	add    eax,0x82
c000b3eb:	83 ec 08             	sub    esp,0x8
c000b3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f2:	50                   	push   eax
c000b3f3:	e8 48 53 ff ff       	call   c0000740 <strcpy>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ff:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b406:	83 ec 0c             	sub    esp,0xc
c000b409:	6a 01                	push   0x1
c000b40b:	e8 e1 08 00 00       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c000b410:	83 c4 10             	add    esp,0x10
c000b413:	89 c2                	mov    edx,eax
c000b415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b419:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b41c:	8b 1d 94 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028394
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b429:	89 c6                	mov    esi,eax
c000b42b:	e8 c6 ef ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000b430:	68 05 0c 00 00       	push   0xc05
c000b435:	56                   	push   esi
c000b436:	50                   	push   eax
c000b437:	53                   	push   ebx
c000b438:	e8 1f 0f 00 00       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b43d:	83 c4 10             	add    esp,0x10
c000b440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b444:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b447:	83 ec 04             	sub    esp,0x4
c000b44a:	68 00 0f 00 00       	push   0xf00
c000b44f:	6a 00                	push   0x0
c000b451:	50                   	push   eax
c000b452:	e8 2d 52 ff ff       	call   c0000684 <memset>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 ec 04             	sub    esp,0x4
c000b45d:	6a 00                	push   0x0
c000b45f:	6a 07                	push   0x7
c000b461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b465:	e8 22 f8 ff ff       	call   c000ac8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	83 ec 04             	sub    esp,0x4
c000b470:	6a 00                	push   0x0
c000b472:	6a 00                	push   0x0
c000b474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b478:	e8 99 f9 ff ff       	call   c000ae16 <VgaText::setCursor(int, int)>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	83 ec 0c             	sub    esp,0xc
c000b483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b487:	e8 18 fd ff ff       	call   c000b1a4 <VgaText::clearScreen()>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b493:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	05 02 01 00 00       	add    eax,0x102
c000b4a0:	83 ec 04             	sub    esp,0x4
c000b4a3:	6a 30                	push   0x30
c000b4a5:	6a 00                	push   0x0
c000b4a7:	50                   	push   eax
c000b4a8:	e8 d7 51 ff ff       	call   c0000684 <memset>
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b4:	05 32 01 00 00       	add    eax,0x132
c000b4b9:	83 ec 04             	sub    esp,0x4
c000b4bc:	68 80 00 00 00       	push   0x80
c000b4c1:	6a 00                	push   0x0
c000b4c3:	50                   	push   eax
c000b4c4:	e8 bb 51 ff ff       	call   c0000684 <memset>
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	90                   	nop
c000b4cd:	5b                   	pop    ebx
c000b4ce:	5e                   	pop    esi
c000b4cf:	5f                   	pop    edi
c000b4d0:	c3                   	ret    
c000b4d1:	90                   	nop

c000b4d2 <VgaText::receiveKey(unsigned char)>:
c000b4d2:	55                   	push   ebp
c000b4d3:	57                   	push   edi
c000b4d4:	56                   	push   esi
c000b4d5:	53                   	push   ebx
c000b4d6:	83 ec 1c             	sub    esp,0x1c
c000b4d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b4dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b4e1:	84 db                	test   bl,bl
c000b4e3:	0f 84 c6 00 00 00    	je     c000b5af <VgaText::receiveKey(unsigned char)+0xdd>
c000b4e9:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b4ef:	80 fb 08             	cmp    bl,0x8
c000b4f2:	75 2c                	jne    c000b520 <VgaText::receiveKey(unsigned char)+0x4e>
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	57                   	push   edi
c000b4f8:	e8 a3 51 ff ff       	call   c00006a0 <strlen>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	85 c0                	test   eax,eax
c000b502:	74 41                	je     c000b545 <VgaText::receiveKey(unsigned char)+0x73>
c000b504:	50                   	push   eax
c000b505:	50                   	push   eax
c000b506:	6a 08                	push   0x8
c000b508:	56                   	push   esi
c000b509:	e8 f0 fc ff ff       	call   c000b1fe <VgaText::putchar(char)>
c000b50e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b511:	e8 8a 51 ff ff       	call   c00006a0 <strlen>
c000b516:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b51e:	eb 22                	jmp    c000b542 <VgaText::receiveKey(unsigned char)+0x70>
c000b520:	0f be c3             	movsx  eax,bl
c000b523:	52                   	push   edx
c000b524:	52                   	push   edx
c000b525:	50                   	push   eax
c000b526:	56                   	push   esi
c000b527:	e8 d2 fc ff ff       	call   c000b1fe <VgaText::putchar(char)>
c000b52c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b530:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b535:	59                   	pop    ecx
c000b536:	5d                   	pop    ebp
c000b537:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b53b:	50                   	push   eax
c000b53c:	57                   	push   edi
c000b53d:	e8 3e 53 ff ff       	call   c0000880 <strcat>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b54c:	75 05                	jne    c000b553 <VgaText::receiveKey(unsigned char)+0x81>
c000b54e:	80 fb 0a             	cmp    bl,0xa
c000b551:	75 50                	jne    c000b5a3 <VgaText::receiveKey(unsigned char)+0xd1>
c000b553:	83 ec 0c             	sub    esp,0xc
c000b556:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b55c:	53                   	push   ebx
c000b55d:	e8 3e 51 ff ff       	call   c00006a0 <strlen>
c000b562:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b565:	89 c5                	mov    ebp,eax
c000b567:	e8 34 51 ff ff       	call   c00006a0 <strlen>
c000b56c:	83 c4 10             	add    esp,0x10
c000b56f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b573:	3d 80 00 00 00       	cmp    eax,0x80
c000b578:	76 10                	jbe    c000b58a <VgaText::receiveKey(unsigned char)+0xb8>
c000b57a:	83 ec 0c             	sub    esp,0xc
c000b57d:	68 ff 43 02 c0       	push   0xc00243ff
c000b582:	e8 e6 9a 00 00       	call   c001506d <Krnl::panic(char const*)>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	50                   	push   eax
c000b58b:	50                   	push   eax
c000b58c:	57                   	push   edi
c000b58d:	53                   	push   ebx
c000b58e:	e8 ed 52 ff ff       	call   c0000880 <strcat>
c000b593:	83 c4 0c             	add    esp,0xc
c000b596:	6a 30                	push   0x30
c000b598:	6a 00                	push   0x0
c000b59a:	57                   	push   edi
c000b59b:	e8 e4 50 ff ff       	call   c0000684 <memset>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	56                   	push   esi
c000b5a7:	e8 72 fa ff ff       	call   c000b01e <VgaText::doUpdate()>
c000b5ac:	83 c4 10             	add    esp,0x10
c000b5af:	83 c4 1c             	add    esp,0x1c
c000b5b2:	5b                   	pop    ebx
c000b5b3:	5e                   	pop    esi
c000b5b4:	5f                   	pop    edi
c000b5b5:	5d                   	pop    ebp
c000b5b6:	c3                   	ret    
c000b5b7:	90                   	nop

c000b5b8 <VgaText::write(unsigned long long, void*, int*)>:
c000b5b8:	55                   	push   ebp
c000b5b9:	57                   	push   edi
c000b5ba:	56                   	push   esi
c000b5bb:	53                   	push   ebx
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b5c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b5c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b5cb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b5d2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b5d5:	39 eb                	cmp    ebx,ebp
c000b5d7:	74 13                	je     c000b5ec <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b5d9:	43                   	inc    ebx
c000b5da:	50                   	push   eax
c000b5db:	50                   	push   eax
c000b5dc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b5e0:	50                   	push   eax
c000b5e1:	56                   	push   esi
c000b5e2:	e8 17 fc ff ff       	call   c000b1fe <VgaText::putchar(char)>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	eb e9                	jmp    c000b5d5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b5ec:	83 ec 0c             	sub    esp,0xc
c000b5ef:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b5f6:	56                   	push   esi
c000b5f7:	e8 22 fa ff ff       	call   c000b01e <VgaText::doUpdate()>
c000b5fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b600:	89 38                	mov    DWORD PTR [eax],edi
c000b602:	83 c4 1c             	add    esp,0x1c
c000b605:	31 c0                	xor    eax,eax
c000b607:	5b                   	pop    ebx
c000b608:	5e                   	pop    esi
c000b609:	5f                   	pop    edi
c000b60a:	5d                   	pop    ebp
c000b60b:	c3                   	ret    

c000b60c <newTerminal(char*)>:
c000b60c:	83 ec 28             	sub    esp,0x28
c000b60f:	68 b4 01 00 00       	push   0x1b4
c000b614:	e8 26 e7 ff ff       	call   c0009d3f <malloc>
c000b619:	5a                   	pop    edx
c000b61a:	59                   	pop    ecx
c000b61b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b61f:	50                   	push   eax
c000b620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b624:	e8 2d fd ff ff       	call   c000b356 <VgaText::VgaText(char const*)>
c000b629:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b62d:	83 c4 2c             	add    esp,0x2c
c000b630:	c3                   	ret    
c000b631:	66 90                	xchg   ax,ax
c000b633:	90                   	nop

c000b634 <TSS::TSS()>:
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b63f:	90                   	nop
c000b640:	c3                   	ret    
c000b641:	90                   	nop
c000b642:	66 90                	xchg   ax,ax

c000b644 <TSS::setESP(unsigned long)>:
c000b644:	55                   	push   ebp
c000b645:	89 e5                	mov    ebp,esp
c000b647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b64a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b64d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b650:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b653:	90                   	nop
c000b654:	5d                   	pop    ebp
c000b655:	c3                   	ret    
c000b656:	66 90                	xchg   ax,ax

c000b658 <TSS::flush()>:
c000b658:	55                   	push   ebp
c000b659:	89 e5                	mov    ebp,esp
c000b65b:	83 ec 10             	sub    esp,0x10
c000b65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b661:	8b 00                	mov    eax,DWORD PTR [eax]
c000b663:	83 c8 03             	or     eax,0x3
c000b666:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b66a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b66e:	66 89 d0             	mov    ax,dx
c000b671:	0f 00 d8             	ltr    ax
c000b674:	90                   	nop
c000b675:	c9                   	leave  
c000b676:	c3                   	ret    
c000b677:	90                   	nop

c000b678 <TSS::setup(unsigned long, unsigned long)>:
c000b678:	55                   	push   ebp
c000b679:	89 e5                	mov    ebp,esp
c000b67b:	83 ec 18             	sub    esp,0x18
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	6a 68                	push   0x68
c000b683:	e8 b7 e6 ff ff       	call   c0009d3f <malloc>
c000b688:	83 c4 10             	add    esp,0x10
c000b68b:	89 c2                	mov    edx,eax
c000b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b690:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b699:	83 ec 04             	sub    esp,0x4
c000b69c:	6a 68                	push   0x68
c000b69e:	6a 00                	push   0x0
c000b6a0:	50                   	push   eax
c000b6a1:	e8 de 4f ff ff       	call   c0000684 <memset>
c000b6a6:	83 c4 10             	add    esp,0x10
c000b6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6af:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6bb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6df:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b6e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6eb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6f7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b703:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b70f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b71e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b727:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b72a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b733:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b73d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b740:	0f 20 da             	mov    edx,cr3
c000b743:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b746:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b749:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b74f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b752:	83 ec 08             	sub    esp,0x8
c000b755:	50                   	push   eax
c000b756:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b759:	50                   	push   eax
c000b75a:	e8 c7 dd ff ff       	call   c0009526 <GDTEntry::setBase(unsigned int)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	83 ec 08             	sub    esp,0x8
c000b765:	6a 68                	push   0x68
c000b767:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b76a:	50                   	push   eax
c000b76b:	e8 d2 dd ff ff       	call   c0009542 <GDTEntry::setLimit(unsigned int)>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b777:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b77a:	83 e0 0f             	and    eax,0xf
c000b77d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b780:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b783:	83 c8 40             	or     eax,0x40
c000b786:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b789:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000b78e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b794:	05 78 01 00 00       	add    eax,0x178
c000b799:	83 ec 04             	sub    esp,0x4
c000b79c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b79f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7a2:	50                   	push   eax
c000b7a3:	e8 ce dd ff ff       	call   c0009576 <GDT::addEntry(GDTEntry)>
c000b7a8:	83 c4 10             	add    esp,0x10
c000b7ab:	89 c2                	mov    edx,eax
c000b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b0:	89 10                	mov    DWORD PTR [eax],edx
c000b7b2:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000b7b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7bd:	05 78 01 00 00       	add    eax,0x178
c000b7c2:	83 ec 0c             	sub    esp,0xc
c000b7c5:	50                   	push   eax
c000b7c6:	e8 d5 dd ff ff       	call   c00095a0 <GDT::flush()>
c000b7cb:	83 c4 10             	add    esp,0x10
c000b7ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7d3:	c9                   	leave  
c000b7d4:	c3                   	ret    
c000b7d5:	90                   	nop

c000b7d6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b7d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7e1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7e6:	75 08                	jne    c000b7f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b7e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7ee:	eb 38                	jmp    c000b828 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b7f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7f5:	75 17                	jne    c000b80e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b7f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b805:	8b 10                	mov    edx,DWORD PTR [eax]
c000b807:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b80b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b80e:	89 c1                	mov    ecx,eax
c000b810:	83 e1 fd             	and    ecx,0xfffffffd
c000b813:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b819:	74 cd                	je     c000b7e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b81b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b820:	83 e0 ef             	and    eax,0xffffffef
c000b823:	83 f8 08             	cmp    eax,0x8
c000b826:	76 c0                	jbe    c000b7e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b828:	31 c0                	xor    eax,eax
c000b82a:	c3                   	ret    
c000b82b:	90                   	nop

c000b82c <ReservedFilename::isAtty()>:
c000b82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b830:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b833:	31 c0                	xor    eax,eax
c000b835:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b83b:	74 09                	je     c000b846 <ReservedFilename::isAtty()+0x1a>
c000b83d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b843:	0f 94 c0             	sete   al
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b850:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b853:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b857:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b85c:	75 08                	jne    c000b866 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b85e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b864:	eb 3d                	jmp    c000b8a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b866:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b86b:	75 17                	jne    c000b884 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b86d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b872:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b875:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b87b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b87d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b881:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b884:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b889:	75 04                	jne    c000b88f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b88b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b88d:	eb 14                	jmp    c000b8a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b88f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b894:	74 c8                	je     c000b85e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b896:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b89b:	83 e0 ef             	and    eax,0xffffffef
c000b89e:	83 f8 08             	cmp    eax,0x8
c000b8a1:	76 bb                	jbe    c000b85e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8a3:	31 c0                	xor    eax,eax
c000b8a5:	c3                   	ret    

c000b8a6 <UnixFile::getFileDescriptor()>:
c000b8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8ad:	c3                   	ret    

c000b8ae <UnixFile::UnixFile(int)>:
c000b8ae:	53                   	push   ebx
c000b8af:	83 ec 28             	sub    esp,0x28
c000b8b2:	ba 1c 45 02 c0       	mov    edx,0xc002451c
c000b8b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8bb:	89 10                	mov    DWORD PTR [eax],edx
c000b8bd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b8c5:	0f 8f 8c 01 00 00    	jg     c000ba57 <UnixFile::UnixFile(int)+0x1a9>
c000b8cb:	a1 a0 76 02 c0       	mov    eax,ds:0xc00276a0
c000b8d0:	8d 50 01             	lea    edx,[eax+0x1]
c000b8d3:	89 15 a0 76 02 c0    	mov    DWORD PTR ds:0xc00276a0,edx
c000b8d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b8dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b8e0:	83 ec 08             	sub    esp,0x8
c000b8e3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b8e7:	68 78 83 02 c0       	push   0xc0028378
c000b8ec:	e8 d7 71 01 00       	call   c0022ac8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b8f1:	83 c4 10             	add    esp,0x10
c000b8f4:	a0 74 83 02 c0       	mov    al,ds:0xc0028374
c000b8f9:	83 f0 01             	xor    eax,0x1
c000b8fc:	84 c0                	test   al,al
c000b8fe:	0f 84 54 01 00 00    	je     c000ba58 <UnixFile::UnixFile(int)+0x1aa>
c000b904:	c6 05 74 83 02 c0 01 	mov    BYTE PTR ds:0xc0028374,0x1
c000b90b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b913:	83 ec 0c             	sub    esp,0xc
c000b916:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b91a:	e8 20 e4 ff ff       	call   c0009d3f <malloc>
c000b91f:	83 c4 10             	add    esp,0x10
c000b922:	89 c3                	mov    ebx,eax
c000b924:	83 ec 08             	sub    esp,0x8
c000b927:	68 03 ff ff 0f       	push   0xfffff03
c000b92c:	53                   	push   ebx
c000b92d:	e8 2c 01 00 00       	call   c000ba5e <ReservedFilename::ReservedFilename(int)>
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	89 1d 6c 83 02 c0    	mov    DWORD PTR ds:0xc002836c,ebx
c000b93b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b943:	83 ec 0c             	sub    esp,0xc
c000b946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94a:	e8 f0 e3 ff ff       	call   c0009d3f <malloc>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 c3                	mov    ebx,eax
c000b954:	83 ec 08             	sub    esp,0x8
c000b957:	68 01 ff ff 0f       	push   0xfffff01
c000b95c:	53                   	push   ebx
c000b95d:	e8 fc 00 00 00       	call   c000ba5e <ReservedFilename::ReservedFilename(int)>
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	89 1d 70 83 02 c0    	mov    DWORD PTR ds:0xc0028370,ebx
c000b96b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b973:	83 ec 0c             	sub    esp,0xc
c000b976:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b97a:	e8 c0 e3 ff ff       	call   c0009d3f <malloc>
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	89 c3                	mov    ebx,eax
c000b984:	83 ec 08             	sub    esp,0x8
c000b987:	68 00 ff ff 0f       	push   0xfffff00
c000b98c:	53                   	push   ebx
c000b98d:	e8 cc 00 00 00       	call   c000ba5e <ReservedFilename::ReservedFilename(int)>
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	89 1d 64 83 02 c0    	mov    DWORD PTR ds:0xc0028364,ebx
c000b99b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9a3:	83 ec 0c             	sub    esp,0xc
c000b9a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9aa:	e8 90 e3 ff ff       	call   c0009d3f <malloc>
c000b9af:	83 c4 10             	add    esp,0x10
c000b9b2:	89 c3                	mov    ebx,eax
c000b9b4:	83 ec 08             	sub    esp,0x8
c000b9b7:	68 02 ff ff 0f       	push   0xfffff02
c000b9bc:	53                   	push   ebx
c000b9bd:	e8 9c 00 00 00       	call   c000ba5e <ReservedFilename::ReservedFilename(int)>
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	89 1d 68 83 02 c0    	mov    DWORD PTR ds:0xc0028368,ebx
c000b9cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b9d3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b9d8:	7f 7e                	jg     c000ba58 <UnixFile::UnixFile(int)+0x1aa>
c000b9da:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b9e2:	83 ec 0c             	sub    esp,0xc
c000b9e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9e9:	e8 51 e3 ff ff       	call   c0009d3f <malloc>
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	89 c3                	mov    ebx,eax
c000b9f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9f7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b9fc:	83 ec 08             	sub    esp,0x8
c000b9ff:	50                   	push   eax
c000ba00:	53                   	push   ebx
c000ba01:	e8 58 00 00 00       	call   c000ba5e <ReservedFilename::ReservedFilename(int)>
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba0d:	89 1c 85 40 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7cc0],ebx
c000ba14:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba23:	e8 17 e3 ff ff       	call   c0009d3f <malloc>
c000ba28:	83 c4 10             	add    esp,0x10
c000ba2b:	89 c3                	mov    ebx,eax
c000ba2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba31:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba36:	83 ec 08             	sub    esp,0x8
c000ba39:	50                   	push   eax
c000ba3a:	53                   	push   ebx
c000ba3b:	e8 1e 00 00 00       	call   c000ba5e <ReservedFilename::ReservedFilename(int)>
c000ba40:	83 c4 10             	add    esp,0x10
c000ba43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba47:	89 1c 85 00 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d00],ebx
c000ba4e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba52:	e9 7c ff ff ff       	jmp    c000b9d3 <UnixFile::UnixFile(int)+0x125>
c000ba57:	90                   	nop
c000ba58:	83 c4 28             	add    esp,0x28
c000ba5b:	5b                   	pop    ebx
c000ba5c:	c3                   	ret    
c000ba5d:	90                   	nop

c000ba5e <ReservedFilename::ReservedFilename(int)>:
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba65:	83 ec 08             	sub    esp,0x8
c000ba68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6c:	50                   	push   eax
c000ba6d:	e8 3c fe ff ff       	call   c000b8ae <UnixFile::UnixFile(int)>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	ba 38 45 02 c0       	mov    edx,0xc0024538
c000ba7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba7e:	89 10                	mov    DWORD PTR [eax],edx
c000ba80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba8b:	90                   	nop
c000ba8c:	83 c4 0c             	add    esp,0xc
c000ba8f:	c3                   	ret    

c000ba90 <UnixFile::~UnixFile()>:
c000ba90:	83 ec 1c             	sub    esp,0x1c
c000ba93:	ba 1c 45 02 c0       	mov    edx,0xc002451c
c000ba98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9c:	89 10                	mov    DWORD PTR [eax],edx
c000ba9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000baa5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000baaa:	7f 73                	jg     c000bb1f <UnixFile::~UnixFile()+0x8f>
c000baac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bab4:	83 ec 0c             	sub    esp,0xc
c000bab7:	68 78 83 02 c0       	push   0xc0028378
c000babc:	e8 db 70 01 00       	call   c0022b9c <LinkedList<UnixFile>::getFirstElement()>
c000bac1:	83 c4 10             	add    esp,0x10
c000bac4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bac8:	83 ec 0c             	sub    esp,0xc
c000bacb:	68 78 83 02 c0       	push   0xc0028378
c000bad0:	e8 cf 70 01 00       	call   c0022ba4 <LinkedList<UnixFile>::removeFirst()>
c000bad5:	83 c4 10             	add    esp,0x10
c000bad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000badc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bae0:	74 40                	je     c000bb22 <UnixFile::~UnixFile()+0x92>
c000bae2:	83 ec 08             	sub    esp,0x8
c000bae5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bae9:	68 78 83 02 c0       	push   0xc0028378
c000baee:	e8 d5 6f 01 00       	call   c0022ac8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000baf3:	83 c4 10             	add    esp,0x10
c000baf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bafa:	8d 50 01             	lea    edx,[eax+0x1]
c000bafd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb01:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb06:	0f 94 c0             	sete   al
c000bb09:	84 c0                	test   al,al
c000bb0b:	74 a7                	je     c000bab4 <UnixFile::~UnixFile()+0x24>
c000bb0d:	83 ec 0c             	sub    esp,0xc
c000bb10:	68 f4 44 02 c0       	push   0xc00244f4
c000bb15:	e8 53 95 00 00       	call   c001506d <Krnl::panic(char const*)>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	eb 95                	jmp    c000bab4 <UnixFile::~UnixFile()+0x24>
c000bb1f:	90                   	nop
c000bb20:	eb 01                	jmp    c000bb23 <UnixFile::~UnixFile()+0x93>
c000bb22:	90                   	nop
c000bb23:	90                   	nop
c000bb24:	83 c4 1c             	add    esp,0x1c
c000bb27:	c3                   	ret    

c000bb28 <UnixFile::~UnixFile()>:
c000bb28:	83 ec 0c             	sub    esp,0xc
c000bb2b:	83 ec 0c             	sub    esp,0xc
c000bb2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb32:	e8 59 ff ff ff       	call   c000ba90 <UnixFile::~UnixFile()>
c000bb37:	83 c4 10             	add    esp,0x10
c000bb3a:	83 ec 08             	sub    esp,0x8
c000bb3d:	6a 0c                	push   0xc
c000bb3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb43:	e8 22 14 00 00       	call   c000cf6a <operator delete(void*, unsigned long)>
c000bb48:	83 c4 10             	add    esp,0x10
c000bb4b:	83 c4 0c             	add    esp,0xc
c000bb4e:	c3                   	ret    
c000bb4f:	90                   	nop

c000bb50 <ReservedFilename::~ReservedFilename()>:
c000bb50:	83 ec 0c             	sub    esp,0xc
c000bb53:	ba 38 45 02 c0       	mov    edx,0xc0024538
c000bb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5c:	89 10                	mov    DWORD PTR [eax],edx
c000bb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb62:	83 ec 0c             	sub    esp,0xc
c000bb65:	50                   	push   eax
c000bb66:	e8 25 ff ff ff       	call   c000ba90 <UnixFile::~UnixFile()>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	90                   	nop
c000bb6f:	83 c4 0c             	add    esp,0xc
c000bb72:	c3                   	ret    
c000bb73:	90                   	nop

c000bb74 <ReservedFilename::~ReservedFilename()>:
c000bb74:	83 ec 0c             	sub    esp,0xc
c000bb77:	83 ec 0c             	sub    esp,0xc
c000bb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7e:	e8 cd ff ff ff       	call   c000bb50 <ReservedFilename::~ReservedFilename()>
c000bb83:	83 c4 10             	add    esp,0x10
c000bb86:	83 ec 08             	sub    esp,0x8
c000bb89:	6a 0c                	push   0xc
c000bb8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8f:	e8 d6 13 00 00       	call   c000cf6a <operator delete(void*, unsigned long)>
c000bb94:	83 c4 10             	add    esp,0x10
c000bb97:	83 c4 0c             	add    esp,0xc
c000bb9a:	c3                   	ret    

c000bb9b <getFromFileDescriptor(int)>:
c000bb9b:	53                   	push   ebx
c000bb9c:	83 ec 08             	sub    esp,0x8
c000bb9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bba3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bba9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbaf:	7f 2c                	jg     c000bbdd <getFromFileDescriptor(int)+0x42>
c000bbb1:	83 ec 0c             	sub    esp,0xc
c000bbb4:	68 78 83 02 c0       	push   0xc0028378
c000bbb9:	e8 de 6f 01 00       	call   c0022b9c <LinkedList<UnixFile>::getFirstElement()>
c000bbbe:	83 c4 10             	add    esp,0x10
c000bbc1:	85 c0                	test   eax,eax
c000bbc3:	75 04                	jne    c000bbc9 <getFromFileDescriptor(int)+0x2e>
c000bbc5:	31 c0                	xor    eax,eax
c000bbc7:	eb 6e                	jmp    c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bbc9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bbcc:	74 69                	je     c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bbce:	52                   	push   edx
c000bbcf:	52                   	push   edx
c000bbd0:	50                   	push   eax
c000bbd1:	68 78 83 02 c0       	push   0xc0028378
c000bbd6:	e8 6b 70 01 00       	call   c0022c46 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bbdb:	eb e1                	jmp    c000bbbe <getFromFileDescriptor(int)+0x23>
c000bbdd:	a1 6c 83 02 c0       	mov    eax,ds:0xc002836c
c000bbe2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bbe8:	74 4d                	je     c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bbea:	a1 70 83 02 c0       	mov    eax,ds:0xc0028370
c000bbef:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bbf5:	74 40                	je     c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bbf7:	a1 68 83 02 c0       	mov    eax,ds:0xc0028368
c000bbfc:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc02:	74 33                	je     c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bc04:	a1 64 83 02 c0       	mov    eax,ds:0xc0028364
c000bc09:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc0f:	74 26                	je     c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bc11:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc17:	83 f8 08             	cmp    eax,0x8
c000bc1a:	77 09                	ja     c000bc25 <getFromFileDescriptor(int)+0x8a>
c000bc1c:	8b 04 85 40 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7cc0]
c000bc23:	eb 12                	jmp    c000bc37 <getFromFileDescriptor(int)+0x9c>
c000bc25:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc2b:	83 fb 08             	cmp    ebx,0x8
c000bc2e:	77 95                	ja     c000bbc5 <getFromFileDescriptor(int)+0x2a>
c000bc30:	8b 04 9d 00 83 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7d00]
c000bc37:	83 c4 08             	add    esp,0x8
c000bc3a:	5b                   	pop    ebx
c000bc3b:	c3                   	ret    

c000bc3c <__static_initialization_and_destruction_0(int, int)>:
c000bc3c:	83 ec 0c             	sub    esp,0xc
c000bc3f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc44:	75 34                	jne    c000bc7a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc46:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc4e:	75 2a                	jne    c000bc7a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc50:	83 ec 0c             	sub    esp,0xc
c000bc53:	68 78 83 02 c0       	push   0xc0028378
c000bc58:	e8 29 6e 01 00       	call   c0022a86 <LinkedList<UnixFile>::LinkedList()>
c000bc5d:	83 c4 10             	add    esp,0x10
c000bc60:	83 ec 04             	sub    esp,0x4
c000bc63:	68 d8 74 02 c0       	push   0xc00274d8
c000bc68:	68 78 83 02 c0       	push   0xc0028378
c000bc6d:	68 84 2a 02 c0       	push   0xc0022a84
c000bc72:	e8 6d 12 00 00       	call   c000cee4 <__cxa_atexit>
c000bc77:	83 c4 10             	add    esp,0x10
c000bc7a:	90                   	nop
c000bc7b:	83 c4 0c             	add    esp,0xc
c000bc7e:	c3                   	ret    

c000bc7f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bc7f:	83 ec 0c             	sub    esp,0xc
c000bc82:	83 ec 08             	sub    esp,0x8
c000bc85:	68 ff ff 00 00       	push   0xffff
c000bc8a:	6a 01                	push   0x1
c000bc8c:	e8 ab ff ff ff       	call   c000bc3c <__static_initialization_and_destruction_0(int, int)>
c000bc91:	83 c4 10             	add    esp,0x10
c000bc94:	83 c4 0c             	add    esp,0xc
c000bc97:	c3                   	ret    

c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc98:	53                   	push   ebx
c000bc99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bca1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bca7:	89 c8                	mov    eax,ecx
c000bca9:	d1 e8                	shr    eax,1
c000bcab:	03 05 a8 76 02 c0    	add    eax,DWORD PTR ds:0xc00276a8
c000bcb1:	83 e1 01             	and    ecx,0x1
c000bcb4:	8a 10                	mov    dl,BYTE PTR [eax]
c000bcb6:	75 09                	jne    c000bcc1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bcb8:	83 e2 f0             	and    edx,0xfffffff0
c000bcbb:	09 da                	or     edx,ebx
c000bcbd:	88 10                	mov    BYTE PTR [eax],dl
c000bcbf:	5b                   	pop    ebx
c000bcc0:	c3                   	ret    
c000bcc1:	c1 e3 04             	shl    ebx,0x4
c000bcc4:	83 e2 0f             	and    edx,0xf
c000bcc7:	09 da                	or     edx,ebx
c000bcc9:	88 10                	mov    BYTE PTR [eax],dl
c000bccb:	5b                   	pop    ebx
c000bccc:	c3                   	ret    

c000bccd <Virt::getPageState(unsigned long)>:
c000bccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcd1:	8b 0d a8 76 02 c0    	mov    ecx,DWORD PTR ds:0xc00276a8
c000bcd7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bcdd:	89 d0                	mov    eax,edx
c000bcdf:	d1 e8                	shr    eax,1
c000bce1:	83 e2 01             	and    edx,0x1
c000bce4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bce7:	75 04                	jne    c000bced <Virt::getPageState(unsigned long)+0x20>
c000bce9:	83 e0 0f             	and    eax,0xf
c000bcec:	c3                   	ret    
c000bced:	c0 e8 04             	shr    al,0x4
c000bcf0:	c3                   	ret    

c000bcf1 <Virt::allocateKernelVirtualPages(int)>:
c000bcf1:	55                   	push   ebp
c000bcf2:	31 ed                	xor    ebp,ebp
c000bcf4:	57                   	push   edi
c000bcf5:	56                   	push   esi
c000bcf6:	53                   	push   ebx
c000bcf7:	31 db                	xor    ebx,ebx
c000bcf9:	83 ec 1c             	sub    esp,0x1c
c000bcfc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd00:	8b 3d a4 76 02 c0    	mov    edi,DWORD PTR ds:0xc00276a4
c000bd06:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd0b:	57                   	push   edi
c000bd0c:	e8 bc ff ff ff       	call   c000bccd <Virt::getPageState(unsigned long)>
c000bd11:	5a                   	pop    edx
c000bd12:	84 c0                	test   al,al
c000bd14:	75 3a                	jne    c000bd50 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd16:	85 db                	test   ebx,ebx
c000bd18:	75 02                	jne    c000bd1c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd1a:	89 fd                	mov    ebp,edi
c000bd1c:	43                   	inc    ebx
c000bd1d:	39 f3                	cmp    ebx,esi
c000bd1f:	74 5a                	je     c000bd7b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd21:	47                   	inc    edi
c000bd22:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd28:	76 31                	jbe    c000bd5b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd2a:	c7 05 a4 76 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00276a4,0xc8000
c000bd34:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd39:	75 28                	jne    c000bd63 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd3b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd40:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd45:	57                   	push   edi
c000bd46:	e8 82 ff ff ff       	call   c000bccd <Virt::getPageState(unsigned long)>
c000bd4b:	5a                   	pop    edx
c000bd4c:	84 c0                	test   al,al
c000bd4e:	74 c6                	je     c000bd16 <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd50:	31 db                	xor    ebx,ebx
c000bd52:	47                   	inc    edi
c000bd53:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd59:	77 cf                	ja     c000bd2a <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd5b:	89 3d a4 76 02 c0    	mov    DWORD PTR ds:0xc00276a4,edi
c000bd61:	eb a8                	jmp    c000bd0b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd63:	83 ec 0c             	sub    esp,0xc
c000bd66:	68 4c 45 02 c0       	push   0xc002454c
c000bd6b:	e8 fd 92 00 00       	call   c001506d <Krnl::panic(char const*)>
c000bd70:	8b 3d a4 76 02 c0    	mov    edi,DWORD PTR ds:0xc00276a4
c000bd76:	83 c4 10             	add    esp,0x10
c000bd79:	eb 90                	jmp    c000bd0b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd7b:	89 2d a4 76 02 c0    	mov    DWORD PTR ds:0xc00276a4,ebp
c000bd81:	4b                   	dec    ebx
c000bd82:	74 5f                	je     c000bde3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bd84:	85 f6                	test   esi,esi
c000bd86:	74 3d                	je     c000bdc5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd88:	89 e8                	mov    eax,ebp
c000bd8a:	31 db                	xor    ebx,ebx
c000bd8c:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd8f:	eb 14                	jmp    c000bda5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd91:	6a 01                	push   0x1
c000bd93:	43                   	inc    ebx
c000bd94:	50                   	push   eax
c000bd95:	e8 fe fe ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd9a:	58                   	pop    eax
c000bd9b:	39 f3                	cmp    ebx,esi
c000bd9d:	5a                   	pop    edx
c000bd9e:	74 25                	je     c000bdc5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bda0:	a1 a4 76 02 c0       	mov    eax,ds:0xc00276a4
c000bda5:	8d 50 01             	lea    edx,[eax+0x1]
c000bda8:	85 db                	test   ebx,ebx
c000bdaa:	89 15 a4 76 02 c0    	mov    DWORD PTR ds:0xc00276a4,edx
c000bdb0:	74 20                	je     c000bdd2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bdb2:	39 df                	cmp    edi,ebx
c000bdb4:	75 db                	jne    c000bd91 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bdb6:	6a 03                	push   0x3
c000bdb8:	43                   	inc    ebx
c000bdb9:	50                   	push   eax
c000bdba:	e8 d9 fe ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdbf:	59                   	pop    ecx
c000bdc0:	39 f3                	cmp    ebx,esi
c000bdc2:	58                   	pop    eax
c000bdc3:	75 db                	jne    c000bda0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bdc5:	83 c4 1c             	add    esp,0x1c
c000bdc8:	89 e8                	mov    eax,ebp
c000bdca:	5b                   	pop    ebx
c000bdcb:	c1 e0 0c             	shl    eax,0xc
c000bdce:	5e                   	pop    esi
c000bdcf:	5f                   	pop    edi
c000bdd0:	5d                   	pop    ebp
c000bdd1:	c3                   	ret    
c000bdd2:	6a 02                	push   0x2
c000bdd4:	bb 01 00 00 00       	mov    ebx,0x1
c000bdd9:	50                   	push   eax
c000bdda:	e8 b9 fe ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bddf:	58                   	pop    eax
c000bde0:	5a                   	pop    edx
c000bde1:	eb bd                	jmp    c000bda0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bde3:	6a 04                	push   0x4
c000bde5:	8d 45 01             	lea    eax,[ebp+0x1]
c000bde8:	55                   	push   ebp
c000bde9:	a3 a4 76 02 c0       	mov    ds:0xc00276a4,eax
c000bdee:	e8 a5 fe ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf3:	59                   	pop    ecx
c000bdf4:	89 e8                	mov    eax,ebp
c000bdf6:	5b                   	pop    ebx
c000bdf7:	c1 e0 0c             	shl    eax,0xc
c000bdfa:	83 c4 1c             	add    esp,0x1c
c000bdfd:	5b                   	pop    ebx
c000bdfe:	5e                   	pop    esi
c000bdff:	5f                   	pop    edi
c000be00:	5d                   	pop    ebp
c000be01:	c3                   	ret    

c000be02 <Virt::freeSwapfilePage(unsigned long)>:
c000be02:	53                   	push   ebx
c000be03:	8b 15 90 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028390
c000be09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be0d:	b8 01 00 00 00       	mov    eax,0x1
c000be12:	89 cb                	mov    ebx,ecx
c000be14:	d3 e0                	shl    eax,cl
c000be16:	c1 eb 05             	shr    ebx,0x5
c000be19:	f7 d0                	not    eax
c000be1b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be1e:	5b                   	pop    ebx
c000be1f:	c3                   	ret    

c000be20 <Virt::swapIDToSector(unsigned long)>:
c000be20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be24:	0f af 05 ac 76 02 c0 	imul   eax,DWORD PTR ds:0xc00276ac
c000be2b:	03 05 b4 76 02 c0    	add    eax,DWORD PTR ds:0xc00276b4
c000be31:	c3                   	ret    

c000be32 <Virt::allocateSwapfilePage()>:
c000be32:	55                   	push   ebp
c000be33:	31 d2                	xor    edx,edx
c000be35:	57                   	push   edi
c000be36:	56                   	push   esi
c000be37:	53                   	push   ebx
c000be38:	83 ec 0c             	sub    esp,0xc
c000be3b:	8b 0d ac 76 02 c0    	mov    ecx,DWORD PTR ds:0xc00276ac
c000be41:	a1 b0 76 02 c0       	mov    eax,ds:0xc00276b0
c000be46:	f7 f1                	div    ecx
c000be48:	39 0d b0 76 02 c0    	cmp    DWORD PTR ds:0xc00276b0,ecx
c000be4e:	72 2d                	jb     c000be7d <Virt::allocateSwapfilePage()+0x4b>
c000be50:	8b 35 90 83 02 c0    	mov    esi,DWORD PTR ds:0xc0028390
c000be56:	8b 16                	mov    edx,DWORD PTR [esi]
c000be58:	f6 c2 01             	test   dl,0x1
c000be5b:	74 3c                	je     c000be99 <Virt::allocateSwapfilePage()+0x67>
c000be5d:	31 c9                	xor    ecx,ecx
c000be5f:	bf 01 00 00 00       	mov    edi,0x1
c000be64:	eb 12                	jmp    c000be78 <Virt::allocateSwapfilePage()+0x46>
c000be66:	89 fd                	mov    ebp,edi
c000be68:	89 ca                	mov    edx,ecx
c000be6a:	d3 e5                	shl    ebp,cl
c000be6c:	c1 ea 05             	shr    edx,0x5
c000be6f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000be72:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be74:	85 ea                	test   edx,ebp
c000be76:	74 2a                	je     c000bea2 <Virt::allocateSwapfilePage()+0x70>
c000be78:	41                   	inc    ecx
c000be79:	39 c8                	cmp    eax,ecx
c000be7b:	77 e9                	ja     c000be66 <Virt::allocateSwapfilePage()+0x34>
c000be7d:	83 ec 0c             	sub    esp,0xc
c000be80:	68 04 47 02 c0       	push   0xc0024704
c000be85:	e8 e3 91 00 00       	call   c001506d <Krnl::panic(char const*)>
c000be8a:	83 c4 10             	add    esp,0x10
c000be8d:	31 c9                	xor    ecx,ecx
c000be8f:	83 c4 0c             	add    esp,0xc
c000be92:	89 c8                	mov    eax,ecx
c000be94:	5b                   	pop    ebx
c000be95:	5e                   	pop    esi
c000be96:	5f                   	pop    edi
c000be97:	5d                   	pop    ebp
c000be98:	c3                   	ret    
c000be99:	89 f3                	mov    ebx,esi
c000be9b:	bd 01 00 00 00       	mov    ebp,0x1
c000bea0:	31 c9                	xor    ecx,ecx
c000bea2:	09 ea                	or     edx,ebp
c000bea4:	89 c8                	mov    eax,ecx
c000bea6:	89 13                	mov    DWORD PTR [ebx],edx
c000bea8:	83 c4 0c             	add    esp,0xc
c000beab:	5b                   	pop    ebx
c000beac:	5e                   	pop    esi
c000bead:	5f                   	pop    edi
c000beae:	5d                   	pop    ebp
c000beaf:	c3                   	ret    

c000beb0 <Virt::virtualMemorySetup()>:
c000beb0:	53                   	push   ebx
c000beb1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000beb6:	6a 0f                	push   0xf
c000beb8:	53                   	push   ebx
c000beb9:	43                   	inc    ebx
c000beba:	e8 d9 fd ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bebf:	58                   	pop    eax
c000bec0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bec6:	5a                   	pop    edx
c000bec7:	75 ed                	jne    c000beb6 <Virt::virtualMemorySetup()+0x6>
c000bec9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bece:	6a 00                	push   0x0
c000bed0:	53                   	push   ebx
c000bed1:	43                   	inc    ebx
c000bed2:	e8 c1 fd ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bed7:	59                   	pop    ecx
c000bed8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bede:	58                   	pop    eax
c000bedf:	75 ed                	jne    c000bece <Virt::virtualMemorySetup()+0x1e>
c000bee1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bee6:	6a 0f                	push   0xf
c000bee8:	53                   	push   ebx
c000bee9:	43                   	inc    ebx
c000beea:	e8 a9 fd ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beef:	58                   	pop    eax
c000bef0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bef6:	5a                   	pop    edx
c000bef7:	75 ed                	jne    c000bee6 <Virt::virtualMemorySetup()+0x36>
c000bef9:	5b                   	pop    ebx
c000befa:	c3                   	ret    

c000befb <Virt::setupPageSwapping(int)>:
c000befb:	53                   	push   ebx
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf03:	a1 28 88 02 c0       	mov    eax,ds:0xc0028828
c000bf08:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf0e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf10:	53                   	push   ebx
c000bf11:	c1 e3 0b             	shl    ebx,0xb
c000bf14:	68 1b 47 02 c0       	push   0xc002471b
c000bf19:	50                   	push   eax
c000bf1a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf1d:	89 1d b0 76 02 c0    	mov    DWORD PTR ds:0xc00276b0,ebx
c000bf23:	c6 05 b8 76 02 c0 43 	mov    BYTE PTR ds:0xc00276b8,0x43
c000bf2a:	c1 eb 08             	shr    ebx,0x8
c000bf2d:	a3 b4 76 02 c0       	mov    ds:0xc00276b4,eax
c000bf32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf35:	c7 05 ac 76 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00276ac,0x8
c000bf3f:	e8 fb dd ff ff       	call   c0009d3f <malloc>
c000bf44:	83 c4 0c             	add    esp,0xc
c000bf47:	89 c1                	mov    ecx,eax
c000bf49:	a3 90 83 02 c0       	mov    ds:0xc0028390,eax
c000bf4e:	31 d2                	xor    edx,edx
c000bf50:	a1 b0 76 02 c0       	mov    eax,ds:0xc00276b0
c000bf55:	f7 35 ac 76 02 c0    	div    DWORD PTR ds:0xc00276ac
c000bf5b:	c1 e8 05             	shr    eax,0x5
c000bf5e:	50                   	push   eax
c000bf5f:	6a 00                	push   0x0
c000bf61:	51                   	push   ecx
c000bf62:	e8 1d 47 ff ff       	call   c0000684 <memset>
c000bf67:	83 c4 18             	add    esp,0x18
c000bf6a:	5b                   	pop    ebx
c000bf6b:	c3                   	ret    

c000bf6c <VAS::VAS(VAS*)>:
c000bf6c:	83 ec 0c             	sub    esp,0xc
c000bf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf7e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	68 6c 45 02 c0       	push   0xc002456c
c000bf8d:	e8 db 90 00 00       	call   c001506d <Krnl::panic(char const*)>
c000bf92:	83 c4 10             	add    esp,0x10
c000bf95:	90                   	nop
c000bf96:	83 c4 0c             	add    esp,0xc
c000bf99:	c3                   	ret    

c000bf9a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf9e:	89 c2                	mov    edx,eax
c000bfa0:	c1 e8 0a             	shr    eax,0xa
c000bfa3:	c1 ea 16             	shr    edx,0x16
c000bfa6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bfab:	19 c9                	sbb    ecx,ecx
c000bfad:	c1 e2 0c             	shl    edx,0xc
c000bfb0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bfb6:	25 fc 0f 00 00       	and    eax,0xffc
c000bfbb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bfc2:	01 d0                	add    eax,edx
c000bfc4:	c3                   	ret    
c000bfc5:	90                   	nop

c000bfc6 <VAS::getPageTableEntry(unsigned long)>:
c000bfc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfca:	89 ca                	mov    edx,ecx
c000bfcc:	c1 e9 0a             	shr    ecx,0xa
c000bfcf:	c1 ea 16             	shr    edx,0x16
c000bfd2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bfd8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bfde:	c1 e0 0c             	shl    eax,0xc
c000bfe1:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bfe4:	c3                   	ret    

c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bfe5:	57                   	push   edi
c000bfe6:	56                   	push   esi
c000bfe7:	be 01 00 00 00       	mov    esi,0x1
c000bfec:	53                   	push   ebx
c000bfed:	83 ec 10             	sub    esp,0x10
c000bff0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bff4:	c1 eb 0c             	shr    ebx,0xc
c000bff7:	eb 3f                	jmp    c000c038 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bff9:	83 ec 08             	sub    esp,0x8
c000bffc:	57                   	push   edi
c000bffd:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c000c003:	e8 be ff ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000c008:	83 c4 10             	add    esp,0x10
c000c00b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c00d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c011:	f6 c4 04             	test   ah,0x4
c000c014:	75 5f                	jne    c000c075 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c016:	80 fa 04             	cmp    dl,0x4
c000c019:	74 78                	je     c000c093 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c01b:	80 fa 02             	cmp    dl,0x2
c000c01e:	0f 84 88 00 00 00    	je     c000c0ac <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c024:	80 fa 03             	cmp    dl,0x3
c000c027:	0f 84 ad 00 00 00    	je     c000c0da <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c02d:	fe ca                	dec    dl
c000c02f:	0f 84 92 00 00 00    	je     c000c0c7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c035:	43                   	inc    ebx
c000c036:	31 f6                	xor    esi,esi
c000c038:	53                   	push   ebx
c000c039:	89 df                	mov    edi,ebx
c000c03b:	e8 8d fc ff ff       	call   c000bccd <Virt::getPageState(unsigned long)>
c000c040:	c1 e7 0c             	shl    edi,0xc
c000c043:	59                   	pop    ecx
c000c044:	84 c0                	test   al,al
c000c046:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c04a:	75 ad                	jne    c000bff9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c04c:	83 ec 0c             	sub    esp,0xc
c000c04f:	68 32 47 02 c0       	push   0xc0024732
c000c054:	e8 14 90 00 00       	call   c001506d <Krnl::panic(char const*)>
c000c059:	58                   	pop    eax
c000c05a:	5a                   	pop    edx
c000c05b:	57                   	push   edi
c000c05c:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c000c062:	e8 5f ff ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000c067:	83 c4 10             	add    esp,0x10
c000c06a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c06c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c070:	f6 c4 04             	test   ah,0x4
c000c073:	74 c0                	je     c000c035 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c075:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c079:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c07e:	83 ec 0c             	sub    esp,0xc
c000c081:	50                   	push   eax
c000c082:	e8 ec e2 ff ff       	call   c000a373 <Phys::freePage(unsigned long)>
c000c087:	83 c4 10             	add    esp,0x10
c000c08a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c08e:	80 fa 04             	cmp    dl,0x4
c000c091:	75 88                	jne    c000c01b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c093:	89 f0                	mov    eax,esi
c000c095:	84 c0                	test   al,al
c000c097:	75 47                	jne    c000c0e0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c099:	c7 44 24 20 90 45 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024590
c000c0a1:	83 c4 10             	add    esp,0x10
c000c0a4:	5b                   	pop    ebx
c000c0a5:	5e                   	pop    esi
c000c0a6:	5f                   	pop    edi
c000c0a7:	e9 c1 8f 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c000c0ac:	89 f0                	mov    eax,esi
c000c0ae:	84 c0                	test   al,al
c000c0b0:	75 15                	jne    c000c0c7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0b2:	83 ec 0c             	sub    esp,0xc
c000c0b5:	68 4e 47 02 c0       	push   0xc002474e
c000c0ba:	e8 ae 8f 00 00       	call   c001506d <Krnl::panic(char const*)>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	e9 6e ff ff ff       	jmp    c000c035 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0c7:	83 ec 08             	sub    esp,0x8
c000c0ca:	6a 00                	push   0x0
c000c0cc:	53                   	push   ebx
c000c0cd:	e8 c6 fb ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	e9 5b ff ff ff       	jmp    c000c035 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0da:	89 f0                	mov    eax,esi
c000c0dc:	84 c0                	test   al,al
c000c0de:	75 15                	jne    c000c0f5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c0e0:	83 ec 08             	sub    esp,0x8
c000c0e3:	6a 00                	push   0x0
c000c0e5:	53                   	push   ebx
c000c0e6:	e8 ad fb ff ff       	call   c000bc98 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	5b                   	pop    ebx
c000c0f2:	5e                   	pop    esi
c000c0f3:	5f                   	pop    edi
c000c0f4:	c3                   	ret    
c000c0f5:	c7 44 24 20 6a 47 02 c0 	mov    DWORD PTR [esp+0x20],0xc002476a
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	5b                   	pop    ebx
c000c101:	5e                   	pop    esi
c000c102:	5f                   	pop    edi
c000c103:	e9 65 8f 00 00       	jmp    c001506d <Krnl::panic(char const*)>

c000c108 <VAS::freeAllocatedPages(unsigned long)>:
c000c108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c10c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c110:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c114:	74 09                	je     c000c11f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c116:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c11a:	e9 c6 fe ff ff       	jmp    c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c11f:	c7 44 24 04 b4 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc00245b4
c000c127:	e9 1f 0f 00 00       	jmp    c000d04b <Dbg::kprintf(char const*, ...)>

c000c12c <VAS::virtualToPhysical(unsigned long)>:
c000c12c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c130:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c134:	e8 8d fe ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000c139:	5a                   	pop    edx
c000c13a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c13c:	59                   	pop    ecx
c000c13d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c142:	c3                   	ret    
c000c143:	90                   	nop

c000c144 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c144:	55                   	push   ebp
c000c145:	57                   	push   edi
c000c146:	56                   	push   esi
c000c147:	53                   	push   ebx
c000c148:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c14c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c150:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c154:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c158:	85 db                	test   ebx,ebx
c000c15a:	7e 22                	jle    c000c17e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c15c:	c1 e3 0c             	shl    ebx,0xc
c000c15f:	01 f3                	add    ebx,esi
c000c161:	56                   	push   esi
c000c162:	81 c6 00 10 00 00    	add    esi,0x1000
c000c168:	55                   	push   ebp
c000c169:	e8 58 fe ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000c16e:	5a                   	pop    edx
c000c16f:	59                   	pop    ecx
c000c170:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c172:	21 f9                	and    ecx,edi
c000c174:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c178:	39 f3                	cmp    ebx,esi
c000c17a:	89 08                	mov    DWORD PTR [eax],ecx
c000c17c:	75 e3                	jne    c000c161 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c17e:	5b                   	pop    ebx
c000c17f:	5e                   	pop    esi
c000c180:	5f                   	pop    edi
c000c181:	5d                   	pop    ebp
c000c182:	c3                   	ret    
c000c183:	90                   	nop

c000c184 <VAS::setToWriteCombining(unsigned long, int)>:
c000c184:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c189:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c18f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c196:	75 01                	jne    c000c199 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c198:	c3                   	ret    
c000c199:	68 80 00 00 00       	push   0x80
c000c19e:	6a ff                	push   0xffffffff
c000c1a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ac:	e8 93 ff ff ff       	call   c000c144 <VAS::reflagRange(unsigned long, int, int, int)>
c000c1b1:	83 c4 14             	add    esp,0x14
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c1b6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c1bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1c6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c1c9:	19 c0                	sbb    eax,eax
c000c1cb:	83 ca 03             	or     edx,0x3
c000c1ce:	83 e0 fc             	and    eax,0xfffffffc
c000c1d1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c1d8:	0f 20 d8             	mov    eax,cr3
c000c1db:	0f 22 d8             	mov    cr3,eax
c000c1de:	c3                   	ret    
c000c1df:	90                   	nop

c000c1e0 <VAS::~VAS()>:
c000c1e0:	83 ec 2c             	sub    esp,0x2c
c000c1e3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c1eb:	fa                   	cli    
c000c1ec:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000c1f1:	40                   	inc    eax
c000c1f2:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000c1f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c201:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c207:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c20b:	6a 01                	push   0x1
c000c20d:	50                   	push   eax
c000c20e:	e8 a3 ff ff ff       	call   c000c1b6 <VAS::mapOtherVASIn(bool, VAS*)>
c000c213:	83 c4 0c             	add    esp,0xc
c000c216:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c21e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c226:	0f 8f d4 00 00 00    	jg     c000c300 <VAS::~VAS()+0x120>
c000c22c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c230:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c233:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c237:	c1 e2 02             	shl    edx,0x2
c000c23a:	01 d0                	add    eax,edx
c000c23c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c23e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c246:	83 e0 01             	and    eax,0x1
c000c249:	0f 84 a8 00 00 00    	je     c000c2f7 <VAS::~VAS()+0x117>
c000c24f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c257:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c25f:	7f 72                	jg     c000c2d3 <VAS::~VAS()+0xf3>
c000c261:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c265:	c1 e0 0a             	shl    eax,0xa
c000c268:	89 c2                	mov    edx,eax
c000c26a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c26e:	01 d0                	add    eax,edx
c000c270:	c1 e0 0c             	shl    eax,0xc
c000c273:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c277:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c27c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c27e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c281:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c287:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c28b:	6a 01                	push   0x1
c000c28d:	50                   	push   eax
c000c28e:	e8 07 fd ff ff       	call   c000bf9a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c293:	83 c4 0c             	add    esp,0xc
c000c296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c29e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c2a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2a8:	25 01 04 00 00       	and    eax,0x401
c000c2ad:	3d 01 04 00 00       	cmp    eax,0x401
c000c2b2:	75 19                	jne    c000c2cd <VAS::~VAS()+0xed>
c000c2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2bd:	83 ec 0c             	sub    esp,0xc
c000c2c0:	50                   	push   eax
c000c2c1:	e8 ad e0 ff ff       	call   c000a373 <Phys::freePage(unsigned long)>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2cd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c2d1:	eb 84                	jmp    c000c257 <VAS::~VAS()+0x77>
c000c2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2d7:	25 00 04 00 00       	and    eax,0x400
c000c2dc:	74 19                	je     c000c2f7 <VAS::~VAS()+0x117>
c000c2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2e7:	83 ec 0c             	sub    esp,0xc
c000c2ea:	50                   	push   eax
c000c2eb:	e8 83 e0 ff ff       	call   c000a373 <Phys::freePage(unsigned long)>
c000c2f0:	83 c4 10             	add    esp,0x10
c000c2f3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2f7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c2fb:	e9 1e ff ff ff       	jmp    c000c21e <VAS::~VAS()+0x3e>
c000c300:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c304:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c307:	83 ec 0c             	sub    esp,0xc
c000c30a:	50                   	push   eax
c000c30b:	e8 d5 fc ff ff       	call   c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c317:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c31a:	83 ec 0c             	sub    esp,0xc
c000c31d:	50                   	push   eax
c000c31e:	e8 50 e0 ff ff       	call   c000a373 <Phys::freePage(unsigned long)>
c000c323:	83 c4 10             	add    esp,0x10
c000c326:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c32a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c32e:	c1 e0 02             	shl    eax,0x2
c000c331:	83 ec 08             	sub    esp,0x8
c000c334:	50                   	push   eax
c000c335:	68 d8 45 02 c0       	push   0xc00245d8
c000c33a:	e8 0c 0d 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000c33f:	83 c4 10             	add    esp,0x10
c000c342:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000c347:	48                   	dec    eax
c000c348:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000c34d:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000c352:	85 c0                	test   eax,eax
c000c354:	75 01                	jne    c000c357 <VAS::~VAS()+0x177>
c000c356:	fb                   	sti    
c000c357:	90                   	nop
c000c358:	83 c4 2c             	add    esp,0x2c
c000c35b:	c3                   	ret    

c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c35c:	55                   	push   ebp
c000c35d:	57                   	push   edi
c000c35e:	56                   	push   esi
c000c35f:	53                   	push   ebx
c000c360:	83 ec 1c             	sub    esp,0x1c
c000c363:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c367:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c36b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c371:	77 08                	ja     c000c37b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c373:	0f 20 d8             	mov    eax,cr3
c000c376:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c379:	75 47                	jne    c000c3c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c37b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c37f:	09 d8                	or     eax,ebx
c000c381:	a9 ff 0f 00 00       	test   eax,0xfff
c000c386:	75 57                	jne    c000c3df <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c388:	89 de                	mov    esi,ebx
c000c38a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c38d:	c1 ee 16             	shr    esi,0x16
c000c390:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c397:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c39b:	74 54                	je     c000c3f1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c39d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c3a7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c3ab:	c1 e6 0c             	shl    esi,0xc
c000c3ae:	c1 eb 0a             	shr    ebx,0xa
c000c3b1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c3b7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c3ba:	83 c4 1c             	add    esp,0x1c
c000c3bd:	5b                   	pop    ebx
c000c3be:	5e                   	pop    esi
c000c3bf:	5f                   	pop    edi
c000c3c0:	5d                   	pop    ebp
c000c3c1:	c3                   	ret    
c000c3c2:	83 ec 0c             	sub    esp,0xc
c000c3c5:	68 f8 45 02 c0       	push   0xc00245f8
c000c3ca:	e8 7c 0c 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3d6:	09 d8                	or     eax,ebx
c000c3d8:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3dd:	74 a9                	je     c000c388 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c3df:	83 ec 0c             	sub    esp,0xc
c000c3e2:	68 60 46 02 c0       	push   0xc0024660
c000c3e7:	e8 81 8c 00 00       	call   c001506d <Krnl::panic(char const*)>
c000c3ec:	83 c4 10             	add    esp,0x10
c000c3ef:	eb 97                	jmp    c000c388 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c3f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3f5:	e8 fc df ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	89 c5                	mov    ebp,eax
c000c3ff:	8b 0d 94 83 02 c0    	mov    ecx,DWORD PTR ds:0xc0028394
c000c405:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c409:	6a 01                	push   0x1
c000c40b:	e8 e1 f8 ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c000c410:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c417:	6a 01                	push   0x1
c000c419:	50                   	push   eax
c000c41a:	55                   	push   ebp
c000c41b:	81 cd 07 04 00 00    	or     ebp,0x407
c000c421:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c425:	51                   	push   ecx
c000c426:	e8 27 02 00 00       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c42b:	83 c4 1c             	add    esp,0x1c
c000c42e:	68 00 10 00 00       	push   0x1000
c000c433:	6a 00                	push   0x0
c000c435:	50                   	push   eax
c000c436:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c43a:	e8 45 42 ff ff       	call   c0000684 <memset>
c000c43f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c443:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c446:	e8 9a fb ff ff       	call   c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c44b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c44f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c452:	83 c4 10             	add    esp,0x10
c000c455:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c458:	e9 40 ff ff ff       	jmp    c000c39d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c45d:	90                   	nop

c000c45e <VAS::allocatePages(int, int)>:
c000c45e:	55                   	push   ebp
c000c45f:	57                   	push   edi
c000c460:	56                   	push   esi
c000c461:	53                   	push   ebx
c000c462:	83 ec 1c             	sub    esp,0x1c
c000c465:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c469:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c46e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c474:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c47a:	83 e0 01             	and    eax,0x1
c000c47d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c481:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c485:	0f 85 cc 00 00 00    	jne    c000c557 <VAS::allocatePages(int, int)+0xf9>
c000c48b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c48e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c492:	85 c0                	test   eax,eax
c000c494:	0f 84 a1 00 00 00    	je     c000c53b <VAS::allocatePages(int, int)+0xdd>
c000c49a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c49e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c4a2:	c1 e6 0c             	shl    esi,0xc
c000c4a5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c4a9:	85 c0                	test   eax,eax
c000c4ab:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c4ae:	7e 33                	jle    c000c4e3 <VAS::allocatePages(int, int)+0x85>
c000c4b0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c4b8:	81 cd 00 04 00 00    	or     ebp,0x400
c000c4be:	e8 33 df ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000c4c3:	55                   	push   ebp
c000c4c4:	53                   	push   ebx
c000c4c5:	50                   	push   eax
c000c4c6:	57                   	push   edi
c000c4c7:	e8 90 fe ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4cc:	83 c4 10             	add    esp,0x10
c000c4cf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c4d4:	74 03                	je     c000c4d9 <VAS::allocatePages(int, int)+0x7b>
c000c4d6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c4d9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4df:	39 de                	cmp    esi,ebx
c000c4e1:	75 db                	jne    c000c4be <VAS::allocatePages(int, int)+0x60>
c000c4e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c4e8:	75 12                	jne    c000c4fc <VAS::allocatePages(int, int)+0x9e>
c000c4ea:	0f 20 d8             	mov    eax,cr3
c000c4ed:	0f 22 d8             	mov    cr3,eax
c000c4f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4f4:	83 c4 1c             	add    esp,0x1c
c000c4f7:	5b                   	pop    ebx
c000c4f8:	5e                   	pop    esi
c000c4f9:	5f                   	pop    edi
c000c4fa:	5d                   	pop    ebp
c000c4fb:	c3                   	ret    
c000c4fc:	c1 ee 0a             	shr    esi,0xa
c000c4ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c503:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c509:	c1 eb 0a             	shr    ebx,0xa
c000c50c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c512:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c518:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c51e:	39 c3                	cmp    ebx,eax
c000c520:	77 ce                	ja     c000c4f0 <VAS::allocatePages(int, int)+0x92>
c000c522:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c525:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c52b:	39 d8                	cmp    eax,ebx
c000c52d:	73 f3                	jae    c000c522 <VAS::allocatePages(int, int)+0xc4>
c000c52f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c533:	83 c4 1c             	add    esp,0x1c
c000c536:	5b                   	pop    ebx
c000c537:	5e                   	pop    esi
c000c538:	5f                   	pop    edi
c000c539:	5d                   	pop    ebp
c000c53a:	c3                   	ret    
c000c53b:	83 ec 0c             	sub    esp,0xc
c000c53e:	68 84 46 02 c0       	push   0xc0024684
c000c543:	e8 25 8b 00 00       	call   c001506d <Krnl::panic(char const*)>
c000c548:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c54b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c54f:	83 c4 10             	add    esp,0x10
c000c552:	e9 43 ff ff ff       	jmp    c000c49a <VAS::allocatePages(int, int)+0x3c>
c000c557:	83 ec 0c             	sub    esp,0xc
c000c55a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c55e:	e8 8e f7 ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c000c563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c567:	83 c4 10             	add    esp,0x10
c000c56a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c56f:	0f 87 9b 00 00 00    	ja     c000c610 <VAS::allocatePages(int, int)+0x1b2>
c000c575:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c579:	85 d2                	test   edx,edx
c000c57b:	7e 3c                	jle    c000c5b9 <VAS::allocatePages(int, int)+0x15b>
c000c57d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c581:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c585:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c589:	c1 e5 0c             	shl    ebp,0xc
c000c58c:	81 ce 00 04 00 00    	or     esi,0x400
c000c592:	01 dd                	add    ebp,ebx
c000c594:	e8 5d de ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000c599:	56                   	push   esi
c000c59a:	53                   	push   ebx
c000c59b:	50                   	push   eax
c000c59c:	57                   	push   edi
c000c59d:	e8 ba fd ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5a2:	83 c4 10             	add    esp,0x10
c000c5a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c5aa:	74 03                	je     c000c5af <VAS::allocatePages(int, int)+0x151>
c000c5ac:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5af:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5b5:	39 dd                	cmp    ebp,ebx
c000c5b7:	75 db                	jne    c000c594 <VAS::allocatePages(int, int)+0x136>
c000c5b9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c5be:	0f 84 26 ff ff ff    	je     c000c4ea <VAS::allocatePages(int, int)+0x8c>
c000c5c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5cc:	89 d3                	mov    ebx,edx
c000c5ce:	c1 e0 0c             	shl    eax,0xc
c000c5d1:	c1 eb 0a             	shr    ebx,0xa
c000c5d4:	01 d0                	add    eax,edx
c000c5d6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c5dc:	c1 e8 0a             	shr    eax,0xa
c000c5df:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c5e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c5ea:	2d 00 00 40 00       	sub    eax,0x400000
c000c5ef:	39 c3                	cmp    ebx,eax
c000c5f1:	0f 87 f9 fe ff ff    	ja     c000c4f0 <VAS::allocatePages(int, int)+0x92>
c000c5f7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5fa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c600:	39 d8                	cmp    eax,ebx
c000c602:	73 f3                	jae    c000c5f7 <VAS::allocatePages(int, int)+0x199>
c000c604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c608:	83 c4 1c             	add    esp,0x1c
c000c60b:	5b                   	pop    ebx
c000c60c:	5e                   	pop    esi
c000c60d:	5f                   	pop    edi
c000c60e:	5d                   	pop    ebp
c000c60f:	c3                   	ret    
c000c610:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c615:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c61b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c622:	0f 84 4d ff ff ff    	je     c000c575 <VAS::allocatePages(int, int)+0x117>
c000c628:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c630:	e9 40 ff ff ff       	jmp    c000c575 <VAS::allocatePages(int, int)+0x117>
c000c635:	90                   	nop

c000c636 <VAS::setCPUSpecific(unsigned long)>:
c000c636:	83 ec 0c             	sub    esp,0xc
c000c639:	6a 05                	push   0x5
c000c63b:	68 00 00 40 c2       	push   0xc2400000
c000c640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c648:	e8 0f fd ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c64d:	83 c4 1c             	add    esp,0x1c
c000c650:	c3                   	ret    
c000c651:	90                   	nop

c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c652:	55                   	push   ebp
c000c653:	57                   	push   edi
c000c654:	56                   	push   esi
c000c655:	53                   	push   ebx
c000c656:	83 ec 1c             	sub    esp,0x1c
c000c659:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c65e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c662:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c668:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c66c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c672:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c676:	83 e0 01             	and    eax,0x1
c000c679:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c67d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c681:	85 c0                	test   eax,eax
c000c683:	7e 39                	jle    c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c685:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c689:	89 f3                	mov    ebx,esi
c000c68b:	c1 e0 0c             	shl    eax,0xc
c000c68e:	01 f0                	add    eax,esi
c000c690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c694:	55                   	push   ebp
c000c695:	53                   	push   ebx
c000c696:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c69a:	29 f0                	sub    eax,esi
c000c69c:	01 d8                	add    eax,ebx
c000c69e:	50                   	push   eax
c000c69f:	57                   	push   edi
c000c6a0:	e8 b7 fc ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6a5:	83 c4 10             	add    esp,0x10
c000c6a8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c6ad:	74 03                	je     c000c6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c6af:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6b8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c6bc:	75 d6                	jne    c000c694 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c6be:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c6c3:	75 10                	jne    c000c6d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c6c5:	0f 20 d8             	mov    eax,cr3
c000c6c8:	0f 22 d8             	mov    cr3,eax
c000c6cb:	83 c4 1c             	add    esp,0x1c
c000c6ce:	89 f0                	mov    eax,esi
c000c6d0:	5b                   	pop    ebx
c000c6d1:	5e                   	pop    esi
c000c6d2:	5f                   	pop    edi
c000c6d3:	5d                   	pop    ebp
c000c6d4:	c3                   	ret    
c000c6d5:	89 f3                	mov    ebx,esi
c000c6d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6db:	c1 eb 0a             	shr    ebx,0xa
c000c6de:	c1 e0 0c             	shl    eax,0xc
c000c6e1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c6e7:	01 f0                	add    eax,esi
c000c6e9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c6ef:	c1 e8 0a             	shr    eax,0xa
c000c6f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6f7:	2d 00 00 40 00       	sub    eax,0x400000
c000c6fc:	39 c3                	cmp    ebx,eax
c000c6fe:	77 cb                	ja     c000c6cb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c700:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c703:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c709:	39 d8                	cmp    eax,ebx
c000c70b:	73 f3                	jae    c000c700 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c70d:	83 c4 1c             	add    esp,0x1c
c000c710:	89 f0                	mov    eax,esi
c000c712:	5b                   	pop    ebx
c000c713:	5e                   	pop    esi
c000c714:	5f                   	pop    edi
c000c715:	5d                   	pop    ebp
c000c716:	c3                   	ret    
c000c717:	90                   	nop

c000c718 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c718:	55                   	push   ebp
c000c719:	57                   	push   edi
c000c71a:	56                   	push   esi
c000c71b:	53                   	push   ebx
c000c71c:	83 ec 1c             	sub    esp,0x1c
c000c71f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c723:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c727:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c72b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c72f:	a9 ff 0f 00 00       	test   eax,0xfff
c000c734:	75 4a                	jne    c000c780 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c736:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c73a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c73d:	c1 eb 16             	shr    ebx,0x16
c000c740:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c747:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c74b:	74 4d                	je     c000c79a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c74d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c751:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c755:	c1 e8 0a             	shr    eax,0xa
c000c758:	80 fa 01             	cmp    dl,0x1
c000c75b:	19 d2                	sbb    edx,edx
c000c75d:	c1 e3 0c             	shl    ebx,0xc
c000c760:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c764:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c76a:	25 fc 0f 00 00       	and    eax,0xffc
c000c76f:	01 d8                	add    eax,ebx
c000c771:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c778:	83 c4 1c             	add    esp,0x1c
c000c77b:	5b                   	pop    ebx
c000c77c:	5e                   	pop    esi
c000c77d:	5f                   	pop    edi
c000c77e:	5d                   	pop    ebp
c000c77f:	c3                   	ret    
c000c780:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c784:	83 ec 0c             	sub    esp,0xc
c000c787:	68 b0 46 02 c0       	push   0xc00246b0
c000c78c:	e8 dc 88 00 00       	call   c001506d <Krnl::panic(char const*)>
c000c791:	83 c4 10             	add    esp,0x10
c000c794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c798:	eb 9c                	jmp    c000c736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c79a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c79e:	e8 53 dc ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000c7a3:	83 ec 0c             	sub    esp,0xc
c000c7a6:	89 c5                	mov    ebp,eax
c000c7a8:	8b 0d 94 83 02 c0    	mov    ecx,DWORD PTR ds:0xc0028394
c000c7ae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c7b2:	6a 01                	push   0x1
c000c7b4:	e8 38 f5 ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c000c7b9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c7c0:	6a 01                	push   0x1
c000c7c2:	50                   	push   eax
c000c7c3:	55                   	push   ebp
c000c7c4:	81 cd 07 04 00 00    	or     ebp,0x407
c000c7ca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c7ce:	51                   	push   ecx
c000c7cf:	e8 7e fe ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7d4:	83 c4 1c             	add    esp,0x1c
c000c7d7:	68 00 10 00 00       	push   0x1000
c000c7dc:	6a 00                	push   0x0
c000c7de:	50                   	push   eax
c000c7df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7e3:	e8 9c 3e ff ff       	call   c0000684 <memset>
c000c7e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c7ec:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c7ef:	e8 f1 f7 ff ff       	call   c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c7f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7f7:	83 c4 10             	add    esp,0x10
c000c7fa:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c7fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c801:	e9 47 ff ff ff       	jmp    c000c74d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c806 <VAS::VAS(bool)>:
c000c806:	53                   	push   ebx
c000c807:	83 ec 28             	sub    esp,0x28
c000c80a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c80e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c812:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c816:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c81d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c821:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c828:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c82c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c830:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c833:	e8 be db ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000c838:	89 c2                	mov    edx,eax
c000c83a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c83e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c841:	8b 1d 94 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028394
c000c847:	83 ec 0c             	sub    esp,0xc
c000c84a:	6a 01                	push   0x1
c000c84c:	e8 a0 f4 ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c000c851:	83 c4 10             	add    esp,0x10
c000c854:	89 c2                	mov    edx,eax
c000c856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c85a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c85d:	83 ec 0c             	sub    esp,0xc
c000c860:	6a 03                	push   0x3
c000c862:	6a 01                	push   0x1
c000c864:	52                   	push   edx
c000c865:	50                   	push   eax
c000c866:	53                   	push   ebx
c000c867:	e8 e6 fd ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c86c:	83 c4 20             	add    esp,0x20
c000c86f:	89 c2                	mov    edx,eax
c000c871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c875:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c878:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c880:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c888:	7f 1c                	jg     c000c8a6 <VAS::VAS(bool)+0xa0>
c000c88a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c88e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c891:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c895:	c1 e2 02             	shl    edx,0x2
c000c898:	01 d0                	add    eax,edx
c000c89a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c8a4:	eb da                	jmp    c000c880 <VAS::VAS(bool)+0x7a>
c000c8a6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c8ae:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c8b6:	7f 7a                	jg     c000c932 <VAS::VAS(bool)+0x12c>
c000c8b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c8bc:	2d 00 02 00 00       	sub    eax,0x200
c000c8c1:	c1 e0 0c             	shl    eax,0xc
c000c8c4:	83 c8 03             	or     eax,0x3
c000c8c7:	89 c2                	mov    edx,eax
c000c8c9:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c8ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8d4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c8da:	83 e0 10             	and    eax,0x10
c000c8dd:	84 c0                	test   al,al
c000c8df:	74 07                	je     c000c8e8 <VAS::VAS(bool)+0xe2>
c000c8e1:	b8 00 01 00 00       	mov    eax,0x100
c000c8e6:	eb 05                	jmp    c000c8ed <VAS::VAS(bool)+0xe7>
c000c8e8:	b8 00 00 00 00       	mov    eax,0x0
c000c8ed:	09 d0                	or     eax,edx
c000c8ef:	89 c1                	mov    ecx,eax
c000c8f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8fc:	c1 e2 02             	shl    edx,0x2
c000c8ff:	01 d0                	add    eax,edx
c000c901:	89 ca                	mov    edx,ecx
c000c903:	89 10                	mov    DWORD PTR [eax],edx
c000c905:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c909:	2d 40 03 00 00       	sub    eax,0x340
c000c90e:	83 f8 7f             	cmp    eax,0x7f
c000c911:	77 16                	ja     c000c929 <VAS::VAS(bool)+0x123>
c000c913:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c917:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c91a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c91e:	c1 e2 02             	shl    edx,0x2
c000c921:	01 d0                	add    eax,edx
c000c923:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c929:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c92d:	e9 7c ff ff ff       	jmp    c000c8ae <VAS::VAS(bool)+0xa8>
c000c932:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c937:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c93d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c943:	83 e0 10             	and    eax,0x10
c000c946:	84 c0                	test   al,al
c000c948:	74 07                	je     c000c951 <VAS::VAS(bool)+0x14b>
c000c94a:	b8 03 41 00 00       	mov    eax,0x4103
c000c94f:	eb 05                	jmp    c000c956 <VAS::VAS(bool)+0x150>
c000c951:	b8 03 40 00 00       	mov    eax,0x4003
c000c956:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c95a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c95d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c963:	89 02                	mov    DWORD PTR [edx],eax
c000c965:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c96a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c970:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c976:	83 ec 08             	sub    esp,0x8
c000c979:	50                   	push   eax
c000c97a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c97e:	e8 b3 fc ff ff       	call   c000c636 <VAS::setCPUSpecific(unsigned long)>
c000c983:	83 c4 10             	add    esp,0x10
c000c986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c98a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c98d:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c992:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c998:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c99e:	83 e0 10             	and    eax,0x10
c000c9a1:	84 c0                	test   al,al
c000c9a3:	74 07                	je     c000c9ac <VAS::VAS(bool)+0x1a6>
c000c9a5:	b8 00 01 00 00       	mov    eax,0x100
c000c9aa:	eb 05                	jmp    c000c9b1 <VAS::VAS(bool)+0x1ab>
c000c9ac:	b8 00 00 00 00       	mov    eax,0x0
c000c9b1:	09 c2                	or     edx,eax
c000c9b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9ba:	05 fc 0f 00 00       	add    eax,0xffc
c000c9bf:	83 ca 03             	or     edx,0x3
c000c9c2:	89 10                	mov    DWORD PTR [eax],edx
c000c9c4:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000c9c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9cf:	83 ec 0c             	sub    esp,0xc
c000c9d2:	50                   	push   eax
c000c9d3:	e8 26 1e 00 00       	call   c000e7fe <Device::getName()>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	83 ec 08             	sub    esp,0x8
c000c9de:	68 84 47 02 c0       	push   0xc0024784
c000c9e3:	50                   	push   eax
c000c9e4:	e8 e3 3d ff ff       	call   c00007cc <strcmp>
c000c9e9:	83 c4 10             	add    esp,0x10
c000c9ec:	85 c0                	test   eax,eax
c000c9ee:	0f 94 c0             	sete   al
c000c9f1:	84 c0                	test   al,al
c000c9f3:	0f 84 87 00 00 00    	je     c000ca80 <VAS::VAS(bool)+0x27a>
c000c9f9:	fa                   	cli    
c000c9fa:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000c9ff:	40                   	inc    eax
c000ca00:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000ca05:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000ca0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca10:	05 7c 09 00 00       	add    eax,0x97c
c000ca15:	83 ec 0c             	sub    esp,0xc
c000ca18:	50                   	push   eax
c000ca19:	e8 10 ce ff ff       	call   c000982e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca1e:	83 c4 10             	add    esp,0x10
c000ca21:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca26:	89 c3                	mov    ebx,eax
c000ca28:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000ca2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca33:	05 7c 09 00 00       	add    eax,0x97c
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	50                   	push   eax
c000ca3c:	e8 ed cd ff ff       	call   c000982e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	83 ec 08             	sub    esp,0x8
c000ca47:	50                   	push   eax
c000ca48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca4c:	e8 75 f5 ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000ca51:	83 c4 10             	add    esp,0x10
c000ca54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca56:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca5b:	6a 11                	push   0x11
c000ca5d:	53                   	push   ebx
c000ca5e:	50                   	push   eax
c000ca5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca63:	e8 f4 f8 ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c000ca68:	83 c4 10             	add    esp,0x10
c000ca6b:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000ca70:	48                   	dec    eax
c000ca71:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000ca76:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000ca7b:	85 c0                	test   eax,eax
c000ca7d:	75 01                	jne    c000ca80 <VAS::VAS(bool)+0x27a>
c000ca7f:	fb                   	sti    
c000ca80:	90                   	nop
c000ca81:	83 c4 28             	add    esp,0x28
c000ca84:	5b                   	pop    ebx
c000ca85:	c3                   	ret    

c000ca86 <VAS::VAS()>:
c000ca86:	53                   	push   ebx
c000ca87:	83 ec 18             	sub    esp,0x18
c000ca8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000caa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caa4:	a3 94 83 02 c0       	mov    ds:0xc0028394,eax
c000caa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caad:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000cab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cab5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000cab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cabc:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000cac3:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000cacb:	83 ec 0c             	sub    esp,0xc
c000cace:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cad2:	e8 68 d2 ff ff       	call   c0009d3f <malloc>
c000cad7:	83 c4 10             	add    esp,0x10
c000cada:	89 c3                	mov    ebx,eax
c000cadc:	83 ec 08             	sub    esp,0x8
c000cadf:	6a 01                	push   0x1
c000cae1:	53                   	push   ebx
c000cae2:	e8 1f fd ff ff       	call   c000c806 <VAS::VAS(bool)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	89 1d 8c 83 02 c0    	mov    DWORD PTR ds:0xc002838c,ebx
c000caf0:	90                   	nop
c000caf1:	83 c4 18             	add    esp,0x18
c000caf4:	5b                   	pop    ebx
c000caf5:	c3                   	ret    

c000caf6 <VAS::evict(unsigned long)>:
c000caf6:	55                   	push   ebp
c000caf7:	57                   	push   edi
c000caf8:	56                   	push   esi
c000caf9:	53                   	push   ebx
c000cafa:	83 ec 1c             	sub    esp,0x1c
c000cafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb01:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb09:	e8 24 f3 ff ff       	call   c000be32 <Virt::allocateSwapfilePage()>
c000cb0e:	89 c7                	mov    edi,eax
c000cb10:	a1 ac 76 02 c0       	mov    eax,ds:0xc00276ac
c000cb15:	85 c0                	test   eax,eax
c000cb17:	7e 3d                	jle    c000cb56 <VAS::evict(unsigned long)+0x60>
c000cb19:	89 ee                	mov    esi,ebp
c000cb1b:	31 db                	xor    ebx,ebx
c000cb1d:	83 ec 0c             	sub    esp,0xc
c000cb20:	57                   	push   edi
c000cb21:	e8 fa f2 ff ff       	call   c000be20 <Virt::swapIDToSector(unsigned long)>
c000cb26:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb29:	01 d8                	add    eax,ebx
c000cb2b:	6a 01                	push   0x1
c000cb2d:	31 d2                	xor    edx,edx
c000cb2f:	43                   	inc    ebx
c000cb30:	52                   	push   edx
c000cb31:	81 c6 00 02 00 00    	add    esi,0x200
c000cb37:	50                   	push   eax
c000cb38:	0f be 05 b8 76 02 c0 	movsx  eax,BYTE PTR ds:0xc00276b8
c000cb3f:	ff 34 85 1c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78e4]
c000cb46:	e8 2f 3e 00 00       	call   c001097a <LogicalDisk::write(unsigned long long, int, void*)>
c000cb4b:	83 c4 20             	add    esp,0x20
c000cb4e:	39 1d ac 76 02 c0    	cmp    DWORD PTR ds:0xc00276ac,ebx
c000cb54:	7f c7                	jg     c000cb1d <VAS::evict(unsigned long)+0x27>
c000cb56:	83 ec 08             	sub    esp,0x8
c000cb59:	c1 e7 0b             	shl    edi,0xb
c000cb5c:	55                   	push   ebp
c000cb5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb61:	e8 60 f4 ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000cb66:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb68:	89 d3                	mov    ebx,edx
c000cb6a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb70:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb76:	09 d7                	or     edi,edx
c000cb78:	89 38                	mov    DWORD PTR [eax],edi
c000cb7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb7d:	ff 05 88 83 02 c0    	inc    DWORD PTR ds:0xc0028388
c000cb83:	e8 eb d7 ff ff       	call   c000a373 <Phys::freePage(unsigned long)>
c000cb88:	0f 20 d8             	mov    eax,cr3
c000cb8b:	0f 22 d8             	mov    cr3,eax
c000cb8e:	ff 35 88 83 02 c0    	push   DWORD PTR ds:0xc0028388
c000cb94:	55                   	push   ebp
c000cb95:	53                   	push   ebx
c000cb96:	68 d4 46 02 c0       	push   0xc00246d4
c000cb9b:	e8 ab 04 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cba0:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000cba5:	c7 44 24 50 92 47 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024792
c000cbad:	8d 50 01             	lea    edx,[eax+0x1]
c000cbb0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cbb4:	89 15 84 83 02 c0    	mov    DWORD PTR ds:0xc0028384,edx
c000cbba:	83 c4 3c             	add    esp,0x3c
c000cbbd:	5b                   	pop    ebx
c000cbbe:	5e                   	pop    esi
c000cbbf:	5f                   	pop    edi
c000cbc0:	5d                   	pop    ebp
c000cbc1:	e9 85 04 00 00       	jmp    c000d04b <Dbg::kprintf(char const*, ...)>

c000cbc6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbc6:	55                   	push   ebp
c000cbc7:	57                   	push   edi
c000cbc8:	56                   	push   esi
c000cbc9:	53                   	push   ebx
c000cbca:	83 ec 14             	sub    esp,0x14
c000cbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd1:	68 a3 47 02 c0       	push   0xc00247a3
c000cbd6:	e8 70 04 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cbdb:	83 c4 10             	add    esp,0x10
c000cbde:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbe2:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbe8:	74 20                	je     c000cc0a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbea:	83 ec 08             	sub    esp,0x8
c000cbed:	55                   	push   ebp
c000cbee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf2:	e8 cf f3 ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000cbf7:	83 c4 10             	add    esp,0x10
c000cbfa:	89 c3                	mov    ebx,eax
c000cbfc:	85 c0                	test   eax,eax
c000cbfe:	74 0a                	je     c000cc0a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc00:	8b 38                	mov    edi,DWORD PTR [eax]
c000cc02:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc08:	74 0a                	je     c000cc14 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc0a:	31 c0                	xor    eax,eax
c000cc0c:	83 c4 0c             	add    esp,0xc
c000cc0f:	5b                   	pop    ebx
c000cc10:	5e                   	pop    esi
c000cc11:	5f                   	pop    edi
c000cc12:	5d                   	pop    ebp
c000cc13:	c3                   	ret    
c000cc14:	e8 dd d7 ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000cc19:	c1 ef 0b             	shr    edi,0xb
c000cc1c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc1e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc24:	09 c2                	or     edx,eax
c000cc26:	81 ca 01 08 00 00    	or     edx,0x801
c000cc2c:	89 13                	mov    DWORD PTR [ebx],edx
c000cc2e:	8b 0d ac 76 02 c0    	mov    ecx,DWORD PTR ds:0xc00276ac
c000cc34:	85 c9                	test   ecx,ecx
c000cc36:	7e 3d                	jle    c000cc75 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc38:	89 ee                	mov    esi,ebp
c000cc3a:	31 db                	xor    ebx,ebx
c000cc3c:	83 ec 0c             	sub    esp,0xc
c000cc3f:	57                   	push   edi
c000cc40:	e8 db f1 ff ff       	call   c000be20 <Virt::swapIDToSector(unsigned long)>
c000cc45:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc48:	01 d8                	add    eax,ebx
c000cc4a:	6a 01                	push   0x1
c000cc4c:	31 d2                	xor    edx,edx
c000cc4e:	43                   	inc    ebx
c000cc4f:	52                   	push   edx
c000cc50:	81 c6 00 02 00 00    	add    esi,0x200
c000cc56:	50                   	push   eax
c000cc57:	0f be 05 b8 76 02 c0 	movsx  eax,BYTE PTR ds:0xc00276b8
c000cc5e:	ff 34 85 1c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78e4]
c000cc65:	e8 a4 3c 00 00       	call   c001090e <LogicalDisk::read(unsigned long long, int, void*)>
c000cc6a:	83 c4 20             	add    esp,0x20
c000cc6d:	39 1d ac 76 02 c0    	cmp    DWORD PTR ds:0xc00276ac,ebx
c000cc73:	7f c7                	jg     c000cc3c <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc75:	a1 88 83 02 c0       	mov    eax,ds:0xc0028388
c000cc7a:	48                   	dec    eax
c000cc7b:	52                   	push   edx
c000cc7c:	a3 88 83 02 c0       	mov    ds:0xc0028388,eax
c000cc81:	50                   	push   eax
c000cc82:	55                   	push   ebp
c000cc83:	68 b6 47 02 c0       	push   0xc00247b6
c000cc88:	e8 be 03 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cc8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc90:	e8 6d f1 ff ff       	call   c000be02 <Virt::freeSwapfilePage(unsigned long)>
c000cc95:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000cc9a:	83 c4 10             	add    esp,0x10
c000cc9d:	48                   	dec    eax
c000cc9e:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000cca3:	85 c0                	test   eax,eax
c000cca5:	74 1d                	je     c000ccc4 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cca7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ccab:	25 ff 0f 00 00       	and    eax,0xfff
c000ccb0:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000ccb5:	77 10                	ja     c000ccc7 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000ccb7:	0f 20 d8             	mov    eax,cr3
c000ccba:	0f 22 d8             	mov    cr3,eax
c000ccbd:	b0 01                	mov    al,0x1
c000ccbf:	e9 48 ff ff ff       	jmp    c000cc0c <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccc4:	fb                   	sti    
c000ccc5:	eb e0                	jmp    c000cca7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccc7:	83 ec 0c             	sub    esp,0xc
c000ccca:	68 cb 47 02 c0       	push   0xc00247cb
c000cccf:	e8 77 03 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ccd4:	83 c4 10             	add    esp,0x10
c000ccd7:	eb de                	jmp    c000ccb7 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000ccd9:	90                   	nop

c000ccda <VAS::scanForEviction()>:
c000ccda:	57                   	push   edi
c000ccdb:	31 ff                	xor    edi,edi
c000ccdd:	56                   	push   esi
c000ccde:	53                   	push   ebx
c000ccdf:	83 ec 10             	sub    esp,0x10
c000cce2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cce6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cce9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccef:	75 0e                	jne    c000ccff <VAS::scanForEviction()+0x25>
c000ccf1:	89 da                	mov    edx,ebx
c000ccf3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccf6:	c1 ea 16             	shr    edx,0x16
c000ccf9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccfd:	74 4e                	je     c000cd4d <VAS::scanForEviction()+0x73>
c000ccff:	53                   	push   ebx
c000cd00:	56                   	push   esi
c000cd01:	e8 c0 f2 ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000cd06:	5a                   	pop    edx
c000cd07:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd09:	59                   	pop    ecx
c000cd0a:	89 d1                	mov    ecx,edx
c000cd0c:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd12:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd18:	74 3e                	je     c000cd58 <VAS::scanForEviction()+0x7e>
c000cd1a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd20:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd26:	76 2b                	jbe    c000cd53 <VAS::scanForEviction()+0x79>
c000cd28:	47                   	inc    edi
c000cd29:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd30:	83 ff 03             	cmp    edi,0x3
c000cd33:	74 32                	je     c000cd67 <VAS::scanForEviction()+0x8d>
c000cd35:	31 db                	xor    ebx,ebx
c000cd37:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd3d:	75 c0                	jne    c000ccff <VAS::scanForEviction()+0x25>
c000cd3f:	89 da                	mov    edx,ebx
c000cd41:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd44:	c1 ea 16             	shr    edx,0x16
c000cd47:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd4b:	75 b2                	jne    c000ccff <VAS::scanForEviction()+0x25>
c000cd4d:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd53:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd56:	eb 91                	jmp    c000cce9 <VAS::scanForEviction()+0xf>
c000cd58:	f6 c2 20             	test   dl,0x20
c000cd5b:	74 13                	je     c000cd70 <VAS::scanForEviction()+0x96>
c000cd5d:	83 e2 df             	and    edx,0xffffffdf
c000cd60:	89 10                	mov    DWORD PTR [eax],edx
c000cd62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd65:	eb b3                	jmp    c000cd1a <VAS::scanForEviction()+0x40>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	31 c0                	xor    eax,eax
c000cd6c:	5b                   	pop    ebx
c000cd6d:	5e                   	pop    esi
c000cd6e:	5f                   	pop    edi
c000cd6f:	c3                   	ret    
c000cd70:	83 ec 08             	sub    esp,0x8
c000cd73:	89 d0                	mov    eax,edx
c000cd75:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd7e:	53                   	push   ebx
c000cd7f:	68 db 47 02 c0       	push   0xc00247db
c000cd84:	e8 c2 02 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cd89:	58                   	pop    eax
c000cd8a:	5a                   	pop    edx
c000cd8b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd8e:	56                   	push   esi
c000cd8f:	e8 62 fd ff ff       	call   c000caf6 <VAS::evict(unsigned long)>
c000cd94:	59                   	pop    ecx
c000cd95:	5b                   	pop    ebx
c000cd96:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd99:	68 ef 47 02 c0       	push   0xc00247ef
c000cd9e:	e8 a8 02 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cda3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cdaa:	83 c4 10             	add    esp,0x10
c000cdad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	5b                   	pop    ebx
c000cdb5:	5e                   	pop    esi
c000cdb6:	5f                   	pop    edi
c000cdb7:	c3                   	ret    

c000cdb8 <mapVASFirstTime>:
c000cdb8:	55                   	push   ebp
c000cdb9:	57                   	push   edi
c000cdba:	56                   	push   esi
c000cdbb:	53                   	push   ebx
c000cdbc:	83 ec 0c             	sub    esp,0xc
c000cdbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdc4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cdc7:	4a                   	dec    edx
c000cdc8:	0f 84 fe 00 00 00    	je     c000cecc <mapVASFirstTime+0x114>
c000cdce:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cdd1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cdd4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cdd9:	c1 e5 15             	shl    ebp,0x15
c000cddc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cde1:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cde7:	29 eb                	sub    ebx,ebp
c000cde9:	29 ef                	sub    edi,ebp
c000cdeb:	83 ec 08             	sub    esp,0x8
c000cdee:	53                   	push   ebx
c000cdef:	68 1b 48 02 c0       	push   0xc002481b
c000cdf4:	e8 52 02 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cdf9:	e8 f8 d5 ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000cdfe:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce05:	6a 01                	push   0x1
c000ce07:	53                   	push   ebx
c000ce08:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce0e:	50                   	push   eax
c000ce0f:	56                   	push   esi
c000ce10:	e8 3d f8 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce15:	83 c4 20             	add    esp,0x20
c000ce18:	39 fb                	cmp    ebx,edi
c000ce1a:	75 cf                	jne    c000cdeb <mapVASFirstTime+0x33>
c000ce1c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce21:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce26:	29 eb                	sub    ebx,ebp
c000ce28:	29 ef                	sub    edi,ebp
c000ce2a:	83 ec 08             	sub    esp,0x8
c000ce2d:	53                   	push   ebx
c000ce2e:	68 37 48 02 c0       	push   0xc0024837
c000ce33:	e8 13 02 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ce38:	58                   	pop    eax
c000ce39:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce3d:	5a                   	pop    edx
c000ce3e:	19 c0                	sbb    eax,eax
c000ce40:	83 e0 04             	and    eax,0x4
c000ce43:	05 03 04 00 00       	add    eax,0x403
c000ce48:	50                   	push   eax
c000ce49:	68 4b 48 02 c0       	push   0xc002484b
c000ce4e:	e8 f8 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ce53:	e8 9e d5 ff ff       	call   c000a3f6 <Phys::allocatePage()>
c000ce58:	59                   	pop    ecx
c000ce59:	89 c5                	mov    ebp,eax
c000ce5b:	58                   	pop    eax
c000ce5c:	55                   	push   ebp
c000ce5d:	68 59 48 02 c0       	push   0xc0024859
c000ce62:	e8 e4 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ce67:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce6b:	19 d2                	sbb    edx,edx
c000ce6d:	83 e2 04             	and    edx,0x4
c000ce70:	81 c2 03 04 00 00    	add    edx,0x403
c000ce76:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce79:	6a 01                	push   0x1
c000ce7b:	53                   	push   ebx
c000ce7c:	55                   	push   ebp
c000ce7d:	56                   	push   esi
c000ce7e:	e8 cf f7 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce83:	83 c4 18             	add    esp,0x18
c000ce86:	53                   	push   ebx
c000ce87:	56                   	push   esi
c000ce88:	e8 39 f1 ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c000ce8d:	5a                   	pop    edx
c000ce8e:	59                   	pop    ecx
c000ce8f:	ff 30                	push   DWORD PTR [eax]
c000ce91:	68 75 48 02 c0       	push   0xc0024875
c000ce96:	e8 b0 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ce9b:	0f 20 d8             	mov    eax,cr3
c000ce9e:	83 c4 0c             	add    esp,0xc
c000cea1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cea7:	56                   	push   esi
c000cea8:	50                   	push   eax
c000cea9:	68 80 48 02 c0       	push   0xc0024880
c000ceae:	e8 98 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ceb3:	83 c4 10             	add    esp,0x10
c000ceb6:	39 df                	cmp    edi,ebx
c000ceb8:	0f 85 6c ff ff ff    	jne    c000ce2a <mapVASFirstTime+0x72>
c000cebe:	0f 20 d8             	mov    eax,cr3
c000cec1:	0f 22 d8             	mov    cr3,eax
c000cec4:	83 c4 0c             	add    esp,0xc
c000cec7:	5b                   	pop    ebx
c000cec8:	5e                   	pop    esi
c000cec9:	5f                   	pop    edi
c000ceca:	5d                   	pop    ebp
c000cecb:	c3                   	ret    
c000cecc:	83 ec 0c             	sub    esp,0xc
c000cecf:	68 02 48 02 c0       	push   0xc0024802
c000ced4:	e8 72 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	83 c4 0c             	add    esp,0xc
c000cedf:	5b                   	pop    ebx
c000cee0:	5e                   	pop    esi
c000cee1:	5f                   	pop    edi
c000cee2:	5d                   	pop    ebp
c000cee3:	c3                   	ret    

c000cee4 <__cxa_atexit>:
c000cee4:	31 c0                	xor    eax,eax
c000cee6:	c3                   	ret    

c000cee7 <__cxa_finalize>:
c000cee7:	c3                   	ret    

c000cee8 <__stack_chk_fail>:
c000cee8:	55                   	push   ebp
c000cee9:	89 e5                	mov    ebp,esp
c000ceeb:	83 ec 14             	sub    esp,0x14
c000ceee:	68 98 48 02 c0       	push   0xc0024898
c000cef3:	e8 53 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cef8:	58                   	pop    eax
c000cef9:	5a                   	pop    edx
c000cefa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cefd:	68 e8 48 02 c0       	push   0xc00248e8
c000cf02:	e8 44 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cf07:	59                   	pop    ecx
c000cf08:	58                   	pop    eax
c000cf09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf0f:	68 e8 48 02 c0       	push   0xc00248e8
c000cf14:	e8 32 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cf19:	5a                   	pop    edx
c000cf1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf1d:	59                   	pop    ecx
c000cf1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf20:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf23:	68 e8 48 02 c0       	push   0xc00248e8
c000cf28:	e8 1e 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cf2d:	5a                   	pop    edx
c000cf2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf31:	59                   	pop    ecx
c000cf32:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf34:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf36:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf39:	68 e8 48 02 c0       	push   0xc00248e8
c000cf3e:	e8 08 01 00 00       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000cf43:	c7 04 24 f0 48 02 c0 	mov    DWORD PTR [esp],0xc00248f0
c000cf4a:	e8 1e 81 00 00       	call   c001506d <Krnl::panic(char const*)>
c000cf4f:	83 c4 10             	add    esp,0x10
c000cf52:	c9                   	leave  
c000cf53:	c3                   	ret    

c000cf54 <__cxa_pure_virtual>:
c000cf54:	83 ec 18             	sub    esp,0x18
c000cf57:	68 08 49 02 c0       	push   0xc0024908
c000cf5c:	e8 0c 81 00 00       	call   c001506d <Krnl::panic(char const*)>
c000cf61:	83 c4 1c             	add    esp,0x1c
c000cf64:	c3                   	ret    

c000cf65 <operator new[](unsigned long)>:
c000cf65:	e9 d5 cd ff ff       	jmp    c0009d3f <malloc>

c000cf6a <operator delete(void*, unsigned long)>:
c000cf6a:	e9 f0 cd ff ff       	jmp    c0009d5f <rfree>

c000cf6f <operator delete[](void*)>:
c000cf6f:	e9 eb cd ff ff       	jmp    c0009d5f <rfree>

c000cf74 <operator delete[](void*, unsigned long)>:
c000cf74:	e9 e6 cd ff ff       	jmp    c0009d5f <rfree>

c000cf79 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf79:	55                   	push   ebp
c000cf7a:	b9 11 00 00 00       	mov    ecx,0x11
c000cf7f:	57                   	push   edi
c000cf80:	56                   	push   esi
c000cf81:	be ee 43 02 c0       	mov    esi,0xc00243ee
c000cf86:	53                   	push   ebx
c000cf87:	83 ec 20             	sub    esp,0x20
c000cf8a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf8e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf92:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf96:	fc                   	cld    
c000cf97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf99:	89 ee                	mov    esi,ebp
c000cf9b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf9f:	eb 02                	jmp    c000cfa3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cfa1:	89 c6                	mov    esi,eax
c000cfa3:	31 d2                	xor    edx,edx
c000cfa5:	41                   	inc    ecx
c000cfa6:	89 f0                	mov    eax,esi
c000cfa8:	f7 f3                	div    ebx
c000cfaa:	39 de                	cmp    esi,ebx
c000cfac:	73 f3                	jae    c000cfa1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfb1:	eb 02                	jmp    c000cfb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfb3:	89 c5                	mov    ebp,eax
c000cfb5:	31 d2                	xor    edx,edx
c000cfb7:	49                   	dec    ecx
c000cfb8:	89 e8                	mov    eax,ebp
c000cfba:	f7 f3                	div    ebx
c000cfbc:	39 dd                	cmp    ebp,ebx
c000cfbe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfc2:	88 11                	mov    BYTE PTR [ecx],dl
c000cfc4:	73 ed                	jae    c000cfb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfca:	83 c4 20             	add    esp,0x20
c000cfcd:	5b                   	pop    ebx
c000cfce:	5e                   	pop    esi
c000cfcf:	5f                   	pop    edi
c000cfd0:	5d                   	pop    ebp
c000cfd1:	c3                   	ret    

c000cfd2 <Dbg::logc(char)>:
c000cfd2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfd6:	f6 05 80 82 02 c0 10 	test   BYTE PTR ds:0xc0028280,0x10
c000cfdd:	75 12                	jne    c000cff1 <Dbg::logc(char)+0x1f>
c000cfdf:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfe4:	ec                   	in     al,dx
c000cfe5:	a8 20                	test   al,0x20
c000cfe7:	74 fb                	je     c000cfe4 <Dbg::logc(char)+0x12>
c000cfe9:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfee:	88 c8                	mov    al,cl
c000cff0:	ee                   	out    dx,al
c000cff1:	c3                   	ret    

c000cff2 <Dbg::logs(char*)>:
c000cff2:	53                   	push   ebx
c000cff3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cff7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cffa:	84 c0                	test   al,al
c000cffc:	74 0f                	je     c000d00d <Dbg::logs(char*)+0x1b>
c000cffe:	50                   	push   eax
c000cfff:	43                   	inc    ebx
c000d000:	e8 cd ff ff ff       	call   c000cfd2 <Dbg::logc(char)>
c000d005:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d008:	5a                   	pop    edx
c000d009:	84 c0                	test   al,al
c000d00b:	75 f1                	jne    c000cffe <Dbg::logs(char*)+0xc>
c000d00d:	5b                   	pop    ebx
c000d00e:	c3                   	ret    

c000d00f <Dbg::logWriteInt(unsigned int)>:
c000d00f:	83 ec 10             	sub    esp,0x10
c000d012:	6a 0a                	push   0xa
c000d014:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d018:	50                   	push   eax
c000d019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d01d:	e8 57 ff ff ff       	call   c000cf79 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d022:	50                   	push   eax
c000d023:	e8 ca ff ff ff       	call   c000cff2 <Dbg::logs(char*)>
c000d028:	83 c4 20             	add    esp,0x20
c000d02b:	c3                   	ret    

c000d02c <Dbg::logWriteIntBase(unsigned int, int)>:
c000d02c:	83 ec 10             	sub    esp,0x10
c000d02f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d033:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d037:	50                   	push   eax
c000d038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d03c:	e8 38 ff ff ff       	call   c000cf79 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d041:	50                   	push   eax
c000d042:	e8 ab ff ff ff       	call   c000cff2 <Dbg::logs(char*)>
c000d047:	83 c4 20             	add    esp,0x20
c000d04a:	c3                   	ret    

c000d04b <Dbg::kprintf(char const*, ...)>:
c000d04b:	55                   	push   ebp
c000d04c:	57                   	push   edi
c000d04d:	56                   	push   esi
c000d04e:	53                   	push   ebx
c000d04f:	83 ec 0c             	sub    esp,0xc
c000d052:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d056:	f6 05 80 82 02 c0 10 	test   BYTE PTR ds:0xc0028280,0x10
c000d05d:	74 08                	je     c000d067 <Dbg::kprintf(char const*, ...)+0x1c>
c000d05f:	83 c4 0c             	add    esp,0xc
c000d062:	5b                   	pop    ebx
c000d063:	5e                   	pop    esi
c000d064:	5f                   	pop    edi
c000d065:	5d                   	pop    ebp
c000d066:	c3                   	ret    
c000d067:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d06b:	31 db                	xor    ebx,ebx
c000d06d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d071:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d074:	84 c0                	test   al,al
c000d076:	74 e7                	je     c000d05f <Dbg::kprintf(char const*, ...)+0x14>
c000d078:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d07b:	3c 25                	cmp    al,0x25
c000d07d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d080:	75 44                	jne    c000d0c6 <Dbg::kprintf(char const*, ...)+0x7b>
c000d082:	83 c3 02             	add    ebx,0x2
c000d085:	8a 07                	mov    al,BYTE PTR [edi]
c000d087:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d08a:	83 e8 25             	sub    eax,0x25
c000d08d:	3c 53                	cmp    al,0x53
c000d08f:	0f 87 c9 00 00 00    	ja     c000d15e <Dbg::kprintf(char const*, ...)+0x113>
c000d095:	0f b6 c0             	movzx  eax,al
c000d098:	ff 24 85 1c 49 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb6e4]
c000d09f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0a3:	89 c8                	mov    eax,ecx
c000d0a5:	83 c1 04             	add    ecx,0x4
c000d0a8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0ac:	ff 30                	push   DWORD PTR [eax]
c000d0ae:	e8 5c ff ff ff       	call   c000d00f <Dbg::logWriteInt(unsigned int)>
c000d0b3:	5f                   	pop    edi
c000d0b4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0b8:	84 c0                	test   al,al
c000d0ba:	74 a3                	je     c000d05f <Dbg::kprintf(char const*, ...)+0x14>
c000d0bc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0bf:	3c 25                	cmp    al,0x25
c000d0c1:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0c4:	74 bc                	je     c000d082 <Dbg::kprintf(char const*, ...)+0x37>
c000d0c6:	50                   	push   eax
c000d0c7:	89 eb                	mov    ebx,ebp
c000d0c9:	e8 04 ff ff ff       	call   c000cfd2 <Dbg::logc(char)>
c000d0ce:	89 fd                	mov    ebp,edi
c000d0d0:	58                   	pop    eax
c000d0d1:	eb e1                	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d0d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0d7:	89 c8                	mov    eax,ecx
c000d0d9:	83 c1 04             	add    ecx,0x4
c000d0dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0e0:	ff 30                	push   DWORD PTR [eax]
c000d0e2:	e8 0b ff ff ff       	call   c000cff2 <Dbg::logs(char*)>
c000d0e7:	58                   	pop    eax
c000d0e8:	eb ca                	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d0ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ee:	89 d0                	mov    eax,edx
c000d0f0:	83 c2 04             	add    edx,0x4
c000d0f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0f7:	ff 30                	push   DWORD PTR [eax]
c000d0f9:	e8 11 ff ff ff       	call   c000d00f <Dbg::logWriteInt(unsigned int)>
c000d0fe:	58                   	pop    eax
c000d0ff:	eb b3                	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d101:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d105:	89 d0                	mov    eax,edx
c000d107:	83 c2 04             	add    edx,0x4
c000d10a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d10d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d111:	50                   	push   eax
c000d112:	e8 bb fe ff ff       	call   c000cfd2 <Dbg::logc(char)>
c000d117:	58                   	pop    eax
c000d118:	eb 9a                	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d11a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d11e:	89 c8                	mov    eax,ecx
c000d120:	83 c1 04             	add    ecx,0x4
c000d123:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d127:	6a 10                	push   0x10
c000d129:	ff 30                	push   DWORD PTR [eax]
c000d12b:	e8 fc fe ff ff       	call   c000d02c <Dbg::logWriteIntBase(unsigned int, int)>
c000d130:	59                   	pop    ecx
c000d131:	5f                   	pop    edi
c000d132:	eb 80                	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d134:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d138:	89 d0                	mov    eax,edx
c000d13a:	83 c2 08             	add    edx,0x8
c000d13d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d141:	6a 10                	push   0x10
c000d143:	ff 30                	push   DWORD PTR [eax]
c000d145:	e8 e2 fe ff ff       	call   c000d02c <Dbg::logWriteIntBase(unsigned int, int)>
c000d14a:	58                   	pop    eax
c000d14b:	5a                   	pop    edx
c000d14c:	e9 63 ff ff ff       	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d151:	6a 25                	push   0x25
c000d153:	e8 7a fe ff ff       	call   c000cfd2 <Dbg::logc(char)>
c000d158:	58                   	pop    eax
c000d159:	e9 56 ff ff ff       	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d15e:	6a 25                	push   0x25
c000d160:	e8 6d fe ff ff       	call   c000cfd2 <Dbg::logc(char)>
c000d165:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d168:	50                   	push   eax
c000d169:	e8 64 fe ff ff       	call   c000cfd2 <Dbg::logc(char)>
c000d16e:	5a                   	pop    edx
c000d16f:	59                   	pop    ecx
c000d170:	e9 3f ff ff ff       	jmp    c000d0b4 <Dbg::kprintf(char const*, ...)+0x69>
c000d175:	90                   	nop

c000d176 <File::read(unsigned long long, void*, int*)>:
c000d176:	53                   	push   ebx
c000d177:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d17b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d17f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d186:	3c 19                	cmp    al,0x19
c000d188:	77 35                	ja     c000d1bf <File::read(unsigned long long, void*, int*)+0x49>
c000d18a:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000d191:	85 c0                	test   eax,eax
c000d193:	74 2a                	je     c000d1bf <File::read(unsigned long long, void*, int*)+0x49>
c000d195:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d19b:	85 c0                	test   eax,eax
c000d19d:	74 20                	je     c000d1bf <File::read(unsigned long long, void*, int*)+0x49>
c000d19f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1a3:	74 21                	je     c000d1c6 <File::read(unsigned long long, void*, int*)+0x50>
c000d1a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1ab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1b9:	5b                   	pop    ebx
c000d1ba:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1bd:	ff e0                	jmp    eax
c000d1bf:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c4:	eb 05                	jmp    c000d1cb <File::read(unsigned long long, void*, int*)+0x55>
c000d1c6:	b8 05 00 00 00       	mov    eax,0x5
c000d1cb:	5b                   	pop    ebx
c000d1cc:	c3                   	ret    
c000d1cd:	90                   	nop

c000d1ce <File::write(unsigned long long, void*, int*)>:
c000d1ce:	53                   	push   ebx
c000d1cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1de:	3c 19                	cmp    al,0x19
c000d1e0:	77 35                	ja     c000d217 <File::write(unsigned long long, void*, int*)+0x49>
c000d1e2:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000d1e9:	85 c0                	test   eax,eax
c000d1eb:	74 2a                	je     c000d217 <File::write(unsigned long long, void*, int*)+0x49>
c000d1ed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	74 20                	je     c000d217 <File::write(unsigned long long, void*, int*)+0x49>
c000d1f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1fb:	74 21                	je     c000d21e <File::write(unsigned long long, void*, int*)+0x50>
c000d1fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d203:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d209:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d20d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d211:	5b                   	pop    ebx
c000d212:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d215:	ff e0                	jmp    eax
c000d217:	b8 0b 00 00 00       	mov    eax,0xb
c000d21c:	eb 05                	jmp    c000d223 <File::write(unsigned long long, void*, int*)+0x55>
c000d21e:	b8 05 00 00 00       	mov    eax,0x5
c000d223:	5b                   	pop    ebx
c000d224:	c3                   	ret    
c000d225:	90                   	nop

c000d226 <Directory::read(unsigned long long, void*, int*)>:
c000d226:	53                   	push   ebx
c000d227:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d22b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d22f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d236:	3c 19                	cmp    al,0x19
c000d238:	77 35                	ja     c000d26f <Directory::read(unsigned long long, void*, int*)+0x49>
c000d23a:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000d241:	85 c0                	test   eax,eax
c000d243:	74 2a                	je     c000d26f <Directory::read(unsigned long long, void*, int*)+0x49>
c000d245:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d24b:	85 c0                	test   eax,eax
c000d24d:	74 20                	je     c000d26f <Directory::read(unsigned long long, void*, int*)+0x49>
c000d24f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d253:	74 21                	je     c000d276 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d255:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d257:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d25b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d261:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d265:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d269:	5b                   	pop    ebx
c000d26a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d26d:	ff e0                	jmp    eax
c000d26f:	b8 0b 00 00 00       	mov    eax,0xb
c000d274:	eb 05                	jmp    c000d27b <Directory::read(unsigned long long, void*, int*)+0x55>
c000d276:	b8 05 00 00 00       	mov    eax,0x5
c000d27b:	5b                   	pop    ebx
c000d27c:	c3                   	ret    
c000d27d:	90                   	nop

c000d27e <Directory::write(unsigned long long, void*, int*)>:
c000d27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d282:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d289:	b8 0b 00 00 00       	mov    eax,0xb
c000d28e:	80 fa 19             	cmp    dl,0x19
c000d291:	77 18                	ja     c000d2ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d293:	8b 14 95 20 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77e0]
c000d29a:	85 d2                	test   edx,edx
c000d29c:	74 0d                	je     c000d2ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d29e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d2a5:	19 c0                	sbb    eax,eax
c000d2a7:	83 e0 0a             	and    eax,0xa
c000d2aa:	40                   	inc    eax
c000d2ab:	c3                   	ret    

c000d2ac <File::isAtty()>:
c000d2ac:	31 c0                	xor    eax,eax
c000d2ae:	c3                   	ret    
c000d2af:	90                   	nop

c000d2b0 <Directory::isAtty()>:
c000d2b0:	31 c0                	xor    eax,eax
c000d2b2:	c3                   	ret    
c000d2b3:	90                   	nop

c000d2b4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2b4:	b8 0a 00 00 00       	mov    eax,0xa
c000d2b9:	c3                   	ret    

c000d2ba <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2ba:	b8 0a 00 00 00       	mov    eax,0xa
c000d2bf:	c3                   	ret    

c000d2c0 <Filesystem::allocateSwapfile(char const*, int)>:
c000d2c0:	31 c0                	xor    eax,eax
c000d2c2:	31 d2                	xor    edx,edx
c000d2c4:	c3                   	ret    
c000d2c5:	90                   	nop

c000d2c6 <File::~File()>:
c000d2c6:	83 ec 0c             	sub    esp,0xc
c000d2c9:	ba 58 4b 02 c0       	mov    edx,0xc0024b58
c000d2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d2:	89 10                	mov    DWORD PTR [eax],edx
c000d2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d8:	83 ec 0c             	sub    esp,0xc
c000d2db:	50                   	push   eax
c000d2dc:	e8 af e7 ff ff       	call   c000ba90 <UnixFile::~UnixFile()>
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	90                   	nop
c000d2e5:	83 c4 0c             	add    esp,0xc
c000d2e8:	c3                   	ret    
c000d2e9:	90                   	nop

c000d2ea <File::~File()>:
c000d2ea:	83 ec 0c             	sub    esp,0xc
c000d2ed:	83 ec 0c             	sub    esp,0xc
c000d2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f4:	e8 cd ff ff ff       	call   c000d2c6 <File::~File()>
c000d2f9:	83 c4 10             	add    esp,0x10
c000d2fc:	83 ec 08             	sub    esp,0x8
c000d2ff:	68 14 01 00 00       	push   0x114
c000d304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d308:	e8 5d fc ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000d30d:	83 c4 10             	add    esp,0x10
c000d310:	83 c4 0c             	add    esp,0xc
c000d313:	c3                   	ret    

c000d314 <Directory::~Directory()>:
c000d314:	83 ec 0c             	sub    esp,0xc
c000d317:	ba 74 4b 02 c0       	mov    edx,0xc0024b74
c000d31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d320:	89 10                	mov    DWORD PTR [eax],edx
c000d322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d326:	83 ec 0c             	sub    esp,0xc
c000d329:	50                   	push   eax
c000d32a:	e8 61 e7 ff ff       	call   c000ba90 <UnixFile::~UnixFile()>
c000d32f:	83 c4 10             	add    esp,0x10
c000d332:	90                   	nop
c000d333:	83 c4 0c             	add    esp,0xc
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <Directory::~Directory()>:
c000d338:	83 ec 0c             	sub    esp,0xc
c000d33b:	83 ec 0c             	sub    esp,0xc
c000d33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d342:	e8 cd ff ff ff       	call   c000d314 <Directory::~Directory()>
c000d347:	83 c4 10             	add    esp,0x10
c000d34a:	83 ec 08             	sub    esp,0x8
c000d34d:	68 14 01 00 00       	push   0x114
c000d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d356:	e8 0f fc ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	83 c4 0c             	add    esp,0xc
c000d361:	c3                   	ret    

c000d362 <Filesystem::Filesystem()>:
c000d362:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000d367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d36b:	89 10                	mov    DWORD PTR [eax],edx
c000d36d:	8b 15 98 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028398
c000d373:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d377:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d37a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d37e:	a3 98 83 02 c0       	mov    ds:0xc0028398,eax
c000d383:	90                   	nop
c000d384:	c3                   	ret    
c000d385:	90                   	nop

c000d386 <Filesystem::~Filesystem()>:
c000d386:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000d38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d38f:	89 10                	mov    DWORD PTR [eax],edx
c000d391:	90                   	nop
c000d392:	c3                   	ret    
c000d393:	90                   	nop

c000d394 <Filesystem::~Filesystem()>:
c000d394:	83 ec 0c             	sub    esp,0xc
c000d397:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d39b:	e8 e6 ff ff ff       	call   c000d386 <Filesystem::~Filesystem()>
c000d3a0:	83 c4 04             	add    esp,0x4
c000d3a3:	83 ec 08             	sub    esp,0x8
c000d3a6:	6a 08                	push   0x8
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 b9 fb ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	83 c4 0c             	add    esp,0xc
c000d3b7:	c3                   	ret    

c000d3b8 <Fs::getcwd(Process*, char*, int)>:
c000d3b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3bc:	31 c0                	xor    eax,eax
c000d3be:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3c5:	7d 15                	jge    c000d3dc <Fs::getcwd(Process*, char*, int)+0x24>
c000d3c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3cb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3d2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3d5:	84 c9                	test   cl,cl
c000d3d7:	74 06                	je     c000d3df <Fs::getcwd(Process*, char*, int)+0x27>
c000d3d9:	40                   	inc    eax
c000d3da:	eb e2                	jmp    c000d3be <Fs::getcwd(Process*, char*, int)+0x6>
c000d3dc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3df:	31 c0                	xor    eax,eax
c000d3e1:	c3                   	ret    

c000d3e2 <Fs::initVFS()>:
c000d3e2:	83 ec 18             	sub    esp,0x18
c000d3e5:	6a 08                	push   0x8
c000d3e7:	e8 53 c9 ff ff       	call   c0009d3f <malloc>
c000d3ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3ef:	e8 88 e6 00 00       	call   c001ba7c <FAT::FAT()>
c000d3f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3fb:	e8 3f c9 ff ff       	call   c0009d3f <malloc>
c000d400:	89 04 24             	mov    DWORD PTR [esp],eax
c000d403:	e8 04 f9 00 00       	call   c001cd0c <ISO9660::ISO9660()>
c000d408:	83 c4 1c             	add    esp,0x1c
c000d40b:	c3                   	ret    

c000d40c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d40c:	55                   	push   ebp
c000d40d:	57                   	push   edi
c000d40e:	56                   	push   esi
c000d40f:	53                   	push   ebx
c000d410:	81 ec 10 04 00 00    	sub    esp,0x410
c000d416:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d41d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d424:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d42b:	68 00 04 00 00       	push   0x400
c000d430:	6a 00                	push   0x0
c000d432:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d436:	56                   	push   esi
c000d437:	e8 48 32 ff ff       	call   c0000684 <memset>
c000d43c:	83 c4 10             	add    esp,0x10
c000d43f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d443:	75 0b                	jne    c000d450 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d445:	50                   	push   eax
c000d446:	50                   	push   eax
c000d447:	57                   	push   edi
c000d448:	56                   	push   esi
c000d449:	e8 f2 32 ff ff       	call   c0000740 <strcpy>
c000d44e:	eb 41                	jmp    c000d491 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d450:	8a 07                	mov    al,BYTE PTR [edi]
c000d452:	3c 5c                	cmp    al,0x5c
c000d454:	74 04                	je     c000d45a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d456:	3c 2f                	cmp    al,0x2f
c000d458:	75 18                	jne    c000d472 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d45a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d45d:	3c 60                	cmp    al,0x60
c000d45f:	7e 03                	jle    c000d464 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d461:	83 e8 20             	sub    eax,0x20
c000d464:	88 04 24             	mov    BYTE PTR [esp],al
c000d467:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d46e:	50                   	push   eax
c000d46f:	50                   	push   eax
c000d470:	eb 18                	jmp    c000d48a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d472:	50                   	push   eax
c000d473:	50                   	push   eax
c000d474:	55                   	push   ebp
c000d475:	56                   	push   esi
c000d476:	e8 c5 32 ff ff       	call   c0000740 <strcpy>
c000d47b:	5a                   	pop    edx
c000d47c:	59                   	pop    ecx
c000d47d:	68 6b 63 02 c0       	push   0xc002636b
c000d482:	56                   	push   esi
c000d483:	e8 f8 33 ff ff       	call   c0000880 <strcat>
c000d488:	5d                   	pop    ebp
c000d489:	58                   	pop    eax
c000d48a:	57                   	push   edi
c000d48b:	56                   	push   esi
c000d48c:	e8 ef 33 ff ff       	call   c0000880 <strcat>
c000d491:	83 c4 10             	add    esp,0x10
c000d494:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d497:	3c 60                	cmp    al,0x60
c000d499:	7e 03                	jle    c000d49e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d49b:	83 e8 20             	sub    eax,0x20
c000d49e:	88 04 24             	mov    BYTE PTR [esp],al
c000d4a1:	88 03                	mov    BYTE PTR [ebx],al
c000d4a3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4aa:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4b0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4b4:	bf 03 00 00 00       	mov    edi,0x3
c000d4b9:	b8 03 00 00 00       	mov    eax,0x3
c000d4be:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4c1:	84 d2                	test   dl,dl
c000d4c3:	0f 84 91 00 00 00    	je     c000d55a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4c9:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4cc:	80 fa 5c             	cmp    dl,0x5c
c000d4cf:	74 05                	je     c000d4d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4d1:	80 fa 2f             	cmp    dl,0x2f
c000d4d4:	75 12                	jne    c000d4e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4d6:	89 c5                	mov    ebp,eax
c000d4d8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4dd:	74 09                	je     c000d4e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4df:	40                   	inc    eax
c000d4e0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4e4:	89 cf                	mov    edi,ecx
c000d4e6:	eb d6                	jmp    c000d4be <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4e8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4ed:	75 5b                	jne    c000d54a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4ef:	80 fa 2e             	cmp    dl,0x2e
c000d4f2:	75 56                	jne    c000d54a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4f4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4f8:	74 19                	je     c000d513 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4fa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4ff:	74 53                	je     c000d554 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d501:	89 f9                	mov    ecx,edi
c000d503:	41                   	inc    ecx
c000d504:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d507:	80 fa 2f             	cmp    dl,0x2f
c000d50a:	74 f7                	je     c000d503 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d50c:	80 fa 5c             	cmp    dl,0x5c
c000d50f:	74 f2                	je     c000d503 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d511:	eb d1                	jmp    c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d513:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d518:	74 3a                	je     c000d554 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d51a:	83 f8 03             	cmp    eax,0x3
c000d51d:	74 c5                	je     c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d51f:	41                   	inc    ecx
c000d520:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d523:	80 fa 2f             	cmp    dl,0x2f
c000d526:	74 f7                	je     c000d51f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d528:	80 fa 5c             	cmp    dl,0x5c
c000d52b:	74 f2                	je     c000d51f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d52d:	48                   	dec    eax
c000d52e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d532:	75 06                	jne    c000d53a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d534:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d538:	eb f3                	jmp    c000d52d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d53a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d53e:	74 07                	je     c000d547 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d540:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d544:	48                   	dec    eax
c000d545:	eb f3                	jmp    c000d53a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d547:	40                   	inc    eax
c000d548:	eb 9a                	jmp    c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54a:	80 fa 2f             	cmp    dl,0x2f
c000d54d:	74 95                	je     c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54f:	80 fa 5c             	cmp    dl,0x5c
c000d552:	74 90                	je     c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d554:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d557:	40                   	inc    eax
c000d558:	eb 8a                	jmp    c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d55a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d55e:	83 ec 0c             	sub    esp,0xc
c000d561:	53                   	push   ebx
c000d562:	e8 39 31 ff ff       	call   c00006a0 <strlen>
c000d567:	83 c4 10             	add    esp,0x10
c000d56a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d56f:	75 26                	jne    c000d597 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d571:	83 ec 0c             	sub    esp,0xc
c000d574:	53                   	push   ebx
c000d575:	e8 26 31 ff ff       	call   c00006a0 <strlen>
c000d57a:	83 c4 10             	add    esp,0x10
c000d57d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d582:	74 26                	je     c000d5aa <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d584:	83 ec 0c             	sub    esp,0xc
c000d587:	53                   	push   ebx
c000d588:	e8 13 31 ff ff       	call   c00006a0 <strlen>
c000d58d:	83 c4 10             	add    esp,0x10
c000d590:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d595:	eb c7                	jmp    c000d55e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d597:	83 ec 0c             	sub    esp,0xc
c000d59a:	53                   	push   ebx
c000d59b:	e8 00 31 ff ff       	call   c00006a0 <strlen>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5a8:	74 c7                	je     c000d571 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d5aa:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5b0:	5b                   	pop    ebx
c000d5b1:	5e                   	pop    esi
c000d5b2:	5f                   	pop    edi
c000d5b3:	5d                   	pop    ebp
c000d5b4:	c3                   	ret    
c000d5b5:	90                   	nop

c000d5b6 <File::File(char const*, Process*)>:
c000d5b6:	83 ec 0c             	sub    esp,0xc
c000d5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5bd:	83 ec 08             	sub    esp,0x8
c000d5c0:	6a 00                	push   0x0
c000d5c2:	50                   	push   eax
c000d5c3:	e8 e6 e2 ff ff       	call   c000b8ae <UnixFile::UnixFile(int)>
c000d5c8:	83 c4 10             	add    esp,0x10
c000d5cb:	ba 58 4b 02 c0       	mov    edx,0xc0024b58
c000d5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d4:	89 10                	mov    DWORD PTR [eax],edx
c000d5d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e4:	83 c0 0d             	add    eax,0xd
c000d5e7:	83 ec 04             	sub    esp,0x4
c000d5ea:	52                   	push   edx
c000d5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ef:	50                   	push   eax
c000d5f0:	e8 17 fe ff ff       	call   c000d40c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5ff:	8d 50 bf             	lea    edx,[eax-0x41]
c000d602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d606:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d610:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d618:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d61e:	0f b6 c0             	movzx  eax,al
c000d621:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000d628:	85 c0                	test   eax,eax
c000d62a:	74 5e                	je     c000d68a <File::File(char const*, Process*)+0xd4>
c000d62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d630:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d636:	0f b6 c0             	movzx  eax,al
c000d639:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000d640:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d646:	85 c0                	test   eax,eax
c000d648:	75 40                	jne    c000d68a <File::File(char const*, Process*)+0xd4>
c000d64a:	83 ec 0c             	sub    esp,0xc
c000d64d:	68 94 4a 02 c0       	push   0xc0024a94
c000d652:	e8 f4 f9 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000d657:	83 c4 10             	add    esp,0x10
c000d65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d664:	0f b6 c0             	movzx  eax,al
c000d667:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000d66e:	83 ec 0c             	sub    esp,0xc
c000d671:	50                   	push   eax
c000d672:	e8 95 31 00 00       	call   c001080c <LogicalDisk::mount()>
c000d677:	83 c4 10             	add    esp,0x10
c000d67a:	83 ec 0c             	sub    esp,0xc
c000d67d:	68 9b 6d 02 c0       	push   0xc0026d9b
c000d682:	e8 c4 f9 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000d687:	83 c4 10             	add    esp,0x10
c000d68a:	90                   	nop
c000d68b:	83 c4 0c             	add    esp,0xc
c000d68e:	c3                   	ret    
c000d68f:	90                   	nop

c000d690 <File::open(FileOpenMode)>:
c000d690:	53                   	push   ebx
c000d691:	b8 0b 00 00 00       	mov    eax,0xb
c000d696:	83 ec 08             	sub    esp,0x8
c000d699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d69d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d6a4:	80 fa 19             	cmp    dl,0x19
c000d6a7:	77 40                	ja     c000d6e9 <File::open(FileOpenMode)+0x59>
c000d6a9:	8b 14 95 20 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77e0]
c000d6b0:	85 d2                	test   edx,edx
c000d6b2:	74 35                	je     c000d6e9 <File::open(FileOpenMode)+0x59>
c000d6b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6ba:	85 d2                	test   edx,edx
c000d6bc:	74 2b                	je     c000d6e9 <File::open(FileOpenMode)+0x59>
c000d6be:	b8 06 00 00 00       	mov    eax,0x6
c000d6c3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6c7:	75 20                	jne    c000d6e9 <File::open(FileOpenMode)+0x59>
c000d6c9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6d5:	51                   	push   ecx
c000d6d6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6d9:	51                   	push   ecx
c000d6da:	52                   	push   edx
c000d6db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6de:	83 c4 10             	add    esp,0x10
c000d6e1:	85 c0                	test   eax,eax
c000d6e3:	75 04                	jne    c000d6e9 <File::open(FileOpenMode)+0x59>
c000d6e5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6e9:	83 c4 08             	add    esp,0x8
c000d6ec:	5b                   	pop    ebx
c000d6ed:	c3                   	ret    

c000d6ee <File::close()>:
c000d6ee:	53                   	push   ebx
c000d6ef:	b8 0b 00 00 00       	mov    eax,0xb
c000d6f4:	83 ec 08             	sub    esp,0x8
c000d6f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d702:	80 fa 19             	cmp    dl,0x19
c000d705:	77 41                	ja     c000d748 <File::close()+0x5a>
c000d707:	8b 1c 95 20 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd77e0]
c000d70e:	85 db                	test   ebx,ebx
c000d710:	74 36                	je     c000d748 <File::close()+0x5a>
c000d712:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d719:	74 2d                	je     c000d748 <File::close()+0x5a>
c000d71b:	b8 05 00 00 00       	mov    eax,0x5
c000d720:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d724:	74 22                	je     c000d748 <File::close()+0x5a>
c000d726:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d72a:	8b 04 95 20 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77e0]
c000d731:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d737:	53                   	push   ebx
c000d738:	53                   	push   ebx
c000d739:	8b 10                	mov    edx,DWORD PTR [eax]
c000d73b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d741:	50                   	push   eax
c000d742:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d745:	83 c4 10             	add    esp,0x10
c000d748:	83 c4 08             	add    esp,0x8
c000d74b:	5b                   	pop    ebx
c000d74c:	c3                   	ret    
c000d74d:	90                   	nop

c000d74e <File::seek(unsigned long long)>:
c000d74e:	56                   	push   esi
c000d74f:	53                   	push   ebx
c000d750:	b8 0b 00 00 00       	mov    eax,0xb
c000d755:	51                   	push   ecx
c000d756:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d75a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d75e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d765:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d769:	80 fa 19             	cmp    dl,0x19
c000d76c:	77 31                	ja     c000d79f <File::seek(unsigned long long)+0x51>
c000d76e:	8b 14 95 20 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77e0]
c000d775:	85 d2                	test   edx,edx
c000d777:	74 26                	je     c000d79f <File::seek(unsigned long long)+0x51>
c000d779:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d77f:	85 d2                	test   edx,edx
c000d781:	74 1c                	je     c000d79f <File::seek(unsigned long long)+0x51>
c000d783:	b8 05 00 00 00       	mov    eax,0x5
c000d788:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d78c:	74 11                	je     c000d79f <File::seek(unsigned long long)+0x51>
c000d78e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d790:	53                   	push   ebx
c000d791:	51                   	push   ecx
c000d792:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d798:	52                   	push   edx
c000d799:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d79c:	83 c4 10             	add    esp,0x10
c000d79f:	5a                   	pop    edx
c000d7a0:	5b                   	pop    ebx
c000d7a1:	5e                   	pop    esi
c000d7a2:	c3                   	ret    
c000d7a3:	90                   	nop

c000d7a4 <File::tell(unsigned long long*)>:
c000d7a4:	83 ec 0c             	sub    esp,0xc
c000d7a7:	b8 0b 00 00 00       	mov    eax,0xb
c000d7ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7b0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7b7:	80 fa 19             	cmp    dl,0x19
c000d7ba:	77 34                	ja     c000d7f0 <File::tell(unsigned long long*)+0x4c>
c000d7bc:	8b 14 95 20 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77e0]
c000d7c3:	85 d2                	test   edx,edx
c000d7c5:	74 29                	je     c000d7f0 <File::tell(unsigned long long*)+0x4c>
c000d7c7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7cd:	85 d2                	test   edx,edx
c000d7cf:	74 1f                	je     c000d7f0 <File::tell(unsigned long long*)+0x4c>
c000d7d1:	b8 05 00 00 00       	mov    eax,0x5
c000d7d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7da:	74 14                	je     c000d7f0 <File::tell(unsigned long long*)+0x4c>
c000d7dc:	50                   	push   eax
c000d7dd:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7e9:	52                   	push   edx
c000d7ea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7ed:	83 c4 10             	add    esp,0x10
c000d7f0:	83 c4 0c             	add    esp,0xc
c000d7f3:	c3                   	ret    

c000d7f4 <File::rewind()>:
c000d7f4:	83 ec 10             	sub    esp,0x10
c000d7f7:	6a 00                	push   0x0
c000d7f9:	6a 00                	push   0x0
c000d7fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ff:	e8 4a ff ff ff       	call   c000d74e <File::seek(unsigned long long)>
c000d804:	83 c4 1c             	add    esp,0x1c
c000d807:	c3                   	ret    

c000d808 <File::unlink()>:
c000d808:	83 ec 0c             	sub    esp,0xc
c000d80b:	b8 0b 00 00 00       	mov    eax,0xb
c000d810:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d814:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d81b:	80 f9 19             	cmp    cl,0x19
c000d81e:	77 2f                	ja     c000d84f <File::unlink()+0x47>
c000d820:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000d827:	85 c9                	test   ecx,ecx
c000d829:	74 24                	je     c000d84f <File::unlink()+0x47>
c000d82b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d831:	85 c9                	test   ecx,ecx
c000d833:	74 1a                	je     c000d84f <File::unlink()+0x47>
c000d835:	b8 06 00 00 00       	mov    eax,0x6
c000d83a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d83e:	75 0f                	jne    c000d84f <File::unlink()+0x47>
c000d840:	83 c2 0d             	add    edx,0xd
c000d843:	50                   	push   eax
c000d844:	50                   	push   eax
c000d845:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d847:	52                   	push   edx
c000d848:	51                   	push   ecx
c000d849:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	83 c4 0c             	add    esp,0xc
c000d852:	c3                   	ret    
c000d853:	90                   	nop

c000d854 <File::rename(char const*)>:
c000d854:	83 ec 0c             	sub    esp,0xc
c000d857:	b8 0b 00 00 00       	mov    eax,0xb
c000d85c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d860:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d867:	80 f9 19             	cmp    cl,0x19
c000d86a:	77 32                	ja     c000d89e <File::rename(char const*)+0x4a>
c000d86c:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000d873:	85 c9                	test   ecx,ecx
c000d875:	74 27                	je     c000d89e <File::rename(char const*)+0x4a>
c000d877:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d87d:	85 c9                	test   ecx,ecx
c000d87f:	74 1d                	je     c000d89e <File::rename(char const*)+0x4a>
c000d881:	b8 06 00 00 00       	mov    eax,0x6
c000d886:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d88a:	75 12                	jne    c000d89e <File::rename(char const*)+0x4a>
c000d88c:	83 c2 0d             	add    edx,0xd
c000d88f:	50                   	push   eax
c000d890:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d892:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d896:	52                   	push   edx
c000d897:	51                   	push   ecx
c000d898:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d89b:	83 c4 10             	add    esp,0x10
c000d89e:	83 c4 0c             	add    esp,0xc
c000d8a1:	c3                   	ret    

c000d8a2 <File::chfatattr(unsigned char, unsigned char)>:
c000d8a2:	57                   	push   edi
c000d8a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a8:	56                   	push   esi
c000d8a9:	53                   	push   ebx
c000d8aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8bd:	80 f9 19             	cmp    cl,0x19
c000d8c0:	77 37                	ja     c000d8f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8c2:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000d8c9:	85 c9                	test   ecx,ecx
c000d8cb:	74 2c                	je     c000d8f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8d3:	85 c9                	test   ecx,ecx
c000d8d5:	74 22                	je     c000d8f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d7:	b8 06 00 00 00       	mov    eax,0x6
c000d8dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8e0:	75 17                	jne    c000d8f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8e2:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8e4:	89 f0                	mov    eax,esi
c000d8e6:	83 c2 0d             	add    edx,0xd
c000d8e9:	0f b6 f0             	movzx  esi,al
c000d8ec:	0f b6 db             	movzx  ebx,bl
c000d8ef:	56                   	push   esi
c000d8f0:	53                   	push   ebx
c000d8f1:	52                   	push   edx
c000d8f2:	51                   	push   ecx
c000d8f3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	5b                   	pop    ebx
c000d8fa:	5e                   	pop    esi
c000d8fb:	5f                   	pop    edi
c000d8fc:	c3                   	ret    
c000d8fd:	90                   	nop

c000d8fe <File::exists()>:
c000d8fe:	83 ec 0c             	sub    esp,0xc
c000d901:	31 c0                	xor    eax,eax
c000d903:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d907:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d90e:	80 f9 19             	cmp    cl,0x19
c000d911:	77 24                	ja     c000d937 <File::exists()+0x39>
c000d913:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000d91a:	85 c9                	test   ecx,ecx
c000d91c:	74 19                	je     c000d937 <File::exists()+0x39>
c000d91e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d924:	85 c9                	test   ecx,ecx
c000d926:	74 0f                	je     c000d937 <File::exists()+0x39>
c000d928:	83 c2 0d             	add    edx,0xd
c000d92b:	50                   	push   eax
c000d92c:	50                   	push   eax
c000d92d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d92f:	52                   	push   edx
c000d930:	51                   	push   ecx
c000d931:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d934:	83 c4 10             	add    esp,0x10
c000d937:	83 c4 0c             	add    esp,0xc
c000d93a:	c3                   	ret    
c000d93b:	90                   	nop

c000d93c <File::stat(unsigned long long*, bool*)>:
c000d93c:	56                   	push   esi
c000d93d:	53                   	push   ebx
c000d93e:	50                   	push   eax
c000d93f:	b8 0b 00 00 00       	mov    eax,0xb
c000d944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d948:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d94c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d953:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d957:	80 f9 19             	cmp    cl,0x19
c000d95a:	77 3d                	ja     c000d999 <File::stat(unsigned long long*, bool*)+0x5d>
c000d95c:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000d963:	85 c9                	test   ecx,ecx
c000d965:	74 32                	je     c000d999 <File::stat(unsigned long long*, bool*)+0x5d>
c000d967:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d96d:	85 c9                	test   ecx,ecx
c000d96f:	74 28                	je     c000d999 <File::stat(unsigned long long*, bool*)+0x5d>
c000d971:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d973:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d977:	74 13                	je     c000d98c <File::stat(unsigned long long*, bool*)+0x50>
c000d979:	83 ec 04             	sub    esp,0x4
c000d97c:	56                   	push   esi
c000d97d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d983:	51                   	push   ecx
c000d984:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d987:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d98a:	eb 0a                	jmp    c000d996 <File::stat(unsigned long long*, bool*)+0x5a>
c000d98c:	53                   	push   ebx
c000d98d:	83 c2 0d             	add    edx,0xd
c000d990:	56                   	push   esi
c000d991:	52                   	push   edx
c000d992:	51                   	push   ecx
c000d993:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d996:	83 c4 10             	add    esp,0x10
c000d999:	5a                   	pop    edx
c000d99a:	5b                   	pop    ebx
c000d99b:	5e                   	pop    esi
c000d99c:	c3                   	ret    

c000d99d <Fs::setcwd(Process*, char*)>:
c000d99d:	55                   	push   ebp
c000d99e:	57                   	push   edi
c000d99f:	56                   	push   esi
c000d9a0:	53                   	push   ebx
c000d9a1:	81 ec 20 02 00 00    	sub    esp,0x220
c000d9a7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9ae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9b4:	57                   	push   edi
c000d9b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9bc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9c0:	56                   	push   esi
c000d9c1:	e8 46 fa ff ff       	call   c000d40c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9c6:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9c9:	e8 d2 2c ff ff       	call   c00006a0 <strlen>
c000d9ce:	83 c4 10             	add    esp,0x10
c000d9d1:	83 f8 02             	cmp    eax,0x2
c000d9d4:	77 15                	ja     c000d9eb <Fs::setcwd(Process*, char*)+0x4e>
c000d9d6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9db:	83 eb 41             	sub    ebx,0x41
c000d9de:	8b 04 9d 20 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd77e0]
c000d9e5:	85 c0                	test   eax,eax
c000d9e7:	75 1c                	jne    c000da05 <Fs::setcwd(Process*, char*)+0x68>
c000d9e9:	eb 4c                	jmp    c000da37 <Fs::setcwd(Process*, char*)+0x9a>
c000d9eb:	83 ec 0c             	sub    esp,0xc
c000d9ee:	56                   	push   esi
c000d9ef:	e8 ac 2c ff ff       	call   c00006a0 <strlen>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	83 f8 03             	cmp    eax,0x3
c000d9fa:	75 74                	jne    c000da70 <Fs::setcwd(Process*, char*)+0xd3>
c000d9fc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000da01:	75 6d                	jne    c000da70 <Fs::setcwd(Process*, char*)+0xd3>
c000da03:	eb d1                	jmp    c000d9d6 <Fs::setcwd(Process*, char*)+0x39>
c000da05:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da0c:	75 29                	jne    c000da37 <Fs::setcwd(Process*, char*)+0x9a>
c000da0e:	83 ec 0c             	sub    esp,0xc
c000da11:	68 6c 4a 02 c0       	push   0xc0024a6c
c000da16:	e8 30 f6 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000da1b:	5a                   	pop    edx
c000da1c:	ff 34 9d 20 88 02 c0 	push   DWORD PTR [ebx*4-0x3ffd77e0]
c000da23:	e8 e4 2d 00 00       	call   c001080c <LogicalDisk::mount()>
c000da28:	c7 04 24 9b 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d9b
c000da2f:	e8 17 f6 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000da34:	83 c4 10             	add    esp,0x10
c000da37:	b8 03 00 00 00       	mov    eax,0x3
c000da3c:	83 fb 19             	cmp    ebx,0x19
c000da3f:	0f 87 c6 00 00 00    	ja     c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000da45:	8b 14 9d 20 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd77e0]
c000da4c:	b8 05 00 00 00       	mov    eax,0x5
c000da51:	85 d2                	test   edx,edx
c000da53:	0f 84 b2 00 00 00    	je     c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000da59:	b8 06 00 00 00       	mov    eax,0x6
c000da5e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da65:	0f 85 92 00 00 00    	jne    c000dafd <Fs::setcwd(Process*, char*)+0x160>
c000da6b:	e9 9b 00 00 00       	jmp    c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	68 14 01 00 00       	push   0x114
c000da78:	e8 c2 c2 ff ff       	call   c0009d3f <malloc>
c000da7d:	83 c4 0c             	add    esp,0xc
c000da80:	89 c3                	mov    ebx,eax
c000da82:	55                   	push   ebp
c000da83:	56                   	push   esi
c000da84:	50                   	push   eax
c000da85:	e8 2c fb ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c000da8a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da8f:	83 c4 0c             	add    esp,0xc
c000da92:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da96:	50                   	push   eax
c000da97:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da9b:	50                   	push   eax
c000da9c:	53                   	push   ebx
c000da9d:	e8 9a fe ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	83 f8 02             	cmp    eax,0x2
c000daa8:	74 04                	je     c000daae <Fs::setcwd(Process*, char*)+0x111>
c000daaa:	85 c0                	test   eax,eax
c000daac:	74 1c                	je     c000daca <Fs::setcwd(Process*, char*)+0x12d>
c000daae:	b8 01 00 00 00       	mov    eax,0x1
c000dab3:	85 db                	test   ebx,ebx
c000dab5:	74 54                	je     c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dabc:	53                   	push   ebx
c000dabd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	b8 01 00 00 00       	mov    eax,0x1
c000dac8:	eb 41                	jmp    c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000daca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dacf:	75 1c                	jne    c000daed <Fs::setcwd(Process*, char*)+0x150>
c000dad1:	b8 02 00 00 00       	mov    eax,0x2
c000dad6:	85 db                	test   ebx,ebx
c000dad8:	74 31                	je     c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000dada:	83 ec 0c             	sub    esp,0xc
c000dadd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dadf:	53                   	push   ebx
c000dae0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dae3:	83 c4 10             	add    esp,0x10
c000dae6:	b8 02 00 00 00       	mov    eax,0x2
c000daeb:	eb 1e                	jmp    c000db0b <Fs::setcwd(Process*, char*)+0x16e>
c000daed:	85 db                	test   ebx,ebx
c000daef:	74 0c                	je     c000dafd <Fs::setcwd(Process*, char*)+0x160>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daf6:	53                   	push   ebx
c000daf7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	50                   	push   eax
c000dafe:	50                   	push   eax
c000daff:	56                   	push   esi
c000db00:	57                   	push   edi
c000db01:	e8 3a 2c ff ff       	call   c0000740 <strcpy>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	31 c0                	xor    eax,eax
c000db0b:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db11:	5b                   	pop    ebx
c000db12:	5e                   	pop    esi
c000db13:	5f                   	pop    edi
c000db14:	5d                   	pop    ebp
c000db15:	c3                   	ret    

c000db16 <Directory::Directory(char const*, Process*)>:
c000db16:	83 ec 0c             	sub    esp,0xc
c000db19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1d:	83 ec 08             	sub    esp,0x8
c000db20:	6a 00                	push   0x0
c000db22:	50                   	push   eax
c000db23:	e8 86 dd ff ff       	call   c000b8ae <UnixFile::UnixFile(int)>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	ba 74 4b 02 c0       	mov    edx,0xc0024b74
c000db30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db34:	89 10                	mov    DWORD PTR [eax],edx
c000db36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db44:	83 c0 0d             	add    eax,0xd
c000db47:	83 ec 04             	sub    esp,0x4
c000db4a:	52                   	push   edx
c000db4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4f:	50                   	push   eax
c000db50:	e8 b7 f8 ff ff       	call   c000d40c <Fs::standardiseFiles(char*, char const*, char const*)>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db5f:	8d 50 bf             	lea    edx,[eax-0x41]
c000db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db66:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db70:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db78:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db7e:	0f b6 c0             	movzx  eax,al
c000db81:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000db88:	85 c0                	test   eax,eax
c000db8a:	74 5e                	je     c000dbea <Directory::Directory(char const*, Process*)+0xd4>
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db96:	0f b6 c0             	movzx  eax,al
c000db99:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000dba0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dba6:	85 c0                	test   eax,eax
c000dba8:	75 40                	jne    c000dbea <Directory::Directory(char const*, Process*)+0xd4>
c000dbaa:	83 ec 0c             	sub    esp,0xc
c000dbad:	68 bc 4a 02 c0       	push   0xc0024abc
c000dbb2:	e8 94 f4 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbc4:	0f b6 c0             	movzx  eax,al
c000dbc7:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	50                   	push   eax
c000dbd2:	e8 35 2c 00 00       	call   c001080c <LogicalDisk::mount()>
c000dbd7:	83 c4 10             	add    esp,0x10
c000dbda:	83 ec 0c             	sub    esp,0xc
c000dbdd:	68 9b 6d 02 c0       	push   0xc0026d9b
c000dbe2:	e8 64 f4 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	90                   	nop
c000dbeb:	83 c4 0c             	add    esp,0xc
c000dbee:	c3                   	ret    
c000dbef:	90                   	nop

c000dbf0 <Directory::open()>:
c000dbf0:	53                   	push   ebx
c000dbf1:	b8 0b 00 00 00       	mov    eax,0xb
c000dbf6:	83 ec 08             	sub    esp,0x8
c000dbf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbfd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc04:	80 fa 19             	cmp    dl,0x19
c000dc07:	77 3d                	ja     c000dc46 <Directory::open()+0x56>
c000dc09:	8b 14 95 20 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77e0]
c000dc10:	85 d2                	test   edx,edx
c000dc12:	74 32                	je     c000dc46 <Directory::open()+0x56>
c000dc14:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc1a:	85 d2                	test   edx,edx
c000dc1c:	74 28                	je     c000dc46 <Directory::open()+0x56>
c000dc1e:	b8 06 00 00 00       	mov    eax,0x6
c000dc23:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc27:	75 1d                	jne    c000dc46 <Directory::open()+0x56>
c000dc29:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc2f:	50                   	push   eax
c000dc30:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc32:	51                   	push   ecx
c000dc33:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc36:	51                   	push   ecx
c000dc37:	52                   	push   edx
c000dc38:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	85 c0                	test   eax,eax
c000dc40:	75 04                	jne    c000dc46 <Directory::open()+0x56>
c000dc42:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc46:	83 c4 08             	add    esp,0x8
c000dc49:	5b                   	pop    ebx
c000dc4a:	c3                   	ret    
c000dc4b:	90                   	nop

c000dc4c <Directory::close()>:
c000dc4c:	53                   	push   ebx
c000dc4d:	b8 0b 00 00 00       	mov    eax,0xb
c000dc52:	83 ec 08             	sub    esp,0x8
c000dc55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc59:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc60:	80 fa 19             	cmp    dl,0x19
c000dc63:	77 41                	ja     c000dca6 <Directory::close()+0x5a>
c000dc65:	8b 1c 95 20 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd77e0]
c000dc6c:	85 db                	test   ebx,ebx
c000dc6e:	74 36                	je     c000dca6 <Directory::close()+0x5a>
c000dc70:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc77:	74 2d                	je     c000dca6 <Directory::close()+0x5a>
c000dc79:	b8 05 00 00 00       	mov    eax,0x5
c000dc7e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc82:	74 22                	je     c000dca6 <Directory::close()+0x5a>
c000dc84:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc88:	8b 04 95 20 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77e0]
c000dc8f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc95:	53                   	push   ebx
c000dc96:	53                   	push   ebx
c000dc97:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc99:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc9f:	50                   	push   eax
c000dca0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	83 c4 08             	add    esp,0x8
c000dca9:	5b                   	pop    ebx
c000dcaa:	c3                   	ret    
c000dcab:	90                   	nop

c000dcac <Directory::unlink()>:
c000dcac:	83 ec 0c             	sub    esp,0xc
c000dcaf:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcbf:	80 f9 19             	cmp    cl,0x19
c000dcc2:	77 2f                	ja     c000dcf3 <Directory::unlink()+0x47>
c000dcc4:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000dccb:	85 c9                	test   ecx,ecx
c000dccd:	74 24                	je     c000dcf3 <Directory::unlink()+0x47>
c000dccf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcd5:	85 c9                	test   ecx,ecx
c000dcd7:	74 1a                	je     c000dcf3 <Directory::unlink()+0x47>
c000dcd9:	b8 06 00 00 00       	mov    eax,0x6
c000dcde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dce2:	75 0f                	jne    c000dcf3 <Directory::unlink()+0x47>
c000dce4:	83 c2 0d             	add    edx,0xd
c000dce7:	50                   	push   eax
c000dce8:	50                   	push   eax
c000dce9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dceb:	52                   	push   edx
c000dcec:	51                   	push   ecx
c000dced:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dcf0:	83 c4 10             	add    esp,0x10
c000dcf3:	83 c4 0c             	add    esp,0xc
c000dcf6:	c3                   	ret    
c000dcf7:	90                   	nop

c000dcf8 <Directory::rename(char const*)>:
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	b8 0b 00 00 00       	mov    eax,0xb
c000dd00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd0b:	80 f9 19             	cmp    cl,0x19
c000dd0e:	77 32                	ja     c000dd42 <Directory::rename(char const*)+0x4a>
c000dd10:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000dd17:	85 c9                	test   ecx,ecx
c000dd19:	74 27                	je     c000dd42 <Directory::rename(char const*)+0x4a>
c000dd1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd21:	85 c9                	test   ecx,ecx
c000dd23:	74 1d                	je     c000dd42 <Directory::rename(char const*)+0x4a>
c000dd25:	b8 06 00 00 00       	mov    eax,0x6
c000dd2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd2e:	75 12                	jne    c000dd42 <Directory::rename(char const*)+0x4a>
c000dd30:	83 c2 0d             	add    edx,0xd
c000dd33:	50                   	push   eax
c000dd34:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd3a:	52                   	push   edx
c000dd3b:	51                   	push   ecx
c000dd3c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd3f:	83 c4 10             	add    esp,0x10
c000dd42:	83 c4 0c             	add    esp,0xc
c000dd45:	c3                   	ret    

c000dd46 <Directory::exists()>:
c000dd46:	83 ec 0c             	sub    esp,0xc
c000dd49:	31 c0                	xor    eax,eax
c000dd4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd56:	80 f9 19             	cmp    cl,0x19
c000dd59:	77 24                	ja     c000dd7f <Directory::exists()+0x39>
c000dd5b:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000dd62:	85 c9                	test   ecx,ecx
c000dd64:	74 19                	je     c000dd7f <Directory::exists()+0x39>
c000dd66:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd6c:	85 c9                	test   ecx,ecx
c000dd6e:	74 0f                	je     c000dd7f <Directory::exists()+0x39>
c000dd70:	83 c2 0d             	add    edx,0xd
c000dd73:	50                   	push   eax
c000dd74:	50                   	push   eax
c000dd75:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd77:	52                   	push   edx
c000dd78:	51                   	push   ecx
c000dd79:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	83 c4 0c             	add    esp,0xc
c000dd82:	c3                   	ret    
c000dd83:	90                   	nop

c000dd84 <Directory::read(dirent*)>:
c000dd84:	83 ec 1c             	sub    esp,0x1c
c000dd87:	b8 0b 00 00 00       	mov    eax,0xb
c000dd8c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd90:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd97:	80 fa 19             	cmp    dl,0x19
c000dd9a:	77 30                	ja     c000ddcc <Directory::read(dirent*)+0x48>
c000dd9c:	8b 14 95 20 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77e0]
c000dda3:	85 d2                	test   edx,edx
c000dda5:	74 25                	je     c000ddcc <Directory::read(dirent*)+0x48>
c000dda7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ddae:	74 1c                	je     c000ddcc <Directory::read(dirent*)+0x48>
c000ddb0:	83 ec 0c             	sub    esp,0xc
c000ddb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddb9:	52                   	push   edx
c000ddba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddbe:	6a 00                	push   0x0
c000ddc0:	68 10 01 00 00       	push   0x110
c000ddc5:	51                   	push   ecx
c000ddc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ddc9:	83 c4 20             	add    esp,0x20
c000ddcc:	83 c4 1c             	add    esp,0x1c
c000ddcf:	c3                   	ret    

c000ddd0 <Directory::create()>:
c000ddd0:	83 ec 0c             	sub    esp,0xc
c000ddd3:	b8 0b 00 00 00       	mov    eax,0xb
c000ddd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dddc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dde3:	80 f9 19             	cmp    cl,0x19
c000dde6:	77 2f                	ja     c000de17 <Directory::create()+0x47>
c000dde8:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c000ddef:	85 c9                	test   ecx,ecx
c000ddf1:	74 24                	je     c000de17 <Directory::create()+0x47>
c000ddf3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddf9:	85 c9                	test   ecx,ecx
c000ddfb:	74 1a                	je     c000de17 <Directory::create()+0x47>
c000ddfd:	b8 06 00 00 00       	mov    eax,0x6
c000de02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de06:	75 0f                	jne    c000de17 <Directory::create()+0x47>
c000de08:	83 c2 0d             	add    edx,0xd
c000de0b:	50                   	push   eax
c000de0c:	50                   	push   eax
c000de0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de0f:	52                   	push   edx
c000de10:	51                   	push   ecx
c000de11:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de14:	83 c4 10             	add    esp,0x10
c000de17:	83 c4 0c             	add    esp,0xc
c000de1a:	c3                   	ret    
c000de1b:	90                   	nop

c000de1c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de1c:	b8 0a 00 00 00       	mov    eax,0xa
c000de21:	c3                   	ret    
c000de22:	66 90                	xchg   ax,ax

c000de24 <Bus::Bus(char const*)>:
c000de24:	83 ec 0c             	sub    esp,0xc
c000de27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de2b:	83 ec 08             	sub    esp,0x8
c000de2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de32:	50                   	push   eax
c000de33:	e8 ca 08 00 00       	call   c000e702 <Device::Device(char const*)>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	ba 90 4b 02 c0       	mov    edx,0xc0024b90
c000de40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de44:	89 10                	mov    DWORD PTR [eax],edx
c000de46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de54:	90                   	nop
c000de55:	83 c4 0c             	add    esp,0xc
c000de58:	c3                   	ret    
c000de59:	90                   	nop
c000de5a:	66 90                	xchg   ax,ax

c000de5c <Bus::~Bus()>:
c000de5c:	83 ec 0c             	sub    esp,0xc
c000de5f:	ba 90 4b 02 c0       	mov    edx,0xc0024b90
c000de64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de68:	89 10                	mov    DWORD PTR [eax],edx
c000de6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6e:	83 ec 0c             	sub    esp,0xc
c000de71:	50                   	push   eax
c000de72:	e8 55 05 00 00       	call   c000e3cc <Device::~Device()>
c000de77:	83 c4 10             	add    esp,0x10
c000de7a:	90                   	nop
c000de7b:	83 c4 0c             	add    esp,0xc
c000de7e:	c3                   	ret    
c000de7f:	90                   	nop

c000de80 <Bus::~Bus()>:
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	83 ec 0c             	sub    esp,0xc
c000de86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8a:	e8 cd ff ff ff       	call   c000de5c <Bus::~Bus()>
c000de8f:	83 c4 10             	add    esp,0x10
c000de92:	83 ec 08             	sub    esp,0x8
c000de95:	68 58 01 00 00       	push   0x158
c000de9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9e:	e8 c7 f0 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	83 c4 0c             	add    esp,0xc
c000dea9:	c3                   	ret    

c000deaa <beepThread(void*)>:
c000deaa:	83 ec 0c             	sub    esp,0xc
c000dead:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000deb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deb6:	48                   	dec    eax
c000deb7:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000debc:	75 01                	jne    c000debf <beepThread(void*)+0x15>
c000debe:	fb                   	sti    
c000debf:	83 ec 0c             	sub    esp,0xc
c000dec2:	6b c2 0a             	imul   eax,edx,0xa
c000dec5:	50                   	push   eax
c000dec6:	e8 05 ab 00 00       	call   c00189d0 <milliTenthSleep(unsigned int)>
c000decb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ded2:	e8 ba ce 00 00       	call   c001ad91 <Hal::makeBeep(int)>
c000ded7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dedf:	83 c4 1c             	add    esp,0x1c
c000dee2:	e9 e9 a9 00 00       	jmp    c00188d0 <blockTask(TaskState)>

c000dee7 <Krnl::beep(int, int, bool)>:
c000dee7:	56                   	push   esi
c000dee8:	53                   	push   ebx
c000dee9:	83 ec 10             	sub    esp,0x10
c000deec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000def0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000def4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000def8:	e8 94 ce 00 00       	call   c001ad91 <Hal::makeBeep(int)>
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	89 f0                	mov    eax,esi
c000df02:	84 c0                	test   al,al
c000df04:	74 1e                	je     c000df24 <Krnl::beep(int, int, bool)+0x3d>
c000df06:	83 ec 0c             	sub    esp,0xc
c000df09:	6b db 0a             	imul   ebx,ebx,0xa
c000df0c:	53                   	push   ebx
c000df0d:	e8 be aa 00 00       	call   c00189d0 <milliTenthSleep(unsigned int)>
c000df12:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000df1a:	83 c4 14             	add    esp,0x14
c000df1d:	5b                   	pop    ebx
c000df1e:	5e                   	pop    esi
c000df1f:	e9 6d ce 00 00       	jmp    c001ad91 <Hal::makeBeep(int)>
c000df24:	68 e6 00 00 00       	push   0xe6
c000df29:	53                   	push   ebx
c000df2a:	68 aa de 00 c0       	push   0xc000deaa
c000df2f:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c000df35:	e8 82 a5 00 00       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c000df3a:	83 c4 14             	add    esp,0x14
c000df3d:	5b                   	pop    ebx
c000df3e:	5e                   	pop    esi
c000df3f:	c3                   	ret    

c000df40 <User::loadClockSettings(int)>:
c000df40:	53                   	push   ebx
c000df41:	83 ec 14             	sub    esp,0x14
c000df44:	68 14 01 00 00       	push   0x114
c000df49:	e8 f1 bd ff ff       	call   c0009d3f <malloc>
c000df4e:	83 c4 0c             	add    esp,0xc
c000df51:	89 c3                	mov    ebx,eax
c000df53:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c000df59:	68 b4 4b 02 c0       	push   0xc0024bb4
c000df5e:	50                   	push   eax
c000df5f:	e8 52 f6 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c000df64:	58                   	pop    eax
c000df65:	5a                   	pop    edx
c000df66:	6a 01                	push   0x1
c000df68:	53                   	push   ebx
c000df69:	e8 22 f7 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c000df6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df71:	e8 78 f7 ff ff       	call   c000d6ee <File::close()>
c000df76:	83 c4 10             	add    esp,0x10
c000df79:	85 db                	test   ebx,ebx
c000df7b:	74 0f                	je     c000df8c <User::loadClockSettings(int)+0x4c>
c000df7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000df83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df86:	83 c4 08             	add    esp,0x8
c000df89:	5b                   	pop    ebx
c000df8a:	ff e0                	jmp    eax
c000df8c:	83 c4 08             	add    esp,0x8
c000df8f:	5b                   	pop    ebx
c000df90:	c3                   	ret    
c000df91:	90                   	nop

c000df92 <Clock::Clock(char const*)>:
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df99:	83 ec 08             	sub    esp,0x8
c000df9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa0:	50                   	push   eax
c000dfa1:	e8 5c 07 00 00       	call   c000e702 <Device::Device(char const*)>
c000dfa6:	83 c4 10             	add    esp,0x10
c000dfa9:	ba dc 4b 02 c0       	mov    edx,0xc0024bdc
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	89 10                	mov    DWORD PTR [eax],edx
c000dfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dfc2:	90                   	nop
c000dfc3:	83 c4 0c             	add    esp,0xc
c000dfc6:	c3                   	ret    
c000dfc7:	90                   	nop

c000dfc8 <Clock::~Clock()>:
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	ba dc 4b 02 c0       	mov    edx,0xc0024bdc
c000dfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd4:	89 10                	mov    DWORD PTR [eax],edx
c000dfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfda:	83 ec 0c             	sub    esp,0xc
c000dfdd:	50                   	push   eax
c000dfde:	e8 e9 03 00 00       	call   c000e3cc <Device::~Device()>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	90                   	nop
c000dfe7:	83 c4 0c             	add    esp,0xc
c000dfea:	c3                   	ret    
c000dfeb:	90                   	nop

c000dfec <Clock::~Clock()>:
c000dfec:	83 ec 0c             	sub    esp,0xc
c000dfef:	83 ec 0c             	sub    esp,0xc
c000dff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff6:	e8 cd ff ff ff       	call   c000dfc8 <Clock::~Clock()>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	83 ec 08             	sub    esp,0x8
c000e001:	68 58 01 00 00       	push   0x158
c000e006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00a:	e8 5b ef ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000e00f:	83 c4 10             	add    esp,0x10
c000e012:	83 c4 0c             	add    esp,0xc
c000e015:	c3                   	ret    

c000e016 <Clock::timeInSecondsLocal()>:
c000e016:	53                   	push   ebx
c000e017:	83 ec 14             	sub    esp,0x14
c000e01a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e01e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e020:	50                   	push   eax
c000e021:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e024:	0f b6 0d 9c 83 02 c0 	movzx  ecx,BYTE PTR ds:0xc002839c
c000e02b:	03 0d a0 83 02 c0    	add    ecx,DWORD PTR ds:0xc00283a0
c000e031:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e037:	89 cb                	mov    ebx,ecx
c000e039:	c1 fb 1f             	sar    ebx,0x1f
c000e03c:	01 c8                	add    eax,ecx
c000e03e:	11 da                	adc    edx,ebx
c000e040:	83 c4 10             	add    esp,0x10
c000e043:	31 c9                	xor    ecx,ecx
c000e045:	80 3d 9d 83 02 c0 00 	cmp    BYTE PTR ds:0xc002839d,0x0
c000e04c:	74 05                	je     c000e053 <Clock::timeInSecondsLocal()+0x3d>
c000e04e:	b9 08 07 00 00       	mov    ecx,0x708
c000e053:	31 db                	xor    ebx,ebx
c000e055:	01 c8                	add    eax,ecx
c000e057:	11 da                	adc    edx,ebx
c000e059:	83 c4 08             	add    esp,0x8
c000e05c:	5b                   	pop    ebx
c000e05d:	c3                   	ret    

c000e05e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e05e:	57                   	push   edi
c000e05f:	56                   	push   esi
c000e060:	53                   	push   ebx
c000e061:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e069:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e06b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e06f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e072:	0f b6 05 9c 83 02 c0 	movzx  eax,BYTE PTR ds:0xc002839c
c000e079:	03 05 a0 83 02 c0    	add    eax,DWORD PTR ds:0xc00283a0
c000e07f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e085:	99                   	cdq    
c000e086:	29 c6                	sub    esi,eax
c000e088:	19 d7                	sbb    edi,edx
c000e08a:	89 f0                	mov    eax,esi
c000e08c:	89 fa                	mov    edx,edi
c000e08e:	31 f6                	xor    esi,esi
c000e090:	80 3d 9d 83 02 c0 00 	cmp    BYTE PTR ds:0xc002839d,0x0
c000e097:	74 05                	je     c000e09e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e099:	be 08 07 00 00       	mov    esi,0x708
c000e09e:	31 ff                	xor    edi,edi
c000e0a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e0a4:	29 f0                	sub    eax,esi
c000e0a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0aa:	19 fa                	sbb    edx,edi
c000e0ac:	89 d8                	mov    eax,ebx
c000e0ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e0b2:	5b                   	pop    ebx
c000e0b3:	5e                   	pop    esi
c000e0b4:	5f                   	pop    edi
c000e0b5:	ff e0                	jmp    eax

c000e0b7 <datetimeToSeconds(datetime_t)>:
c000e0b7:	55                   	push   ebp
c000e0b8:	57                   	push   edi
c000e0b9:	56                   	push   esi
c000e0ba:	53                   	push   ebx
c000e0bb:	83 ec 14             	sub    esp,0x14
c000e0be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e0c2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e0c6:	89 d3                	mov    ebx,edx
c000e0c8:	0f b6 c6             	movzx  eax,dh
c000e0cb:	c1 eb 10             	shr    ebx,0x10
c000e0ce:	48                   	dec    eax
c000e0cf:	66 81 eb 6c 07       	sub    bx,0x76c
c000e0d4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e0d8:	0f b6 f5             	movzx  esi,ch
c000e0db:	89 cf                	mov    edi,ecx
c000e0dd:	6b f6 3c             	imul   esi,esi,0x3c
c000e0e0:	c1 ef 10             	shr    edi,0x10
c000e0e3:	0f b6 c9             	movzx  ecx,cl
c000e0e6:	89 f8                	mov    eax,edi
c000e0e8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0ee:	0f b6 f8             	movzx  edi,al
c000e0f1:	0f b6 d2             	movzx  edx,dl
c000e0f4:	01 fe                	add    esi,edi
c000e0f6:	01 f1                	add    ecx,esi
c000e0f8:	0f b7 f3             	movzx  esi,bx
c000e0fb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e0ff:	c1 f9 1f             	sar    ecx,0x1f
c000e102:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e107:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e10b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e110:	8b 0c 8d 20 4c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb3e0]
c000e117:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e11b:	76 29                	jbe    c000e146 <datetimeToSeconds(datetime_t)+0x8f>
c000e11d:	f6 c3 03             	test   bl,0x3
c000e120:	75 24                	jne    c000e146 <datetimeToSeconds(datetime_t)+0x8f>
c000e122:	31 d2                	xor    edx,edx
c000e124:	bf 64 00 00 00       	mov    edi,0x64
c000e129:	89 d8                	mov    eax,ebx
c000e12b:	66 f7 f7             	div    di
c000e12e:	66 85 d2             	test   dx,dx
c000e131:	75 12                	jne    c000e145 <datetimeToSeconds(datetime_t)+0x8e>
c000e133:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e139:	bf 90 01 00 00       	mov    edi,0x190
c000e13e:	99                   	cdq    
c000e13f:	f7 ff                	idiv   edi
c000e141:	85 d2                	test   edx,edx
c000e143:	75 01                	jne    c000e146 <datetimeToSeconds(datetime_t)+0x8f>
c000e145:	41                   	inc    ecx
c000e146:	66 83 fb 46          	cmp    bx,0x46
c000e14a:	76 45                	jbe    c000e191 <datetimeToSeconds(datetime_t)+0xda>
c000e14c:	bb 46 00 00 00       	mov    ebx,0x46
c000e151:	bf 64 00 00 00       	mov    edi,0x64
c000e156:	bd 90 01 00 00       	mov    ebp,0x190
c000e15b:	b8 6d 01 00 00       	mov    eax,0x16d
c000e160:	f6 c3 03             	test   bl,0x3
c000e163:	75 23                	jne    c000e188 <datetimeToSeconds(datetime_t)+0xd1>
c000e165:	89 d8                	mov    eax,ebx
c000e167:	99                   	cdq    
c000e168:	f7 ff                	idiv   edi
c000e16a:	b8 6e 01 00 00       	mov    eax,0x16e
c000e16f:	85 d2                	test   edx,edx
c000e171:	75 15                	jne    c000e188 <datetimeToSeconds(datetime_t)+0xd1>
c000e173:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e179:	99                   	cdq    
c000e17a:	f7 fd                	idiv   ebp
c000e17c:	83 fa 01             	cmp    edx,0x1
c000e17f:	19 c0                	sbb    eax,eax
c000e181:	f7 d0                	not    eax
c000e183:	05 6e 01 00 00       	add    eax,0x16e
c000e188:	01 c1                	add    ecx,eax
c000e18a:	43                   	inc    ebx
c000e18b:	39 f3                	cmp    ebx,esi
c000e18d:	7c cc                	jl     c000e15b <datetimeToSeconds(datetime_t)+0xa4>
c000e18f:	eb 35                	jmp    c000e1c6 <datetimeToSeconds(datetime_t)+0x10f>
c000e191:	74 33                	je     c000e1c6 <datetimeToSeconds(datetime_t)+0x10f>
c000e193:	b8 45 00 00 00       	mov    eax,0x45
c000e198:	89 c2                	mov    edx,eax
c000e19a:	83 e2 03             	and    edx,0x3
c000e19d:	39 f0                	cmp    eax,esi
c000e19f:	7e 0f                	jle    c000e1b0 <datetimeToSeconds(datetime_t)+0xf9>
c000e1a1:	83 fa 01             	cmp    edx,0x1
c000e1a4:	19 d2                	sbb    edx,edx
c000e1a6:	48                   	dec    eax
c000e1a7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e1ae:	eb e8                	jmp    c000e198 <datetimeToSeconds(datetime_t)+0xe1>
c000e1b0:	b8 6d 01 00 00       	mov    eax,0x16d
c000e1b5:	85 d2                	test   edx,edx
c000e1b7:	75 0b                	jne    c000e1c4 <datetimeToSeconds(datetime_t)+0x10d>
c000e1b9:	66 83 fb 01          	cmp    bx,0x1
c000e1bd:	19 c0                	sbb    eax,eax
c000e1bf:	05 6e 01 00 00       	add    eax,0x16e
c000e1c4:	29 c1                	sub    ecx,eax
c000e1c6:	b8 80 51 01 00       	mov    eax,0x15180
c000e1cb:	f7 e9                	imul   ecx
c000e1cd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e1d1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e1d5:	83 c4 14             	add    esp,0x14
c000e1d8:	5b                   	pop    ebx
c000e1d9:	5e                   	pop    esi
c000e1da:	5f                   	pop    edi
c000e1db:	5d                   	pop    ebp
c000e1dc:	c3                   	ret    
c000e1dd:	90                   	nop

c000e1de <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e1de:	57                   	push   edi
c000e1df:	56                   	push   esi
c000e1e0:	53                   	push   ebx
c000e1e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1e5:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1e7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e1ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1f2:	e8 c0 fe ff ff       	call   c000e0b7 <datetimeToSeconds(datetime_t)>
c000e1f7:	59                   	pop    ecx
c000e1f8:	0f b6 0d 9c 83 02 c0 	movzx  ecx,BYTE PTR ds:0xc002839c
c000e1ff:	5b                   	pop    ebx
c000e200:	03 0d a0 83 02 c0    	add    ecx,DWORD PTR ds:0xc00283a0
c000e206:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e20c:	89 cb                	mov    ebx,ecx
c000e20e:	c1 fb 1f             	sar    ebx,0x1f
c000e211:	29 c8                	sub    eax,ecx
c000e213:	19 da                	sbb    edx,ebx
c000e215:	31 c9                	xor    ecx,ecx
c000e217:	80 3d 9d 83 02 c0 00 	cmp    BYTE PTR ds:0xc002839d,0x0
c000e21e:	74 05                	je     c000e225 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e220:	b9 08 07 00 00       	mov    ecx,0x708
c000e225:	31 db                	xor    ebx,ebx
c000e227:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e22b:	29 c8                	sub    eax,ecx
c000e22d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e231:	19 da                	sbb    edx,ebx
c000e233:	89 f8                	mov    eax,edi
c000e235:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e239:	5b                   	pop    ebx
c000e23a:	5e                   	pop    esi
c000e23b:	5f                   	pop    edi
c000e23c:	ff e0                	jmp    eax

c000e23e <secondsToDatetime(unsigned long long)>:
c000e23e:	55                   	push   ebp
c000e23f:	57                   	push   edi
c000e240:	56                   	push   esi
c000e241:	53                   	push   ebx
c000e242:	83 ec 1c             	sub    esp,0x1c
c000e245:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e249:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e24d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e251:	6a 00                	push   0x0
c000e253:	68 80 51 01 00       	push   0x15180
c000e258:	55                   	push   ebp
c000e259:	57                   	push   edi
c000e25a:	e8 81 45 01 00       	call   c00227e0 <__udivdi3>
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e268:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e26c:	6a 00                	push   0x0
c000e26e:	68 80 51 01 00       	push   0x15180
c000e273:	55                   	push   ebp
c000e274:	57                   	push   edi
c000e275:	bf 10 0e 00 00       	mov    edi,0xe10
c000e27a:	e8 61 46 01 00       	call   c00228e0 <__umoddi3>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	99                   	cdq    
c000e283:	f7 ff                	idiv   edi
c000e285:	bf 3c 00 00 00       	mov    edi,0x3c
c000e28a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e28d:	89 d0                	mov    eax,edx
c000e28f:	99                   	cdq    
c000e290:	f7 ff                	idiv   edi
c000e292:	85 db                	test   ebx,ebx
c000e294:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e297:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e29a:	79 11                	jns    c000e2ad <secondsToDatetime(unsigned long long)+0x6f>
c000e29c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e2a0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e2a6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e2ab:	eb 07                	jmp    c000e2b4 <secondsToDatetime(unsigned long long)+0x76>
c000e2ad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e2b2:	89 d8                	mov    eax,ebx
c000e2b4:	bf b4 05 00 00       	mov    edi,0x5b4
c000e2b9:	99                   	cdq    
c000e2ba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e2bf:	f7 f9                	idiv   ecx
c000e2c1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e2c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2ca:	31 d2                	xor    edx,edx
c000e2cc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e2d4:	01 c3                	add    ebx,eax
c000e2d6:	89 d8                	mov    eax,ebx
c000e2d8:	f7 f1                	div    ecx
c000e2da:	31 d2                	xor    edx,edx
c000e2dc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e2df:	89 d8                	mov    eax,ebx
c000e2e1:	f7 f7                	div    edi
c000e2e3:	31 d2                	xor    edx,edx
c000e2e5:	29 c1                	sub    ecx,eax
c000e2e7:	89 d8                	mov    eax,ebx
c000e2e9:	f7 f5                	div    ebp
c000e2eb:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e2f0:	29 c1                	sub    ecx,eax
c000e2f2:	31 d2                	xor    edx,edx
c000e2f4:	89 c8                	mov    eax,ecx
c000e2f6:	f7 f5                	div    ebp
c000e2f8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e2fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e301:	31 d2                	xor    edx,edx
c000e303:	89 c8                	mov    eax,ecx
c000e305:	f7 f5                	div    ebp
c000e307:	31 d2                	xor    edx,edx
c000e309:	01 c3                	add    ebx,eax
c000e30b:	89 c8                	mov    eax,ecx
c000e30d:	f7 f7                	div    edi
c000e30f:	bf 99 00 00 00       	mov    edi,0x99
c000e314:	29 c3                	sub    ebx,eax
c000e316:	31 d2                	xor    edx,edx
c000e318:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e320:	29 c3                	sub    ebx,eax
c000e322:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e325:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e328:	bb 05 00 00 00       	mov    ebx,0x5
c000e32d:	83 c1 02             	add    ecx,0x2
c000e330:	89 c8                	mov    eax,ecx
c000e332:	f7 f7                	div    edi
c000e334:	31 d2                	xor    edx,edx
c000e336:	89 c7                	mov    edi,eax
c000e338:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e33e:	83 c0 02             	add    eax,0x2
c000e341:	f7 f3                	div    ebx
c000e343:	89 eb                	mov    ebx,ebp
c000e345:	29 c3                	sub    ebx,eax
c000e347:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e34d:	88 1e                	mov    BYTE PTR [esi],bl
c000e34f:	19 c0                	sbb    eax,eax
c000e351:	31 d2                	xor    edx,edx
c000e353:	83 e0 0c             	and    eax,0xc
c000e356:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e35a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e362:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e366:	83 f9 01             	cmp    ecx,0x1
c000e369:	0f 96 c2             	setbe  dl
c000e36c:	41                   	inc    ecx
c000e36d:	01 d0                	add    eax,edx
c000e36f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e372:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e376:	83 c4 1c             	add    esp,0x1c
c000e379:	89 f0                	mov    eax,esi
c000e37b:	5b                   	pop    ebx
c000e37c:	5e                   	pop    esi
c000e37d:	5f                   	pop    edi
c000e37e:	5d                   	pop    ebp
c000e37f:	c2 04 00             	ret    0x4

c000e382 <Clock::timeInDatetimeLocal()>:
c000e382:	53                   	push   ebx
c000e383:	83 ec 14             	sub    esp,0x14
c000e386:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e38a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e38e:	e8 83 fc ff ff       	call   c000e016 <Clock::timeInSecondsLocal()>
c000e393:	83 c4 0c             	add    esp,0xc
c000e396:	52                   	push   edx
c000e397:	50                   	push   eax
c000e398:	53                   	push   ebx
c000e399:	e8 a0 fe ff ff       	call   c000e23e <secondsToDatetime(unsigned long long)>
c000e39e:	89 d8                	mov    eax,ebx
c000e3a0:	83 c4 14             	add    esp,0x14
c000e3a3:	5b                   	pop    ebx
c000e3a4:	c2 04 00             	ret    0x4
c000e3a7:	90                   	nop

c000e3a8 <Device::hibernate()>:
c000e3a8:	c3                   	ret    
c000e3a9:	90                   	nop

c000e3aa <Device::wake()>:
c000e3aa:	c3                   	ret    
c000e3ab:	90                   	nop

c000e3ac <Device::detect()>:
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop

c000e3ae <Device::disableLegacy()>:
c000e3ae:	c3                   	ret    
c000e3af:	90                   	nop

c000e3b0 <Device::powerSaving(PowerSavingLevel)>:
c000e3b0:	c3                   	ret    
c000e3b1:	90                   	nop

c000e3b2 <DriverlessDevice::close(int, int, void*)>:
c000e3b2:	31 c0                	xor    eax,eax
c000e3b4:	c3                   	ret    
c000e3b5:	90                   	nop

c000e3b6 <DriverlessDevice::detect()>:
c000e3b6:	c3                   	ret    
c000e3b7:	90                   	nop

c000e3b8 <DriverlessDevice::open(int, int, void*)>:
c000e3b8:	83 ec 18             	sub    esp,0x18
c000e3bb:	68 50 4c 02 c0       	push   0xc0024c50
c000e3c0:	e8 a8 6c 00 00       	call   c001506d <Krnl::panic(char const*)>
c000e3c5:	83 c8 ff             	or     eax,0xffffffff
c000e3c8:	83 c4 1c             	add    esp,0x1c
c000e3cb:	c3                   	ret    

c000e3cc <Device::~Device()>:
c000e3cc:	ba b0 4c 02 c0       	mov    edx,0xc0024cb0
c000e3d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3d5:	89 10                	mov    DWORD PTR [eax],edx
c000e3d7:	90                   	nop
c000e3d8:	c3                   	ret    
c000e3d9:	90                   	nop

c000e3da <Device::~Device()>:
c000e3da:	83 ec 0c             	sub    esp,0xc
c000e3dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e3e1:	e8 e6 ff ff ff       	call   c000e3cc <Device::~Device()>
c000e3e6:	83 c4 04             	add    esp,0x4
c000e3e9:	83 ec 08             	sub    esp,0x8
c000e3ec:	68 58 01 00 00       	push   0x158
c000e3f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f5:	e8 70 eb ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000e3fa:	83 c4 10             	add    esp,0x10
c000e3fd:	83 c4 0c             	add    esp,0xc
c000e400:	c3                   	ret    
c000e401:	90                   	nop

c000e402 <Device::findAndLoadDriver()>:
c000e402:	c7 44 24 04 6e 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c6e
c000e40a:	e9 3c ec ff ff       	jmp    c000d04b <Dbg::kprintf(char const*, ...)>
c000e40f:	90                   	nop

c000e410 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e410:	57                   	push   edi
c000e411:	b9 09 00 00 00       	mov    ecx,0x9
c000e416:	56                   	push   esi
c000e417:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e41b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e41f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e429:	81 c7 18 01 00 00    	add    edi,0x118
c000e42f:	fc                   	cld    
c000e430:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e432:	5e                   	pop    esi
c000e433:	5f                   	pop    edi
c000e434:	c3                   	ret    
c000e435:	90                   	nop

c000e436 <Device::preOpenACPI(void*, char*, char*)>:
c000e436:	57                   	push   edi
c000e437:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e43c:	56                   	push   esi
c000e43d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e441:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e445:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e44f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e455:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e45b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e45f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e461:	b9 0e 00 00 00       	mov    ecx,0xe
c000e466:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e46c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e470:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e472:	5e                   	pop    esi
c000e473:	5f                   	pop    edi
c000e474:	c3                   	ret    
c000e475:	90                   	nop

c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e47a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e47f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e486:	75 0b                	jne    c000e493 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e488:	8b 00                	mov    eax,DWORD PTR [eax]
c000e48a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e48e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e491:	eb 1e                	jmp    c000e4b1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e493:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000e498:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e49e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e4a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e4aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4ae:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e4b1:	ff e0                	jmp    eax
c000e4b3:	90                   	nop

c000e4b4 <Device::getParent()>:
c000e4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e4be:	c3                   	ret    
c000e4bf:	90                   	nop

c000e4c0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e4c9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e4d0:	75 0b                	jne    c000e4dd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e4d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e4d8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e4db:	eb 1e                	jmp    c000e4fb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e4dd:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000e4e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e4ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e4f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4f8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e4fb:	ff e0                	jmp    eax
c000e4fd:	90                   	nop

c000e4fe <Device::addChild(Device*)>:
c000e4fe:	53                   	push   ebx
c000e4ff:	83 ec 08             	sub    esp,0x8
c000e502:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e506:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e50a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e510:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e516:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e518:	85 d2                	test   edx,edx
c000e51a:	74 04                	je     c000e520 <Device::addChild(Device*)+0x22>
c000e51c:	89 d3                	mov    ebx,edx
c000e51e:	eb f6                	jmp    c000e516 <Device::addChild(Device*)+0x18>
c000e520:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e523:	83 ec 0c             	sub    esp,0xc
c000e526:	6a 08                	push   0x8
c000e528:	e8 12 b8 ff ff       	call   c0009d3f <malloc>
c000e52d:	89 03                	mov    DWORD PTR [ebx],eax
c000e52f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e535:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e53c:	83 c4 18             	add    esp,0x18
c000e53f:	5b                   	pop    ebx
c000e540:	c3                   	ret    
c000e541:	90                   	nop

c000e542 <Device::removeAllChildren()>:
c000e542:	56                   	push   esi
c000e543:	53                   	push   ebx
c000e544:	52                   	push   edx
c000e545:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e549:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e54f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e552:	74 17                	je     c000e56b <Device::removeAllChildren()+0x29>
c000e554:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e557:	85 c0                	test   eax,eax
c000e559:	74 0c                	je     c000e567 <Device::removeAllChildren()+0x25>
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e560:	50                   	push   eax
c000e561:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e569:	eb e4                	jmp    c000e54f <Device::removeAllChildren()+0xd>
c000e56b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e571:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e577:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e57d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e584:	58                   	pop    eax
c000e585:	5b                   	pop    ebx
c000e586:	5e                   	pop    esi
c000e587:	c3                   	ret    

c000e588 <Device::hibernateAll()>:
c000e588:	53                   	push   ebx
c000e589:	83 ec 14             	sub    esp,0x14
c000e58c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e590:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e592:	53                   	push   ebx
c000e593:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e596:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e59c:	83 c4 10             	add    esp,0x10
c000e59f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5a2:	74 0f                	je     c000e5b3 <Device::hibernateAll()+0x2b>
c000e5a4:	83 ec 0c             	sub    esp,0xc
c000e5a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5aa:	e8 d9 ff ff ff       	call   c000e588 <Device::hibernateAll()>
c000e5af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5b1:	eb e9                	jmp    c000e59c <Device::hibernateAll()+0x14>
c000e5b3:	83 c4 08             	add    esp,0x8
c000e5b6:	5b                   	pop    ebx
c000e5b7:	c3                   	ret    

c000e5b8 <Device::wakeAll()>:
c000e5b8:	53                   	push   ebx
c000e5b9:	83 ec 14             	sub    esp,0x14
c000e5bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5c2:	53                   	push   ebx
c000e5c3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e5c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5d2:	74 0f                	je     c000e5e3 <Device::wakeAll()+0x2b>
c000e5d4:	83 ec 0c             	sub    esp,0xc
c000e5d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5da:	e8 d9 ff ff ff       	call   c000e5b8 <Device::wakeAll()>
c000e5df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5e1:	eb e9                	jmp    c000e5cc <Device::wakeAll()+0x14>
c000e5e3:	83 c4 08             	add    esp,0x8
c000e5e6:	5b                   	pop    ebx
c000e5e7:	c3                   	ret    

c000e5e8 <Device::detectAll()>:
c000e5e8:	53                   	push   ebx
c000e5e9:	83 ec 14             	sub    esp,0x14
c000e5ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5f2:	53                   	push   ebx
c000e5f3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e5f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e602:	74 0f                	je     c000e613 <Device::detectAll()+0x2b>
c000e604:	83 ec 0c             	sub    esp,0xc
c000e607:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e60a:	e8 d9 ff ff ff       	call   c000e5e8 <Device::detectAll()>
c000e60f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e611:	eb e9                	jmp    c000e5fc <Device::detectAll()+0x14>
c000e613:	83 c4 08             	add    esp,0x8
c000e616:	5b                   	pop    ebx
c000e617:	c3                   	ret    

c000e618 <Device::disableLegacyAll()>:
c000e618:	53                   	push   ebx
c000e619:	83 ec 14             	sub    esp,0x14
c000e61c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e620:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e622:	53                   	push   ebx
c000e623:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e626:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e632:	74 0f                	je     c000e643 <Device::disableLegacyAll()+0x2b>
c000e634:	83 ec 0c             	sub    esp,0xc
c000e637:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e63a:	e8 d9 ff ff ff       	call   c000e618 <Device::disableLegacyAll()>
c000e63f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e641:	eb e9                	jmp    c000e62c <Device::disableLegacyAll()+0x14>
c000e643:	83 c4 08             	add    esp,0x8
c000e646:	5b                   	pop    ebx
c000e647:	c3                   	ret    

c000e648 <Device::loadDriversForAll()>:
c000e648:	53                   	push   ebx
c000e649:	83 ec 08             	sub    esp,0x8
c000e64c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e650:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e657:	75 0c                	jne    c000e665 <Device::loadDriversForAll()+0x1d>
c000e659:	83 ec 0c             	sub    esp,0xc
c000e65c:	53                   	push   ebx
c000e65d:	e8 a0 fd ff ff       	call   c000e402 <Device::findAndLoadDriver()>
c000e662:	83 c4 10             	add    esp,0x10
c000e665:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e66b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e66e:	74 12                	je     c000e682 <Device::loadDriversForAll()+0x3a>
c000e670:	83 ec 0c             	sub    esp,0xc
c000e673:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e676:	e8 cd ff ff ff       	call   c000e648 <Device::loadDriversForAll()>
c000e67b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e67d:	83 c4 10             	add    esp,0x10
c000e680:	eb e9                	jmp    c000e66b <Device::loadDriversForAll()+0x23>
c000e682:	83 c4 08             	add    esp,0x8
c000e685:	5b                   	pop    ebx
c000e686:	c3                   	ret    
c000e687:	90                   	nop

c000e688 <Device::closeAll()>:
c000e688:	53                   	push   ebx
c000e689:	83 ec 08             	sub    esp,0x8
c000e68c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e690:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e692:	6a 00                	push   0x0
c000e694:	6a 00                	push   0x0
c000e696:	6a 00                	push   0x0
c000e698:	53                   	push   ebx
c000e699:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e69c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6a8:	74 0f                	je     c000e6b9 <Device::closeAll()+0x31>
c000e6aa:	83 ec 0c             	sub    esp,0xc
c000e6ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6b0:	e8 d3 ff ff ff       	call   c000e688 <Device::closeAll()>
c000e6b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6b7:	eb e9                	jmp    c000e6a2 <Device::closeAll()+0x1a>
c000e6b9:	83 c4 08             	add    esp,0x8
c000e6bc:	5b                   	pop    ebx
c000e6bd:	c3                   	ret    

c000e6be <Device::powerSavingAll(PowerSavingLevel)>:
c000e6be:	56                   	push   esi
c000e6bf:	53                   	push   ebx
c000e6c0:	83 ec 0c             	sub    esp,0xc
c000e6c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e6cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6cd:	56                   	push   esi
c000e6ce:	53                   	push   ebx
c000e6cf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e6d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6d8:	83 c4 10             	add    esp,0x10
c000e6db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6de:	74 0f                	je     c000e6ef <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e6e0:	52                   	push   edx
c000e6e1:	52                   	push   edx
c000e6e2:	56                   	push   esi
c000e6e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6e6:	e8 d3 ff ff ff       	call   c000e6be <Device::powerSavingAll(PowerSavingLevel)>
c000e6eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6ed:	eb e9                	jmp    c000e6d8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e6ef:	58                   	pop    eax
c000e6f0:	5b                   	pop    ebx
c000e6f1:	5e                   	pop    esi
c000e6f2:	c3                   	ret    
c000e6f3:	90                   	nop

c000e6f4 <Device::setName(char const*)>:
c000e6f4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e6fc:	e9 3f 20 ff ff       	jmp    c0000740 <strcpy>
c000e701:	90                   	nop

c000e702 <Device::Device(char const*)>:
c000e702:	83 ec 1c             	sub    esp,0x1c
c000e705:	ba b0 4c 02 c0       	mov    edx,0xc0024cb0
c000e70a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e70e:	89 10                	mov    DWORD PTR [eax],edx
c000e710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e714:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e71e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e722:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e72c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e730:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e748:	83 ec 08             	sub    esp,0x8
c000e74b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e74f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e753:	e8 9c ff ff ff       	call   c000e6f4 <Device::setName(char const*)>
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e763:	83 ec 0c             	sub    esp,0xc
c000e766:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e76a:	e8 d0 b5 ff ff       	call   c0009d3f <malloc>
c000e76f:	83 c4 10             	add    esp,0x10
c000e772:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e778:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e77f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e783:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e793:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e7a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ae:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ee:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e7f8:	90                   	nop
c000e7f9:	83 c4 1c             	add    esp,0x1c
c000e7fc:	c3                   	ret    
c000e7fd:	90                   	nop

c000e7fe <Device::getName()>:
c000e7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e802:	05 d0 00 00 00       	add    eax,0xd0
c000e807:	c3                   	ret    

c000e808 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e808:	83 ec 0c             	sub    esp,0xc
c000e80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80f:	83 ec 08             	sub    esp,0x8
c000e812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e816:	50                   	push   eax
c000e817:	e8 e6 fe ff ff       	call   c000e702 <Device::Device(char const*)>
c000e81c:	83 c4 10             	add    esp,0x10
c000e81f:	ba dc 4c 02 c0       	mov    edx,0xc0024cdc
c000e824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e828:	89 10                	mov    DWORD PTR [eax],edx
c000e82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e838:	90                   	nop
c000e839:	83 c4 0c             	add    esp,0xc
c000e83c:	c3                   	ret    
c000e83d:	90                   	nop

c000e83e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e83e:	57                   	push   edi
c000e83f:	56                   	push   esi
c000e840:	53                   	push   ebx
c000e841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e845:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e849:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e84d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e853:	75 0c                	jne    c000e861 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e855:	52                   	push   edx
c000e856:	52                   	push   edx
c000e857:	53                   	push   ebx
c000e858:	56                   	push   esi
c000e859:	e8 34 44 01 00       	call   c0022c92 <LinkedList<Device>::addElement(Device*)>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e867:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e86a:	74 12                	je     c000e87e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e86c:	50                   	push   eax
c000e86d:	57                   	push   edi
c000e86e:	56                   	push   esi
c000e86f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e872:	e8 c7 ff ff ff       	call   c000e83e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e877:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e879:	83 c4 10             	add    esp,0x10
c000e87c:	eb e9                	jmp    c000e867 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e87e:	5b                   	pop    ebx
c000e87f:	5e                   	pop    esi
c000e880:	5f                   	pop    edi
c000e881:	c3                   	ret    

c000e882 <getDevicesOfType(DeviceType)>:
c000e882:	53                   	push   ebx
c000e883:	83 ec 14             	sub    esp,0x14
c000e886:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88a:	53                   	push   ebx
c000e88b:	e8 de 44 01 00       	call   c0022d6e <LinkedList<Device>::LinkedList()>
c000e890:	83 c4 0c             	add    esp,0xc
c000e893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e897:	53                   	push   ebx
c000e898:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c000e89e:	e8 9b ff ff ff       	call   c000e83e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e8a3:	89 d8                	mov    eax,ebx
c000e8a5:	83 c4 18             	add    esp,0x18
c000e8a8:	5b                   	pop    ebx
c000e8a9:	c2 04 00             	ret    0x4

c000e8ac <HardDiskController::HardDiskController(char const*)>:
c000e8ac:	83 ec 0c             	sub    esp,0xc
c000e8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b3:	83 ec 08             	sub    esp,0x8
c000e8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ba:	50                   	push   eax
c000e8bb:	e8 42 fe ff ff       	call   c000e702 <Device::Device(char const*)>
c000e8c0:	83 c4 10             	add    esp,0x10
c000e8c3:	ba 08 4d 02 c0       	mov    edx,0xc0024d08
c000e8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cc:	89 10                	mov    DWORD PTR [eax],edx
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e8dc:	90                   	nop
c000e8dd:	83 c4 0c             	add    esp,0xc
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop
c000e8e2:	66 90                	xchg   ax,ax

c000e8e4 <HardDiskController::~HardDiskController()>:
c000e8e4:	83 ec 0c             	sub    esp,0xc
c000e8e7:	ba 08 4d 02 c0       	mov    edx,0xc0024d08
c000e8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f0:	89 10                	mov    DWORD PTR [eax],edx
c000e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f6:	83 ec 0c             	sub    esp,0xc
c000e8f9:	50                   	push   eax
c000e8fa:	e8 cd fa ff ff       	call   c000e3cc <Device::~Device()>
c000e8ff:	83 c4 10             	add    esp,0x10
c000e902:	90                   	nop
c000e903:	83 c4 0c             	add    esp,0xc
c000e906:	c3                   	ret    
c000e907:	90                   	nop

c000e908 <HardDiskController::~HardDiskController()>:
c000e908:	83 ec 0c             	sub    esp,0xc
c000e90b:	83 ec 0c             	sub    esp,0xc
c000e90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e912:	e8 cd ff ff ff       	call   c000e8e4 <HardDiskController::~HardDiskController()>
c000e917:	83 c4 10             	add    esp,0x10
c000e91a:	83 ec 08             	sub    esp,0x8
c000e91d:	68 58 01 00 00       	push   0x158
c000e922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e926:	e8 3f e6 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000e92b:	83 c4 10             	add    esp,0x10
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <PhysicalDisk::eject()>:
c000e932:	83 c8 ff             	or     eax,0xffffffff
c000e935:	c3                   	ret    

c000e936 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e936:	83 ec 0c             	sub    esp,0xc
c000e939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93d:	83 ec 08             	sub    esp,0x8
c000e940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e944:	50                   	push   eax
c000e945:	e8 b8 fd ff ff       	call   c000e702 <Device::Device(char const*)>
c000e94a:	83 c4 10             	add    esp,0x10
c000e94d:	ba 34 4d 02 c0       	mov    edx,0xc0024d34
c000e952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e956:	89 10                	mov    DWORD PTR [eax],edx
c000e958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e95c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e967:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e972:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e984:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e98e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e998:	90                   	nop
c000e999:	83 c4 0c             	add    esp,0xc
c000e99c:	c3                   	ret    
c000e99d:	90                   	nop

c000e99e <PhysicalDisk::startCache()>:
c000e99e:	56                   	push   esi
c000e99f:	53                   	push   ebx
c000e9a0:	83 ec 10             	sub    esp,0x10
c000e9a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e9a7:	6a 44                	push   0x44
c000e9a9:	e8 91 b3 ff ff       	call   c0009d3f <malloc>
c000e9ae:	89 c6                	mov    esi,eax
c000e9b0:	58                   	pop    eax
c000e9b1:	5a                   	pop    edx
c000e9b2:	53                   	push   ebx
c000e9b3:	56                   	push   esi
c000e9b4:	e8 6b 27 00 00       	call   c0011124 <VCache::VCache(PhysicalDisk*)>
c000e9b9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e9bf:	83 c4 14             	add    esp,0x14
c000e9c2:	5b                   	pop    ebx
c000e9c3:	5e                   	pop    esi
c000e9c4:	c3                   	ret    
c000e9c5:	90                   	nop

c000e9c6 <PhysicalDisk::~PhysicalDisk()>:
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	ba 34 4d 02 c0       	mov    edx,0xc0024d34
c000e9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9d2:	89 10                	mov    DWORD PTR [eax],edx
c000e9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9d8:	83 ec 0c             	sub    esp,0xc
c000e9db:	50                   	push   eax
c000e9dc:	e8 eb f9 ff ff       	call   c000e3cc <Device::~Device()>
c000e9e1:	83 c4 10             	add    esp,0x10
c000e9e4:	90                   	nop
c000e9e5:	83 c4 0c             	add    esp,0xc
c000e9e8:	c3                   	ret    
c000e9e9:	90                   	nop

c000e9ea <PhysicalDisk::~PhysicalDisk()>:
c000e9ea:	83 ec 0c             	sub    esp,0xc
c000e9ed:	83 ec 0c             	sub    esp,0xc
c000e9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9f4:	e8 cd ff ff ff       	call   c000e9c6 <PhysicalDisk::~PhysicalDisk()>
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	83 ec 08             	sub    esp,0x8
c000e9ff:	68 6c 01 00 00       	push   0x16c
c000ea04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea08:	e8 5d e5 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000ea0d:	83 c4 10             	add    esp,0x10
c000ea10:	83 c4 0c             	add    esp,0xc
c000ea13:	c3                   	ret    

c000ea14 <FPU::FPU(char const*)>:
c000ea14:	83 ec 0c             	sub    esp,0xc
c000ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1b:	83 ec 08             	sub    esp,0x8
c000ea1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea22:	50                   	push   eax
c000ea23:	e8 da fc ff ff       	call   c000e702 <Device::Device(char const*)>
c000ea28:	83 c4 10             	add    esp,0x10
c000ea2b:	ba 94 4d 02 c0       	mov    edx,0xc0024d94
c000ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea34:	89 10                	mov    DWORD PTR [eax],edx
c000ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000ea44:	90                   	nop
c000ea45:	83 c4 0c             	add    esp,0xc
c000ea48:	c3                   	ret    
c000ea49:	90                   	nop
c000ea4a:	66 90                	xchg   ax,ax

c000ea4c <FPU::~FPU()>:
c000ea4c:	83 ec 0c             	sub    esp,0xc
c000ea4f:	ba 94 4d 02 c0       	mov    edx,0xc0024d94
c000ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea58:	89 10                	mov    DWORD PTR [eax],edx
c000ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5e:	83 ec 0c             	sub    esp,0xc
c000ea61:	50                   	push   eax
c000ea62:	e8 65 f9 ff ff       	call   c000e3cc <Device::~Device()>
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	90                   	nop
c000ea6b:	83 c4 0c             	add    esp,0xc
c000ea6e:	c3                   	ret    
c000ea6f:	90                   	nop

c000ea70 <FPU::~FPU()>:
c000ea70:	83 ec 0c             	sub    esp,0xc
c000ea73:	83 ec 0c             	sub    esp,0xc
c000ea76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea7a:	e8 cd ff ff ff       	call   c000ea4c <FPU::~FPU()>
c000ea7f:	83 c4 10             	add    esp,0x10
c000ea82:	83 ec 08             	sub    esp,0x8
c000ea85:	68 58 01 00 00       	push   0x158
c000ea8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea8e:	e8 d7 e4 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000ea93:	83 c4 10             	add    esp,0x10
c000ea96:	83 c4 0c             	add    esp,0xc
c000ea99:	c3                   	ret    

c000ea9a <setupFPU()>:
c000ea9a:	53                   	push   ebx
c000ea9b:	83 ec 14             	sub    esp,0x14
c000ea9e:	68 64 4d 02 c0       	push   0xc0024d64
c000eaa3:	e8 a3 e5 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000eaa8:	8b 15 68 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028268
c000eaae:	83 c4 10             	add    esp,0x10
c000eab1:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000eab8:	74 1a                	je     c000ead4 <setupFPU()+0x3a>
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	68 58 01 00 00       	push   0x158
c000eac2:	e8 78 b2 ff ff       	call   c0009d3f <malloc>
c000eac7:	89 c3                	mov    ebx,eax
c000eac9:	89 04 24             	mov    DWORD PTR [esp],eax
c000eacc:	e8 2f 28 01 00       	call   c0021300 <AVX::AVX()>
c000ead1:	eb 6d                	jmp    c000eb40 <setupFPU()+0xa6>
c000ead3:	90                   	nop
c000ead4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000eada:	84 c0                	test   al,al
c000eadc:	79 1a                	jns    c000eaf8 <setupFPU()+0x5e>
c000eade:	83 ec 0c             	sub    esp,0xc
c000eae1:	68 58 01 00 00       	push   0x158
c000eae6:	e8 54 b2 ff ff       	call   c0009d3f <malloc>
c000eaeb:	89 c3                	mov    ebx,eax
c000eaed:	89 04 24             	mov    DWORD PTR [esp],eax
c000eaf0:	e8 3b 29 01 00       	call   c0021430 <SSE::SSE()>
c000eaf5:	eb 49                	jmp    c000eb40 <setupFPU()+0xa6>
c000eaf7:	90                   	nop
c000eaf8:	a8 20                	test   al,0x20
c000eafa:	74 1c                	je     c000eb18 <setupFPU()+0x7e>
c000eafc:	83 ec 0c             	sub    esp,0xc
c000eaff:	68 58 01 00 00       	push   0x158
c000eb04:	e8 36 b2 ff ff       	call   c0009d3f <malloc>
c000eb09:	89 c3                	mov    ebx,eax
c000eb0b:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb0e:	e8 81 28 01 00       	call   c0021394 <MMX::MMX()>
c000eb13:	eb 2b                	jmp    c000eb40 <setupFPU()+0xa6>
c000eb15:	8d 76 00             	lea    esi,[esi+0x0]
c000eb18:	a8 10                	test   al,0x10
c000eb1a:	74 2c                	je     c000eb48 <setupFPU()+0xae>
c000eb1c:	83 ec 0c             	sub    esp,0xc
c000eb1f:	68 77 4d 02 c0       	push   0xc0024d77
c000eb24:	e8 22 e5 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000eb29:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000eb30:	e8 0a b2 ff ff       	call   c0009d3f <malloc>
c000eb35:	89 c3                	mov    ebx,eax
c000eb37:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb3a:	e8 7f 29 01 00       	call   c00214be <x87::x87()>
c000eb3f:	90                   	nop
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	eb 27                	jmp    c000eb6c <setupFPU()+0xd2>
c000eb45:	8d 76 00             	lea    esi,[esi+0x0]
c000eb48:	83 e0 ef             	and    eax,0xffffffef
c000eb4b:	83 ec 0c             	sub    esp,0xc
c000eb4e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000eb54:	68 81 4d 02 c0       	push   0xc0024d81
c000eb59:	e8 ed e4 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000eb5e:	0f 20 c0             	mov    eax,cr0
c000eb61:	83 c8 04             	or     eax,0x4
c000eb64:	0f 22 c0             	mov    cr0,eax
c000eb67:	31 db                	xor    ebx,ebx
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	89 d8                	mov    eax,ebx
c000eb6e:	83 c4 08             	add    esp,0x8
c000eb71:	5b                   	pop    ebx
c000eb72:	c3                   	ret    
c000eb73:	90                   	nop

c000eb74 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000eb74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb7c:	c1 e0 04             	shl    eax,0x4
c000eb7f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000eb83:	8d 50 10             	lea    edx,[eax+0x10]
c000eb86:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000eb8c:	74 08                	je     c000eb96 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000eb8e:	83 c0 04             	add    eax,0x4
c000eb91:	39 d0                	cmp    eax,edx
c000eb93:	75 f1                	jne    c000eb86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000eb95:	c3                   	ret    
c000eb96:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eba0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ebaa:	eb e2                	jmp    c000eb8e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ebac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ebac:	57                   	push   edi
c000ebad:	31 c0                	xor    eax,eax
c000ebaf:	56                   	push   esi
c000ebb0:	53                   	push   ebx
c000ebb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ebb5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ebb9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ebbd:	89 da                	mov    edx,ebx
c000ebbf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ebc3:	c1 e2 04             	shl    edx,0x4
c000ebc6:	01 ca                	add    edx,ecx
c000ebc8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ebd0:	74 16                	je     c000ebe8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ebd2:	40                   	inc    eax
c000ebd3:	83 f8 04             	cmp    eax,0x4
c000ebd6:	75 f0                	jne    c000ebc8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ebd8:	c7 44 24 10 c4 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024dc4
c000ebe0:	5b                   	pop    ebx
c000ebe1:	5e                   	pop    esi
c000ebe2:	5f                   	pop    edi
c000ebe3:	e9 85 64 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c000ebe8:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ebeb:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ebee:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ebf4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ebfa:	5b                   	pop    ebx
c000ebfb:	5e                   	pop    esi
c000ebfc:	5f                   	pop    edi
c000ebfd:	c3                   	ret    

c000ebfe <doubleFault(regs*, void*)>:
c000ebfe:	55                   	push   ebp
c000ebff:	89 e5                	mov    ebp,esp
c000ec01:	83 ec 08             	sub    esp,0x8
c000ec04:	83 ec 0c             	sub    esp,0xc
c000ec07:	68 d1 4d 02 c0       	push   0xc0024dd1
c000ec0c:	e8 5c 64 00 00       	call   c001506d <Krnl::panic(char const*)>
c000ec11:	83 c4 10             	add    esp,0x10
c000ec14:	90                   	nop
c000ec15:	c9                   	leave  
c000ec16:	c3                   	ret    
c000ec17:	90                   	nop

c000ec18 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ec18:	56                   	push   esi
c000ec19:	53                   	push   ebx
c000ec1a:	50                   	push   eax
c000ec1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec23:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ec28:	75 35                	jne    c000ec5f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ec2a:	8d 43 20             	lea    eax,[ebx+0x20]
c000ec2d:	31 d2                	xor    edx,edx
c000ec2f:	89 c1                	mov    ecx,eax
c000ec31:	c1 e1 04             	shl    ecx,0x4
c000ec34:	01 f1                	add    ecx,esi
c000ec36:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ec3e:	74 3e                	je     c000ec7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ec40:	42                   	inc    edx
c000ec41:	83 fa 04             	cmp    edx,0x4
c000ec44:	75 f0                	jne    c000ec36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ec46:	83 ec 0c             	sub    esp,0xc
c000ec49:	68 eb 4d 02 c0       	push   0xc0024deb
c000ec4e:	e8 1a 64 00 00       	call   c001506d <Krnl::panic(char const*)>
c000ec53:	83 c4 10             	add    esp,0x10
c000ec56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec5b:	5a                   	pop    edx
c000ec5c:	5b                   	pop    ebx
c000ec5d:	5e                   	pop    esi
c000ec5e:	c3                   	ret    
c000ec5f:	83 ec 0c             	sub    esp,0xc
c000ec62:	56                   	push   esi
c000ec63:	e8 96 fb ff ff       	call   c000e7fe <Device::getName()>
c000ec68:	83 c4 10             	add    esp,0x10
c000ec6b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ec6e:	75 ba                	jne    c000ec2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ec70:	83 fb 0f             	cmp    ebx,0xf
c000ec73:	7f 29                	jg     c000ec9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ec75:	0f b6 9b 60 79 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd86a0]
c000ec7c:	eb ac                	jmp    c000ec2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ec7e:	8d 04 82             	lea    eax,[edx+eax*4]
c000ec81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec85:	8d 04 86             	lea    eax,[esi+eax*4]
c000ec88:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ec8e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ec92:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ec98:	89 d8                	mov    eax,ebx
c000ec9a:	5a                   	pop    edx
c000ec9b:	5b                   	pop    ebx
c000ec9c:	5e                   	pop    esi
c000ec9d:	c3                   	ret    
c000ec9e:	83 ec 0c             	sub    esp,0xc
c000eca1:	68 de 4d 02 c0       	push   0xc0024dde
c000eca6:	e8 c2 63 00 00       	call   c001506d <Krnl::panic(char const*)>
c000ecab:	83 c4 10             	add    esp,0x10
c000ecae:	e9 77 ff ff ff       	jmp    c000ec2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecb3:	90                   	nop

c000ecb4 <InterruptController::clearAllHandlers(int, bool)>:
c000ecb4:	56                   	push   esi
c000ecb5:	53                   	push   ebx
c000ecb6:	52                   	push   edx
c000ecb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ecbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ecbf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ecc4:	75 61                	jne    c000ed27 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ecc6:	8d 46 20             	lea    eax,[esi+0x20]
c000ecc9:	c1 e6 04             	shl    esi,0x4
c000eccc:	c1 e0 04             	shl    eax,0x4
c000eccf:	01 de                	add    esi,ebx
c000ecd1:	01 d8                	add    eax,ebx
c000ecd3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ecdd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ece7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ecf1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ecfb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ed05:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ed0f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ed19:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ed23:	58                   	pop    eax
c000ed24:	5b                   	pop    ebx
c000ed25:	5e                   	pop    esi
c000ed26:	c3                   	ret    
c000ed27:	83 ec 0c             	sub    esp,0xc
c000ed2a:	53                   	push   ebx
c000ed2b:	e8 ce fa ff ff       	call   c000e7fe <Device::getName()>
c000ed30:	83 c4 10             	add    esp,0x10
c000ed33:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed36:	75 8e                	jne    c000ecc6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed38:	83 fe 0f             	cmp    esi,0xf
c000ed3b:	7f 09                	jg     c000ed46 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ed3d:	0f b6 b6 60 79 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd86a0]
c000ed44:	eb 80                	jmp    c000ecc6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed46:	83 ec 0c             	sub    esp,0xc
c000ed49:	68 f8 4d 02 c0       	push   0xc0024df8
c000ed4e:	e8 1a 63 00 00       	call   c001506d <Krnl::panic(char const*)>
c000ed53:	83 c4 10             	add    esp,0x10
c000ed56:	e9 6b ff ff ff       	jmp    c000ecc6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed5b:	90                   	nop

c000ed5c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ed5c:	56                   	push   esi
c000ed5d:	53                   	push   ebx
c000ed5e:	52                   	push   edx
c000ed5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ed63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ed67:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ed6c:	75 3a                	jne    c000eda8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ed6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed72:	8d 50 20             	lea    edx,[eax+0x20]
c000ed75:	c1 e2 04             	shl    edx,0x4
c000ed78:	8d 04 16             	lea    eax,[esi+edx*1]
c000ed7b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ed7f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ed85:	74 0b                	je     c000ed92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ed87:	83 c0 04             	add    eax,0x4
c000ed8a:	39 d0                	cmp    eax,edx
c000ed8c:	75 f1                	jne    c000ed7f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ed8e:	58                   	pop    eax
c000ed8f:	5b                   	pop    ebx
c000ed90:	5e                   	pop    esi
c000ed91:	c3                   	ret    
c000ed92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ed9c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eda6:	eb df                	jmp    c000ed87 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000eda8:	83 ec 0c             	sub    esp,0xc
c000edab:	56                   	push   esi
c000edac:	e8 4d fa ff ff       	call   c000e7fe <Device::getName()>
c000edb1:	83 c4 10             	add    esp,0x10
c000edb4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000edb7:	75 b5                	jne    c000ed6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000edb9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000edbe:	7f 11                	jg     c000edd1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000edc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000edc4:	0f b6 80 60 79 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd86a0]
c000edcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000edcf:	eb 9d                	jmp    c000ed6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000edd1:	83 ec 0c             	sub    esp,0xc
c000edd4:	68 05 4e 02 c0       	push   0xc0024e05
c000edd9:	e8 8f 62 00 00       	call   c001506d <Krnl::panic(char const*)>
c000edde:	83 c4 10             	add    esp,0x10
c000ede1:	eb 8b                	jmp    c000ed6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ede3 <nmiHandler(regs*, void*)>:
c000ede3:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000ede8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edec:	e9 a3 a6 ff ff       	jmp    c0009494 <Computer::handleNMI()>

c000edf1 <int_handler>:
c000edf1:	55                   	push   ebp
c000edf2:	57                   	push   edi
c000edf3:	56                   	push   esi
c000edf4:	53                   	push   ebx
c000edf5:	83 ec 0c             	sub    esp,0xc
c000edf8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000edfc:	80 3d 44 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d44,0x0
c000ee03:	74 0b                	je     c000ee10 <int_handler+0x1f>
c000ee05:	fa                   	cli    
c000ee06:	f4                   	hlt    
c000ee07:	80 3d 44 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d44,0x0
c000ee0e:	75 f5                	jne    c000ee05 <int_handler+0x14>
c000ee10:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000ee15:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ee18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee1e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ee24:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee27:	83 f8 17             	cmp    eax,0x17
c000ee2a:	77 13                	ja     c000ee3f <int_handler+0x4e>
c000ee2c:	83 ec 08             	sub    esp,0x8
c000ee2f:	8b 17                	mov    edx,DWORD PTR [edi]
c000ee31:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee34:	0f b6 c0             	movzx  eax,al
c000ee37:	50                   	push   eax
c000ee38:	57                   	push   edi
c000ee39:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	83 c3 15             	add    ebx,0x15
c000ee42:	c1 e3 04             	shl    ebx,0x4
c000ee45:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ee49:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ee50:	31 db                	xor    ebx,ebx
c000ee52:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ee56:	85 c0                	test   eax,eax
c000ee58:	74 13                	je     c000ee6d <int_handler+0x7c>
c000ee5a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ee5d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ee61:	74 1c                	je     c000ee7f <int_handler+0x8e>
c000ee63:	83 ec 08             	sub    esp,0x8
c000ee66:	52                   	push   edx
c000ee67:	56                   	push   esi
c000ee68:	ff d0                	call   eax
c000ee6a:	83 c4 10             	add    esp,0x10
c000ee6d:	43                   	inc    ebx
c000ee6e:	83 fb 04             	cmp    ebx,0x4
c000ee71:	75 df                	jne    c000ee52 <int_handler+0x61>
c000ee73:	83 c4 0c             	add    esp,0xc
c000ee76:	31 c0                	xor    eax,eax
c000ee78:	5b                   	pop    ebx
c000ee79:	31 d2                	xor    edx,edx
c000ee7b:	5e                   	pop    esi
c000ee7c:	5f                   	pop    edi
c000ee7d:	5d                   	pop    ebp
c000ee7e:	c3                   	ret    
c000ee7f:	83 ec 08             	sub    esp,0x8
c000ee82:	52                   	push   edx
c000ee83:	56                   	push   esi
c000ee84:	ff d0                	call   eax
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	83 c4 0c             	add    esp,0xc
c000ee8c:	5b                   	pop    ebx
c000ee8d:	5e                   	pop    esi
c000ee8e:	5f                   	pop    edi
c000ee8f:	5d                   	pop    ebp
c000ee90:	c3                   	ret    
c000ee91:	90                   	nop

c000ee92 <InterruptController::InterruptController(char const*)>:
c000ee92:	83 ec 1c             	sub    esp,0x1c
c000ee95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee99:	83 ec 08             	sub    esp,0x8
c000ee9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eea0:	50                   	push   eax
c000eea1:	e8 5c f8 ff ff       	call   c000e702 <Device::Device(char const*)>
c000eea6:	83 c4 10             	add    esp,0x10
c000eea9:	ba 3c 51 02 c0       	mov    edx,0xc002513c
c000eeae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb2:	89 10                	mov    DWORD PTR [eax],edx
c000eeb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000eec2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eeca:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000eed2:	7f 5e                	jg     c000ef32 <InterruptController::InterruptController(char const*)+0xa0>
c000eed4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eedc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eee1:	7f 49                	jg     c000ef2c <InterruptController::InterruptController(char const*)+0x9a>
c000eee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eeeb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eef2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eef6:	01 ca                	add    edx,ecx
c000eef8:	83 c2 54             	add    edx,0x54
c000eefb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef0b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef16:	01 ca                	add    edx,ecx
c000ef18:	81 c2 54 04 00 00    	add    edx,0x454
c000ef1e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef26:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ef2a:	eb b0                	jmp    c000eedc <InterruptController::InterruptController(char const*)+0x4a>
c000ef2c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ef30:	eb 98                	jmp    c000eeca <InterruptController::InterruptController(char const*)+0x38>
c000ef32:	90                   	nop
c000ef33:	83 c4 1c             	add    esp,0x1c
c000ef36:	c3                   	ret    
c000ef37:	90                   	nop

c000ef38 <InterruptController::~InterruptController()>:
c000ef38:	83 ec 0c             	sub    esp,0xc
c000ef3b:	ba 3c 51 02 c0       	mov    edx,0xc002513c
c000ef40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef44:	89 10                	mov    DWORD PTR [eax],edx
c000ef46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef4a:	83 ec 0c             	sub    esp,0xc
c000ef4d:	50                   	push   eax
c000ef4e:	e8 79 f4 ff ff       	call   c000e3cc <Device::~Device()>
c000ef53:	83 c4 10             	add    esp,0x10
c000ef56:	90                   	nop
c000ef57:	83 c4 0c             	add    esp,0xc
c000ef5a:	c3                   	ret    
c000ef5b:	90                   	nop

c000ef5c <InterruptController::~InterruptController()>:
c000ef5c:	83 ec 0c             	sub    esp,0xc
c000ef5f:	83 ec 0c             	sub    esp,0xc
c000ef62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef66:	e8 cd ff ff ff       	call   c000ef38 <InterruptController::~InterruptController()>
c000ef6b:	83 c4 10             	add    esp,0x10
c000ef6e:	83 ec 08             	sub    esp,0x8
c000ef71:	68 58 21 00 00       	push   0x2158
c000ef76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef7a:	e8 eb df ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c000ef7f:	83 c4 10             	add    esp,0x10
c000ef82:	83 c4 0c             	add    esp,0xc
c000ef85:	c3                   	ret    

c000ef86 <displayDebugInfo(regs*)>:
c000ef86:	55                   	push   ebp
c000ef87:	57                   	push   edi
c000ef88:	56                   	push   esi
c000ef89:	53                   	push   ebx
c000ef8a:	83 ec 24             	sub    esp,0x24
c000ef8d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ef91:	0f 20 c2             	mov    edx,cr0
c000ef94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ef98:	0f 20 d7             	mov    edi,cr2
c000ef9b:	0f 20 de             	mov    esi,cr3
c000ef9e:	0f 20 e5             	mov    ebp,cr4
c000efa1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000efa4:	68 12 4e 02 c0       	push   0xc0024e12
c000efa9:	e8 9d e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000efae:	59                   	pop    ecx
c000efaf:	58                   	pop    eax
c000efb0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000efb3:	68 1d 4e 02 c0       	push   0xc0024e1d
c000efb8:	e8 8e e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000efbd:	58                   	pop    eax
c000efbe:	5a                   	pop    edx
c000efbf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000efc2:	68 28 4e 02 c0       	push   0xc0024e28
c000efc7:	e8 7f e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000efcc:	59                   	pop    ecx
c000efcd:	58                   	pop    eax
c000efce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000efd1:	68 33 4e 02 c0       	push   0xc0024e33
c000efd6:	e8 70 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000efdb:	58                   	pop    eax
c000efdc:	5a                   	pop    edx
c000efdd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000efe0:	68 3e 4e 02 c0       	push   0xc0024e3e
c000efe5:	e8 61 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000efea:	59                   	pop    ecx
c000efeb:	58                   	pop    eax
c000efec:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000efef:	68 49 4e 02 c0       	push   0xc0024e49
c000eff4:	e8 52 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000eff9:	58                   	pop    eax
c000effa:	5a                   	pop    edx
c000effb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000effe:	68 54 4e 02 c0       	push   0xc0024e54
c000f003:	e8 43 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f008:	59                   	pop    ecx
c000f009:	58                   	pop    eax
c000f00a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f00d:	68 5f 4e 02 c0       	push   0xc0024e5f
c000f012:	e8 34 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f017:	58                   	pop    eax
c000f018:	5a                   	pop    edx
c000f019:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f01c:	68 6a 4e 02 c0       	push   0xc0024e6a
c000f021:	e8 25 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f026:	59                   	pop    ecx
c000f027:	58                   	pop    eax
c000f028:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f02b:	68 79 4e 02 c0       	push   0xc0024e79
c000f030:	e8 16 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f035:	58                   	pop    eax
c000f036:	5a                   	pop    edx
c000f037:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f03a:	68 84 4e 02 c0       	push   0xc0024e84
c000f03f:	e8 07 e0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f044:	59                   	pop    ecx
c000f045:	58                   	pop    eax
c000f046:	57                   	push   edi
c000f047:	68 8f 4e 02 c0       	push   0xc0024e8f
c000f04c:	e8 fa df ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f051:	58                   	pop    eax
c000f052:	5a                   	pop    edx
c000f053:	56                   	push   esi
c000f054:	68 9a 4e 02 c0       	push   0xc0024e9a
c000f059:	e8 ed df ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f05e:	59                   	pop    ecx
c000f05f:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f064:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f06a:	e8 be bd ff ff       	call   c000ae2d <setActiveTerminal(VgaText*)>
c000f06f:	58                   	pop    eax
c000f070:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f073:	5a                   	pop    edx
c000f074:	c1 e0 05             	shl    eax,0x5
c000f077:	05 c0 76 02 c0       	add    eax,0xc00276c0
c000f07c:	50                   	push   eax
c000f07d:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f082:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f088:	e8 a3 c2 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f08d:	59                   	pop    ecx
c000f08e:	58                   	pop    eax
c000f08f:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f094:	68 a5 4e 02 c0       	push   0xc0024ea5
c000f099:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f09f:	e8 8c c2 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f0a4:	58                   	pop    eax
c000f0a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0aa:	5a                   	pop    edx
c000f0ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f0ae:	83 c0 0c             	add    eax,0xc
c000f0b1:	50                   	push   eax
c000f0b2:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f0b7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0bd:	e8 6e c2 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f0c2:	59                   	pop    ecx
c000f0c3:	58                   	pop    eax
c000f0c4:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f0c9:	68 ae 4e 02 c0       	push   0xc0024eae
c000f0ce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d4:	e8 57 c2 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f0d9:	58                   	pop    eax
c000f0da:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f0df:	5a                   	pop    edx
c000f0e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0e3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0e9:	e8 fc c1 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f0ee:	59                   	pop    ecx
c000f0ef:	58                   	pop    eax
c000f0f0:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f0f5:	68 b6 4e 02 c0       	push   0xc0024eb6
c000f0fa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f100:	e8 2b c2 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f105:	58                   	pop    eax
c000f106:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f10b:	5a                   	pop    edx
c000f10c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f10f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f115:	e8 d0 c1 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f11a:	59                   	pop    ecx
c000f11b:	58                   	pop    eax
c000f11c:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f121:	68 be 4e 02 c0       	push   0xc0024ebe
c000f126:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f12c:	e8 ff c1 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f131:	58                   	pop    eax
c000f132:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f137:	5a                   	pop    edx
c000f138:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f13b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f141:	e8 a4 c1 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f146:	59                   	pop    ecx
c000f147:	58                   	pop    eax
c000f148:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f14d:	68 c6 4e 02 c0       	push   0xc0024ec6
c000f152:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f158:	e8 d3 c1 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f15d:	58                   	pop    eax
c000f15e:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f163:	5a                   	pop    edx
c000f164:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f167:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f16d:	e8 78 c1 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f172:	59                   	pop    ecx
c000f173:	58                   	pop    eax
c000f174:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f179:	68 ce 4e 02 c0       	push   0xc0024ece
c000f17e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f184:	e8 a7 c1 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f189:	58                   	pop    eax
c000f18a:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f18f:	5a                   	pop    edx
c000f190:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f193:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f199:	e8 4c c1 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f19e:	59                   	pop    ecx
c000f19f:	58                   	pop    eax
c000f1a0:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f1a5:	68 d6 4e 02 c0       	push   0xc0024ed6
c000f1aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1b0:	e8 7b c1 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f1b5:	58                   	pop    eax
c000f1b6:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f1bb:	5a                   	pop    edx
c000f1bc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f1bf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1c5:	e8 20 c1 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f1ca:	59                   	pop    ecx
c000f1cb:	58                   	pop    eax
c000f1cc:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f1d1:	68 de 4e 02 c0       	push   0xc0024ede
c000f1d6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1dc:	e8 4f c1 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f1e1:	58                   	pop    eax
c000f1e2:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f1e7:	5a                   	pop    edx
c000f1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f1ec:	52                   	push   edx
c000f1ed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f3:	e8 f2 c0 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f1f8:	59                   	pop    ecx
c000f1f9:	58                   	pop    eax
c000f1fa:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f1ff:	68 e7 4e 02 c0       	push   0xc0024ee7
c000f204:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f20a:	e8 21 c1 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f20f:	58                   	pop    eax
c000f210:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f215:	5a                   	pop    edx
c000f216:	57                   	push   edi
c000f217:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f21d:	e8 c8 c0 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f222:	59                   	pop    ecx
c000f223:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f228:	5f                   	pop    edi
c000f229:	68 ef 4e 02 c0       	push   0xc0024eef
c000f22e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f234:	e8 f7 c0 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f239:	58                   	pop    eax
c000f23a:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f23f:	5a                   	pop    edx
c000f240:	56                   	push   esi
c000f241:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f247:	e8 9e c0 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f24c:	59                   	pop    ecx
c000f24d:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f252:	5e                   	pop    esi
c000f253:	68 f7 4e 02 c0       	push   0xc0024ef7
c000f258:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f25e:	e8 cd c0 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f263:	5f                   	pop    edi
c000f264:	58                   	pop    eax
c000f265:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f26a:	55                   	push   ebp
c000f26b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f271:	e8 74 c0 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f276:	58                   	pop    eax
c000f277:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f27c:	5a                   	pop    edx
c000f27d:	68 ff 4e 02 c0       	push   0xc0024eff
c000f282:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f288:	e8 a3 c0 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f28d:	0f 21 c0             	mov    eax,db0
c000f290:	59                   	pop    ecx
c000f291:	5e                   	pop    esi
c000f292:	50                   	push   eax
c000f293:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f298:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f29e:	e8 47 c0 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f2a3:	5f                   	pop    edi
c000f2a4:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f2a9:	5d                   	pop    ebp
c000f2aa:	68 08 4f 02 c0       	push   0xc0024f08
c000f2af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b5:	e8 76 c0 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f2ba:	0f 21 c8             	mov    eax,db1
c000f2bd:	5a                   	pop    edx
c000f2be:	59                   	pop    ecx
c000f2bf:	50                   	push   eax
c000f2c0:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f2c5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2cb:	e8 1a c0 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f2d0:	5e                   	pop    esi
c000f2d1:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f2d6:	5f                   	pop    edi
c000f2d7:	68 10 4f 02 c0       	push   0xc0024f10
c000f2dc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2e2:	e8 49 c0 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f2e7:	0f 21 d0             	mov    eax,db2
c000f2ea:	5d                   	pop    ebp
c000f2eb:	5a                   	pop    edx
c000f2ec:	50                   	push   eax
c000f2ed:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f2f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f8:	e8 ed bf ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f2fd:	59                   	pop    ecx
c000f2fe:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f303:	5e                   	pop    esi
c000f304:	68 18 4f 02 c0       	push   0xc0024f18
c000f309:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f30f:	e8 1c c0 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f314:	0f 21 d8             	mov    eax,db3
c000f317:	5f                   	pop    edi
c000f318:	5d                   	pop    ebp
c000f319:	50                   	push   eax
c000f31a:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f31f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f325:	e8 c0 bf ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f32a:	58                   	pop    eax
c000f32b:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f330:	5a                   	pop    edx
c000f331:	68 20 4f 02 c0       	push   0xc0024f20
c000f336:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f33c:	e8 ef bf ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f341:	0f 21 f0             	mov    eax,db6
c000f344:	59                   	pop    ecx
c000f345:	5e                   	pop    esi
c000f346:	50                   	push   eax
c000f347:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f34c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f352:	e8 93 bf ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f357:	5f                   	pop    edi
c000f358:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f35d:	5d                   	pop    ebp
c000f35e:	68 28 4f 02 c0       	push   0xc0024f28
c000f363:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f369:	e8 c2 bf ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f36e:	0f 21 f8             	mov    eax,db7
c000f371:	5a                   	pop    edx
c000f372:	59                   	pop    ecx
c000f373:	50                   	push   eax
c000f374:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f379:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f37f:	e8 66 bf ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f384:	5e                   	pop    esi
c000f385:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f388:	e8 14 89 00 00       	call   c0017ca1 <Thr::getDriverNameFromAddress(unsigned long)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	85 c0                	test   eax,eax
c000f392:	74 7d                	je     c000f411 <displayDebugInfo(regs*)+0x48b>
c000f394:	89 c6                	mov    esi,eax
c000f396:	50                   	push   eax
c000f397:	50                   	push   eax
c000f398:	56                   	push   esi
c000f399:	68 30 4f 02 c0       	push   0xc0024f30
c000f39e:	e8 a8 dc ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f3a3:	5a                   	pop    edx
c000f3a4:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f3a9:	59                   	pop    ecx
c000f3aa:	68 3e 4f 02 c0       	push   0xc0024f3e
c000f3af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b5:	e8 76 bf ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f3ba:	5f                   	pop    edi
c000f3bb:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f3c0:	5d                   	pop    ebp
c000f3c1:	56                   	push   esi
c000f3c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3c8:	e8 63 bf ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f3cd:	58                   	pop    eax
c000f3ce:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f3d3:	5a                   	pop    edx
c000f3d4:	68 4a 4f 02 c0       	push   0xc0024f4a
c000f3d9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3df:	e8 4c bf ff ff       	call   c000b330 <VgaText::puts(char const*)>
c000f3e4:	59                   	pop    ecx
c000f3e5:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c000f3ea:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f3f0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f3f3:	e8 e0 88 00 00       	call   c0017cd8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f3f8:	5b                   	pop    ebx
c000f3f9:	5d                   	pop    ebp
c000f3fa:	50                   	push   eax
c000f3fb:	57                   	push   edi
c000f3fc:	e8 e9 be ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c000f401:	58                   	pop    eax
c000f402:	5a                   	pop    edx
c000f403:	56                   	push   esi
c000f404:	68 56 4f 02 c0       	push   0xc0024f56
c000f409:	e8 3d dc ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f40e:	83 c4 10             	add    esp,0x10
c000f411:	fa                   	cli    
c000f412:	f4                   	hlt    
c000f413:	eb fe                	jmp    c000f413 <displayDebugInfo(regs*)+0x48d>

c000f415 <x87EmulHandler(regs*, void*)>:
c000f415:	53                   	push   ebx
c000f416:	83 ec 14             	sub    esp,0x14
c000f419:	68 66 4f 02 c0       	push   0xc0024f66
c000f41e:	e8 28 dc ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f423:	0f 20 c2             	mov    edx,cr0
c000f426:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f42b:	83 c4 10             	add    esp,0x10
c000f42e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f432:	0f 85 0f 01 00 00    	jne    c000f547 <x87EmulHandler(regs*, void*)+0x132>
c000f438:	f6 05 81 82 02 c0 40 	test   BYTE PTR ds:0xc0028281,0x40
c000f43f:	75 30                	jne    c000f471 <x87EmulHandler(regs*, void*)+0x5c>
c000f441:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000f446:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f44c:	85 c0                	test   eax,eax
c000f44e:	74 05                	je     c000f455 <x87EmulHandler(regs*, void*)+0x40>
c000f450:	83 e2 08             	and    edx,0x8
c000f453:	75 23                	jne    c000f478 <x87EmulHandler(regs*, void*)+0x63>
c000f455:	83 ec 0c             	sub    esp,0xc
c000f458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45c:	e8 a5 ad 00 00       	call   c001a206 <Vm::x87Handler(regs*)>
c000f461:	83 c4 10             	add    esp,0x10
c000f464:	84 c0                	test   al,al
c000f466:	0f 84 db 00 00 00    	je     c000f547 <x87EmulHandler(regs*, void*)+0x132>
c000f46c:	83 c4 08             	add    esp,0x8
c000f46f:	5b                   	pop    ebx
c000f470:	c3                   	ret    
c000f471:	0f 06                	clts   
c000f473:	83 c4 08             	add    esp,0x8
c000f476:	5b                   	pop    ebx
c000f477:	c3                   	ret    
c000f478:	83 ec 0c             	sub    esp,0xc
c000f47b:	68 96 4f 02 c0       	push   0xc0024f96
c000f480:	e8 c6 db ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f485:	0f 06                	clts   
c000f487:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	85 c0                	test   eax,eax
c000f491:	74 33                	je     c000f4c6 <x87EmulHandler(regs*, void*)+0xb1>
c000f493:	83 ec 0c             	sub    esp,0xc
c000f496:	68 a3 4f 02 c0       	push   0xc0024fa3
c000f49b:	e8 ab db ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f4a0:	59                   	pop    ecx
c000f4a1:	a1 a8 83 02 c0       	mov    eax,ds:0xc00283a8
c000f4a6:	5b                   	pop    ebx
c000f4a7:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f4aa:	8b 15 68 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028268
c000f4b0:	83 c0 3f             	add    eax,0x3f
c000f4b3:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f4b9:	83 e0 c0             	and    eax,0xffffffc0
c000f4bc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f4be:	50                   	push   eax
c000f4bf:	52                   	push   edx
c000f4c0:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f4c3:	83 c4 10             	add    esp,0x10
c000f4c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4cb:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f4ce:	85 c0                	test   eax,eax
c000f4d0:	74 4e                	je     c000f520 <x87EmulHandler(regs*, void*)+0x10b>
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	68 cf 4f 02 c0       	push   0xc0024fcf
c000f4da:	e8 6c db ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f4df:	59                   	pop    ecx
c000f4e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4e5:	5b                   	pop    ebx
c000f4e6:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f4e9:	8b 15 68 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028268
c000f4ef:	83 c0 3f             	add    eax,0x3f
c000f4f2:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f4f8:	83 e0 c0             	and    eax,0xffffffc0
c000f4fb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f4fd:	50                   	push   eax
c000f4fe:	52                   	push   edx
c000f4ff:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f502:	c7 04 24 e5 4f 02 c0 	mov    DWORD PTR [esp],0xc0024fe5
c000f509:	e8 3d db ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f516:	a3 a8 83 02 c0       	mov    ds:0xc00283a8,eax
c000f51b:	83 c4 08             	add    esp,0x8
c000f51e:	5b                   	pop    ebx
c000f51f:	c3                   	ret    
c000f520:	83 ec 0c             	sub    esp,0xc
c000f523:	68 b6 4f 02 c0       	push   0xc0024fb6
c000f528:	e8 1e db ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f52d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f533:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f53a:	e8 00 a8 ff ff       	call   c0009d3f <malloc>
c000f53f:	83 c4 10             	add    esp,0x10
c000f542:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f545:	eb ca                	jmp    c000f511 <x87EmulHandler(regs*, void*)+0xfc>
c000f547:	83 ec 0c             	sub    esp,0xc
c000f54a:	68 80 4f 02 c0       	push   0xc0024f80
c000f54f:	e8 f7 da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f554:	58                   	pop    eax
c000f555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f559:	e8 28 fa ff ff       	call   c000ef86 <displayDebugInfo(regs*)>

c000f55e <gpFault(regs*, void*)>:
c000f55e:	53                   	push   ebx
c000f55f:	83 ec 14             	sub    esp,0x14
c000f562:	c7 05 a4 83 02 c0 c3 96 01 c0 	mov    DWORD PTR ds:0xc00283a4,0xc00196c3
c000f56c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f570:	53                   	push   ebx
c000f571:	e8 4d a1 00 00       	call   c00196c3 <Vm::faultHandler(regs*)>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	84 c0                	test   al,al
c000f57b:	74 05                	je     c000f582 <gpFault(regs*, void*)+0x24>
c000f57d:	83 c4 08             	add    esp,0x8
c000f580:	5b                   	pop    ebx
c000f581:	c3                   	ret    
c000f582:	83 ec 0c             	sub    esp,0xc
c000f585:	68 fa 4f 02 c0       	push   0xc0024ffa
c000f58a:	e8 bc da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f58f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f592:	e8 ef f9 ff ff       	call   c000ef86 <displayDebugInfo(regs*)>

c000f597 <pgFault(regs*, void*)>:
c000f597:	53                   	push   ebx
c000f598:	83 ec 10             	sub    esp,0x10
c000f59b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f59f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f5a2:	68 15 50 02 c0       	push   0xc0025015
c000f5a7:	e8 9f da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f5ac:	0f 20 d0             	mov    eax,cr2
c000f5af:	5a                   	pop    edx
c000f5b0:	59                   	pop    ecx
c000f5b1:	50                   	push   eax
c000f5b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5ba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f5c0:	e8 01 d6 ff ff       	call   c000cbc6 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f5c5:	83 c4 10             	add    esp,0x10
c000f5c8:	84 c0                	test   al,al
c000f5ca:	74 05                	je     c000f5d1 <pgFault(regs*, void*)+0x3a>
c000f5cc:	83 c4 08             	add    esp,0x8
c000f5cf:	5b                   	pop    ebx
c000f5d0:	c3                   	ret    
c000f5d1:	83 ec 0c             	sub    esp,0xc
c000f5d4:	68 2a 50 02 c0       	push   0xc002502a
c000f5d9:	e8 6d da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f5de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5e1:	e8 a0 f9 ff ff       	call   c000ef86 <displayDebugInfo(regs*)>

c000f5e6 <otherISRHandler(regs*, void*)>:
c000f5e6:	53                   	push   ebx
c000f5e7:	83 ec 0c             	sub    esp,0xc
c000f5ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f5ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f5f1:	50                   	push   eax
c000f5f2:	50                   	push   eax
c000f5f3:	68 37 50 02 c0       	push   0xc0025037
c000f5f8:	e8 4e da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f5fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f600:	e8 81 f9 ff ff       	call   c000ef86 <displayDebugInfo(regs*)>

c000f605 <opcodeFault(regs*, void*)>:
c000f605:	55                   	push   ebp
c000f606:	89 e5                	mov    ebp,esp
c000f608:	56                   	push   esi
c000f609:	53                   	push   ebx
c000f60a:	83 ec 30             	sub    esp,0x30
c000f60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f610:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f613:	83 ec 08             	sub    esp,0x8
c000f616:	50                   	push   eax
c000f617:	68 54 50 02 c0       	push   0xc0025054
c000f61c:	e8 2a da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000f629:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f62f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f635:	84 c0                	test   al,al
c000f637:	74 24                	je     c000f65d <opcodeFault(regs*, void*)+0x58>
c000f639:	83 ec 0c             	sub    esp,0xc
c000f63c:	68 64 50 02 c0       	push   0xc0025064
c000f641:	e8 05 da ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f646:	83 c4 10             	add    esp,0x10
c000f649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f64c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f64f:	8d 50 19             	lea    edx,[eax+0x19]
c000f652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f655:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f658:	e9 7b 03 00 00       	jmp    c000f9d8 <opcodeFault(regs*, void*)+0x3d3>
c000f65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f660:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f663:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f666:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f66d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f670:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f676:	8a 00                	mov    al,BYTE PTR [eax]
c000f678:	3c f0                	cmp    al,0xf0
c000f67a:	75 17                	jne    c000f693 <opcodeFault(regs*, void*)+0x8e>
c000f67c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f682:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f685:	8d 50 01             	lea    edx,[eax+0x1]
c000f688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f68b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f68e:	e9 d6 00 00 00       	jmp    c000f769 <opcodeFault(regs*, void*)+0x164>
c000f693:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f696:	8a 00                	mov    al,BYTE PTR [eax]
c000f698:	3c f2                	cmp    al,0xf2
c000f69a:	74 09                	je     c000f6a5 <opcodeFault(regs*, void*)+0xa0>
c000f69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f69f:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a1:	3c f3                	cmp    al,0xf3
c000f6a3:	75 1b                	jne    c000f6c0 <opcodeFault(regs*, void*)+0xbb>
c000f6a5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6a9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6bb:	e9 a9 00 00 00       	jmp    c000f769 <opcodeFault(regs*, void*)+0x164>
c000f6c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c3:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c5:	3c 66                	cmp    al,0x66
c000f6c7:	75 1b                	jne    c000f6e4 <opcodeFault(regs*, void*)+0xdf>
c000f6c9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6cd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6d6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6dc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6df:	e9 85 00 00 00       	jmp    c000f769 <opcodeFault(regs*, void*)+0x164>
c000f6e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f6e9:	3c 67                	cmp    al,0x67
c000f6eb:	75 18                	jne    c000f705 <opcodeFault(regs*, void*)+0x100>
c000f6ed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f700:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f703:	eb 64                	jmp    c000f769 <opcodeFault(regs*, void*)+0x164>
c000f705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f708:	8a 00                	mov    al,BYTE PTR [eax]
c000f70a:	3c 2e                	cmp    al,0x2e
c000f70c:	74 09                	je     c000f717 <opcodeFault(regs*, void*)+0x112>
c000f70e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f711:	8a 00                	mov    al,BYTE PTR [eax]
c000f713:	3c 3e                	cmp    al,0x3e
c000f715:	75 18                	jne    c000f72f <opcodeFault(regs*, void*)+0x12a>
c000f717:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f71b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f721:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f724:	8d 50 01             	lea    edx,[eax+0x1]
c000f727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f72a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f72d:	eb 3a                	jmp    c000f769 <opcodeFault(regs*, void*)+0x164>
c000f72f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f732:	8a 00                	mov    al,BYTE PTR [eax]
c000f734:	3c 36                	cmp    al,0x36
c000f736:	74 1b                	je     c000f753 <opcodeFault(regs*, void*)+0x14e>
c000f738:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f73b:	8a 00                	mov    al,BYTE PTR [eax]
c000f73d:	3c 26                	cmp    al,0x26
c000f73f:	74 12                	je     c000f753 <opcodeFault(regs*, void*)+0x14e>
c000f741:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f744:	8a 00                	mov    al,BYTE PTR [eax]
c000f746:	3c 64                	cmp    al,0x64
c000f748:	74 09                	je     c000f753 <opcodeFault(regs*, void*)+0x14e>
c000f74a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f74d:	8a 00                	mov    al,BYTE PTR [eax]
c000f74f:	3c 65                	cmp    al,0x65
c000f751:	75 16                	jne    c000f769 <opcodeFault(regs*, void*)+0x164>
c000f753:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f757:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f75d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f760:	8d 50 01             	lea    edx,[eax+0x1]
c000f763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f766:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f769:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f76c:	8a 00                	mov    al,BYTE PTR [eax]
c000f76e:	3c 0f                	cmp    al,0xf
c000f770:	0f 85 8d 01 00 00    	jne    c000f903 <opcodeFault(regs*, void*)+0x2fe>
c000f776:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f779:	40                   	inc    eax
c000f77a:	8a 00                	mov    al,BYTE PTR [eax]
c000f77c:	3c c7                	cmp    al,0xc7
c000f77e:	0f 85 7f 01 00 00    	jne    c000f903 <opcodeFault(regs*, void*)+0x2fe>
c000f784:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f78a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f78d:	8d 50 01             	lea    edx,[eax+0x1]
c000f790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f793:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f796:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f799:	50                   	push   eax
c000f79a:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f79d:	50                   	push   eax
c000f79e:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f7a1:	50                   	push   eax
c000f7a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f7a5:	e8 dc 4f 00 00       	call   c0014786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f7aa:	83 c4 10             	add    esp,0x10
c000f7ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f7b0:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f7b3:	83 f0 01             	xor    eax,0x1
c000f7b6:	84 c0                	test   al,al
c000f7b8:	0f 84 45 01 00 00    	je     c000f903 <opcodeFault(regs*, void*)+0x2fe>
c000f7be:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f7c1:	3c 01                	cmp    al,0x1
c000f7c3:	0f 85 3a 01 00 00    	jne    c000f903 <opcodeFault(regs*, void*)+0x2fe>
c000f7c9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f7cc:	83 f0 01             	xor    eax,0x1
c000f7cf:	84 c0                	test   al,al
c000f7d1:	0f 84 2c 01 00 00    	je     c000f903 <opcodeFault(regs*, void*)+0x2fe>
c000f7d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f7dd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f7e0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f7e7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f7ea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f7ed:	89 c2                	mov    edx,eax
c000f7ef:	b8 00 00 00 00       	mov    eax,0x0
c000f7f4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f7f7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f800:	ba 00 00 00 00       	mov    edx,0x0
c000f805:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f808:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f80b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f80e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f811:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f814:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f81b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f81e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f821:	89 c2                	mov    edx,eax
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f82b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f831:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f834:	ba 00 00 00 00       	mov    edx,0x0
c000f839:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f83c:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f83f:	fa                   	cli    
c000f840:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f845:	40                   	inc    eax
c000f846:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f84b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f84e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f851:	8b 00                	mov    eax,DWORD PTR [eax]
c000f853:	89 c1                	mov    ecx,eax
c000f855:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f858:	89 cb                	mov    ebx,ecx
c000f85a:	89 d0                	mov    eax,edx
c000f85c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f85f:	89 c6                	mov    esi,eax
c000f861:	89 f0                	mov    eax,esi
c000f863:	09 d8                	or     eax,ebx
c000f865:	85 c0                	test   eax,eax
c000f867:	75 21                	jne    c000f88a <opcodeFault(regs*, void*)+0x285>
c000f869:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f86c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f86f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f872:	89 01                	mov    DWORD PTR [ecx],eax
c000f874:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f87a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f87d:	83 c8 40             	or     eax,0x40
c000f880:	89 c2                	mov    edx,eax
c000f882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f885:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f888:	eb 3e                	jmp    c000f8c8 <opcodeFault(regs*, void*)+0x2c3>
c000f88a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f88d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f890:	8b 00                	mov    eax,DWORD PTR [eax]
c000f892:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f895:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f898:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f89b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f8a1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f8a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f8a7:	89 d0                	mov    eax,edx
c000f8a9:	31 d2                	xor    edx,edx
c000f8ab:	89 c3                	mov    ebx,eax
c000f8ad:	89 d6                	mov    esi,edx
c000f8af:	89 da                	mov    edx,ebx
c000f8b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8bd:	83 e0 bf             	and    eax,0xffffffbf
c000f8c0:	89 c2                	mov    edx,eax
c000f8c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f8c8:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f8cd:	48                   	dec    eax
c000f8ce:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f8d3:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f8d8:	85 c0                	test   eax,eax
c000f8da:	75 01                	jne    c000f8dd <opcodeFault(regs*, void*)+0x2d8>
c000f8dc:	fb                   	sti    
c000f8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8e3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f8e6:	01 c2                	add    edx,eax
c000f8e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8ee:	83 ec 0c             	sub    esp,0xc
c000f8f1:	68 87 50 02 c0       	push   0xc0025087
c000f8f6:	e8 50 d7 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f8fb:	83 c4 10             	add    esp,0x10
c000f8fe:	e9 d5 00 00 00       	jmp    c000f9d8 <opcodeFault(regs*, void*)+0x3d3>
c000f903:	83 ec 0c             	sub    esp,0xc
c000f906:	68 9a 50 02 c0       	push   0xc002509a
c000f90b:	e8 3b d7 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f910:	83 c4 10             	add    esp,0x10
c000f913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f916:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f91f:	c1 e0 04             	shl    eax,0x4
c000f922:	01 d0                	add    eax,edx
c000f924:	83 c0 03             	add    eax,0x3
c000f927:	8a 00                	mov    al,BYTE PTR [eax]
c000f929:	0f b6 d8             	movzx  ebx,al
c000f92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f92f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f935:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f938:	c1 e0 04             	shl    eax,0x4
c000f93b:	01 d0                	add    eax,edx
c000f93d:	83 c0 02             	add    eax,0x2
c000f940:	8a 00                	mov    al,BYTE PTR [eax]
c000f942:	0f b6 c8             	movzx  ecx,al
c000f945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f948:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f94b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f951:	c1 e0 04             	shl    eax,0x4
c000f954:	01 d0                	add    eax,edx
c000f956:	40                   	inc    eax
c000f957:	8a 00                	mov    al,BYTE PTR [eax]
c000f959:	0f b6 d0             	movzx  edx,al
c000f95c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f95f:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f965:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f968:	c1 e0 04             	shl    eax,0x4
c000f96b:	01 f0                	add    eax,esi
c000f96d:	8a 00                	mov    al,BYTE PTR [eax]
c000f96f:	0f b6 c0             	movzx  eax,al
c000f972:	83 ec 0c             	sub    esp,0xc
c000f975:	53                   	push   ebx
c000f976:	51                   	push   ecx
c000f977:	52                   	push   edx
c000f978:	50                   	push   eax
c000f979:	68 ac 50 02 c0       	push   0xc00250ac
c000f97e:	e8 c8 d6 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f983:	83 c4 20             	add    esp,0x20
c000f986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f989:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f98c:	83 c0 03             	add    eax,0x3
c000f98f:	8a 00                	mov    al,BYTE PTR [eax]
c000f991:	0f b6 d8             	movzx  ebx,al
c000f994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f997:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f99a:	83 c0 02             	add    eax,0x2
c000f99d:	8a 00                	mov    al,BYTE PTR [eax]
c000f99f:	0f b6 c8             	movzx  ecx,al
c000f9a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9a8:	40                   	inc    eax
c000f9a9:	8a 00                	mov    al,BYTE PTR [eax]
c000f9ab:	0f b6 d0             	movzx  edx,al
c000f9ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f9b6:	0f b6 c0             	movzx  eax,al
c000f9b9:	83 ec 0c             	sub    esp,0xc
c000f9bc:	53                   	push   ebx
c000f9bd:	51                   	push   ecx
c000f9be:	52                   	push   edx
c000f9bf:	50                   	push   eax
c000f9c0:	68 d4 50 02 c0       	push   0xc00250d4
c000f9c5:	e8 81 d6 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c000f9ca:	83 c4 20             	add    esp,0x20
c000f9cd:	83 ec 0c             	sub    esp,0xc
c000f9d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f9d3:	e8 ae f5 ff ff       	call   c000ef86 <displayDebugInfo(regs*)>
c000f9d8:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f9db:	5b                   	pop    ebx
c000f9dc:	5e                   	pop    esi
c000f9dd:	5d                   	pop    ebp
c000f9de:	c3                   	ret    

c000f9df <displayProgramFault(char const*)>:
c000f9df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	74 15                	je     c000fa06 <displayProgramFault(char const*)+0x27>
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	6a 04                	push   0x4
c000f9f6:	6a 0f                	push   0xf
c000f9f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9fc:	50                   	push   eax
c000f9fd:	e8 2a b6 ff ff       	call   c000b02c <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fa02:	83 c4 1c             	add    esp,0x1c
c000fa05:	c3                   	ret    
c000fa06:	c3                   	ret    

c000fa07 <setupInterruptController()>:
c000fa07:	55                   	push   ebp
c000fa08:	89 e5                	mov    ebp,esp
c000fa0a:	53                   	push   ebx
c000fa0b:	83 ec 24             	sub    esp,0x24
c000fa0e:	b8 00 00 00 00       	mov    eax,0x0
c000fa13:	85 c0                	test   eax,eax
c000fa15:	0f 95 c0             	setne  al
c000fa18:	84 c0                	test   al,al
c000fa1a:	74 5b                	je     c000fa77 <setupInterruptController()+0x70>
c000fa1c:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fa23:	83 ec 0c             	sub    esp,0xc
c000fa26:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fa29:	e8 11 a3 ff ff       	call   c0009d3f <malloc>
c000fa2e:	83 c4 10             	add    esp,0x10
c000fa31:	89 c3                	mov    ebx,eax
c000fa33:	83 ec 0c             	sub    esp,0xc
c000fa36:	53                   	push   ebx
c000fa37:	e8 c0 1c 01 00       	call   c00216fc <APIC::APIC()>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fa42:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fa45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fa48:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa4a:	83 c0 08             	add    eax,0x8
c000fa4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa4f:	6a 00                	push   0x0
c000fa51:	6a 00                	push   0x0
c000fa53:	6a 00                	push   0x0
c000fa55:	52                   	push   edx
c000fa56:	ff d0                	call   eax
c000fa58:	83 c4 10             	add    esp,0x10
c000fa5b:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000fa60:	83 ec 08             	sub    esp,0x8
c000fa63:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fa66:	50                   	push   eax
c000fa67:	e8 92 ea ff ff       	call   c000e4fe <Device::addChild(Device*)>
c000fa6c:	83 c4 10             	add    esp,0x10
c000fa6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fa72:	e9 79 03 00 00       	jmp    c000fdf0 <setupInterruptController()+0x3e9>
c000fa77:	a0 80 8b 02 c0       	mov    al,ds:0xc0028b80
c000fa7c:	84 c0                	test   al,al
c000fa7e:	75 14                	jne    c000fa94 <setupInterruptController()+0x8d>
c000fa80:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000fa85:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fa8b:	83 e2 fe             	and    edx,0xfffffffe
c000fa8e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fa94:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000fa99:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fa9f:	83 e0 01             	and    eax,0x1
c000faa2:	84 c0                	test   al,al
c000faa4:	0f 95 c0             	setne  al
c000faa7:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000faaa:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fab1:	83 ec 0c             	sub    esp,0xc
c000fab4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fab7:	e8 83 a2 ff ff       	call   c0009d3f <malloc>
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	89 c3                	mov    ebx,eax
c000fac1:	83 ec 0c             	sub    esp,0xc
c000fac4:	53                   	push   ebx
c000fac5:	e8 8a 21 01 00       	call   c0021c54 <PIC::PIC()>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fad0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fad6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fad8:	83 c0 08             	add    eax,0x8
c000fadb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadd:	6a 00                	push   0x0
c000fadf:	6a 00                	push   0x0
c000fae1:	6a 00                	push   0x0
c000fae3:	52                   	push   edx
c000fae4:	ff d0                	call   eax
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000faed:	74 73                	je     c000fb62 <setupInterruptController()+0x15b>
c000faef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000faf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf7:	83 c0 0c             	add    eax,0xc
c000fafa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fafc:	6a 00                	push   0x0
c000fafe:	6a 00                	push   0x0
c000fb00:	6a 00                	push   0x0
c000fb02:	52                   	push   edx
c000fb03:	ff d0                	call   eax
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fb0c:	74 15                	je     c000fb23 <setupInterruptController()+0x11c>
c000fb0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb13:	83 c0 04             	add    eax,0x4
c000fb16:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb18:	83 ec 0c             	sub    esp,0xc
c000fb1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb1e:	ff d0                	call   eax
c000fb20:	83 c4 10             	add    esp,0x10
c000fb23:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fb2a:	83 ec 0c             	sub    esp,0xc
c000fb2d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fb30:	e8 0a a2 ff ff       	call   c0009d3f <malloc>
c000fb35:	83 c4 10             	add    esp,0x10
c000fb38:	89 c3                	mov    ebx,eax
c000fb3a:	83 ec 0c             	sub    esp,0xc
c000fb3d:	53                   	push   ebx
c000fb3e:	e8 b9 1b 01 00       	call   c00216fc <APIC::APIC()>
c000fb43:	83 c4 10             	add    esp,0x10
c000fb46:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fb49:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb4f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb51:	83 c0 08             	add    eax,0x8
c000fb54:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb56:	6a 00                	push   0x0
c000fb58:	6a 00                	push   0x0
c000fb5a:	6a 00                	push   0x0
c000fb5c:	52                   	push   edx
c000fb5d:	ff d0                	call   eax
c000fb5f:	83 c4 10             	add    esp,0x10
c000fb62:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000fb67:	83 ec 08             	sub    esp,0x8
c000fb6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb6d:	50                   	push   eax
c000fb6e:	e8 8b e9 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	c7 05 a8 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283a8,0x0
c000fb80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb83:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb85:	83 c0 24             	add    eax,0x24
c000fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8a:	6a 00                	push   0x0
c000fb8c:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fb91:	6a 00                	push   0x0
c000fb93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb96:	ff d0                	call   eax
c000fb98:	83 c4 10             	add    esp,0x10
c000fb9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba0:	83 c0 24             	add    eax,0x24
c000fba3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba5:	6a 00                	push   0x0
c000fba7:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fbac:	6a 01                	push   0x1
c000fbae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbb1:	ff d0                	call   eax
c000fbb3:	83 c4 10             	add    esp,0x10
c000fbb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbbb:	83 c0 24             	add    eax,0x24
c000fbbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbc0:	6a 00                	push   0x0
c000fbc2:	68 e3 ed 00 c0       	push   0xc000ede3
c000fbc7:	6a 02                	push   0x2
c000fbc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbcc:	ff d0                	call   eax
c000fbce:	83 c4 10             	add    esp,0x10
c000fbd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd6:	83 c0 24             	add    eax,0x24
c000fbd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbdb:	6a 00                	push   0x0
c000fbdd:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fbe2:	6a 03                	push   0x3
c000fbe4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbe7:	ff d0                	call   eax
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbef:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbf1:	83 c0 24             	add    eax,0x24
c000fbf4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbf6:	6a 00                	push   0x0
c000fbf8:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fbfd:	6a 04                	push   0x4
c000fbff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc02:	ff d0                	call   eax
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc0c:	83 c0 24             	add    eax,0x24
c000fc0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc11:	6a 00                	push   0x0
c000fc13:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fc18:	6a 05                	push   0x5
c000fc1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc1d:	ff d0                	call   eax
c000fc1f:	83 c4 10             	add    esp,0x10
c000fc22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc25:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc27:	83 c0 24             	add    eax,0x24
c000fc2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc2c:	6a 00                	push   0x0
c000fc2e:	68 05 f6 00 c0       	push   0xc000f605
c000fc33:	6a 06                	push   0x6
c000fc35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc38:	ff d0                	call   eax
c000fc3a:	83 c4 10             	add    esp,0x10
c000fc3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc42:	83 c0 24             	add    eax,0x24
c000fc45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc47:	6a 00                	push   0x0
c000fc49:	68 15 f4 00 c0       	push   0xc000f415
c000fc4e:	6a 07                	push   0x7
c000fc50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc53:	ff d0                	call   eax
c000fc55:	83 c4 10             	add    esp,0x10
c000fc58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5d:	83 c0 24             	add    eax,0x24
c000fc60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc62:	6a 00                	push   0x0
c000fc64:	68 fe eb 00 c0       	push   0xc000ebfe
c000fc69:	6a 08                	push   0x8
c000fc6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc6e:	ff d0                	call   eax
c000fc70:	83 c4 10             	add    esp,0x10
c000fc73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc76:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc78:	83 c0 24             	add    eax,0x24
c000fc7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc7d:	6a 00                	push   0x0
c000fc7f:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fc84:	6a 09                	push   0x9
c000fc86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc89:	ff d0                	call   eax
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc91:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc93:	83 c0 24             	add    eax,0x24
c000fc96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc98:	6a 00                	push   0x0
c000fc9a:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fc9f:	6a 0a                	push   0xa
c000fca1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fca4:	ff d0                	call   eax
c000fca6:	83 c4 10             	add    esp,0x10
c000fca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcae:	83 c0 24             	add    eax,0x24
c000fcb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb3:	6a 00                	push   0x0
c000fcb5:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fcba:	6a 0b                	push   0xb
c000fcbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcbf:	ff d0                	call   eax
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcc7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc9:	83 c0 24             	add    eax,0x24
c000fccc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcce:	6a 00                	push   0x0
c000fcd0:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fcd5:	6a 0c                	push   0xc
c000fcd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcda:	ff d0                	call   eax
c000fcdc:	83 c4 10             	add    esp,0x10
c000fcdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fce2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce4:	83 c0 24             	add    eax,0x24
c000fce7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce9:	6a 00                	push   0x0
c000fceb:	68 5e f5 00 c0       	push   0xc000f55e
c000fcf0:	6a 0d                	push   0xd
c000fcf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcf5:	ff d0                	call   eax
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcfd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcff:	83 c0 24             	add    eax,0x24
c000fd02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd04:	6a 00                	push   0x0
c000fd06:	68 97 f5 00 c0       	push   0xc000f597
c000fd0b:	6a 0e                	push   0xe
c000fd0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd10:	ff d0                	call   eax
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd18:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1a:	83 c0 24             	add    eax,0x24
c000fd1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1f:	6a 00                	push   0x0
c000fd21:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fd26:	6a 0f                	push   0xf
c000fd28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd2b:	ff d0                	call   eax
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd33:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd35:	83 c0 24             	add    eax,0x24
c000fd38:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3a:	6a 00                	push   0x0
c000fd3c:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fd41:	6a 10                	push   0x10
c000fd43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd46:	ff d0                	call   eax
c000fd48:	83 c4 10             	add    esp,0x10
c000fd4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd50:	83 c0 24             	add    eax,0x24
c000fd53:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd55:	6a 00                	push   0x0
c000fd57:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fd5c:	6a 11                	push   0x11
c000fd5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd61:	ff d0                	call   eax
c000fd63:	83 c4 10             	add    esp,0x10
c000fd66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd69:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd6b:	83 c0 24             	add    eax,0x24
c000fd6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd70:	6a 00                	push   0x0
c000fd72:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fd77:	6a 12                	push   0x12
c000fd79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd7c:	ff d0                	call   eax
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd84:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd86:	83 c0 24             	add    eax,0x24
c000fd89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd8b:	6a 00                	push   0x0
c000fd8d:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fd92:	6a 13                	push   0x13
c000fd94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd97:	ff d0                	call   eax
c000fd99:	83 c4 10             	add    esp,0x10
c000fd9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda1:	83 c0 24             	add    eax,0x24
c000fda4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda6:	6a 00                	push   0x0
c000fda8:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fdad:	6a 14                	push   0x14
c000fdaf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdb2:	ff d0                	call   eax
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdba:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdbc:	83 c0 24             	add    eax,0x24
c000fdbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc1:	6a 00                	push   0x0
c000fdc3:	68 e6 f5 00 c0       	push   0xc000f5e6
c000fdc8:	6a 1e                	push   0x1e
c000fdca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdcd:	ff d0                	call   eax
c000fdcf:	83 c4 10             	add    esp,0x10
c000fdd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdd7:	83 c0 24             	add    eax,0x24
c000fdda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fddc:	6a 00                	push   0x0
c000fdde:	68 17 6d 01 c0       	push   0xc0016d17
c000fde3:	6a 60                	push   0x60
c000fde5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fde8:	ff d0                	call   eax
c000fdea:	83 c4 10             	add    esp,0x10
c000fded:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdf0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fdf3:	c9                   	leave  
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <InterruptController::convertLegacyIRQNumber(int)>:
c000fdf6:	55                   	push   ebp
c000fdf7:	89 e5                	mov    ebp,esp
c000fdf9:	83 ec 08             	sub    esp,0x8
c000fdfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdff:	83 ec 0c             	sub    esp,0xc
c000fe02:	50                   	push   eax
c000fe03:	e8 f6 e9 ff ff       	call   c000e7fe <Device::getName()>
c000fe08:	83 c4 10             	add    esp,0x10
c000fe0b:	8a 00                	mov    al,BYTE PTR [eax]
c000fe0d:	3c 41                	cmp    al,0x41
c000fe0f:	0f 94 c0             	sete   al
c000fe12:	84 c0                	test   al,al
c000fe14:	74 28                	je     c000fe3e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fe16:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fe1a:	7f 12                	jg     c000fe2e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fe1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fe1f:	05 60 79 02 c0       	add    eax,0xc0027960
c000fe24:	8a 00                	mov    al,BYTE PTR [eax]
c000fe26:	0f b6 c0             	movzx  eax,al
c000fe29:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fe2c:	eb 10                	jmp    c000fe3e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fe2e:	83 ec 0c             	sub    esp,0xc
c000fe31:	68 fc 50 02 c0       	push   0xc00250fc
c000fe36:	e8 32 52 00 00       	call   c001506d <Krnl::panic(char const*)>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fe41:	c9                   	leave  
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <startGUI(void*)>:
c000fe44:	55                   	push   ebp
c000fe45:	89 e5                	mov    ebp,esp
c000fe47:	53                   	push   ebx
c000fe48:	83 ec 04             	sub    esp,0x4
c000fe4b:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fe50:	48                   	dec    eax
c000fe51:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000fe56:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fe5b:	85 c0                	test   eax,eax
c000fe5d:	75 01                	jne    c000fe60 <startGUI(void*)+0x1c>
c000fe5f:	fb                   	sti    
c000fe60:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c000fe66:	83 ec 08             	sub    esp,0x8
c000fe69:	6a 01                	push   0x1
c000fe6b:	68 7c 51 02 c0       	push   0xc002517c
c000fe70:	e8 7d 7e 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	83 ec 08             	sub    esp,0x8
c000fe7b:	53                   	push   ebx
c000fe7c:	50                   	push   eax
c000fe7d:	e8 a1 80 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c000fe8b:	83 ec 08             	sub    esp,0x8
c000fe8e:	6a 01                	push   0x1
c000fe90:	68 96 51 02 c0       	push   0xc0025196
c000fe95:	e8 58 7e 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c000fe9a:	83 c4 10             	add    esp,0x10
c000fe9d:	83 ec 08             	sub    esp,0x8
c000fea0:	53                   	push   ebx
c000fea1:	50                   	push   eax
c000fea2:	e8 7c 80 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	90                   	nop
c000feab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000feae:	c9                   	leave  
c000feaf:	c3                   	ret    

c000feb0 <startGUIVESA(void*)>:
c000feb0:	55                   	push   ebp
c000feb1:	89 e5                	mov    ebp,esp
c000feb3:	53                   	push   ebx
c000feb4:	83 ec 04             	sub    esp,0x4
c000feb7:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000febc:	48                   	dec    eax
c000febd:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000fec2:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fec7:	85 c0                	test   eax,eax
c000fec9:	75 01                	jne    c000fecc <startGUIVESA(void*)+0x1c>
c000fecb:	fb                   	sti    
c000fecc:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c000fed2:	83 ec 08             	sub    esp,0x8
c000fed5:	6a 01                	push   0x1
c000fed7:	68 b4 51 02 c0       	push   0xc00251b4
c000fedc:	e8 11 7e 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c000fee1:	83 c4 10             	add    esp,0x10
c000fee4:	83 ec 08             	sub    esp,0x8
c000fee7:	53                   	push   ebx
c000fee8:	50                   	push   eax
c000fee9:	e8 35 80 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c000feee:	83 c4 10             	add    esp,0x10
c000fef1:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c000fef7:	83 ec 08             	sub    esp,0x8
c000fefa:	6a 01                	push   0x1
c000fefc:	68 96 51 02 c0       	push   0xc0025196
c000ff01:	e8 ec 7d 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	83 ec 08             	sub    esp,0x8
c000ff0c:	53                   	push   ebx
c000ff0d:	50                   	push   eax
c000ff0e:	e8 10 80 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c000ff13:	83 c4 10             	add    esp,0x10
c000ff16:	90                   	nop
c000ff17:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff1a:	c9                   	leave  
c000ff1b:	c3                   	ret    

c000ff1c <sendKeyToTerminal(unsigned char)>:
c000ff1c:	55                   	push   ebp
c000ff1d:	89 e5                	mov    ebp,esp
c000ff1f:	83 ec 28             	sub    esp,0x28
c000ff22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff25:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ff28:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c000ff2d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ff31:	83 ec 08             	sub    esp,0x8
c000ff34:	52                   	push   edx
c000ff35:	50                   	push   eax
c000ff36:	e8 97 b5 ff ff       	call   c000b4d2 <VgaText::receiveKey(unsigned char)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000ff42:	0f 85 8f 00 00 00    	jne    c000ffd7 <sendKeyToTerminal(unsigned char)+0xbb>
c000ff48:	fa                   	cli    
c000ff49:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000ff4e:	40                   	inc    eax
c000ff4f:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000ff54:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c000ff59:	40                   	inc    eax
c000ff5a:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c000ff5f:	a1 c0 83 02 c0       	mov    eax,ds:0xc00283c0
c000ff64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ff67:	c7 05 c0 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283c0,0x0
c000ff71:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000ff75:	74 1f                	je     c000ff96 <sendKeyToTerminal(unsigned char)+0x7a>
c000ff77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff7a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ff7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ff86:	83 ec 0c             	sub    esp,0xc
c000ff89:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff8c:	e8 03 8c 00 00       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	eb db                	jmp    c000ff71 <sendKeyToTerminal(unsigned char)+0x55>
c000ff96:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c000ff9b:	48                   	dec    eax
c000ff9c:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c000ffa1:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c000ffa6:	85 c0                	test   eax,eax
c000ffa8:	75 18                	jne    c000ffc2 <sendKeyToTerminal(unsigned char)+0xa6>
c000ffaa:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c000ffaf:	85 c0                	test   eax,eax
c000ffb1:	74 0f                	je     c000ffc2 <sendKeyToTerminal(unsigned char)+0xa6>
c000ffb3:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c000ffbd:	e8 16 87 00 00       	call   c00186d8 <schedule()>
c000ffc2:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000ffc7:	48                   	dec    eax
c000ffc8:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000ffcd:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000ffd2:	85 c0                	test   eax,eax
c000ffd4:	75 01                	jne    c000ffd7 <sendKeyToTerminal(unsigned char)+0xbb>
c000ffd6:	fb                   	sti    
c000ffd7:	90                   	nop
c000ffd8:	c9                   	leave  
c000ffd9:	c3                   	ret    

c000ffda <sendKeyboardToken(KeyboardToken)>:
c000ffda:	55                   	push   ebp
c000ffdb:	89 e5                	mov    ebp,esp
c000ffdd:	83 ec 18             	sub    esp,0x18
c000ffe0:	e8 61 53 00 00       	call   c0015346 <Krnl::userIOReceived()>
c000ffe5:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ffe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffeb:	0f b7 c0             	movzx  eax,ax
c000ffee:	83 f2 01             	xor    edx,0x1
c000fff1:	88 90 e0 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7c20],dl
c000fff7:	a1 c8 83 02 c0       	mov    eax,ds:0xc00283c8
c000fffc:	85 c0                	test   eax,eax
c000fffe:	74 24                	je     c0010024 <sendKeyboardToken(KeyboardToken)+0x4a>
c0010000:	8b 0d c8 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283c8
c0010006:	83 ec 04             	sub    esp,0x4
c0010009:	68 e0 83 02 c0       	push   0xc00283e0
c001000e:	83 ec 08             	sub    esp,0x8
c0010011:	89 e2                	mov    edx,esp
c0010013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010016:	89 02                	mov    DWORD PTR [edx],eax
c0010018:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001001b:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001001f:	ff d1                	call   ecx
c0010021:	83 c4 10             	add    esp,0x10
c0010024:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0010028:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001002b:	a0 e8 87 02 c0       	mov    al,ds:0xc00287e8
c0010030:	38 c2                	cmp    dl,al
c0010032:	74 1c                	je     c0010050 <sendKeyboardToken(KeyboardToken)+0x76>
c0010034:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0010037:	a2 e8 87 02 c0       	mov    ds:0xc00287e8,al
c001003c:	a0 e8 87 02 c0       	mov    al,ds:0xc00287e8
c0010041:	0f b6 c0             	movzx  eax,al
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	50                   	push   eax
c0010048:	e8 d1 aa ff ff       	call   c000ab1e <setTerminalScrollLock(bool)>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0010053:	84 c0                	test   al,al
c0010055:	0f 84 ae 00 00 00    	je     c0010109 <sendKeyboardToken(KeyboardToken)+0x12f>
c001005b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005e:	66 3d 10 03          	cmp    ax,0x310
c0010062:	75 06                	jne    c001006a <sendKeyboardToken(KeyboardToken)+0x90>
c0010064:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001006a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006d:	66 3d 11 03          	cmp    ax,0x311
c0010071:	75 06                	jne    c0010079 <sendKeyboardToken(KeyboardToken)+0x9f>
c0010073:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0010079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001007c:	66 3d 12 03          	cmp    ax,0x312
c0010080:	75 06                	jne    c0010088 <sendKeyboardToken(KeyboardToken)+0xae>
c0010082:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0010088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001008b:	66 3d 13 03          	cmp    ax,0x313
c001008f:	75 06                	jne    c0010097 <sendKeyboardToken(KeyboardToken)+0xbd>
c0010091:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001009a:	66 3d 14 03          	cmp    ax,0x314
c001009e:	75 06                	jne    c00100a6 <sendKeyboardToken(KeyboardToken)+0xcc>
c00100a0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00100a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100a9:	66 3d 15 03          	cmp    ax,0x315
c00100ad:	75 06                	jne    c00100b5 <sendKeyboardToken(KeyboardToken)+0xdb>
c00100af:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00100b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100b8:	66 3d 16 03          	cmp    ax,0x316
c00100bc:	75 06                	jne    c00100c4 <sendKeyboardToken(KeyboardToken)+0xea>
c00100be:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00100c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100c7:	66 3d 17 03          	cmp    ax,0x317
c00100cb:	75 06                	jne    c00100d3 <sendKeyboardToken(KeyboardToken)+0xf9>
c00100cd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00100d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d6:	66 3d 18 03          	cmp    ax,0x318
c00100da:	75 06                	jne    c00100e2 <sendKeyboardToken(KeyboardToken)+0x108>
c00100dc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00100e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100e5:	66 3d 19 03          	cmp    ax,0x319
c00100e9:	75 06                	jne    c00100f1 <sendKeyboardToken(KeyboardToken)+0x117>
c00100eb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00100f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100f4:	66 3d 1a 03          	cmp    ax,0x31a
c00100f8:	0f 85 c9 00 00 00    	jne    c00101c7 <sendKeyboardToken(KeyboardToken)+0x1ed>
c00100fe:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0010104:	e9 be 00 00 00       	jmp    c00101c7 <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001010c:	66 3d 10 03          	cmp    ax,0x310
c0010110:	75 0a                	jne    c001011c <sendKeyboardToken(KeyboardToken)+0x142>
c0010112:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0010118:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001011c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001011f:	66 3d 11 03          	cmp    ax,0x311
c0010123:	75 0a                	jne    c001012f <sendKeyboardToken(KeyboardToken)+0x155>
c0010125:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001012b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001012f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010132:	66 3d 12 03          	cmp    ax,0x312
c0010136:	75 0a                	jne    c0010142 <sendKeyboardToken(KeyboardToken)+0x168>
c0010138:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001013e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010145:	66 3d 13 03          	cmp    ax,0x313
c0010149:	75 0a                	jne    c0010155 <sendKeyboardToken(KeyboardToken)+0x17b>
c001014b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0010151:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010158:	66 3d 14 03          	cmp    ax,0x314
c001015c:	75 0a                	jne    c0010168 <sendKeyboardToken(KeyboardToken)+0x18e>
c001015e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0010164:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001016b:	66 3d 15 03          	cmp    ax,0x315
c001016f:	75 0a                	jne    c001017b <sendKeyboardToken(KeyboardToken)+0x1a1>
c0010171:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010177:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001017b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001017e:	66 3d 16 03          	cmp    ax,0x316
c0010182:	75 0a                	jne    c001018e <sendKeyboardToken(KeyboardToken)+0x1b4>
c0010184:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001018a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001018e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010191:	66 3d 17 03          	cmp    ax,0x317
c0010195:	75 0a                	jne    c00101a1 <sendKeyboardToken(KeyboardToken)+0x1c7>
c0010197:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001019d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a4:	66 3d 18 03          	cmp    ax,0x318
c00101a8:	75 0a                	jne    c00101b4 <sendKeyboardToken(KeyboardToken)+0x1da>
c00101aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00101b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101b7:	66 3d 19 03          	cmp    ax,0x319
c00101bb:	75 0a                	jne    c00101c7 <sendKeyboardToken(KeyboardToken)+0x1ed>
c00101bd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00101c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ca:	66 3d 00 02          	cmp    ax,0x200
c00101ce:	75 2c                	jne    c00101fc <sendKeyboardToken(KeyboardToken)+0x222>
c00101d0:	a0 e0 87 02 c0       	mov    al,ds:0xc00287e0
c00101d5:	83 f0 01             	xor    eax,0x1
c00101d8:	84 c0                	test   al,al
c00101da:	74 20                	je     c00101fc <sendKeyboardToken(KeyboardToken)+0x222>
c00101dc:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c00101e1:	6a 01                	push   0x1
c00101e3:	6a 00                	push   0x0
c00101e5:	68 44 fe 00 c0       	push   0xc000fe44
c00101ea:	50                   	push   eax
c00101eb:	e8 cc 82 00 00       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	c6 05 e0 87 02 c0 01 	mov    BYTE PTR ds:0xc00287e0,0x1
c00101fa:	eb 33                	jmp    c001022f <sendKeyboardToken(KeyboardToken)+0x255>
c00101fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ff:	66 3d 01 02          	cmp    ax,0x201
c0010203:	75 2a                	jne    c001022f <sendKeyboardToken(KeyboardToken)+0x255>
c0010205:	a0 e0 87 02 c0       	mov    al,ds:0xc00287e0
c001020a:	83 f0 01             	xor    eax,0x1
c001020d:	84 c0                	test   al,al
c001020f:	74 1e                	je     c001022f <sendKeyboardToken(KeyboardToken)+0x255>
c0010211:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c0010216:	6a 01                	push   0x1
c0010218:	6a 00                	push   0x0
c001021a:	68 b0 fe 00 c0       	push   0xc000feb0
c001021f:	50                   	push   eax
c0010220:	e8 97 82 00 00       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	c6 05 e0 87 02 c0 01 	mov    BYTE PTR ds:0xc00287e0,0x1
c001022f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010232:	66 3d 1d 03          	cmp    ax,0x31d
c0010236:	75 06                	jne    c001023e <sendKeyboardToken(KeyboardToken)+0x264>
c0010238:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001023e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010241:	66 3d 1c 03          	cmp    ax,0x31c
c0010245:	75 06                	jne    c001024d <sendKeyboardToken(KeyboardToken)+0x273>
c0010247:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001024d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010250:	66 3d 1b 03          	cmp    ax,0x31b
c0010254:	75 06                	jne    c001025c <sendKeyboardToken(KeyboardToken)+0x282>
c0010256:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001025c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001025f:	66 3d 1e 03          	cmp    ax,0x31e
c0010263:	75 06                	jne    c001026b <sendKeyboardToken(KeyboardToken)+0x291>
c0010265:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001026e:	66 3d 1f 03          	cmp    ax,0x31f
c0010272:	75 06                	jne    c001027a <sendKeyboardToken(KeyboardToken)+0x2a0>
c0010274:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001027a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001027d:	66 3d 1a 03          	cmp    ax,0x31a
c0010281:	75 06                	jne    c0010289 <sendKeyboardToken(KeyboardToken)+0x2af>
c0010283:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0010289:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001028d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010290:	83 f0 01             	xor    eax,0x1
c0010293:	84 c0                	test   al,al
c0010295:	74 77                	je     c001030e <sendKeyboardToken(KeyboardToken)+0x334>
c0010297:	a0 e1 84 02 c0       	mov    al,ds:0xc00284e1
c001029c:	84 c0                	test   al,al
c001029e:	74 41                	je     c00102e1 <sendKeyboardToken(KeyboardToken)+0x307>
c00102a0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00102a4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00102a8:	74 2b                	je     c00102d5 <sendKeyboardToken(KeyboardToken)+0x2fb>
c00102aa:	8b 15 e4 87 02 c0    	mov    edx,DWORD PTR ds:0xc00287e4
c00102b0:	89 d0                	mov    eax,edx
c00102b2:	c1 e0 02             	shl    eax,0x2
c00102b5:	01 d0                	add    eax,edx
c00102b7:	01 c0                	add    eax,eax
c00102b9:	a3 e4 87 02 c0       	mov    ds:0xc00287e4,eax
c00102be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102c1:	0f b7 c0             	movzx  eax,ax
c00102c4:	8d 50 d0             	lea    edx,[eax-0x30]
c00102c7:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c00102cc:	01 d0                	add    eax,edx
c00102ce:	a3 e4 87 02 c0       	mov    ds:0xc00287e4,eax
c00102d3:	eb 6d                	jmp    c0010342 <sendKeyboardToken(KeyboardToken)+0x368>
c00102d5:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c00102df:	eb 61                	jmp    c0010342 <sendKeyboardToken(KeyboardToken)+0x368>
c00102e1:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c00102e6:	85 c0                	test   eax,eax
c00102e8:	74 18                	je     c0010302 <sendKeyboardToken(KeyboardToken)+0x328>
c00102ea:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c00102ef:	0f b6 c0             	movzx  eax,al
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	50                   	push   eax
c00102f6:	e8 21 fc ff ff       	call   c000ff1c <sendKeyToTerminal(unsigned char)>
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010302:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c001030c:	eb 34                	jmp    c0010342 <sendKeyboardToken(KeyboardToken)+0x368>
c001030e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010311:	66 3d 01 01          	cmp    ax,0x101
c0010315:	75 2b                	jne    c0010342 <sendKeyboardToken(KeyboardToken)+0x368>
c0010317:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c001031c:	85 c0                	test   eax,eax
c001031e:	74 18                	je     c0010338 <sendKeyboardToken(KeyboardToken)+0x35e>
c0010320:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c0010325:	0f b6 c0             	movzx  eax,al
c0010328:	83 ec 0c             	sub    esp,0xc
c001032b:	50                   	push   eax
c001032c:	e8 eb fb ff ff       	call   c000ff1c <sendKeyToTerminal(unsigned char)>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010338:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c0010342:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010345:	83 f0 01             	xor    eax,0x1
c0010348:	84 c0                	test   al,al
c001034a:	74 4c                	je     c0010398 <sendKeyboardToken(KeyboardToken)+0x3be>
c001034c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001034f:	83 f0 01             	xor    eax,0x1
c0010352:	84 c0                	test   al,al
c0010354:	74 42                	je     c0010398 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010356:	a0 e0 84 02 c0       	mov    al,ds:0xc00284e0
c001035b:	83 f0 01             	xor    eax,0x1
c001035e:	84 c0                	test   al,al
c0010360:	74 36                	je     c0010398 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010365:	66 83 f8 1f          	cmp    ax,0x1f
c0010369:	76 09                	jbe    c0010374 <sendKeyboardToken(KeyboardToken)+0x39a>
c001036b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001036e:	66 83 f8 7e          	cmp    ax,0x7e
c0010372:	76 12                	jbe    c0010386 <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010377:	66 83 f8 0a          	cmp    ax,0xa
c001037b:	74 09                	je     c0010386 <sendKeyboardToken(KeyboardToken)+0x3ac>
c001037d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010380:	66 83 f8 08          	cmp    ax,0x8
c0010384:	75 12                	jne    c0010398 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010389:	0f b6 c0             	movzx  eax,al
c001038c:	83 ec 0c             	sub    esp,0xc
c001038f:	50                   	push   eax
c0010390:	e8 87 fb ff ff       	call   c000ff1c <sendKeyToTerminal(unsigned char)>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001039b:	83 f0 01             	xor    eax,0x1
c001039e:	84 c0                	test   al,al
c00103a0:	74 4f                	je     c00103f1 <sendKeyboardToken(KeyboardToken)+0x417>
c00103a2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00103a5:	83 f0 01             	xor    eax,0x1
c00103a8:	84 c0                	test   al,al
c00103aa:	74 45                	je     c00103f1 <sendKeyboardToken(KeyboardToken)+0x417>
c00103ac:	a0 e0 84 02 c0       	mov    al,ds:0xc00284e0
c00103b1:	84 c0                	test   al,al
c00103b3:	74 3c                	je     c00103f1 <sendKeyboardToken(KeyboardToken)+0x417>
c00103b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103b8:	66 83 f8 3f          	cmp    ax,0x3f
c00103bc:	76 33                	jbe    c00103f1 <sendKeyboardToken(KeyboardToken)+0x417>
c00103be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103c1:	66 83 f8 7f          	cmp    ax,0x7f
c00103c5:	77 2a                	ja     c00103f1 <sendKeyboardToken(KeyboardToken)+0x417>
c00103c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103ca:	88 c2                	mov    dl,al
c00103cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103cf:	66 83 f8 5f          	cmp    ax,0x5f
c00103d3:	76 04                	jbe    c00103d9 <sendKeyboardToken(KeyboardToken)+0x3ff>
c00103d5:	b0 20                	mov    al,0x20
c00103d7:	eb 02                	jmp    c00103db <sendKeyboardToken(KeyboardToken)+0x401>
c00103d9:	b0 00                	mov    al,0x0
c00103db:	29 c2                	sub    edx,eax
c00103dd:	88 d0                	mov    al,dl
c00103df:	83 e8 40             	sub    eax,0x40
c00103e2:	0f b6 c0             	movzx  eax,al
c00103e5:	83 ec 0c             	sub    esp,0xc
c00103e8:	50                   	push   eax
c00103e9:	e8 2e fb ff ff       	call   c000ff1c <sendKeyToTerminal(unsigned char)>
c00103ee:	83 c4 10             	add    esp,0x10
c00103f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103f4:	66 3d 00 03          	cmp    ax,0x300
c00103f8:	75 0f                	jne    c0010409 <sendKeyboardToken(KeyboardToken)+0x42f>
c00103fa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00103fd:	83 f0 01             	xor    eax,0x1
c0010400:	84 c0                	test   al,al
c0010402:	74 05                	je     c0010409 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010404:	e8 86 aa ff ff       	call   c000ae8f <doTerminalCycle()>
c0010409:	90                   	nop
c001040a:	c9                   	leave  
c001040b:	c3                   	ret    

c001040c <clearInternalKeybuffer(VgaText*)>:
c001040c:	55                   	push   ebp
c001040d:	89 e5                	mov    ebp,esp
c001040f:	83 ec 08             	sub    esp,0x8
c0010412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010415:	05 32 01 00 00       	add    eax,0x132
c001041a:	83 ec 0c             	sub    esp,0xc
c001041d:	50                   	push   eax
c001041e:	e8 7d 02 ff ff       	call   c00006a0 <strlen>
c0010423:	83 c4 10             	add    esp,0x10
c0010426:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010429:	81 c2 32 01 00 00    	add    edx,0x132
c001042f:	83 ec 04             	sub    esp,0x4
c0010432:	50                   	push   eax
c0010433:	6a 00                	push   0x0
c0010435:	52                   	push   edx
c0010436:	e8 49 02 ff ff       	call   c0000684 <memset>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	90                   	nop
c001043f:	c9                   	leave  
c0010440:	c3                   	ret    

c0010441 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010441:	55                   	push   ebp
c0010442:	89 e5                	mov    ebp,esp
c0010444:	83 ec 18             	sub    esp,0x18
c0010447:	a1 c8 83 02 c0       	mov    eax,ds:0xc00283c8
c001044c:	85 c0                	test   eax,eax
c001044e:	74 2a                	je     c001047a <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010450:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0010456:	8b 0d c8 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283c8
c001045c:	83 ec 04             	sub    esp,0x4
c001045f:	68 e0 83 02 c0       	push   0xc00283e0
c0010464:	83 ec 08             	sub    esp,0x8
c0010467:	89 e2                	mov    edx,esp
c0010469:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001046c:	89 02                	mov    DWORD PTR [edx],eax
c001046e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010471:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010475:	ff d1                	call   ecx
c0010477:	83 c4 10             	add    esp,0x10
c001047a:	fb                   	sti    
c001047b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010482:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010486:	0f 84 a1 00 00 00    	je     c001052d <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c001048c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001048f:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010495:	84 c0                	test   al,al
c0010497:	75 28                	jne    c00104c1 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010499:	fa                   	cli    
c001049a:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001049f:	40                   	inc    eax
c00104a0:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00104a5:	e8 2e 82 00 00       	call   c00186d8 <schedule()>
c00104aa:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00104af:	48                   	dec    eax
c00104b0:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00104b5:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00104ba:	85 c0                	test   eax,eax
c00104bc:	75 ce                	jne    c001048c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00104be:	fb                   	sti    
c00104bf:	eb cb                	jmp    c001048c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00104c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00104c4:	8d 50 01             	lea    edx,[eax+0x1]
c00104c7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00104ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00104cd:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c00104d3:	88 10                	mov    BYTE PTR [eax],dl
c00104d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104d8:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00104de:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00104e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104e4:	05 32 01 00 00       	add    eax,0x132
c00104e9:	83 ec 0c             	sub    esp,0xc
c00104ec:	50                   	push   eax
c00104ed:	e8 ae 01 ff ff       	call   c00006a0 <strlen>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00104f8:	81 c2 32 01 00 00    	add    edx,0x132
c00104fe:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010501:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010504:	81 c2 32 01 00 00    	add    edx,0x132
c001050a:	83 ec 04             	sub    esp,0x4
c001050d:	50                   	push   eax
c001050e:	51                   	push   ecx
c001050f:	52                   	push   edx
c0010510:	e8 a7 00 ff ff       	call   c00005bc <memmove>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001051b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001051e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010522:	0f 85 5a ff ff ff    	jne    c0010482 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010528:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001052b:	eb 03                	jmp    c0010530 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c001052d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010530:	c9                   	leave  
c0010531:	c3                   	ret    

c0010532 <Keyboard::Keyboard(char const*)>:
c0010532:	83 ec 0c             	sub    esp,0xc
c0010535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010539:	83 ec 08             	sub    esp,0x8
c001053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010540:	50                   	push   eax
c0010541:	e8 bc e1 ff ff       	call   c000e702 <Device::Device(char const*)>
c0010546:	83 c4 10             	add    esp,0x10
c0010549:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	89 10                	mov    DWORD PTR [eax],edx
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010562:	c6 05 c4 83 02 c0 01 	mov    BYTE PTR ds:0xc00283c4,0x1
c0010569:	90                   	nop
c001056a:	83 c4 0c             	add    esp,0xc
c001056d:	c3                   	ret    

c001056e <Keyboard::~Keyboard()>:
c001056e:	83 ec 0c             	sub    esp,0xc
c0010571:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c0010576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057a:	89 10                	mov    DWORD PTR [eax],edx
c001057c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010580:	83 ec 0c             	sub    esp,0xc
c0010583:	50                   	push   eax
c0010584:	e8 43 de ff ff       	call   c000e3cc <Device::~Device()>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	90                   	nop
c001058d:	83 c4 0c             	add    esp,0xc
c0010590:	c3                   	ret    
c0010591:	90                   	nop

c0010592 <Keyboard::~Keyboard()>:
c0010592:	83 ec 0c             	sub    esp,0xc
c0010595:	83 ec 0c             	sub    esp,0xc
c0010598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059c:	e8 cd ff ff ff       	call   c001056e <Keyboard::~Keyboard()>
c00105a1:	83 c4 10             	add    esp,0x10
c00105a4:	83 ec 08             	sub    esp,0x8
c00105a7:	68 5c 01 00 00       	push   0x15c
c00105ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b0:	e8 b5 c9 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	83 c4 0c             	add    esp,0xc
c00105bb:	c3                   	ret    

c00105bc <LogicalDisk::close(int, int, void*)>:
c00105bc:	83 c8 ff             	or     eax,0xffffffff
c00105bf:	c3                   	ret    

c00105c0 <LogicalDisk::~LogicalDisk()>:
c00105c0:	83 ec 0c             	sub    esp,0xc
c00105c3:	ba a8 52 02 c0       	mov    edx,0xc00252a8
c00105c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cc:	89 10                	mov    DWORD PTR [eax],edx
c00105ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	50                   	push   eax
c00105d6:	e8 f1 dd ff ff       	call   c000e3cc <Device::~Device()>
c00105db:	83 c4 10             	add    esp,0x10
c00105de:	90                   	nop
c00105df:	83 c4 0c             	add    esp,0xc
c00105e2:	c3                   	ret    
c00105e3:	90                   	nop

c00105e4 <LogicalDisk::~LogicalDisk()>:
c00105e4:	83 ec 0c             	sub    esp,0xc
c00105e7:	83 ec 0c             	sub    esp,0xc
c00105ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ee:	e8 cd ff ff ff       	call   c00105c0 <LogicalDisk::~LogicalDisk()>
c00105f3:	83 c4 10             	add    esp,0x10
c00105f6:	83 ec 08             	sub    esp,0x8
c00105f9:	68 74 01 00 00       	push   0x174
c00105fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010602:	e8 63 c9 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0010607:	83 c4 10             	add    esp,0x10
c001060a:	83 c4 0c             	add    esp,0xc
c001060d:	c3                   	ret    

c001060e <LogicalDisk::open(int, int, void*)>:
c001060e:	83 ec 18             	sub    esp,0x18
c0010611:	68 04 52 02 c0       	push   0xc0025204
c0010616:	e8 52 4a 00 00       	call   c001506d <Krnl::panic(char const*)>
c001061b:	83 c8 ff             	or     eax,0xffffffff
c001061e:	83 c4 1c             	add    esp,0x1c
c0010621:	c3                   	ret    

c0010622 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010622:	53                   	push   ebx
c0010623:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001062b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001062f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0010635:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001063b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010641:	77 10                	ja     c0010653 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010643:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010649:	89 d3                	mov    ebx,edx
c001064b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010651:	72 05                	jb     c0010658 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010653:	83 c8 ff             	or     eax,0xffffffff
c0010656:	89 c2                	mov    edx,eax
c0010658:	5b                   	pop    ebx
c0010659:	c3                   	ret    

c001065a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001065a:	56                   	push   esi
c001065b:	83 c8 ff             	or     eax,0xffffffff
c001065e:	53                   	push   ebx
c001065f:	89 c2                	mov    edx,eax
c0010661:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010665:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0010669:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001066d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010673:	77 27                	ja     c001069c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010675:	89 d8                	mov    eax,ebx
c0010677:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001067d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010683:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010688:	89 c2                	mov    edx,eax
c001068a:	73 10                	jae    c001069c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001068c:	89 c8                	mov    eax,ecx
c001068e:	89 da                	mov    edx,ebx
c0010690:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010696:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001069c:	5b                   	pop    ebx
c001069d:	5e                   	pop    esi
c001069e:	c3                   	ret    
c001069f:	90                   	nop

c00106a0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00106a0:	83 ec 1c             	sub    esp,0x1c
c00106a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00106ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00106be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00106c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c6:	83 ec 08             	sub    esp,0x8
c00106c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106cd:	50                   	push   eax
c00106ce:	e8 2f e0 ff ff       	call   c000e702 <Device::Device(char const*)>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	ba a8 52 02 c0       	mov    edx,0xc00252a8
c00106db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106df:	89 10                	mov    DWORD PTR [eax],edx
c00106e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106e5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00106ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106f0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00106f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106fb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010705:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010709:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001070d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010711:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010717:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001071d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010721:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010724:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010728:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001072e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010738:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001073c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010746:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010750:	90                   	nop
c0010751:	83 c4 1c             	add    esp,0x1c
c0010754:	c3                   	ret    
c0010755:	90                   	nop

c0010756 <LogicalDisk::assignDriveLetter()>:
c0010756:	55                   	push   ebp
c0010757:	57                   	push   edi
c0010758:	56                   	push   esi
c0010759:	53                   	push   ebx
c001075a:	83 ec 14             	sub    esp,0x14
c001075d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010761:	8b 3d 00 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028800
c0010767:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001076d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010771:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010777:	8b 3d 04 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028804
c001077d:	3c 01                	cmp    al,0x1
c001077f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010783:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010787:	19 c0                	sbb    eax,eax
c0010789:	83 e0 02             	and    eax,0x2
c001078c:	83 c0 41             	add    eax,0x41
c001078f:	0f be e8             	movsx  ebp,al
c0010792:	3c 43                	cmp    al,0x43
c0010794:	75 10                	jne    c00107a6 <LogicalDisk::assignDriveLetter()+0x50>
c0010796:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001079d:	75 5d                	jne    c00107fc <LogicalDisk::assignDriveLetter()+0xa6>
c001079f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00107a4:	75 56                	jne    c00107fc <LogicalDisk::assignDriveLetter()+0xa6>
c00107a6:	8d 75 bf             	lea    esi,[ebp-0x41]
c00107a9:	ba 01 00 00 00       	mov    edx,0x1
c00107ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00107b2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00107b6:	d3 e2                	shl    edx,cl
c00107b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00107bc:	89 d7                	mov    edi,edx
c00107be:	89 d6                	mov    esi,edx
c00107c0:	c1 ff 1f             	sar    edi,0x1f
c00107c3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00107c7:	21 f9                	and    ecx,edi
c00107c9:	09 d1                	or     ecx,edx
c00107cb:	75 2f                	jne    c00107fc <LogicalDisk::assignDriveLetter()+0xa6>
c00107cd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00107d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107d5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00107db:	09 f2                	or     edx,esi
c00107dd:	89 15 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,edx
c00107e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00107e7:	09 fa                	or     edx,edi
c00107e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00107ed:	89 15 04 88 02 c0    	mov    DWORD PTR ds:0xc0028804,edx
c00107f3:	89 1c bd 20 88 02 c0 	mov    DWORD PTR [edi*4-0x3ffd77e0],ebx
c00107fa:	eb 08                	jmp    c0010804 <LogicalDisk::assignDriveLetter()+0xae>
c00107fc:	45                   	inc    ebp
c00107fd:	40                   	inc    eax
c00107fe:	3c 5b                	cmp    al,0x5b
c0010800:	75 90                	jne    c0010792 <LogicalDisk::assignDriveLetter()+0x3c>
c0010802:	31 c0                	xor    eax,eax
c0010804:	83 c4 14             	add    esp,0x14
c0010807:	5b                   	pop    ebx
c0010808:	5e                   	pop    esi
c0010809:	5f                   	pop    edi
c001080a:	5d                   	pop    ebp
c001080b:	c3                   	ret    

c001080c <LogicalDisk::mount()>:
c001080c:	56                   	push   esi
c001080d:	53                   	push   ebx
c001080e:	83 ec 1c             	sub    esp,0x1c
c0010811:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010815:	8b 1d 98 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028398
c001081b:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010822:	50                   	push   eax
c0010823:	68 28 52 02 c0       	push   0xc0025228
c0010828:	e8 1e c8 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001082d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	85 db                	test   ebx,ebx
c001083c:	74 4e                	je     c001088c <LogicalDisk::mount()+0x80>
c001083e:	83 ec 0c             	sub    esp,0xc
c0010841:	68 49 52 02 c0       	push   0xc0025249
c0010846:	e8 00 c8 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001084b:	83 c4 0c             	add    esp,0xc
c001084e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010855:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010857:	83 e8 41             	sub    eax,0x41
c001085a:	50                   	push   eax
c001085b:	56                   	push   esi
c001085c:	53                   	push   ebx
c001085d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	84 c0                	test   al,al
c0010865:	74 20                	je     c0010887 <LogicalDisk::mount()+0x7b>
c0010867:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	68 65 52 02 c0       	push   0xc0025265
c0010873:	e8 d3 c7 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010881:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010885:	eb 07                	jmp    c001088e <LogicalDisk::mount()+0x82>
c0010887:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001088a:	eb ae                	jmp    c001083a <LogicalDisk::mount()+0x2e>
c001088c:	31 c0                	xor    eax,eax
c001088e:	83 c4 14             	add    esp,0x14
c0010891:	5b                   	pop    ebx
c0010892:	5e                   	pop    esi
c0010893:	c3                   	ret    

c0010894 <LogicalDisk::unmount()>:
c0010894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010898:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00108a2:	c3                   	ret    
c00108a3:	90                   	nop

c00108a4 <LogicalDisk::eject()>:
c00108a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00108ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00108b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00108b4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00108b7:	90                   	nop

c00108b8 <LogicalDisk::unassignDriveLetter()>:
c00108b8:	57                   	push   edi
c00108b9:	56                   	push   esi
c00108ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108be:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00108c5:	84 c9                	test   cl,cl
c00108c7:	75 0f                	jne    c00108d8 <LogicalDisk::unassignDriveLetter()+0x20>
c00108c9:	c7 44 24 0c 7e 52 02 c0 	mov    DWORD PTR [esp+0xc],0xc002527e
c00108d1:	5e                   	pop    esi
c00108d2:	5f                   	pop    edi
c00108d3:	e9 95 47 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c00108d8:	83 e9 41             	sub    ecx,0x41
c00108db:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00108e2:	b8 01 00 00 00       	mov    eax,0x1
c00108e7:	c7 04 8d 20 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd77e0],0x0
c00108f2:	d3 e0                	shl    eax,cl
c00108f4:	89 c7                	mov    edi,eax
c00108f6:	f7 d0                	not    eax
c00108f8:	c1 ff 1f             	sar    edi,0x1f
c00108fb:	21 05 00 88 02 c0    	and    DWORD PTR ds:0xc0028800,eax
c0010901:	89 fe                	mov    esi,edi
c0010903:	f7 d6                	not    esi
c0010905:	21 35 04 88 02 c0    	and    DWORD PTR ds:0xc0028804,esi
c001090b:	5e                   	pop    esi
c001090c:	5f                   	pop    edi
c001090d:	c3                   	ret    

c001090e <LogicalDisk::read(unsigned long long, int, void*)>:
c001090e:	57                   	push   edi
c001090f:	56                   	push   esi
c0010910:	53                   	push   ebx
c0010911:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010915:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010919:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001091d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010921:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010927:	77 41                	ja     c001096a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010929:	99                   	cdq    
c001092a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010930:	01 c8                	add    eax,ecx
c0010932:	11 da                	adc    edx,ebx
c0010934:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001093a:	19 d7                	sbb    edi,edx
c001093c:	72 33                	jb     c0010971 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001093e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010944:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001094a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001094e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010952:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010958:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001095e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010962:	5b                   	pop    ebx
c0010963:	5e                   	pop    esi
c0010964:	5f                   	pop    edi
c0010965:	e9 f4 0a 00 00       	jmp    c001145e <VCache::read(unsigned long long, int, void*)>
c001096a:	b8 05 00 00 00       	mov    eax,0x5
c001096f:	eb 05                	jmp    c0010976 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010971:	b8 07 00 00 00       	mov    eax,0x7
c0010976:	5b                   	pop    ebx
c0010977:	5e                   	pop    esi
c0010978:	5f                   	pop    edi
c0010979:	c3                   	ret    

c001097a <LogicalDisk::write(unsigned long long, int, void*)>:
c001097a:	57                   	push   edi
c001097b:	56                   	push   esi
c001097c:	53                   	push   ebx
c001097d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010981:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010985:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010989:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001098d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010993:	77 41                	ja     c00109d6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010995:	99                   	cdq    
c0010996:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001099c:	01 c8                	add    eax,ecx
c001099e:	11 da                	adc    edx,ebx
c00109a0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00109a6:	19 d7                	sbb    edi,edx
c00109a8:	72 33                	jb     c00109dd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00109aa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00109b0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00109b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00109ba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00109be:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00109c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00109ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109ce:	5b                   	pop    ebx
c00109cf:	5e                   	pop    esi
c00109d0:	5f                   	pop    edi
c00109d1:	e9 8e 09 00 00       	jmp    c0011364 <VCache::write(unsigned long long, int, void*)>
c00109d6:	b8 05 00 00 00       	mov    eax,0x5
c00109db:	eb 05                	jmp    c00109e2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00109dd:	b8 07 00 00 00       	mov    eax,0x7
c00109e2:	5b                   	pop    ebx
c00109e3:	5e                   	pop    esi
c00109e4:	5f                   	pop    edi
c00109e5:	c3                   	ret    
c00109e6:	66 90                	xchg   ax,ax

c00109e8 <Mouse::Mouse(char const*)>:
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ef:	83 ec 08             	sub    esp,0x8
c00109f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f6:	50                   	push   eax
c00109f7:	e8 06 dd ff ff       	call   c000e702 <Device::Device(char const*)>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	ba d4 52 02 c0       	mov    edx,0xc00252d4
c0010a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a08:	89 10                	mov    DWORD PTR [eax],edx
c0010a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010a18:	90                   	nop
c0010a19:	83 c4 0c             	add    esp,0xc
c0010a1c:	c3                   	ret    
c0010a1d:	90                   	nop
c0010a1e:	66 90                	xchg   ax,ax

c0010a20 <Mouse::~Mouse()>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	ba d4 52 02 c0       	mov    edx,0xc00252d4
c0010a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2c:	89 10                	mov    DWORD PTR [eax],edx
c0010a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a32:	83 ec 0c             	sub    esp,0xc
c0010a35:	50                   	push   eax
c0010a36:	e8 91 d9 ff ff       	call   c000e3cc <Device::~Device()>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	90                   	nop
c0010a3f:	83 c4 0c             	add    esp,0xc
c0010a42:	c3                   	ret    
c0010a43:	90                   	nop

c0010a44 <Mouse::~Mouse()>:
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	83 ec 0c             	sub    esp,0xc
c0010a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a4e:	e8 cd ff ff ff       	call   c0010a20 <Mouse::~Mouse()>
c0010a53:	83 c4 10             	add    esp,0x10
c0010a56:	83 ec 08             	sub    esp,0x8
c0010a59:	68 58 01 00 00       	push   0x158
c0010a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a62:	e8 03 c5 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	83 c4 0c             	add    esp,0xc
c0010a6d:	c3                   	ret    

c0010a6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010a6e:	55                   	push   ebp
c0010a6f:	57                   	push   edi
c0010a70:	56                   	push   esi
c0010a71:	53                   	push   ebx
c0010a72:	81 ec 28 01 00 00    	sub    esp,0x128
c0010a78:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010a7f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010a86:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010a8d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010a94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a98:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010a9c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010aa3:	e8 56 dd ff ff       	call   c000e7fe <Device::getName()>
c0010aa8:	5a                   	pop    edx
c0010aa9:	59                   	pop    ecx
c0010aaa:	50                   	push   eax
c0010aab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010aaf:	55                   	push   ebp
c0010ab0:	e8 8b fc fe ff       	call   c0000740 <strcpy>
c0010ab5:	5b                   	pop    ebx
c0010ab6:	58                   	pop    eax
c0010ab7:	68 f8 52 02 c0       	push   0xc00252f8
c0010abc:	55                   	push   ebp
c0010abd:	e8 be fd fe ff       	call   c0000880 <strcat>
c0010ac2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010ac9:	e8 71 92 ff ff       	call   c0009d3f <malloc>
c0010ace:	83 c4 0c             	add    esp,0xc
c0010ad1:	89 c3                	mov    ebx,eax
c0010ad3:	57                   	push   edi
c0010ad4:	56                   	push   esi
c0010ad5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ad9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010add:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010ae4:	55                   	push   ebp
c0010ae5:	50                   	push   eax
c0010ae6:	e8 b5 fb ff ff       	call   c00106a0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010aeb:	83 c4 14             	add    esp,0x14
c0010aee:	53                   	push   ebx
c0010aef:	e8 62 fc ff ff       	call   c0010756 <LogicalDisk::assignDriveLetter()>
c0010af4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010af7:	e8 10 fd ff ff       	call   c001080c <LogicalDisk::mount()>
c0010afc:	58                   	pop    eax
c0010afd:	5a                   	pop    edx
c0010afe:	53                   	push   ebx
c0010aff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010b06:	e8 f3 d9 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c0010b0b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010b11:	5b                   	pop    ebx
c0010b12:	5e                   	pop    esi
c0010b13:	5f                   	pop    edi
c0010b14:	5d                   	pop    ebp
c0010b15:	c3                   	ret    

c0010b16 <createPartitionsForDisk(PhysicalDisk*)>:
c0010b16:	55                   	push   ebp
c0010b17:	57                   	push   edi
c0010b18:	56                   	push   esi
c0010b19:	53                   	push   ebx
c0010b1a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010b20:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010b27:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010b2d:	3d 00 02 00 00       	cmp    eax,0x200
c0010b32:	74 27                	je     c0010b5b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010b34:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010b3a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010b40:	83 ec 10             	sub    esp,0x10
c0010b43:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010b47:	99                   	cdq    
c0010b48:	c1 e6 0a             	shl    esi,0xa
c0010b4b:	52                   	push   edx
c0010b4c:	89 fd                	mov    ebp,edi
c0010b4e:	50                   	push   eax
c0010b4f:	55                   	push   ebp
c0010b50:	56                   	push   esi
c0010b51:	e8 8a 1c 01 00       	call   c00227e0 <__udivdi3>
c0010b56:	e9 b1 00 00 00       	jmp    c0010c0c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010b5b:	83 ec 0c             	sub    esp,0xc
c0010b5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b60:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010b64:	56                   	push   esi
c0010b65:	6a 01                	push   0x1
c0010b67:	6a 00                	push   0x0
c0010b69:	6a 00                	push   0x0
c0010b6b:	53                   	push   ebx
c0010b6c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010b6f:	83 c4 20             	add    esp,0x20
c0010b72:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010b7a:	75 0a                	jne    c0010b86 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010b7c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010b84:	74 2c                	je     c0010bb2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010b86:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b8c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b98:	83 ec 10             	sub    esp,0x10
c0010b9b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b9f:	89 f7                	mov    edi,esi
c0010ba1:	c1 e0 0a             	shl    eax,0xa
c0010ba4:	c1 ff 1f             	sar    edi,0x1f
c0010ba7:	57                   	push   edi
c0010ba8:	56                   	push   esi
c0010ba9:	52                   	push   edx
c0010baa:	50                   	push   eax
c0010bab:	e8 30 1c 01 00       	call   c00227e0 <__udivdi3>
c0010bb0:	eb 5a                	jmp    c0010c0c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010bb2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010bb9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010bc0:	83 e1 7f             	and    ecx,0x7f
c0010bc3:	83 e0 7f             	and    eax,0x7f
c0010bc6:	01 c1                	add    ecx,eax
c0010bc8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010bcf:	83 e0 7f             	and    eax,0x7f
c0010bd2:	01 c1                	add    ecx,eax
c0010bd4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010bdb:	83 e0 7f             	and    eax,0x7f
c0010bde:	00 c1                	add    cl,al
c0010be0:	74 41                	je     c0010c23 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010be2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010be8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010bee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010bf4:	83 ec 10             	sub    esp,0x10
c0010bf7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010bfb:	89 f7                	mov    edi,esi
c0010bfd:	c1 e0 0a             	shl    eax,0xa
c0010c00:	c1 ff 1f             	sar    edi,0x1f
c0010c03:	57                   	push   edi
c0010c04:	56                   	push   esi
c0010c05:	52                   	push   edx
c0010c06:	50                   	push   eax
c0010c07:	e8 d4 1b 01 00       	call   c00227e0 <__udivdi3>
c0010c0c:	83 c4 14             	add    esp,0x14
c0010c0f:	52                   	push   edx
c0010c10:	50                   	push   eax
c0010c11:	6a 00                	push   0x0
c0010c13:	6a 00                	push   0x0
c0010c15:	53                   	push   ebx
c0010c16:	e8 53 fe ff ff       	call   c0010a6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010c1b:	83 c4 20             	add    esp,0x20
c0010c1e:	e9 79 01 00 00       	jmp    c0010d9c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010c23:	89 f0                	mov    eax,esi
c0010c25:	31 f6                	xor    esi,esi
c0010c27:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010c2e:	75 02                	jne    c0010c32 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010c30:	89 f1                	mov    ecx,esi
c0010c32:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010c39:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010c40:	c1 e2 08             	shl    edx,0x8
c0010c43:	c1 e7 10             	shl    edi,0x10
c0010c46:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010c4e:	09 fa                	or     edx,edi
c0010c50:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010c58:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010c5f:	83 c0 10             	add    eax,0x10
c0010c62:	09 fa                	or     edx,edi
c0010c64:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010c6b:	c1 e7 18             	shl    edi,0x18
c0010c6e:	09 fa                	or     edx,edi
c0010c70:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010c77:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010c7b:	c1 e7 10             	shl    edi,0x10
c0010c7e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010c85:	c1 e2 08             	shl    edx,0x8
c0010c88:	09 fa                	or     edx,edi
c0010c8a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010c91:	09 fa                	or     edx,edi
c0010c93:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010c9a:	c1 e7 18             	shl    edi,0x18
c0010c9d:	09 fa                	or     edx,edi
c0010c9f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010ca3:	46                   	inc    esi
c0010ca4:	83 fe 04             	cmp    esi,0x4
c0010ca7:	0f 85 7a ff ff ff    	jne    c0010c27 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb1:	83 f0 01             	xor    eax,0x1
c0010cb4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cb8:	75 57                	jne    c0010d11 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010cbe:	83 f0 01             	xor    eax,0x1
c0010cc1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010cc5:	75 4a                	jne    c0010d11 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010cc7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ccb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010cd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010cdb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010ce1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010ce7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010ced:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010cf1:	89 f7                	mov    edi,esi
c0010cf3:	c1 e0 0a             	shl    eax,0xa
c0010cf6:	c1 ff 1f             	sar    edi,0x1f
c0010cf9:	57                   	push   edi
c0010cfa:	56                   	push   esi
c0010cfb:	52                   	push   edx
c0010cfc:	50                   	push   eax
c0010cfd:	e8 de 1a 01 00       	call   c00227e0 <__udivdi3>
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010d0d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d11:	84 c9                	test   cl,cl
c0010d13:	74 53                	je     c0010d68 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010d15:	0f b6 c9             	movzx  ecx,cl
c0010d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d20:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010d24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010d30:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010d34:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010d38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010d3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010d40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d48:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010d4c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010d50:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010d54:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010d58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010d60:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010d64:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010d68:	31 ed                	xor    ebp,ebp
c0010d6a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010d6e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010d72:	89 f8                	mov    eax,edi
c0010d74:	09 f0                	or     eax,esi
c0010d76:	74 1e                	je     c0010d96 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010d78:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010d7c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010d80:	89 d1                	mov    ecx,edx
c0010d82:	09 c1                	or     ecx,eax
c0010d84:	74 10                	je     c0010d96 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010d86:	83 ec 0c             	sub    esp,0xc
c0010d89:	57                   	push   edi
c0010d8a:	56                   	push   esi
c0010d8b:	52                   	push   edx
c0010d8c:	50                   	push   eax
c0010d8d:	53                   	push   ebx
c0010d8e:	e8 db fc ff ff       	call   c0010a6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d93:	83 c4 20             	add    esp,0x20
c0010d96:	45                   	inc    ebp
c0010d97:	83 fd 04             	cmp    ebp,0x4
c0010d9a:	75 ce                	jne    c0010d6a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010d9c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010da2:	5b                   	pop    ebx
c0010da3:	5e                   	pop    esi
c0010da4:	5f                   	pop    edi
c0010da5:	5d                   	pop    ebp
c0010da6:	c3                   	ret    
c0010da7:	90                   	nop

c0010da8 <Serial::Serial(char const*)>:
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010daf:	83 ec 08             	sub    esp,0x8
c0010db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db6:	50                   	push   eax
c0010db7:	e8 46 d9 ff ff       	call   c000e702 <Device::Device(char const*)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	ba 0c 53 02 c0       	mov    edx,0xc002530c
c0010dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc8:	89 10                	mov    DWORD PTR [eax],edx
c0010dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010dd8:	90                   	nop
c0010dd9:	83 c4 0c             	add    esp,0xc
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop
c0010dde:	66 90                	xchg   ax,ax

c0010de0 <Serial::~Serial()>:
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	ba 0c 53 02 c0       	mov    edx,0xc002530c
c0010de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dec:	89 10                	mov    DWORD PTR [eax],edx
c0010dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df2:	83 ec 0c             	sub    esp,0xc
c0010df5:	50                   	push   eax
c0010df6:	e8 d1 d5 ff ff       	call   c000e3cc <Device::~Device()>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	90                   	nop
c0010dff:	83 c4 0c             	add    esp,0xc
c0010e02:	c3                   	ret    
c0010e03:	90                   	nop

c0010e04 <Serial::~Serial()>:
c0010e04:	83 ec 0c             	sub    esp,0xc
c0010e07:	83 ec 0c             	sub    esp,0xc
c0010e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0e:	e8 cd ff ff ff       	call   c0010de0 <Serial::~Serial()>
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	83 ec 08             	sub    esp,0x8
c0010e19:	68 58 01 00 00       	push   0x158
c0010e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e22:	e8 43 c1 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0010e27:	83 c4 10             	add    esp,0x10
c0010e2a:	83 c4 0c             	add    esp,0xc
c0010e2d:	c3                   	ret    
c0010e2e:	66 90                	xchg   ax,ax

c0010e30 <Timer::Timer(char const*)>:
c0010e30:	83 ec 0c             	sub    esp,0xc
c0010e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e37:	83 ec 08             	sub    esp,0x8
c0010e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e3e:	50                   	push   eax
c0010e3f:	e8 be d8 ff ff       	call   c000e702 <Device::Device(char const*)>
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	ba 50 53 02 c0       	mov    edx,0xc0025350
c0010e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e50:	89 10                	mov    DWORD PTR [eax],edx
c0010e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e56:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010e60:	90                   	nop
c0010e61:	83 c4 0c             	add    esp,0xc
c0010e64:	c3                   	ret    
c0010e65:	90                   	nop
c0010e66:	66 90                	xchg   ax,ax

c0010e68 <Timer::~Timer()>:
c0010e68:	83 ec 0c             	sub    esp,0xc
c0010e6b:	ba 50 53 02 c0       	mov    edx,0xc0025350
c0010e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e74:	89 10                	mov    DWORD PTR [eax],edx
c0010e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e7a:	83 ec 0c             	sub    esp,0xc
c0010e7d:	50                   	push   eax
c0010e7e:	e8 49 d5 ff ff       	call   c000e3cc <Device::~Device()>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	90                   	nop
c0010e87:	83 c4 0c             	add    esp,0xc
c0010e8a:	c3                   	ret    
c0010e8b:	90                   	nop

c0010e8c <Timer::~Timer()>:
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	83 ec 0c             	sub    esp,0xc
c0010e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e96:	e8 cd ff ff ff       	call   c0010e68 <Timer::~Timer()>
c0010e9b:	83 c4 10             	add    esp,0x10
c0010e9e:	83 ec 08             	sub    esp,0x8
c0010ea1:	68 5c 01 00 00       	push   0x15c
c0010ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eaa:	e8 bb c0 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	83 c4 0c             	add    esp,0xc
c0010eb5:	c3                   	ret    

c0010eb6 <Timer::read()>:
c0010eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010ec0:	c3                   	ret    

c0010ec1 <timerHandler(unsigned int)>:
c0010ec1:	56                   	push   esi
c0010ec2:	53                   	push   ebx
c0010ec3:	51                   	push   ecx
c0010ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ec8:	01 05 8c 88 02 c0    	add    DWORD PTR ds:0xc002888c,eax
c0010ece:	80 3d 6d 82 02 c0 00 	cmp    BYTE PTR ds:0xc002826d,0x0
c0010ed5:	0f 84 49 01 00 00    	je     c0011024 <timerHandler(unsigned int)+0x163>
c0010edb:	fa                   	cli    
c0010edc:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0010ee2:	83 ec 0c             	sub    esp,0xc
c0010ee5:	ff 05 84 97 02 c0    	inc    DWORD PTR ds:0xc0029784
c0010eeb:	68 98 97 02 c0       	push   0xc0029798
c0010ef0:	e8 bb 1e 01 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010ef5:	83 c4 10             	add    esp,0x10
c0010ef8:	84 c0                	test   al,al
c0010efa:	0f 85 a0 00 00 00    	jne    c0010fa0 <timerHandler(unsigned int)+0xdf>
c0010f00:	83 ec 0c             	sub    esp,0xc
c0010f03:	68 98 97 02 c0       	push   0xc0029798
c0010f08:	e8 bf 1e 01 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	89 c6                	mov    esi,eax
c0010f12:	66 90                	xchg   ax,ax
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	68 98 97 02 c0       	push   0xc0029798
c0010f1c:	e8 ab 1e 01 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f21:	c7 04 24 98 97 02 c0 	mov    DWORD PTR [esp],0xc0029798
c0010f28:	89 c3                	mov    ebx,eax
c0010f2a:	e8 a5 1e 01 00       	call   c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	3b 05 8c 88 02 c0    	cmp    eax,DWORD PTR ds:0xc002888c
c0010f3b:	77 23                	ja     c0010f60 <timerHandler(unsigned int)+0x9f>
c0010f3d:	83 ec 0c             	sub    esp,0xc
c0010f40:	53                   	push   ebx
c0010f41:	e8 4e 7c 00 00       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	39 de                	cmp    esi,ebx
c0010f4b:	75 27                	jne    c0010f74 <timerHandler(unsigned int)+0xb3>
c0010f4d:	83 ec 0c             	sub    esp,0xc
c0010f50:	68 98 97 02 c0       	push   0xc0029798
c0010f55:	e8 72 1e 01 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f5a:	89 c6                	mov    esi,eax
c0010f5c:	eb 12                	jmp    c0010f70 <timerHandler(unsigned int)+0xaf>
c0010f5e:	66 90                	xchg   ax,ax
c0010f60:	52                   	push   edx
c0010f61:	52                   	push   edx
c0010f62:	53                   	push   ebx
c0010f63:	68 98 97 02 c0       	push   0xc0029798
c0010f68:	e8 1f 1f 01 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	90                   	nop
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	68 98 97 02 c0       	push   0xc0029798
c0010f7c:	e8 2f 1e 01 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	84 c0                	test   al,al
c0010f86:	75 18                	jne    c0010fa0 <timerHandler(unsigned int)+0xdf>
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	68 98 97 02 c0       	push   0xc0029798
c0010f90:	e8 37 1e 01 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	39 f0                	cmp    eax,esi
c0010f9a:	0f 85 74 ff ff ff    	jne    c0010f14 <timerHandler(unsigned int)+0x53>
c0010fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fa5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010fa9:	74 41                	je     c0010fec <timerHandler(unsigned int)+0x12b>
c0010fab:	80 3d 6c 82 02 c0 00 	cmp    BYTE PTR ds:0xc002826c,0x0
c0010fb2:	74 38                	je     c0010fec <timerHandler(unsigned int)+0x12b>
c0010fb4:	fa                   	cli    
c0010fb5:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0010fbb:	a1 8c 88 02 c0       	mov    eax,ds:0xc002888c
c0010fc0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010fc6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010fc9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010fcf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010fd2:	72 08                	jb     c0010fdc <timerHandler(unsigned int)+0x11b>
c0010fd4:	e8 ff 76 00 00       	call   c00186d8 <schedule()>
c0010fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fdc:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0010fe1:	48                   	dec    eax
c0010fe2:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0010fe7:	75 03                	jne    c0010fec <timerHandler(unsigned int)+0x12b>
c0010fe9:	fb                   	sti    
c0010fea:	66 90                	xchg   ax,ax
c0010fec:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0010ff1:	48                   	dec    eax
c0010ff2:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c0010ff7:	75 1b                	jne    c0011014 <timerHandler(unsigned int)+0x153>
c0010ff9:	83 3d 80 97 02 c0 00 	cmp    DWORD PTR ds:0xc0029780,0x0
c0011000:	74 12                	je     c0011014 <timerHandler(unsigned int)+0x153>
c0011002:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001100c:	e8 c7 76 00 00       	call   c00186d8 <schedule()>
c0011011:	8d 76 00             	lea    esi,[esi+0x0]
c0011014:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0011019:	48                   	dec    eax
c001101a:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c001101f:	75 03                	jne    c0011024 <timerHandler(unsigned int)+0x163>
c0011021:	fb                   	sti    
c0011022:	66 90                	xchg   ax,ax
c0011024:	58                   	pop    eax
c0011025:	5b                   	pop    ebx
c0011026:	5e                   	pop    esi
c0011027:	c3                   	ret    

c0011028 <setupTimer(int)>:
c0011028:	57                   	push   edi
c0011029:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001103a:	83 ec 0c             	sub    esp,0xc
c001103d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011043:	e8 b6 d7 ff ff       	call   c000e7fe <Device::getName()>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001104e:	0f 85 94 00 00 00    	jne    c00110e8 <setupTimer(int)+0xc0>
c0011054:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0011059:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0011060:	0f 84 82 00 00 00    	je     c00110e8 <setupTimer(int)+0xc0>
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	68 5c 01 00 00       	push   0x15c
c001106e:	e8 cc 8c ff ff       	call   c0009d3f <malloc>
c0011073:	89 04 24             	mov    DWORD PTR [esp],eax
c0011076:	89 c3                	mov    ebx,eax
c0011078:	e8 bf 12 01 00       	call   c002233c <PIT::PIT()>
c001107d:	59                   	pop    ecx
c001107e:	5f                   	pop    edi
c001107f:	53                   	push   ebx
c0011080:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c0011086:	e8 73 d4 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c001108b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001108d:	6a 00                	push   0x0
c001108f:	6a 00                	push   0x0
c0011091:	56                   	push   esi
c0011092:	53                   	push   ebx
c0011093:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011096:	83 c4 14             	add    esp,0x14
c0011099:	68 60 01 00 00       	push   0x160
c001109e:	e8 9c 8c ff ff       	call   c0009d3f <malloc>
c00110a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00110a6:	89 c7                	mov    edi,eax
c00110a8:	e8 43 11 01 00       	call   c00221f0 <APICTimer::APICTimer()>
c00110ad:	6a 00                	push   0x0
c00110af:	6a 00                	push   0x0
c00110b1:	56                   	push   esi
c00110b2:	57                   	push   edi
c00110b3:	e8 38 10 01 00       	call   c00220f0 <APICTimer::open(int, int, void*)>
c00110b8:	83 c4 20             	add    esp,0x20
c00110bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110bd:	6a 00                	push   0x0
c00110bf:	6a 00                	push   0x0
c00110c1:	6a 00                	push   0x0
c00110c3:	53                   	push   ebx
c00110c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110c7:	58                   	pop    eax
c00110c8:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c00110cd:	5a                   	pop    edx
c00110ce:	57                   	push   edi
c00110cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110d5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00110db:	e8 1e d4 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c00110e0:	83 c4 10             	add    esp,0x10
c00110e3:	eb 37                	jmp    c001111c <setupTimer(int)+0xf4>
c00110e5:	8d 76 00             	lea    esi,[esi+0x0]
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	68 5c 01 00 00       	push   0x15c
c00110f0:	e8 4a 8c ff ff       	call   c0009d3f <malloc>
c00110f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00110f8:	89 c3                	mov    ebx,eax
c00110fa:	e8 3d 12 01 00       	call   c002233c <PIT::PIT()>
c00110ff:	58                   	pop    eax
c0011100:	5a                   	pop    edx
c0011101:	53                   	push   ebx
c0011102:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c0011108:	e8 f1 d3 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c001110d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001110f:	6a 00                	push   0x0
c0011111:	6a 00                	push   0x0
c0011113:	56                   	push   esi
c0011114:	53                   	push   ebx
c0011115:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011118:	83 c4 20             	add    esp,0x20
c001111b:	90                   	nop
c001111c:	89 d8                	mov    eax,ebx
c001111e:	5b                   	pop    ebx
c001111f:	5e                   	pop    esi
c0011120:	5f                   	pop    edi
c0011121:	c3                   	ret    
c0011122:	66 90                	xchg   ax,ax

c0011124 <VCache::VCache(PhysicalDisk*)>:
c0011124:	53                   	push   ebx
c0011125:	83 ec 18             	sub    esp,0x18
c0011128:	ba 80 53 02 c0       	mov    edx,0xc0025380
c001112d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011131:	89 10                	mov    DWORD PTR [eax],edx
c0011133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011137:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001113e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011142:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0011149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001114d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0011154:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001115b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001115f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0011166:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001116d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011171:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0011178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001117c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011184:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001118b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0011192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011196:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001119a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001119e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00111a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111a6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00111aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111ae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00111b5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00111bd:	83 ec 0c             	sub    esp,0xc
c00111c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00111c4:	e8 76 8b ff ff       	call   c0009d3f <malloc>
c00111c9:	83 c4 10             	add    esp,0x10
c00111cc:	89 c3                	mov    ebx,eax
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	53                   	push   ebx
c00111d2:	e8 d1 72 00 00       	call   c00184a8 <Mutex::Mutex()>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111de:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00111e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00111e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00111ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111f0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00111f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111fb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011205:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001120c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0011212:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011218:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001121c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001121f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0011222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011226:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001122a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001122e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011234:	05 00 01 00 00       	add    eax,0x100
c0011239:	c1 e0 04             	shl    eax,0x4
c001123c:	83 ec 0c             	sub    esp,0xc
c001123f:	50                   	push   eax
c0011240:	e8 fa 8a ff ff       	call   c0009d3f <malloc>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	89 c2                	mov    edx,eax
c001124a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001124e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011255:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001125c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011260:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011268:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001126e:	c1 e0 06             	shl    eax,0x6
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	50                   	push   eax
c0011275:	e8 c5 8a ff ff       	call   c0009d3f <malloc>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	89 c2                	mov    edx,eax
c001127f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011283:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011286:	90                   	nop
c0011287:	83 c4 18             	add    esp,0x18
c001128a:	5b                   	pop    ebx
c001128b:	c3                   	ret    

c001128c <VCache::invalidateReadBuffer()>:
c001128c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011290:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0011296:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001129a:	c3                   	ret    
c001129b:	90                   	nop

c001129c <VCache::writeWriteBuffer()>:
c001129c:	53                   	push   ebx
c001129d:	83 ec 08             	sub    esp,0x8
c00112a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00112a8:	74 1e                	je     c00112c8 <VCache::writeWriteBuffer()+0x2c>
c00112aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00112ad:	83 ec 0c             	sub    esp,0xc
c00112b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00112b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00112b8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00112bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00112be:	50                   	push   eax
c00112bf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00112c2:	83 c4 20             	add    esp,0x20
c00112c5:	8d 76 00             	lea    esi,[esi+0x0]
c00112c8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00112cf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00112d6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00112da:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00112e1:	83 c4 08             	add    esp,0x8
c00112e4:	5b                   	pop    ebx
c00112e5:	c3                   	ret    
c00112e6:	66 90                	xchg   ax,ax

c00112e8 <VCache::~VCache()>:
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	ba 80 53 02 c0       	mov    edx,0xc0025380
c00112f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f4:	89 10                	mov    DWORD PTR [eax],edx
c00112f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00112fd:	84 c0                	test   al,al
c00112ff:	74 0f                	je     c0011310 <VCache::~VCache()+0x28>
c0011301:	83 ec 0c             	sub    esp,0xc
c0011304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011308:	e8 8f ff ff ff       	call   c001129c <VCache::writeWriteBuffer()>
c001130d:	83 c4 10             	add    esp,0x10
c0011310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011314:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	50                   	push   eax
c001131b:	e8 2f 8a ff ff       	call   c0009d4f <free>
c0011320:	83 c4 10             	add    esp,0x10
c0011323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011327:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001132a:	83 ec 0c             	sub    esp,0xc
c001132d:	50                   	push   eax
c001132e:	e8 1c 8a ff ff       	call   c0009d4f <free>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	90                   	nop
c0011337:	83 c4 0c             	add    esp,0xc
c001133a:	c3                   	ret    
c001133b:	90                   	nop

c001133c <VCache::~VCache()>:
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	83 ec 0c             	sub    esp,0xc
c0011342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011346:	e8 9d ff ff ff       	call   c00112e8 <VCache::~VCache()>
c001134b:	83 c4 10             	add    esp,0x10
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	6a 44                	push   0x44
c0011353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011357:	e8 0e bc ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	83 c4 0c             	add    esp,0xc
c0011362:	c3                   	ret    
c0011363:	90                   	nop

c0011364 <VCache::write(unsigned long long, int, void*)>:
c0011364:	55                   	push   ebp
c0011365:	31 c0                	xor    eax,eax
c0011367:	57                   	push   edi
c0011368:	56                   	push   esi
c0011369:	53                   	push   ebx
c001136a:	83 ec 0c             	sub    esp,0xc
c001136d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011371:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011375:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011379:	8d 76 00             	lea    esi,[esi+0x0]
c001137c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0011380:	7d 1a                	jge    c001139c <VCache::write(unsigned long long, int, void*)+0x38>
c0011382:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011385:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001138b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001138f:	0f af c8             	imul   ecx,eax
c0011392:	01 ca                	add    edx,ecx
c0011394:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011396:	40                   	inc    eax
c0011397:	eb e3                	jmp    c001137c <VCache::write(unsigned long long, int, void*)+0x18>
c0011399:	8d 76 00             	lea    esi,[esi+0x0]
c001139c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00113a0:	74 0a                	je     c00113ac <VCache::write(unsigned long long, int, void*)+0x48>
c00113a2:	53                   	push   ebx
c00113a3:	e8 e4 fe ff ff       	call   c001128c <VCache::invalidateReadBuffer()>
c00113a8:	58                   	pop    eax
c00113a9:	8d 76 00             	lea    esi,[esi+0x0]
c00113ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00113b0:	74 5e                	je     c0011410 <VCache::write(unsigned long long, int, void*)+0xac>
c00113b2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00113b5:	89 e8                	mov    eax,ebp
c00113b7:	99                   	cdq    
c00113b8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00113bb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00113be:	89 c1                	mov    ecx,eax
c00113c0:	89 d0                	mov    eax,edx
c00113c2:	31 f1                	xor    ecx,esi
c00113c4:	31 f8                	xor    eax,edi
c00113c6:	09 c1                	or     ecx,eax
c00113c8:	75 3a                	jne    c0011404 <VCache::write(unsigned long long, int, void*)+0xa0>
c00113ca:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00113cf:	75 33                	jne    c0011404 <VCache::write(unsigned long long, int, void*)+0xa0>
c00113d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00113d4:	89 ef                	mov    edi,ebp
c00113d6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00113dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113e0:	0f af f9             	imul   edi,ecx
c00113e3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00113e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113eb:	40                   	inc    eax
c00113ec:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00113ef:	83 f8 40             	cmp    eax,0x40
c00113f2:	75 60                	jne    c0011454 <VCache::write(unsigned long long, int, void*)+0xf0>
c00113f4:	83 ec 0c             	sub    esp,0xc
c00113f7:	53                   	push   ebx
c00113f8:	e8 9f fe ff ff       	call   c001129c <VCache::writeWriteBuffer()>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	eb 52                	jmp    c0011454 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011402:	66 90                	xchg   ax,ax
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	53                   	push   ebx
c0011408:	e8 8f fe ff ff       	call   c001129c <VCache::writeWriteBuffer()>
c001140d:	83 c4 10             	add    esp,0x10
c0011410:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011413:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011418:	7f 22                	jg     c001143c <VCache::write(unsigned long long, int, void*)+0xd8>
c001141a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001141d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011420:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011424:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011428:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001142b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001142e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011434:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011438:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001143a:	eb 18                	jmp    c0011454 <VCache::write(unsigned long long, int, void*)+0xf0>
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011445:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011449:	57                   	push   edi
c001144a:	56                   	push   esi
c001144b:	50                   	push   eax
c001144c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001144f:	83 c4 20             	add    esp,0x20
c0011452:	66 90                	xchg   ax,ax
c0011454:	83 c4 0c             	add    esp,0xc
c0011457:	31 c0                	xor    eax,eax
c0011459:	5b                   	pop    ebx
c001145a:	5e                   	pop    esi
c001145b:	5f                   	pop    edi
c001145c:	5d                   	pop    ebp
c001145d:	c3                   	ret    

c001145e <VCache::read(unsigned long long, int, void*)>:
c001145e:	55                   	push   ebp
c001145f:	31 c0                	xor    eax,eax
c0011461:	57                   	push   edi
c0011462:	56                   	push   esi
c0011463:	53                   	push   ebx
c0011464:	83 ec 1c             	sub    esp,0x1c
c0011467:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001146b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001146f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011473:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011477:	90                   	nop
c0011478:	39 e8                	cmp    eax,ebp
c001147a:	7d 18                	jge    c0011494 <VCache::read(unsigned long long, int, void*)+0x36>
c001147c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001147f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011485:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011489:	0f af c8             	imul   ecx,eax
c001148c:	01 ca                	add    edx,ecx
c001148e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011490:	40                   	inc    eax
c0011491:	eb e5                	jmp    c0011478 <VCache::read(unsigned long long, int, void*)+0x1a>
c0011493:	90                   	nop
c0011494:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011498:	74 0e                	je     c00114a8 <VCache::read(unsigned long long, int, void*)+0x4a>
c001149a:	83 ec 0c             	sub    esp,0xc
c001149d:	53                   	push   ebx
c001149e:	e8 f9 fd ff ff       	call   c001129c <VCache::writeWriteBuffer()>
c00114a3:	83 c4 10             	add    esp,0x10
c00114a6:	66 90                	xchg   ax,ax
c00114a8:	83 fd 01             	cmp    ebp,0x1
c00114ab:	0f 85 87 00 00 00    	jne    c0011538 <VCache::read(unsigned long long, int, void*)+0xda>
c00114b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114b8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00114bf:	75 77                	jne    c0011538 <VCache::read(unsigned long long, int, void*)+0xda>
c00114c1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00114c4:	89 e9                	mov    ecx,ebp
c00114c6:	f7 d9                	neg    ecx
c00114c8:	89 c8                	mov    eax,ecx
c00114ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00114ce:	c1 f8 1f             	sar    eax,0x1f
c00114d1:	21 f1                	and    ecx,esi
c00114d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00114d7:	89 c8                	mov    eax,ecx
c00114d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00114dd:	21 f9                	and    ecx,edi
c00114df:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00114e3:	89 ca                	mov    edx,ecx
c00114e5:	74 0d                	je     c00114f4 <VCache::read(unsigned long long, int, void*)+0x96>
c00114e7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00114ea:	75 08                	jne    c00114f4 <VCache::read(unsigned long long, int, void*)+0x96>
c00114ec:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00114ef:	74 27                	je     c0011518 <VCache::read(unsigned long long, int, void*)+0xba>
c00114f1:	8d 76 00             	lea    esi,[esi+0x0]
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00114fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00114ff:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011502:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011505:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011507:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001150a:	55                   	push   ebp
c001150b:	52                   	push   edx
c001150c:	50                   	push   eax
c001150d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011511:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011514:	83 c4 20             	add    esp,0x20
c0011517:	90                   	nop
c0011518:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001151b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001151f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011525:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011528:	48                   	dec    eax
c0011529:	21 c6                	and    esi,eax
c001152b:	0f af f1             	imul   esi,ecx
c001152e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011533:	eb 23                	jmp    c0011558 <VCache::read(unsigned long long, int, void*)+0xfa>
c0011535:	8d 76 00             	lea    esi,[esi+0x0]
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	53                   	push   ebx
c001153c:	e8 4b fd ff ff       	call   c001128c <VCache::invalidateReadBuffer()>
c0011541:	5a                   	pop    edx
c0011542:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011545:	8b 10                	mov    edx,DWORD PTR [eax]
c0011547:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001154b:	55                   	push   ebp
c001154c:	57                   	push   edi
c001154d:	56                   	push   esi
c001154e:	50                   	push   eax
c001154f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011552:	83 c4 20             	add    esp,0x20
c0011555:	8d 76 00             	lea    esi,[esi+0x0]
c0011558:	83 c4 1c             	add    esp,0x1c
c001155b:	31 c0                	xor    eax,eax
c001155d:	5b                   	pop    ebx
c001155e:	5e                   	pop    esi
c001155f:	5f                   	pop    edi
c0011560:	5d                   	pop    ebp
c0011561:	c3                   	ret    

c0011562 <Video::putrect(int, int, int, int, unsigned int)>:
c0011562:	55                   	push   ebp
c0011563:	57                   	push   edi
c0011564:	56                   	push   esi
c0011565:	53                   	push   ebx
c0011566:	83 ec 1c             	sub    esp,0x1c
c0011569:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001156d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011571:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011575:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011579:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001157d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011581:	01 df                	add    edi,ebx
c0011583:	39 fb                	cmp    ebx,edi
c0011585:	7d 1f                	jge    c00115a6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011587:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001158b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001158f:	7d 12                	jge    c00115a3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011591:	8b 16                	mov    edx,DWORD PTR [esi]
c0011593:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011597:	53                   	push   ebx
c0011598:	55                   	push   ebp
c0011599:	45                   	inc    ebp
c001159a:	56                   	push   esi
c001159b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001159e:	83 c4 10             	add    esp,0x10
c00115a1:	eb e8                	jmp    c001158b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00115a3:	43                   	inc    ebx
c00115a4:	eb dd                	jmp    c0011583 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00115a6:	83 c4 1c             	add    esp,0x1c
c00115a9:	5b                   	pop    ebx
c00115aa:	5e                   	pop    esi
c00115ab:	5f                   	pop    edi
c00115ac:	5d                   	pop    ebp
c00115ad:	c3                   	ret    

c00115ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00115ae:	55                   	push   ebp
c00115af:	57                   	push   edi
c00115b0:	31 ff                	xor    edi,edi
c00115b2:	56                   	push   esi
c00115b3:	53                   	push   ebx
c00115b4:	83 ec 1c             	sub    esp,0x1c
c00115b7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00115bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00115bf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00115c6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00115cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115cf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00115d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00115d7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00115da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00115de:	01 f9                	add    ecx,edi
c00115e0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00115e4:	7d 2f                	jge    c0011615 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00115e6:	31 f6                	xor    esi,esi
c00115e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00115ec:	01 f2                	add    edx,esi
c00115ee:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00115f2:	7d 1a                	jge    c001160e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00115f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00115f7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00115fa:	46                   	inc    esi
c00115fb:	51                   	push   ecx
c00115fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011600:	52                   	push   edx
c0011601:	55                   	push   ebp
c0011602:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001160c:	eb da                	jmp    c00115e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001160e:	47                   	inc    edi
c001160f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011613:	eb c5                	jmp    c00115da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011615:	83 c4 1c             	add    esp,0x1c
c0011618:	5b                   	pop    ebx
c0011619:	5e                   	pop    esi
c001161a:	5f                   	pop    edi
c001161b:	5d                   	pop    ebp
c001161c:	c3                   	ret    
c001161d:	90                   	nop

c001161e <Video::blit(unsigned int*, int, int, int, int)>:
c001161e:	55                   	push   ebp
c001161f:	57                   	push   edi
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	83 ec 1c             	sub    esp,0x1c
c0011625:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011629:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001162d:	85 c0                	test   eax,eax
c001162f:	79 02                	jns    c0011633 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011631:	31 c0                	xor    eax,eax
c0011633:	c1 e0 02             	shl    eax,0x2
c0011636:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001163a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001163e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011642:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011646:	39 d8                	cmp    eax,ebx
c0011648:	7e 49                	jle    c0011693 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001164a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011650:	7c 41                	jl     c0011693 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011652:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011656:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001165a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001165e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011662:	39 f9                	cmp    ecx,edi
c0011664:	7e 22                	jle    c0011688 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011666:	83 c5 04             	add    ebp,0x4
c0011669:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001166f:	7c 14                	jl     c0011685 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011671:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011673:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011676:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001167a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001167e:	56                   	push   esi
c001167f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	47                   	inc    edi
c0011686:	eb d2                	jmp    c001165a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001168c:	43                   	inc    ebx
c001168d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011691:	eb ab                	jmp    c001163e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011693:	83 c4 1c             	add    esp,0x1c
c0011696:	5b                   	pop    ebx
c0011697:	5e                   	pop    esi
c0011698:	5f                   	pop    edi
c0011699:	5d                   	pop    ebp
c001169a:	c3                   	ret    
c001169b:	90                   	nop

c001169c <Video::clearScreen(unsigned int)>:
c001169c:	57                   	push   edi
c001169d:	56                   	push   esi
c001169e:	53                   	push   ebx
c001169f:	31 db                	xor    ebx,ebx
c00116a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116a5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00116ab:	7e 1f                	jle    c00116cc <Video::clearScreen(unsigned int)+0x30>
c00116ad:	31 ff                	xor    edi,edi
c00116af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00116b5:	7e 12                	jle    c00116c9 <Video::clearScreen(unsigned int)+0x2d>
c00116b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00116b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00116bd:	53                   	push   ebx
c00116be:	57                   	push   edi
c00116bf:	47                   	inc    edi
c00116c0:	56                   	push   esi
c00116c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116c4:	83 c4 10             	add    esp,0x10
c00116c7:	eb e6                	jmp    c00116af <Video::clearScreen(unsigned int)+0x13>
c00116c9:	43                   	inc    ebx
c00116ca:	eb d9                	jmp    c00116a5 <Video::clearScreen(unsigned int)+0x9>
c00116cc:	5b                   	pop    ebx
c00116cd:	5e                   	pop    esi
c00116ce:	5f                   	pop    edi
c00116cf:	c3                   	ret    

c00116d0 <Video::putpixel(int, int, unsigned int)>:
c00116d0:	c7 44 24 04 88 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025388
c00116d8:	e9 90 39 00 00       	jmp    c001506d <Krnl::panic(char const*)>
c00116dd:	90                   	nop

c00116de <Video::Video(char const*)>:
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116e5:	83 ec 08             	sub    esp,0x8
c00116e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ec:	50                   	push   eax
c00116ed:	e8 10 d0 ff ff       	call   c000e702 <Device::Device(char const*)>
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	ba f8 53 02 c0       	mov    edx,0xc00253f8
c00116fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116fe:	89 10                	mov    DWORD PTR [eax],edx
c0011700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011704:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001170e:	90                   	nop
c001170f:	83 c4 0c             	add    esp,0xc
c0011712:	c3                   	ret    
c0011713:	90                   	nop

c0011714 <Video::~Video()>:
c0011714:	83 ec 0c             	sub    esp,0xc
c0011717:	ba f8 53 02 c0       	mov    edx,0xc00253f8
c001171c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011720:	89 10                	mov    DWORD PTR [eax],edx
c0011722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011726:	83 ec 0c             	sub    esp,0xc
c0011729:	50                   	push   eax
c001172a:	e8 9d cc ff ff       	call   c000e3cc <Device::~Device()>
c001172f:	83 c4 10             	add    esp,0x10
c0011732:	90                   	nop
c0011733:	83 c4 0c             	add    esp,0xc
c0011736:	c3                   	ret    
c0011737:	90                   	nop

c0011738 <Video::~Video()>:
c0011738:	83 ec 0c             	sub    esp,0xc
c001173b:	83 ec 0c             	sub    esp,0xc
c001173e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011742:	e8 cd ff ff ff       	call   c0011714 <Video::~Video()>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	83 ec 08             	sub    esp,0x8
c001174d:	68 64 01 00 00       	push   0x164
c0011752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011756:	e8 0f b8 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	83 c4 0c             	add    esp,0xc
c0011761:	c3                   	ret    

c0011762 <Video::isMonochrome()>:
c0011762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011766:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001176c:	c3                   	ret    
c001176d:	90                   	nop

c001176e <Video::getWidth()>:
c001176e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011772:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011778:	c3                   	ret    
c0011779:	90                   	nop

c001177a <Video::getHeight()>:
c001177a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001177e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011786:	55                   	push   ebp
c0011787:	57                   	push   edi
c0011788:	56                   	push   esi
c0011789:	53                   	push   ebx
c001178a:	83 ec 2c             	sub    esp,0x2c
c001178d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011791:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011795:	83 f8 01             	cmp    eax,0x1
c0011798:	19 c9                	sbb    ecx,ecx
c001179a:	31 db                	xor    ebx,ebx
c001179c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00117a0:	89 cd                	mov    ebp,ecx
c00117a2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00117aa:	f7 d5                	not    ebp
c00117ac:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00117b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00117b6:	01 d8                	add    eax,ebx
c00117b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117bc:	56                   	push   esi
c00117bd:	e8 b8 ff ff ff       	call   c001177a <Video::getHeight()>
c00117c2:	59                   	pop    ecx
c00117c3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00117c7:	7e 70                	jle    c0011839 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00117c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00117cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00117d1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00117d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00117d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00117dc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00117e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117e7:	89 f8                	mov    eax,edi
c00117e9:	83 c0 20             	add    eax,0x20
c00117ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117f0:	56                   	push   esi
c00117f1:	e8 78 ff ff ff       	call   c001176e <Video::getWidth()>
c00117f6:	5a                   	pop    edx
c00117f7:	39 c7                	cmp    edi,eax
c00117f9:	7d 34                	jge    c001182f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00117fb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011800:	74 05                	je     c0011807 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011802:	8b 06                	mov    eax,DWORD PTR [esi]
c0011804:	55                   	push   ebp
c0011805:	eb 0d                	jmp    c0011814 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011807:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001180c:	74 12                	je     c0011820 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001180e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011810:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011814:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011818:	57                   	push   edi
c0011819:	56                   	push   esi
c001181a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011824:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011828:	47                   	inc    edi
c0011829:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001182d:	75 c1                	jne    c00117f0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001182f:	43                   	inc    ebx
c0011830:	83 fb 20             	cmp    ebx,0x20
c0011833:	0f 85 79 ff ff ff    	jne    c00117b2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011839:	83 c4 2c             	add    esp,0x2c
c001183c:	5b                   	pop    ebx
c001183d:	5e                   	pop    esi
c001183e:	5f                   	pop    edi
c001183f:	5d                   	pop    ebp
c0011840:	c3                   	ret    
c0011841:	90                   	nop

c0011842 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011842:	55                   	push   ebp
c0011843:	57                   	push   edi
c0011844:	56                   	push   esi
c0011845:	53                   	push   ebx
c0011846:	83 ec 28             	sub    esp,0x28
c0011849:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001184d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011851:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011855:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011859:	c1 e6 08             	shl    esi,0x8
c001185c:	01 c6                	add    esi,eax
c001185e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011862:	c1 e0 08             	shl    eax,0x8
c0011865:	01 d0                	add    eax,edx
c0011867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001186b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001186f:	0f af c6             	imul   eax,esi
c0011872:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011879:	50                   	push   eax
c001187a:	e8 c0 84 ff ff       	call   c0009d3f <malloc>
c001187f:	83 c4 10             	add    esp,0x10
c0011882:	89 c7                	mov    edi,eax
c0011884:	85 c0                	test   eax,eax
c0011886:	75 10                	jne    c0011898 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	68 a9 53 02 c0       	push   0xc00253a9
c0011890:	e8 d8 37 00 00       	call   c001506d <Krnl::panic(char const*)>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001189b:	ba 12 00 00 00       	mov    edx,0x12
c00118a0:	84 c0                	test   al,al
c00118a2:	74 11                	je     c00118b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00118a4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00118a8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00118ac:	c1 fa 03             	sar    edx,0x3
c00118af:	0f af d1             	imul   edx,ecx
c00118b2:	83 c2 12             	add    edx,0x12
c00118b5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00118b9:	74 04                	je     c00118bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00118bb:	85 f6                	test   esi,esi
c00118bd:	75 12                	jne    c00118d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	68 b9 53 02 c0       	push   0xc00253b9
c00118c7:	e8 7f b7 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00118cc:	e9 b8 00 00 00       	jmp    c0011989 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00118d1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00118d5:	80 f9 02             	cmp    cl,0x2
c00118d8:	0f 85 96 00 00 00    	jne    c0011974 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00118de:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00118e3:	75 0e                	jne    c00118f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00118e5:	84 c0                	test   al,al
c00118e7:	75 0a                	jne    c00118f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00118e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00118ec:	83 e8 18             	sub    eax,0x18
c00118ef:	a8 f7                	test   al,0xf7
c00118f1:	74 0a                	je     c00118fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00118f3:	83 ec 0c             	sub    esp,0xc
c00118f6:	68 ce 53 02 c0       	push   0xc00253ce
c00118fb:	eb 7f                	jmp    c001197c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00118fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011905:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001190d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011911:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011919:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001191d:	75 0c                	jne    c001192b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001191f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011924:	c1 e0 18             	shl    eax,0x18
c0011927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001192b:	45                   	inc    ebp
c001192c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011931:	c1 e1 10             	shl    ecx,0x10
c0011934:	89 c8                	mov    eax,ecx
c0011936:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001193b:	c1 e1 08             	shl    ecx,0x8
c001193e:	09 c1                	or     ecx,eax
c0011940:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011944:	09 c1                	or     ecx,eax
c0011946:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001194a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001194e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011952:	c1 f8 03             	sar    eax,0x3
c0011955:	01 c2                	add    edx,eax
c0011957:	89 e8                	mov    eax,ebp
c0011959:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001195d:	39 c6                	cmp    esi,eax
c001195f:	7f b0                	jg     c0011911 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011961:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011965:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011969:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001196c:	7e 22                	jle    c0011990 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001196e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011972:	eb 99                	jmp    c001190d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011974:	50                   	push   eax
c0011975:	50                   	push   eax
c0011976:	51                   	push   ecx
c0011977:	68 dc 53 02 c0       	push   0xc00253dc
c001197c:	e8 ca b6 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0011981:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011984:	e8 c6 83 ff ff       	call   c0009d4f <free>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	31 ff                	xor    edi,edi
c001198e:	eb 0f                	jmp    c001199f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011990:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011994:	89 30                	mov    DWORD PTR [eax],esi
c0011996:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001199a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001199d:	89 30                	mov    DWORD PTR [eax],esi
c001199f:	83 c4 1c             	add    esp,0x1c
c00119a2:	89 f8                	mov    eax,edi
c00119a4:	5b                   	pop    ebx
c00119a5:	5e                   	pop    esi
c00119a6:	5f                   	pop    edi
c00119a7:	5d                   	pop    ebp
c00119a8:	c3                   	ret    
c00119a9:	90                   	nop

c00119aa <Video::putTGA(int, int, unsigned char*, int)>:
c00119aa:	55                   	push   ebp
c00119ab:	57                   	push   edi
c00119ac:	56                   	push   esi
c00119ad:	53                   	push   ebx
c00119ae:	83 ec 28             	sub    esp,0x28
c00119b1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00119b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00119b9:	50                   	push   eax
c00119ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00119be:	50                   	push   eax
c00119bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00119c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00119c7:	56                   	push   esi
c00119c8:	e8 75 fe ff ff       	call   c0011842 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00119cd:	83 c4 20             	add    esp,0x20
c00119d0:	85 c0                	test   eax,eax
c00119d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119d6:	74 35                	je     c0011a0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00119d8:	89 c7                	mov    edi,eax
c00119da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00119de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00119e2:	39 d8                	cmp    eax,ebx
c00119e4:	7e 27                	jle    c0011a0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00119e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00119ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00119f2:	39 e8                	cmp    eax,ebp
c00119f4:	7e 14                	jle    c0011a0a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00119f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00119f8:	83 c7 04             	add    edi,0x4
c00119fb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00119fe:	53                   	push   ebx
c00119ff:	55                   	push   ebp
c0011a00:	45                   	inc    ebp
c0011a01:	56                   	push   esi
c0011a02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	eb e0                	jmp    c00119ea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011a0a:	43                   	inc    ebx
c0011a0b:	eb cd                	jmp    c00119da <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011a0d:	83 c4 1c             	add    esp,0x1c
c0011a10:	5b                   	pop    ebx
c0011a11:	5e                   	pop    esi
c0011a12:	5f                   	pop    edi
c0011a13:	5d                   	pop    ebp
c0011a14:	c3                   	ret    
c0011a15:	66 90                	xchg   ax,ax
c0011a17:	90                   	nop

c0011a18 <ACPI::close(int, int, void*)>:
c0011a18:	83 ec 1c             	sub    esp,0x1c
c0011a1b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011a23:	74 0b                	je     c0011a30 <ACPI::close(int, int, void*)+0x18>
c0011a25:	b8 00 00 00 00       	mov    eax,0x0
c0011a2a:	e9 99 00 00 00       	jmp    c0011ac8 <ACPI::close(int, int, void*)+0xb0>
c0011a2f:	90                   	nop
c0011a30:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011a35:	75 29                	jne    c0011a60 <ACPI::close(int, int, void*)+0x48>
c0011a37:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0011a3c:	85 c0                	test   eax,eax
c0011a3e:	74 08                	je     c0011a48 <ACPI::close(int, int, void*)+0x30>
c0011a40:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0011a45:	ff d0                	call   eax
c0011a47:	90                   	nop
c0011a48:	83 ec 0c             	sub    esp,0xc
c0011a4b:	68 38 54 02 c0       	push   0xc0025438
c0011a50:	e8 18 36 00 00       	call   c001506d <Krnl::panic(char const*)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a5d:	eb 69                	jmp    c0011ac8 <ACPI::close(int, int, void*)+0xb0>
c0011a5f:	90                   	nop
c0011a60:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011a65:	75 59                	jne    c0011ac0 <ACPI::close(int, int, void*)+0xa8>
c0011a67:	a1 a4 88 02 c0       	mov    eax,ds:0xc00288a4
c0011a6c:	85 c0                	test   eax,eax
c0011a6e:	74 08                	je     c0011a78 <ACPI::close(int, int, void*)+0x60>
c0011a70:	a1 a4 88 02 c0       	mov    eax,ds:0xc00288a4
c0011a75:	ff d0                	call   eax
c0011a77:	90                   	nop
c0011a78:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a85:	83 e0 02             	and    eax,0x2
c0011a88:	74 1e                	je     c0011aa8 <ACPI::close(int, int, void*)+0x90>
c0011a8a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011a91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a95:	89 c2                	mov    edx,eax
c0011a97:	ec                   	in     al,dx
c0011a98:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a9c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011aa0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011aa4:	eb da                	jmp    c0011a80 <ACPI::close(int, int, void*)+0x68>
c0011aa6:	66 90                	xchg   ax,ax
c0011aa8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011aaf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011ab4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011ab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011abc:	ee                   	out    dx,al
c0011abd:	8d 76 00             	lea    esi,[esi+0x0]
c0011ac0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ac8:	83 c4 1c             	add    esp,0x1c
c0011acb:	c3                   	ret    

c0011acc <findRSDP()>:
c0011acc:	83 ec 1c             	sub    esp,0x1c
c0011acf:	83 ec 0c             	sub    esp,0xc
c0011ad2:	68 5b 55 02 c0       	push   0xc002555b
c0011ad7:	e8 bd 82 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011adc:	83 c4 10             	add    esp,0x10
c0011adf:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0011ae4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011aea:	83 e0 04             	and    eax,0x4
c0011aed:	84 c0                	test   al,al
c0011aef:	75 0b                	jne    c0011afc <findRSDP()+0x30>
c0011af1:	b8 00 00 00 00       	mov    eax,0x0
c0011af6:	e9 a1 00 00 00       	jmp    c0011b9c <findRSDP()+0xd0>
c0011afb:	90                   	nop
c0011afc:	a1 98 82 02 c0       	mov    eax,ds:0xc0028298
c0011b01:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011b06:	7f 1c                	jg     c0011b24 <findRSDP()+0x58>
c0011b08:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0011b0d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b13:	83 e2 fb             	and    edx,0xfffffffb
c0011b16:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011b1c:	b8 00 00 00 00       	mov    eax,0x0
c0011b21:	eb 79                	jmp    c0011b9c <findRSDP()+0xd0>
c0011b23:	90                   	nop
c0011b24:	83 ec 0c             	sub    esp,0xc
c0011b27:	68 6b 55 02 c0       	push   0xc002556b
c0011b2c:	e8 68 82 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011b31:	83 c4 10             	add    esp,0x10
c0011b34:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011b3c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011b44:	77 3e                	ja     c0011b84 <findRSDP()+0xb8>
c0011b46:	83 ec 04             	sub    esp,0x4
c0011b49:	6a 08                	push   0x8
c0011b4b:	68 84 55 02 c0       	push   0xc0025584
c0011b50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b54:	e8 27 ea fe ff       	call   c0000580 <memcmp>
c0011b59:	83 c4 10             	add    esp,0x10
c0011b5c:	85 c0                	test   eax,eax
c0011b5e:	0f 94 c0             	sete   al
c0011b61:	84 c0                	test   al,al
c0011b63:	74 17                	je     c0011b7c <findRSDP()+0xb0>
c0011b65:	83 ec 0c             	sub    esp,0xc
c0011b68:	68 8d 55 02 c0       	push   0xc002558d
c0011b6d:	e8 27 82 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b79:	eb 21                	jmp    c0011b9c <findRSDP()+0xd0>
c0011b7b:	90                   	nop
c0011b7c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011b81:	eb b9                	jmp    c0011b3c <findRSDP()+0x70>
c0011b83:	90                   	nop
c0011b84:	83 ec 0c             	sub    esp,0xc
c0011b87:	68 9b 55 02 c0       	push   0xc002559b
c0011b8c:	e8 08 82 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	b8 00 00 00 00       	mov    eax,0x0
c0011b99:	8d 76 00             	lea    esi,[esi+0x0]
c0011b9c:	83 c4 1c             	add    esp,0x1c
c0011b9f:	c3                   	ret    

c0011ba0 <loadACPITables(unsigned char*)>:
c0011ba0:	57                   	push   edi
c0011ba1:	56                   	push   esi
c0011ba2:	53                   	push   ebx
c0011ba3:	83 ec 60             	sub    esp,0x60
c0011ba6:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0011bab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011bb1:	83 e0 04             	and    eax,0x4
c0011bb4:	84 c0                	test   al,al
c0011bb6:	0f 84 3c 02 00 00    	je     c0011df8 <loadACPITables(unsigned char*)+0x258>
c0011bbc:	a0 c0 8a 02 c0       	mov    al,ds:0xc0028ac0
c0011bc1:	84 c0                	test   al,al
c0011bc3:	74 77                	je     c0011c3c <loadACPITables(unsigned char*)+0x9c>
c0011bc5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011bc9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011bcd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011bd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bd4:	83 e8 24             	sub    eax,0x24
c0011bd7:	c1 e8 03             	shr    eax,0x3
c0011bda:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011bde:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011be6:	66 90                	xchg   ax,ax
c0011be8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011bec:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011bf0:	0f 8d b6 00 00 00    	jge    c0011cac <loadACPITables(unsigned char*)+0x10c>
c0011bf6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011bfa:	83 c0 24             	add    eax,0x24
c0011bfd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011c01:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011c05:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011c09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011c0d:	c1 e0 03             	shl    eax,0x3
c0011c10:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011c14:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c18:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1d:	89 c1                	mov    ecx,eax
c0011c1f:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0011c24:	8d 50 01             	lea    edx,[eax+0x1]
c0011c27:	89 15 ac 88 02 c0    	mov    DWORD PTR ds:0xc00288ac,edx
c0011c2d:	89 ca                	mov    edx,ecx
c0011c2f:	89 14 c5 c4 88 02 c0 	mov    DWORD PTR [eax*8-0x3ffd773c],edx
c0011c36:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011c3a:	eb ac                	jmp    c0011be8 <loadACPITables(unsigned char*)+0x48>
c0011c3c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c40:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011c44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c4b:	83 e8 24             	sub    eax,0x24
c0011c4e:	c1 e8 02             	shr    eax,0x2
c0011c51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011c55:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011c64:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011c68:	7d 42                	jge    c0011cac <loadACPITables(unsigned char*)+0x10c>
c0011c6a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c6e:	83 c0 24             	add    eax,0x24
c0011c71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011c75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011c79:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011c7d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011c81:	c1 e0 02             	shl    eax,0x2
c0011c84:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011c88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c8e:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0011c93:	8d 50 01             	lea    edx,[eax+0x1]
c0011c96:	89 15 ac 88 02 c0    	mov    DWORD PTR ds:0xc00288ac,edx
c0011c9c:	89 ca                	mov    edx,ecx
c0011c9e:	89 14 c5 c4 88 02 c0 	mov    DWORD PTR [eax*8-0x3ffd773c],edx
c0011ca5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011ca9:	eb b5                	jmp    c0011c60 <loadACPITables(unsigned char*)+0xc0>
c0011cab:	90                   	nop
c0011cac:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011cb4:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0011cb9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011cbd:	0f 8d 39 01 00 00    	jge    c0011dfc <loadACPITables(unsigned char*)+0x25c>
c0011cc3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011cc7:	8b 04 c5 c4 88 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd773c]
c0011cce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011cd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011cda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cde:	25 ff 0f 00 00       	and    eax,0xfff
c0011ce3:	89 c6                	mov    esi,eax
c0011ce5:	8b 1d 94 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028394
c0011ceb:	83 ec 0c             	sub    esp,0xc
c0011cee:	6a 01                	push   0x1
c0011cf0:	e8 fc 9f ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0011cf5:	83 c4 10             	add    esp,0x10
c0011cf8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011cfc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011d02:	83 ec 0c             	sub    esp,0xc
c0011d05:	6a 01                	push   0x1
c0011d07:	6a 01                	push   0x1
c0011d09:	50                   	push   eax
c0011d0a:	52                   	push   edx
c0011d0b:	53                   	push   ebx
c0011d0c:	e8 41 a9 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d11:	83 c4 20             	add    esp,0x20
c0011d14:	09 f0                	or     eax,esi
c0011d16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d1a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d1e:	c1 e0 03             	shl    eax,0x3
c0011d21:	05 c0 88 02 c0       	add    eax,0xc00288c0
c0011d26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d32:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d4e:	89 c6                	mov    esi,eax
c0011d50:	89 d7                	mov    edi,edx
c0011d52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011d54:	89 c8                	mov    eax,ecx
c0011d56:	89 fa                	mov    edx,edi
c0011d58:	89 f3                	mov    ebx,esi
c0011d5a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011d5e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d75:	05 00 10 00 00       	add    eax,0x1000
c0011d7a:	c1 e8 0c             	shr    eax,0xc
c0011d7d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d8d:	25 ff 0f 00 00       	and    eax,0xfff
c0011d92:	89 c6                	mov    esi,eax
c0011d94:	8b 1d 94 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028394
c0011d9a:	83 ec 0c             	sub    esp,0xc
c0011d9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011da1:	e8 4b 9f ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011dad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011db3:	83 ec 0c             	sub    esp,0xc
c0011db6:	6a 01                	push   0x1
c0011db8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011dbc:	50                   	push   eax
c0011dbd:	52                   	push   edx
c0011dbe:	53                   	push   ebx
c0011dbf:	e8 8e a8 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc4:	83 c4 20             	add    esp,0x20
c0011dc7:	09 f0                	or     eax,esi
c0011dc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd1:	83 ec 0c             	sub    esp,0xc
c0011dd4:	50                   	push   eax
c0011dd5:	e8 0b a2 ff ff       	call   c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dda:	83 c4 10             	add    esp,0x10
c0011ddd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011de1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011de5:	89 14 c5 c4 88 02 c0 	mov    DWORD PTR [eax*8-0x3ffd773c],edx
c0011dec:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011df0:	e9 bf fe ff ff       	jmp    c0011cb4 <loadACPITables(unsigned char*)+0x114>
c0011df5:	8d 76 00             	lea    esi,[esi+0x0]
c0011df8:	90                   	nop
c0011df9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dfc:	83 c4 60             	add    esp,0x60
c0011dff:	5b                   	pop    ebx
c0011e00:	5e                   	pop    esi
c0011e01:	5f                   	pop    edi
c0011e02:	c3                   	ret    
c0011e03:	90                   	nop

c0011e04 <findRSDT(unsigned char*)>:
c0011e04:	57                   	push   edi
c0011e05:	56                   	push   esi
c0011e06:	53                   	push   ebx
c0011e07:	83 ec 50             	sub    esp,0x50
c0011e0a:	83 ec 0c             	sub    esp,0xc
c0011e0d:	68 af 55 02 c0       	push   0xc00255af
c0011e12:	e8 82 7f ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011e17:	83 c4 10             	add    esp,0x10
c0011e1a:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0011e1f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011e25:	83 e0 04             	and    eax,0x4
c0011e28:	84 c0                	test   al,al
c0011e2a:	75 0c                	jne    c0011e38 <findRSDT(unsigned char*)+0x34>
c0011e2c:	b8 00 00 00 00       	mov    eax,0x0
c0011e31:	e9 86 01 00 00       	jmp    c0011fbc <findRSDT(unsigned char*)+0x1b8>
c0011e36:	66 90                	xchg   ax,ax
c0011e38:	83 ec 0c             	sub    esp,0xc
c0011e3b:	68 c1 55 02 c0       	push   0xc00255c1
c0011e40:	e8 54 7f ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011e45:	83 c4 10             	add    esp,0x10
c0011e48:	89 e0                	mov    eax,esp
c0011e4a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011e4e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011e56:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011e5e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011e6e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011e72:	89 c6                	mov    esi,eax
c0011e74:	89 d7                	mov    edi,edx
c0011e76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e78:	89 c8                	mov    eax,ecx
c0011e7a:	89 fa                	mov    edx,edi
c0011e7c:	89 f3                	mov    ebx,esi
c0011e7e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011e82:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011e86:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	68 d3 55 02 c0       	push   0xc00255d3
c0011e92:	e8 02 7f ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011e97:	83 c4 10             	add    esp,0x10
c0011e9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011e9e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011ea2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011eaa:	83 ec 0c             	sub    esp,0xc
c0011ead:	68 e5 55 02 c0       	push   0xc00255e5
c0011eb2:	e8 e2 7e ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ebe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ec2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011ece:	83 ec 04             	sub    esp,0x4
c0011ed1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ed5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ed9:	68 5c 54 02 c0       	push   0xc002545c
c0011ede:	e8 68 b1 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011eea:	25 ff 0f 00 00       	and    eax,0xfff
c0011eef:	89 c6                	mov    esi,eax
c0011ef1:	8b 1d 94 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028394
c0011ef7:	83 ec 0c             	sub    esp,0xc
c0011efa:	6a 02                	push   0x2
c0011efc:	e8 f0 9d ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011f08:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f0e:	83 ec 0c             	sub    esp,0xc
c0011f11:	6a 01                	push   0x1
c0011f13:	6a 02                	push   0x2
c0011f15:	50                   	push   eax
c0011f16:	52                   	push   edx
c0011f17:	53                   	push   ebx
c0011f18:	e8 35 a7 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f1d:	83 c4 20             	add    esp,0x20
c0011f20:	09 f0                	or     eax,esi
c0011f22:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011f26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f2a:	25 ff 0f 00 00       	and    eax,0xfff
c0011f2f:	89 c6                	mov    esi,eax
c0011f31:	8b 1d 94 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028394
c0011f37:	83 ec 0c             	sub    esp,0xc
c0011f3a:	6a 02                	push   0x2
c0011f3c:	e8 b0 9d ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011f48:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	6a 01                	push   0x1
c0011f53:	6a 02                	push   0x2
c0011f55:	50                   	push   eax
c0011f56:	52                   	push   edx
c0011f57:	53                   	push   ebx
c0011f58:	e8 f5 a6 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f5d:	83 c4 20             	add    esp,0x20
c0011f60:	09 f0                	or     eax,esi
c0011f62:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011f66:	83 ec 04             	sub    esp,0x4
c0011f69:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f6d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f71:	68 7c 54 02 c0       	push   0xc002547c
c0011f76:	e8 d0 b0 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011f83:	75 13                	jne    c0011f98 <findRSDT(unsigned char*)+0x194>
c0011f85:	c6 05 c0 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028ac0,0x0
c0011f8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f94:	eb 22                	jmp    c0011fb8 <findRSDT(unsigned char*)+0x1b4>
c0011f96:	66 90                	xchg   ax,ax
c0011f98:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011f9d:	75 11                	jne    c0011fb0 <findRSDT(unsigned char*)+0x1ac>
c0011f9f:	c6 05 c0 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028ac0,0x1
c0011fa6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011faa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011fae:	eb 08                	jmp    c0011fb8 <findRSDT(unsigned char*)+0x1b4>
c0011fb0:	b8 00 00 00 00       	mov    eax,0x0
c0011fb5:	eb 05                	jmp    c0011fbc <findRSDT(unsigned char*)+0x1b8>
c0011fb7:	90                   	nop
c0011fb8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011fbc:	83 c4 50             	add    esp,0x50
c0011fbf:	5b                   	pop    ebx
c0011fc0:	5e                   	pop    esi
c0011fc1:	5f                   	pop    edi
c0011fc2:	c3                   	ret    
c0011fc3:	90                   	nop

c0011fc4 <findDataTable(unsigned char*, char*)>:
c0011fc4:	83 ec 1c             	sub    esp,0x1c
c0011fc7:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0011fcc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011fd2:	83 e0 04             	and    eax,0x4
c0011fd5:	84 c0                	test   al,al
c0011fd7:	75 07                	jne    c0011fe0 <findDataTable(unsigned char*, char*)+0x1c>
c0011fd9:	b8 00 00 00 00       	mov    eax,0x0
c0011fde:	eb 58                	jmp    c0012038 <findDataTable(unsigned char*, char*)+0x74>
c0011fe0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fe8:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0011fed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011ff1:	7d 3d                	jge    c0012030 <findDataTable(unsigned char*, char*)+0x6c>
c0011ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff7:	c1 e0 03             	shl    eax,0x3
c0011ffa:	05 c0 88 02 c0       	add    eax,0xc00288c0
c0011fff:	83 ec 04             	sub    esp,0x4
c0012002:	6a 04                	push   0x4
c0012004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012008:	50                   	push   eax
c0012009:	e8 72 e5 fe ff       	call   c0000580 <memcmp>
c001200e:	83 c4 10             	add    esp,0x10
c0012011:	85 c0                	test   eax,eax
c0012013:	0f 94 c0             	sete   al
c0012016:	84 c0                	test   al,al
c0012018:	74 0e                	je     c0012028 <findDataTable(unsigned char*, char*)+0x64>
c001201a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001201e:	8b 04 c5 c4 88 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd773c]
c0012025:	eb 11                	jmp    c0012038 <findDataTable(unsigned char*, char*)+0x74>
c0012027:	90                   	nop
c0012028:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001202c:	eb ba                	jmp    c0011fe8 <findDataTable(unsigned char*, char*)+0x24>
c001202e:	66 90                	xchg   ax,ax
c0012030:	b8 00 00 00 00       	mov    eax,0x0
c0012035:	8d 76 00             	lea    esi,[esi+0x0]
c0012038:	83 c4 1c             	add    esp,0x1c
c001203b:	c3                   	ret    

c001203c <scanMADT()>:
c001203c:	53                   	push   ebx
c001203d:	83 ec 38             	sub    esp,0x38
c0012040:	83 ec 0c             	sub    esp,0xc
c0012043:	68 f7 55 02 c0       	push   0xc00255f7
c0012048:	e8 4c 7d ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c0012055:	25 00 04 00 00       	and    eax,0x400
c001205a:	74 14                	je     c0012070 <scanMADT()+0x34>
c001205c:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012061:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012067:	83 e2 fb             	and    edx,0xfffffffb
c001206a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012070:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012075:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001207b:	83 e0 04             	and    eax,0x4
c001207e:	84 c0                	test   al,al
c0012080:	0f 84 82 04 00 00    	je     c0012508 <scanMADT()+0x4cc>
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	68 04 56 02 c0       	push   0xc0025604
c001208e:	e8 06 7d ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012093:	83 c4 10             	add    esp,0x10
c0012096:	e8 31 fa ff ff       	call   c0011acc <findRSDP()>
c001209b:	a3 cc 8a 02 c0       	mov    ds:0xc0028acc,eax
c00120a0:	a1 cc 8a 02 c0       	mov    eax,ds:0xc0028acc
c00120a5:	85 c0                	test   eax,eax
c00120a7:	75 1b                	jne    c00120c4 <scanMADT()+0x88>
c00120a9:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c00120ae:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00120b4:	83 e2 fb             	and    edx,0xfffffffb
c00120b7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00120bd:	e9 4e 04 00 00       	jmp    c0012510 <scanMADT()+0x4d4>
c00120c2:	66 90                	xchg   ax,ax
c00120c4:	83 ec 0c             	sub    esp,0xc
c00120c7:	68 16 56 02 c0       	push   0xc0025616
c00120cc:	e8 c8 7c ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	a1 cc 8a 02 c0       	mov    eax,ds:0xc0028acc
c00120d9:	83 ec 0c             	sub    esp,0xc
c00120dc:	50                   	push   eax
c00120dd:	e8 22 fd ff ff       	call   c0011e04 <findRSDT(unsigned char*)>
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	a3 c8 8a 02 c0       	mov    ds:0xc0028ac8,eax
c00120ea:	a1 c8 8a 02 c0       	mov    eax,ds:0xc0028ac8
c00120ef:	85 c0                	test   eax,eax
c00120f1:	75 19                	jne    c001210c <scanMADT()+0xd0>
c00120f3:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c00120f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00120fe:	83 e2 fb             	and    edx,0xfffffffb
c0012101:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012107:	e9 04 04 00 00       	jmp    c0012510 <scanMADT()+0x4d4>
c001210c:	83 ec 0c             	sub    esp,0xc
c001210f:	68 26 56 02 c0       	push   0xc0025626
c0012114:	e8 80 7c ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	a1 c8 8a 02 c0       	mov    eax,ds:0xc0028ac8
c0012121:	83 ec 0c             	sub    esp,0xc
c0012124:	50                   	push   eax
c0012125:	e8 76 fa ff ff       	call   c0011ba0 <loadACPITables(unsigned char*)>
c001212a:	83 c4 10             	add    esp,0x10
c001212d:	a1 c8 8a 02 c0       	mov    eax,ds:0xc0028ac8
c0012132:	83 ec 08             	sub    esp,0x8
c0012135:	68 3e 56 02 c0       	push   0xc002563e
c001213a:	50                   	push   eax
c001213b:	e8 84 fe ff ff       	call   c0011fc4 <findDataTable(unsigned char*, char*)>
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012147:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001214c:	75 1a                	jne    c0012168 <scanMADT()+0x12c>
c001214e:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012153:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012159:	83 e2 fe             	and    edx,0xfffffffe
c001215c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012162:	e9 a9 03 00 00       	jmp    c0012510 <scanMADT()+0x4d4>
c0012167:	90                   	nop
c0012168:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012177:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001217b:	0f 87 8f 03 00 00    	ja     c0012510 <scanMADT()+0x4d4>
c0012181:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0012189:	0f 87 81 03 00 00    	ja     c0012510 <scanMADT()+0x4d4>
c001218f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012193:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012197:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001219b:	8d 50 01             	lea    edx,[eax+0x1]
c001219e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00121aa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00121ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121b2:	8d 50 01             	lea    edx,[eax+0x1]
c00121b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00121c1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00121c5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00121ca:	0f 86 3c 03 00 00    	jbe    c001250c <scanMADT()+0x4d0>
c00121d0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00121d5:	75 59                	jne    c0012230 <scanMADT()+0x1f4>
c00121d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121db:	8d 50 01             	lea    edx,[eax+0x1]
c00121de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121e2:	8a 15 c0 8c 02 c0    	mov    dl,BYTE PTR ds:0xc0028cc0
c00121e8:	0f b6 d2             	movzx  edx,dl
c00121eb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00121ef:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00121f3:	88 82 00 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd7300],al
c00121f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121fd:	8d 50 01             	lea    edx,[eax+0x1]
c0012200:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012204:	8a 15 c0 8c 02 c0    	mov    dl,BYTE PTR ds:0xc0028cc0
c001220a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001220d:	88 0d c0 8c 02 c0    	mov    BYTE PTR ds:0xc0028cc0,cl
c0012213:	0f b6 d2             	movzx  edx,dl
c0012216:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001221a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001221e:	88 82 e0 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7320],al
c0012224:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012229:	e9 c6 02 00 00       	jmp    c00124f4 <scanMADT()+0x4b8>
c001222e:	66 90                	xchg   ax,ax
c0012230:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0012235:	0f 85 15 01 00 00    	jne    c0012350 <scanMADT()+0x314>
c001223b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001223f:	8d 50 01             	lea    edx,[eax+0x1]
c0012242:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012246:	8a 15 80 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028b80
c001224c:	0f b6 d2             	movzx  edx,dl
c001224f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012253:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012257:	88 82 a0 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd7460],al
c001225d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0012261:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012265:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012269:	01 d0                	add    eax,edx
c001226b:	83 c0 2c             	add    eax,0x2c
c001226e:	8a 00                	mov    al,BYTE PTR [eax]
c0012270:	0f b6 d0             	movzx  edx,al
c0012273:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012277:	8d 48 01             	lea    ecx,[eax+0x1]
c001227a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001227e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012282:	0f b6 c0             	movzx  eax,al
c0012285:	c1 e0 08             	shl    eax,0x8
c0012288:	89 d1                	mov    ecx,edx
c001228a:	09 c1                	or     ecx,eax
c001228c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012290:	8d 50 02             	lea    edx,[eax+0x2]
c0012293:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012297:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001229b:	0f b6 c0             	movzx  eax,al
c001229e:	c1 e0 10             	shl    eax,0x10
c00122a1:	09 c1                	or     ecx,eax
c00122a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122a7:	8d 50 03             	lea    edx,[eax+0x3]
c00122aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00122b2:	0f b6 c0             	movzx  eax,al
c00122b5:	c1 e0 18             	shl    eax,0x18
c00122b8:	09 c1                	or     ecx,eax
c00122ba:	89 ca                	mov    edx,ecx
c00122bc:	a0 80 8b 02 c0       	mov    al,ds:0xc0028b80
c00122c1:	0f b6 c0             	movzx  eax,al
c00122c4:	89 14 85 c0 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7440],edx
c00122cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00122d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122d8:	01 d0                	add    eax,edx
c00122da:	83 c0 2c             	add    eax,0x2c
c00122dd:	8a 00                	mov    al,BYTE PTR [eax]
c00122df:	0f b6 d0             	movzx  edx,al
c00122e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122e6:	8d 48 01             	lea    ecx,[eax+0x1]
c00122e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00122f1:	0f b6 c0             	movzx  eax,al
c00122f4:	c1 e0 08             	shl    eax,0x8
c00122f7:	89 d1                	mov    ecx,edx
c00122f9:	09 c1                	or     ecx,eax
c00122fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122ff:	8d 50 02             	lea    edx,[eax+0x2]
c0012302:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012306:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001230a:	0f b6 c0             	movzx  eax,al
c001230d:	c1 e0 10             	shl    eax,0x10
c0012310:	09 c1                	or     ecx,eax
c0012312:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012316:	8d 50 03             	lea    edx,[eax+0x3]
c0012319:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001231d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012321:	0f b6 c0             	movzx  eax,al
c0012324:	c1 e0 18             	shl    eax,0x18
c0012327:	09 c1                	or     ecx,eax
c0012329:	89 ca                	mov    edx,ecx
c001232b:	a0 80 8b 02 c0       	mov    al,ds:0xc0028b80
c0012330:	0f b6 c0             	movzx  eax,al
c0012333:	89 14 85 40 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73c0],edx
c001233a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001233f:	a0 80 8b 02 c0       	mov    al,ds:0xc0028b80
c0012344:	40                   	inc    eax
c0012345:	a2 80 8b 02 c0       	mov    ds:0xc0028b80,al
c001234a:	e9 a5 01 00 00       	jmp    c00124f4 <scanMADT()+0x4b8>
c001234f:	90                   	nop
c0012350:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012355:	0f 85 e9 00 00 00    	jne    c0012444 <scanMADT()+0x408>
c001235b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001235f:	8d 50 01             	lea    edx,[eax+0x1]
c0012362:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012366:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001236a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001236e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012376:	8d 50 01             	lea    edx,[eax+0x1]
c0012379:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001237d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012381:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012385:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012389:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001238d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012391:	01 d0                	add    eax,edx
c0012393:	83 c0 2c             	add    eax,0x2c
c0012396:	8a 00                	mov    al,BYTE PTR [eax]
c0012398:	0f b6 d0             	movzx  edx,al
c001239b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001239f:	8d 48 01             	lea    ecx,[eax+0x1]
c00123a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00123aa:	0f b6 c0             	movzx  eax,al
c00123ad:	c1 e0 08             	shl    eax,0x8
c00123b0:	89 d1                	mov    ecx,edx
c00123b2:	09 c1                	or     ecx,eax
c00123b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123b8:	8d 50 02             	lea    edx,[eax+0x2]
c00123bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123c3:	0f b6 c0             	movzx  eax,al
c00123c6:	c1 e0 10             	shl    eax,0x10
c00123c9:	09 c1                	or     ecx,eax
c00123cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123cf:	8d 50 03             	lea    edx,[eax+0x3]
c00123d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123da:	0f b6 c0             	movzx  eax,al
c00123dd:	c1 e0 18             	shl    eax,0x18
c00123e0:	09 c8                	or     eax,ecx
c00123e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123e6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00123eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123f3:	01 d0                	add    eax,edx
c00123f5:	83 c0 2c             	add    eax,0x2c
c00123f8:	8a 00                	mov    al,BYTE PTR [eax]
c00123fa:	0f b6 c0             	movzx  eax,al
c00123fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012401:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012404:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012408:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001240c:	0f b6 d2             	movzx  edx,dl
c001240f:	c1 e2 08             	shl    edx,0x8
c0012412:	09 d0                	or     eax,edx
c0012414:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012419:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001241e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0012423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012427:	88 90 60 79 02 c0    	mov    BYTE PTR [eax-0x3ffd86a0],dl
c001242d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0012432:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012437:	66 89 84 12 60 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd74a0],ax
c001243f:	e9 b0 00 00 00       	jmp    c00124f4 <scanMADT()+0x4b8>
c0012444:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012449:	0f 85 99 00 00 00    	jne    c00124e8 <scanMADT()+0x4ac>
c001244f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012453:	8d 50 01             	lea    edx,[eax+0x1]
c0012456:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001245a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001245e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012462:	0f b6 c0             	movzx  eax,al
c0012465:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012469:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001246d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012471:	01 d0                	add    eax,edx
c0012473:	83 c0 2c             	add    eax,0x2c
c0012476:	8a 00                	mov    al,BYTE PTR [eax]
c0012478:	0f b6 d0             	movzx  edx,al
c001247b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001247f:	8d 48 01             	lea    ecx,[eax+0x1]
c0012482:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012486:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001248a:	0f b6 c0             	movzx  eax,al
c001248d:	c1 e0 08             	shl    eax,0x8
c0012490:	09 d0                	or     eax,edx
c0012492:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012496:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001249b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001249f:	8d 50 01             	lea    edx,[eax+0x1]
c00124a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124ae:	0f b6 c0             	movzx  eax,al
c00124b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b9:	c1 e0 08             	shl    eax,0x8
c00124bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00124c0:	89 c1                	mov    ecx,eax
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	c1 e0 18             	shl    eax,0x18
c00124c9:	89 c3                	mov    ebx,eax
c00124cb:	a1 d0 8a 02 c0       	mov    eax,ds:0xc0028ad0
c00124d0:	8d 50 01             	lea    edx,[eax+0x1]
c00124d3:	89 15 d0 8a 02 c0    	mov    DWORD PTR ds:0xc0028ad0,edx
c00124d9:	09 d9                	or     ecx,ebx
c00124db:	89 ca                	mov    edx,ecx
c00124dd:	89 14 85 e0 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7520],edx
c00124e4:	eb 0e                	jmp    c00124f4 <scanMADT()+0x4b8>
c00124e6:	66 90                	xchg   ax,ax
c00124e8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00124ed:	75 05                	jne    c00124f4 <scanMADT()+0x4b8>
c00124ef:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00124f4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00124f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00124fd:	01 d0                	add    eax,edx
c00124ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012503:	e9 68 fc ff ff       	jmp    c0012170 <scanMADT()+0x134>
c0012508:	90                   	nop
c0012509:	eb 05                	jmp    c0012510 <scanMADT()+0x4d4>
c001250b:	90                   	nop
c001250c:	90                   	nop
c001250d:	8d 76 00             	lea    esi,[esi+0x0]
c0012510:	83 c4 38             	add    esp,0x38
c0012513:	5b                   	pop    ebx
c0012514:	c3                   	ret    
c0012515:	90                   	nop
c0012516:	66 90                	xchg   ax,ax

c0012518 <ACPI::ACPI()>:
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251f:	83 ec 08             	sub    esp,0x8
c0012522:	68 43 56 02 c0       	push   0xc0025643
c0012527:	50                   	push   eax
c0012528:	e8 d5 c1 ff ff       	call   c000e702 <Device::Device(char const*)>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	ba 04 58 02 c0       	mov    edx,0xc0025804
c0012535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012539:	89 10                	mov    DWORD PTR [eax],edx
c001253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001254a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012558:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012562:	83 ec 0c             	sub    esp,0xc
c0012565:	68 48 56 02 c0       	push   0xc0025648
c001256a:	e8 2a 78 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	e8 c5 fa ff ff       	call   c001203c <scanMADT()>
c0012577:	90                   	nop
c0012578:	83 c4 0c             	add    esp,0xc
c001257b:	c3                   	ret    

c001257c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001257c:	83 ec 2c             	sub    esp,0x2c
c001257f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012583:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012587:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001258b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001258f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012594:	88 d0                	mov    al,dl
c0012596:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001259a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001259f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125a7:	90                   	nop
c00125a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125ac:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00125b2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00125b6:	0f 8d 9c 00 00 00    	jge    c0012658 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00125bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125c4:	83 c2 2a             	add    edx,0x2a
c00125c7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00125cb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00125d0:	75 7a                	jne    c001264c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00125d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125da:	83 c2 2a             	add    edx,0x2a
c00125dd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00125e1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00125e5:	75 65                	jne    c001264c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00125e7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00125ec:	74 3a                	je     c0012628 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00125ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125f6:	83 c2 2a             	add    edx,0x2a
c00125f9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00125fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012601:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012604:	39 c2                	cmp    edx,eax
c0012606:	74 10                	je     c0012618 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012608:	83 ec 0c             	sub    esp,0xc
c001260b:	68 9c 54 02 c0       	push   0xc002549c
c0012610:	e8 58 2a 00 00       	call   c001506d <Krnl::panic(char const*)>
c0012615:	83 c4 10             	add    esp,0x10
c0012618:	83 ec 0c             	sub    esp,0xc
c001261b:	68 56 56 02 c0       	push   0xc0025656
c0012620:	e8 48 2a 00 00       	call   c001506d <Krnl::panic(char const*)>
c0012625:	83 c4 10             	add    esp,0x10
c0012628:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001262c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012630:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012634:	83 c2 2a             	add    edx,0x2a
c0012637:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001263b:	8b 02                	mov    eax,DWORD PTR [edx]
c001263d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012640:	89 01                	mov    DWORD PTR [ecx],eax
c0012642:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012645:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001264a:	66 90                	xchg   ax,ax
c001264c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012650:	e9 53 ff ff ff       	jmp    c00125a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012655:	8d 76 00             	lea    esi,[esi+0x0]
c0012658:	90                   	nop
c0012659:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001265d:	83 c4 2c             	add    esp,0x2c
c0012660:	c2 04 00             	ret    0x4
c0012663:	90                   	nop

c0012664 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012664:	83 ec 1c             	sub    esp,0x1c
c0012667:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001266b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001266f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012673:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012678:	88 c8                	mov    al,cl
c001267a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001267e:	88 d0                	mov    al,dl
c0012680:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012688:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001268e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012692:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012695:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012699:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001269d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126a1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00126a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00126ab:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00126ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126b2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00126b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126bb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00126c1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00126c5:	8d 48 01             	lea    ecx,[eax+0x1]
c00126c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126cc:	83 c2 2a             	add    edx,0x2a
c00126cf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00126d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00126dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126e1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00126e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00126e8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00126ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00126f6:	8d 50 01             	lea    edx,[eax+0x1]
c00126f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126fd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012707:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001270d:	3d 00 02 00 00       	cmp    eax,0x200
c0012712:	75 10                	jne    c0012724 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012714:	83 ec 0c             	sub    esp,0xc
c0012717:	68 65 56 02 c0       	push   0xc0025665
c001271c:	e8 4c 29 00 00       	call   c001506d <Krnl::panic(char const*)>
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	90                   	nop
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	c3                   	ret    
c0012729:	90                   	nop
c001272a:	66 90                	xchg   ax,ax

c001272c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001272c:	b8 00 00 00 00       	mov    eax,0x0
c0012731:	c3                   	ret    
c0012732:	66 90                	xchg   ax,ax

c0012734 <ACPI::detectPCI()>:
c0012734:	53                   	push   ebx
c0012735:	83 ec 68             	sub    esp,0x68
c0012738:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c001273d:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012742:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012747:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001274d:	83 e0 04             	and    eax,0x4
c0012750:	84 c0                	test   al,al
c0012752:	74 2c                	je     c0012780 <ACPI::detectPCI()+0x4c>
c0012754:	a1 c8 8a 02 c0       	mov    eax,ds:0xc0028ac8
c0012759:	83 ec 08             	sub    esp,0x8
c001275c:	68 82 56 02 c0       	push   0xc0025682
c0012761:	50                   	push   eax
c0012762:	e8 5d f8 ff ff       	call   c0011fc4 <findDataTable(unsigned char*, char*)>
c0012767:	83 c4 10             	add    esp,0x10
c001276a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001276e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012773:	74 0b                	je     c0012780 <ACPI::detectPCI()+0x4c>
c0012775:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001277a:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001277f:	90                   	nop
c0012780:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012788:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001278c:	8a 00                	mov    al,BYTE PTR [eax]
c001278e:	3c 01                	cmp    al,0x1
c0012790:	75 0e                	jne    c00127a0 <ACPI::detectPCI()+0x6c>
c0012792:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012797:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001279c:	eb 2a                	jmp    c00127c8 <ACPI::detectPCI()+0x94>
c001279e:	66 90                	xchg   ax,ax
c00127a0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127a4:	8a 00                	mov    al,BYTE PTR [eax]
c00127a6:	3c 02                	cmp    al,0x2
c00127a8:	75 1e                	jne    c00127c8 <ACPI::detectPCI()+0x94>
c00127aa:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00127af:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00127b4:	74 12                	je     c00127c8 <ACPI::detectPCI()+0x94>
c00127b6:	83 ec 0c             	sub    esp,0xc
c00127b9:	68 cc 54 02 c0       	push   0xc00254cc
c00127be:	e8 aa 28 00 00       	call   c001506d <Krnl::panic(char const*)>
c00127c3:	83 c4 10             	add    esp,0x10
c00127c6:	66 90                	xchg   ax,ax
c00127c8:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c00127cc:	83 f0 01             	xor    eax,0x1
c00127cf:	84 c0                	test   al,al
c00127d1:	74 41                	je     c0012814 <ACPI::detectPCI()+0xe0>
c00127d3:	e8 78 d9 fe ff       	call   c0000150 <manualPCIProbe>
c00127d8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00127dc:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c00127e1:	75 0d                	jne    c00127f0 <ACPI::detectPCI()+0xbc>
c00127e3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00127e8:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00127ed:	eb 25                	jmp    c0012814 <ACPI::detectPCI()+0xe0>
c00127ef:	90                   	nop
c00127f0:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00127f5:	75 1d                	jne    c0012814 <ACPI::detectPCI()+0xe0>
c00127f7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00127fc:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012801:	74 11                	je     c0012814 <ACPI::detectPCI()+0xe0>
c0012803:	83 ec 0c             	sub    esp,0xc
c0012806:	68 cc 54 02 c0       	push   0xc00254cc
c001280b:	e8 5d 28 00 00       	call   c001506d <Krnl::panic(char const*)>
c0012810:	83 c4 10             	add    esp,0x10
c0012813:	90                   	nop
c0012814:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012819:	0f 84 49 03 00 00    	je     c0012b68 <ACPI::detectPCI()+0x434>
c001281f:	83 ec 0c             	sub    esp,0xc
c0012822:	68 87 56 02 c0       	push   0xc0025687
c0012827:	e8 6d 75 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001282c:	83 c4 10             	add    esp,0x10
c001282f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012834:	0f 84 8e 00 00 00    	je     c00128c8 <ACPI::detectPCI()+0x194>
c001283a:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c001283f:	25 00 08 00 00       	and    eax,0x800
c0012844:	0f 84 16 01 00 00    	je     c0012960 <ACPI::detectPCI()+0x22c>
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	68 f4 54 02 c0       	push   0xc00254f4
c0012852:	e8 42 75 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c001285f:	25 80 00 00 00       	and    eax,0x80
c0012864:	0f 85 f6 00 00 00    	jne    c0012960 <ACPI::detectPCI()+0x22c>
c001286a:	66 90                	xchg   ax,ax
c001286c:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012873:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012878:	89 c2                	mov    edx,eax
c001287a:	ec                   	in     al,dx
c001287b:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001287f:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012883:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012887:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c001288c:	74 0a                	je     c0012898 <ACPI::detectPCI()+0x164>
c001288e:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012893:	74 03                	je     c0012898 <ACPI::detectPCI()+0x164>
c0012895:	eb d5                	jmp    c001286c <ACPI::detectPCI()+0x138>
c0012897:	90                   	nop
c0012898:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001289f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00128a4:	89 c2                	mov    edx,eax
c00128a6:	ec                   	in     al,dx
c00128a7:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00128ab:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00128af:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00128b3:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00128b8:	74 de                	je     c0012898 <ACPI::detectPCI()+0x164>
c00128ba:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00128bf:	0f 85 93 00 00 00    	jne    c0012958 <ACPI::detectPCI()+0x224>
c00128c5:	eb d1                	jmp    c0012898 <ACPI::detectPCI()+0x164>
c00128c7:	90                   	nop
c00128c8:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c00128cc:	83 f0 01             	xor    eax,0x1
c00128cf:	84 c0                	test   al,al
c00128d1:	0f 84 89 00 00 00    	je     c0012960 <ACPI::detectPCI()+0x22c>
c00128d7:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c00128dc:	25 00 08 00 00       	and    eax,0x800
c00128e1:	74 7d                	je     c0012960 <ACPI::detectPCI()+0x22c>
c00128e3:	83 ec 0c             	sub    esp,0xc
c00128e6:	68 18 55 02 c0       	push   0xc0025518
c00128eb:	e8 a9 74 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c00128f8:	25 80 00 00 00       	and    eax,0x80
c00128fd:	75 61                	jne    c0012960 <ACPI::detectPCI()+0x22c>
c00128ff:	90                   	nop
c0012900:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012907:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c001290c:	89 c2                	mov    edx,eax
c001290e:	ec                   	in     al,dx
c001290f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012913:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012917:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001291b:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012920:	74 0a                	je     c001292c <ACPI::detectPCI()+0x1f8>
c0012922:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012927:	74 03                	je     c001292c <ACPI::detectPCI()+0x1f8>
c0012929:	eb d5                	jmp    c0012900 <ACPI::detectPCI()+0x1cc>
c001292b:	90                   	nop
c001292c:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012933:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012938:	89 c2                	mov    edx,eax
c001293a:	ec                   	in     al,dx
c001293b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001293f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012943:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012947:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c001294c:	74 de                	je     c001292c <ACPI::detectPCI()+0x1f8>
c001294e:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012953:	75 07                	jne    c001295c <ACPI::detectPCI()+0x228>
c0012955:	eb d5                	jmp    c001292c <ACPI::detectPCI()+0x1f8>
c0012957:	90                   	nop
c0012958:	90                   	nop
c0012959:	eb 05                	jmp    c0012960 <ACPI::detectPCI()+0x22c>
c001295b:	90                   	nop
c001295c:	90                   	nop
c001295d:	8d 76 00             	lea    esi,[esi+0x0]
c0012960:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001296f:	e8 cb 73 ff ff       	call   c0009d3f <malloc>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	89 c3                	mov    ebx,eax
c0012979:	83 ec 0c             	sub    esp,0xc
c001297c:	53                   	push   ebx
c001297d:	e8 64 aa 00 00       	call   c001d3e6 <PCI::PCI()>
c0012982:	83 c4 10             	add    esp,0x10
c0012985:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012989:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c001298e:	25 00 08 00 00       	and    eax,0x800
c0012993:	74 7b                	je     c0012a10 <ACPI::detectPCI()+0x2dc>
c0012995:	83 ec 0c             	sub    esp,0xc
c0012998:	68 9f 56 02 c0       	push   0xc002569f
c001299d:	e8 f7 73 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c00129aa:	25 80 00 00 00       	and    eax,0x80
c00129af:	75 5f                	jne    c0012a10 <ACPI::detectPCI()+0x2dc>
c00129b1:	8d 76 00             	lea    esi,[esi+0x0]
c00129b4:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00129bb:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00129c0:	89 c2                	mov    edx,eax
c00129c2:	ec                   	in     al,dx
c00129c3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00129c7:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00129cb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00129cf:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c00129d4:	74 0a                	je     c00129e0 <ACPI::detectPCI()+0x2ac>
c00129d6:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c00129db:	74 03                	je     c00129e0 <ACPI::detectPCI()+0x2ac>
c00129dd:	eb d5                	jmp    c00129b4 <ACPI::detectPCI()+0x280>
c00129df:	90                   	nop
c00129e0:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c00129e7:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c00129ec:	89 c2                	mov    edx,eax
c00129ee:	ec                   	in     al,dx
c00129ef:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00129f3:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c00129f7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00129fb:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012a00:	74 de                	je     c00129e0 <ACPI::detectPCI()+0x2ac>
c0012a02:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012a07:	75 03                	jne    c0012a0c <ACPI::detectPCI()+0x2d8>
c0012a09:	eb d5                	jmp    c00129e0 <ACPI::detectPCI()+0x2ac>
c0012a0b:	90                   	nop
c0012a0c:	90                   	nop
c0012a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a10:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012a14:	83 ec 08             	sub    esp,0x8
c0012a17:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012a1b:	50                   	push   eax
c0012a1c:	e8 dd ba ff ff       	call   c000e4fe <Device::addChild(Device*)>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c0012a29:	25 00 08 00 00       	and    eax,0x800
c0012a2e:	74 78                	je     c0012aa8 <ACPI::detectPCI()+0x374>
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	68 a5 56 02 c0       	push   0xc00256a5
c0012a38:	e8 5c 73 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c0012a45:	25 80 00 00 00       	and    eax,0x80
c0012a4a:	75 5c                	jne    c0012aa8 <ACPI::detectPCI()+0x374>
c0012a4c:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012a53:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012a58:	89 c2                	mov    edx,eax
c0012a5a:	ec                   	in     al,dx
c0012a5b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012a5f:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012a63:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012a67:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012a6c:	74 0a                	je     c0012a78 <ACPI::detectPCI()+0x344>
c0012a6e:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012a73:	74 03                	je     c0012a78 <ACPI::detectPCI()+0x344>
c0012a75:	eb d5                	jmp    c0012a4c <ACPI::detectPCI()+0x318>
c0012a77:	90                   	nop
c0012a78:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012a7f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012a84:	89 c2                	mov    edx,eax
c0012a86:	ec                   	in     al,dx
c0012a87:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012a8b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012a8f:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012a93:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012a98:	74 de                	je     c0012a78 <ACPI::detectPCI()+0x344>
c0012a9a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012a9f:	75 03                	jne    c0012aa4 <ACPI::detectPCI()+0x370>
c0012aa1:	eb d5                	jmp    c0012a78 <ACPI::detectPCI()+0x344>
c0012aa3:	90                   	nop
c0012aa4:	90                   	nop
c0012aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0012aa8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aae:	83 c0 08             	add    eax,0x8
c0012ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ab3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012ab8:	74 0a                	je     c0012ac4 <ACPI::detectPCI()+0x390>
c0012aba:	ba 01 00 00 00       	mov    edx,0x1
c0012abf:	eb 0b                	jmp    c0012acc <ACPI::detectPCI()+0x398>
c0012ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ac4:	ba 02 00 00 00       	mov    edx,0x2
c0012ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0012acc:	6a 00                	push   0x0
c0012ace:	6a 00                	push   0x0
c0012ad0:	52                   	push   edx
c0012ad1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012ad5:	ff d0                	call   eax
c0012ad7:	83 c4 10             	add    esp,0x10
c0012ada:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c0012adf:	25 00 08 00 00       	and    eax,0x800
c0012ae4:	0f 84 26 01 00 00    	je     c0012c10 <ACPI::detectPCI()+0x4dc>
c0012aea:	83 ec 0c             	sub    esp,0xc
c0012aed:	68 ab 56 02 c0       	push   0xc00256ab
c0012af2:	e8 a2 72 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012af7:	83 c4 10             	add    esp,0x10
c0012afa:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c0012aff:	25 80 00 00 00       	and    eax,0x80
c0012b04:	0f 85 06 01 00 00    	jne    c0012c10 <ACPI::detectPCI()+0x4dc>
c0012b0a:	66 90                	xchg   ax,ax
c0012b0c:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012b13:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012b18:	89 c2                	mov    edx,eax
c0012b1a:	ec                   	in     al,dx
c0012b1b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b1f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012b23:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012b27:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012b2c:	74 0a                	je     c0012b38 <ACPI::detectPCI()+0x404>
c0012b2e:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012b33:	74 03                	je     c0012b38 <ACPI::detectPCI()+0x404>
c0012b35:	eb d5                	jmp    c0012b0c <ACPI::detectPCI()+0x3d8>
c0012b37:	90                   	nop
c0012b38:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012b3f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012b44:	89 c2                	mov    edx,eax
c0012b46:	ec                   	in     al,dx
c0012b47:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012b4b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012b4f:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012b53:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012b58:	74 de                	je     c0012b38 <ACPI::detectPCI()+0x404>
c0012b5a:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012b5f:	0f 85 a7 00 00 00    	jne    c0012c0c <ACPI::detectPCI()+0x4d8>
c0012b65:	eb d1                	jmp    c0012b38 <ACPI::detectPCI()+0x404>
c0012b67:	90                   	nop
c0012b68:	83 ec 0c             	sub    esp,0xc
c0012b6b:	68 b1 56 02 c0       	push   0xc00256b1
c0012b70:	e8 d6 a4 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	68 bc 56 02 c0       	push   0xc00256bc
c0012b80:	e8 14 72 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012b90:	83 ec 0c             	sub    esp,0xc
c0012b93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b97:	e8 a3 71 ff ff       	call   c0009d3f <malloc>
c0012b9c:	83 c4 10             	add    esp,0x10
c0012b9f:	89 c3                	mov    ebx,eax
c0012ba1:	83 ec 0c             	sub    esp,0xc
c0012ba4:	53                   	push   ebx
c0012ba5:	e8 a6 b9 00 00       	call   c001e550 <IDE::IDE()>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012bb1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012bb5:	83 ec 08             	sub    esp,0x8
c0012bb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012bbc:	50                   	push   eax
c0012bbd:	e8 3c b9 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c0012bc2:	83 c4 10             	add    esp,0x10
c0012bc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012bc9:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012bd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012bd7:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012be0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012be4:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012bed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bf3:	83 c0 08             	add    eax,0x8
c0012bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bf8:	6a 00                	push   0x0
c0012bfa:	6a 00                	push   0x0
c0012bfc:	6a 00                	push   0x0
c0012bfe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012c02:	ff d0                	call   eax
c0012c04:	83 c4 10             	add    esp,0x10
c0012c07:	eb 07                	jmp    c0012c10 <ACPI::detectPCI()+0x4dc>
c0012c09:	8d 76 00             	lea    esi,[esi+0x0]
c0012c0c:	90                   	nop
c0012c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c10:	90                   	nop
c0012c11:	83 c4 68             	add    esp,0x68
c0012c14:	5b                   	pop    ebx
c0012c15:	c3                   	ret    
c0012c16:	66 90                	xchg   ax,ax

c0012c18 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012c18:	83 ec 1c             	sub    esp,0x1c
c0012c1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c1f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012c22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012c26:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012c2b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012c30:	83 ec 08             	sub    esp,0x8
c0012c33:	52                   	push   edx
c0012c34:	50                   	push   eax
c0012c35:	e8 e8 66 ff ff       	call   c0009322 <Computer::readCMOS(unsigned char)>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012c41:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012c46:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012c4b:	83 ec 04             	sub    esp,0x4
c0012c4e:	6a 01                	push   0x1
c0012c50:	52                   	push   edx
c0012c51:	50                   	push   eax
c0012c52:	e8 1f 68 ff ff       	call   c0009476 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	90                   	nop
c0012c5b:	83 c4 1c             	add    esp,0x1c
c0012c5e:	c3                   	ret    
c0012c5f:	90                   	nop

c0012c60 <ACPI::sleep()>:
c0012c60:	83 ec 0c             	sub    esp,0xc
c0012c63:	83 ec 0c             	sub    esp,0xc
c0012c66:	68 d1 56 02 c0       	push   0xc00256d1
c0012c6b:	e8 db a3 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0012c70:	83 c4 10             	add    esp,0x10
c0012c73:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012c78:	85 c0                	test   eax,eax
c0012c7a:	74 18                	je     c0012c94 <ACPI::sleep()+0x34>
c0012c7c:	83 ec 0c             	sub    esp,0xc
c0012c7f:	68 de 56 02 c0       	push   0xc00256de
c0012c84:	e8 c2 a3 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012c91:	ff d0                	call   eax
c0012c93:	90                   	nop
c0012c94:	90                   	nop
c0012c95:	83 c4 0c             	add    esp,0xc
c0012c98:	c3                   	ret    
c0012c99:	90                   	nop
c0012c9a:	66 90                	xchg   ax,ax

c0012c9c <ACPI::open(int, int, void*)>:
c0012c9c:	57                   	push   edi
c0012c9d:	56                   	push   esi
c0012c9e:	53                   	push   ebx
c0012c9f:	81 ec 70 01 00 00    	sub    esp,0x170
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012caf:	e8 80 fa ff ff       	call   c0012734 <ACPI::detectPCI()>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	83 ec 0c             	sub    esp,0xc
c0012cba:	68 3c 55 02 c0       	push   0xc002553c
c0012cbf:	e8 d5 70 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012cc4:	83 c4 10             	add    esp,0x10
c0012cc7:	83 ec 0c             	sub    esp,0xc
c0012cca:	68 f8 56 02 c0       	push   0xc00256f8
c0012ccf:	e8 a7 45 00 00       	call   c001727b <Thr::loadKernelSymbolTable(char const*)>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012cdf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012cea:	83 ec 0c             	sub    esp,0xc
c0012ced:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012cf4:	e8 46 70 ff ff       	call   c0009d3f <malloc>
c0012cf9:	83 c4 10             	add    esp,0x10
c0012cfc:	89 c3                	mov    ebx,eax
c0012cfe:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c0012d03:	83 ec 04             	sub    esp,0x4
c0012d06:	50                   	push   eax
c0012d07:	68 16 57 02 c0       	push   0xc0025716
c0012d0c:	53                   	push   ebx
c0012d0d:	e8 a4 a8 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0012d12:	83 c4 10             	add    esp,0x10
c0012d15:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012d1c:	83 ec 08             	sub    esp,0x8
c0012d1f:	6a 01                	push   0x1
c0012d21:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012d28:	e8 63 a9 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0012d2d:	83 c4 10             	add    esp,0x10
c0012d30:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012d37:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012d3f:	75 17                	jne    c0012d58 <ACPI::open(int, int, void*)+0xbc>
c0012d41:	83 ec 0c             	sub    esp,0xc
c0012d44:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012d4b:	e8 9e a9 ff ff       	call   c000d6ee <File::close()>
c0012d50:	83 c4 10             	add    esp,0x10
c0012d53:	eb 0b                	jmp    c0012d60 <ACPI::open(int, int, void*)+0xc4>
c0012d55:	8d 76 00             	lea    esi,[esi+0x0]
c0012d58:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012d60:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012d68:	74 1e                	je     c0012d88 <ACPI::open(int, int, void*)+0xec>
c0012d6a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d73:	83 c0 08             	add    eax,0x8
c0012d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012d82:	ff d0                	call   eax
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	90                   	nop
c0012d88:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012d8f:	83 f0 01             	xor    eax,0x1
c0012d92:	84 c0                	test   al,al
c0012d94:	74 42                	je     c0012dd8 <ACPI::open(int, int, void*)+0x13c>
c0012d96:	83 ec 0c             	sub    esp,0xc
c0012d99:	68 34 57 02 c0       	push   0xc0025734
c0012d9e:	e8 f6 6f ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012da3:	83 c4 10             	add    esp,0x10
c0012da6:	83 ec 04             	sub    esp,0x4
c0012da9:	6a 0c                	push   0xc
c0012dab:	68 4f 57 02 c0       	push   0xc002574f
c0012db0:	68 60 57 02 c0       	push   0xc0025760
c0012db5:	e8 2b 2b 00 00       	call   c00158e5 <Reg::readIntWithDefault(char*, char*, int)>
c0012dba:	83 c4 10             	add    esp,0x10
c0012dbd:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012dc4:	83 ec 0c             	sub    esp,0xc
c0012dc7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012dce:	e8 28 91 ff ff       	call   c000befb <Virt::setupPageSwapping(int)>
c0012dd3:	83 c4 10             	add    esp,0x10
c0012dd6:	66 90                	xchg   ax,ax
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	68 c6 3d 02 c0       	push   0xc0023dc6
c0012de0:	e8 b4 6f ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0012de5:	83 c4 10             	add    esp,0x10
c0012de8:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c0012dee:	83 ec 08             	sub    esp,0x8
c0012df1:	6a 01                	push   0x1
c0012df3:	68 67 57 02 c0       	push   0xc0025767
c0012df8:	e8 f5 4e 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	83 ec 08             	sub    esp,0x8
c0012e03:	53                   	push   ebx
c0012e04:	50                   	push   eax
c0012e05:	e8 19 51 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012e14:	83 ec 08             	sub    esp,0x8
c0012e17:	6a 12                	push   0x12
c0012e19:	50                   	push   eax
c0012e1a:	e8 63 ba ff ff       	call   c000e882 <getDevicesOfType(DeviceType)>
c0012e1f:	83 c4 0c             	add    esp,0xc
c0012e22:	66 90                	xchg   ax,ax
c0012e24:	83 ec 0c             	sub    esp,0xc
c0012e27:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012e2e:	50                   	push   eax
c0012e2f:	e8 88 01 01 00       	call   c0022fbc <LinkedList<Device>::isEmpty()>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	83 f0 01             	xor    eax,0x1
c0012e3a:	84 c0                	test   al,al
c0012e3c:	0f 84 46 01 00 00    	je     c0012f88 <ACPI::open(int, int, void*)+0x2ec>
c0012e42:	83 ec 0c             	sub    esp,0xc
c0012e45:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012e4c:	50                   	push   eax
c0012e4d:	e8 86 01 01 00       	call   c0022fd8 <LinkedList<Device>::getFirstElement()>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012e66:	50                   	push   eax
c0012e67:	e8 74 01 01 00       	call   c0022fe0 <LinkedList<Device>::removeFirst()>
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012e76:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012e7d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012e84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e88:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012e8e:	ba 09 00 00 00       	mov    edx,0x9
c0012e93:	fc                   	cld    
c0012e94:	89 c7                	mov    edi,eax
c0012e96:	89 de                	mov    esi,ebx
c0012e98:	89 d1                	mov    ecx,edx
c0012e9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e9c:	83 ec 08             	sub    esp,0x8
c0012e9f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012ea3:	50                   	push   eax
c0012ea4:	83 ec 24             	sub    esp,0x24
c0012ea7:	89 e0                	mov    eax,esp
c0012ea9:	89 c3                	mov    ebx,eax
c0012eab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012eaf:	ba 09 00 00 00       	mov    edx,0x9
c0012eb4:	89 df                	mov    edi,ebx
c0012eb6:	89 c6                	mov    esi,eax
c0012eb8:	89 d1                	mov    ecx,edx
c0012eba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ebc:	e8 03 aa 00 00       	call   c001d8c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012ec1:	83 c4 30             	add    esp,0x30
c0012ec4:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012ecb:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012ed3:	0f 84 4b ff ff ff    	je     c0012e24 <ACPI::open(int, int, void*)+0x188>
c0012ed9:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012ee4:	83 ec 0c             	sub    esp,0xc
c0012ee7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012eee:	e8 4c 6e ff ff       	call   c0009d3f <malloc>
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	89 c3                	mov    ebx,eax
c0012ef8:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c0012efd:	83 ec 04             	sub    esp,0x4
c0012f00:	50                   	push   eax
c0012f01:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f08:	53                   	push   ebx
c0012f09:	e8 a8 a6 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012f18:	83 ec 0c             	sub    esp,0xc
c0012f1b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f22:	e8 d7 a9 ff ff       	call   c000d8fe <File::exists()>
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	84 c0                	test   al,al
c0012f2c:	74 2a                	je     c0012f58 <ACPI::open(int, int, void*)+0x2bc>
c0012f2e:	83 ec 08             	sub    esp,0x8
c0012f31:	6a 01                	push   0x1
c0012f33:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012f3a:	e8 b3 4d 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	83 ec 08             	sub    esp,0x8
c0012f45:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012f4c:	50                   	push   eax
c0012f4d:	e8 d1 4f 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	8d 76 00             	lea    esi,[esi+0x0]
c0012f58:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012f60:	0f 84 be fe ff ff    	je     c0012e24 <ACPI::open(int, int, void*)+0x188>
c0012f66:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012f6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f6f:	83 c0 08             	add    eax,0x8
c0012f72:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f74:	83 ec 0c             	sub    esp,0xc
c0012f77:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f7e:	ff d0                	call   eax
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	e9 9c fe ff ff       	jmp    c0012e24 <ACPI::open(int, int, void*)+0x188>
c0012f88:	83 ec 0c             	sub    esp,0xc
c0012f8b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f92:	50                   	push   eax
c0012f93:	e8 20 00 01 00       	call   c0022fb8 <LinkedList<Device>::~LinkedList()>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c0012fa1:	83 ec 08             	sub    esp,0x8
c0012fa4:	6a 01                	push   0x1
c0012fa6:	68 82 57 02 c0       	push   0xc0025782
c0012fab:	e8 42 4d 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	83 ec 08             	sub    esp,0x8
c0012fb6:	53                   	push   ebx
c0012fb7:	50                   	push   eax
c0012fb8:	e8 66 4f 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0012fbd:	83 c4 10             	add    esp,0x10
c0012fc0:	8b 1d 68 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028268
c0012fc6:	83 ec 08             	sub    esp,0x8
c0012fc9:	6a 01                	push   0x1
c0012fcb:	68 9f 57 02 c0       	push   0xc002579f
c0012fd0:	e8 1d 4d 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	83 ec 08             	sub    esp,0x8
c0012fdb:	53                   	push   ebx
c0012fdc:	50                   	push   eax
c0012fdd:	e8 41 4f 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0012fe2:	83 c4 10             	add    esp,0x10
c0012fe5:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0012fea:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ff0:	83 e0 04             	and    eax,0x4
c0012ff3:	84 c0                	test   al,al
c0012ff5:	0f 84 15 01 00 00    	je     c0013110 <ACPI::open(int, int, void*)+0x474>
c0012ffb:	83 ec 0c             	sub    esp,0xc
c0012ffe:	68 bc 57 02 c0       	push   0xc00257bc
c0013003:	e8 91 6d ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0013016:	83 ec 0c             	sub    esp,0xc
c0013019:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0013020:	e8 1a 6d ff ff       	call   c0009d3f <malloc>
c0013025:	83 c4 10             	add    esp,0x10
c0013028:	89 c3                	mov    ebx,eax
c001302a:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c001302f:	83 ec 04             	sub    esp,0x4
c0013032:	50                   	push   eax
c0013033:	68 d9 57 02 c0       	push   0xc00257d9
c0013038:	53                   	push   ebx
c0013039:	e8 78 a5 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c001303e:	83 c4 10             	add    esp,0x10
c0013041:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0013048:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013050:	74 1a                	je     c001306c <ACPI::open(int, int, void*)+0x3d0>
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001305c:	e8 9d a8 ff ff       	call   c000d8fe <File::exists()>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	84 c0                	test   al,al
c0013066:	74 04                	je     c001306c <ACPI::open(int, int, void*)+0x3d0>
c0013068:	b0 01                	mov    al,0x1
c001306a:	eb 04                	jmp    c0013070 <ACPI::open(int, int, void*)+0x3d4>
c001306c:	b0 00                	mov    al,0x0
c001306e:	66 90                	xchg   ax,ax
c0013070:	84 c0                	test   al,al
c0013072:	74 28                	je     c001309c <ACPI::open(int, int, void*)+0x400>
c0013074:	83 ec 08             	sub    esp,0x8
c0013077:	6a 01                	push   0x1
c0013079:	68 d9 57 02 c0       	push   0xc00257d9
c001307e:	e8 6f 4c 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	83 ec 08             	sub    esp,0x8
c0013089:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0013090:	50                   	push   eax
c0013091:	e8 8d 4e 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	8d 76 00             	lea    esi,[esi+0x0]
c001309c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00130a4:	74 2a                	je     c00130d0 <ACPI::open(int, int, void*)+0x434>
c00130a6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00130ae:	74 20                	je     c00130d0 <ACPI::open(int, int, void*)+0x434>
c00130b0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00130b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00130b9:	83 c0 08             	add    eax,0x8
c00130bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00130be:	83 ec 0c             	sub    esp,0xc
c00130c1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00130c8:	ff d0                	call   eax
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	8d 76 00             	lea    esi,[esi+0x0]
c00130d0:	a1 c8 8a 02 c0       	mov    eax,ds:0xc0028ac8
c00130d5:	83 ec 08             	sub    esp,0x8
c00130d8:	68 f6 57 02 c0       	push   0xc00257f6
c00130dd:	50                   	push   eax
c00130de:	e8 e1 ee ff ff       	call   c0011fc4 <findDataTable(unsigned char*, char*)>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00130ed:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00130f5:	74 19                	je     c0013110 <ACPI::open(int, int, void*)+0x474>
c00130f7:	83 ec 08             	sub    esp,0x8
c00130fa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013101:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013108:	e8 0b fb ff ff       	call   c0012c18 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	b8 00 00 00 00       	mov    eax,0x0
c0013115:	81 c4 70 01 00 00    	add    esp,0x170
c001311b:	5b                   	pop    ebx
c001311c:	5e                   	pop    esi
c001311d:	5f                   	pop    edi
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <CPU::close(int, int, void*)>:
c0013120:	31 c0                	xor    eax,eax
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0013124:	55                   	push   ebp
c0013125:	57                   	push   edi
c0013126:	56                   	push   esi
c0013127:	53                   	push   ebx
c0013128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001312c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013130:	89 ce                	mov    esi,ecx
c0013132:	89 d5                	mov    ebp,edx
c0013134:	80 f9 04             	cmp    cl,0x4
c0013137:	75 28                	jne    c0013161 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0013139:	8d 42 f9             	lea    eax,[edx-0x7]
c001313c:	3c 03                	cmp    al,0x3
c001313e:	0f 86 63 01 00 00    	jbe    c00132a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013144:	80 fa 03             	cmp    dl,0x3
c0013147:	0f 84 5a 01 00 00    	je     c00132a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001314d:	8d 7a f2             	lea    edi,[edx-0xe]
c0013150:	b8 30 7b 02 c0       	mov    eax,0xc0027b30
c0013155:	89 fb                	mov    ebx,edi
c0013157:	80 fb 01             	cmp    bl,0x1
c001315a:	77 4e                	ja     c00131aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001315c:	e9 52 01 00 00       	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013161:	80 f9 05             	cmp    cl,0x5
c0013164:	75 4d                	jne    c00131b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0013166:	b8 40 7b 02 c0       	mov    eax,0xc0027b40
c001316b:	80 fa 03             	cmp    dl,0x3
c001316e:	0f 86 3f 01 00 00    	jbe    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013174:	8d 7a fa             	lea    edi,[edx-0x6]
c0013177:	b8 50 7b 02 c0       	mov    eax,0xc0027b50
c001317c:	89 fb                	mov    ebx,edi
c001317e:	80 fb 01             	cmp    bl,0x1
c0013181:	0f 86 2c 01 00 00    	jbe    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013187:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c001318c:	80 fa 08             	cmp    dl,0x8
c001318f:	0f 84 1e 01 00 00    	je     c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013195:	89 d7                	mov    edi,edx
c0013197:	b8 70 7b 02 c0       	mov    eax,0xc0027b70
c001319c:	83 e7 fb             	and    edi,0xfffffffb
c001319f:	89 fb                	mov    ebx,edi
c00131a1:	80 fb 09             	cmp    bl,0x9
c00131a4:	0f 84 09 01 00 00    	je     c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131aa:	31 c0                	xor    eax,eax
c00131ac:	89 eb                	mov    ebx,ebp
c00131ae:	0f b6 fb             	movzx  edi,bl
c00131b1:	eb 30                	jmp    c00131e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00131b3:	31 c0                	xor    eax,eax
c00131b5:	80 f9 06             	cmp    cl,0x6
c00131b8:	75 f2                	jne    c00131ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00131ba:	80 fa 0a             	cmp    dl,0xa
c00131bd:	77 ed                	ja     c00131ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00131bf:	bf de 05 00 00       	mov    edi,0x5de
c00131c4:	0f a3 d7             	bt     edi,edx
c00131c7:	73 e3                	jae    c00131ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00131c9:	b8 80 7b 02 c0       	mov    eax,0xc0027b80
c00131ce:	e9 e0 00 00 00       	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131d3:	39 c7                	cmp    edi,eax
c00131d5:	0f 84 d3 00 00 00    	je     c00132ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00131db:	40                   	inc    eax
c00131dc:	3d d0 00 00 00       	cmp    eax,0xd0
c00131e1:	74 09                	je     c00131ec <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00131e3:	89 f3                	mov    ebx,esi
c00131e5:	80 fb 0f             	cmp    bl,0xf
c00131e8:	75 f1                	jne    c00131db <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00131ea:	eb e7                	jmp    c00131d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00131ec:	80 f9 10             	cmp    cl,0x10
c00131ef:	75 14                	jne    c0013205 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00131f1:	8d 42 fc             	lea    eax,[edx-0x4]
c00131f4:	83 e0 fb             	and    eax,0xfffffffb
c00131f7:	3c 02                	cmp    al,0x2
c00131f9:	76 34                	jbe    c001322f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00131fb:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013200:	80 fa 02             	cmp    dl,0x2
c0013203:	eb 24                	jmp    c0013229 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0013205:	80 f9 11             	cmp    cl,0x11
c0013208:	75 13                	jne    c001321d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001320a:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c001320f:	80 fa 03             	cmp    dl,0x3
c0013212:	0f 85 9b 00 00 00    	jne    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013218:	e9 91 00 00 00       	jmp    c00132ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001321d:	80 f9 12             	cmp    cl,0x12
c0013220:	75 14                	jne    c0013236 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0013222:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013227:	fe ca                	dec    dl
c0013229:	0f 85 84 00 00 00    	jne    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001322f:	b8 a0 7b 02 c0       	mov    eax,0xc0027ba0
c0013234:	eb 7d                	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013236:	80 f9 14             	cmp    cl,0x14
c0013239:	75 12                	jne    c001324d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001323b:	4a                   	dec    edx
c001323c:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013241:	80 fa 01             	cmp    dl,0x1
c0013244:	77 6d                	ja     c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013246:	b8 b0 7b 02 c0       	mov    eax,0xc0027bb0
c001324b:	eb 66                	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001324d:	80 f9 15             	cmp    cl,0x15
c0013250:	75 31                	jne    c0013283 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0013252:	b8 c0 7b 02 c0       	mov    eax,0xc0027bc0
c0013257:	80 fa 01             	cmp    dl,0x1
c001325a:	74 57                	je     c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001325c:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013261:	80 fa 13             	cmp    dl,0x13
c0013264:	76 0c                	jbe    c0013272 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0013266:	80 fa 30             	cmp    dl,0x30
c0013269:	75 48                	jne    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001326b:	b8 e0 7b 02 c0       	mov    eax,0xc0027be0
c0013270:	eb 41                	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013272:	b9 04 00 09 00       	mov    ecx,0x90004
c0013277:	0f a3 d1             	bt     ecx,edx
c001327a:	73 37                	jae    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001327c:	b8 d0 7b 02 c0       	mov    eax,0xc0027bd0
c0013281:	eb 30                	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013283:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013288:	80 f9 16             	cmp    cl,0x16
c001328b:	75 26                	jne    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001328d:	b8 f0 7b 02 c0       	mov    eax,0xc0027bf0
c0013292:	84 d2                	test   dl,dl
c0013294:	74 1d                	je     c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013296:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c001329b:	80 fa 30             	cmp    dl,0x30
c001329e:	75 13                	jne    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132a0:	b8 00 7c 02 c0       	mov    eax,0xc0027c00
c00132a5:	eb 0c                	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132a7:	b8 20 7b 02 c0       	mov    eax,0xc0027b20
c00132ac:	eb 05                	jmp    c00132b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132ae:	b8 90 7b 02 c0       	mov    eax,0xc0027b90
c00132b3:	5b                   	pop    ebx
c00132b4:	5e                   	pop    esi
c00132b5:	5f                   	pop    edi
c00132b6:	5d                   	pop    ebp
c00132b7:	c3                   	ret    

c00132b8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00132b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132c0:	80 f9 04             	cmp    cl,0x4
c00132c3:	75 6b                	jne    c0013330 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00132c5:	b8 80 79 02 c0       	mov    eax,0xc0027980
c00132ca:	80 fa 01             	cmp    dl,0x1
c00132cd:	0f 86 92 02 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132d3:	b8 90 79 02 c0       	mov    eax,0xc0027990
c00132d8:	80 fa 02             	cmp    dl,0x2
c00132db:	0f 84 84 02 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132e1:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c00132e6:	80 fa 03             	cmp    dl,0x3
c00132e9:	0f 84 76 02 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132ef:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c00132f4:	80 fa 04             	cmp    dl,0x4
c00132f7:	0f 84 68 02 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132fd:	b8 c0 79 02 c0       	mov    eax,0xc00279c0
c0013302:	80 fa 05             	cmp    dl,0x5
c0013305:	0f 84 5a 02 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001330b:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0013310:	80 fa 07             	cmp    dl,0x7
c0013313:	0f 84 4c 02 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013319:	83 ea 08             	sub    edx,0x8
c001331c:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013321:	80 fa 01             	cmp    dl,0x1
c0013324:	0f 87 3b 02 00 00    	ja     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001332a:	b8 d0 79 02 c0       	mov    eax,0xc00279d0
c001332f:	c3                   	ret    
c0013330:	80 f9 05             	cmp    cl,0x5
c0013333:	75 45                	jne    c001337a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0013335:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013338:	b8 e0 79 02 c0       	mov    eax,0xc00279e0
c001333d:	80 f9 02             	cmp    cl,0x2
c0013340:	0f 86 1f 02 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013346:	80 fa 04             	cmp    dl,0x4
c0013349:	0f 84 f3 01 00 00    	je     c0013542 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001334f:	80 fa 07             	cmp    dl,0x7
c0013352:	0f 84 0d 02 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013358:	b8 f0 79 02 c0       	mov    eax,0xc00279f0
c001335d:	80 fa 08             	cmp    dl,0x8
c0013360:	0f 84 ff 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013366:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c001336b:	80 fa 09             	cmp    dl,0x9
c001336e:	0f 85 f1 01 00 00    	jne    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013374:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0013379:	c3                   	ret    
c001337a:	80 f9 06             	cmp    cl,0x6
c001337d:	0f 85 85 01 00 00    	jne    c0013508 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0013383:	b8 10 7a 02 c0       	mov    eax,0xc0027a10
c0013388:	80 fa 01             	cmp    dl,0x1
c001338b:	0f 84 d4 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013391:	8d 42 fb             	lea    eax,[edx-0x5]
c0013394:	3c 01                	cmp    al,0x1
c0013396:	0f 86 ac 01 00 00    	jbe    c0013548 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001339c:	80 fa 03             	cmp    dl,0x3
c001339f:	0f 84 a3 01 00 00    	je     c0013548 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00133a5:	8d 4a f9             	lea    ecx,[edx-0x7]
c00133a8:	b8 30 7a 02 c0       	mov    eax,0xc0027a30
c00133ad:	80 f9 01             	cmp    cl,0x1
c00133b0:	0f 86 af 01 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133b6:	80 fa 09             	cmp    dl,0x9
c00133b9:	0f 84 8f 01 00 00    	je     c001354e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00133bf:	8d 4a f6             	lea    ecx,[edx-0xa]
c00133c2:	80 f9 01             	cmp    cl,0x1
c00133c5:	0f 86 9a 01 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133cb:	b8 40 7a 02 c0       	mov    eax,0xc0027a40
c00133d0:	80 fa 0d             	cmp    dl,0xd
c00133d3:	0f 84 8c 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133d9:	b8 50 7a 02 c0       	mov    eax,0xc0027a50
c00133de:	80 fa 0e             	cmp    dl,0xe
c00133e1:	0f 84 7e 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133e7:	b8 60 7a 02 c0       	mov    eax,0xc0027a60
c00133ec:	80 fa 0f             	cmp    dl,0xf
c00133ef:	0f 84 70 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133f5:	b8 40 7a 02 c0       	mov    eax,0xc0027a40
c00133fa:	80 fa 15             	cmp    dl,0x15
c00133fd:	0f 84 62 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013403:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013406:	b8 60 7a 02 c0       	mov    eax,0xc0027a60
c001340b:	80 f9 01             	cmp    cl,0x1
c001340e:	0f 86 51 01 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013414:	80 fa 1a             	cmp    dl,0x1a
c0013417:	0f 84 37 01 00 00    	je     c0013554 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001341d:	80 fa 1c             	cmp    dl,0x1c
c0013420:	0f 84 34 01 00 00    	je     c001355a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0013426:	80 fa 1d             	cmp    dl,0x1d
c0013429:	0f 84 36 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001342f:	b8 90 7a 02 c0       	mov    eax,0xc0027a90
c0013434:	80 fa 25             	cmp    dl,0x25
c0013437:	0f 84 28 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001343d:	8d 4a da             	lea    ecx,[edx-0x26]
c0013440:	b8 80 7a 02 c0       	mov    eax,0xc0027a80
c0013445:	80 f9 01             	cmp    cl,0x1
c0013448:	0f 86 17 01 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001344e:	b8 a0 7a 02 c0       	mov    eax,0xc0027aa0
c0013453:	80 fa 2a             	cmp    dl,0x2a
c0013456:	0f 84 09 01 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001345c:	b8 90 7a 02 c0       	mov    eax,0xc0027a90
c0013461:	80 fa 2c             	cmp    dl,0x2c
c0013464:	0f 84 fb 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001346a:	b8 a0 7a 02 c0       	mov    eax,0xc0027aa0
c001346f:	80 fa 2d             	cmp    dl,0x2d
c0013472:	0f 84 ed 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013478:	b8 70 7a 02 c0       	mov    eax,0xc0027a70
c001347d:	80 fa 2e             	cmp    dl,0x2e
c0013480:	0f 84 df 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013486:	b8 90 7a 02 c0       	mov    eax,0xc0027a90
c001348b:	80 fa 2f             	cmp    dl,0x2f
c001348e:	0f 84 d1 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013494:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013497:	b8 80 7a 02 c0       	mov    eax,0xc0027a80
c001349c:	80 f9 01             	cmp    cl,0x1
c001349f:	0f 86 c0 00 00 00    	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a5:	b8 b0 7a 02 c0       	mov    eax,0xc0027ab0
c00134aa:	80 fa 37             	cmp    dl,0x37
c00134ad:	0f 84 b2 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b3:	b8 c0 7a 02 c0       	mov    eax,0xc0027ac0
c00134b8:	80 fa 3a             	cmp    dl,0x3a
c00134bb:	0f 84 a4 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134c1:	b8 d0 7a 02 c0       	mov    eax,0xc0027ad0
c00134c6:	80 fa 3c             	cmp    dl,0x3c
c00134c9:	0f 84 96 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134cf:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c00134d4:	80 fa 3d             	cmp    dl,0x3d
c00134d7:	0f 84 88 00 00 00    	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134dd:	b8 c0 7a 02 c0       	mov    eax,0xc0027ac0
c00134e2:	80 fa 3e             	cmp    dl,0x3e
c00134e5:	74 7e                	je     c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134e7:	8d 42 bb             	lea    eax,[edx-0x45]
c00134ea:	3c 01                	cmp    al,0x1
c00134ec:	76 72                	jbe    c0013560 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00134ee:	80 fa 3f             	cmp    dl,0x3f
c00134f1:	74 6d                	je     c0013560 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00134f3:	80 fa 4a             	cmp    dl,0x4a
c00134f6:	74 0a                	je     c0013502 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00134f8:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c00134fd:	80 fa 4d             	cmp    dl,0x4d
c0013500:	75 63                	jne    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013502:	b8 b0 7a 02 c0       	mov    eax,0xc0027ab0
c0013507:	c3                   	ret    
c0013508:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c001350d:	80 f9 0b             	cmp    cl,0xb
c0013510:	75 0a                	jne    c001351c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013512:	fe ca                	dec    dl
c0013514:	75 4f                	jne    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013516:	b8 f0 7a 02 c0       	mov    eax,0xc0027af0
c001351b:	c3                   	ret    
c001351c:	80 f9 0f             	cmp    cl,0xf
c001351f:	75 44                	jne    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013521:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0013526:	80 fa 02             	cmp    dl,0x2
c0013529:	76 3a                	jbe    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001352b:	8d 42 fd             	lea    eax,[edx-0x3]
c001352e:	3c 01                	cmp    al,0x1
c0013530:	76 0a                	jbe    c001353c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013532:	b8 31 5b 02 c0       	mov    eax,0xc0025b31
c0013537:	80 fa 06             	cmp    dl,0x6
c001353a:	75 29                	jne    c0013565 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001353c:	b8 10 7b 02 c0       	mov    eax,0xc0027b10
c0013541:	c3                   	ret    
c0013542:	b8 f0 79 02 c0       	mov    eax,0xc00279f0
c0013547:	c3                   	ret    
c0013548:	b8 20 7a 02 c0       	mov    eax,0xc0027a20
c001354d:	c3                   	ret    
c001354e:	b8 40 7a 02 c0       	mov    eax,0xc0027a40
c0013553:	c3                   	ret    
c0013554:	b8 70 7a 02 c0       	mov    eax,0xc0027a70
c0013559:	c3                   	ret    
c001355a:	b8 80 7a 02 c0       	mov    eax,0xc0027a80
c001355f:	c3                   	ret    
c0013560:	b8 d0 7a 02 c0       	mov    eax,0xc0027ad0
c0013565:	c3                   	ret    

c0013566 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013566:	60                   	pusha  
c0013567:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001356b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001356f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013573:	9c                   	pushf  
c0013574:	fa                   	cli    
c0013575:	0f 09                	wbinvd 
c0013577:	0f 30                	wrmsr  
c0013579:	9d                   	popf   
c001357a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001357e:	89 02                	mov    DWORD PTR [edx],eax
c0013580:	61                   	popa   
c0013581:	c3                   	ret    

c0013582 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013582:	60                   	pusha  
c0013583:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013587:	9c                   	pushf  
c0013588:	fa                   	cli    
c0013589:	0f 09                	wbinvd 
c001358b:	31 c0                	xor    eax,eax
c001358d:	31 d2                	xor    edx,edx
c001358f:	0f 32                	rdmsr  
c0013591:	9d                   	popf   
c0013592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013596:	89 02                	mov    DWORD PTR [edx],eax
c0013598:	61                   	popa   
c0013599:	c3                   	ret    

c001359a <CPU::AMD_K6_writeback(int, int, int)>:
c001359a:	56                   	push   esi
c001359b:	53                   	push   ebx
c001359c:	83 ec 10             	sub    esp,0x10
c001359f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135a3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00135a8:	75 5d                	jne    c0013607 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00135aa:	83 f8 08             	cmp    eax,0x8
c00135ad:	75 09                	jne    c00135b8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00135af:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00135b4:	7e 13                	jle    c00135c9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00135b6:	eb 30                	jmp    c00135e8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00135b8:	83 f8 06             	cmp    eax,0x6
c00135bb:	7c 4a                	jl     c0013607 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00135bd:	83 f8 07             	cmp    eax,0x7
c00135c0:	7e 07                	jle    c00135c9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00135c2:	83 f8 09             	cmp    eax,0x9
c00135c5:	74 21                	je     c00135e8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00135c7:	eb 3e                	jmp    c0013607 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00135c9:	89 e6                	mov    esi,esp
c00135cb:	8b 1d 8c 82 02 c0    	mov    ebx,DWORD PTR ds:0xc002828c
c00135d1:	56                   	push   esi
c00135d2:	c1 eb 15             	shr    ebx,0x15
c00135d5:	68 82 00 00 c0       	push   0xc0000082
c00135da:	83 e3 7e             	and    ebx,0x7e
c00135dd:	e8 a0 ff ff ff       	call   c0013582 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00135e2:	56                   	push   esi
c00135e3:	6a 00                	push   0x0
c00135e5:	53                   	push   ebx
c00135e6:	eb 12                	jmp    c00135fa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00135e8:	89 e3                	mov    ebx,esp
c00135ea:	53                   	push   ebx
c00135eb:	68 82 00 00 c0       	push   0xc0000082
c00135f0:	e8 8d ff ff ff       	call   c0013582 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00135f5:	53                   	push   ebx
c00135f6:	6a 00                	push   0x0
c00135f8:	6a 00                	push   0x0
c00135fa:	68 82 00 00 c0       	push   0xc0000082
c00135ff:	e8 62 ff ff ff       	call   c0013566 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013604:	83 c4 18             	add    esp,0x18
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	5b                   	pop    ebx
c001360b:	5e                   	pop    esi
c001360c:	c3                   	ret    
c001360d:	90                   	nop

c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001360e:	55                   	push   ebp
c001360f:	57                   	push   edi
c0013610:	56                   	push   esi
c0013611:	53                   	push   ebx
c0013612:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013616:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001361a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001361e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013622:	39 05 20 7c 02 c0    	cmp    DWORD PTR ds:0xc0027c20,eax
c0013628:	75 23                	jne    c001364d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001362a:	a1 2c 8d 02 c0       	mov    eax,ds:0xc0028d2c
c001362f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013633:	89 06                	mov    DWORD PTR [esi],eax
c0013635:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c001363a:	89 07                	mov    DWORD PTR [edi],eax
c001363c:	a1 24 8d 02 c0       	mov    eax,ds:0xc0028d24
c0013641:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013644:	a1 20 8d 02 c0       	mov    eax,ds:0xc0028d20
c0013649:	89 02                	mov    DWORD PTR [edx],eax
c001364b:	eb 3f                	jmp    c001368c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001364d:	31 c9                	xor    ecx,ecx
c001364f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013653:	0f a2                	cpuid  
c0013655:	89 06                	mov    DWORD PTR [esi],eax
c0013657:	89 1f                	mov    DWORD PTR [edi],ebx
c0013659:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001365d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013660:	89 10                	mov    DWORD PTR [eax],edx
c0013662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013666:	a3 20 7c 02 c0       	mov    ds:0xc0027c20,eax
c001366b:	8b 06                	mov    eax,DWORD PTR [esi]
c001366d:	a3 2c 8d 02 c0       	mov    ds:0xc0028d2c,eax
c0013672:	8b 07                	mov    eax,DWORD PTR [edi]
c0013674:	a3 28 8d 02 c0       	mov    ds:0xc0028d28,eax
c0013679:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001367c:	a3 24 8d 02 c0       	mov    ds:0xc0028d24,eax
c0013681:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013685:	8b 00                	mov    eax,DWORD PTR [eax]
c0013687:	a3 20 8d 02 c0       	mov    ds:0xc0028d20,eax
c001368c:	5b                   	pop    ebx
c001368d:	5e                   	pop    esi
c001368e:	5f                   	pop    edi
c001368f:	5d                   	pop    ebp
c0013690:	c3                   	ret    
c0013691:	90                   	nop

c0013692 <CPU::cpuidCheckEDX(unsigned int)>:
c0013692:	83 ec 10             	sub    esp,0x10
c0013695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013699:	50                   	push   eax
c001369a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001369e:	50                   	push   eax
c001369f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136a3:	50                   	push   eax
c00136a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136a8:	50                   	push   eax
c00136a9:	6a 01                	push   0x1
c00136ab:	e8 5e ff ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00136b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136b4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00136b8:	0f 95 c0             	setne  al
c00136bb:	83 c4 24             	add    esp,0x24
c00136be:	c3                   	ret    
c00136bf:	90                   	nop

c00136c0 <CPU::cpuidCheckECX(unsigned int)>:
c00136c0:	83 ec 10             	sub    esp,0x10
c00136c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136c7:	50                   	push   eax
c00136c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136cc:	50                   	push   eax
c00136cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136d1:	50                   	push   eax
c00136d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136d6:	50                   	push   eax
c00136d7:	6a 01                	push   0x1
c00136d9:	e8 30 ff ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00136de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136e2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00136e6:	0f 95 c0             	setne  al
c00136e9:	83 c4 24             	add    esp,0x24
c00136ec:	c3                   	ret    
c00136ed:	90                   	nop

c00136ee <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00136ee:	83 ec 10             	sub    esp,0x10
c00136f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136f5:	50                   	push   eax
c00136f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136fa:	50                   	push   eax
c00136fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136ff:	50                   	push   eax
c0013700:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013704:	50                   	push   eax
c0013705:	6a 07                	push   0x7
c0013707:	e8 02 ff ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001370c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013710:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013714:	0f 95 c0             	setne  al
c0013717:	83 c4 24             	add    esp,0x24
c001371a:	c3                   	ret    
c001371b:	90                   	nop

c001371c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001371c:	83 ec 10             	sub    esp,0x10
c001371f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013723:	50                   	push   eax
c0013724:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013728:	50                   	push   eax
c0013729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001372d:	50                   	push   eax
c001372e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013732:	50                   	push   eax
c0013733:	6a 07                	push   0x7
c0013735:	e8 d4 fe ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001373a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001373e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013742:	0f 95 c0             	setne  al
c0013745:	83 c4 24             	add    esp,0x24
c0013748:	c3                   	ret    
c0013749:	90                   	nop

c001374a <CPU::CPU()>:
c001374a:	83 ec 0c             	sub    esp,0xc
c001374d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013751:	83 ec 08             	sub    esp,0x8
c0013754:	68 31 5b 02 c0       	push   0xc0025b31
c0013759:	50                   	push   eax
c001375a:	e8 a3 af ff ff       	call   c000e702 <Device::Device(char const*)>
c001375f:	83 c4 10             	add    esp,0x10
c0013762:	ba 94 5d 02 c0       	mov    edx,0xc0025d94
c0013767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001376b:	89 10                	mov    DWORD PTR [eax],edx
c001376d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013771:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001377b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001377f:	05 78 01 00 00       	add    eax,0x178
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	50                   	push   eax
c0013788:	e8 d3 5d ff ff       	call   c0009560 <GDT::GDT()>
c001378d:	83 c4 10             	add    esp,0x10
c0013790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013794:	05 7c 09 00 00       	add    eax,0x97c
c0013799:	83 ec 0c             	sub    esp,0xc
c001379c:	50                   	push   eax
c001379d:	e8 8a 60 ff ff       	call   c000982c <IDT::IDT()>
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a9:	05 7c 11 00 00       	add    eax,0x117c
c00137ae:	83 ec 0c             	sub    esp,0xc
c00137b1:	50                   	push   eax
c00137b2:	e8 7d 7e ff ff       	call   c000b634 <TSS::TSS()>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137be:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00137c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00137d3:	90                   	nop
c00137d4:	83 c4 0c             	add    esp,0xc
c00137d7:	c3                   	ret    

c00137d8 <CPU::displayFeatures()>:
c00137d8:	53                   	push   ebx
c00137d9:	83 ec 10             	sub    esp,0x10
c00137dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137e0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00137e6:	68 28 58 02 c0       	push   0xc0025828
c00137eb:	e8 5b 98 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00137f0:	58                   	pop    eax
c00137f1:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00137f7:	5a                   	pop    edx
c00137f8:	50                   	push   eax
c00137f9:	68 39 58 02 c0       	push   0xc0025839
c00137fe:	e8 48 98 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013803:	59                   	pop    ecx
c0013804:	58                   	pop    eax
c0013805:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001380b:	c1 e8 0e             	shr    eax,0xe
c001380e:	0f b6 c0             	movzx  eax,al
c0013811:	50                   	push   eax
c0013812:	68 4a 58 02 c0       	push   0xc002584a
c0013817:	e8 2f 98 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001381c:	58                   	pop    eax
c001381d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013823:	5a                   	pop    edx
c0013824:	66 c1 e8 06          	shr    ax,0x6
c0013828:	0f b6 c0             	movzx  eax,al
c001382b:	50                   	push   eax
c001382c:	68 5b 58 02 c0       	push   0xc002585b
c0013831:	e8 15 98 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013836:	c7 04 24 5b 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e5b
c001383d:	e8 09 98 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c001384a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0013851:	74 05                	je     c0013858 <CPU::displayFeatures()+0x80>
c0013853:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013858:	51                   	push   ecx
c0013859:	51                   	push   ecx
c001385a:	50                   	push   eax
c001385b:	68 6c 58 02 c0       	push   0xc002586c
c0013860:	e8 e6 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013865:	83 c4 10             	add    esp,0x10
c0013868:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c001386d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013874:	78 05                	js     c001387b <CPU::displayFeatures()+0xa3>
c0013876:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c001387b:	52                   	push   edx
c001387c:	52                   	push   edx
c001387d:	50                   	push   eax
c001387e:	68 83 58 02 c0       	push   0xc0025883
c0013883:	e8 c3 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013890:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013897:	75 05                	jne    c001389e <CPU::displayFeatures()+0xc6>
c0013899:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c001389e:	51                   	push   ecx
c001389f:	51                   	push   ecx
c00138a0:	50                   	push   eax
c00138a1:	68 9a 58 02 c0       	push   0xc002589a
c00138a6:	e8 a0 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00138b3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00138ba:	75 05                	jne    c00138c1 <CPU::displayFeatures()+0xe9>
c00138bc:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00138c1:	52                   	push   edx
c00138c2:	52                   	push   edx
c00138c3:	50                   	push   eax
c00138c4:	68 b1 58 02 c0       	push   0xc00258b1
c00138c9:	e8 7d 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00138ce:	83 c4 10             	add    esp,0x10
c00138d1:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00138d6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00138dd:	75 05                	jne    c00138e4 <CPU::displayFeatures()+0x10c>
c00138df:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00138e4:	51                   	push   ecx
c00138e5:	51                   	push   ecx
c00138e6:	50                   	push   eax
c00138e7:	68 c8 58 02 c0       	push   0xc00258c8
c00138ec:	e8 5a 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00138f1:	83 c4 10             	add    esp,0x10
c00138f4:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00138f9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013900:	75 05                	jne    c0013907 <CPU::displayFeatures()+0x12f>
c0013902:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0013907:	52                   	push   edx
c0013908:	52                   	push   edx
c0013909:	50                   	push   eax
c001390a:	68 df 58 02 c0       	push   0xc00258df
c001390f:	e8 37 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c001391c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013923:	75 05                	jne    c001392a <CPU::displayFeatures()+0x152>
c0013925:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c001392a:	51                   	push   ecx
c001392b:	51                   	push   ecx
c001392c:	50                   	push   eax
c001392d:	68 f6 58 02 c0       	push   0xc00258f6
c0013932:	e8 14 97 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013937:	83 c4 10             	add    esp,0x10
c001393a:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c001393f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013946:	75 05                	jne    c001394d <CPU::displayFeatures()+0x175>
c0013948:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c001394d:	52                   	push   edx
c001394e:	52                   	push   edx
c001394f:	50                   	push   eax
c0013950:	68 0d 59 02 c0       	push   0xc002590d
c0013955:	e8 f1 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013962:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013969:	75 05                	jne    c0013970 <CPU::displayFeatures()+0x198>
c001396b:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0013970:	51                   	push   ecx
c0013971:	51                   	push   ecx
c0013972:	50                   	push   eax
c0013973:	68 24 59 02 c0       	push   0xc0025924
c0013978:	e8 ce 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001397d:	83 c4 10             	add    esp,0x10
c0013980:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013985:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001398c:	75 05                	jne    c0013993 <CPU::displayFeatures()+0x1bb>
c001398e:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0013993:	52                   	push   edx
c0013994:	52                   	push   edx
c0013995:	50                   	push   eax
c0013996:	68 3b 59 02 c0       	push   0xc002593b
c001399b:	e8 ab 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00139a0:	83 c4 10             	add    esp,0x10
c00139a3:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00139a8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00139af:	75 05                	jne    c00139b6 <CPU::displayFeatures()+0x1de>
c00139b1:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00139b6:	51                   	push   ecx
c00139b7:	51                   	push   ecx
c00139b8:	50                   	push   eax
c00139b9:	68 52 59 02 c0       	push   0xc0025952
c00139be:	e8 88 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00139c3:	83 c4 10             	add    esp,0x10
c00139c6:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00139cb:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00139d2:	75 05                	jne    c00139d9 <CPU::displayFeatures()+0x201>
c00139d4:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00139d9:	52                   	push   edx
c00139da:	52                   	push   edx
c00139db:	50                   	push   eax
c00139dc:	68 69 59 02 c0       	push   0xc0025969
c00139e1:	e8 65 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00139e6:	83 c4 10             	add    esp,0x10
c00139e9:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c00139ee:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00139f5:	75 05                	jne    c00139fc <CPU::displayFeatures()+0x224>
c00139f7:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c00139fc:	51                   	push   ecx
c00139fd:	51                   	push   ecx
c00139fe:	50                   	push   eax
c00139ff:	68 80 59 02 c0       	push   0xc0025980
c0013a04:	e8 42 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013a09:	83 c4 10             	add    esp,0x10
c0013a0c:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013a11:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013a18:	78 05                	js     c0013a1f <CPU::displayFeatures()+0x247>
c0013a1a:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0013a1f:	52                   	push   edx
c0013a20:	52                   	push   edx
c0013a21:	50                   	push   eax
c0013a22:	68 97 59 02 c0       	push   0xc0025997
c0013a27:	e8 1f 96 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013a2c:	83 c4 10             	add    esp,0x10
c0013a2f:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013a34:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013a3b:	75 05                	jne    c0013a42 <CPU::displayFeatures()+0x26a>
c0013a3d:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0013a42:	51                   	push   ecx
c0013a43:	51                   	push   ecx
c0013a44:	50                   	push   eax
c0013a45:	68 ae 59 02 c0       	push   0xc00259ae
c0013a4a:	e8 fc 95 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013a4f:	83 c4 10             	add    esp,0x10
c0013a52:	b8 41 3e 02 c0       	mov    eax,0xc0023e41
c0013a57:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013a5e:	75 05                	jne    c0013a65 <CPU::displayFeatures()+0x28d>
c0013a60:	b8 45 3e 02 c0       	mov    eax,0xc0023e45
c0013a65:	52                   	push   edx
c0013a66:	52                   	push   edx
c0013a67:	50                   	push   eax
c0013a68:	68 c5 59 02 c0       	push   0xc00259c5
c0013a6d:	e8 d9 95 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0013a72:	83 c4 18             	add    esp,0x18
c0013a75:	5b                   	pop    ebx
c0013a76:	c3                   	ret    
c0013a77:	90                   	nop

c0013a78 <CPU::detectFeatures()>:
c0013a78:	55                   	push   ebp
c0013a79:	57                   	push   edi
c0013a7a:	56                   	push   esi
c0013a7b:	53                   	push   ebx
c0013a7c:	83 ec 50             	sub    esp,0x50
c0013a7f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013a83:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013a8d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013a94:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013a9a:	6a 0d                	push   0xd
c0013a9c:	6a 00                	push   0x0
c0013a9e:	55                   	push   ebp
c0013a9f:	e8 e0 cb fe ff       	call   c0000684 <memset>
c0013aa4:	83 c4 10             	add    esp,0x10
c0013aa7:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0013aac:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013ab3:	0f 84 22 09 00 00    	je     c00143db <CPU::detectFeatures()+0x963>
c0013ab9:	83 ec 0c             	sub    esp,0xc
c0013abc:	89 ef                	mov    edi,ebp
c0013abe:	6a 10                	push   0x10
c0013ac0:	e8 cd fb ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013ac5:	83 e0 01             	and    eax,0x1
c0013ac8:	8d 14 00             	lea    edx,[eax+eax*1]
c0013acb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ad1:	83 e0 fd             	and    eax,0xfffffffd
c0013ad4:	09 d0                	or     eax,edx
c0013ad6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013adc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013ae3:	e8 aa fb ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013ae8:	83 e0 01             	and    eax,0x1
c0013aeb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013af2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013af8:	83 e0 fb             	and    eax,0xfffffffb
c0013afb:	09 d0                	or     eax,edx
c0013afd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b03:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013b0a:	e8 83 fb ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013b0f:	83 e0 01             	and    eax,0x1
c0013b12:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013b19:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b1f:	83 e0 f7             	and    eax,0xfffffff7
c0013b22:	09 d0                	or     eax,edx
c0013b24:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b2a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013b31:	e8 5c fb ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013b36:	83 e0 01             	and    eax,0x1
c0013b39:	c1 e0 04             	shl    eax,0x4
c0013b3c:	88 c2                	mov    dl,al
c0013b3e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b44:	83 e0 ef             	and    eax,0xffffffef
c0013b47:	09 d0                	or     eax,edx
c0013b49:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b4f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013b56:	e8 37 fb ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013b5b:	83 e0 01             	and    eax,0x1
c0013b5e:	c1 e0 05             	shl    eax,0x5
c0013b61:	88 c2                	mov    dl,al
c0013b63:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b69:	83 e0 df             	and    eax,0xffffffdf
c0013b6c:	09 d0                	or     eax,edx
c0013b6e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b74:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013b7b:	e8 12 fb ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013b80:	83 e0 01             	and    eax,0x1
c0013b83:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b86:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013b8c:	83 e0 fd             	and    eax,0xfffffffd
c0013b8f:	09 d0                	or     eax,edx
c0013b91:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013b97:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013b9e:	e8 ef fa ff ff       	call   c0013692 <CPU::cpuidCheckEDX(unsigned int)>
c0013ba3:	83 e0 01             	and    eax,0x1
c0013ba6:	c1 e0 06             	shl    eax,0x6
c0013ba9:	88 c2                	mov    dl,al
c0013bab:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013bb1:	83 e0 bf             	and    eax,0xffffffbf
c0013bb4:	09 d0                	or     eax,edx
c0013bb6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013bbc:	58                   	pop    eax
c0013bbd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bc1:	50                   	push   eax
c0013bc2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bc6:	50                   	push   eax
c0013bc7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013bcb:	56                   	push   esi
c0013bcc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bd0:	50                   	push   eax
c0013bd1:	6a 00                	push   0x0
c0013bd3:	e8 36 fa ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013bd8:	b8 04 00 00 00       	mov    eax,0x4
c0013bdd:	89 c1                	mov    ecx,eax
c0013bdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013be1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013be7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013beb:	89 c1                	mov    ecx,eax
c0013bed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bef:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013bf5:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013bf9:	89 c1                	mov    ecx,eax
c0013bfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bfd:	83 c4 18             	add    esp,0x18
c0013c00:	68 dc 59 02 c0       	push   0xc00259dc
c0013c05:	55                   	push   ebp
c0013c06:	e8 c1 cb fe ff       	call   c00007cc <strcmp>
c0013c0b:	83 c4 10             	add    esp,0x10
c0013c0e:	85 c0                	test   eax,eax
c0013c10:	75 0f                	jne    c0013c21 <CPU::detectFeatures()+0x1a9>
c0013c12:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013c1c:	e9 22 02 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013c21:	50                   	push   eax
c0013c22:	50                   	push   eax
c0013c23:	68 e9 59 02 c0       	push   0xc00259e9
c0013c28:	55                   	push   ebp
c0013c29:	e8 9e cb fe ff       	call   c00007cc <strcmp>
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	85 c0                	test   eax,eax
c0013c33:	74 dd                	je     c0013c12 <CPU::detectFeatures()+0x19a>
c0013c35:	50                   	push   eax
c0013c36:	50                   	push   eax
c0013c37:	68 f6 59 02 c0       	push   0xc00259f6
c0013c3c:	55                   	push   ebp
c0013c3d:	e8 8a cb fe ff       	call   c00007cc <strcmp>
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	85 c0                	test   eax,eax
c0013c47:	74 2a                	je     c0013c73 <CPU::detectFeatures()+0x1fb>
c0013c49:	50                   	push   eax
c0013c4a:	50                   	push   eax
c0013c4b:	68 03 5a 02 c0       	push   0xc0025a03
c0013c50:	55                   	push   ebp
c0013c51:	e8 76 cb fe ff       	call   c00007cc <strcmp>
c0013c56:	83 c4 10             	add    esp,0x10
c0013c59:	85 c0                	test   eax,eax
c0013c5b:	74 16                	je     c0013c73 <CPU::detectFeatures()+0x1fb>
c0013c5d:	50                   	push   eax
c0013c5e:	50                   	push   eax
c0013c5f:	68 10 5a 02 c0       	push   0xc0025a10
c0013c64:	55                   	push   ebp
c0013c65:	e8 62 cb fe ff       	call   c00007cc <strcmp>
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	85 c0                	test   eax,eax
c0013c6f:	74 48                	je     c0013cb9 <CPU::detectFeatures()+0x241>
c0013c71:	eb 0f                	jmp    c0013c82 <CPU::detectFeatures()+0x20a>
c0013c73:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013c7d:	e9 c1 01 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013c82:	50                   	push   eax
c0013c83:	50                   	push   eax
c0013c84:	68 1d 5a 02 c0       	push   0xc0025a1d
c0013c89:	55                   	push   ebp
c0013c8a:	e8 3d cb fe ff       	call   c00007cc <strcmp>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	85 c0                	test   eax,eax
c0013c94:	74 23                	je     c0013cb9 <CPU::detectFeatures()+0x241>
c0013c96:	57                   	push   edi
c0013c97:	57                   	push   edi
c0013c98:	68 2a 5a 02 c0       	push   0xc0025a2a
c0013c9d:	55                   	push   ebp
c0013c9e:	e8 29 cb fe ff       	call   c00007cc <strcmp>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	85 c0                	test   eax,eax
c0013ca8:	75 1e                	jne    c0013cc8 <CPU::detectFeatures()+0x250>
c0013caa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013cb4:	e9 8a 01 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013cb9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013cc3:	e9 7b 01 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013cc8:	56                   	push   esi
c0013cc9:	56                   	push   esi
c0013cca:	68 37 5a 02 c0       	push   0xc0025a37
c0013ccf:	55                   	push   ebp
c0013cd0:	e8 f7 ca fe ff       	call   c00007cc <strcmp>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	85 c0                	test   eax,eax
c0013cda:	75 0f                	jne    c0013ceb <CPU::detectFeatures()+0x273>
c0013cdc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013ce6:	e9 58 01 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013ceb:	51                   	push   ecx
c0013cec:	51                   	push   ecx
c0013ced:	68 f6 59 02 c0       	push   0xc00259f6
c0013cf2:	55                   	push   ebp
c0013cf3:	e8 d4 ca fe ff       	call   c00007cc <strcmp>
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	85 c0                	test   eax,eax
c0013cfd:	75 0f                	jne    c0013d0e <CPU::detectFeatures()+0x296>
c0013cff:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013d09:	e9 35 01 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013d0e:	52                   	push   edx
c0013d0f:	52                   	push   edx
c0013d10:	68 44 5a 02 c0       	push   0xc0025a44
c0013d15:	55                   	push   ebp
c0013d16:	e8 b1 ca fe ff       	call   c00007cc <strcmp>
c0013d1b:	83 c4 10             	add    esp,0x10
c0013d1e:	85 c0                	test   eax,eax
c0013d20:	75 0f                	jne    c0013d31 <CPU::detectFeatures()+0x2b9>
c0013d22:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013d2c:	e9 12 01 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013d31:	50                   	push   eax
c0013d32:	50                   	push   eax
c0013d33:	68 51 5a 02 c0       	push   0xc0025a51
c0013d38:	55                   	push   ebp
c0013d39:	e8 8e ca fe ff       	call   c00007cc <strcmp>
c0013d3e:	83 c4 10             	add    esp,0x10
c0013d41:	85 c0                	test   eax,eax
c0013d43:	75 0f                	jne    c0013d54 <CPU::detectFeatures()+0x2dc>
c0013d45:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013d4f:	e9 ef 00 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013d54:	50                   	push   eax
c0013d55:	50                   	push   eax
c0013d56:	68 5e 5a 02 c0       	push   0xc0025a5e
c0013d5b:	55                   	push   ebp
c0013d5c:	e8 6b ca fe ff       	call   c00007cc <strcmp>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	85 c0                	test   eax,eax
c0013d66:	75 0f                	jne    c0013d77 <CPU::detectFeatures()+0x2ff>
c0013d68:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013d72:	e9 cc 00 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013d77:	50                   	push   eax
c0013d78:	50                   	push   eax
c0013d79:	68 6b 5a 02 c0       	push   0xc0025a6b
c0013d7e:	55                   	push   ebp
c0013d7f:	e8 48 ca fe ff       	call   c00007cc <strcmp>
c0013d84:	83 c4 10             	add    esp,0x10
c0013d87:	85 c0                	test   eax,eax
c0013d89:	75 0f                	jne    c0013d9a <CPU::detectFeatures()+0x322>
c0013d8b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013d95:	e9 a9 00 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013d9a:	50                   	push   eax
c0013d9b:	50                   	push   eax
c0013d9c:	68 78 5a 02 c0       	push   0xc0025a78
c0013da1:	55                   	push   ebp
c0013da2:	e8 25 ca fe ff       	call   c00007cc <strcmp>
c0013da7:	83 c4 10             	add    esp,0x10
c0013daa:	85 c0                	test   eax,eax
c0013dac:	75 0f                	jne    c0013dbd <CPU::detectFeatures()+0x345>
c0013dae:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013db8:	e9 86 00 00 00       	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013dbd:	50                   	push   eax
c0013dbe:	50                   	push   eax
c0013dbf:	68 85 5a 02 c0       	push   0xc0025a85
c0013dc4:	55                   	push   ebp
c0013dc5:	e8 02 ca fe ff       	call   c00007cc <strcmp>
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	85 c0                	test   eax,eax
c0013dcf:	75 0c                	jne    c0013ddd <CPU::detectFeatures()+0x365>
c0013dd1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013ddb:	eb 66                	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013ddd:	50                   	push   eax
c0013dde:	50                   	push   eax
c0013ddf:	68 92 5a 02 c0       	push   0xc0025a92
c0013de4:	55                   	push   ebp
c0013de5:	e8 e2 c9 fe ff       	call   c00007cc <strcmp>
c0013dea:	83 c4 10             	add    esp,0x10
c0013ded:	85 c0                	test   eax,eax
c0013def:	75 0c                	jne    c0013dfd <CPU::detectFeatures()+0x385>
c0013df1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013dfb:	eb 46                	jmp    c0013e43 <CPU::detectFeatures()+0x3cb>
c0013dfd:	57                   	push   edi
c0013dfe:	57                   	push   edi
c0013dff:	68 9f 5a 02 c0       	push   0xc0025a9f
c0013e04:	55                   	push   ebp
c0013e05:	e8 c2 c9 fe ff       	call   c00007cc <strcmp>
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	85 c0                	test   eax,eax
c0013e0f:	74 e0                	je     c0013df1 <CPU::detectFeatures()+0x379>
c0013e11:	56                   	push   esi
c0013e12:	56                   	push   esi
c0013e13:	68 ac 5a 02 c0       	push   0xc0025aac
c0013e18:	55                   	push   ebp
c0013e19:	e8 ae c9 fe ff       	call   c00007cc <strcmp>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	85 c0                	test   eax,eax
c0013e23:	74 cc                	je     c0013df1 <CPU::detectFeatures()+0x379>
c0013e25:	51                   	push   ecx
c0013e26:	51                   	push   ecx
c0013e27:	68 b9 5a 02 c0       	push   0xc0025ab9
c0013e2c:	55                   	push   ebp
c0013e2d:	e8 9a c9 fe ff       	call   c00007cc <strcmp>
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	85 c0                	test   eax,eax
c0013e37:	74 b8                	je     c0013df1 <CPU::detectFeatures()+0x379>
c0013e39:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013e43:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013e48:	0f 86 be 00 00 00    	jbe    c0013f0c <CPU::detectFeatures()+0x494>
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	68 80 00 00 00       	push   0x80
c0013e56:	e8 93 f8 ff ff       	call   c00136ee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e5b:	83 e0 01             	and    eax,0x1
c0013e5e:	c1 e0 06             	shl    eax,0x6
c0013e61:	88 c2                	mov    dl,al
c0013e63:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e69:	83 e0 bf             	and    eax,0xffffffbf
c0013e6c:	09 d0                	or     eax,edx
c0013e6e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e74:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013e7b:	e8 6e f8 ff ff       	call   c00136ee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e80:	83 e0 01             	and    eax,0x1
c0013e83:	c1 e0 04             	shl    eax,0x4
c0013e86:	88 c2                	mov    dl,al
c0013e88:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e8e:	83 e0 ef             	and    eax,0xffffffef
c0013e91:	09 d0                	or     eax,edx
c0013e93:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e99:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013ea0:	e8 49 f8 ff ff       	call   c00136ee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013ea5:	c1 e0 07             	shl    eax,0x7
c0013ea8:	88 c2                	mov    dl,al
c0013eaa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013eb0:	83 e0 7f             	and    eax,0x7f
c0013eb3:	09 d0                	or     eax,edx
c0013eb5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ebb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013ec2:	e8 55 f8 ff ff       	call   c001371c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013ec7:	83 e0 01             	and    eax,0x1
c0013eca:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013ed1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013ed7:	83 e0 f7             	and    eax,0xfffffff7
c0013eda:	09 d0                	or     eax,edx
c0013edc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013ee2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013ee9:	e8 2e f8 ff ff       	call   c001371c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	83 e0 01             	and    eax,0x1
c0013ef4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013efb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013f01:	83 e0 fb             	and    eax,0xfffffffb
c0013f04:	09 d0                	or     eax,edx
c0013f06:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013f0c:	83 ec 0c             	sub    esp,0xc
c0013f0f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f13:	50                   	push   eax
c0013f14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f18:	50                   	push   eax
c0013f19:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013f1d:	56                   	push   esi
c0013f1e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f22:	50                   	push   eax
c0013f23:	6a 01                	push   0x1
c0013f25:	e8 e4 f6 ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f2a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f2e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013f34:	88 ca                	mov    dl,cl
c0013f36:	83 e0 f0             	and    eax,0xfffffff0
c0013f39:	83 e2 0f             	and    edx,0xf
c0013f3c:	09 d0                	or     eax,edx
c0013f3e:	88 ca                	mov    dl,cl
c0013f40:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013f46:	c0 ea 04             	shr    dl,0x4
c0013f49:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013f4d:	0f b6 c2             	movzx  eax,dl
c0013f50:	83 c4 20             	add    esp,0x20
c0013f53:	c1 e0 06             	shl    eax,0x6
c0013f56:	89 c7                	mov    edi,eax
c0013f58:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013f5e:	66 25 3f c0          	and    ax,0xc03f
c0013f62:	09 f8                	or     eax,edi
c0013f64:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013f6b:	89 c8                	mov    eax,ecx
c0013f6d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013f74:	c1 e8 08             	shr    eax,0x8
c0013f77:	83 e5 3f             	and    ebp,0x3f
c0013f7a:	83 e0 0f             	and    eax,0xf
c0013f7d:	89 c7                	mov    edi,eax
c0013f7f:	c1 e7 06             	shl    edi,0x6
c0013f82:	09 ef                	or     edi,ebp
c0013f84:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013f8b:	89 fa                	mov    edx,edi
c0013f8d:	83 e5 c0             	and    ebp,0xffffffc0
c0013f90:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013f96:	88 c2                	mov    dl,al
c0013f98:	c0 ea 02             	shr    dl,0x2
c0013f9b:	89 d7                	mov    edi,edx
c0013f9d:	09 ef                	or     edi,ebp
c0013f9f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013fa5:	89 fa                	mov    edx,edi
c0013fa7:	83 e5 cf             	and    ebp,0xffffffcf
c0013faa:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013fb0:	89 cf                	mov    edi,ecx
c0013fb2:	c1 ef 0c             	shr    edi,0xc
c0013fb5:	83 e7 03             	and    edi,0x3
c0013fb8:	c1 e7 04             	shl    edi,0x4
c0013fbb:	09 ef                	or     edi,ebp
c0013fbd:	3c 06                	cmp    al,0x6
c0013fbf:	89 fa                	mov    edx,edi
c0013fc1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013fc7:	74 04                	je     c0013fcd <CPU::detectFeatures()+0x555>
c0013fc9:	3c 0f                	cmp    al,0xf
c0013fcb:	75 5c                	jne    c0014029 <CPU::detectFeatures()+0x5b1>
c0013fcd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013fd1:	89 cf                	mov    edi,ecx
c0013fd3:	c1 ef 10             	shr    edi,0x10
c0013fd6:	c1 e7 04             	shl    edi,0x4
c0013fd9:	09 fa                	or     edx,edi
c0013fdb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013fe1:	0f b6 d2             	movzx  edx,dl
c0013fe4:	66 81 e7 3f c0       	and    di,0xc03f
c0013fe9:	c1 e2 06             	shl    edx,0x6
c0013fec:	09 fa                	or     edx,edi
c0013fee:	3c 0f                	cmp    al,0xf
c0013ff0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013ff7:	75 30                	jne    c0014029 <CPU::detectFeatures()+0x5b1>
c0013ff9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013fff:	c1 e9 14             	shr    ecx,0x14
c0014002:	83 e0 3f             	and    eax,0x3f
c0014005:	83 c1 0f             	add    ecx,0xf
c0014008:	88 ca                	mov    dl,cl
c001400a:	c0 e9 02             	shr    cl,0x2
c001400d:	c1 e2 06             	shl    edx,0x6
c0014010:	09 d0                	or     eax,edx
c0014012:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014018:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001401e:	83 e0 c0             	and    eax,0xffffffc0
c0014021:	09 c1                	or     ecx,eax
c0014023:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014029:	83 ec 0c             	sub    esp,0xc
c001402c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014033:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014037:	50                   	push   eax
c0014038:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001403c:	55                   	push   ebp
c001403d:	56                   	push   esi
c001403e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014042:	57                   	push   edi
c0014043:	68 00 00 00 80       	push   0x80000000
c0014048:	e8 c1 f5 ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001404d:	83 c4 20             	add    esp,0x20
c0014050:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014058:	76 22                	jbe    c001407c <CPU::detectFeatures()+0x604>
c001405a:	83 ec 0c             	sub    esp,0xc
c001405d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014061:	50                   	push   eax
c0014062:	55                   	push   ebp
c0014063:	56                   	push   esi
c0014064:	57                   	push   edi
c0014065:	68 01 00 00 80       	push   0x80000001
c001406a:	e8 9f f5 ff ff       	call   c001360e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001406f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014079:	83 c4 20             	add    esp,0x20
c001407c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014082:	83 f8 01             	cmp    eax,0x1
c0014085:	75 6f                	jne    c00140f6 <CPU::detectFeatures()+0x67e>
c0014087:	51                   	push   ecx
c0014088:	51                   	push   ecx
c0014089:	68 c5 5a 02 c0       	push   0xc0025ac5
c001408e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014092:	56                   	push   esi
c0014093:	e8 a8 c6 fe ff       	call   c0000740 <strcpy>
c0014098:	5f                   	pop    edi
c0014099:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001409f:	5d                   	pop    ebp
c00140a0:	66 c1 e8 06          	shr    ax,0x6
c00140a4:	0f b6 c0             	movzx  eax,al
c00140a7:	50                   	push   eax
c00140a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140ae:	c1 e8 0e             	shr    eax,0xe
c00140b1:	0f b6 c0             	movzx  eax,al
c00140b4:	50                   	push   eax
c00140b5:	e8 fe f1 ff ff       	call   c00132b8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00140ba:	5a                   	pop    edx
c00140bb:	59                   	pop    ecx
c00140bc:	50                   	push   eax
c00140bd:	56                   	push   esi
c00140be:	e8 bd c7 fe ff       	call   c0000880 <strcat>
c00140c3:	5f                   	pop    edi
c00140c4:	5d                   	pop    ebp
c00140c5:	56                   	push   esi
c00140c6:	53                   	push   ebx
c00140c7:	e8 28 a6 ff ff       	call   c000e6f4 <Device::setName(char const*)>
c00140cc:	58                   	pop    eax
c00140cd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00140d3:	5a                   	pop    edx
c00140d4:	68 cc 5a 02 c0       	push   0xc0025acc
c00140d9:	50                   	push   eax
c00140da:	e8 ed c6 fe ff       	call   c00007cc <strcmp>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	85 c0                	test   eax,eax
c00140e4:	0f 85 71 03 00 00    	jne    c001445b <CPU::detectFeatures()+0x9e3>
c00140ea:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00140f1:	e9 65 03 00 00       	jmp    c001445b <CPU::detectFeatures()+0x9e3>
c00140f6:	83 f8 02             	cmp    eax,0x2
c00140f9:	0f 85 b5 00 00 00    	jne    c00141b4 <CPU::detectFeatures()+0x73c>
c00140ff:	57                   	push   edi
c0014100:	57                   	push   edi
c0014101:	68 de 5a 02 c0       	push   0xc0025ade
c0014106:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001410a:	56                   	push   esi
c001410b:	e8 30 c6 fe ff       	call   c0000740 <strcpy>
c0014110:	5d                   	pop    ebp
c0014111:	58                   	pop    eax
c0014112:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014118:	66 c1 e8 06          	shr    ax,0x6
c001411c:	0f b6 c0             	movzx  eax,al
c001411f:	50                   	push   eax
c0014120:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014126:	c1 e8 0e             	shr    eax,0xe
c0014129:	0f b6 c0             	movzx  eax,al
c001412c:	50                   	push   eax
c001412d:	e8 f2 ef ff ff       	call   c0013124 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0014132:	5a                   	pop    edx
c0014133:	59                   	pop    ecx
c0014134:	50                   	push   eax
c0014135:	56                   	push   esi
c0014136:	e8 45 c7 fe ff       	call   c0000880 <strcat>
c001413b:	5f                   	pop    edi
c001413c:	5d                   	pop    ebp
c001413d:	56                   	push   esi
c001413e:	53                   	push   ebx
c001413f:	e8 b0 a5 ff ff       	call   c000e6f4 <Device::setName(char const*)>
c0014144:	58                   	pop    eax
c0014145:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001414b:	5a                   	pop    edx
c001414c:	68 e3 5a 02 c0       	push   0xc0025ae3
c0014151:	50                   	push   eax
c0014152:	e8 75 c6 fe ff       	call   c00007cc <strcmp>
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	85 c0                	test   eax,eax
c001415c:	75 20                	jne    c001417e <CPU::detectFeatures()+0x706>
c001415e:	8b 15 68 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028268
c0014164:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001416a:	a8 01                	test   al,0x1
c001416c:	74 10                	je     c001417e <CPU::detectFeatures()+0x706>
c001416e:	83 e0 fe             	and    eax,0xfffffffe
c0014171:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014177:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001417e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014184:	c1 e8 0e             	shr    eax,0xe
c0014187:	3c 05                	cmp    al,0x5
c0014189:	0f 85 cc 02 00 00    	jne    c001445b <CPU::detectFeatures()+0x9e3>
c001418f:	56                   	push   esi
c0014190:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014196:	83 e0 0f             	and    eax,0xf
c0014199:	50                   	push   eax
c001419a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141a0:	66 c1 e8 06          	shr    ax,0x6
c00141a4:	0f b6 c0             	movzx  eax,al
c00141a7:	50                   	push   eax
c00141a8:	6a 05                	push   0x5
c00141aa:	e8 eb f3 ff ff       	call   c001359a <CPU::AMD_K6_writeback(int, int, int)>
c00141af:	e9 1f 02 00 00       	jmp    c00143d3 <CPU::detectFeatures()+0x95b>
c00141b4:	8d 50 fd             	lea    edx,[eax-0x3]
c00141b7:	83 fa 01             	cmp    edx,0x1
c00141ba:	76 09                	jbe    c00141c5 <CPU::detectFeatures()+0x74d>
c00141bc:	83 f8 06             	cmp    eax,0x6
c00141bf:	0f 85 91 01 00 00    	jne    c0014356 <CPU::detectFeatures()+0x8de>
c00141c5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00141cb:	c1 ea 0e             	shr    edx,0xe
c00141ce:	80 fa 05             	cmp    dl,0x5
c00141d1:	75 7b                	jne    c001424e <CPU::detectFeatures()+0x7d6>
c00141d3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00141d9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00141de:	66 81 fa 00 01       	cmp    dx,0x100
c00141e3:	75 0c                	jne    c00141f1 <CPU::detectFeatures()+0x779>
c00141e5:	51                   	push   ecx
c00141e6:	51                   	push   ecx
c00141e7:	68 ea 5a 02 c0       	push   0xc0025aea
c00141ec:	e9 dc 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00141f1:	66 81 fa 00 02       	cmp    dx,0x200
c00141f6:	75 0c                	jne    c0014204 <CPU::detectFeatures()+0x78c>
c00141f8:	52                   	push   edx
c00141f9:	52                   	push   edx
c00141fa:	68 fd 5a 02 c0       	push   0xc0025afd
c00141ff:	e9 c9 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014204:	66 81 fa 40 02       	cmp    dx,0x240
c0014209:	75 0c                	jne    c0014217 <CPU::detectFeatures()+0x79f>
c001420b:	50                   	push   eax
c001420c:	50                   	push   eax
c001420d:	68 0f 5b 02 c0       	push   0xc0025b0f
c0014212:	e9 b6 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014217:	83 f8 06             	cmp    eax,0x6
c001421a:	75 0c                	jne    c0014228 <CPU::detectFeatures()+0x7b0>
c001421c:	50                   	push   eax
c001421d:	50                   	push   eax
c001421e:	68 21 5b 02 c0       	push   0xc0025b21
c0014223:	e9 a5 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014228:	83 f8 04             	cmp    eax,0x4
c001422b:	75 0c                	jne    c0014239 <CPU::detectFeatures()+0x7c1>
c001422d:	50                   	push   eax
c001422e:	50                   	push   eax
c001422f:	68 2d 5b 02 c0       	push   0xc0025b2d
c0014234:	e9 94 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014239:	83 f8 03             	cmp    eax,0x3
c001423c:	0f 85 19 02 00 00    	jne    c001445b <CPU::detectFeatures()+0x9e3>
c0014242:	50                   	push   eax
c0014243:	50                   	push   eax
c0014244:	68 35 5b 02 c0       	push   0xc0025b35
c0014249:	e9 7f 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c001424e:	80 fa 06             	cmp    dl,0x6
c0014251:	0f 85 db 00 00 00    	jne    c0014332 <CPU::detectFeatures()+0x8ba>
c0014257:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001425d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014262:	66 81 fa 80 01       	cmp    dx,0x180
c0014267:	75 0c                	jne    c0014275 <CPU::detectFeatures()+0x7fd>
c0014269:	50                   	push   eax
c001426a:	50                   	push   eax
c001426b:	68 40 5b 02 c0       	push   0xc0025b40
c0014270:	e9 58 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014275:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001427b:	66 f7 c1 80 ff       	test   cx,0xff80
c0014280:	75 0c                	jne    c001428e <CPU::detectFeatures()+0x816>
c0014282:	50                   	push   eax
c0014283:	50                   	push   eax
c0014284:	68 50 5b 02 c0       	push   0xc0025b50
c0014289:	e9 3f 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c001428e:	66 81 fa 40 02       	cmp    dx,0x240
c0014293:	75 0c                	jne    c00142a1 <CPU::detectFeatures()+0x829>
c0014295:	55                   	push   ebp
c0014296:	55                   	push   ebp
c0014297:	68 57 5b 02 c0       	push   0xc0025b57
c001429c:	e9 2c 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00142a1:	66 81 fa 80 02       	cmp    dx,0x280
c00142a6:	75 0c                	jne    c00142b4 <CPU::detectFeatures()+0x83c>
c00142a8:	57                   	push   edi
c00142a9:	57                   	push   edi
c00142aa:	68 60 5b 02 c0       	push   0xc0025b60
c00142af:	e9 19 01 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00142b4:	66 81 fa 40 03       	cmp    dx,0x340
c00142b9:	74 ed                	je     c00142a8 <CPU::detectFeatures()+0x830>
c00142bb:	66 81 fa c0 03       	cmp    dx,0x3c0
c00142c0:	75 0c                	jne    c00142ce <CPU::detectFeatures()+0x856>
c00142c2:	56                   	push   esi
c00142c3:	56                   	push   esi
c00142c4:	68 67 5b 02 c0       	push   0xc0025b67
c00142c9:	e9 ff 00 00 00       	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00142ce:	83 f8 06             	cmp    eax,0x6
c00142d1:	0f 84 45 ff ff ff    	je     c001421c <CPU::detectFeatures()+0x7a4>
c00142d7:	83 f8 04             	cmp    eax,0x4
c00142da:	0f 84 4d ff ff ff    	je     c001422d <CPU::detectFeatures()+0x7b5>
c00142e0:	83 f8 03             	cmp    eax,0x3
c00142e3:	0f 85 72 01 00 00    	jne    c001445b <CPU::detectFeatures()+0x9e3>
c00142e9:	51                   	push   ecx
c00142ea:	51                   	push   ecx
c00142eb:	68 70 5b 02 c0       	push   0xc0025b70
c00142f0:	53                   	push   ebx
c00142f1:	e8 fe a3 ff ff       	call   c000e6f4 <Device::setName(char const*)>
c00142f6:	b1 c1                	mov    cl,0xc1
c00142f8:	88 c8                	mov    al,cl
c00142fa:	e6 22                	out    0x22,al
c00142fc:	e4 23                	in     al,0x23
c00142fe:	88 c2                	mov    dl,al
c0014300:	88 c8                	mov    al,cl
c0014302:	e6 22                	out    0x22,al
c0014304:	88 d0                	mov    al,dl
c0014306:	83 c8 10             	or     eax,0x10
c0014309:	e6 23                	out    0x23,al
c001430b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014312:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014315:	89 d0                	mov    eax,edx
c0014317:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001431d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014321:	40                   	inc    eax
c0014322:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014328:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001432d:	e9 a1 00 00 00       	jmp    c00143d3 <CPU::detectFeatures()+0x95b>
c0014332:	83 f8 06             	cmp    eax,0x6
c0014335:	0f 84 e1 fe ff ff    	je     c001421c <CPU::detectFeatures()+0x7a4>
c001433b:	83 f8 04             	cmp    eax,0x4
c001433e:	0f 84 e9 fe ff ff    	je     c001422d <CPU::detectFeatures()+0x7b5>
c0014344:	83 f8 03             	cmp    eax,0x3
c0014347:	0f 85 0e 01 00 00    	jne    c001445b <CPU::detectFeatures()+0x9e3>
c001434d:	52                   	push   edx
c001434e:	52                   	push   edx
c001434f:	68 7b 5b 02 c0       	push   0xc0025b7b
c0014354:	eb 77                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014356:	83 f8 07             	cmp    eax,0x7
c0014359:	75 09                	jne    c0014364 <CPU::detectFeatures()+0x8ec>
c001435b:	50                   	push   eax
c001435c:	50                   	push   eax
c001435d:	68 85 5b 02 c0       	push   0xc0025b85
c0014362:	eb 69                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014364:	83 f8 0a             	cmp    eax,0xa
c0014367:	75 09                	jne    c0014372 <CPU::detectFeatures()+0x8fa>
c0014369:	50                   	push   eax
c001436a:	50                   	push   eax
c001436b:	68 90 5b 02 c0       	push   0xc0025b90
c0014370:	eb 5b                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014372:	83 f8 0b             	cmp    eax,0xb
c0014375:	75 09                	jne    c0014380 <CPU::detectFeatures()+0x908>
c0014377:	50                   	push   eax
c0014378:	50                   	push   eax
c0014379:	68 98 5b 02 c0       	push   0xc0025b98
c001437e:	eb 4d                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c0014380:	83 f8 08             	cmp    eax,0x8
c0014383:	75 09                	jne    c001438e <CPU::detectFeatures()+0x916>
c0014385:	50                   	push   eax
c0014386:	50                   	push   eax
c0014387:	68 a1 5b 02 c0       	push   0xc0025ba1
c001438c:	eb 3f                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c001438e:	83 f8 09             	cmp    eax,0x9
c0014391:	75 09                	jne    c001439c <CPU::detectFeatures()+0x924>
c0014393:	50                   	push   eax
c0014394:	50                   	push   eax
c0014395:	68 a9 5b 02 c0       	push   0xc0025ba9
c001439a:	eb 31                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c001439c:	83 f8 05             	cmp    eax,0x5
c001439f:	75 09                	jne    c00143aa <CPU::detectFeatures()+0x932>
c00143a1:	50                   	push   eax
c00143a2:	50                   	push   eax
c00143a3:	68 b1 5b 02 c0       	push   0xc0025bb1
c00143a8:	eb 23                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00143aa:	83 f8 0c             	cmp    eax,0xc
c00143ad:	75 09                	jne    c00143b8 <CPU::detectFeatures()+0x940>
c00143af:	55                   	push   ebp
c00143b0:	55                   	push   ebp
c00143b1:	68 bf 5b 02 c0       	push   0xc0025bbf
c00143b6:	eb 15                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00143b8:	83 f8 0d             	cmp    eax,0xd
c00143bb:	75 09                	jne    c00143c6 <CPU::detectFeatures()+0x94e>
c00143bd:	57                   	push   edi
c00143be:	57                   	push   edi
c00143bf:	68 ca 5b 02 c0       	push   0xc0025bca
c00143c4:	eb 07                	jmp    c00143cd <CPU::detectFeatures()+0x955>
c00143c6:	56                   	push   esi
c00143c7:	56                   	push   esi
c00143c8:	68 de 5b 02 c0       	push   0xc0025bde
c00143cd:	53                   	push   ebx
c00143ce:	e8 21 a3 ff ff       	call   c000e6f4 <Device::setName(char const*)>
c00143d3:	83 c4 10             	add    esp,0x10
c00143d6:	e9 80 00 00 00       	jmp    c001445b <CPU::detectFeatures()+0x9e3>
c00143db:	51                   	push   ecx
c00143dc:	51                   	push   ecx
c00143dd:	68 2a 5a 02 c0       	push   0xc0025a2a
c00143e2:	55                   	push   ebp
c00143e3:	e8 58 c3 fe ff       	call   c0000740 <strcpy>
c00143e8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00143f2:	e8 ec bd fe ff       	call   c00001e3 <is486>
c00143f7:	83 c4 10             	add    esp,0x10
c00143fa:	85 c0                	test   eax,eax
c00143fc:	74 2b                	je     c0014429 <CPU::detectFeatures()+0x9b1>
c00143fe:	52                   	push   edx
c00143ff:	52                   	push   edx
c0014400:	68 ea 5b 02 c0       	push   0xc0025bea
c0014405:	53                   	push   ebx
c0014406:	e8 e9 a2 ff ff       	call   c000e6f4 <Device::setName(char const*)>
c001440b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014412:	0f 20 c0             	mov    eax,cr0
c0014415:	83 e0 14             	and    eax,0x14
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	83 f8 04             	cmp    eax,0x4
c001441e:	75 1f                	jne    c001443f <CPU::detectFeatures()+0x9c7>
c0014420:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014427:	eb 32                	jmp    c001445b <CPU::detectFeatures()+0x9e3>
c0014429:	50                   	push   eax
c001442a:	50                   	push   eax
c001442b:	68 f5 5b 02 c0       	push   0xc0025bf5
c0014430:	53                   	push   ebx
c0014431:	e8 be a2 ff ff       	call   c000e6f4 <Device::setName(char const*)>
c0014436:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001443d:	eb d3                	jmp    c0014412 <CPU::detectFeatures()+0x99a>
c001443f:	e8 7a bd fe ff       	call   c00001be <hasLegacyFPU>
c0014444:	83 e0 01             	and    eax,0x1
c0014447:	8d 14 00             	lea    edx,[eax+eax*1]
c001444a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014450:	83 e0 fd             	and    eax,0xfffffffd
c0014453:	09 d0                	or     eax,edx
c0014455:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001445b:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0014462:	74 0e                	je     c0014472 <CPU::detectFeatures()+0x9fa>
c0014464:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0014469:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0014470:	eb 20                	jmp    c0014492 <CPU::detectFeatures()+0xa1a>
c0014472:	e8 47 bd fe ff       	call   c00001be <hasLegacyFPU>
c0014477:	83 e0 01             	and    eax,0x1
c001447a:	8d 14 00             	lea    edx,[eax+eax*1]
c001447d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014483:	83 e0 fd             	and    eax,0xfffffffd
c0014486:	09 d0                	or     eax,edx
c0014488:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001448e:	a8 02                	test   al,0x2
c0014490:	75 d2                	jne    c0014464 <CPU::detectFeatures()+0x9ec>
c0014492:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014499:	83 c4 4c             	add    esp,0x4c
c001449c:	5b                   	pop    ebx
c001449d:	5e                   	pop    esi
c001449e:	5f                   	pop    edi
c001449f:	5d                   	pop    ebp
c00144a0:	c3                   	ret    
c00144a1:	90                   	nop

c00144a2 <CPU::setupSMEP()>:
c00144a2:	0f 20 e0             	mov    eax,cr4
c00144a5:	0d 00 00 10 00       	or     eax,0x100000
c00144aa:	0f 22 e0             	mov    cr4,eax
c00144ad:	c3                   	ret    

c00144ae <CPU::setupUMIP()>:
c00144ae:	0f 20 e0             	mov    eax,cr4
c00144b1:	80 cc 08             	or     ah,0x8
c00144b4:	0f 22 e0             	mov    cr4,eax
c00144b7:	c3                   	ret    

c00144b8 <CPU::setupTSC()>:
c00144b8:	0f 20 e0             	mov    eax,cr4
c00144bb:	83 c8 04             	or     eax,0x4
c00144be:	0f 22 e0             	mov    cr4,eax
c00144c1:	c3                   	ret    

c00144c2 <CPU::setupLargePages()>:
c00144c2:	0f 20 e0             	mov    eax,cr4
c00144c5:	83 c8 10             	or     eax,0x10
c00144c8:	0f 22 e0             	mov    cr4,eax
c00144cb:	c3                   	ret    

c00144cc <CPU::setupPAT()>:
c00144cc:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c00144d1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00144d8:	74 2c                	je     c0014506 <CPU::setupPAT()+0x3a>
c00144da:	53                   	push   ebx
c00144db:	83 ec 10             	sub    esp,0x10
c00144de:	68 77 02 00 00       	push   0x277
c00144e3:	50                   	push   eax
c00144e4:	e8 85 4d ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c00144e9:	83 e2 f8             	and    edx,0xfffffff8
c00144ec:	83 ca 01             	or     edx,0x1
c00144ef:	52                   	push   edx
c00144f0:	50                   	push   eax
c00144f1:	68 77 02 00 00       	push   0x277
c00144f6:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c00144fc:	e8 99 4d ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c0014501:	83 c4 28             	add    esp,0x28
c0014504:	5b                   	pop    ebx
c0014505:	c3                   	ret    
c0014506:	c3                   	ret    
c0014507:	90                   	nop

c0014508 <CPU::setupMTRR()>:
c0014508:	c3                   	ret    
c0014509:	90                   	nop

c001450a <CPU::setupGlobalPages()>:
c001450a:	0f 20 e0             	mov    eax,cr4
c001450d:	0c 80                	or     al,0x80
c001450f:	0f 22 e0             	mov    cr4,eax
c0014512:	c3                   	ret    
c0014513:	90                   	nop

c0014514 <CPU::allowUsermodeDataAccess()>:
c0014514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014518:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001451f:	74 03                	je     c0014524 <CPU::allowUsermodeDataAccess()+0x10>
c0014521:	0f 01 cb             	stac   
c0014524:	c3                   	ret    
c0014525:	90                   	nop

c0014526 <CPU::prohibitUsermodeDataAccess()>:
c0014526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001452a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014531:	74 03                	je     c0014536 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014533:	0f 01 ca             	clac   
c0014536:	c3                   	ret    
c0014537:	90                   	nop

c0014538 <CPU::setupSMAP()>:
c0014538:	0f 20 e0             	mov    eax,cr4
c001453b:	0d 00 00 20 00       	or     eax,0x200000
c0014540:	0f 22 e0             	mov    cr4,eax
c0014543:	eb e1                	jmp    c0014526 <CPU::prohibitUsermodeDataAccess()>
c0014545:	90                   	nop

c0014546 <CPU::setupFeatures()>:
c0014546:	53                   	push   ebx
c0014547:	83 ec 08             	sub    esp,0x8
c001454a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001454e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014555:	74 18                	je     c001456f <CPU::setupFeatures()+0x29>
c0014557:	83 ec 0c             	sub    esp,0xc
c001455a:	68 00 5c 02 c0       	push   0xc0025c00
c001455f:	e8 e7 8a ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0014564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014567:	e8 42 ff ff ff       	call   c00144ae <CPU::setupUMIP()>
c001456c:	83 c4 10             	add    esp,0x10
c001456f:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014576:	74 18                	je     c0014590 <CPU::setupFeatures()+0x4a>
c0014578:	83 ec 0c             	sub    esp,0xc
c001457b:	68 0a 5c 02 c0       	push   0xc0025c0a
c0014580:	e8 c6 8a ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0014585:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014588:	e8 2b ff ff ff       	call   c00144b8 <CPU::setupTSC()>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014597:	74 18                	je     c00145b1 <CPU::setupFeatures()+0x6b>
c0014599:	83 ec 0c             	sub    esp,0xc
c001459c:	68 13 5c 02 c0       	push   0xc0025c13
c00145a1:	e8 a5 8a ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00145a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145a9:	e8 14 ff ff ff       	call   c00144c2 <CPU::setupLargePages()>
c00145ae:	83 c4 10             	add    esp,0x10
c00145b1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00145b8:	74 18                	je     c00145d2 <CPU::setupFeatures()+0x8c>
c00145ba:	83 ec 0c             	sub    esp,0xc
c00145bd:	68 1c 5c 02 c0       	push   0xc0025c1c
c00145c2:	e8 84 8a ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00145c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145ca:	e8 3b ff ff ff       	call   c001450a <CPU::setupGlobalPages()>
c00145cf:	83 c4 10             	add    esp,0x10
c00145d2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00145d9:	74 18                	je     c00145f3 <CPU::setupFeatures()+0xad>
c00145db:	83 ec 0c             	sub    esp,0xc
c00145de:	68 2e 5c 02 c0       	push   0xc0025c2e
c00145e3:	e8 63 8a ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00145e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145eb:	e8 dc fe ff ff       	call   c00144cc <CPU::setupPAT()>
c00145f0:	83 c4 10             	add    esp,0x10
c00145f3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00145fa:	74 11                	je     c001460d <CPU::setupFeatures()+0xc7>
c00145fc:	c7 44 24 10 37 5c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025c37
c0014604:	83 c4 08             	add    esp,0x8
c0014607:	5b                   	pop    ebx
c0014608:	e9 3e 8a ff ff       	jmp    c000d04b <Dbg::kprintf(char const*, ...)>
c001460d:	83 c4 08             	add    esp,0x8
c0014610:	5b                   	pop    ebx
c0014611:	c3                   	ret    

c0014612 <CPU::open(int, int, void*)>:
c0014612:	57                   	push   edi
c0014613:	56                   	push   esi
c0014614:	53                   	push   ebx
c0014615:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014619:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001461d:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014623:	83 ec 0c             	sub    esp,0xc
c0014626:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001462c:	68 41 5c 02 c0       	push   0xc0025c41
c0014631:	e8 63 57 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0014636:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001463c:	89 04 24             	mov    DWORD PTR [esp],eax
c001463f:	e8 7e 4f ff ff       	call   c00095c2 <GDT::setup()>
c0014644:	c7 04 24 53 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c53
c001464b:	e8 49 57 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0014650:	83 c4 0c             	add    esp,0xc
c0014653:	6a 00                	push   0x0
c0014655:	68 ef be ad de       	push   0xdeadbeef
c001465a:	57                   	push   edi
c001465b:	e8 18 70 ff ff       	call   c000b678 <TSS::setup(unsigned long, unsigned long)>
c0014660:	c7 04 24 65 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c65
c0014667:	e8 2d 57 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001466c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001466f:	e8 e4 6f ff ff       	call   c000b658 <TSS::flush()>
c0014674:	c7 04 24 79 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c79
c001467b:	e8 19 57 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0014680:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014686:	89 04 24             	mov    DWORD PTR [esp],eax
c0014689:	e8 14 52 ff ff       	call   c00098a2 <IDT::setup()>
c001468e:	c7 04 24 8b 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c8b
c0014695:	e8 ff 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001469a:	b8 00 04 00 00       	mov    eax,0x400
c001469f:	0f 23 f8             	mov    db7,eax
c00146a2:	c7 04 24 a9 5c 02 c0 	mov    DWORD PTR [esp],0xc0025ca9
c00146a9:	e8 eb 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00146ae:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00146b8:	e8 39 5d ff ff       	call   c000a3f6 <Phys::allocatePage()>
c00146bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00146c3:	89 30                	mov    DWORD PTR [eax],esi
c00146c5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00146cb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00146ce:	c7 04 24 cb 5c 02 c0 	mov    DWORD PTR [esp],0xc0025ccb
c00146d5:	e8 bf 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00146da:	58                   	pop    eax
c00146db:	5a                   	pop    edx
c00146dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00146e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00146e6:	e8 4b 7f ff ff       	call   c000c636 <VAS::setCPUSpecific(unsigned long)>
c00146eb:	c7 04 24 f3 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cf3
c00146f2:	e8 a2 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00146f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146fa:	e8 79 f3 ff ff       	call   c0013a78 <CPU::detectFeatures()>
c00146ff:	c7 04 24 16 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d16
c0014706:	e8 8e 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001470b:	e8 f7 b2 ff ff       	call   c000fa07 <setupInterruptController()>
c0014710:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014716:	c7 04 24 3a 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d3a
c001471d:	e8 77 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0014722:	a1 80 82 02 c0       	mov    eax,ds:0xc0028280
c0014727:	83 e0 10             	and    eax,0x10
c001472a:	83 f8 01             	cmp    eax,0x1
c001472d:	19 c0                	sbb    eax,eax
c001472f:	83 e0 46             	and    eax,0x46
c0014732:	83 c0 1e             	add    eax,0x1e
c0014735:	89 04 24             	mov    DWORD PTR [esp],eax
c0014738:	e8 eb c8 ff ff       	call   c0011028 <setupTimer(int)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014746:	f6 05 80 82 02 c0 20 	test   BYTE PTR ds:0xc0028280,0x20
c001474d:	74 18                	je     c0014767 <CPU::open(int, int, void*)+0x155>
c001474f:	83 ec 0c             	sub    esp,0xc
c0014752:	68 55 5d 02 c0       	push   0xc0025d55
c0014757:	e8 3d 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001475c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001475f:	e8 e2 fd ff ff       	call   c0014546 <CPU::setupFeatures()>
c0014764:	83 c4 10             	add    esp,0x10
c0014767:	83 ec 0c             	sub    esp,0xc
c001476a:	68 70 5d 02 c0       	push   0xc0025d70
c001476f:	e8 25 56 ff ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0014774:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014777:	e8 5c f0 ff ff       	call   c00137d8 <CPU::displayFeatures()>
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	31 c0                	xor    eax,eax
c0014781:	5b                   	pop    ebx
c0014782:	5e                   	pop    esi
c0014783:	5f                   	pop    edi
c0014784:	c3                   	ret    
c0014785:	90                   	nop

c0014786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014786:	57                   	push   edi
c0014787:	56                   	push   esi
c0014788:	53                   	push   ebx
c0014789:	51                   	push   ecx
c001478a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001478e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014791:	0f 02 c0             	lar    eax,ax
c0014794:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014797:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001479b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001479e:	88 ca                	mov    dl,cl
c00147a0:	c0 ea 06             	shr    dl,0x6
c00147a3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00147a7:	89 ca                	mov    edx,ecx
c00147a9:	66 c1 ea 03          	shr    dx,0x3
c00147ad:	83 e2 07             	and    edx,0x7
c00147b0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00147b5:	88 17                	mov    BYTE PTR [edi],dl
c00147b7:	0f 84 a6 01 00 00    	je     c0014963 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00147bd:	83 e1 07             	and    ecx,0x7
c00147c0:	80 f9 04             	cmp    cl,0x4
c00147c3:	0f 84 98 00 00 00    	je     c0014861 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00147c9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00147ce:	0f 95 c0             	setne  al
c00147d1:	80 f9 05             	cmp    cl,0x5
c00147d4:	0f 95 c2             	setne  dl
c00147d7:	08 c2                	or     dl,al
c00147d9:	74 79                	je     c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00147db:	84 c9                	test   cl,cl
c00147dd:	75 05                	jne    c00147e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00147df:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00147e2:	eb 3c                	jmp    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147e4:	80 f9 01             	cmp    cl,0x1
c00147e7:	75 05                	jne    c00147ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00147e9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00147ec:	eb 32                	jmp    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147ee:	80 f9 02             	cmp    cl,0x2
c00147f1:	75 05                	jne    c00147f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00147f3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00147f6:	eb 28                	jmp    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147f8:	31 c0                	xor    eax,eax
c00147fa:	80 f9 03             	cmp    cl,0x3
c00147fd:	75 05                	jne    c0014804 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00147ff:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014802:	eb 1c                	jmp    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014804:	80 f9 05             	cmp    cl,0x5
c0014807:	75 05                	jne    c001480e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014809:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001480c:	eb 12                	jmp    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001480e:	80 f9 06             	cmp    cl,0x6
c0014811:	75 05                	jne    c0014818 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014813:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014816:	eb 08                	jmp    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014818:	80 f9 07             	cmp    cl,0x7
c001481b:	75 03                	jne    c0014820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001481d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014820:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014825:	75 10                	jne    c0014837 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014827:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001482b:	b9 03 00 00 00       	mov    ecx,0x3
c0014830:	01 d0                	add    eax,edx
c0014832:	e9 37 01 00 00       	jmp    c001496e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014837:	b9 02 00 00 00       	mov    ecx,0x2
c001483c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014841:	0f 85 27 01 00 00    	jne    c001496e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014847:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001484a:	b9 06 00 00 00       	mov    ecx,0x6
c001484f:	e9 1a 01 00 00       	jmp    c001496e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014854:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014857:	b9 06 00 00 00       	mov    ecx,0x6
c001485c:	e9 0f 01 00 00       	jmp    c0014970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014861:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014864:	88 ca                	mov    dl,cl
c0014866:	c0 ea 06             	shr    dl,0x6
c0014869:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001486d:	89 ca                	mov    edx,ecx
c001486f:	66 c1 ea 03          	shr    dx,0x3
c0014873:	83 e2 07             	and    edx,0x7
c0014876:	80 e1 07             	and    cl,0x7
c0014879:	75 05                	jne    c0014880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001487b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001487e:	eb 4c                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014880:	80 f9 01             	cmp    cl,0x1
c0014883:	75 05                	jne    c001488a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014885:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014888:	eb 42                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001488a:	80 f9 02             	cmp    cl,0x2
c001488d:	75 05                	jne    c0014894 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001488f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014892:	eb 38                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014894:	80 f9 03             	cmp    cl,0x3
c0014897:	75 05                	jne    c001489e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014899:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001489c:	eb 2e                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001489e:	80 f9 04             	cmp    cl,0x4
c00148a1:	75 12                	jne    c00148b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00148a3:	f6 c4 60             	test   ah,0x60
c00148a6:	75 08                	jne    c00148b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00148a8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00148ab:	8d 78 14             	lea    edi,[eax+0x14]
c00148ae:	eb 1c                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148b0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00148b3:	eb 17                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148b5:	80 f9 05             	cmp    cl,0x5
c00148b8:	75 05                	jne    c00148bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00148ba:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00148bd:	eb 0d                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148bf:	80 f9 06             	cmp    cl,0x6
c00148c2:	75 05                	jne    c00148c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00148c4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00148c7:	eb 03                	jmp    c00148cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148c9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00148cc:	84 d2                	test   dl,dl
c00148ce:	75 05                	jne    c00148d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00148d0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00148d3:	eb 3c                	jmp    c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00148d5:	80 fa 01             	cmp    dl,0x1
c00148d8:	75 05                	jne    c00148df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00148da:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00148dd:	eb 32                	jmp    c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00148df:	80 fa 02             	cmp    dl,0x2
c00148e2:	75 05                	jne    c00148e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00148e4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00148e7:	eb 28                	jmp    c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00148e9:	80 fa 03             	cmp    dl,0x3
c00148ec:	75 05                	jne    c00148f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00148ee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00148f1:	eb 1e                	jmp    c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00148f3:	31 c0                	xor    eax,eax
c00148f5:	80 fa 04             	cmp    dl,0x4
c00148f8:	74 17                	je     c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00148fa:	80 fa 05             	cmp    dl,0x5
c00148fd:	75 05                	jne    c0014904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00148ff:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014902:	eb 0d                	jmp    c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014904:	80 fa 06             	cmp    dl,0x6
c0014907:	75 05                	jne    c001490e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014909:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001490c:	eb 03                	jmp    c0014911 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001490e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014911:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014916:	0f 94 c2             	sete   dl
c0014919:	80 f9 05             	cmp    cl,0x5
c001491c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014920:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014925:	d3 e0                	shl    eax,cl
c0014927:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001492b:	74 0a                	je     c0014937 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001492d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014930:	b9 07 00 00 00       	mov    ecx,0x7
c0014935:	eb 37                	jmp    c001496e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014937:	01 f8                	add    eax,edi
c0014939:	b9 03 00 00 00       	mov    ecx,0x3
c001493e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014943:	74 2b                	je     c0014970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014945:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001494a:	75 0d                	jne    c0014959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001494c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014950:	01 c8                	add    eax,ecx
c0014952:	b9 04 00 00 00       	mov    ecx,0x4
c0014957:	eb 17                	jmp    c0014970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014959:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001495c:	b9 07 00 00 00       	mov    ecx,0x7
c0014961:	eb 0d                	jmp    c0014970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014963:	b9 02 00 00 00       	mov    ecx,0x2
c0014968:	b2 01                	mov    dl,0x1
c001496a:	31 c0                	xor    eax,eax
c001496c:	eb 02                	jmp    c0014970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001496e:	31 d2                	xor    edx,edx
c0014970:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014974:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014976:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001497a:	88 11                	mov    BYTE PTR [ecx],dl
c001497c:	5a                   	pop    edx
c001497d:	5b                   	pop    ebx
c001497e:	5e                   	pop    esi
c001497f:	5f                   	pop    edi
c0014980:	c3                   	ret    

c0014981 <Krnl::smpEntry()>:
c0014981:	eb fe                	jmp    c0014981 <Krnl::smpEntry()>

c0014983 <Krnl::startCPU(int)>:
c0014983:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0014988:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001498f:	0f 84 36 01 00 00    	je     c0014acb <Krnl::startCPU(int)+0x148>
c0014995:	53                   	push   ebx
c0014996:	83 ec 10             	sub    esp,0x10
c0014999:	fa                   	cli    
c001499a:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c00149a0:	6a 1b                	push   0x1b
c00149a2:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c00149a8:	e8 c1 48 ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c00149ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c00149b2:	89 c3                	mov    ebx,eax
c00149b4:	58                   	pop    eax
c00149b5:	5a                   	pop    edx
c00149b6:	53                   	push   ebx
c00149b7:	68 b8 5d 02 c0       	push   0xc0025db8
c00149bc:	e8 8a 86 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00149c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00149cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149cf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00149d9:	c1 e0 18             	shl    eax,0x18
c00149dc:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00149eb:	09 c2                	or     edx,eax
c00149ed:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00149f3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00149f9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00149ff:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014a05:	80 cd c5             	or     ch,0xc5
c0014a08:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a0e:	f3 90                	pause  
c0014a10:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a12:	0f ba e1 0c          	bt     ecx,0xc
c0014a16:	72 f6                	jb     c0014a0e <Krnl::startCPU(int)+0x8b>
c0014a18:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a1e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014a24:	09 c1                	or     ecx,eax
c0014a26:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014a2c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014a32:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014a38:	80 cd 85             	or     ch,0x85
c0014a3b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a41:	f3 90                	pause  
c0014a43:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a45:	0f ba e1 0c          	bt     ecx,0xc
c0014a49:	72 f6                	jb     c0014a41 <Krnl::startCPU(int)+0xbe>
c0014a4b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a55:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a5b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014a61:	09 c1                	or     ecx,eax
c0014a63:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014a69:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014a6f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014a75:	81 c9 02 06 00 00    	or     ecx,0x602
c0014a7b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a81:	f3 90                	pause  
c0014a83:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a85:	0f ba e1 0c          	bt     ecx,0xc
c0014a89:	72 f6                	jb     c0014a81 <Krnl::startCPU(int)+0xfe>
c0014a8b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a95:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a9b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014aa1:	09 c8                	or     eax,ecx
c0014aa3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014aa9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014aaf:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014ab4:	0d 02 06 00 00       	or     eax,0x602
c0014ab9:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014abf:	f3 90                	pause  
c0014ac1:	8b 02                	mov    eax,DWORD PTR [edx]
c0014ac3:	0f ba e0 0c          	bt     eax,0xc
c0014ac7:	72 f6                	jb     c0014abf <Krnl::startCPU(int)+0x13c>
c0014ac9:	eb fe                	jmp    c0014ac9 <Krnl::startCPU(int)+0x146>
c0014acb:	c3                   	ret    

c0014acc <Krnl::startCPUs()>:
c0014acc:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0014ad1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014ad7:	88 c2                	mov    dl,al
c0014ad9:	83 e2 0a             	and    edx,0xa
c0014adc:	80 fa 0a             	cmp    dl,0xa
c0014adf:	75 09                	jne    c0014aea <Krnl::startCPUs()+0x1e>
c0014ae1:	a8 01                	test   al,0x1
c0014ae3:	74 05                	je     c0014aea <Krnl::startCPUs()+0x1e>
c0014ae5:	e9 b1 b6 fe ff       	jmp    c000019b <prepareTramp>
c0014aea:	c3                   	ret    
c0014aeb:	90                   	nop

c0014aec <EnvVarContainer::getEnv(char const*)>:
c0014aec:	57                   	push   edi
c0014aed:	56                   	push   esi
c0014aee:	53                   	push   ebx
c0014aef:	31 db                	xor    ebx,ebx
c0014af1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014af7:	7e 2b                	jle    c0014b24 <EnvVarContainer::getEnv(char const*)+0x38>
c0014af9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014b00:	50                   	push   eax
c0014b01:	50                   	push   eax
c0014b02:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b05:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014b08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b0c:	e8 bb bc fe ff       	call   c00007cc <strcmp>
c0014b11:	83 c4 10             	add    esp,0x10
c0014b14:	85 c0                	test   eax,eax
c0014b16:	75 09                	jne    c0014b21 <EnvVarContainer::getEnv(char const*)+0x35>
c0014b18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b1b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014b1f:	eb 05                	jmp    c0014b26 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014b21:	43                   	inc    ebx
c0014b22:	eb d1                	jmp    c0014af5 <EnvVarContainer::getEnv(char const*)+0x9>
c0014b24:	31 c0                	xor    eax,eax
c0014b26:	5b                   	pop    ebx
c0014b27:	5e                   	pop    esi
c0014b28:	5f                   	pop    edi
c0014b29:	c3                   	ret    

c0014b2a <EnvVarContainer::setEnv(char const*, char const*)>:
c0014b2a:	55                   	push   ebp
c0014b2b:	57                   	push   edi
c0014b2c:	56                   	push   esi
c0014b2d:	53                   	push   ebx
c0014b2e:	83 ec 28             	sub    esp,0x28
c0014b31:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014b35:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014b39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014b3d:	56                   	push   esi
c0014b3e:	e8 5d bb fe ff       	call   c00006a0 <strlen>
c0014b43:	40                   	inc    eax
c0014b44:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b47:	e8 f3 51 ff ff       	call   c0009d3f <malloc>
c0014b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b53:	e8 48 bb fe ff       	call   c00006a0 <strlen>
c0014b58:	40                   	inc    eax
c0014b59:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b5c:	e8 de 51 ff ff       	call   c0009d3f <malloc>
c0014b61:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b68:	e8 33 bb fe ff       	call   c00006a0 <strlen>
c0014b6d:	83 c4 0c             	add    esp,0xc
c0014b70:	40                   	inc    eax
c0014b71:	50                   	push   eax
c0014b72:	6a 00                	push   0x0
c0014b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b78:	e8 07 bb fe ff       	call   c0000684 <memset>
c0014b7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b80:	e8 1b bb fe ff       	call   c00006a0 <strlen>
c0014b85:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014b89:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b91:	89 de                	mov    esi,ebx
c0014b93:	e8 08 bb fe ff       	call   c00006a0 <strlen>
c0014b98:	83 c4 0c             	add    esp,0xc
c0014b9b:	40                   	inc    eax
c0014b9c:	50                   	push   eax
c0014b9d:	6a 00                	push   0x0
c0014b9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ba3:	e8 dc ba fe ff       	call   c0000684 <memset>
c0014ba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bab:	e8 f0 ba fe ff       	call   c00006a0 <strlen>
c0014bb0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014bb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0014bb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014bb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014bbc:	40                   	inc    eax
c0014bbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014bc0:	c1 e0 03             	shl    eax,0x3
c0014bc3:	5a                   	pop    edx
c0014bc4:	59                   	pop    ecx
c0014bc5:	50                   	push   eax
c0014bc6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014bc9:	e8 5d 51 ff ff       	call   c0009d2b <realloc>
c0014bce:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014bd2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014bd5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014bd8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014bdc:	b9 08 00 00 00       	mov    ecx,0x8
c0014be1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014be3:	83 c4 2c             	add    esp,0x2c
c0014be6:	5b                   	pop    ebx
c0014be7:	5e                   	pop    esi
c0014be8:	5f                   	pop    edi
c0014be9:	5d                   	pop    ebp
c0014bea:	c3                   	ret    
c0014beb:	90                   	nop

c0014bec <EnvVarContainer::deleteEnv(char const*)>:
c0014bec:	c3                   	ret    
c0014bed:	90                   	nop

c0014bee <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014bee:	55                   	push   ebp
c0014bef:	57                   	push   edi
c0014bf0:	56                   	push   esi
c0014bf1:	53                   	push   ebx
c0014bf2:	81 ec 38 01 00 00    	sub    esp,0x138
c0014bf8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014bff:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014c06:	68 14 01 00 00       	push   0x114
c0014c0b:	e8 2f 51 ff ff       	call   c0009d3f <malloc>
c0014c10:	83 c4 0c             	add    esp,0xc
c0014c13:	89 c3                	mov    ebx,eax
c0014c15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c18:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014c1f:	50                   	push   eax
c0014c20:	e8 91 89 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0014c25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c28:	e8 d1 8c ff ff       	call   c000d8fe <File::exists()>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	84 c0                	test   al,al
c0014c32:	75 31                	jne    c0014c65 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014c34:	50                   	push   eax
c0014c35:	50                   	push   eax
c0014c36:	6a 12                	push   0x12
c0014c38:	53                   	push   ebx
c0014c39:	e8 52 8a ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0014c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c40:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014c43:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c46:	e8 55 ba fe ff       	call   c00006a0 <strlen>
c0014c4b:	5a                   	pop    edx
c0014c4c:	31 d2                	xor    edx,edx
c0014c4e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014c52:	51                   	push   ecx
c0014c53:	56                   	push   esi
c0014c54:	52                   	push   edx
c0014c55:	50                   	push   eax
c0014c56:	53                   	push   ebx
c0014c57:	ff d7                	call   edi
c0014c59:	83 c4 14             	add    esp,0x14
c0014c5c:	53                   	push   ebx
c0014c5d:	e8 8c 8a ff ff       	call   c000d6ee <File::close()>
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	56                   	push   esi
c0014c66:	31 f6                	xor    esi,esi
c0014c68:	68 00 01 00 00       	push   0x100
c0014c6d:	6a 00                	push   0x0
c0014c6f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014c73:	50                   	push   eax
c0014c74:	e8 0b ba fe ff       	call   c0000684 <memset>
c0014c79:	5f                   	pop    edi
c0014c7a:	58                   	pop    eax
c0014c7b:	6a 01                	push   0x1
c0014c7d:	53                   	push   ebx
c0014c7e:	e8 0d 8a ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0014c83:	83 c4 10             	add    esp,0x10
c0014c86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c8e:	83 ec 0c             	sub    esp,0xc
c0014c91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c93:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014c97:	51                   	push   ecx
c0014c98:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014c9c:	52                   	push   edx
c0014c9d:	6a 00                	push   0x0
c0014c9f:	6a 01                	push   0x1
c0014ca1:	53                   	push   ebx
c0014ca2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ca5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014ca9:	83 c4 20             	add    esp,0x20
c0014cac:	3c 0d                	cmp    al,0xd
c0014cae:	0f 84 09 01 00 00    	je     c0014dbd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014cb4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014cb9:	0f 84 ef 00 00 00    	je     c0014dae <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014cbf:	3c 0a                	cmp    al,0xa
c0014cc1:	74 13                	je     c0014cd6 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014cc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014cc8:	74 0c                	je     c0014cd6 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014cca:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014cd0:	0f 8e d8 00 00 00    	jle    c0014dae <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014cda:	83 ec 0c             	sub    esp,0xc
c0014cdd:	8d 78 01             	lea    edi,[eax+0x1]
c0014ce0:	57                   	push   edi
c0014ce1:	e8 59 50 ff ff       	call   c0009d3f <malloc>
c0014ce6:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014cea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014cee:	8d 56 04             	lea    edx,[esi+0x4]
c0014cf1:	89 14 24             	mov    DWORD PTR [esp],edx
c0014cf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014cf8:	e8 42 50 ff ff       	call   c0009d3f <malloc>
c0014cfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d01:	83 c4 0c             	add    esp,0xc
c0014d04:	57                   	push   edi
c0014d05:	6a 00                	push   0x0
c0014d07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d0b:	e8 74 b9 fe ff       	call   c0000684 <memset>
c0014d10:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014d14:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014d18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014d1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d1e:	83 c4 0c             	add    esp,0xc
c0014d21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d25:	52                   	push   edx
c0014d26:	6a 00                	push   0x0
c0014d28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014d2c:	e8 53 b9 fe ff       	call   c0000684 <memset>
c0014d31:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014d35:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014d39:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d3c:	e8 5f b9 fe ff       	call   c00006a0 <strlen>
c0014d41:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014d45:	89 c1                	mov    ecx,eax
c0014d47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014d4f:	40                   	inc    eax
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014d56:	85 d2                	test   edx,edx
c0014d58:	75 0c                	jne    c0014d66 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	6a 08                	push   0x8
c0014d5f:	e8 db 4f ff ff       	call   c0009d3f <malloc>
c0014d64:	eb 0c                	jmp    c0014d72 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014d66:	c1 e0 03             	shl    eax,0x3
c0014d69:	51                   	push   ecx
c0014d6a:	51                   	push   ecx
c0014d6b:	50                   	push   eax
c0014d6c:	52                   	push   edx
c0014d6d:	e8 b9 4f ff ff       	call   c0009d2b <realloc>
c0014d72:	83 c4 10             	add    esp,0x10
c0014d75:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d7b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014d7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d82:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d86:	b9 08 00 00 00       	mov    ecx,0x8
c0014d8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d8d:	31 f6                	xor    esi,esi
c0014d8f:	50                   	push   eax
c0014d90:	68 00 01 00 00       	push   0x100
c0014d95:	6a 00                	push   0x0
c0014d97:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014d9b:	50                   	push   eax
c0014d9c:	e8 e3 b8 fe ff       	call   c0000684 <memset>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dac:	eb 0f                	jmp    c0014dbd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014dae:	3c 3d                	cmp    al,0x3d
c0014db0:	74 07                	je     c0014db9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014db2:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014db6:	46                   	inc    esi
c0014db7:	eb 04                	jmp    c0014dbd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014db9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014dbd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014dc2:	0f 85 c6 fe ff ff    	jne    c0014c8e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014dc8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dce:	5b                   	pop    ebx
c0014dcf:	5e                   	pop    esi
c0014dd0:	5f                   	pop    edi
c0014dd1:	5d                   	pop    ebp
c0014dd2:	c3                   	ret    
c0014dd3:	90                   	nop

c0014dd4 <EnvVarContainer::__loadSystem()>:
c0014dd4:	83 ec 10             	sub    esp,0x10
c0014dd7:	68 40 7c 02 c0       	push   0xc0027c40
c0014ddc:	68 c9 5d 02 c0       	push   0xc0025dc9
c0014de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014de5:	e8 04 fe ff ff       	call   c0014bee <EnvVarContainer::loadFrom(char const*, char const*)>
c0014dea:	83 c4 1c             	add    esp,0x1c
c0014ded:	c3                   	ret    

c0014dee <EnvVarContainer::__loadUser()>:
c0014dee:	c3                   	ret    
c0014def:	90                   	nop

c0014df0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014df4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014e05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e10:	90                   	nop
c0014e11:	c3                   	ret    

c0014e12 <EnvVarContainer::~EnvVarContainer()>:
c0014e12:	83 ec 0c             	sub    esp,0xc
c0014e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e1c:	85 c0                	test   eax,eax
c0014e1e:	74 1d                	je     c0014e3d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e24:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e26:	85 c0                	test   eax,eax
c0014e28:	74 13                	je     c0014e3d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e31:	83 ec 0c             	sub    esp,0xc
c0014e34:	50                   	push   eax
c0014e35:	e8 15 4f ff ff       	call   c0009d4f <free>
c0014e3a:	83 c4 10             	add    esp,0x10
c0014e3d:	90                   	nop
c0014e3e:	83 c4 0c             	add    esp,0xc
c0014e41:	c3                   	ret    

c0014e42 <Krnl::getEnv(Process*, char const*)>:
c0014e42:	53                   	push   ebx
c0014e43:	83 ec 08             	sub    esp,0x8
c0014e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e4e:	39 05 b0 97 02 c0    	cmp    DWORD PTR ds:0xc00297b0,eax
c0014e54:	74 04                	je     c0014e5a <Krnl::getEnv(Process*, char const*)+0x18>
c0014e56:	85 c0                	test   eax,eax
c0014e58:	75 0b                	jne    c0014e65 <Krnl::getEnv(Process*, char const*)+0x23>
c0014e5a:	a1 34 8d 02 c0       	mov    eax,ds:0xc0028d34
c0014e5f:	85 c0                	test   eax,eax
c0014e61:	75 19                	jne    c0014e7c <Krnl::getEnv(Process*, char const*)+0x3a>
c0014e63:	eb 27                	jmp    c0014e8c <Krnl::getEnv(Process*, char const*)+0x4a>
c0014e65:	52                   	push   edx
c0014e66:	52                   	push   edx
c0014e67:	53                   	push   ebx
c0014e68:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014e6e:	e8 79 fc ff ff       	call   c0014aec <EnvVarContainer::getEnv(char const*)>
c0014e73:	83 c4 10             	add    esp,0x10
c0014e76:	85 c0                	test   eax,eax
c0014e78:	75 28                	jne    c0014ea2 <Krnl::getEnv(Process*, char const*)+0x60>
c0014e7a:	eb de                	jmp    c0014e5a <Krnl::getEnv(Process*, char const*)+0x18>
c0014e7c:	52                   	push   edx
c0014e7d:	52                   	push   edx
c0014e7e:	53                   	push   ebx
c0014e7f:	50                   	push   eax
c0014e80:	e8 67 fc ff ff       	call   c0014aec <EnvVarContainer::getEnv(char const*)>
c0014e85:	83 c4 10             	add    esp,0x10
c0014e88:	85 c0                	test   eax,eax
c0014e8a:	75 16                	jne    c0014ea2 <Krnl::getEnv(Process*, char const*)+0x60>
c0014e8c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014e90:	a1 38 8d 02 c0       	mov    eax,ds:0xc0028d38
c0014e95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e99:	83 c4 08             	add    esp,0x8
c0014e9c:	5b                   	pop    ebx
c0014e9d:	e9 4a fc ff ff       	jmp    c0014aec <EnvVarContainer::getEnv(char const*)>
c0014ea2:	83 c4 08             	add    esp,0x8
c0014ea5:	5b                   	pop    ebx
c0014ea6:	c3                   	ret    

c0014ea7 <Krnl::setEnvSystem(char const*, char const*)>:
c0014ea7:	83 ec 10             	sub    esp,0x10
c0014eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014eae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014eb2:	ff 35 38 8d 02 c0    	push   DWORD PTR ds:0xc0028d38
c0014eb8:	e8 6d fc ff ff       	call   c0014b2a <EnvVarContainer::setEnv(char const*, char const*)>
c0014ebd:	83 c4 1c             	add    esp,0x1c
c0014ec0:	c3                   	ret    

c0014ec1 <Krnl::setEnvUser(char const*, char const*)>:
c0014ec1:	a1 34 8d 02 c0       	mov    eax,ds:0xc0028d34
c0014ec6:	85 c0                	test   eax,eax
c0014ec8:	74 15                	je     c0014edf <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014eca:	83 ec 10             	sub    esp,0x10
c0014ecd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ed5:	50                   	push   eax
c0014ed6:	e8 4f fc ff ff       	call   c0014b2a <EnvVarContainer::setEnv(char const*, char const*)>
c0014edb:	83 c4 1c             	add    esp,0x1c
c0014ede:	c3                   	ret    
c0014edf:	c3                   	ret    

c0014ee0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ee4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014eea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014eee:	e9 37 fc ff ff       	jmp    c0014b2a <EnvVarContainer::setEnv(char const*, char const*)>

c0014ef3 <Krnl::deleteEnvSystem(char const*)>:
c0014ef3:	c3                   	ret    

c0014ef4 <Krnl::deleteEnvUser(char const*)>:
c0014ef4:	c3                   	ret    

c0014ef5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014ef5:	c3                   	ret    

c0014ef6 <Krnl::newProcessEnv(Process*)>:
c0014ef6:	83 ec 28             	sub    esp,0x28
c0014ef9:	6a 0c                	push   0xc
c0014efb:	e8 3f 4e ff ff       	call   c0009d3f <malloc>
c0014f00:	5a                   	pop    edx
c0014f01:	59                   	pop    ecx
c0014f02:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f06:	50                   	push   eax
c0014f07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f0b:	e8 e0 fe ff ff       	call   c0014df0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f14:	83 c4 2c             	add    esp,0x2c
c0014f17:	c3                   	ret    

c0014f18 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014f18:	57                   	push   edi
c0014f19:	56                   	push   esi
c0014f1a:	53                   	push   ebx
c0014f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f1f:	83 ec 0c             	sub    esp,0xc
c0014f22:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014f28:	6a 0c                	push   0xc
c0014f2a:	e8 10 4e ff ff       	call   c0009d3f <malloc>
c0014f2f:	89 c3                	mov    ebx,eax
c0014f31:	58                   	pop    eax
c0014f32:	5a                   	pop    edx
c0014f33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f37:	53                   	push   ebx
c0014f38:	e8 b3 fe ff ff       	call   c0014df0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f3d:	8b 07                	mov    eax,DWORD PTR [edi]
c0014f3f:	89 03                	mov    DWORD PTR [ebx],eax
c0014f41:	c1 e0 03             	shl    eax,0x3
c0014f44:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f47:	e8 f3 4d ff ff       	call   c0009d3f <malloc>
c0014f4c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014f4f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014f51:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014f54:	c1 e1 03             	shl    ecx,0x3
c0014f57:	89 c7                	mov    edi,eax
c0014f59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f5b:	83 c4 10             	add    esp,0x10
c0014f5e:	89 d8                	mov    eax,ebx
c0014f60:	5b                   	pop    ebx
c0014f61:	5e                   	pop    esi
c0014f62:	5f                   	pop    edi
c0014f63:	c3                   	ret    

c0014f64 <Krnl::loadSystemEnv()>:
c0014f64:	53                   	push   ebx
c0014f65:	83 ec 14             	sub    esp,0x14
c0014f68:	6a 0c                	push   0xc
c0014f6a:	e8 d0 4d ff ff       	call   c0009d3f <malloc>
c0014f6f:	89 c3                	mov    ebx,eax
c0014f71:	58                   	pop    eax
c0014f72:	5a                   	pop    edx
c0014f73:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c0014f79:	53                   	push   ebx
c0014f7a:	e8 71 fe ff ff       	call   c0014df0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f82:	89 1d 38 8d 02 c0    	mov    DWORD PTR ds:0xc0028d38,ebx
c0014f88:	e8 47 fe ff ff       	call   c0014dd4 <EnvVarContainer::__loadSystem()>
c0014f8d:	83 c4 18             	add    esp,0x18
c0014f90:	5b                   	pop    ebx
c0014f91:	c3                   	ret    

c0014f92 <Krnl::loadUserEnv()>:
c0014f92:	53                   	push   ebx
c0014f93:	83 ec 14             	sub    esp,0x14
c0014f96:	6a 0c                	push   0xc
c0014f98:	e8 a2 4d ff ff       	call   c0009d3f <malloc>
c0014f9d:	89 c3                	mov    ebx,eax
c0014f9f:	58                   	pop    eax
c0014fa0:	5a                   	pop    edx
c0014fa1:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c0014fa7:	53                   	push   ebx
c0014fa8:	e8 43 fe ff ff       	call   c0014df0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014fad:	89 1d 34 8d 02 c0    	mov    DWORD PTR ds:0xc0028d34,ebx
c0014fb3:	83 c4 18             	add    esp,0x18
c0014fb6:	5b                   	pop    ebx
c0014fb7:	c3                   	ret    

c0014fb8 <Krnl::flushEnv()>:
c0014fb8:	c3                   	ret    

c0014fb9 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014fb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fbd:	8b 15 34 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d34
c0014fc3:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014fc9:	a1 38 8d 02 c0       	mov    eax,ds:0xc0028d38
c0014fce:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd0:	03 01                	add    eax,DWORD PTR [ecx]
c0014fd2:	85 d2                	test   edx,edx
c0014fd4:	74 02                	je     c0014fd8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014fd6:	03 02                	add    eax,DWORD PTR [edx]
c0014fd8:	c3                   	ret    

c0014fd9 <Krnl::getProcessEnvPair(Process*, int)>:
c0014fd9:	57                   	push   edi
c0014fda:	56                   	push   esi
c0014fdb:	8b 35 34 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d34
c0014fe1:	53                   	push   ebx
c0014fe2:	85 f6                	test   esi,esi
c0014fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fec:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014ff2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ff6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014ff8:	75 16                	jne    c0015010 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014ffa:	39 c2                	cmp    edx,eax
c0014ffc:	7c 16                	jl     c0015014 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014ffe:	8b 0d 38 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d38
c0015004:	8b 31                	mov    esi,DWORD PTR [ecx]
c0015006:	01 c6                	add    esi,eax
c0015008:	39 d6                	cmp    esi,edx
c001500a:	7e 3c                	jle    c0015048 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001500c:	29 c2                	sub    edx,eax
c001500e:	eb 04                	jmp    c0015014 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0015010:	39 c2                	cmp    edx,eax
c0015012:	7d 05                	jge    c0015019 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0015014:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0015017:	eb 20                	jmp    c0015039 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0015019:	8b 3e                	mov    edi,DWORD PTR [esi]
c001501b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001501e:	39 d1                	cmp    ecx,edx
c0015020:	7e 04                	jle    c0015026 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0015022:	29 c2                	sub    edx,eax
c0015024:	eb 10                	jmp    c0015036 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0015026:	8b 35 38 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d38
c001502c:	03 0e                	add    ecx,DWORD PTR [esi]
c001502e:	39 d1                	cmp    ecx,edx
c0015030:	7e 16                	jle    c0015048 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0015032:	29 c2                	sub    edx,eax
c0015034:	29 fa                	sub    edx,edi
c0015036:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015039:	8d 14 d0             	lea    edx,[eax+edx*8]
c001503c:	8b 02                	mov    eax,DWORD PTR [edx]
c001503e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015041:	89 03                	mov    DWORD PTR [ebx],eax
c0015043:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0015046:	eb 1d                	jmp    c0015065 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	68 eb 5d 02 c0       	push   0xc0025deb
c0015050:	e8 18 00 00 00       	call   c001506d <Krnl::panic(char const*)>
c0015055:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001505b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0015062:	83 c4 10             	add    esp,0x10
c0015065:	89 d8                	mov    eax,ebx
c0015067:	5b                   	pop    ebx
c0015068:	5e                   	pop    esi
c0015069:	5f                   	pop    edi
c001506a:	c2 04 00             	ret    0x4

c001506d <Krnl::panic(char const*)>:
c001506d:	53                   	push   ebx
c001506e:	83 ec 10             	sub    esp,0x10
c0015071:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015075:	fa                   	cli    
c0015076:	c6 05 44 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d44,0x1
c001507d:	53                   	push   ebx
c001507e:	68 05 5e 02 c0       	push   0xc0025e05
c0015083:	e8 c3 7f ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0015088:	83 c4 0c             	add    esp,0xc
c001508b:	6a 01                	push   0x1
c001508d:	6a 0f                	push   0xf
c001508f:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015095:	e8 f2 5b ff ff       	call   c000ac8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001509a:	59                   	pop    ecx
c001509b:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00150a1:	e8 fe 60 ff ff       	call   c000b1a4 <VgaText::clearScreen()>
c00150a6:	58                   	pop    eax
c00150a7:	5a                   	pop    edx
c00150a8:	68 5c 5e 02 c0       	push   0xc0025e5c
c00150ad:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00150b3:	e8 14 5c ff ff       	call   c000accc <VgaText::setTitle(char*)>
c00150b8:	83 c4 0c             	add    esp,0xc
c00150bb:	6a 01                	push   0x1
c00150bd:	6a 0f                	push   0xf
c00150bf:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00150c5:	e8 c2 5b ff ff       	call   c000ac8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00150ca:	59                   	pop    ecx
c00150cb:	58                   	pop    eax
c00150cc:	68 1e 5e 02 c0       	push   0xc0025e1e
c00150d1:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00150d7:	e8 54 62 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00150dc:	58                   	pop    eax
c00150dd:	5a                   	pop    edx
c00150de:	68 a8 5e 02 c0       	push   0xc0025ea8
c00150e3:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00150e9:	e8 42 62 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00150ee:	59                   	pop    ecx
c00150ef:	58                   	pop    eax
c00150f0:	68 3a 5e 02 c0       	push   0xc0025e3a
c00150f5:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00150fb:	e8 30 62 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015100:	58                   	pop    eax
c0015101:	5a                   	pop    edx
c0015102:	53                   	push   ebx
c0015103:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015109:	e8 22 62 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c001510e:	59                   	pop    ecx
c001510f:	5b                   	pop    ebx
c0015110:	68 5a 5e 02 c0       	push   0xc0025e5a
c0015115:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001511b:	e8 10 62 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015120:	58                   	pop    eax
c0015121:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015125:	e8 77 2b 00 00       	call   c0017ca1 <Thr::getDriverNameFromAddress(unsigned long)>
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	85 c0                	test   eax,eax
c001512f:	0f 84 36 01 00 00    	je     c001526b <Krnl::panic(char const*)+0x1fe>
c0015135:	83 ec 08             	sub    esp,0x8
c0015138:	89 c3                	mov    ebx,eax
c001513a:	68 e4 5e 02 c0       	push   0xc0025ee4
c001513f:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015145:	e8 e6 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c001514a:	59                   	pop    ecx
c001514b:	58                   	pop    eax
c001514c:	68 3a 5e 02 c0       	push   0xc0025e3a
c0015151:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015157:	e8 d4 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c001515c:	58                   	pop    eax
c001515d:	5a                   	pop    edx
c001515e:	53                   	push   ebx
c001515f:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015165:	e8 c6 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	83 ec 08             	sub    esp,0x8
c0015170:	68 59 5e 02 c0       	push   0xc0025e59
c0015175:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001517b:	e8 b0 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015180:	58                   	pop    eax
c0015181:	5a                   	pop    edx
c0015182:	68 3c 5f 02 c0       	push   0xc0025f3c
c0015187:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001518d:	e8 9e 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015192:	59                   	pop    ecx
c0015193:	5b                   	pop    ebx
c0015194:	68 7c 5f 02 c0       	push   0xc0025f7c
c0015199:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001519f:	e8 8c 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00151a4:	58                   	pop    eax
c00151a5:	5a                   	pop    edx
c00151a6:	68 45 5e 02 c0       	push   0xc0025e45
c00151ab:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00151b1:	e8 7a 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00151b6:	59                   	pop    ecx
c00151b7:	5b                   	pop    ebx
c00151b8:	68 c0 5f 02 c0       	push   0xc0025fc0
c00151bd:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00151c3:	e8 68 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00151c8:	58                   	pop    eax
c00151c9:	5a                   	pop    edx
c00151ca:	68 5d 5e 02 c0       	push   0xc0025e5d
c00151cf:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00151d5:	e8 56 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00151da:	0f 20 c0             	mov    eax,cr0
c00151dd:	59                   	pop    ecx
c00151de:	5b                   	pop    ebx
c00151df:	50                   	push   eax
c00151e0:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00151e6:	e8 ff 60 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c00151eb:	58                   	pop    eax
c00151ec:	5a                   	pop    edx
c00151ed:	68 67 5e 02 c0       	push   0xc0025e67
c00151f2:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00151f8:	e8 33 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00151fd:	0f 20 d0             	mov    eax,cr2
c0015200:	59                   	pop    ecx
c0015201:	5b                   	pop    ebx
c0015202:	50                   	push   eax
c0015203:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015209:	e8 dc 60 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c001520e:	58                   	pop    eax
c001520f:	5a                   	pop    edx
c0015210:	68 71 5e 02 c0       	push   0xc0025e71
c0015215:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001521b:	e8 10 61 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015220:	0f 20 d8             	mov    eax,cr3
c0015223:	59                   	pop    ecx
c0015224:	5b                   	pop    ebx
c0015225:	50                   	push   eax
c0015226:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001522c:	e8 b9 60 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c0015231:	58                   	pop    eax
c0015232:	5a                   	pop    edx
c0015233:	68 84 5e 02 c0       	push   0xc0025e84
c0015238:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001523e:	e8 ed 60 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015243:	0f 20 e0             	mov    eax,cr4
c0015246:	59                   	pop    ecx
c0015247:	5b                   	pop    ebx
c0015248:	50                   	push   eax
c0015249:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001524f:	e8 96 60 ff ff       	call   c000b2ea <VgaText::putx(unsigned int)>
c0015254:	58                   	pop    eax
c0015255:	5a                   	pop    edx
c0015256:	68 8e 5e 02 c0       	push   0xc0025e8e
c001525b:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015261:	e8 ca 60 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c0015266:	83 c4 10             	add    esp,0x10
c0015269:	eb fe                	jmp    c0015269 <Krnl::panic(char const*)+0x1fc>
c001526b:	51                   	push   ecx
c001526c:	51                   	push   ecx
c001526d:	68 10 5f 02 c0       	push   0xc0025f10
c0015272:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c0015278:	e8 b3 60 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c001527d:	5b                   	pop    ebx
c001527e:	58                   	pop    eax
c001527f:	68 3a 5e 02 c0       	push   0xc0025e3a
c0015284:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c001528a:	e8 a1 60 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c001528f:	58                   	pop    eax
c0015290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015295:	5a                   	pop    edx
c0015296:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015299:	83 c0 0c             	add    eax,0xc
c001529c:	50                   	push   eax
c001529d:	ff 35 e4 82 02 c0    	push   DWORD PTR ds:0xc00282e4
c00152a3:	e8 88 60 ff ff       	call   c000b330 <VgaText::puts(char const*)>
c00152a8:	83 c4 10             	add    esp,0x10
c00152ab:	e9 bd fe ff ff       	jmp    c001516d <Krnl::panic(char const*)+0x100>

c00152b0 <Krnl::powerThread(void*)>:
c00152b0:	53                   	push   ebx
c00152b1:	83 ec 08             	sub    esp,0x8
c00152b4:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00152b9:	48                   	dec    eax
c00152ba:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00152bf:	75 01                	jne    c00152c2 <Krnl::powerThread(void*)+0x12>
c00152c1:	fb                   	sti    
c00152c2:	52                   	push   edx
c00152c3:	52                   	push   edx
c00152c4:	ff 35 a4 8d 02 c0    	push   DWORD PTR ds:0xc0028da4
c00152ca:	68 e6 5f 02 c0       	push   0xc0025fe6
c00152cf:	e8 77 7d ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00152d4:	59                   	pop    ecx
c00152d5:	8b 1d 94 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d94
c00152db:	58                   	pop    eax
c00152dc:	c6 05 60 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028d60,0x0
c00152e3:	53                   	push   ebx
c00152e4:	68 f0 5f 02 c0       	push   0xc0025ff0
c00152e9:	e8 5d 7d ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00152ee:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00152f5:	e8 e6 36 00 00       	call   c00189e0 <sleep(unsigned int)>
c00152fa:	a1 a4 8d 02 c0       	mov    eax,ds:0xc0028da4
c00152ff:	83 c4 10             	add    esp,0x10
c0015302:	83 c0 0a             	add    eax,0xa
c0015305:	85 db                	test   ebx,ebx
c0015307:	a3 a4 8d 02 c0       	mov    ds:0xc0028da4,eax
c001530c:	74 b4                	je     c00152c2 <Krnl::powerThread(void*)+0x12>
c001530e:	39 d8                	cmp    eax,ebx
c0015310:	7e b0                	jle    c00152c2 <Krnl::powerThread(void*)+0x12>
c0015312:	83 ec 0c             	sub    esp,0xc
c0015315:	68 08 60 02 c0       	push   0xc0026008
c001531a:	e8 2c 7d ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001531f:	58                   	pop    eax
c0015320:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c0015326:	e8 d7 3f ff ff       	call   c0009302 <Computer::sleep()>
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	eb 92                	jmp    c00152c2 <Krnl::powerThread(void*)+0x12>

c0015330 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0015330:	57                   	push   edi
c0015331:	b9 09 00 00 00       	mov    ecx,0x9
c0015336:	56                   	push   esi
c0015337:	bf 80 8d 02 c0       	mov    edi,0xc0028d80
c001533c:	fc                   	cld    
c001533d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015341:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015343:	5e                   	pop    esi
c0015344:	5f                   	pop    edi
c0015345:	c3                   	ret    

c0015346 <Krnl::userIOReceived()>:
c0015346:	c7 05 a4 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da4,0x0
c0015350:	c3                   	ret    

c0015351 <Krnl::handlePowerButton()>:
c0015351:	83 ec 0c             	sub    esp,0xc
c0015354:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c0015359:	83 f8 02             	cmp    eax,0x2
c001535c:	75 10                	jne    c001536e <Krnl::handlePowerButton()+0x1d>
c001535e:	83 ec 0c             	sub    esp,0xc
c0015361:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c0015367:	e8 66 3f ff ff       	call   c00092d2 <Computer::shutdown()>
c001536c:	eb 11                	jmp    c001537f <Krnl::handlePowerButton()+0x2e>
c001536e:	48                   	dec    eax
c001536f:	75 11                	jne    c0015382 <Krnl::handlePowerButton()+0x31>
c0015371:	83 ec 0c             	sub    esp,0xc
c0015374:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c001537a:	e8 83 3f ff ff       	call   c0009302 <Computer::sleep()>
c001537f:	83 c4 10             	add    esp,0x10
c0015382:	83 c4 0c             	add    esp,0xc
c0015385:	c3                   	ret    

c0015386 <Krnl::handleSleepButton()>:
c0015386:	83 ec 0c             	sub    esp,0xc
c0015389:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c001538e:	83 f8 02             	cmp    eax,0x2
c0015391:	75 10                	jne    c00153a3 <Krnl::handleSleepButton()+0x1d>
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c001539c:	e8 31 3f ff ff       	call   c00092d2 <Computer::shutdown()>
c00153a1:	eb 11                	jmp    c00153b4 <Krnl::handleSleepButton()+0x2e>
c00153a3:	48                   	dec    eax
c00153a4:	75 11                	jne    c00153b7 <Krnl::handleSleepButton()+0x31>
c00153a6:	83 ec 0c             	sub    esp,0xc
c00153a9:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c00153af:	e8 4e 3f ff ff       	call   c0009302 <Computer::sleep()>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	83 c4 0c             	add    esp,0xc
c00153ba:	c3                   	ret    

c00153bb <Krnl::setupPowerManager()>:
c00153bb:	83 ec 0c             	sub    esp,0xc
c00153be:	c7 05 a4 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da4,0x0
c00153c8:	68 f0 00 00 00       	push   0xf0
c00153cd:	c6 05 60 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028d60,0x0
c00153d4:	6a 00                	push   0x0
c00153d6:	68 b0 52 01 c0       	push   0xc00152b0
c00153db:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c00153e1:	e8 d6 30 00 00       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c00153e6:	c7 05 80 8d 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028d80,0x2
c00153f0:	c7 05 84 8d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028d84,0x1
c00153fa:	c7 05 88 8d 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028d88,0x3
c0015404:	c7 05 8c 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d8c,0x0
c001540e:	c7 05 98 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d98,0x0
c0015418:	c7 05 90 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d90,0x0
c0015422:	c7 05 9c 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d9c,0x0
c001542c:	c7 05 94 8d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028d94,0x3c
c0015436:	c7 05 a0 8d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x3c
c0015440:	83 c4 1c             	add    esp,0x1c
c0015443:	c3                   	ret    

c0015444 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015444:	55                   	push   ebp
c0015445:	57                   	push   edi
c0015446:	56                   	push   esi
c0015447:	53                   	push   ebx
c0015448:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001544e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015455:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015457:	8d 6e 01             	lea    ebp,[esi+0x1]
c001545a:	80 fb 40             	cmp    bl,0x40
c001545d:	75 1b                	jne    c001547a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001545f:	8a 16                	mov    dl,BYTE PTR [esi]
c0015461:	84 d2                	test   dl,dl
c0015463:	0f 84 f1 00 00 00    	je     c001555a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015469:	8d 46 01             	lea    eax,[esi+0x1]
c001546c:	80 fa 3a             	cmp    dl,0x3a
c001546f:	74 04                	je     c0015475 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015471:	89 c6                	mov    esi,eax
c0015473:	eb ea                	jmp    c001545f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015475:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015478:	89 c6                	mov    esi,eax
c001547a:	50                   	push   eax
c001547b:	6a 40                	push   0x40
c001547d:	6a 00                	push   0x0
c001547f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015483:	50                   	push   eax
c0015484:	e8 fb b1 fe ff       	call   c0000684 <memset>
c0015489:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015490:	31 c0                	xor    eax,eax
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015497:	84 c9                	test   cl,cl
c0015499:	0f 84 bb 00 00 00    	je     c001555a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001549f:	3d c7 00 00 00       	cmp    eax,0xc7
c00154a4:	0f 8f b0 00 00 00    	jg     c001555a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154aa:	80 f9 0a             	cmp    cl,0xa
c00154ad:	0f 85 98 00 00 00    	jne    c001554b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00154b3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00154b8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00154bc:	a8 df                	test   al,0xdf
c00154be:	0f 94 c1             	sete   cl
c00154c1:	3c 23                	cmp    al,0x23
c00154c3:	0f 94 c2             	sete   dl
c00154c6:	08 d1                	or     cl,dl
c00154c8:	75 4a                	jne    c0015514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154ca:	8d 50 f7             	lea    edx,[eax-0x9]
c00154cd:	80 fa 01             	cmp    dl,0x1
c00154d0:	76 42                	jbe    c0015514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154d2:	3c 5b                	cmp    al,0x5b
c00154d4:	75 42                	jne    c0015518 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00154d6:	80 fb 40             	cmp    bl,0x40
c00154d9:	75 39                	jne    c0015514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154db:	83 ec 0c             	sub    esp,0xc
c00154de:	8d 54 24 65          	lea    edx,[esp+0x65]
c00154e2:	52                   	push   edx
c00154e3:	e8 b8 b1 fe ff       	call   c00006a0 <strlen>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	83 f8 3f             	cmp    eax,0x3f
c00154ee:	77 6a                	ja     c001555a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154f0:	50                   	push   eax
c00154f1:	50                   	push   eax
c00154f2:	8d 54 24 61          	lea    edx,[esp+0x61]
c00154f6:	52                   	push   edx
c00154f7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00154fb:	52                   	push   edx
c00154fc:	e8 3f b2 fe ff       	call   c0000740 <strcpy>
c0015501:	58                   	pop    eax
c0015502:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015506:	52                   	push   edx
c0015507:	e8 94 b1 fe ff       	call   c00006a0 <strlen>
c001550c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015511:	83 c4 10             	add    esp,0x10
c0015514:	31 d2                	xor    edx,edx
c0015516:	eb 3a                	jmp    c0015552 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015518:	80 fb 40             	cmp    bl,0x40
c001551b:	74 06                	je     c0015523 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001551d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015521:	eb 20                	jmp    c0015543 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015523:	50                   	push   eax
c0015524:	50                   	push   eax
c0015525:	55                   	push   ebp
c0015526:	8d 44 24 24          	lea    eax,[esp+0x24]
c001552a:	50                   	push   eax
c001552b:	e8 9c b2 fe ff       	call   c00007cc <strcmp>
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	85 c0                	test   eax,eax
c0015535:	75 dd                	jne    c0015514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015537:	eb e4                	jmp    c001551d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015539:	8d 50 01             	lea    edx,[eax+0x1]
c001553c:	80 f9 3d             	cmp    cl,0x3d
c001553f:	74 1d                	je     c001555e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015541:	89 d0                	mov    eax,edx
c0015543:	8a 08                	mov    cl,BYTE PTR [eax]
c0015545:	84 c9                	test   cl,cl
c0015547:	75 f0                	jne    c0015539 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015549:	eb 0f                	jmp    c001555a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001554b:	8d 50 01             	lea    edx,[eax+0x1]
c001554e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015552:	47                   	inc    edi
c0015553:	89 d0                	mov    eax,edx
c0015555:	e9 3b ff ff ff       	jmp    c0015495 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001555a:	31 c0                	xor    eax,eax
c001555c:	eb 33                	jmp    c0015591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001555e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015562:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015565:	50                   	push   eax
c0015566:	50                   	push   eax
c0015567:	8d 44 24 60          	lea    eax,[esp+0x60]
c001556b:	50                   	push   eax
c001556c:	56                   	push   esi
c001556d:	e8 5a b2 fe ff       	call   c00007cc <strcmp>
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	85 c0                	test   eax,eax
c0015577:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001557b:	75 97                	jne    c0015514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001557d:	51                   	push   ecx
c001557e:	51                   	push   ecx
c001557f:	52                   	push   edx
c0015580:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015587:	e8 b4 b1 fe ff       	call   c0000740 <strcpy>
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	b0 01                	mov    al,0x1
c0015591:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015597:	5b                   	pop    ebx
c0015598:	5e                   	pop    esi
c0015599:	5f                   	pop    edi
c001559a:	5d                   	pop    ebp
c001559b:	c3                   	ret    

c001559c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001559c:	57                   	push   edi
c001559d:	56                   	push   esi
c001559e:	53                   	push   ebx
c001559f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00155a5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00155ac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00155b3:	53                   	push   ebx
c00155b4:	e8 e7 b0 fe ff       	call   c00006a0 <strlen>
c00155b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00155bc:	89 c7                	mov    edi,eax
c00155be:	e8 dd b0 fe ff       	call   c00006a0 <strlen>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00155ca:	3d ff 00 00 00       	cmp    eax,0xff
c00155cf:	0f 87 d3 00 00 00    	ja     c00156a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00155d5:	57                   	push   edi
c00155d6:	57                   	push   edi
c00155d7:	56                   	push   esi
c00155d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00155dc:	56                   	push   esi
c00155dd:	e8 5e b1 fe ff       	call   c0000740 <strcpy>
c00155e2:	58                   	pop    eax
c00155e3:	5a                   	pop    edx
c00155e4:	68 6b 63 02 c0       	push   0xc002636b
c00155e9:	56                   	push   esi
c00155ea:	e8 91 b2 fe ff       	call   c0000880 <strcat>
c00155ef:	59                   	pop    ecx
c00155f0:	5f                   	pop    edi
c00155f1:	53                   	push   ebx
c00155f2:	56                   	push   esi
c00155f3:	e8 88 b2 fe ff       	call   c0000880 <strcat>
c00155f8:	58                   	pop    eax
c00155f9:	5a                   	pop    edx
c00155fa:	68 15 60 02 c0       	push   0xc0026015
c00155ff:	56                   	push   esi
c0015600:	e8 7b b2 fe ff       	call   c0000880 <strcat>
c0015605:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001560c:	e8 2e 47 ff ff       	call   c0009d3f <malloc>
c0015611:	83 c4 0c             	add    esp,0xc
c0015614:	89 c3                	mov    ebx,eax
c0015616:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c001561c:	56                   	push   esi
c001561d:	50                   	push   eax
c001561e:	e8 93 7f ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	85 db                	test   ebx,ebx
c0015628:	74 7e                	je     c00156a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001562a:	51                   	push   ecx
c001562b:	51                   	push   ecx
c001562c:	6a 01                	push   0x1
c001562e:	53                   	push   ebx
c001562f:	e8 5c 80 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	85 c0                	test   eax,eax
c0015639:	74 08                	je     c0015643 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001563b:	83 ec 0c             	sub    esp,0xc
c001563e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015640:	53                   	push   ebx
c0015641:	eb 5f                	jmp    c00156a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015643:	52                   	push   edx
c0015644:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015648:	50                   	push   eax
c0015649:	8d 44 24 20          	lea    eax,[esp+0x20]
c001564d:	50                   	push   eax
c001564e:	53                   	push   ebx
c001564f:	e8 e8 82 ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c0015654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015658:	83 c4 10             	add    esp,0x10
c001565b:	89 c1                	mov    ecx,eax
c001565d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015661:	74 31                	je     c0015694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015663:	83 ec 0c             	sub    esp,0xc
c0015666:	50                   	push   eax
c0015667:	e8 d3 46 ff ff       	call   c0009d3f <malloc>
c001566c:	89 c6                	mov    esi,eax
c001566e:	58                   	pop    eax
c001566f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015671:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015675:	52                   	push   edx
c0015676:	56                   	push   esi
c0015677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001567b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001567f:	53                   	push   ebx
c0015680:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015683:	83 c4 20             	add    esp,0x20
c0015686:	85 c0                	test   eax,eax
c0015688:	75 0a                	jne    c0015694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001568a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001568e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015692:	74 18                	je     c00156ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015694:	83 ec 0c             	sub    esp,0xc
c0015697:	53                   	push   ebx
c0015698:	e8 51 80 ff ff       	call   c000d6ee <File::close()>
c001569d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001569f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156a5:	83 c4 10             	add    esp,0x10
c00156a8:	31 c0                	xor    eax,eax
c00156aa:	eb 3b                	jmp    c00156e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00156ac:	83 ec 0c             	sub    esp,0xc
c00156af:	53                   	push   ebx
c00156b0:	e8 39 80 ff ff       	call   c000d6ee <File::close()>
c00156b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156bd:	83 c4 0c             	add    esp,0xc
c00156c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00156c7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00156ce:	56                   	push   esi
c00156cf:	e8 70 fd ff ff       	call   c0015444 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00156d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00156d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00156db:	e8 6f 46 ff ff       	call   c0009d4f <free>
c00156e0:	83 c4 10             	add    esp,0x10
c00156e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00156e7:	81 c4 20 01 00 00    	add    esp,0x120
c00156ed:	5b                   	pop    ebx
c00156ee:	5e                   	pop    esi
c00156ef:	5f                   	pop    edi
c00156f0:	c3                   	ret    

c00156f1 <Reg::getLine(char*, char*, char*)>:
c00156f1:	57                   	push   edi
c00156f2:	56                   	push   esi
c00156f3:	53                   	push   ebx
c00156f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015700:	57                   	push   edi
c0015701:	56                   	push   esi
c0015702:	53                   	push   ebx
c0015703:	68 1a 60 02 c0       	push   0xc002601a
c0015708:	e8 8f fe ff ff       	call   c001559c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	84 c0                	test   al,al
c0015712:	75 10                	jne    c0015724 <Reg::getLine(char*, char*, char*)+0x33>
c0015714:	57                   	push   edi
c0015715:	56                   	push   esi
c0015716:	53                   	push   ebx
c0015717:	68 3f 60 02 c0       	push   0xc002603f
c001571c:	e8 7b fe ff ff       	call   c001559c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015721:	83 c4 10             	add    esp,0x10
c0015724:	5b                   	pop    ebx
c0015725:	5e                   	pop    esi
c0015726:	5f                   	pop    edi
c0015727:	c3                   	ret    

c0015728 <Reg::readInt(char*, char*, int*)>:
c0015728:	55                   	push   ebp
c0015729:	57                   	push   edi
c001572a:	56                   	push   esi
c001572b:	53                   	push   ebx
c001572c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015732:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015736:	57                   	push   edi
c0015737:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001573e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015745:	e8 a7 ff ff ff       	call   c00156f1 <Reg::getLine(char*, char*, char*)>
c001574a:	83 c4 10             	add    esp,0x10
c001574d:	84 c0                	test   al,al
c001574f:	0f 84 b3 00 00 00    	je     c0015808 <Reg::readInt(char*, char*, int*)+0xe0>
c0015755:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015759:	80 fa 2b             	cmp    dl,0x2b
c001575c:	74 0c                	je     c001576a <Reg::readInt(char*, char*, int*)+0x42>
c001575e:	80 fa 2d             	cmp    dl,0x2d
c0015761:	75 0e                	jne    c0015771 <Reg::readInt(char*, char*, int*)+0x49>
c0015763:	ba 01 00 00 00       	mov    edx,0x1
c0015768:	eb 0b                	jmp    c0015775 <Reg::readInt(char*, char*, int*)+0x4d>
c001576a:	ba 01 00 00 00       	mov    edx,0x1
c001576f:	eb 02                	jmp    c0015773 <Reg::readInt(char*, char*, int*)+0x4b>
c0015771:	31 d2                	xor    edx,edx
c0015773:	31 c0                	xor    eax,eax
c0015775:	be 0a 00 00 00       	mov    esi,0xa
c001577a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001577f:	75 20                	jne    c00157a1 <Reg::readInt(char*, char*, int*)+0x79>
c0015781:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015785:	80 f9 78             	cmp    cl,0x78
c0015788:	75 0a                	jne    c0015794 <Reg::readInt(char*, char*, int*)+0x6c>
c001578a:	83 c2 02             	add    edx,0x2
c001578d:	be 10 00 00 00       	mov    esi,0x10
c0015792:	eb 0d                	jmp    c00157a1 <Reg::readInt(char*, char*, int*)+0x79>
c0015794:	80 f9 62             	cmp    cl,0x62
c0015797:	75 08                	jne    c00157a1 <Reg::readInt(char*, char*, int*)+0x79>
c0015799:	83 c2 02             	add    edx,0x2
c001579c:	be 02 00 00 00       	mov    esi,0x2
c00157a1:	01 d7                	add    edi,edx
c00157a3:	31 d2                	xor    edx,edx
c00157a5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00157a7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00157ab:	80 fb 0d             	cmp    bl,0xd
c00157ae:	0f 94 c3             	sete   bl
c00157b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00157b6:	0f 94 c1             	sete   cl
c00157b9:	08 cb                	or     bl,cl
c00157bb:	75 3a                	jne    c00157f7 <Reg::readInt(char*, char*, int*)+0xcf>
c00157bd:	0f af d6             	imul   edx,esi
c00157c0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00157c5:	83 fe 10             	cmp    esi,0x10
c00157c8:	75 26                	jne    c00157f0 <Reg::readInt(char*, char*, int*)+0xc8>
c00157ca:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00157ce:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00157d1:	89 e9                	mov    ecx,ebp
c00157d3:	80 f9 05             	cmp    cl,0x5
c00157d6:	77 06                	ja     c00157de <Reg::readInt(char*, char*, int*)+0xb6>
c00157d8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00157dc:	eb 16                	jmp    c00157f4 <Reg::readInt(char*, char*, int*)+0xcc>
c00157de:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00157e2:	83 e9 61             	sub    ecx,0x61
c00157e5:	80 f9 05             	cmp    cl,0x5
c00157e8:	77 06                	ja     c00157f0 <Reg::readInt(char*, char*, int*)+0xc8>
c00157ea:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00157ee:	eb 04                	jmp    c00157f4 <Reg::readInt(char*, char*, int*)+0xcc>
c00157f0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00157f4:	47                   	inc    edi
c00157f5:	eb ae                	jmp    c00157a5 <Reg::readInt(char*, char*, int*)+0x7d>
c00157f7:	84 c0                	test   al,al
c00157f9:	74 02                	je     c00157fd <Reg::readInt(char*, char*, int*)+0xd5>
c00157fb:	f7 da                	neg    edx
c00157fd:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015804:	89 10                	mov    DWORD PTR [eax],edx
c0015806:	88 d8                	mov    al,bl
c0015808:	81 c4 ec 00 00 00    	add    esp,0xec
c001580e:	5b                   	pop    ebx
c001580f:	5e                   	pop    esi
c0015810:	5f                   	pop    edi
c0015811:	5d                   	pop    ebp
c0015812:	c3                   	ret    

c0015813 <Reg::readString(char*, char*, char*, int)>:
c0015813:	57                   	push   edi
c0015814:	56                   	push   esi
c0015815:	53                   	push   ebx
c0015816:	81 ec d4 00 00 00    	sub    esp,0xd4
c001581c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015823:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015827:	57                   	push   edi
c0015828:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001582f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015836:	e8 b6 fe ff ff       	call   c00156f1 <Reg::getLine(char*, char*, char*)>
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	89 c6                	mov    esi,eax
c0015840:	84 c0                	test   al,al
c0015842:	74 44                	je     c0015888 <Reg::readString(char*, char*, char*, int)+0x75>
c0015844:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001584b:	31 c0                	xor    eax,eax
c001584d:	4a                   	dec    edx
c001584e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015851:	84 c9                	test   cl,cl
c0015853:	74 0f                	je     c0015864 <Reg::readString(char*, char*, char*, int)+0x51>
c0015855:	39 c2                	cmp    edx,eax
c0015857:	7e 0b                	jle    c0015864 <Reg::readString(char*, char*, char*, int)+0x51>
c0015859:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001585c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015861:	40                   	inc    eax
c0015862:	eb ea                	jmp    c001584e <Reg::readString(char*, char*, char*, int)+0x3b>
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	53                   	push   ebx
c0015868:	e8 33 ae fe ff       	call   c00006a0 <strlen>
c001586d:	83 c4 10             	add    esp,0x10
c0015870:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015875:	75 11                	jne    c0015888 <Reg::readString(char*, char*, char*, int)+0x75>
c0015877:	83 ec 0c             	sub    esp,0xc
c001587a:	53                   	push   ebx
c001587b:	e8 20 ae fe ff       	call   c00006a0 <strlen>
c0015880:	83 c4 10             	add    esp,0x10
c0015883:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015888:	81 c4 d0 00 00 00    	add    esp,0xd0
c001588e:	89 f0                	mov    eax,esi
c0015890:	5b                   	pop    ebx
c0015891:	5e                   	pop    esi
c0015892:	5f                   	pop    edi
c0015893:	c3                   	ret    

c0015894 <Reg::readBool(char*, char*, bool*)>:
c0015894:	83 ec 20             	sub    esp,0x20
c0015897:	8d 44 24 10          	lea    eax,[esp+0x10]
c001589b:	50                   	push   eax
c001589c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158a4:	e8 7f fe ff ff       	call   c0015728 <Reg::readInt(char*, char*, int*)>
c00158a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00158ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00158b2:	0f 95 02             	setne  BYTE PTR [edx]
c00158b5:	83 c4 2c             	add    esp,0x2c
c00158b8:	c3                   	ret    

c00158b9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00158b9:	53                   	push   ebx
c00158ba:	83 ec 1c             	sub    esp,0x1c
c00158bd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00158c1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00158c5:	50                   	push   eax
c00158c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158ce:	e8 c1 ff ff ff       	call   c0015894 <Reg::readBool(char*, char*, bool*)>
c00158d3:	83 c4 10             	add    esp,0x10
c00158d6:	84 c0                	test   al,al
c00158d8:	74 04                	je     c00158de <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00158da:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00158de:	88 d8                	mov    al,bl
c00158e0:	83 c4 18             	add    esp,0x18
c00158e3:	5b                   	pop    ebx
c00158e4:	c3                   	ret    

c00158e5 <Reg::readIntWithDefault(char*, char*, int)>:
c00158e5:	53                   	push   ebx
c00158e6:	83 ec 1c             	sub    esp,0x1c
c00158e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00158ed:	8d 44 24 10          	lea    eax,[esp+0x10]
c00158f1:	50                   	push   eax
c00158f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158fa:	e8 29 fe ff ff       	call   c0015728 <Reg::readInt(char*, char*, int*)>
c00158ff:	83 c4 10             	add    esp,0x10
c0015902:	84 c0                	test   al,al
c0015904:	74 04                	je     c001590a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015906:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001590a:	89 d8                	mov    eax,ebx
c001590c:	83 c4 18             	add    esp,0x18
c001590f:	5b                   	pop    ebx
c0015910:	c3                   	ret    

c0015911 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015911:	57                   	push   edi
c0015912:	56                   	push   esi
c0015913:	56                   	push   esi
c0015914:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015918:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001591c:	56                   	push   esi
c001591d:	57                   	push   edi
c001591e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015926:	e8 e8 fe ff ff       	call   c0015813 <Reg::readString(char*, char*, char*, int)>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	84 c0                	test   al,al
c0015930:	75 1a                	jne    c001594c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015932:	51                   	push   ecx
c0015933:	56                   	push   esi
c0015934:	6a 00                	push   0x0
c0015936:	57                   	push   edi
c0015937:	e8 48 ad fe ff       	call   c0000684 <memset>
c001593c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001593f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001594c:	89 f8                	mov    eax,edi
c001594e:	5a                   	pop    edx
c001594f:	5e                   	pop    esi
c0015950:	5f                   	pop    edi
c0015951:	c3                   	ret    

c0015952 <Sys::eject(regs*)>:
c0015952:	83 ec 0c             	sub    esp,0xc
c0015955:	83 ca ff             	or     edx,0xffffffff
c0015958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001595c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001595f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015964:	83 e9 41             	sub    ecx,0x41
c0015967:	83 f9 19             	cmp    ecx,0x19
c001596a:	77 18                	ja     c0015984 <Sys::eject(regs*)+0x32>
c001596c:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c0015973:	85 c9                	test   ecx,ecx
c0015975:	74 0d                	je     c0015984 <Sys::eject(regs*)+0x32>
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	51                   	push   ecx
c001597b:	e8 24 af ff ff       	call   c00108a4 <LogicalDisk::eject()>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	99                   	cdq    
c0015984:	83 c4 0c             	add    esp,0xc
c0015987:	c3                   	ret    

c0015988 <Sys::exit(regs*)>:
c0015988:	83 ec 18             	sub    esp,0x18
c001598b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001598f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015992:	e8 59 36 00 00       	call   c0018ff0 <terminateTask(int)>
c0015997:	83 c8 ff             	or     eax,0xffffffff
c001599a:	83 c4 1c             	add    esp,0x1c
c001599d:	89 c2                	mov    edx,eax
c001599f:	c3                   	ret    

c00159a0 <Sys::getCwd(regs*)>:
c00159a0:	83 ec 10             	sub    esp,0x10
c00159a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159a7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00159aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159b2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00159b5:	e8 fe 79 ff ff       	call   c000d3b8 <Fs::getcwd(Process*, char*, int)>
c00159ba:	83 c4 1c             	add    esp,0x1c
c00159bd:	99                   	cdq    
c00159be:	c3                   	ret    

c00159bf <Sys::getPID(regs*)>:
c00159bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c9:	99                   	cdq    
c00159ca:	c3                   	ret    

c00159cb <Sys::getRAMData(regs*)>:
c00159cb:	8b 0d 98 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028298
c00159d1:	69 05 94 82 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028294,0xc8
c00159db:	99                   	cdq    
c00159dc:	f7 f9                	idiv   ecx
c00159de:	c1 e0 18             	shl    eax,0x18
c00159e1:	09 c8                	or     eax,ecx
c00159e3:	99                   	cdq    
c00159e4:	c3                   	ret    

c00159e5 <Sys::getVGAPtr(regs*)>:
c00159e5:	55                   	push   ebp
c00159e6:	57                   	push   edi
c00159e7:	56                   	push   esi
c00159e8:	53                   	push   ebx
c00159e9:	83 ec 18             	sub    esp,0x18
c00159ec:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00159f0:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00159f3:	e8 fc 30 00 00       	call   c0018af4 <Thr::processFromPID(int)>
c00159f8:	83 c4 10             	add    esp,0x10
c00159fb:	89 c1                	mov    ecx,eax
c00159fd:	b8 01 00 00 00       	mov    eax,0x1
c0015a02:	85 c9                	test   ecx,ecx
c0015a04:	74 59                	je     c0015a5f <Sys::getVGAPtr(regs*)+0x7a>
c0015a06:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015a0c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015a10:	74 0c                	je     c0015a1e <Sys::getVGAPtr(regs*)+0x39>
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	53                   	push   ebx
c0015a16:	e8 12 54 ff ff       	call   c000ae2d <setActiveTerminal(VgaText*)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015a21:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015a24:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015a29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a2b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015a2e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a31:	81 c3 82 00 00 00    	add    ebx,0x82
c0015a37:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015a3d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a40:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015a43:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015a49:	50                   	push   eax
c0015a4a:	50                   	push   eax
c0015a4b:	53                   	push   ebx
c0015a4c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a4f:	05 a8 0f 00 00       	add    eax,0xfa8
c0015a54:	50                   	push   eax
c0015a55:	e8 e6 ac fe ff       	call   c0000740 <strcpy>
c0015a5a:	83 c4 10             	add    esp,0x10
c0015a5d:	31 c0                	xor    eax,eax
c0015a5f:	83 c4 0c             	add    esp,0xc
c0015a62:	31 d2                	xor    edx,edx
c0015a64:	5b                   	pop    ebx
c0015a65:	5e                   	pop    esi
c0015a66:	5f                   	pop    edi
c0015a67:	5d                   	pop    ebp
c0015a68:	c3                   	ret    

c0015a69 <Sys::loadDLL(regs*)>:
c0015a69:	56                   	push   esi
c0015a6a:	53                   	push   ebx
c0015a6b:	31 d2                	xor    edx,edx
c0015a6d:	51                   	push   ecx
c0015a6e:	b8 01 00 00 00       	mov    eax,0x1
c0015a73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a77:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015a7b:	0f 84 8c 00 00 00    	je     c0015b0d <Sys::loadDLL(regs*)+0xa4>
c0015a81:	83 ec 0c             	sub    esp,0xc
c0015a84:	68 14 01 00 00       	push   0x114
c0015a89:	e8 b1 42 ff ff       	call   c0009d3f <malloc>
c0015a8e:	83 c4 0c             	add    esp,0xc
c0015a91:	89 c3                	mov    ebx,eax
c0015a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a98:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a9b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015a9e:	53                   	push   ebx
c0015a9f:	e8 12 7b ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	31 d2                	xor    edx,edx
c0015aa9:	b8 02 00 00 00       	mov    eax,0x2
c0015aae:	85 db                	test   ebx,ebx
c0015ab0:	74 5b                	je     c0015b0d <Sys::loadDLL(regs*)+0xa4>
c0015ab2:	83 ec 0c             	sub    esp,0xc
c0015ab5:	53                   	push   ebx
c0015ab6:	e8 43 7e ff ff       	call   c000d8fe <File::exists()>
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	84 c0                	test   al,al
c0015ac0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ac2:	75 11                	jne    c0015ad5 <Sys::loadDLL(regs*)+0x6c>
c0015ac4:	83 ec 0c             	sub    esp,0xc
c0015ac7:	53                   	push   ebx
c0015ac8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	b8 03 00 00 00       	mov    eax,0x3
c0015ad3:	eb 36                	jmp    c0015b0b <Sys::loadDLL(regs*)+0xa2>
c0015ad5:	83 ec 0c             	sub    esp,0xc
c0015ad8:	53                   	push   ebx
c0015ad9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015adc:	58                   	pop    eax
c0015add:	5a                   	pop    edx
c0015ade:	6a 00                	push   0x0
c0015ae0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015ae3:	e8 0a 22 00 00       	call   c0017cf2 <Thr::loadDLL(char const*, bool)>
c0015ae8:	83 c4 10             	add    esp,0x10
c0015aeb:	89 c1                	mov    ecx,eax
c0015aed:	31 d2                	xor    edx,edx
c0015aef:	b8 04 00 00 00       	mov    eax,0x4
c0015af4:	85 c9                	test   ecx,ecx
c0015af6:	74 15                	je     c0015b0d <Sys::loadDLL(regs*)+0xa4>
c0015af8:	53                   	push   ebx
c0015af9:	53                   	push   ebx
c0015afa:	ff 35 68 82 02 c0    	push   DWORD PTR ds:0xc0028268
c0015b00:	51                   	push   ecx
c0015b01:	e8 1d 24 00 00       	call   c0017f23 <Thr::executeDLL(unsigned long, void*)>
c0015b06:	83 c4 10             	add    esp,0x10
c0015b09:	31 c0                	xor    eax,eax
c0015b0b:	31 d2                	xor    edx,edx
c0015b0d:	59                   	pop    ecx
c0015b0e:	5b                   	pop    ebx
c0015b0f:	5e                   	pop    esi
c0015b10:	c3                   	ret    

c0015b11 <Sys::read(regs*)>:
c0015b11:	57                   	push   edi
c0015b12:	56                   	push   esi
c0015b13:	53                   	push   ebx
c0015b14:	83 ec 10             	sub    esp,0x10
c0015b17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b1e:	83 f8 02             	cmp    eax,0x2
c0015b21:	77 10                	ja     c0015b33 <Sys::read(regs*)+0x22>
c0015b23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b2b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015b31:	eb 0e                	jmp    c0015b41 <Sys::read(regs*)+0x30>
c0015b33:	83 ec 0c             	sub    esp,0xc
c0015b36:	50                   	push   eax
c0015b37:	e8 5f 60 ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c0015b3c:	83 c4 10             	add    esp,0x10
c0015b3f:	89 c1                	mov    ecx,eax
c0015b41:	83 c8 ff             	or     eax,0xffffffff
c0015b44:	85 c9                	test   ecx,ecx
c0015b46:	89 c2                	mov    edx,eax
c0015b48:	74 28                	je     c0015b72 <Sys::read(regs*)+0x61>
c0015b4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015b52:	31 ff                	xor    edi,edi
c0015b54:	83 ec 0c             	sub    esp,0xc
c0015b57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015b59:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015b5d:	52                   	push   edx
c0015b5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b61:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015b64:	57                   	push   edi
c0015b65:	56                   	push   esi
c0015b66:	51                   	push   ecx
c0015b67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015b6e:	83 c4 20             	add    esp,0x20
c0015b71:	99                   	cdq    
c0015b72:	83 c4 10             	add    esp,0x10
c0015b75:	5b                   	pop    ebx
c0015b76:	5e                   	pop    esi
c0015b77:	5f                   	pop    edi
c0015b78:	c3                   	ret    

c0015b79 <Sys::sbrk(regs*)>:
c0015b79:	56                   	push   esi
c0015b7a:	53                   	push   ebx
c0015b7b:	50                   	push   eax
c0015b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b88:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015b8b:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015b91:	85 db                	test   ebx,ebx
c0015b93:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015b96:	74 02                	je     c0015b9a <Sys::sbrk(regs*)+0x21>
c0015b98:	79 06                	jns    c0015ba0 <Sys::sbrk(regs*)+0x27>
c0015b9a:	89 f0                	mov    eax,esi
c0015b9c:	31 d2                	xor    edx,edx
c0015b9e:	eb 2a                	jmp    c0015bca <Sys::sbrk(regs*)+0x51>
c0015ba0:	83 c8 ff             	or     eax,0xffffffff
c0015ba3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015ba9:	89 c2                	mov    edx,eax
c0015bab:	77 1d                	ja     c0015bca <Sys::sbrk(regs*)+0x51>
c0015bad:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015bb3:	50                   	push   eax
c0015bb4:	c1 ea 0c             	shr    edx,0xc
c0015bb7:	68 07 0c 00 00       	push   0xc07
c0015bbc:	52                   	push   edx
c0015bbd:	51                   	push   ecx
c0015bbe:	e8 9b 68 ff ff       	call   c000c45e <VAS::allocatePages(int, int)>
c0015bc3:	89 f0                	mov    eax,esi
c0015bc5:	31 d2                	xor    edx,edx
c0015bc7:	83 c4 10             	add    esp,0x10
c0015bca:	59                   	pop    ecx
c0015bcb:	5b                   	pop    ebx
c0015bcc:	5e                   	pop    esi
c0015bcd:	c3                   	ret    

c0015bce <Sys::setCwd(regs*)>:
c0015bce:	83 ec 14             	sub    esp,0x14
c0015bd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bd5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015bd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bdd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015be0:	e8 b8 7d ff ff       	call   c000d99d <Fs::setcwd(Process*, char*)>
c0015be5:	83 c4 1c             	add    esp,0x1c
c0015be8:	99                   	cdq    
c0015be9:	c3                   	ret    

c0015bea <Sys::setTime(regs*)>:
c0015bea:	55                   	push   ebp
c0015beb:	31 c9                	xor    ecx,ecx
c0015bed:	57                   	push   edi
c0015bee:	bd 0c 00 00 00       	mov    ebp,0xc
c0015bf3:	56                   	push   esi
c0015bf4:	53                   	push   ebx
c0015bf5:	31 db                	xor    ebx,ebx
c0015bf7:	83 ec 10             	sub    esp,0x10
c0015bfa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015bfe:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015c01:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015c04:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015c07:	89 c2                	mov    edx,eax
c0015c09:	66 81 ef 6c 07       	sub    di,0x76c
c0015c0e:	83 e2 1f             	and    edx,0x1f
c0015c11:	c1 e7 10             	shl    edi,0x10
c0015c14:	42                   	inc    edx
c0015c15:	c1 e8 05             	shr    eax,0x5
c0015c18:	88 d1                	mov    cl,dl
c0015c1a:	31 d2                	xor    edx,edx
c0015c1c:	f7 f5                	div    ebp
c0015c1e:	89 dd                	mov    ebp,ebx
c0015c20:	88 d5                	mov    ch,dl
c0015c22:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015c28:	0f b7 c1             	movzx  eax,cx
c0015c2b:	31 d2                	xor    edx,edx
c0015c2d:	09 f8                	or     eax,edi
c0015c2f:	bf 3c 00 00 00       	mov    edi,0x3c
c0015c34:	89 c1                	mov    ecx,eax
c0015c36:	89 f0                	mov    eax,esi
c0015c38:	f7 f7                	div    edi
c0015c3a:	c1 e2 10             	shl    edx,0x10
c0015c3d:	09 d5                	or     ebp,edx
c0015c3f:	31 d2                	xor    edx,edx
c0015c41:	89 eb                	mov    ebx,ebp
c0015c43:	f7 f7                	div    edi
c0015c45:	bf 10 0e 00 00       	mov    edi,0xe10
c0015c4a:	88 d7                	mov    bh,dl
c0015c4c:	89 f0                	mov    eax,esi
c0015c4e:	31 d2                	xor    edx,edx
c0015c50:	f7 f7                	div    edi
c0015c52:	bf 18 00 00 00       	mov    edi,0x18
c0015c57:	31 d2                	xor    edx,edx
c0015c59:	f7 f7                	div    edi
c0015c5b:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0015c60:	88 d3                	mov    bl,dl
c0015c62:	53                   	push   ebx
c0015c63:	51                   	push   ecx
c0015c64:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015c6a:	e8 6f 85 ff ff       	call   c000e1de <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015c6f:	83 c4 1c             	add    esp,0x1c
c0015c72:	83 f0 01             	xor    eax,0x1
c0015c75:	5b                   	pop    ebx
c0015c76:	0f b6 c0             	movzx  eax,al
c0015c79:	5e                   	pop    esi
c0015c7a:	31 d2                	xor    edx,edx
c0015c7c:	5f                   	pop    edi
c0015c7d:	5d                   	pop    ebp
c0015c7e:	c3                   	ret    

c0015c7f <Sys::timezone(regs*)>:
c0015c7f:	53                   	push   ebx
c0015c80:	83 ec 08             	sub    esp,0x8
c0015c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c87:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015c8b:	75 17                	jne    c0015ca4 <Sys::timezone(regs*)+0x25>
c0015c8d:	83 ec 0c             	sub    esp,0xc
c0015c90:	68 5a 60 02 c0       	push   0xc002605a
c0015c95:	e8 b1 73 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0015c9a:	83 c8 ff             	or     eax,0xffffffff
c0015c9d:	83 c4 10             	add    esp,0x10
c0015ca0:	89 c2                	mov    edx,eax
c0015ca2:	eb 20                	jmp    c0015cc4 <Sys::timezone(regs*)+0x45>
c0015ca4:	83 ec 0c             	sub    esp,0xc
c0015ca7:	68 6f 60 02 c0       	push   0xc002606f
c0015cac:	e8 9a 73 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0015cb1:	58                   	pop    eax
c0015cb2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015cb5:	e8 86 82 ff ff       	call   c000df40 <User::loadClockSettings(int)>
c0015cba:	83 c4 10             	add    esp,0x10
c0015cbd:	b8 01 00 00 00       	mov    eax,0x1
c0015cc2:	31 d2                	xor    edx,edx
c0015cc4:	83 c4 08             	add    esp,0x8
c0015cc7:	5b                   	pop    ebx
c0015cc8:	c3                   	ret    

c0015cc9 <Sys::write(regs*)>:
c0015cc9:	57                   	push   edi
c0015cca:	56                   	push   esi
c0015ccb:	53                   	push   ebx
c0015ccc:	83 ec 10             	sub    esp,0x10
c0015ccf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015cd6:	83 f8 02             	cmp    eax,0x2
c0015cd9:	77 10                	ja     c0015ceb <Sys::write(regs*)+0x22>
c0015cdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ce3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015ce9:	eb 0e                	jmp    c0015cf9 <Sys::write(regs*)+0x30>
c0015ceb:	83 ec 0c             	sub    esp,0xc
c0015cee:	50                   	push   eax
c0015cef:	e8 a7 5e ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c0015cf4:	83 c4 10             	add    esp,0x10
c0015cf7:	89 c1                	mov    ecx,eax
c0015cf9:	83 c8 ff             	or     eax,0xffffffff
c0015cfc:	85 c9                	test   ecx,ecx
c0015cfe:	89 c2                	mov    edx,eax
c0015d00:	74 28                	je     c0015d2a <Sys::write(regs*)+0x61>
c0015d02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d0a:	31 ff                	xor    edi,edi
c0015d0c:	83 ec 0c             	sub    esp,0xc
c0015d0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015d11:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015d15:	52                   	push   edx
c0015d16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d19:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d1c:	57                   	push   edi
c0015d1d:	56                   	push   esi
c0015d1e:	51                   	push   ecx
c0015d1f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015d22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d26:	83 c4 20             	add    esp,0x20
c0015d29:	99                   	cdq    
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	5b                   	pop    ebx
c0015d2e:	5e                   	pop    esi
c0015d2f:	5f                   	pop    edi
c0015d30:	c3                   	ret    

c0015d31 <Sys::wsbe(regs*)>:
c0015d31:	57                   	push   edi
c0015d32:	b9 0b 00 00 00       	mov    ecx,0xb
c0015d37:	56                   	push   esi
c0015d38:	be ae 60 02 c0       	mov    esi,0xc00260ae
c0015d3d:	53                   	push   ebx
c0015d3e:	83 ec 30             	sub    esp,0x30
c0015d41:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015d45:	fc                   	cld    
c0015d46:	83 ec 0c             	sub    esp,0xc
c0015d49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015d4b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015d4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d57:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015d5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d5f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015d62:	57                   	push   edi
c0015d63:	e8 38 a9 fe ff       	call   c00006a0 <strlen>
c0015d68:	5a                   	pop    edx
c0015d69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015d6d:	52                   	push   edx
c0015d6e:	31 d2                	xor    edx,edx
c0015d70:	57                   	push   edi
c0015d71:	52                   	push   edx
c0015d72:	50                   	push   eax
c0015d73:	56                   	push   esi
c0015d74:	ff d3                	call   ebx
c0015d76:	83 c4 14             	add    esp,0x14
c0015d79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015d7d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d80:	e8 6b 32 00 00       	call   c0018ff0 <terminateTask(int)>
c0015d85:	83 c4 40             	add    esp,0x40
c0015d88:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015d8d:	5b                   	pop    ebx
c0015d8e:	31 d2                	xor    edx,edx
c0015d90:	5e                   	pop    esi
c0015d91:	5f                   	pop    edi
c0015d92:	c3                   	ret    

c0015d93 <Sys::yield(regs*)>:
c0015d93:	83 ec 0c             	sub    esp,0xc
c0015d96:	fa                   	cli    
c0015d97:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0015d9d:	e8 36 29 00 00       	call   c00186d8 <schedule()>
c0015da2:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0015da7:	48                   	dec    eax
c0015da8:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0015dad:	75 01                	jne    c0015db0 <Sys::yield(regs*)+0x1d>
c0015daf:	fb                   	sti    
c0015db0:	8b 15 8c 88 02 c0    	mov    edx,DWORD PTR ds:0xc002888c
c0015db6:	83 c4 0c             	add    esp,0xc
c0015db9:	89 d0                	mov    eax,edx
c0015dbb:	c1 ea 11             	shr    edx,0x11
c0015dbe:	c1 e0 07             	shl    eax,0x7
c0015dc1:	25 80 30 0f 00       	and    eax,0xf3080
c0015dc6:	31 d0                	xor    eax,edx
c0015dc8:	31 d2                	xor    edx,edx
c0015dca:	c3                   	ret    

c0015dcb <sysCallSeekDir(regs*)>:
c0015dcb:	31 c0                	xor    eax,eax
c0015dcd:	31 d2                	xor    edx,edx
c0015dcf:	c3                   	ret    

c0015dd0 <sysCallTellDir(regs*)>:
c0015dd0:	31 c0                	xor    eax,eax
c0015dd2:	31 d2                	xor    edx,edx
c0015dd4:	c3                   	ret    

c0015dd5 <sysCallVerify(regs*)>:
c0015dd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dd9:	31 d2                	xor    edx,edx
c0015ddb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015dde:	c3                   	ret    

c0015ddf <sysCallGetArgc(regs*)>:
c0015ddf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015de7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015ded:	99                   	cdq    
c0015dee:	c3                   	ret    

c0015def <sysFormatDisk(regs*)>:
c0015def:	56                   	push   esi
c0015df0:	53                   	push   ebx
c0015df1:	53                   	push   ebx
c0015df2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015df6:	8b 1d 98 83 02 c0    	mov    ebx,DWORD PTR ds:0xc0028398
c0015dfc:	eb 25                	jmp    c0015e23 <sysFormatDisk(regs*)+0x34>
c0015dfe:	83 ec 0c             	sub    esp,0xc
c0015e01:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015e04:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e06:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015e09:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e0c:	50                   	push   eax
c0015e0d:	ff 34 85 20 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd77e0]
c0015e14:	53                   	push   ebx
c0015e15:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015e18:	83 c4 20             	add    esp,0x20
c0015e1b:	83 f8 08             	cmp    eax,0x8
c0015e1e:	75 12                	jne    c0015e32 <sysFormatDisk(regs*)+0x43>
c0015e20:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e23:	85 db                	test   ebx,ebx
c0015e25:	75 d7                	jne    c0015dfe <sysFormatDisk(regs*)+0xf>
c0015e27:	59                   	pop    ecx
c0015e28:	b8 03 00 00 00       	mov    eax,0x3
c0015e2d:	31 d2                	xor    edx,edx
c0015e2f:	5b                   	pop    ebx
c0015e30:	5e                   	pop    esi
c0015e31:	c3                   	ret    
c0015e32:	85 c0                	test   eax,eax
c0015e34:	74 1b                	je     c0015e51 <sysFormatDisk(regs*)+0x62>
c0015e36:	83 f8 09             	cmp    eax,0x9
c0015e39:	74 0b                	je     c0015e46 <sysFormatDisk(regs*)+0x57>
c0015e3b:	59                   	pop    ecx
c0015e3c:	b8 02 00 00 00       	mov    eax,0x2
c0015e41:	31 d2                	xor    edx,edx
c0015e43:	5b                   	pop    ebx
c0015e44:	5e                   	pop    esi
c0015e45:	c3                   	ret    
c0015e46:	59                   	pop    ecx
c0015e47:	b8 01 00 00 00       	mov    eax,0x1
c0015e4c:	31 d2                	xor    edx,edx
c0015e4e:	5b                   	pop    ebx
c0015e4f:	5e                   	pop    esi
c0015e50:	c3                   	ret    
c0015e51:	59                   	pop    ecx
c0015e52:	31 c0                	xor    eax,eax
c0015e54:	31 d2                	xor    edx,edx
c0015e56:	5b                   	pop    ebx
c0015e57:	5e                   	pop    esi
c0015e58:	c3                   	ret    

c0015e59 <sysSetDiskVolumeLabel(regs*)>:
c0015e59:	56                   	push   esi
c0015e5a:	53                   	push   ebx
c0015e5b:	53                   	push   ebx
c0015e5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e60:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015e63:	83 f8 19             	cmp    eax,0x19
c0015e66:	77 2d                	ja     c0015e95 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e68:	8b 0c 85 20 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd77e0]
c0015e6f:	85 c9                	test   ecx,ecx
c0015e71:	74 22                	je     c0015e95 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e73:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015e76:	85 db                	test   ebx,ebx
c0015e78:	74 1b                	je     c0015e95 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e7a:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015e80:	85 d2                	test   edx,edx
c0015e82:	74 11                	je     c0015e95 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e84:	8b 32                	mov    esi,DWORD PTR [edx]
c0015e86:	53                   	push   ebx
c0015e87:	50                   	push   eax
c0015e88:	51                   	push   ecx
c0015e89:	52                   	push   edx
c0015e8a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015e8d:	83 c4 10             	add    esp,0x10
c0015e90:	99                   	cdq    
c0015e91:	59                   	pop    ecx
c0015e92:	5b                   	pop    ebx
c0015e93:	5e                   	pop    esi
c0015e94:	c3                   	ret    
c0015e95:	59                   	pop    ecx
c0015e96:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ea0:	5b                   	pop    ebx
c0015ea1:	5e                   	pop    esi
c0015ea2:	c3                   	ret    

c0015ea3 <sysGetDiskVolumeLabel(regs*)>:
c0015ea3:	57                   	push   edi
c0015ea4:	56                   	push   esi
c0015ea5:	53                   	push   ebx
c0015ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eaa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ead:	83 fa 19             	cmp    edx,0x19
c0015eb0:	77 38                	ja     c0015eea <sysGetDiskVolumeLabel(regs*)+0x47>
c0015eb2:	8b 0c 95 20 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd77e0]
c0015eb9:	85 c9                	test   ecx,ecx
c0015ebb:	74 2d                	je     c0015eea <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ebd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015ec0:	85 db                	test   ebx,ebx
c0015ec2:	74 26                	je     c0015eea <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ec4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015ec7:	85 f6                	test   esi,esi
c0015ec9:	74 1f                	je     c0015eea <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ecb:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015ed1:	85 c0                	test   eax,eax
c0015ed3:	74 15                	je     c0015eea <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ed5:	83 ec 0c             	sub    esp,0xc
c0015ed8:	8b 38                	mov    edi,DWORD PTR [eax]
c0015eda:	56                   	push   esi
c0015edb:	53                   	push   ebx
c0015edc:	52                   	push   edx
c0015edd:	51                   	push   ecx
c0015ede:	50                   	push   eax
c0015edf:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015ee2:	83 c4 20             	add    esp,0x20
c0015ee5:	99                   	cdq    
c0015ee6:	5b                   	pop    ebx
c0015ee7:	5e                   	pop    esi
c0015ee8:	5f                   	pop    edi
c0015ee9:	c3                   	ret    
c0015eea:	5b                   	pop    ebx
c0015eeb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ef0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ef5:	5e                   	pop    esi
c0015ef6:	5f                   	pop    edi
c0015ef7:	c3                   	ret    

c0015ef8 <sysShutdown(regs*)>:
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f02:	85 c0                	test   eax,eax
c0015f04:	74 18                	je     c0015f1e <sysShutdown(regs*)+0x26>
c0015f06:	83 f8 01             	cmp    eax,0x1
c0015f09:	74 38                	je     c0015f43 <sysShutdown(regs*)+0x4b>
c0015f0b:	83 f8 02             	cmp    eax,0x2
c0015f0e:	74 24                	je     c0015f34 <sysShutdown(regs*)+0x3c>
c0015f10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f15:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f1a:	83 c4 0c             	add    esp,0xc
c0015f1d:	c3                   	ret    
c0015f1e:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0015f23:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f25:	6a 00                	push   0x0
c0015f27:	6a 00                	push   0x0
c0015f29:	6a 00                	push   0x0
c0015f2b:	50                   	push   eax
c0015f2c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	eb dc                	jmp    c0015f10 <sysShutdown(regs*)+0x18>
c0015f34:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0015f39:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f3b:	6a 00                	push   0x0
c0015f3d:	6a 00                	push   0x0
c0015f3f:	6a 01                	push   0x1
c0015f41:	eb e8                	jmp    c0015f2b <sysShutdown(regs*)+0x33>
c0015f43:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0015f48:	85 c0                	test   eax,eax
c0015f4a:	74 02                	je     c0015f4e <sysShutdown(regs*)+0x56>
c0015f4c:	ff d0                	call   eax
c0015f4e:	31 c0                	xor    eax,eax
c0015f50:	31 d2                	xor    edx,edx
c0015f52:	83 c4 0c             	add    esp,0xc
c0015f55:	c3                   	ret    

c0015f56 <sysCallRealpath(regs*)>:
c0015f56:	83 ec 0c             	sub    esp,0xc
c0015f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015f60:	85 d2                	test   edx,edx
c0015f62:	74 07                	je     c0015f6b <sysCallRealpath(regs*)+0x15>
c0015f64:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015f67:	85 c0                	test   eax,eax
c0015f69:	75 0b                	jne    c0015f76 <sysCallRealpath(regs*)+0x20>
c0015f6b:	b8 01 00 00 00       	mov    eax,0x1
c0015f70:	31 d2                	xor    edx,edx
c0015f72:	83 c4 0c             	add    esp,0xc
c0015f75:	c3                   	ret    
c0015f76:	51                   	push   ecx
c0015f77:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f7d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015f80:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015f86:	51                   	push   ecx
c0015f87:	52                   	push   edx
c0015f88:	50                   	push   eax
c0015f89:	e8 7e 74 ff ff       	call   c000d40c <Fs::standardiseFiles(char*, char const*, char const*)>
c0015f8e:	83 c4 10             	add    esp,0x10
c0015f91:	31 c0                	xor    eax,eax
c0015f93:	31 d2                	xor    edx,edx
c0015f95:	83 c4 0c             	add    esp,0xc
c0015f98:	c3                   	ret    

c0015f99 <sysCallReadDir(regs*)>:
c0015f99:	53                   	push   ebx
c0015f9a:	83 ec 18             	sub    esp,0x18
c0015f9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015fa1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015fa4:	83 f8 02             	cmp    eax,0x2
c0015fa7:	76 60                	jbe    c0016009 <sysCallReadDir(regs*)+0x70>
c0015fa9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015fb0:	77 48                	ja     c0015ffa <sysCallReadDir(regs*)+0x61>
c0015fb2:	83 ec 0c             	sub    esp,0xc
c0015fb5:	50                   	push   eax
c0015fb6:	e8 e0 5b ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	85 c0                	test   eax,eax
c0015fc0:	74 38                	je     c0015ffa <sysCallReadDir(regs*)+0x61>
c0015fc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015fca:	83 ec 0c             	sub    esp,0xc
c0015fcd:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fcf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015fd3:	51                   	push   ecx
c0015fd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015fd7:	6a 00                	push   0x0
c0015fd9:	68 10 01 00 00       	push   0x110
c0015fde:	50                   	push   eax
c0015fdf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fe2:	83 c4 20             	add    esp,0x20
c0015fe5:	85 c0                	test   eax,eax
c0015fe7:	74 29                	je     c0016012 <sysCallReadDir(regs*)+0x79>
c0015fe9:	83 f8 07             	cmp    eax,0x7
c0015fec:	74 1b                	je     c0016009 <sysCallReadDir(regs*)+0x70>
c0015fee:	b8 02 00 00 00       	mov    eax,0x2
c0015ff3:	31 d2                	xor    edx,edx
c0015ff5:	83 c4 18             	add    esp,0x18
c0015ff8:	5b                   	pop    ebx
c0015ff9:	c3                   	ret    
c0015ffa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016004:	83 c4 18             	add    esp,0x18
c0016007:	5b                   	pop    ebx
c0016008:	c3                   	ret    
c0016009:	b8 01 00 00 00       	mov    eax,0x1
c001600e:	31 d2                	xor    edx,edx
c0016010:	eb e3                	jmp    c0015ff5 <sysCallReadDir(regs*)+0x5c>
c0016012:	31 c0                	xor    eax,eax
c0016014:	31 d2                	xor    edx,edx
c0016016:	eb dd                	jmp    c0015ff5 <sysCallReadDir(regs*)+0x5c>

c0016018 <sysCallIsATTY(regs*)>:
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016022:	83 f8 02             	cmp    eax,0x2
c0016025:	76 07                	jbe    c001602e <sysCallIsATTY(regs*)+0x16>
c0016027:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001602c:	75 26                	jne    c0016054 <sysCallIsATTY(regs*)+0x3c>
c001602e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016033:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016036:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001603c:	85 c0                	test   eax,eax
c001603e:	74 24                	je     c0016064 <sysCallIsATTY(regs*)+0x4c>
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	8b 10                	mov    edx,DWORD PTR [eax]
c0016045:	50                   	push   eax
c0016046:	ff 12                	call   DWORD PTR [edx]
c0016048:	31 d2                	xor    edx,edx
c001604a:	0f b6 c0             	movzx  eax,al
c001604d:	83 c4 10             	add    esp,0x10
c0016050:	83 c4 0c             	add    esp,0xc
c0016053:	c3                   	ret    
c0016054:	83 ec 0c             	sub    esp,0xc
c0016057:	50                   	push   eax
c0016058:	e8 3e 5b ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c001605d:	83 c4 10             	add    esp,0x10
c0016060:	85 c0                	test   eax,eax
c0016062:	75 dc                	jne    c0016040 <sysCallIsATTY(regs*)+0x28>
c0016064:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016069:	ba ff ff ff ff       	mov    edx,0xffffffff
c001606e:	83 c4 0c             	add    esp,0xc
c0016071:	c3                   	ret    

c0016072 <sysCallSeek(regs*)>:
c0016072:	53                   	push   ebx
c0016073:	83 ec 08             	sub    esp,0x8
c0016076:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001607a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001607d:	8d 50 fd             	lea    edx,[eax-0x3]
c0016080:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016086:	77 32                	ja     c00160ba <sysCallSeek(regs*)+0x48>
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	50                   	push   eax
c001608c:	e8 0a 5b ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c0016091:	83 c4 0c             	add    esp,0xc
c0016094:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016097:	31 db                	xor    ebx,ebx
c0016099:	53                   	push   ebx
c001609a:	51                   	push   ecx
c001609b:	50                   	push   eax
c001609c:	e8 ad 76 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	85 c0                	test   eax,eax
c00160a6:	0f 95 c0             	setne  al
c00160a9:	31 d2                	xor    edx,edx
c00160ab:	0f b6 c0             	movzx  eax,al
c00160ae:	f7 d8                	neg    eax
c00160b0:	83 d2 00             	adc    edx,0x0
c00160b3:	83 c4 08             	add    esp,0x8
c00160b6:	f7 da                	neg    edx
c00160b8:	5b                   	pop    ebx
c00160b9:	c3                   	ret    
c00160ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160c4:	83 c4 08             	add    esp,0x8
c00160c7:	5b                   	pop    ebx
c00160c8:	c3                   	ret    

c00160c9 <sysCallTell(regs*)>:
c00160c9:	53                   	push   ebx
c00160ca:	83 ec 08             	sub    esp,0x8
c00160cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160d4:	83 f8 02             	cmp    eax,0x2
c00160d7:	76 4d                	jbe    c0016126 <sysCallTell(regs*)+0x5d>
c00160d9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00160de:	76 19                	jbe    c00160f9 <sysCallTell(regs*)+0x30>
c00160e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00160e3:	31 d2                	xor    edx,edx
c00160e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00160eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160f2:	31 c0                	xor    eax,eax
c00160f4:	83 c4 08             	add    esp,0x8
c00160f7:	5b                   	pop    ebx
c00160f8:	c3                   	ret    
c00160f9:	83 ec 0c             	sub    esp,0xc
c00160fc:	50                   	push   eax
c00160fd:	e8 99 5a ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c0016102:	5a                   	pop    edx
c0016103:	59                   	pop    ecx
c0016104:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016107:	50                   	push   eax
c0016108:	e8 97 76 ff ff       	call   c000d7a4 <File::tell(unsigned long long*)>
c001610d:	83 c4 10             	add    esp,0x10
c0016110:	85 c0                	test   eax,eax
c0016112:	0f 95 c0             	setne  al
c0016115:	31 d2                	xor    edx,edx
c0016117:	0f b6 c0             	movzx  eax,al
c001611a:	f7 d8                	neg    eax
c001611c:	83 d2 00             	adc    edx,0x0
c001611f:	83 c4 08             	add    esp,0x8
c0016122:	f7 da                	neg    edx
c0016124:	5b                   	pop    ebx
c0016125:	c3                   	ret    
c0016126:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001612b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016130:	83 c4 08             	add    esp,0x8
c0016133:	5b                   	pop    ebx
c0016134:	c3                   	ret    

c0016135 <sysCallSize(regs*)>:
c0016135:	53                   	push   ebx
c0016136:	83 ec 18             	sub    esp,0x18
c0016139:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001613d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016140:	83 f8 02             	cmp    eax,0x2
c0016143:	76 53                	jbe    c0016198 <sysCallSize(regs*)+0x63>
c0016145:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001614a:	76 19                	jbe    c0016165 <sysCallSize(regs*)+0x30>
c001614c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001614f:	31 d2                	xor    edx,edx
c0016151:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016157:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001615e:	31 c0                	xor    eax,eax
c0016160:	83 c4 18             	add    esp,0x18
c0016163:	5b                   	pop    ebx
c0016164:	c3                   	ret    
c0016165:	83 ec 0c             	sub    esp,0xc
c0016168:	50                   	push   eax
c0016169:	e8 2d 5a ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c001616e:	83 c4 0c             	add    esp,0xc
c0016171:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016175:	52                   	push   edx
c0016176:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016179:	50                   	push   eax
c001617a:	e8 bd 77 ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c001617f:	83 c4 10             	add    esp,0x10
c0016182:	85 c0                	test   eax,eax
c0016184:	0f 95 c0             	setne  al
c0016187:	31 d2                	xor    edx,edx
c0016189:	0f b6 c0             	movzx  eax,al
c001618c:	f7 d8                	neg    eax
c001618e:	83 d2 00             	adc    edx,0x0
c0016191:	83 c4 18             	add    esp,0x18
c0016194:	f7 da                	neg    edx
c0016196:	5b                   	pop    ebx
c0016197:	c3                   	ret    
c0016198:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001619d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161a2:	83 c4 18             	add    esp,0x18
c00161a5:	5b                   	pop    ebx
c00161a6:	c3                   	ret    

c00161a7 <sysCallSizeFromFilename(regs*)>:
c00161a7:	57                   	push   edi
c00161a8:	56                   	push   esi
c00161a9:	53                   	push   ebx
c00161aa:	83 ec 20             	sub    esp,0x20
c00161ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00161b1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00161b4:	83 fb 02             	cmp    ebx,0x2
c00161b7:	0f 86 88 00 00 00    	jbe    c0016245 <sysCallSizeFromFilename(regs*)+0x9e>
c00161bd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00161c3:	76 1b                	jbe    c00161e0 <sysCallSizeFromFilename(regs*)+0x39>
c00161c5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161c8:	31 d2                	xor    edx,edx
c00161ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00161d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161d7:	83 c4 20             	add    esp,0x20
c00161da:	31 c0                	xor    eax,eax
c00161dc:	5b                   	pop    ebx
c00161dd:	5e                   	pop    esi
c00161de:	5f                   	pop    edi
c00161df:	c3                   	ret    
c00161e0:	83 ec 0c             	sub    esp,0xc
c00161e3:	68 14 01 00 00       	push   0x114
c00161e8:	e8 52 3b ff ff       	call   c0009d3f <malloc>
c00161ed:	83 c4 0c             	add    esp,0xc
c00161f0:	89 c7                	mov    edi,eax
c00161f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161f7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161fa:	53                   	push   ebx
c00161fb:	57                   	push   edi
c00161fc:	e8 b5 73 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0016201:	83 c4 0c             	add    esp,0xc
c0016204:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016208:	50                   	push   eax
c0016209:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001620c:	57                   	push   edi
c001620d:	e8 2a 77 ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	85 ff                	test   edi,edi
c0016217:	74 14                	je     c001622d <sysCallSizeFromFilename(regs*)+0x86>
c0016219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001621d:	8b 17                	mov    edx,DWORD PTR [edi]
c001621f:	83 ec 0c             	sub    esp,0xc
c0016222:	57                   	push   edi
c0016223:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016226:	83 c4 10             	add    esp,0x10
c0016229:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001622d:	85 c0                	test   eax,eax
c001622f:	0f 95 c0             	setne  al
c0016232:	31 d2                	xor    edx,edx
c0016234:	0f b6 c0             	movzx  eax,al
c0016237:	f7 d8                	neg    eax
c0016239:	83 d2 00             	adc    edx,0x0
c001623c:	83 c4 20             	add    esp,0x20
c001623f:	f7 da                	neg    edx
c0016241:	5b                   	pop    ebx
c0016242:	5e                   	pop    esi
c0016243:	5f                   	pop    edi
c0016244:	c3                   	ret    
c0016245:	83 c4 20             	add    esp,0x20
c0016248:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001624d:	5b                   	pop    ebx
c001624e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016253:	5e                   	pop    esi
c0016254:	5f                   	pop    edi
c0016255:	c3                   	ret    

c0016256 <sysCallClose(regs*)>:
c0016256:	53                   	push   ebx
c0016257:	83 ec 08             	sub    esp,0x8
c001625a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001625e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016261:	83 f8 02             	cmp    eax,0x2
c0016264:	76 41                	jbe    c00162a7 <sysCallClose(regs*)+0x51>
c0016266:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001626c:	83 fa 01             	cmp    edx,0x1
c001626f:	76 2d                	jbe    c001629e <sysCallClose(regs*)+0x48>
c0016271:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016276:	77 2f                	ja     c00162a7 <sysCallClose(regs*)+0x51>
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	50                   	push   eax
c001627c:	e8 1a 59 ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c0016281:	89 c3                	mov    ebx,eax
c0016283:	89 04 24             	mov    DWORD PTR [esp],eax
c0016286:	e8 63 74 ff ff       	call   c000d6ee <File::close()>
c001628b:	83 c4 10             	add    esp,0x10
c001628e:	85 db                	test   ebx,ebx
c0016290:	74 0c                	je     c001629e <sysCallClose(regs*)+0x48>
c0016292:	83 ec 0c             	sub    esp,0xc
c0016295:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016297:	53                   	push   ebx
c0016298:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001629b:	83 c4 10             	add    esp,0x10
c001629e:	31 c0                	xor    eax,eax
c00162a0:	31 d2                	xor    edx,edx
c00162a2:	83 c4 08             	add    esp,0x8
c00162a5:	5b                   	pop    ebx
c00162a6:	c3                   	ret    
c00162a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162b1:	83 c4 08             	add    esp,0x8
c00162b4:	5b                   	pop    ebx
c00162b5:	c3                   	ret    

c00162b6 <sysCallOpenDir(regs*)>:
c00162b6:	56                   	push   esi
c00162b7:	53                   	push   ebx
c00162b8:	53                   	push   ebx
c00162b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00162c0:	85 f6                	test   esi,esi
c00162c2:	74 59                	je     c001631d <sysCallOpenDir(regs*)+0x67>
c00162c4:	83 ec 0c             	sub    esp,0xc
c00162c7:	68 14 01 00 00       	push   0x114
c00162cc:	e8 6e 3a ff ff       	call   c0009d3f <malloc>
c00162d1:	83 c4 0c             	add    esp,0xc
c00162d4:	89 c6                	mov    esi,eax
c00162d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162e1:	56                   	push   esi
c00162e2:	e8 2f 78 ff ff       	call   c000db16 <Directory::Directory(char const*, Process*)>
c00162e7:	83 c4 10             	add    esp,0x10
c00162ea:	85 f6                	test   esi,esi
c00162ec:	74 2f                	je     c001631d <sysCallOpenDir(regs*)+0x67>
c00162ee:	83 ec 0c             	sub    esp,0xc
c00162f1:	56                   	push   esi
c00162f2:	e8 f9 78 ff ff       	call   c000dbf0 <Directory::open()>
c00162f7:	83 c4 10             	add    esp,0x10
c00162fa:	85 c0                	test   eax,eax
c00162fc:	75 1f                	jne    c001631d <sysCallOpenDir(regs*)+0x67>
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	56                   	push   esi
c0016302:	e8 9f 55 ff ff       	call   c000b8a6 <UnixFile::getFileDescriptor()>
c0016307:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	89 02                	mov    DWORD PTR [edx],eax
c001630f:	c1 f8 1f             	sar    eax,0x1f
c0016312:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016315:	31 c0                	xor    eax,eax
c0016317:	59                   	pop    ecx
c0016318:	31 d2                	xor    edx,edx
c001631a:	5b                   	pop    ebx
c001631b:	5e                   	pop    esi
c001631c:	c3                   	ret    
c001631d:	59                   	pop    ecx
c001631e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016323:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016328:	5b                   	pop    ebx
c0016329:	5e                   	pop    esi
c001632a:	c3                   	ret    

c001632b <sysCallCloseDir(regs*)>:
c001632b:	53                   	push   ebx
c001632c:	83 ec 08             	sub    esp,0x8
c001632f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016333:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016336:	8d 50 fd             	lea    edx,[eax-0x3]
c0016339:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001633f:	77 2f                	ja     c0016370 <sysCallCloseDir(regs*)+0x45>
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	50                   	push   eax
c0016345:	e8 51 58 ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c001634a:	89 c3                	mov    ebx,eax
c001634c:	89 04 24             	mov    DWORD PTR [esp],eax
c001634f:	e8 f8 78 ff ff       	call   c000dc4c <Directory::close()>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	85 db                	test   ebx,ebx
c0016359:	74 0c                	je     c0016367 <sysCallCloseDir(regs*)+0x3c>
c001635b:	83 ec 0c             	sub    esp,0xc
c001635e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016360:	53                   	push   ebx
c0016361:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	31 c0                	xor    eax,eax
c0016369:	31 d2                	xor    edx,edx
c001636b:	83 c4 08             	add    esp,0x8
c001636e:	5b                   	pop    ebx
c001636f:	c3                   	ret    
c0016370:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016375:	ba ff ff ff ff       	mov    edx,0xffffffff
c001637a:	83 c4 08             	add    esp,0x8
c001637d:	5b                   	pop    ebx
c001637e:	c3                   	ret    

c001637f <sysCallMakeDir(regs*)>:
c001637f:	56                   	push   esi
c0016380:	53                   	push   ebx
c0016381:	83 ec 10             	sub    esp,0x10
c0016384:	68 14 01 00 00       	push   0x114
c0016389:	e8 b1 39 ff ff       	call   c0009d3f <malloc>
c001638e:	83 c4 0c             	add    esp,0xc
c0016391:	89 c3                	mov    ebx,eax
c0016393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016398:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001639b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001639f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163a2:	53                   	push   ebx
c00163a3:	e8 6e 77 ff ff       	call   c000db16 <Directory::Directory(char const*, Process*)>
c00163a8:	83 c4 10             	add    esp,0x10
c00163ab:	85 db                	test   ebx,ebx
c00163ad:	74 32                	je     c00163e1 <sysCallMakeDir(regs*)+0x62>
c00163af:	83 ec 0c             	sub    esp,0xc
c00163b2:	53                   	push   ebx
c00163b3:	e8 18 7a ff ff       	call   c000ddd0 <Directory::create()>
c00163b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163bb:	89 c6                	mov    esi,eax
c00163bd:	e8 8a 78 ff ff       	call   c000dc4c <Directory::close()>
c00163c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163ca:	83 c4 10             	add    esp,0x10
c00163cd:	31 c0                	xor    eax,eax
c00163cf:	59                   	pop    ecx
c00163d0:	85 f6                	test   esi,esi
c00163d2:	5b                   	pop    ebx
c00163d3:	0f 95 c0             	setne  al
c00163d6:	5e                   	pop    esi
c00163d7:	31 d2                	xor    edx,edx
c00163d9:	f7 d8                	neg    eax
c00163db:	83 d2 00             	adc    edx,0x0
c00163de:	f7 da                	neg    edx
c00163e0:	c3                   	ret    
c00163e1:	59                   	pop    ecx
c00163e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163ec:	5b                   	pop    ebx
c00163ed:	5e                   	pop    esi
c00163ee:	c3                   	ret    

c00163ef <sysCallWait(regs*)>:
c00163ef:	83 ec 10             	sub    esp,0x10
c00163f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163f6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00163f9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163fc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00163ff:	e8 fc 24 00 00       	call   c0018900 <waitTask(int, int*, int)>
c0016404:	83 c4 1c             	add    esp,0x1c
c0016407:	99                   	cdq    
c0016408:	c3                   	ret    

c0016409 <sysCallNotImpl(regs*)>:
c0016409:	83 ec 18             	sub    esp,0x18
c001640c:	68 da 60 02 c0       	push   0xc00260da
c0016411:	e8 57 ec ff ff       	call   c001506d <Krnl::panic(char const*)>
c0016416:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001641b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016420:	83 c4 1c             	add    esp,0x1c
c0016423:	c3                   	ret    

c0016424 <sysPanic(regs*)>:
c0016424:	83 ec 18             	sub    esp,0x18
c0016427:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001642b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001642e:	e8 3a ec ff ff       	call   c001506d <Krnl::panic(char const*)>
c0016433:	b8 01 00 00 00       	mov    eax,0x1
c0016438:	31 d2                	xor    edx,edx
c001643a:	83 c4 1c             	add    esp,0x1c
c001643d:	c3                   	ret    

c001643e <sysCallRmdir(regs*)>:
c001643e:	56                   	push   esi
c001643f:	53                   	push   ebx
c0016440:	83 ec 20             	sub    esp,0x20
c0016443:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016447:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001644a:	68 14 01 00 00       	push   0x114
c001644f:	e8 eb 38 ff ff       	call   c0009d3f <malloc>
c0016454:	83 c4 0c             	add    esp,0xc
c0016457:	89 c3                	mov    ebx,eax
c0016459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016461:	56                   	push   esi
c0016462:	53                   	push   ebx
c0016463:	e8 4e 71 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0016468:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001646b:	e8 98 73 ff ff       	call   c000d808 <File::unlink()>
c0016470:	83 c4 10             	add    esp,0x10
c0016473:	85 db                	test   ebx,ebx
c0016475:	74 14                	je     c001648b <sysCallRmdir(regs*)+0x4d>
c0016477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001647b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001647d:	83 ec 0c             	sub    esp,0xc
c0016480:	53                   	push   ebx
c0016481:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016484:	83 c4 10             	add    esp,0x10
c0016487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001648b:	85 c0                	test   eax,eax
c001648d:	0f 95 c0             	setne  al
c0016490:	31 d2                	xor    edx,edx
c0016492:	0f b6 c0             	movzx  eax,al
c0016495:	f7 d8                	neg    eax
c0016497:	83 d2 00             	adc    edx,0x0
c001649a:	83 c4 14             	add    esp,0x14
c001649d:	f7 da                	neg    edx
c001649f:	5b                   	pop    ebx
c00164a0:	5e                   	pop    esi
c00164a1:	c3                   	ret    

c00164a2 <sysCallUnlink(regs*)>:
c00164a2:	56                   	push   esi
c00164a3:	53                   	push   ebx
c00164a4:	83 ec 20             	sub    esp,0x20
c00164a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164ab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00164ae:	68 14 01 00 00       	push   0x114
c00164b3:	e8 87 38 ff ff       	call   c0009d3f <malloc>
c00164b8:	83 c4 0c             	add    esp,0xc
c00164bb:	89 c3                	mov    ebx,eax
c00164bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164c5:	56                   	push   esi
c00164c6:	53                   	push   ebx
c00164c7:	e8 ea 70 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c00164cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164cf:	e8 34 73 ff ff       	call   c000d808 <File::unlink()>
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	85 db                	test   ebx,ebx
c00164d9:	74 14                	je     c00164ef <sysCallUnlink(regs*)+0x4d>
c00164db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164df:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164e1:	83 ec 0c             	sub    esp,0xc
c00164e4:	53                   	push   ebx
c00164e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164ef:	85 c0                	test   eax,eax
c00164f1:	0f 95 c0             	setne  al
c00164f4:	31 d2                	xor    edx,edx
c00164f6:	0f b6 c0             	movzx  eax,al
c00164f9:	f7 d8                	neg    eax
c00164fb:	83 d2 00             	adc    edx,0x0
c00164fe:	83 c4 14             	add    esp,0x14
c0016501:	f7 da                	neg    edx
c0016503:	5b                   	pop    ebx
c0016504:	5e                   	pop    esi
c0016505:	c3                   	ret    

c0016506 <sysCallGetArgv(regs*)>:
c0016506:	83 ec 0c             	sub    esp,0xc
c0016509:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001650d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016510:	85 c0                	test   eax,eax
c0016512:	78 2b                	js     c001653f <sysCallGetArgv(regs*)+0x39>
c0016514:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001651a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001651d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016523:	7d 1a                	jge    c001653f <sysCallGetArgv(regs*)+0x39>
c0016525:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001652c:	85 c0                	test   eax,eax
c001652e:	74 17                	je     c0016547 <sysCallGetArgv(regs*)+0x41>
c0016530:	83 ec 08             	sub    esp,0x8
c0016533:	50                   	push   eax
c0016534:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016537:	e8 04 a2 fe ff       	call   c0000740 <strcpy>
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	31 c0                	xor    eax,eax
c0016541:	31 d2                	xor    edx,edx
c0016543:	83 c4 0c             	add    esp,0xc
c0016546:	c3                   	ret    
c0016547:	b8 01 00 00 00       	mov    eax,0x1
c001654c:	31 d2                	xor    edx,edx
c001654e:	83 c4 0c             	add    esp,0xc
c0016551:	c3                   	ret    

c0016552 <sysCallTTYName(regs*)>:
c0016552:	56                   	push   esi
c0016553:	53                   	push   ebx
c0016554:	53                   	push   ebx
c0016555:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016559:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001655c:	85 c0                	test   eax,eax
c001655e:	74 5f                	je     c00165bf <sysCallTTYName(regs*)+0x6d>
c0016560:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016563:	83 f8 02             	cmp    eax,0x2
c0016566:	77 3e                	ja     c00165a6 <sysCallTTYName(regs*)+0x54>
c0016568:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001656d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016570:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016576:	85 db                	test   ebx,ebx
c0016578:	74 45                	je     c00165bf <sysCallTTYName(regs*)+0x6d>
c001657a:	83 ec 0c             	sub    esp,0xc
c001657d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001657f:	53                   	push   ebx
c0016580:	ff 10                	call   DWORD PTR [eax]
c0016582:	83 c4 10             	add    esp,0x10
c0016585:	84 c0                	test   al,al
c0016587:	74 41                	je     c00165ca <sysCallTTYName(regs*)+0x78>
c0016589:	83 ec 08             	sub    esp,0x8
c001658c:	81 c3 82 00 00 00    	add    ebx,0x82
c0016592:	53                   	push   ebx
c0016593:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016596:	e8 a5 a1 fe ff       	call   c0000740 <strcpy>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	31 c0                	xor    eax,eax
c00165a0:	59                   	pop    ecx
c00165a1:	31 d2                	xor    edx,edx
c00165a3:	5b                   	pop    ebx
c00165a4:	5e                   	pop    esi
c00165a5:	c3                   	ret    
c00165a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00165ab:	74 bb                	je     c0016568 <sysCallTTYName(regs*)+0x16>
c00165ad:	83 ec 0c             	sub    esp,0xc
c00165b0:	50                   	push   eax
c00165b1:	e8 e5 55 ff ff       	call   c000bb9b <getFromFileDescriptor(int)>
c00165b6:	83 c4 10             	add    esp,0x10
c00165b9:	89 c3                	mov    ebx,eax
c00165bb:	85 db                	test   ebx,ebx
c00165bd:	75 bb                	jne    c001657a <sysCallTTYName(regs*)+0x28>
c00165bf:	59                   	pop    ecx
c00165c0:	b8 01 00 00 00       	mov    eax,0x1
c00165c5:	31 d2                	xor    edx,edx
c00165c7:	5b                   	pop    ebx
c00165c8:	5e                   	pop    esi
c00165c9:	c3                   	ret    
c00165ca:	59                   	pop    ecx
c00165cb:	b8 02 00 00 00       	mov    eax,0x2
c00165d0:	31 d2                	xor    edx,edx
c00165d2:	5b                   	pop    ebx
c00165d3:	5e                   	pop    esi
c00165d4:	c3                   	ret    

c00165d5 <sysCallUSleep(regs*)>:
c00165d5:	83 ec 1c             	sub    esp,0x1c
c00165d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165dc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00165df:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00165e2:	6a 00                	push   0x0
c00165e4:	6a 64                	push   0x64
c00165e6:	52                   	push   edx
c00165e7:	50                   	push   eax
c00165e8:	e8 f3 c1 00 00       	call   c00227e0 <__udivdi3>
c00165ed:	83 c4 14             	add    esp,0x14
c00165f0:	50                   	push   eax
c00165f1:	e8 da 23 00 00       	call   c00189d0 <milliTenthSleep(unsigned int)>
c00165f6:	31 c0                	xor    eax,eax
c00165f8:	31 d2                	xor    edx,edx
c00165fa:	83 c4 1c             	add    esp,0x1c
c00165fd:	c3                   	ret    

c00165fe <sysCallSpawn(regs*)>:
c00165fe:	56                   	push   esi
c00165ff:	53                   	push   ebx
c0016600:	50                   	push   eax
c0016601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016605:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016608:	85 c0                	test   eax,eax
c001660a:	75 08                	jne    c0016614 <sysCallSpawn(regs*)+0x16>
c001660c:	59                   	pop    ecx
c001660d:	31 c0                	xor    eax,eax
c001660f:	31 d2                	xor    edx,edx
c0016611:	5b                   	pop    ebx
c0016612:	5e                   	pop    esi
c0016613:	c3                   	ret    
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	68 1f 07 00 00       	push   0x71f
c001661c:	e8 1e 37 ff ff       	call   c0009d3f <malloc>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	89 c6                	mov    esi,eax
c0016626:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016629:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001662c:	85 c0                	test   eax,eax
c001662e:	75 32                	jne    c0016662 <sysCallSpawn(regs*)+0x64>
c0016630:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016635:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016638:	52                   	push   edx
c0016639:	50                   	push   eax
c001663a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001663d:	56                   	push   esi
c001663e:	e8 85 1a 00 00       	call   c00180c8 <Process::Process(char const*, Process*, char**)>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001664d:	75 bd                	jne    c001660c <sysCallSpawn(regs*)+0xe>
c001664f:	83 ec 0c             	sub    esp,0xc
c0016652:	56                   	push   esi
c0016653:	e8 5c 1f 00 00       	call   c00185b4 <Process::createUserThread()>
c0016658:	8b 06                	mov    eax,DWORD PTR [esi]
c001665a:	83 c4 10             	add    esp,0x10
c001665d:	99                   	cdq    
c001665e:	59                   	pop    ecx
c001665f:	5b                   	pop    ebx
c0016660:	5e                   	pop    esi
c0016661:	c3                   	ret    
c0016662:	31 c0                	xor    eax,eax
c0016664:	eb d2                	jmp    c0016638 <sysCallSpawn(regs*)+0x3a>

c0016666 <sysCallGetEnv(regs*)>:
c0016666:	57                   	push   edi
c0016667:	56                   	push   esi
c0016668:	53                   	push   ebx
c0016669:	83 ec 1c             	sub    esp,0x1c
c001666c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016675:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016678:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001667b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001667e:	e8 36 e9 ff ff       	call   c0014fb9 <Krnl::getProcessTotalEnvCount(Process*)>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	39 c7                	cmp    edi,eax
c0016688:	7c 14                	jl     c001669e <sysCallGetEnv(regs*)+0x38>
c001668a:	85 f6                	test   esi,esi
c001668c:	75 0b                	jne    c0016699 <sysCallGetEnv(regs*)+0x33>
c001668e:	83 c4 10             	add    esp,0x10
c0016691:	31 c0                	xor    eax,eax
c0016693:	5b                   	pop    ebx
c0016694:	31 d2                	xor    edx,edx
c0016696:	5e                   	pop    esi
c0016697:	5f                   	pop    edi
c0016698:	c3                   	ret    
c0016699:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001669c:	eb f0                	jmp    c001668e <sysCallGetEnv(regs*)+0x28>
c001669e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00166a2:	52                   	push   edx
c00166a3:	57                   	push   edi
c00166a4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166aa:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00166ad:	50                   	push   eax
c00166ae:	e8 26 e9 ff ff       	call   c0014fd9 <Krnl::getProcessEnvPair(Process*, int)>
c00166b3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00166b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166ba:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00166be:	83 c4 0c             	add    esp,0xc
c00166c1:	85 c9                	test   ecx,ecx
c00166c3:	75 23                	jne    c00166e8 <sysCallGetEnv(regs*)+0x82>
c00166c5:	83 ec 0c             	sub    esp,0xc
c00166c8:	50                   	push   eax
c00166c9:	e8 d2 9f fe ff       	call   c00006a0 <strlen>
c00166ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00166d1:	89 c3                	mov    ebx,eax
c00166d3:	e8 c8 9f fe ff       	call   c00006a0 <strlen>
c00166d8:	83 c4 10             	add    esp,0x10
c00166db:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00166df:	83 c4 10             	add    esp,0x10
c00166e2:	31 d2                	xor    edx,edx
c00166e4:	5b                   	pop    ebx
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	c3                   	ret    
c00166e8:	83 ec 08             	sub    esp,0x8
c00166eb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00166ee:	50                   	push   eax
c00166ef:	56                   	push   esi
c00166f0:	e8 4b a0 fe ff       	call   c0000740 <strcpy>
c00166f5:	58                   	pop    eax
c00166f6:	5a                   	pop    edx
c00166f7:	68 f4 60 02 c0       	push   0xc00260f4
c00166fc:	56                   	push   esi
c00166fd:	e8 7e a1 fe ff       	call   c0000880 <strcat>
c0016702:	59                   	pop    ecx
c0016703:	5b                   	pop    ebx
c0016704:	57                   	push   edi
c0016705:	56                   	push   esi
c0016706:	e8 75 a1 fe ff       	call   c0000880 <strcat>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	e9 7b ff ff ff       	jmp    c001668e <sysCallGetEnv(regs*)+0x28>

c0016713 <sysAppSettings(regs*)>:
c0016713:	57                   	push   edi
c0016714:	56                   	push   esi
c0016715:	56                   	push   esi
c0016716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001671a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001671d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016723:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016728:	66 3d c0 09          	cmp    ax,0x9c0
c001672c:	75 2e                	jne    c001675c <sysAppSettings(regs*)+0x49>
c001672e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016734:	83 e0 1f             	and    eax,0x1f
c0016737:	3c 01                	cmp    al,0x1
c0016739:	74 2c                	je     c0016767 <sysAppSettings(regs*)+0x54>
c001673b:	3c 07                	cmp    al,0x7
c001673d:	0f 84 b3 00 00 00    	je     c00167f6 <sysAppSettings(regs*)+0xe3>
c0016743:	84 c0                	test   al,al
c0016745:	0f 84 d2 00 00 00    	je     c001681d <sysAppSettings(regs*)+0x10a>
c001674b:	3c 08                	cmp    al,0x8
c001674d:	74 63                	je     c00167b2 <sysAppSettings(regs*)+0x9f>
c001674f:	59                   	pop    ecx
c0016750:	0f b6 c0             	movzx  eax,al
c0016753:	5e                   	pop    esi
c0016754:	05 e8 03 00 00       	add    eax,0x3e8
c0016759:	5f                   	pop    edi
c001675a:	99                   	cdq    
c001675b:	c3                   	ret    
c001675c:	b8 01 00 00 00       	mov    eax,0x1
c0016761:	59                   	pop    ecx
c0016762:	31 d2                	xor    edx,edx
c0016764:	5e                   	pop    esi
c0016765:	5f                   	pop    edi
c0016766:	c3                   	ret    
c0016767:	50                   	push   eax
c0016768:	68 00 01 00 00       	push   0x100
c001676d:	6a 00                	push   0x0
c001676f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016777:	83 c0 0c             	add    eax,0xc
c001677a:	50                   	push   eax
c001677b:	e8 04 9f fe ff       	call   c0000684 <memset>
c0016780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016785:	b9 ff 00 00 00       	mov    ecx,0xff
c001678a:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c001678d:	83 c7 0c             	add    edi,0xc
c0016790:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016792:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016797:	5a                   	pop    edx
c0016798:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001679b:	59                   	pop    ecx
c001679c:	8d 50 0c             	lea    edx,[eax+0xc]
c001679f:	52                   	push   edx
c00167a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167a6:	e8 21 45 ff ff       	call   c000accc <VgaText::setTitle(char*)>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	31 c0                	xor    eax,eax
c00167b0:	eb af                	jmp    c0016761 <sysAppSettings(regs*)+0x4e>
c00167b2:	83 ec 08             	sub    esp,0x8
c00167b5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00167bb:	83 e0 0f             	and    eax,0xf
c00167be:	50                   	push   eax
c00167bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167c7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167cd:	e8 ea 44 ff ff       	call   c000acbc <VgaText::setTitleColour(VgaColour)>
c00167d2:	5f                   	pop    edi
c00167d3:	58                   	pop    eax
c00167d4:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00167da:	c1 e8 04             	shr    eax,0x4
c00167dd:	83 e0 0f             	and    eax,0xf
c00167e0:	50                   	push   eax
c00167e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167e9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167ef:	e8 b8 44 ff ff       	call   c000acac <VgaText::setTitleTextColour(VgaColour)>
c00167f4:	eb b5                	jmp    c00167ab <sysAppSettings(regs*)+0x98>
c00167f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167fe:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016804:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001680a:	c0 e8 06             	shr    al,0x6
c001680d:	83 e0 01             	and    eax,0x1
c0016810:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016816:	31 c0                	xor    eax,eax
c0016818:	e9 44 ff ff ff       	jmp    c0016761 <sysAppSettings(regs*)+0x4e>
c001681d:	b8 02 00 00 00       	mov    eax,0x2
c0016822:	e9 3a ff ff ff       	jmp    c0016761 <sysAppSettings(regs*)+0x4e>

c0016827 <sysSetFatAttrib(regs*)>:
c0016827:	57                   	push   edi
c0016828:	56                   	push   esi
c0016829:	53                   	push   ebx
c001682a:	83 ec 1c             	sub    esp,0x1c
c001682d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016831:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016834:	68 14 01 00 00       	push   0x114
c0016839:	e8 01 35 ff ff       	call   c0009d3f <malloc>
c001683e:	83 c4 0c             	add    esp,0xc
c0016841:	89 c3                	mov    ebx,eax
c0016843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016848:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001684b:	57                   	push   edi
c001684c:	53                   	push   ebx
c001684d:	e8 64 6d ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0016852:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016855:	83 c4 0c             	add    esp,0xc
c0016858:	0f b6 d4             	movzx  edx,ah
c001685b:	0f b6 c0             	movzx  eax,al
c001685e:	52                   	push   edx
c001685f:	50                   	push   eax
c0016860:	53                   	push   ebx
c0016861:	e8 3c 70 ff ff       	call   c000d8a2 <File::chfatattr(unsigned char, unsigned char)>
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	85 db                	test   ebx,ebx
c001686b:	74 14                	je     c0016881 <sysSetFatAttrib(regs*)+0x5a>
c001686d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016871:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016873:	83 ec 0c             	sub    esp,0xc
c0016876:	53                   	push   ebx
c0016877:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001687a:	83 c4 10             	add    esp,0x10
c001687d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016881:	85 c0                	test   eax,eax
c0016883:	0f 95 c0             	setne  al
c0016886:	31 d2                	xor    edx,edx
c0016888:	0f b6 c0             	movzx  eax,al
c001688b:	f7 d8                	neg    eax
c001688d:	83 d2 00             	adc    edx,0x0
c0016890:	83 c4 10             	add    esp,0x10
c0016893:	f7 da                	neg    edx
c0016895:	5b                   	pop    ebx
c0016896:	5e                   	pop    esi
c0016897:	5f                   	pop    edi
c0016898:	c3                   	ret    

c0016899 <sysPipe(regs*)>:
c0016899:	57                   	push   edi
c001689a:	56                   	push   esi
c001689b:	53                   	push   ebx
c001689c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00168a6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00168a9:	6a 20                	push   0x20
c00168ab:	e8 8f 34 ff ff       	call   c0009d3f <malloc>
c00168b0:	89 c3                	mov    ebx,eax
c00168b2:	58                   	pop    eax
c00168b3:	5a                   	pop    edx
c00168b4:	68 00 50 00 00       	push   0x5000
c00168b9:	53                   	push   ebx
c00168ba:	e8 85 41 ff ff       	call   c000aa44 <Pipe::Pipe(int)>
c00168bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168c2:	e8 df 4f ff ff       	call   c000b8a6 <UnixFile::getFileDescriptor()>
c00168c7:	89 07                	mov    DWORD PTR [edi],eax
c00168c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168cc:	e8 d5 4f ff ff       	call   c000b8a6 <UnixFile::getFileDescriptor()>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	89 06                	mov    DWORD PTR [esi],eax
c00168d6:	31 d2                	xor    edx,edx
c00168d8:	5b                   	pop    ebx
c00168d9:	31 c0                	xor    eax,eax
c00168db:	5e                   	pop    esi
c00168dc:	5f                   	pop    edi
c00168dd:	c3                   	ret    

c00168de <sysGetUnixTime(regs*)>:
c00168de:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c00168e3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168ed:	e9 24 77 ff ff       	jmp    c000e016 <Clock::timeInSecondsLocal()>

c00168f2 <string_ends_with(char const*, char const*)>:
c00168f2:	57                   	push   edi
c00168f3:	56                   	push   esi
c00168f4:	53                   	push   ebx
c00168f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168f9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00168fd:	83 ec 0c             	sub    esp,0xc
c0016900:	53                   	push   ebx
c0016901:	e8 9a 9d fe ff       	call   c00006a0 <strlen>
c0016906:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016909:	89 c6                	mov    esi,eax
c001690b:	e8 90 9d fe ff       	call   c00006a0 <strlen>
c0016910:	83 c4 10             	add    esp,0x10
c0016913:	39 c6                	cmp    esi,eax
c0016915:	7d 06                	jge    c001691d <string_ends_with(char const*, char const*)+0x2b>
c0016917:	5b                   	pop    ebx
c0016918:	31 c0                	xor    eax,eax
c001691a:	5e                   	pop    esi
c001691b:	5f                   	pop    edi
c001691c:	c3                   	ret    
c001691d:	83 ec 08             	sub    esp,0x8
c0016920:	29 c6                	sub    esi,eax
c0016922:	57                   	push   edi
c0016923:	01 f3                	add    ebx,esi
c0016925:	53                   	push   ebx
c0016926:	e8 a1 9e fe ff       	call   c00007cc <strcmp>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	85 c0                	test   eax,eax
c0016930:	5b                   	pop    ebx
c0016931:	0f 94 c0             	sete   al
c0016934:	5e                   	pop    esi
c0016935:	0f b6 c0             	movzx  eax,al
c0016938:	5f                   	pop    edi
c0016939:	c3                   	ret    

c001693a <sysCallOpen(regs*)>:
c001693a:	56                   	push   esi
c001693b:	53                   	push   ebx
c001693c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016942:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016949:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001694c:	85 c9                	test   ecx,ecx
c001694e:	0f 84 ad 01 00 00    	je     c0016b01 <sysCallOpen(regs*)+0x1c7>
c0016954:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016957:	85 c0                	test   eax,eax
c0016959:	0f 84 a2 01 00 00    	je     c0016b01 <sysCallOpen(regs*)+0x1c7>
c001695f:	52                   	push   edx
c0016960:	68 f6 60 02 c0       	push   0xc00260f6
c0016965:	50                   	push   eax
c0016966:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001696a:	56                   	push   esi
c001696b:	e8 9c 6a ff ff       	call   c000d40c <Fs::standardiseFiles(char*, char const*, char const*)>
c0016970:	89 34 24             	mov    DWORD PTR [esp],esi
c0016973:	e8 28 9d fe ff       	call   c00006a0 <strlen>
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	48                   	dec    eax
c001697c:	74 1d                	je     c001699b <sysCallOpen(regs*)+0x61>
c001697e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016981:	eb 0f                	jmp    c0016992 <sysCallOpen(regs*)+0x58>
c0016983:	80 fa 3a             	cmp    dl,0x3a
c0016986:	74 0f                	je     c0016997 <sysCallOpen(regs*)+0x5d>
c0016988:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001698c:	48                   	dec    eax
c001698d:	74 0c                	je     c001699b <sysCallOpen(regs*)+0x61>
c001698f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016992:	80 fa 2e             	cmp    dl,0x2e
c0016995:	75 ec                	jne    c0016983 <sysCallOpen(regs*)+0x49>
c0016997:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001699b:	83 ec 08             	sub    esp,0x8
c001699e:	68 fa 60 02 c0       	push   0xc00260fa
c00169a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169a6:	e8 47 ff ff ff       	call   c00168f2 <string_ends_with(char const*, char const*)>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	85 c0                	test   eax,eax
c00169b0:	74 1d                	je     c00169cf <sysCallOpen(regs*)+0x95>
c00169b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169b5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00169bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169c2:	81 c4 04 01 00 00    	add    esp,0x104
c00169c8:	31 c0                	xor    eax,eax
c00169ca:	31 d2                	xor    edx,edx
c00169cc:	5b                   	pop    ebx
c00169cd:	5e                   	pop    esi
c00169ce:	c3                   	ret    
c00169cf:	83 ec 08             	sub    esp,0x8
c00169d2:	68 ff 60 02 c0       	push   0xc00260ff
c00169d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169da:	e8 13 ff ff ff       	call   c00168f2 <string_ends_with(char const*, char const*)>
c00169df:	83 c4 10             	add    esp,0x10
c00169e2:	85 c0                	test   eax,eax
c00169e4:	75 cc                	jne    c00169b2 <sysCallOpen(regs*)+0x78>
c00169e6:	83 ec 08             	sub    esp,0x8
c00169e9:	68 fb 60 02 c0       	push   0xc00260fb
c00169ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169f1:	e8 d6 9d fe ff       	call   c00007cc <strcmp>
c00169f6:	83 c4 10             	add    esp,0x10
c00169f9:	85 c0                	test   eax,eax
c00169fb:	74 b5                	je     c00169b2 <sysCallOpen(regs*)+0x78>
c00169fd:	83 ec 08             	sub    esp,0x8
c0016a00:	68 fa 60 02 c0       	push   0xc00260fa
c0016a05:	56                   	push   esi
c0016a06:	e8 e7 fe ff ff       	call   c00168f2 <string_ends_with(char const*, char const*)>
c0016a0b:	83 c4 10             	add    esp,0x10
c0016a0e:	85 c0                	test   eax,eax
c0016a10:	75 a0                	jne    c00169b2 <sysCallOpen(regs*)+0x78>
c0016a12:	83 ec 08             	sub    esp,0x8
c0016a15:	68 04 61 02 c0       	push   0xc0026104
c0016a1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a1d:	e8 d0 fe ff ff       	call   c00168f2 <string_ends_with(char const*, char const*)>
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	85 c0                	test   eax,eax
c0016a27:	0f 85 e7 00 00 00    	jne    c0016b14 <sysCallOpen(regs*)+0x1da>
c0016a2d:	83 ec 08             	sub    esp,0x8
c0016a30:	68 09 61 02 c0       	push   0xc0026109
c0016a35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a38:	e8 b5 fe ff ff       	call   c00168f2 <string_ends_with(char const*, char const*)>
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	85 c0                	test   eax,eax
c0016a42:	0f 85 cc 00 00 00    	jne    c0016b14 <sysCallOpen(regs*)+0x1da>
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	68 05 61 02 c0       	push   0xc0026105
c0016a50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a53:	e8 74 9d fe ff       	call   c00007cc <strcmp>
c0016a58:	83 c4 10             	add    esp,0x10
c0016a5b:	85 c0                	test   eax,eax
c0016a5d:	0f 84 b1 00 00 00    	je     c0016b14 <sysCallOpen(regs*)+0x1da>
c0016a63:	83 ec 08             	sub    esp,0x8
c0016a66:	68 04 61 02 c0       	push   0xc0026104
c0016a6b:	56                   	push   esi
c0016a6c:	e8 81 fe ff ff       	call   c00168f2 <string_ends_with(char const*, char const*)>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	85 c0                	test   eax,eax
c0016a76:	0f 85 98 00 00 00    	jne    c0016b14 <sysCallOpen(regs*)+0x1da>
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	68 14 01 00 00       	push   0x114
c0016a84:	e8 b6 32 ff ff       	call   c0009d3f <malloc>
c0016a89:	83 c4 0c             	add    esp,0xc
c0016a8c:	89 c6                	mov    esi,eax
c0016a8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a99:	56                   	push   esi
c0016a9a:	e8 17 6b ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0016a9f:	83 c4 10             	add    esp,0x10
c0016aa2:	85 f6                	test   esi,esi
c0016aa4:	74 5b                	je     c0016b01 <sysCallOpen(regs*)+0x1c7>
c0016aa6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016aa9:	0f b6 c2             	movzx  eax,dl
c0016aac:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016aaf:	89 d0                	mov    eax,edx
c0016ab1:	83 e0 01             	and    eax,0x1
c0016ab4:	f6 c2 02             	test   dl,0x2
c0016ab7:	74 03                	je     c0016abc <sysCallOpen(regs*)+0x182>
c0016ab9:	83 c8 02             	or     eax,0x2
c0016abc:	f6 c2 04             	test   dl,0x4
c0016abf:	74 03                	je     c0016ac4 <sysCallOpen(regs*)+0x18a>
c0016ac1:	83 c8 04             	or     eax,0x4
c0016ac4:	f6 c2 08             	test   dl,0x8
c0016ac7:	74 03                	je     c0016acc <sysCallOpen(regs*)+0x192>
c0016ac9:	83 c8 0a             	or     eax,0xa
c0016acc:	83 e2 10             	and    edx,0x10
c0016acf:	74 03                	je     c0016ad4 <sysCallOpen(regs*)+0x19a>
c0016ad1:	83 c8 12             	or     eax,0x12
c0016ad4:	83 ec 08             	sub    esp,0x8
c0016ad7:	50                   	push   eax
c0016ad8:	56                   	push   esi
c0016ad9:	e8 b2 6b ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	85 c0                	test   eax,eax
c0016ae3:	75 1c                	jne    c0016b01 <sysCallOpen(regs*)+0x1c7>
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	56                   	push   esi
c0016ae9:	e8 b8 4d ff ff       	call   c000b8a6 <UnixFile::getFileDescriptor()>
c0016aee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	89 02                	mov    DWORD PTR [edx],eax
c0016af6:	c1 f8 1f             	sar    eax,0x1f
c0016af9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016afc:	e9 c1 fe ff ff       	jmp    c00169c2 <sysCallOpen(regs*)+0x88>
c0016b01:	81 c4 04 01 00 00    	add    esp,0x104
c0016b07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b11:	5b                   	pop    ebx
c0016b12:	5e                   	pop    esi
c0016b13:	c3                   	ret    
c0016b14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b17:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016b1d:	e9 99 fe ff ff       	jmp    c00169bb <sysCallOpen(regs*)+0x81>

c0016b22 <Sys::loadSyscalls()>:
c0016b22:	c7 05 c0 8d 02 c0 93 5d 01 c0 	mov    DWORD PTR ds:0xc0028dc0,0xc0015d93
c0016b2c:	c7 05 c4 8d 02 c0 88 59 01 c0 	mov    DWORD PTR ds:0xc0028dc4,0xc0015988
c0016b36:	c7 05 c8 8d 02 c0 79 5b 01 c0 	mov    DWORD PTR ds:0xc0028dc8,0xc0015b79
c0016b40:	c7 05 cc 8d 02 c0 c9 5c 01 c0 	mov    DWORD PTR ds:0xc0028dcc,0xc0015cc9
c0016b4a:	c7 05 d0 8d 02 c0 11 5b 01 c0 	mov    DWORD PTR ds:0xc0028dd0,0xc0015b11
c0016b54:	c7 05 d4 8d 02 c0 bf 59 01 c0 	mov    DWORD PTR ds:0xc0028dd4,0xc00159bf
c0016b5e:	c7 05 d8 8d 02 c0 a0 59 01 c0 	mov    DWORD PTR ds:0xc0028dd8,0xc00159a0
c0016b68:	c7 05 dc 8d 02 c0 ce 5b 01 c0 	mov    DWORD PTR ds:0xc0028ddc,0xc0015bce
c0016b72:	c7 05 e4 8d 02 c0 56 62 01 c0 	mov    DWORD PTR ds:0xc0028de4,0xc0016256
c0016b7c:	c7 05 e0 8d 02 c0 3a 69 01 c0 	mov    DWORD PTR ds:0xc0028de0,0xc001693a
c0016b86:	c7 05 e8 8d 02 c0 b6 62 01 c0 	mov    DWORD PTR ds:0xc0028de8,0xc00162b6
c0016b90:	c7 05 ec 8d 02 c0 99 5f 01 c0 	mov    DWORD PTR ds:0xc0028dec,0xc0015f99
c0016b9a:	c7 05 f0 8d 02 c0 cb 5d 01 c0 	mov    DWORD PTR ds:0xc0028df0,0xc0015dcb
c0016ba4:	c7 05 f4 8d 02 c0 d0 5d 01 c0 	mov    DWORD PTR ds:0xc0028df4,0xc0015dd0
c0016bae:	c7 05 f8 8d 02 c0 7f 63 01 c0 	mov    DWORD PTR ds:0xc0028df8,0xc001637f
c0016bb8:	c7 05 fc 8d 02 c0 2b 63 01 c0 	mov    DWORD PTR ds:0xc0028dfc,0xc001632b
c0016bc2:	c7 05 00 8e 02 c0 72 60 01 c0 	mov    DWORD PTR ds:0xc0028e00,0xc0016072
c0016bcc:	c7 05 04 8e 02 c0 c9 60 01 c0 	mov    DWORD PTR ds:0xc0028e04,0xc00160c9
c0016bd6:	c7 05 08 8e 02 c0 35 61 01 c0 	mov    DWORD PTR ds:0xc0028e08,0xc0016135
c0016be0:	c7 05 0c 8e 02 c0 d5 5d 01 c0 	mov    DWORD PTR ds:0xc0028e0c,0xc0015dd5
c0016bea:	c7 05 10 8e 02 c0 ef 63 01 c0 	mov    DWORD PTR ds:0xc0028e10,0xc00163ef
c0016bf4:	c7 05 14 8e 02 c0 09 64 01 c0 	mov    DWORD PTR ds:0xc0028e14,0xc0016409
c0016bfe:	c7 05 18 8e 02 c0 09 64 01 c0 	mov    DWORD PTR ds:0xc0028e18,0xc0016409
c0016c08:	c7 05 1c 8e 02 c0 3e 64 01 c0 	mov    DWORD PTR ds:0xc0028e1c,0xc001643e
c0016c12:	c7 05 20 8e 02 c0 a2 64 01 c0 	mov    DWORD PTR ds:0xc0028e20,0xc00164a2
c0016c1c:	c7 05 24 8e 02 c0 df 5d 01 c0 	mov    DWORD PTR ds:0xc0028e24,0xc0015ddf
c0016c26:	c7 05 28 8e 02 c0 06 65 01 c0 	mov    DWORD PTR ds:0xc0028e28,0xc0016506
c0016c30:	c7 05 2c 8e 02 c0 56 5f 01 c0 	mov    DWORD PTR ds:0xc0028e2c,0xc0015f56
c0016c3a:	c7 05 30 8e 02 c0 52 65 01 c0 	mov    DWORD PTR ds:0xc0028e30,0xc0016552
c0016c44:	c7 05 34 8e 02 c0 18 60 01 c0 	mov    DWORD PTR ds:0xc0028e34,0xc0016018
c0016c4e:	c7 05 38 8e 02 c0 d5 65 01 c0 	mov    DWORD PTR ds:0xc0028e38,0xc00165d5
c0016c58:	c7 05 3c 8e 02 c0 a7 61 01 c0 	mov    DWORD PTR ds:0xc0028e3c,0xc00161a7
c0016c62:	c7 05 40 8e 02 c0 fe 65 01 c0 	mov    DWORD PTR ds:0xc0028e40,0xc00165fe
c0016c6c:	c7 05 44 8e 02 c0 66 66 01 c0 	mov    DWORD PTR ds:0xc0028e44,0xc0016666
c0016c76:	c7 05 48 8e 02 c0 13 67 01 c0 	mov    DWORD PTR ds:0xc0028e48,0xc0016713
c0016c80:	c7 05 4c 8e 02 c0 ef 5d 01 c0 	mov    DWORD PTR ds:0xc0028e4c,0xc0015def
c0016c8a:	c7 05 50 8e 02 c0 59 5e 01 c0 	mov    DWORD PTR ds:0xc0028e50,0xc0015e59
c0016c94:	c7 05 54 8e 02 c0 a3 5e 01 c0 	mov    DWORD PTR ds:0xc0028e54,0xc0015ea3
c0016c9e:	c7 05 58 8e 02 c0 27 68 01 c0 	mov    DWORD PTR ds:0xc0028e58,0xc0016827
c0016ca8:	c7 05 5c 8e 02 c0 24 64 01 c0 	mov    DWORD PTR ds:0xc0028e5c,0xc0016424
c0016cb2:	c7 05 60 8e 02 c0 f8 5e 01 c0 	mov    DWORD PTR ds:0xc0028e60,0xc0015ef8
c0016cbc:	c7 05 64 8e 02 c0 99 68 01 c0 	mov    DWORD PTR ds:0xc0028e64,0xc0016899
c0016cc6:	c7 05 68 8e 02 c0 de 68 01 c0 	mov    DWORD PTR ds:0xc0028e68,0xc00168de
c0016cd0:	c7 05 6c 8e 02 c0 69 5a 01 c0 	mov    DWORD PTR ds:0xc0028e6c,0xc0015a69
c0016cda:	c7 05 70 8e 02 c0 ea 5b 01 c0 	mov    DWORD PTR ds:0xc0028e70,0xc0015bea
c0016ce4:	c7 05 74 8e 02 c0 7f 5c 01 c0 	mov    DWORD PTR ds:0xc0028e74,0xc0015c7f
c0016cee:	c7 05 78 8e 02 c0 52 59 01 c0 	mov    DWORD PTR ds:0xc0028e78,0xc0015952
c0016cf8:	c7 05 7c 8e 02 c0 31 5d 01 c0 	mov    DWORD PTR ds:0xc0028e7c,0xc0015d31
c0016d02:	c7 05 80 8e 02 c0 cb 59 01 c0 	mov    DWORD PTR ds:0xc0028e80,0xc00159cb
c0016d0c:	c7 05 84 8e 02 c0 e5 59 01 c0 	mov    DWORD PTR ds:0xc0028e84,0xc00159e5
c0016d16:	c3                   	ret    

c0016d17 <Sys::systemCall(regs*, void*)>:
c0016d17:	53                   	push   ebx
c0016d18:	83 ec 08             	sub    esp,0x8
c0016d1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d1f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d22:	83 f8 7f             	cmp    eax,0x7f
c0016d25:	77 16                	ja     c0016d3d <Sys::systemCall(regs*, void*)+0x26>
c0016d27:	8b 14 85 c0 8d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7240]
c0016d2e:	85 d2                	test   edx,edx
c0016d30:	74 0b                	je     c0016d3d <Sys::systemCall(regs*, void*)+0x26>
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	53                   	push   ebx
c0016d36:	ff d2                	call   edx
c0016d38:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d3b:	eb 0d                	jmp    c0016d4a <Sys::systemCall(regs*, void*)+0x33>
c0016d3d:	52                   	push   edx
c0016d3e:	52                   	push   edx
c0016d3f:	50                   	push   eax
c0016d40:	68 0e 61 02 c0       	push   0xc002610e
c0016d45:	e8 01 63 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0016d4a:	83 c4 10             	add    esp,0x10
c0016d4d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016d52:	31 d2                	xor    edx,edx
c0016d54:	83 c4 08             	add    esp,0x8
c0016d57:	5b                   	pop    ebx
c0016d58:	c3                   	ret    

c0016d59 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016d59:	55                   	push   ebp
c0016d5a:	57                   	push   edi
c0016d5b:	56                   	push   esi
c0016d5c:	53                   	push   ebx
c0016d5d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016d63:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016d6a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016d71:	85 c0                	test   eax,eax
c0016d73:	0f 95 c1             	setne  cl
c0016d76:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016d7e:	0f 94 c2             	sete   dl
c0016d81:	84 d1                	test   cl,dl
c0016d83:	74 23                	je     c0016da8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016d85:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016d8b:	74 1b                	je     c0016da8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016d8d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016d93:	89 da                	mov    edx,ebx
c0016d95:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016d9b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016da1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016da8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016daf:	05 ff 0f 00 00       	add    eax,0xfff
c0016db4:	83 ec 0c             	sub    esp,0xc
c0016db7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dbb:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016dc1:	c1 e8 0c             	shr    eax,0xc
c0016dc4:	89 fe                	mov    esi,edi
c0016dc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dca:	c1 ee 0c             	shr    esi,0xc
c0016dcd:	6a 01                	push   0x1
c0016dcf:	e8 1d 4f ff ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0016dd4:	89 c5                	mov    ebp,eax
c0016dd6:	58                   	pop    eax
c0016dd7:	5a                   	pop    edx
c0016dd8:	56                   	push   esi
c0016dd9:	68 22 61 02 c0       	push   0xc0026122
c0016dde:	e8 68 62 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0016de3:	59                   	pop    ecx
c0016de4:	58                   	pop    eax
c0016de5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016de9:	68 34 61 02 c0       	push   0xc0026134
c0016dee:	e8 58 62 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016dfc:	0f 86 31 01 00 00    	jbe    c0016f33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016e02:	c1 e6 0c             	shl    esi,0xc
c0016e05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e08:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016e0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e0f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016e16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e19:	01 df                	add    edi,ebx
c0016e1b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016e1e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e22:	0f 84 08 01 00 00    	je     c0016f30 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016e28:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016e2e:	76 05                	jbe    c0016e35 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016e30:	bf 00 10 00 00       	mov    edi,0x1000
c0016e35:	83 ec 0c             	sub    esp,0xc
c0016e38:	31 d2                	xor    edx,edx
c0016e3a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016e41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e43:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016e47:	50                   	push   eax
c0016e48:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016e4c:	56                   	push   esi
c0016e4d:	52                   	push   edx
c0016e4e:	57                   	push   edi
c0016e4f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016e56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e59:	83 c4 20             	add    esp,0x20
c0016e5c:	85 c0                	test   eax,eax
c0016e5e:	74 0a                	je     c0016e6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016e60:	53                   	push   ebx
c0016e61:	53                   	push   ebx
c0016e62:	50                   	push   eax
c0016e63:	68 46 61 02 c0       	push   0xc0026146
c0016e68:	eb 0f                	jmp    c0016e79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016e6a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016e6e:	74 20                	je     c0016e90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016e70:	51                   	push   ecx
c0016e71:	51                   	push   ecx
c0016e72:	6a 00                	push   0x0
c0016e74:	68 71 61 02 c0       	push   0xc0026171
c0016e79:	e8 cd 61 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0016e7e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e81:	e8 5f 51 ff ff       	call   c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c0016e86:	83 c4 10             	add    esp,0x10
c0016e89:	31 c0                	xor    eax,eax
c0016e8b:	e9 68 01 00 00       	jmp    c0016ff8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016e90:	fa                   	cli    
c0016e91:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0016e97:	e8 5a 35 ff ff       	call   c000a3f6 <Phys::allocatePage()>
c0016e9c:	6a 07                	push   0x7
c0016e9e:	89 c7                	mov    edi,eax
c0016ea0:	55                   	push   ebp
c0016ea1:	50                   	push   eax
c0016ea2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016eaa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016eb0:	e8 a7 54 ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016eb5:	83 c4 0c             	add    esp,0xc
c0016eb8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016ebf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ec5:	6a 00                	push   0x0
c0016ec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ecc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ecf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ed5:	e8 dc 52 ff ff       	call   c000c1b6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016eda:	58                   	pop    eax
c0016edb:	5a                   	pop    edx
c0016edc:	68 07 0c 00 00       	push   0xc07
c0016ee1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016ee5:	57                   	push   edi
c0016ee6:	89 ef                	mov    edi,ebp
c0016ee8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016eef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ef5:	6a 00                	push   0x0
c0016ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016eff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f05:	e8 0e 58 ff ff       	call   c000c718 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016f0a:	b9 00 10 00 00       	mov    ecx,0x1000
c0016f0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f11:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0016f16:	83 c4 20             	add    esp,0x20
c0016f19:	48                   	dec    eax
c0016f1a:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0016f1f:	85 c0                	test   eax,eax
c0016f21:	75 01                	jne    c0016f24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016f23:	fb                   	sti    
c0016f24:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016f2b:	e9 df fe ff ff       	jmp    c0016e0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016f30:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016f33:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016f3b:	0f 86 a9 00 00 00    	jbe    c0016fea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016f41:	fa                   	cli    
c0016f42:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0016f48:	51                   	push   ecx
c0016f49:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016f50:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f56:	6a 00                	push   0x0
c0016f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f60:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f66:	e8 4b 52 ff ff       	call   c000c1b6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016f6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016f6f:	c1 e6 0c             	shl    esi,0xc
c0016f72:	01 de                	add    esi,ebx
c0016f74:	83 c4 10             	add    esp,0x10
c0016f77:	39 de                	cmp    esi,ebx
c0016f79:	74 61                	je     c0016fdc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016f7b:	e8 76 34 ff ff       	call   c000a3f6 <Phys::allocatePage()>
c0016f80:	6a 07                	push   0x7
c0016f82:	89 c7                	mov    edi,eax
c0016f84:	55                   	push   ebp
c0016f85:	50                   	push   eax
c0016f86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f8e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f94:	e8 c3 53 ff ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f99:	58                   	pop    eax
c0016f9a:	5a                   	pop    edx
c0016f9b:	68 07 0c 00 00       	push   0xc07
c0016fa0:	53                   	push   ebx
c0016fa1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016fa7:	57                   	push   edi
c0016fa8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016faf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fb5:	6a 00                	push   0x0
c0016fb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fbf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fc5:	e8 4e 57 ff ff       	call   c000c718 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016fca:	83 c4 1c             	add    esp,0x1c
c0016fcd:	68 00 10 00 00       	push   0x1000
c0016fd2:	6a 00                	push   0x0
c0016fd4:	55                   	push   ebp
c0016fd5:	e8 aa 96 fe ff       	call   c0000684 <memset>
c0016fda:	eb 98                	jmp    c0016f74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016fdc:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0016fe1:	48                   	dec    eax
c0016fe2:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0016fe7:	75 01                	jne    c0016fea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016fe9:	fb                   	sti    
c0016fea:	83 ec 0c             	sub    esp,0xc
c0016fed:	55                   	push   ebp
c0016fee:	e8 f2 4f ff ff       	call   c000bfe5 <Virt::freeKernelVirtualPages(unsigned long)>
c0016ff3:	83 c4 10             	add    esp,0x10
c0016ff6:	b0 01                	mov    al,0x1
c0016ff8:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016ffe:	5b                   	pop    ebx
c0016fff:	5e                   	pop    esi
c0017000:	5f                   	pop    edi
c0017001:	5d                   	pop    ebp
c0017002:	c3                   	ret    

c0017003 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017003:	55                   	push   ebp
c0017004:	57                   	push   edi
c0017005:	56                   	push   esi
c0017006:	53                   	push   ebx
c0017007:	83 ec 48             	sub    esp,0x48
c001700a:	68 14 01 00 00       	push   0x114
c001700f:	e8 2b 2d ff ff       	call   c0009d3f <malloc>
c0017014:	83 c4 0c             	add    esp,0xc
c0017017:	89 c6                	mov    esi,eax
c0017019:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001701d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017021:	50                   	push   eax
c0017022:	e8 8f 65 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0017027:	58                   	pop    eax
c0017028:	5a                   	pop    edx
c0017029:	6a 01                	push   0x1
c001702b:	56                   	push   esi
c001702c:	e8 5f 66 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0017031:	83 c4 10             	add    esp,0x10
c0017034:	85 c0                	test   eax,eax
c0017036:	0f 85 47 01 00 00    	jne    c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001703c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	6a 34                	push   0x34
c0017049:	e8 f1 2c ff ff       	call   c0009d3f <malloc>
c001704e:	89 c3                	mov    ebx,eax
c0017050:	58                   	pop    eax
c0017051:	8b 06                	mov    eax,DWORD PTR [esi]
c0017053:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017057:	57                   	push   edi
c0017058:	53                   	push   ebx
c0017059:	6a 00                	push   0x0
c001705b:	6a 34                	push   0x34
c001705d:	56                   	push   esi
c001705e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017061:	83 c4 20             	add    esp,0x20
c0017064:	85 c0                	test   eax,eax
c0017066:	0f 85 17 01 00 00    	jne    c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001706c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017072:	0f 85 0b 01 00 00    	jne    c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017078:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001707b:	85 c0                	test   eax,eax
c001707d:	0f 84 00 01 00 00    	je     c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017083:	31 d2                	xor    edx,edx
c0017085:	55                   	push   ebp
c0017086:	52                   	push   edx
c0017087:	50                   	push   eax
c0017088:	56                   	push   esi
c0017089:	e8 c0 66 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	85 c0                	test   eax,eax
c0017093:	0f 85 ea 00 00 00    	jne    c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017099:	83 ec 0c             	sub    esp,0xc
c001709c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001709f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00170a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170a7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00170ab:	0f af c2             	imul   eax,edx
c00170ae:	50                   	push   eax
c00170af:	e8 8b 2c ff ff       	call   c0009d3f <malloc>
c00170b4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00170bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170c1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00170c5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00170c9:	0f af c2             	imul   eax,edx
c00170cc:	99                   	cdq    
c00170cd:	52                   	push   edx
c00170ce:	50                   	push   eax
c00170cf:	56                   	push   esi
c00170d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170d3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00170d6:	83 c4 20             	add    esp,0x20
c00170d9:	85 c0                	test   eax,eax
c00170db:	0f 84 a2 00 00 00    	je     c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170e1:	31 d2                	xor    edx,edx
c00170e3:	51                   	push   ecx
c00170e4:	52                   	push   edx
c00170e5:	50                   	push   eax
c00170e6:	56                   	push   esi
c00170e7:	e8 62 66 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00170ec:	83 c4 10             	add    esp,0x10
c00170ef:	85 c0                	test   eax,eax
c00170f1:	0f 85 8c 00 00 00    	jne    c0017183 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170f7:	83 ec 0c             	sub    esp,0xc
c00170fa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00170fe:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017102:	31 ed                	xor    ebp,ebp
c0017104:	0f af c2             	imul   eax,edx
c0017107:	50                   	push   eax
c0017108:	e8 32 2c ff ff       	call   c0009d3f <malloc>
c001710d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001710f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017113:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001711a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001711e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017122:	0f af c2             	imul   eax,edx
c0017125:	99                   	cdq    
c0017126:	52                   	push   edx
c0017127:	50                   	push   eax
c0017128:	56                   	push   esi
c0017129:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001712c:	83 c4 20             	add    esp,0x20
c001712f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017137:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001713b:	0f 86 80 00 00 00    	jbe    c00171c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017141:	0f b7 fd             	movzx  edi,bp
c0017144:	c1 e7 05             	shl    edi,0x5
c0017147:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001714b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001714e:	75 6b                	jne    c00171bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017150:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017153:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017157:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001715a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001715e:	52                   	push   edx
c001715f:	31 d2                	xor    edx,edx
c0017161:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017164:	52                   	push   edx
c0017165:	50                   	push   eax
c0017166:	56                   	push   esi
c0017167:	e8 e2 65 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c001716c:	83 c4 10             	add    esp,0x10
c001716f:	85 c0                	test   eax,eax
c0017171:	74 17                	je     c001718a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017173:	83 ec 0c             	sub    esp,0xc
c0017176:	68 9d 61 02 c0       	push   0xc002619d
c001717b:	e8 cb 5e ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	31 c0                	xor    eax,eax
c0017185:	e9 87 00 00 00       	jmp    c0017211 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001718a:	83 ec 0c             	sub    esp,0xc
c001718d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017190:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017193:	50                   	push   eax
c0017194:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017198:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001719c:	56                   	push   esi
c001719d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00171a1:	e8 b3 fb ff ff       	call   c0016d59 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00171a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171aa:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00171ae:	83 c4 20             	add    esp,0x20
c00171b1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00171b5:	73 04                	jae    c00171bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00171b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171bb:	45                   	inc    ebp
c00171bc:	e9 76 ff ff ff       	jmp    c0017137 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00171c1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00171c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171cd:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00171d3:	83 ec 0c             	sub    esp,0xc
c00171d6:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00171dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00171e1:	05 00 10 00 00       	add    eax,0x1000
c00171e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00171e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ed:	e8 5d 2b ff ff       	call   c0009d4f <free>
c00171f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00171f5:	e8 55 2b ff ff       	call   c0009d4f <free>
c00171fa:	58                   	pop    eax
c00171fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171ff:	e8 4b 2b ff ff       	call   c0009d4f <free>
c0017204:	89 34 24             	mov    DWORD PTR [esp],esi
c0017207:	e8 e2 64 ff ff       	call   c000d6ee <File::close()>
c001720c:	83 c4 10             	add    esp,0x10
c001720f:	b0 01                	mov    al,0x1
c0017211:	83 c4 3c             	add    esp,0x3c
c0017214:	5b                   	pop    ebx
c0017215:	5e                   	pop    esi
c0017216:	5f                   	pop    edi
c0017217:	5d                   	pop    ebp
c0017218:	c3                   	ret    

c0017219 <Thr::runtimeReferenceHelper()>:
c0017219:	83 ec 18             	sub    esp,0x18
c001721c:	68 a5 61 02 c0       	push   0xc00261a5
c0017221:	e8 25 5e ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017226:	fa                   	cli    
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	eb fe                	jmp    c001722a <Thr::runtimeReferenceHelper()+0x11>

c001722c <Thr::getAddressOfKernelSymbol(char const*)>:
c001722c:	57                   	push   edi
c001722d:	56                   	push   esi
c001722e:	53                   	push   ebx
c001722f:	31 db                	xor    ebx,ebx
c0017231:	39 1d 60 97 02 c0    	cmp    DWORD PTR ds:0xc0029760,ebx
c0017237:	7e 3c                	jle    c0017275 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017239:	8b 34 9d e0 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6920]
c0017240:	31 ff                	xor    edi,edi
c0017242:	39 3c 9d e0 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6a20],edi
c0017249:	7e 27                	jle    c0017272 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001724b:	50                   	push   eax
c001724c:	50                   	push   eax
c001724d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017251:	8b 06                	mov    eax,DWORD PTR [esi]
c0017253:	03 04 9d 60 96 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd69a0]
c001725a:	50                   	push   eax
c001725b:	e8 6c 95 fe ff       	call   c00007cc <strcmp>
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	85 c0                	test   eax,eax
c0017265:	75 05                	jne    c001726c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017267:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001726a:	eb 0b                	jmp    c0017277 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001726c:	83 c6 10             	add    esi,0x10
c001726f:	47                   	inc    edi
c0017270:	eb d0                	jmp    c0017242 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017272:	43                   	inc    ebx
c0017273:	eb bc                	jmp    c0017231 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017275:	31 c0                	xor    eax,eax
c0017277:	5b                   	pop    ebx
c0017278:	5e                   	pop    esi
c0017279:	5f                   	pop    edi
c001727a:	c3                   	ret    

c001727b <Thr::loadKernelSymbolTable(char const*)>:
c001727b:	55                   	push   ebp
c001727c:	57                   	push   edi
c001727d:	56                   	push   esi
c001727e:	53                   	push   ebx
c001727f:	83 ec 68             	sub    esp,0x68
c0017282:	8b 35 b0 97 02 c0    	mov    esi,DWORD PTR ds:0xc00297b0
c0017288:	68 14 01 00 00       	push   0x114
c001728d:	e8 ad 2a ff ff       	call   c0009d3f <malloc>
c0017292:	83 c4 0c             	add    esp,0xc
c0017295:	89 c3                	mov    ebx,eax
c0017297:	56                   	push   esi
c0017298:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001729c:	50                   	push   eax
c001729d:	e8 14 63 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c00172a2:	5e                   	pop    esi
c00172a3:	5f                   	pop    edi
c00172a4:	6a 01                	push   0x1
c00172a6:	53                   	push   ebx
c00172a7:	e8 e4 63 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c00172ac:	83 c4 10             	add    esp,0x10
c00172af:	85 c0                	test   eax,eax
c00172b1:	74 0a                	je     c00172bd <Thr::loadKernelSymbolTable(char const*)+0x42>
c00172b3:	83 ec 0c             	sub    esp,0xc
c00172b6:	68 c7 61 02 c0       	push   0xc00261c7
c00172bb:	eb 34                	jmp    c00172f1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00172bd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00172c5:	83 ec 0c             	sub    esp,0xc
c00172c8:	6a 34                	push   0x34
c00172ca:	e8 70 2a ff ff       	call   c0009d3f <malloc>
c00172cf:	59                   	pop    ecx
c00172d0:	89 c7                	mov    edi,eax
c00172d2:	8d 74 24 34          	lea    esi,[esp+0x34]
c00172d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172d8:	56                   	push   esi
c00172d9:	57                   	push   edi
c00172da:	6a 00                	push   0x0
c00172dc:	6a 34                	push   0x34
c00172de:	53                   	push   ebx
c00172df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172e2:	83 c4 20             	add    esp,0x20
c00172e5:	85 c0                	test   eax,eax
c00172e7:	74 17                	je     c0017300 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	68 de 61 02 c0       	push   0xc00261de
c00172f1:	e8 77 dd ff ff       	call   c001506d <Krnl::panic(char const*)>
c00172f6:	83 c4 10             	add    esp,0x10
c00172f9:	31 c0                	xor    eax,eax
c00172fb:	e9 31 02 00 00       	jmp    c0017531 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017300:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017306:	75 e1                	jne    c00172e9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017308:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001730b:	85 c0                	test   eax,eax
c001730d:	74 da                	je     c00172e9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001730f:	52                   	push   edx
c0017310:	31 d2                	xor    edx,edx
c0017312:	52                   	push   edx
c0017313:	50                   	push   eax
c0017314:	53                   	push   ebx
c0017315:	e8 34 64 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c001731a:	83 c4 10             	add    esp,0x10
c001731d:	85 c0                	test   eax,eax
c001731f:	75 c8                	jne    c00172e9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017321:	83 ec 0c             	sub    esp,0xc
c0017324:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017328:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001732c:	31 ed                	xor    ebp,ebp
c001732e:	0f af c2             	imul   eax,edx
c0017331:	50                   	push   eax
c0017332:	e8 08 2a ff ff       	call   c0009d3f <malloc>
c0017337:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017339:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001733d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017344:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017348:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001734c:	0f af c2             	imul   eax,edx
c001734f:	99                   	cdq    
c0017350:	52                   	push   edx
c0017351:	50                   	push   eax
c0017352:	53                   	push   ebx
c0017353:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017356:	83 c4 20             	add    esp,0x20
c0017359:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017361:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017369:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017371:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017379:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001737d:	0f 86 aa 00 00 00    	jbe    c001742d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017383:	0f b7 f5             	movzx  esi,bp
c0017386:	6b f6 28             	imul   esi,esi,0x28
c0017389:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001738d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017390:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017394:	50                   	push   eax
c0017395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017399:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001739d:	8b 16                	mov    edx,DWORD PTR [esi]
c001739f:	6b c0 28             	imul   eax,eax,0x28
c00173a2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00173a6:	89 d0                	mov    eax,edx
c00173a8:	31 d2                	xor    edx,edx
c00173aa:	52                   	push   edx
c00173ab:	50                   	push   eax
c00173ac:	53                   	push   ebx
c00173ad:	e8 9c 63 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00173b2:	83 c4 0c             	add    esp,0xc
c00173b5:	6a 20                	push   0x20
c00173b7:	6a 00                	push   0x0
c00173b9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00173bd:	52                   	push   edx
c00173be:	e8 c1 92 fe ff       	call   c0000684 <memset>
c00173c3:	58                   	pop    eax
c00173c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00173c6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00173ca:	51                   	push   ecx
c00173cb:	8d 54 24 40          	lea    edx,[esp+0x40]
c00173cf:	52                   	push   edx
c00173d0:	6a 00                	push   0x0
c00173d2:	6a 1f                	push   0x1f
c00173d4:	53                   	push   ebx
c00173d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00173d8:	83 c4 18             	add    esp,0x18
c00173db:	68 f5 61 02 c0       	push   0xc00261f5
c00173e0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00173e4:	52                   	push   edx
c00173e5:	e8 e2 93 fe ff       	call   c00007cc <strcmp>
c00173ea:	83 c4 10             	add    esp,0x10
c00173ed:	85 c0                	test   eax,eax
c00173ef:	75 0f                	jne    c0017400 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00173f1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00173f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017400:	50                   	push   eax
c0017401:	50                   	push   eax
c0017402:	68 fd 61 02 c0       	push   0xc00261fd
c0017407:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001740b:	50                   	push   eax
c001740c:	e8 bb 93 fe ff       	call   c00007cc <strcmp>
c0017411:	83 c4 10             	add    esp,0x10
c0017414:	85 c0                	test   eax,eax
c0017416:	75 0f                	jne    c0017427 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017418:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001741b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001741f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017427:	45                   	inc    ebp
c0017428:	e9 4c ff ff ff       	jmp    c0017379 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001742d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017432:	75 10                	jne    c0017444 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017434:	83 ec 0c             	sub    esp,0xc
c0017437:	68 05 62 02 c0       	push   0xc0026205
c001743c:	e8 2c dc ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017441:	83 c4 10             	add    esp,0x10
c0017444:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017449:	75 10                	jne    c001745b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001744b:	83 ec 0c             	sub    esp,0xc
c001744e:	68 05 62 02 c0       	push   0xc0026205
c0017453:	e8 15 dc ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	31 d2                	xor    edx,edx
c001745d:	50                   	push   eax
c001745e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017462:	52                   	push   edx
c0017463:	50                   	push   eax
c0017464:	53                   	push   ebx
c0017465:	e8 e4 62 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c001746a:	5a                   	pop    edx
c001746b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001746f:	e8 cb 28 ff ff       	call   c0009d3f <malloc>
c0017474:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017478:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001747c:	31 c9                	xor    ecx,ecx
c001747e:	5e                   	pop    esi
c001747f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017481:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017485:	55                   	push   ebp
c0017486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001748a:	51                   	push   ecx
c001748b:	52                   	push   edx
c001748c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017490:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017494:	53                   	push   ebx
c0017495:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017498:	83 c4 14             	add    esp,0x14
c001749b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001749f:	e8 9b 28 ff ff       	call   c0009d3f <malloc>
c00174a4:	89 c6                	mov    esi,eax
c00174a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174ab:	56                   	push   esi
c00174ac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00174b0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174b4:	51                   	push   ecx
c00174b5:	52                   	push   edx
c00174b6:	53                   	push   ebx
c00174b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00174be:	8b 15 60 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029760
c00174c4:	83 c4 1c             	add    esp,0x1c
c00174c7:	c1 e8 04             	shr    eax,0x4
c00174ca:	89 04 95 e0 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6a20],eax
c00174d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00174d5:	31 d2                	xor    edx,edx
c00174d7:	52                   	push   edx
c00174d8:	50                   	push   eax
c00174d9:	53                   	push   ebx
c00174da:	e8 6f 62 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00174df:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00174e1:	31 d2                	xor    edx,edx
c00174e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174e6:	56                   	push   esi
c00174e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174eb:	52                   	push   edx
c00174ec:	50                   	push   eax
c00174ed:	53                   	push   ebx
c00174ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00174f1:	83 c4 14             	add    esp,0x14
c00174f4:	53                   	push   ebx
c00174f5:	e8 f4 61 ff ff       	call   c000d6ee <File::close()>
c00174fa:	5d                   	pop    ebp
c00174fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174ff:	e8 4b 28 ff ff       	call   c0009d4f <free>
c0017504:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017507:	e8 43 28 ff ff       	call   c0009d4f <free>
c001750c:	a1 60 97 02 c0       	mov    eax,ds:0xc0029760
c0017511:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017515:	8d 50 01             	lea    edx,[eax+0x1]
c0017518:	89 0c 85 e0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6920],ecx
c001751f:	89 34 85 60 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69a0],esi
c0017526:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	b0 01                	mov    al,0x1
c0017531:	83 c4 5c             	add    esp,0x5c
c0017534:	5b                   	pop    ebx
c0017535:	5e                   	pop    esi
c0017536:	5f                   	pop    edi
c0017537:	5d                   	pop    ebp
c0017538:	c3                   	ret    

c0017539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017539:	55                   	push   ebp
c001753a:	57                   	push   edi
c001753b:	56                   	push   esi
c001753c:	53                   	push   ebx
c001753d:	81 ec 68 03 00 00    	sub    esp,0x368
c0017543:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001754a:	8b 1d b0 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297b0
c0017550:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017554:	68 14 01 00 00       	push   0x114
c0017559:	e8 e1 27 ff ff       	call   c0009d3f <malloc>
c001755e:	83 c4 0c             	add    esp,0xc
c0017561:	89 c5                	mov    ebp,eax
c0017563:	53                   	push   ebx
c0017564:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001756b:	50                   	push   eax
c001756c:	e8 45 60 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0017571:	5e                   	pop    esi
c0017572:	5f                   	pop    edi
c0017573:	6a 01                	push   0x1
c0017575:	55                   	push   ebp
c0017576:	e8 15 61 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	85 c0                	test   eax,eax
c0017580:	0f 85 a7 06 00 00    	jne    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017586:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001758e:	83 ec 0c             	sub    esp,0xc
c0017591:	6a 34                	push   0x34
c0017593:	e8 a7 27 ff ff       	call   c0009d3f <malloc>
c0017598:	5b                   	pop    ebx
c0017599:	89 c7                	mov    edi,eax
c001759b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001759f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175a2:	53                   	push   ebx
c00175a3:	57                   	push   edi
c00175a4:	6a 00                	push   0x0
c00175a6:	6a 34                	push   0x34
c00175a8:	55                   	push   ebp
c00175a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00175ac:	83 c4 20             	add    esp,0x20
c00175af:	85 c0                	test   eax,eax
c00175b1:	0f 85 76 06 00 00    	jne    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175b7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00175bd:	0f 85 6a 06 00 00    	jne    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175c3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00175c6:	85 c0                	test   eax,eax
c00175c8:	0f 84 5f 06 00 00    	je     c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175ce:	31 d2                	xor    edx,edx
c00175d0:	51                   	push   ecx
c00175d1:	52                   	push   edx
c00175d2:	50                   	push   eax
c00175d3:	55                   	push   ebp
c00175d4:	e8 75 61 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	85 c0                	test   eax,eax
c00175de:	0f 85 49 06 00 00    	jne    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175e4:	83 ec 0c             	sub    esp,0xc
c00175e7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00175ea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00175ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175f2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00175f6:	0f af c2             	imul   eax,edx
c00175f9:	50                   	push   eax
c00175fa:	e8 40 27 ff ff       	call   c0009d3f <malloc>
c00175ff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017602:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017609:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001760d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017611:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017615:	0f af c2             	imul   eax,edx
c0017618:	99                   	cdq    
c0017619:	52                   	push   edx
c001761a:	50                   	push   eax
c001761b:	55                   	push   ebp
c001761c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001761f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017622:	83 c4 20             	add    esp,0x20
c0017625:	85 c0                	test   eax,eax
c0017627:	0f 84 00 06 00 00    	je     c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001762d:	52                   	push   edx
c001762e:	31 d2                	xor    edx,edx
c0017630:	52                   	push   edx
c0017631:	50                   	push   eax
c0017632:	55                   	push   ebp
c0017633:	e8 16 61 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c0017638:	83 c4 10             	add    esp,0x10
c001763b:	85 c0                	test   eax,eax
c001763d:	0f 85 ea 05 00 00    	jne    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017643:	83 ec 0c             	sub    esp,0xc
c0017646:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001764a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001764e:	31 f6                	xor    esi,esi
c0017650:	0f af c2             	imul   eax,edx
c0017653:	50                   	push   eax
c0017654:	e8 e6 26 ff ff       	call   c0009d3f <malloc>
c0017659:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001765c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017663:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017667:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001766b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001766f:	0f af c2             	imul   eax,edx
c0017672:	99                   	cdq    
c0017673:	52                   	push   edx
c0017674:	50                   	push   eax
c0017675:	55                   	push   ebp
c0017676:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017679:	83 c4 20             	add    esp,0x20
c001767c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017680:	0f 86 8a 00 00 00    	jbe    c0017710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017686:	0f b7 de             	movzx  ebx,si
c0017689:	c1 e3 05             	shl    ebx,0x5
c001768c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017690:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017693:	75 75                	jne    c001770a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017695:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017698:	31 d2                	xor    edx,edx
c001769a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001769e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a5:	50                   	push   eax
c00176a6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00176a9:	52                   	push   edx
c00176aa:	50                   	push   eax
c00176ab:	55                   	push   ebp
c00176ac:	e8 9d 60 ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	85 c0                	test   eax,eax
c00176b6:	0f 85 71 05 00 00    	jne    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00176bc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00176c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176c6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00176ca:	31 d2                	xor    edx,edx
c00176cc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00176d0:	83 ec 0c             	sub    esp,0xc
c00176d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176de:	50                   	push   eax
c00176df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e7:	52                   	push   edx
c00176e8:	50                   	push   eax
c00176e9:	55                   	push   ebp
c00176ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176ed:	83 c4 1c             	add    esp,0x1c
c00176f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176f3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00176f6:	50                   	push   eax
c00176f7:	6a 00                	push   0x0
c00176f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176fd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017701:	50                   	push   eax
c0017702:	e8 7d 8f fe ff       	call   c0000684 <memset>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	46                   	inc    esi
c001770b:	e9 6c ff ff ff       	jmp    c001767c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017710:	53                   	push   ebx
c0017711:	31 db                	xor    ebx,ebx
c0017713:	68 00 01 00 00       	push   0x100
c0017718:	6a 00                	push   0x0
c001771a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001771e:	50                   	push   eax
c001771f:	e8 60 8f fe ff       	call   c0000684 <memset>
c0017724:	83 c4 0c             	add    esp,0xc
c0017727:	68 00 01 00 00       	push   0x100
c001772c:	6a 00                	push   0x0
c001772e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017735:	50                   	push   eax
c0017736:	e8 49 8f fe ff       	call   c0000684 <memset>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017746:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001774e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017756:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001775e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017766:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001776a:	0f 86 30 01 00 00    	jbe    c00178a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017770:	0f b7 f3             	movzx  esi,bx
c0017773:	6b f6 28             	imul   esi,esi,0x28
c0017776:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001777a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001777d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017781:	52                   	push   edx
c0017782:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017786:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001778a:	8b 06                	mov    eax,DWORD PTR [esi]
c001778c:	6b d2 28             	imul   edx,edx,0x28
c001778f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017793:	31 d2                	xor    edx,edx
c0017795:	52                   	push   edx
c0017796:	50                   	push   eax
c0017797:	55                   	push   ebp
c0017798:	e8 b1 5f ff ff       	call   c000d74e <File::seek(unsigned long long)>
c001779d:	83 c4 0c             	add    esp,0xc
c00177a0:	6a 20                	push   0x20
c00177a2:	6a 00                	push   0x0
c00177a4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177ab:	51                   	push   ecx
c00177ac:	e8 d3 8e fe ff       	call   c0000684 <memset>
c00177b1:	59                   	pop    ecx
c00177b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00177b5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00177b9:	52                   	push   edx
c00177ba:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00177c1:	51                   	push   ecx
c00177c2:	6a 00                	push   0x0
c00177c4:	6a 1f                	push   0x1f
c00177c6:	55                   	push   ebp
c00177c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177ca:	83 c4 1c             	add    esp,0x1c
c00177cd:	6a 09                	push   0x9
c00177cf:	68 1f 62 02 c0       	push   0xc002621f
c00177d4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177db:	51                   	push   ecx
c00177dc:	e8 9f 8d fe ff       	call   c0000580 <memcmp>
c00177e1:	83 c4 10             	add    esp,0x10
c00177e4:	85 c0                	test   eax,eax
c00177e6:	75 21                	jne    c0017809 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00177e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177f0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00177f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00177f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00177fb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017802:	89 d0                	mov    eax,edx
c0017804:	40                   	inc    eax
c0017805:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017809:	50                   	push   eax
c001780a:	6a 09                	push   0x9
c001780c:	68 29 62 02 c0       	push   0xc0026229
c0017811:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017818:	50                   	push   eax
c0017819:	e8 62 8d fe ff       	call   c0000580 <memcmp>
c001781e:	83 c4 10             	add    esp,0x10
c0017821:	85 c0                	test   eax,eax
c0017823:	75 21                	jne    c0017846 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017829:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001782d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017831:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017835:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017838:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001783f:	89 d0                	mov    eax,edx
c0017841:	40                   	inc    eax
c0017842:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017846:	50                   	push   eax
c0017847:	50                   	push   eax
c0017848:	68 f5 61 02 c0       	push   0xc00261f5
c001784d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017854:	50                   	push   eax
c0017855:	e8 72 8f fe ff       	call   c00007cc <strcmp>
c001785a:	83 c4 10             	add    esp,0x10
c001785d:	85 c0                	test   eax,eax
c001785f:	75 0f                	jne    c0017870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017861:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017864:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001786c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017870:	50                   	push   eax
c0017871:	50                   	push   eax
c0017872:	68 fd 61 02 c0       	push   0xc00261fd
c0017877:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001787e:	50                   	push   eax
c001787f:	e8 48 8f fe ff       	call   c00007cc <strcmp>
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	85 c0                	test   eax,eax
c0017889:	75 0f                	jne    c001789a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001788b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001788e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017896:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001789a:	43                   	inc    ebx
c001789b:	e9 c6 fe ff ff       	jmp    c0017766 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00178a0:	31 d2                	xor    edx,edx
c00178a2:	50                   	push   eax
c00178a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178a7:	52                   	push   edx
c00178a8:	50                   	push   eax
c00178a9:	55                   	push   ebp
c00178aa:	e8 9f 5e ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00178af:	58                   	pop    eax
c00178b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178b4:	e8 86 24 ff ff       	call   c0009d3f <malloc>
c00178b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00178bc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00178c0:	31 d2                	xor    edx,edx
c00178c2:	58                   	pop    eax
c00178c3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00178c7:	53                   	push   ebx
c00178c8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00178cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d0:	52                   	push   edx
c00178d1:	50                   	push   eax
c00178d2:	55                   	push   ebp
c00178d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178d6:	83 c4 14             	add    esp,0x14
c00178d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178dd:	e8 5d 24 ff ff       	call   c0009d3f <malloc>
c00178e2:	31 d2                	xor    edx,edx
c00178e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178e8:	83 c4 0c             	add    esp,0xc
c00178eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ef:	52                   	push   edx
c00178f0:	50                   	push   eax
c00178f1:	55                   	push   ebp
c00178f2:	e8 57 5e ff ff       	call   c000d74e <File::seek(unsigned long long)>
c00178f7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00178fa:	31 d2                	xor    edx,edx
c00178fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017903:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017907:	52                   	push   edx
c0017908:	50                   	push   eax
c0017909:	55                   	push   ebp
c001790a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001790d:	83 c4 20             	add    esp,0x20
c0017910:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017918:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001791c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017920:	0f 84 0b 03 00 00    	je     c0017c31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017926:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001792d:	31 d2                	xor    edx,edx
c001792f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017933:	c1 e8 03             	shr    eax,0x3
c0017936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001793a:	51                   	push   ecx
c001793b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001793f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017943:	52                   	push   edx
c0017944:	50                   	push   eax
c0017945:	55                   	push   ebp
c0017946:	e8 03 5e ff ff       	call   c000d74e <File::seek(unsigned long long)>
c001794b:	5b                   	pop    ebx
c001794c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017950:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017957:	e8 e3 23 ff ff       	call   c0009d3f <malloc>
c001795c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001795f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017963:	31 d2                	xor    edx,edx
c0017965:	5e                   	pop    esi
c0017966:	8d 44 24 58          	lea    eax,[esp+0x58]
c001796a:	50                   	push   eax
c001796b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001796f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017973:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001797a:	52                   	push   edx
c001797b:	50                   	push   eax
c001797c:	55                   	push   ebp
c001797d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017980:	83 c4 20             	add    esp,0x20
c0017983:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001798b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001798f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017993:	0f 8d 7c 02 00 00    	jge    c0017c15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017999:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001799d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179a1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00179a6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00179a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00179b5:	89 d8                	mov    eax,ebx
c00179b7:	c1 e8 08             	shr    eax,0x8
c00179ba:	89 c6                	mov    esi,eax
c00179bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179c0:	c1 e6 04             	shl    esi,0x4
c00179c3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00179c7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00179ca:	85 d2                	test   edx,edx
c00179cc:	0f 85 bf 00 00 00    	jne    c0017a91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00179d2:	83 ec 0c             	sub    esp,0xc
c00179d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179d9:	03 06                	add    eax,DWORD PTR [esi]
c00179db:	50                   	push   eax
c00179dc:	e8 4b f8 ff ff       	call   c001722c <Thr::getAddressOfKernelSymbol(char const*)>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	89 c2                	mov    edx,eax
c00179e6:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00179eb:	85 c0                	test   eax,eax
c00179ed:	0f 85 9e 00 00 00    	jne    c0017a91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00179f3:	83 ec 0c             	sub    esp,0xc
c00179f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179fa:	03 06                	add    eax,DWORD PTR [esi]
c00179fc:	50                   	push   eax
c00179fd:	e8 0e 0f ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	89 c2                	mov    edx,eax
c0017a07:	85 c0                	test   eax,eax
c0017a09:	0f 85 82 00 00 00    	jne    c0017a91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a0f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a13:	50                   	push   eax
c0017a14:	50                   	push   eax
c0017a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a19:	03 06                	add    eax,DWORD PTR [esi]
c0017a1b:	50                   	push   eax
c0017a1c:	68 33 62 02 c0       	push   0xc0026233
c0017a21:	e8 25 56 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017a26:	58                   	pop    eax
c0017a27:	5a                   	pop    edx
c0017a28:	68 4d 62 02 c0       	push   0xc002624d
c0017a2d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a34:	50                   	push   eax
c0017a35:	e8 06 8d fe ff       	call   c0000740 <strcpy>
c0017a3a:	59                   	pop    ecx
c0017a3b:	58                   	pop    eax
c0017a3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a40:	03 06                	add    eax,DWORD PTR [esi]
c0017a42:	50                   	push   eax
c0017a43:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a4a:	50                   	push   eax
c0017a4b:	e8 30 8e fe ff       	call   c0000880 <strcat>
c0017a50:	58                   	pop    eax
c0017a51:	5a                   	pop    edx
c0017a52:	68 e3 62 02 c0       	push   0xc00262e3
c0017a57:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a5e:	50                   	push   eax
c0017a5f:	e8 1c 8e fe ff       	call   c0000880 <strcat>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a6c:	0f 84 5d 01 00 00    	je     c0017bcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a72:	83 ec 0c             	sub    esp,0xc
c0017a75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a7c:	50                   	push   eax
c0017a7d:	e8 eb d5 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017a89:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017a8d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a91:	80 fb 01             	cmp    bl,0x1
c0017a94:	0f 85 88 00 00 00    	jne    c0017b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017a9a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017aa1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017aa5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017aa9:	01 ce                	add    esi,ecx
c0017aab:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017ab1:	0f 94 c0             	sete   al
c0017ab4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017aba:	0f 94 c3             	sete   bl
c0017abd:	09 c3                	or     ebx,eax
c0017abf:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ac1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017ac6:	74 41                	je     c0017b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017ac8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017acb:	84 db                	test   bl,bl
c0017acd:	75 15                	jne    c0017ae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017acf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ad3:	66 83 f8 0c          	cmp    ax,0xc
c0017ad7:	76 05                	jbe    c0017ade <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017ad9:	b8 0c 00 00 00       	mov    eax,0xc
c0017ade:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017ae2:	76 37                	jbe    c0017b1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017ae4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017ae8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017aed:	0f 84 dc 00 00 00    	je     c0017bcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017af3:	83 ec 0c             	sub    esp,0xc
c0017af6:	68 64 62 02 c0       	push   0xc0026264
c0017afb:	e8 6d d5 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017b00:	83 c4 10             	add    esp,0x10
c0017b03:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017b07:	eb 12                	jmp    c0017b1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b09:	01 c1                	add    ecx,eax
c0017b0b:	84 db                	test   bl,bl
c0017b0d:	75 0c                	jne    c0017b1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b0f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b13:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b17:	77 02                	ja     c0017b1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b19:	01 d1                	add    ecx,edx
c0017b1b:	89 0e                	mov    DWORD PTR [esi],ecx
c0017b1d:	e9 ea 00 00 00       	jmp    c0017c0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b22:	80 fb 02             	cmp    bl,0x2
c0017b25:	75 7c                	jne    c0017ba3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017b27:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017b2e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017b32:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017b36:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b3c:	74 20                	je     c0017b5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b3e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b44:	74 18                	je     c0017b5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b4a:	b9 0a 00 00 00       	mov    ecx,0xa
c0017b4f:	66 83 f8 0e          	cmp    ax,0xe
c0017b53:	77 03                	ja     c0017b58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017b55:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017b58:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017b5c:	76 1f                	jbe    c0017b7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017b5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017b62:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b67:	74 66                	je     c0017bcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017b69:	83 ec 0c             	sub    esp,0xc
c0017b6c:	68 80 62 02 c0       	push   0xc0026280
c0017b71:	e8 f7 d4 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017b76:	83 c4 10             	add    esp,0x10
c0017b79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b7f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017b84:	74 13                	je     c0017b99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017b86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b8a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017b91:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017b95:	01 c8                	add    eax,ecx
c0017b97:	eb 04                	jmp    c0017b9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017b99:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017b9d:	01 c2                	add    edx,eax
c0017b9f:	89 16                	mov    DWORD PTR [esi],edx
c0017ba1:	eb 69                	jmp    c0017c0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017ba3:	0f b6 db             	movzx  ebx,bl
c0017ba6:	50                   	push   eax
c0017ba7:	50                   	push   eax
c0017ba8:	53                   	push   ebx
c0017ba9:	68 9c 62 02 c0       	push   0xc002629c
c0017bae:	e8 98 54 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bbb:	74 12                	je     c0017bcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017bbd:	83 ec 0c             	sub    esp,0xc
c0017bc0:	68 a7 62 02 c0       	push   0xc00262a7
c0017bc5:	e8 a3 d4 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	eb 3d                	jmp    c0017c0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017bcf:	83 ec 0c             	sub    esp,0xc
c0017bd2:	55                   	push   ebp
c0017bd3:	e8 16 5b ff ff       	call   c000d6ee <File::close()>
c0017bd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017bdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017be1:	59                   	pop    ecx
c0017be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017be6:	e8 64 21 ff ff       	call   c0009d4f <free>
c0017beb:	5b                   	pop    ebx
c0017bec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bf0:	e8 5a 21 ff ff       	call   c0009d4f <free>
c0017bf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017bf8:	e8 52 21 ff ff       	call   c0009d4f <free>
c0017bfd:	5e                   	pop    esi
c0017bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c02:	e8 48 21 ff ff       	call   c0009d4f <free>
c0017c07:	83 c4 10             	add    esp,0x10
c0017c0a:	eb 21                	jmp    c0017c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c0c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017c10:	e9 76 fd ff ff       	jmp    c001798b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017c15:	83 ec 0c             	sub    esp,0xc
c0017c18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c1c:	e8 2e 21 ff ff       	call   c0009d4f <free>
c0017c21:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017c25:	83 c4 10             	add    esp,0x10
c0017c28:	e9 eb fc ff ff       	jmp    c0017918 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017c2d:	31 c0                	xor    eax,eax
c0017c2f:	eb 33                	jmp    c0017c64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017c31:	83 ec 0c             	sub    esp,0xc
c0017c34:	55                   	push   ebp
c0017c35:	e8 b4 5a ff ff       	call   c000d6ee <File::close()>
c0017c3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c43:	58                   	pop    eax
c0017c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c48:	e8 02 21 ff ff       	call   c0009d4f <free>
c0017c4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c50:	e8 fa 20 ff ff       	call   c0009d4f <free>
c0017c55:	5a                   	pop    edx
c0017c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c5a:	e8 f0 20 ff ff       	call   c0009d4f <free>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	b0 01                	mov    al,0x1
c0017c64:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017c6a:	5b                   	pop    ebx
c0017c6b:	5e                   	pop    esi
c0017c6c:	5f                   	pop    edi
c0017c6d:	5d                   	pop    ebp
c0017c6e:	c3                   	ret    

c0017c6f <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017c6f:	56                   	push   esi
c0017c70:	31 d2                	xor    edx,edx
c0017c72:	53                   	push   ebx
c0017c73:	8b 1d c0 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028fc0
c0017c79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c7d:	39 d3                	cmp    ebx,edx
c0017c7f:	7e 1b                	jle    c0017c9c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017c81:	8b 04 95 e0 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e20]
c0017c88:	39 c8                	cmp    eax,ecx
c0017c8a:	77 0d                	ja     c0017c99 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017c8c:	8b 34 95 e0 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7020]
c0017c93:	01 c6                	add    esi,eax
c0017c95:	39 ce                	cmp    esi,ecx
c0017c97:	77 05                	ja     c0017c9e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017c99:	42                   	inc    edx
c0017c9a:	eb e1                	jmp    c0017c7d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017c9c:	31 c0                	xor    eax,eax
c0017c9e:	5b                   	pop    ebx
c0017c9f:	5e                   	pop    esi
c0017ca0:	c3                   	ret    

c0017ca1 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017ca1:	53                   	push   ebx
c0017ca2:	31 c0                	xor    eax,eax
c0017ca4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017ca8:	8b 1d c0 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028fc0
c0017cae:	39 c3                	cmp    ebx,eax
c0017cb0:	7e 22                	jle    c0017cd4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017cb2:	8b 14 85 e0 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6e20]
c0017cb9:	39 ca                	cmp    edx,ecx
c0017cbb:	77 14                	ja     c0017cd1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017cbd:	03 14 85 e0 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7020]
c0017cc4:	39 ca                	cmp    edx,ecx
c0017cc6:	76 09                	jbe    c0017cd1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017cc8:	8b 04 85 e0 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c20]
c0017ccf:	eb 05                	jmp    c0017cd6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017cd1:	40                   	inc    eax
c0017cd2:	eb da                	jmp    c0017cae <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017cd4:	31 c0                	xor    eax,eax
c0017cd6:	5b                   	pop    ebx
c0017cd7:	c3                   	ret    

c0017cd8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017cd8:	53                   	push   ebx
c0017cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017cdd:	53                   	push   ebx
c0017cde:	e8 8c ff ff ff       	call   c0017c6f <Thr::getDriverBaseFromAddress(unsigned long)>
c0017ce3:	5a                   	pop    edx
c0017ce4:	31 d2                	xor    edx,edx
c0017ce6:	85 c0                	test   eax,eax
c0017ce8:	74 04                	je     c0017cee <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017cea:	89 da                	mov    edx,ebx
c0017cec:	29 c2                	sub    edx,eax
c0017cee:	89 d0                	mov    eax,edx
c0017cf0:	5b                   	pop    ebx
c0017cf1:	c3                   	ret    

c0017cf2 <Thr::loadDLL(char const*, bool)>:
c0017cf2:	55                   	push   ebp
c0017cf3:	57                   	push   edi
c0017cf4:	56                   	push   esi
c0017cf5:	53                   	push   ebx
c0017cf6:	81 ec 34 01 00 00    	sub    esp,0x134
c0017cfc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017d03:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017d0a:	56                   	push   esi
c0017d0b:	68 bf 62 02 c0       	push   0xc00262bf
c0017d10:	e8 36 53 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017d15:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d1c:	e8 1e 20 ff ff       	call   c0009d3f <malloc>
c0017d21:	83 c4 0c             	add    esp,0xc
c0017d24:	89 c3                	mov    ebx,eax
c0017d26:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c0017d2c:	56                   	push   esi
c0017d2d:	50                   	push   eax
c0017d2e:	e8 83 58 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	85 db                	test   ebx,ebx
c0017d38:	75 3c                	jne    c0017d76 <Thr::loadDLL(char const*, bool)+0x84>
c0017d3a:	89 f8                	mov    eax,edi
c0017d3c:	84 c0                	test   al,al
c0017d3e:	0f 84 d2 01 00 00    	je     c0017f16 <Thr::loadDLL(char const*, bool)+0x224>
c0017d44:	55                   	push   ebp
c0017d45:	55                   	push   ebp
c0017d46:	68 d0 62 02 c0       	push   0xc00262d0
c0017d4b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017d4f:	55                   	push   ebp
c0017d50:	e8 eb 89 fe ff       	call   c0000740 <strcpy>
c0017d55:	58                   	pop    eax
c0017d56:	5a                   	pop    edx
c0017d57:	56                   	push   esi
c0017d58:	55                   	push   ebp
c0017d59:	e8 22 8b fe ff       	call   c0000880 <strcat>
c0017d5e:	59                   	pop    ecx
c0017d5f:	58                   	pop    eax
c0017d60:	68 e3 62 02 c0       	push   0xc00262e3
c0017d65:	55                   	push   ebp
c0017d66:	e8 15 8b fe ff       	call   c0000880 <strcat>
c0017d6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d6e:	e8 fa d2 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017d73:	83 c4 10             	add    esp,0x10
c0017d76:	51                   	push   ecx
c0017d77:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017d7b:	50                   	push   eax
c0017d7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017d80:	50                   	push   eax
c0017d81:	53                   	push   ebx
c0017d82:	e8 b5 5b ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	85 db                	test   ebx,ebx
c0017d8c:	74 0c                	je     c0017d9a <Thr::loadDLL(char const*, bool)+0xa8>
c0017d8e:	83 ec 0c             	sub    esp,0xc
c0017d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d93:	53                   	push   ebx
c0017d94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017d9f:	75 0a                	jne    c0017dab <Thr::loadDLL(char const*, bool)+0xb9>
c0017da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017da5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017da9:	75 3c                	jne    c0017de7 <Thr::loadDLL(char const*, bool)+0xf5>
c0017dab:	89 f8                	mov    eax,edi
c0017dad:	84 c0                	test   al,al
c0017daf:	0f 84 49 01 00 00    	je     c0017efe <Thr::loadDLL(char const*, bool)+0x20c>
c0017db5:	51                   	push   ecx
c0017db6:	51                   	push   ecx
c0017db7:	68 d0 62 02 c0       	push   0xc00262d0
c0017dbc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017dc0:	53                   	push   ebx
c0017dc1:	e8 7a 89 fe ff       	call   c0000740 <strcpy>
c0017dc6:	5d                   	pop    ebp
c0017dc7:	58                   	pop    eax
c0017dc8:	56                   	push   esi
c0017dc9:	53                   	push   ebx
c0017dca:	e8 b1 8a fe ff       	call   c0000880 <strcat>
c0017dcf:	58                   	pop    eax
c0017dd0:	5a                   	pop    edx
c0017dd1:	68 e3 62 02 c0       	push   0xc00262e3
c0017dd6:	53                   	push   ebx
c0017dd7:	e8 a4 8a fe ff       	call   c0000880 <strcat>
c0017ddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ddf:	e8 89 d2 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	52                   	push   edx
c0017de8:	6a 03                	push   0x3
c0017dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017df2:	05 ff 0f 00 00       	add    eax,0xfff
c0017df7:	83 d2 00             	adc    edx,0x0
c0017dfa:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017dfe:	50                   	push   eax
c0017dff:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c0017e05:	e8 54 46 ff ff       	call   c000c45e <VAS::allocatePages(int, int)>
c0017e0a:	59                   	pop    ecx
c0017e0b:	89 c3                	mov    ebx,eax
c0017e0d:	5d                   	pop    ebp
c0017e0e:	50                   	push   eax
c0017e0f:	68 86 42 02 c0       	push   0xc0024286
c0017e14:	e8 32 52 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e1c:	e8 7f 88 fe ff       	call   c00006a0 <strlen>
c0017e21:	8b 2d c0 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028fc0
c0017e27:	40                   	inc    eax
c0017e28:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e2b:	e8 0f 1f ff ff       	call   c0009d3f <malloc>
c0017e30:	89 04 ad e0 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6c20],eax
c0017e37:	58                   	pop    eax
c0017e38:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c0017e3d:	5a                   	pop    edx
c0017e3e:	56                   	push   esi
c0017e3f:	ff 34 85 e0 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6c20]
c0017e46:	e8 f5 88 fe ff       	call   c0000740 <strcpy>
c0017e4b:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c0017e50:	8d 50 01             	lea    edx,[eax+0x1]
c0017e53:	89 1c 85 e0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e20],ebx
c0017e5a:	89 15 c0 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc0,edx
c0017e60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e64:	83 c4 0c             	add    esp,0xc
c0017e67:	89 14 85 e0 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7020],edx
c0017e6e:	6a 01                	push   0x1
c0017e70:	53                   	push   ebx
c0017e71:	56                   	push   esi
c0017e72:	e8 c2 f6 ff ff       	call   c0017539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017e77:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017e83:	0f 85 89 00 00 00    	jne    c0017f12 <Thr::loadDLL(char const*, bool)+0x220>
c0017e89:	89 f8                	mov    eax,edi
c0017e8b:	84 c0                	test   al,al
c0017e8d:	74 73                	je     c0017f02 <Thr::loadDLL(char const*, bool)+0x210>
c0017e8f:	83 ec 0c             	sub    esp,0xc
c0017e92:	68 e5 62 02 c0       	push   0xc00262e5
c0017e97:	e8 d1 d1 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	eb 61                	jmp    c0017f02 <Thr::loadDLL(char const*, bool)+0x210>
c0017ea1:	50                   	push   eax
c0017ea2:	50                   	push   eax
c0017ea3:	89 e8                	mov    eax,ebp
c0017ea5:	c1 e0 0c             	shl    eax,0xc
c0017ea8:	01 d8                	add    eax,ebx
c0017eaa:	50                   	push   eax
c0017eab:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c0017eb1:	e8 10 41 ff ff       	call   c000bfc6 <VAS::getPageTableEntry(unsigned long)>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ebb:	a8 60                	test   al,0x60
c0017ebd:	75 11                	jne    c0017ed0 <Thr::loadDLL(char const*, bool)+0x1de>
c0017ebf:	83 ec 0c             	sub    esp,0xc
c0017ec2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017ec7:	50                   	push   eax
c0017ec8:	e8 a6 24 ff ff       	call   c000a373 <Phys::freePage(unsigned long)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	45                   	inc    ebp
c0017ed1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ed5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ed9:	05 ff 0f 00 00       	add    eax,0xfff
c0017ede:	bf 00 00 00 00       	mov    edi,0x0
c0017ee3:	83 d2 00             	adc    edx,0x0
c0017ee6:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017eea:	c1 ea 0c             	shr    edx,0xc
c0017eed:	39 c5                	cmp    ebp,eax
c0017eef:	89 d1                	mov    ecx,edx
c0017ef1:	89 f8                	mov    eax,edi
c0017ef3:	19 c8                	sbb    eax,ecx
c0017ef5:	72 aa                	jb     c0017ea1 <Thr::loadDLL(char const*, bool)+0x1af>
c0017ef7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017efc:	75 18                	jne    c0017f16 <Thr::loadDLL(char const*, bool)+0x224>
c0017efe:	31 db                	xor    ebx,ebx
c0017f00:	eb 14                	jmp    c0017f16 <Thr::loadDLL(char const*, bool)+0x224>
c0017f02:	83 ec 0c             	sub    esp,0xc
c0017f05:	68 04 63 02 c0       	push   0xc0026304
c0017f0a:	e8 5e d1 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017f0f:	83 c4 10             	add    esp,0x10
c0017f12:	31 ed                	xor    ebp,ebp
c0017f14:	eb bb                	jmp    c0017ed1 <Thr::loadDLL(char const*, bool)+0x1df>
c0017f16:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f1c:	89 d8                	mov    eax,ebx
c0017f1e:	5b                   	pop    ebx
c0017f1f:	5e                   	pop    esi
c0017f20:	5f                   	pop    edi
c0017f21:	5d                   	pop    ebp
c0017f22:	c3                   	ret    

c0017f23 <Thr::executeDLL(unsigned long, void*)>:
c0017f23:	56                   	push   esi
c0017f24:	53                   	push   ebx
c0017f25:	52                   	push   edx
c0017f26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f2a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f2e:	85 db                	test   ebx,ebx
c0017f30:	75 10                	jne    c0017f42 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017f32:	83 ec 0c             	sub    esp,0xc
c0017f35:	68 20 63 02 c0       	push   0xc0026320
c0017f3a:	e8 2e d1 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	50                   	push   eax
c0017f43:	50                   	push   eax
c0017f44:	53                   	push   ebx
c0017f45:	68 4a 63 02 c0       	push   0xc002634a
c0017f4a:	e8 fc 50 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0017f4f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f53:	89 d8                	mov    eax,ebx
c0017f55:	83 c4 14             	add    esp,0x14
c0017f58:	5b                   	pop    ebx
c0017f59:	5e                   	pop    esi
c0017f5a:	ff e0                	jmp    eax

c0017f5c <userModeEntryPoint(void*)>:
c0017f5c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0017f61:	48                   	dec    eax
c0017f62:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0017f67:	75 03                	jne    c0017f6c <userModeEntryPoint(void*)+0x10>
c0017f69:	fb                   	sti    
c0017f6a:	66 90                	xchg   ax,ax
c0017f6c:	fb                   	sti    
c0017f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f75:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017f7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f7f:	e9 db 82 fe ff       	jmp    c000025f <goToUsermode>

c0017f84 <changeTSS>:
c0017f84:	83 ec 14             	sub    esp,0x14
c0017f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f8c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017f8f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017f94:	c1 e2 15             	shl    edx,0x15
c0017f97:	29 d0                	sub    eax,edx
c0017f99:	50                   	push   eax
c0017f9a:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0017f9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017fa5:	05 7c 11 00 00       	add    eax,0x117c
c0017faa:	50                   	push   eax
c0017fab:	e8 94 36 ff ff       	call   c000b644 <TSS::setESP(unsigned long)>
c0017fb0:	83 c4 1c             	add    esp,0x1c
c0017fb3:	c3                   	ret    

c0017fb4 <switchToThread(ThreadControlBlock*)>:
c0017fb4:	57                   	push   edi
c0017fb5:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0017fba:	56                   	push   esi
c0017fbb:	85 c0                	test   eax,eax
c0017fbd:	53                   	push   ebx
c0017fbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fc2:	0f 85 90 00 00 00    	jne    c0018058 <switchToThread(ThreadControlBlock*)+0xa4>
c0017fc8:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017fcb:	3c ff                	cmp    al,0xff
c0017fcd:	0f 84 81 00 00 00    	je     c0018054 <switchToThread(ThreadControlBlock*)+0xa0>
c0017fd3:	0f b6 d0             	movzx  edx,al
c0017fd6:	b8 00 04 00 00       	mov    eax,0x400
c0017fdb:	29 d0                	sub    eax,edx
c0017fdd:	d1 f8                	sar    eax,1
c0017fdf:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017fe2:	66 90                	xchg   ax,ax
c0017fe4:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017fe7:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0017fec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ff2:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017ff9:	74 4d                	je     c0018048 <switchToThread(ThreadControlBlock*)+0x94>
c0017ffb:	0f 31                	rdtsc  
c0017ffd:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0018002:	89 c6                	mov    esi,eax
c0018004:	89 d7                	mov    edi,edx
c0018006:	2b 35 b8 97 02 c0    	sub    esi,DWORD PTR ds:0xc00297b8
c001800c:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c0018012:	1b 3d bc 97 02 c0    	sbb    edi,DWORD PTR ds:0xc00297bc
c0018018:	89 35 c0 97 02 c0    	mov    DWORD PTR ds:0xc00297c0,esi
c001801e:	a3 b8 97 02 c0       	mov    ds:0xc00297b8,eax
c0018023:	89 3d c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,edi
c0018029:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001802f:	89 15 bc 97 02 c0    	mov    DWORD PTR ds:0xc00297bc,edx
c0018035:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018038:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001803b:	01 c6                	add    esi,eax
c001803d:	11 d7                	adc    edi,edx
c001803f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0018042:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0018045:	8d 76 00             	lea    esi,[esi+0x0]
c0018048:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001804c:	5b                   	pop    ebx
c001804d:	5e                   	pop    esi
c001804e:	5f                   	pop    edi
c001804f:	e9 43 82 fe ff       	jmp    c0000297 <switchToThreadASM>
c0018054:	31 c0                	xor    eax,eax
c0018056:	eb 8c                	jmp    c0017fe4 <switchToThread(ThreadControlBlock*)+0x30>
c0018058:	5b                   	pop    ebx
c0018059:	c7 05 80 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x1
c0018063:	5e                   	pop    esi
c0018064:	5f                   	pop    edi
c0018065:	c3                   	ret    
c0018066:	66 90                	xchg   ax,ax

c0018068 <Process::addArgs(char**)>:
c0018068:	57                   	push   edi
c0018069:	56                   	push   esi
c001806a:	53                   	push   ebx
c001806b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001806f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018073:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001807d:	85 ff                	test   edi,edi
c001807f:	74 43                	je     c00180c4 <Process::addArgs(char**)+0x5c>
c0018081:	8b 07                	mov    eax,DWORD PTR [edi]
c0018083:	85 c0                	test   eax,eax
c0018085:	74 3d                	je     c00180c4 <Process::addArgs(char**)+0x5c>
c0018087:	31 db                	xor    ebx,ebx
c0018089:	8d 76 00             	lea    esi,[esi+0x0]
c001808c:	83 ec 0c             	sub    esp,0xc
c001808f:	50                   	push   eax
c0018090:	e8 0b 86 fe ff       	call   c00006a0 <strlen>
c0018095:	40                   	inc    eax
c0018096:	89 04 24             	mov    DWORD PTR [esp],eax
c0018099:	e8 a1 1c ff ff       	call   c0009d3f <malloc>
c001809e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00180a5:	5a                   	pop    edx
c00180a6:	59                   	pop    ecx
c00180a7:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00180aa:	43                   	inc    ebx
c00180ab:	50                   	push   eax
c00180ac:	e8 8f 86 fe ff       	call   c0000740 <strcpy>
c00180b1:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00180b7:	83 c4 10             	add    esp,0x10
c00180ba:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00180bd:	85 c0                	test   eax,eax
c00180bf:	75 cb                	jne    c001808c <Process::addArgs(char**)+0x24>
c00180c1:	8d 76 00             	lea    esi,[esi+0x0]
c00180c4:	5b                   	pop    ebx
c00180c5:	5e                   	pop    esi
c00180c6:	5f                   	pop    edi
c00180c7:	c3                   	ret    

c00180c8 <Process::Process(char const*, Process*, char**)>:
c00180c8:	56                   	push   esi
c00180c9:	53                   	push   ebx
c00180ca:	83 ec 14             	sub    esp,0x14
c00180cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d1:	05 0c 02 00 00       	add    eax,0x20c
c00180d6:	bb 07 00 00 00       	mov    ebx,0x7
c00180db:	89 c6                	mov    esi,eax
c00180dd:	8d 76 00             	lea    esi,[esi+0x0]
c00180e0:	85 db                	test   ebx,ebx
c00180e2:	78 14                	js     c00180f8 <Process::Process(char const*, Process*, char**)+0x30>
c00180e4:	83 ec 0c             	sub    esp,0xc
c00180e7:	56                   	push   esi
c00180e8:	e8 ff af 00 00       	call   c00230ec <ThreadControlBlock::ThreadControlBlock()>
c00180ed:	83 c4 10             	add    esp,0x10
c00180f0:	83 c6 5f             	add    esi,0x5f
c00180f3:	4b                   	dec    ebx
c00180f4:	eb ea                	jmp    c00180e0 <Process::Process(char const*, Process*, char**)+0x18>
c00180f6:	66 90                	xchg   ax,ax
c00180f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180fc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018103:	83 ec 0c             	sub    esp,0xc
c0018106:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001810a:	e8 e7 cd ff ff       	call   c0014ef6 <Krnl::newProcessEnv(Process*)>
c001810f:	83 c4 10             	add    esp,0x10
c0018112:	89 c2                	mov    edx,eax
c0018114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018118:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001811e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018122:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001812b:	a1 90 7c 02 c0       	mov    eax,ds:0xc0027c90
c0018130:	8d 50 01             	lea    edx,[eax+0x1]
c0018133:	89 15 90 7c 02 c0    	mov    DWORD PTR ds:0xc0027c90,edx
c0018139:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001813d:	89 02                	mov    DWORD PTR [edx],eax
c001813f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0018147:	83 ec 0c             	sub    esp,0xc
c001814a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001814e:	e8 ec 1b ff ff       	call   c0009d3f <malloc>
c0018153:	83 c4 10             	add    esp,0x10
c0018156:	89 c3                	mov    ebx,eax
c0018158:	83 ec 08             	sub    esp,0x8
c001815b:	6a 00                	push   0x0
c001815d:	53                   	push   ebx
c001815e:	e8 a3 46 ff ff       	call   c000c806 <VAS::VAS(bool)>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001816a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018174:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001817e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018182:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018186:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001818c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018190:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018196:	85 c0                	test   eax,eax
c0018198:	74 42                	je     c00181dc <Process::Process(char const*, Process*, char**)+0x114>
c001819a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001819e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181a4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00181aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ae:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00181b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00181c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c8:	05 0c 01 00 00       	add    eax,0x10c
c00181cd:	83 ec 08             	sub    esp,0x8
c00181d0:	52                   	push   edx
c00181d1:	50                   	push   eax
c00181d2:	e8 69 85 fe ff       	call   c0000740 <strcpy>
c00181d7:	83 c4 10             	add    esp,0x10
c00181da:	eb 64                	jmp    c0018240 <Process::Process(char const*, Process*, char**)+0x178>
c00181dc:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c00181e4:	83 ec 0c             	sub    esp,0xc
c00181e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00181eb:	e8 4f 1b ff ff       	call   c0009d3f <malloc>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	89 c3                	mov    ebx,eax
c00181f5:	83 ec 08             	sub    esp,0x8
c00181f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181fc:	53                   	push   ebx
c00181fd:	e8 54 31 ff ff       	call   c000b356 <VgaText::VgaText(char const*)>
c0018202:	83 c4 10             	add    esp,0x10
c0018205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018209:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001820f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018213:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018219:	83 ec 0c             	sub    esp,0xc
c001821c:	50                   	push   eax
c001821d:	e8 fd 28 ff ff       	call   c000ab1f <addToTerminalCycle(VgaText*)>
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018229:	05 0c 01 00 00       	add    eax,0x10c
c001822e:	83 ec 08             	sub    esp,0x8
c0018231:	68 69 63 02 c0       	push   0xc0026369
c0018236:	50                   	push   eax
c0018237:	e8 04 85 fe ff       	call   c0000740 <strcpy>
c001823c:	83 c4 10             	add    esp,0x10
c001823f:	90                   	nop
c0018240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018244:	83 c0 0c             	add    eax,0xc
c0018247:	83 ec 08             	sub    esp,0x8
c001824a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001824e:	50                   	push   eax
c001824f:	e8 ec 84 fe ff       	call   c0000740 <strcpy>
c0018254:	83 c4 10             	add    esp,0x10
c0018257:	83 ec 08             	sub    esp,0x8
c001825a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001825e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018262:	e8 01 fe ff ff       	call   c0018068 <Process::addArgs(char**)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	83 ec 08             	sub    esp,0x8
c001826d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018275:	e8 89 ed ff ff       	call   c0017003 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001827a:	83 c4 10             	add    esp,0x10
c001827d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018281:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018285:	83 f0 01             	xor    eax,0x1
c0018288:	88 c2                	mov    dl,al
c001828a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001828e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018294:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018299:	83 ec 08             	sub    esp,0x8
c001829c:	50                   	push   eax
c001829d:	68 c0 63 02 c0       	push   0xc00263c0
c00182a2:	e8 a4 4d ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	90                   	nop
c00182ab:	83 c4 14             	add    esp,0x14
c00182ae:	5b                   	pop    ebx
c00182af:	5e                   	pop    esi
c00182b0:	c3                   	ret    
c00182b1:	90                   	nop
c00182b2:	66 90                	xchg   ax,ax

c00182b4 <Process::Process(bool, char const*, Process*, char**)>:
c00182b4:	56                   	push   esi
c00182b5:	53                   	push   ebx
c00182b6:	83 ec 24             	sub    esp,0x24
c00182b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00182c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182c5:	05 0c 02 00 00       	add    eax,0x20c
c00182ca:	bb 07 00 00 00       	mov    ebx,0x7
c00182cf:	89 c6                	mov    esi,eax
c00182d1:	8d 76 00             	lea    esi,[esi+0x0]
c00182d4:	85 db                	test   ebx,ebx
c00182d6:	78 14                	js     c00182ec <Process::Process(bool, char const*, Process*, char**)+0x38>
c00182d8:	83 ec 0c             	sub    esp,0xc
c00182db:	56                   	push   esi
c00182dc:	e8 0b ae 00 00       	call   c00230ec <ThreadControlBlock::ThreadControlBlock()>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	83 c6 5f             	add    esi,0x5f
c00182e7:	4b                   	dec    ebx
c00182e8:	eb ea                	jmp    c00182d4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00182ea:	66 90                	xchg   ax,ax
c00182ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00182f7:	83 ec 0c             	sub    esp,0xc
c00182fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182fe:	e8 f3 cb ff ff       	call   c0014ef6 <Krnl::newProcessEnv(Process*)>
c0018303:	83 c4 10             	add    esp,0x10
c0018306:	89 c2                	mov    edx,eax
c0018308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001830c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018312:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018316:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001831f:	a1 90 7c 02 c0       	mov    eax,ds:0xc0027c90
c0018324:	8d 50 01             	lea    edx,[eax+0x1]
c0018327:	89 15 90 7c 02 c0    	mov    DWORD PTR ds:0xc0027c90,edx
c001832d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018331:	89 02                	mov    DWORD PTR [edx],eax
c0018333:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001833b:	83 ec 0c             	sub    esp,0xc
c001833e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018342:	e8 f8 19 ff ff       	call   c0009d3f <malloc>
c0018347:	83 c4 10             	add    esp,0x10
c001834a:	89 c3                	mov    ebx,eax
c001834c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018351:	83 ec 08             	sub    esp,0x8
c0018354:	50                   	push   eax
c0018355:	53                   	push   ebx
c0018356:	e8 ab 44 ff ff       	call   c000c806 <VAS::VAS(bool)>
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018362:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018368:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018376:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001837e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018388:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001838e:	85 c0                	test   eax,eax
c0018390:	74 42                	je     c00183d4 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018392:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018396:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001839c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00183a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00183ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00183bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c0:	05 0c 01 00 00       	add    eax,0x10c
c00183c5:	83 ec 08             	sub    esp,0x8
c00183c8:	52                   	push   edx
c00183c9:	50                   	push   eax
c00183ca:	e8 71 83 fe ff       	call   c0000740 <strcpy>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	eb 64                	jmp    c0018438 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00183d4:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00183dc:	83 ec 0c             	sub    esp,0xc
c00183df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00183e3:	e8 57 19 ff ff       	call   c0009d3f <malloc>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	89 c3                	mov    ebx,eax
c00183ed:	83 ec 08             	sub    esp,0x8
c00183f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00183f4:	53                   	push   ebx
c00183f5:	e8 5c 2f ff ff       	call   c000b356 <VgaText::VgaText(char const*)>
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018401:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018411:	83 ec 0c             	sub    esp,0xc
c0018414:	50                   	push   eax
c0018415:	e8 05 27 ff ff       	call   c000ab1f <addToTerminalCycle(VgaText*)>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018421:	05 0c 01 00 00       	add    eax,0x10c
c0018426:	83 ec 08             	sub    esp,0x8
c0018429:	68 69 63 02 c0       	push   0xc0026369
c001842e:	50                   	push   eax
c001842f:	e8 0c 83 fe ff       	call   c0000740 <strcpy>
c0018434:	83 c4 10             	add    esp,0x10
c0018437:	90                   	nop
c0018438:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001843c:	83 c0 0c             	add    eax,0xc
c001843f:	83 ec 08             	sub    esp,0x8
c0018442:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018446:	50                   	push   eax
c0018447:	e8 f4 82 fe ff       	call   c0000740 <strcpy>
c001844c:	83 c4 10             	add    esp,0x10
c001844f:	83 ec 08             	sub    esp,0x8
c0018452:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018456:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001845a:	e8 09 fc ff ff       	call   c0018068 <Process::addArgs(char**)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	90                   	nop
c0018463:	83 c4 24             	add    esp,0x24
c0018466:	5b                   	pop    ebx
c0018467:	5e                   	pop    esi
c0018468:	c3                   	ret    
c0018469:	8d 76 00             	lea    esi,[esi+0x0]

c001846c <taskStartupFunction>:
c001846c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018471:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018474:	c3                   	ret    
c0018475:	90                   	nop
c0018476:	66 90                	xchg   ax,ax

c0018478 <Semaphore::Semaphore(int)>:
c0018478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001847c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018480:	89 10                	mov    DWORD PTR [eax],edx
c0018482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018486:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001848d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018491:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001849c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184a3:	90                   	nop
c00184a4:	c3                   	ret    
c00184a5:	90                   	nop
c00184a6:	66 90                	xchg   ax,ax

c00184a8 <Mutex::Mutex()>:
c00184a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ac:	6a 01                	push   0x1
c00184ae:	50                   	push   eax
c00184af:	e8 c4 ff ff ff       	call   c0018478 <Semaphore::Semaphore(int)>
c00184b4:	83 c4 08             	add    esp,0x8
c00184b7:	90                   	nop
c00184b8:	c3                   	ret    
c00184b9:	90                   	nop
c00184ba:	66 90                	xchg   ax,ax

c00184bc <Process::createThread(void (*)(void*), void*, int)>:
c00184bc:	57                   	push   edi
c00184bd:	31 c9                	xor    ecx,ecx
c00184bf:	56                   	push   esi
c00184c0:	53                   	push   ebx
c00184c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184c5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00184cc:	89 f2                	mov    edx,esi
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	0f b7 c2             	movzx  eax,dx
c00184d3:	83 e2 01             	and    edx,0x1
c00184d6:	74 14                	je     c00184ec <Process::createThread(void (*)(void*), void*, int)+0x30>
c00184d8:	d1 f8                	sar    eax,1
c00184da:	41                   	inc    ecx
c00184db:	89 c2                	mov    edx,eax
c00184dd:	83 f9 10             	cmp    ecx,0x10
c00184e0:	75 ee                	jne    c00184d0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00184e2:	31 db                	xor    ebx,ebx
c00184e4:	89 d8                	mov    eax,ebx
c00184e6:	5b                   	pop    ebx
c00184e7:	5e                   	pop    esi
c00184e8:	5f                   	pop    edi
c00184e9:	c3                   	ret    
c00184ea:	66 90                	xchg   ax,ax
c00184ec:	b8 01 00 00 00       	mov    eax,0x1
c00184f1:	d3 e0                	shl    eax,cl
c00184f3:	09 c6                	or     esi,eax
c00184f5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00184f8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00184ff:	01 c0                	add    eax,eax
c0018501:	01 c8                	add    eax,ecx
c0018503:	8d 04 80             	lea    eax,[eax+eax*4]
c0018506:	01 d8                	add    eax,ebx
c0018508:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001850f:	75 0b                	jne    c001851c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018511:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001851b:	90                   	nop
c001851c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018522:	83 ec 08             	sub    esp,0x8
c0018525:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018528:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001852b:	01 c0                	add    eax,eax
c001852d:	01 c8                	add    eax,ecx
c001852f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018532:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018535:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001853b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018541:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018545:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001854b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018551:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018558:	89 ca                	mov    edx,ecx
c001855a:	f7 da                	neg    edx
c001855c:	c1 e2 15             	shl    edx,0x15
c001855f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018565:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001856b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001856f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018579:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001857f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018583:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018589:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018593:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001859d:	53                   	push   ebx
c001859e:	68 a4 97 02 c0       	push   0xc00297a4
c00185a3:	e8 e4 a8 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00185a8:	83 c4 10             	add    esp,0x10
c00185ab:	89 d8                	mov    eax,ebx
c00185ad:	5b                   	pop    ebx
c00185ae:	5e                   	pop    esi
c00185af:	5f                   	pop    edi
c00185b0:	c3                   	ret    
c00185b1:	90                   	nop
c00185b2:	66 90                	xchg   ax,ax

c00185b4 <Process::createUserThread()>:
c00185b4:	83 ec 0c             	sub    esp,0xc
c00185b7:	68 80 00 00 00       	push   0x80
c00185bc:	6a 00                	push   0x0
c00185be:	68 5c 7f 01 c0       	push   0xc0017f5c
c00185c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185c7:	e8 f0 fe ff ff       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c00185cc:	83 c4 1c             	add    esp,0x1c
c00185cf:	c3                   	ret    

c00185d0 <setupMultitasking(void (*)())>:
c00185d0:	56                   	push   esi
c00185d1:	53                   	push   ebx
c00185d2:	51                   	push   ecx
c00185d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185d7:	eb 13                	jmp    c00185ec <setupMultitasking(void (*)())+0x1c>
c00185d9:	8d 76 00             	lea    esi,[esi+0x0]
c00185dc:	83 ec 0c             	sub    esp,0xc
c00185df:	68 a4 97 02 c0       	push   0xc00297a4
c00185e4:	e8 eb a7 00 00       	call   c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00185e9:	83 c4 10             	add    esp,0x10
c00185ec:	83 ec 0c             	sub    esp,0xc
c00185ef:	68 a4 97 02 c0       	push   0xc00297a4
c00185f4:	e8 b7 a7 00 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185f9:	83 c4 10             	add    esp,0x10
c00185fc:	84 c0                	test   al,al
c00185fe:	74 dc                	je     c00185dc <setupMultitasking(void (*)())+0xc>
c0018600:	83 ec 0c             	sub    esp,0xc
c0018603:	68 1f 07 00 00       	push   0x71f
c0018608:	e8 32 17 ff ff       	call   c0009d3f <malloc>
c001860d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018614:	89 c3                	mov    ebx,eax
c0018616:	6a 00                	push   0x0
c0018618:	68 6d 63 02 c0       	push   0xc002636d
c001861d:	6a 01                	push   0x1
c001861f:	50                   	push   eax
c0018620:	e8 8f fc ff ff       	call   c00182b4 <Process::Process(bool, char const*, Process*, char**)>
c0018625:	83 c4 14             	add    esp,0x14
c0018628:	89 1d b0 97 02 c0    	mov    DWORD PTR ds:0xc00297b0,ebx
c001862e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018634:	e8 f4 27 ff ff       	call   c000ae2d <setActiveTerminal(VgaText*)>
c0018639:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018641:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001864b:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018651:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018654:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001865e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018664:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001866a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018674:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001867e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018688:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001868e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018698:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001869e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00186a8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00186ae:	58                   	pop    eax
c00186af:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00186b5:	5a                   	pop    edx
c00186b6:	68 69 63 02 c0       	push   0xc0026369
c00186bb:	50                   	push   eax
c00186bc:	e8 7f 80 fe ff       	call   c0000740 <strcpy>
c00186c1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00186c8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00186cc:	83 c4 14             	add    esp,0x14
c00186cf:	5b                   	pop    ebx
c00186d0:	5e                   	pop    esi
c00186d1:	e9 b3 7b fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00186d6:	66 90                	xchg   ax,ax

c00186d8 <schedule()>:
c00186d8:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c00186dd:	85 c0                	test   eax,eax
c00186df:	74 0b                	je     c00186ec <schedule()+0x14>
c00186e1:	c7 05 80 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x1
c00186eb:	c3                   	ret    
c00186ec:	53                   	push   ebx
c00186ed:	83 ec 14             	sub    esp,0x14
c00186f0:	68 a4 97 02 c0       	push   0xc00297a4
c00186f5:	e8 b6 a6 00 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00186fa:	83 c4 10             	add    esp,0x10
c00186fd:	84 c0                	test   al,al
c00186ff:	75 3b                	jne    c001873c <schedule()+0x64>
c0018701:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018706:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018709:	4a                   	dec    edx
c001870a:	74 38                	je     c0018744 <schedule()+0x6c>
c001870c:	83 ec 0c             	sub    esp,0xc
c001870f:	68 a4 97 02 c0       	push   0xc00297a4
c0018714:	e8 b3 a6 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018719:	c7 04 24 a4 97 02 c0 	mov    DWORD PTR [esp],0xc00297a4
c0018720:	89 c3                	mov    ebx,eax
c0018722:	e8 ad a6 00 00       	call   c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018727:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001872e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018731:	e8 7e f8 ff ff       	call   c0017fb4 <switchToThread(ThreadControlBlock*)>
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	8d 76 00             	lea    esi,[esi+0x0]
c001873c:	83 c4 08             	add    esp,0x8
c001873f:	5b                   	pop    ebx
c0018740:	c3                   	ret    
c0018741:	8d 76 00             	lea    esi,[esi+0x0]
c0018744:	83 ec 08             	sub    esp,0x8
c0018747:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001874e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018754:	68 a4 97 02 c0       	push   0xc00297a4
c0018759:	e8 2e a7 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001875e:	83 c4 10             	add    esp,0x10
c0018761:	eb a9                	jmp    c001870c <schedule()+0x34>
c0018763:	90                   	nop

c0018764 <Semaphore::tryAcquire()>:
c0018764:	53                   	push   ebx
c0018765:	83 ec 08             	sub    esp,0x8
c0018768:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001876c:	fa                   	cli    
c001876d:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018772:	8d 50 01             	lea    edx,[eax+0x1]
c0018775:	89 15 88 97 02 c0    	mov    DWORD PTR ds:0xc0029788,edx
c001877b:	8b 15 84 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029784
c0018781:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018784:	89 1d 84 97 02 c0    	mov    DWORD PTR ds:0xc0029784,ebx
c001878a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001878d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001878f:	7c 33                	jl     c00187c4 <Semaphore::tryAcquire()+0x60>
c0018791:	89 15 84 97 02 c0    	mov    DWORD PTR ds:0xc0029784,edx
c0018797:	85 d2                	test   edx,edx
c0018799:	75 0d                	jne    c00187a8 <Semaphore::tryAcquire()+0x44>
c001879b:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c00187a1:	85 d2                	test   edx,edx
c00187a3:	75 6b                	jne    c0018810 <Semaphore::tryAcquire()+0xac>
c00187a5:	8d 76 00             	lea    esi,[esi+0x0]
c00187a8:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00187ad:	85 c0                	test   eax,eax
c00187af:	74 0b                	je     c00187bc <Semaphore::tryAcquire()+0x58>
c00187b1:	8d 76 00             	lea    esi,[esi+0x0]
c00187b4:	31 c0                	xor    eax,eax
c00187b6:	83 c4 08             	add    esp,0x8
c00187b9:	5b                   	pop    ebx
c00187ba:	c3                   	ret    
c00187bb:	90                   	nop
c00187bc:	fb                   	sti    
c00187bd:	83 c4 08             	add    esp,0x8
c00187c0:	5b                   	pop    ebx
c00187c1:	c3                   	ret    
c00187c2:	66 90                	xchg   ax,ax
c00187c4:	43                   	inc    ebx
c00187c5:	89 15 84 97 02 c0    	mov    DWORD PTR ds:0xc0029784,edx
c00187cb:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00187ce:	85 d2                	test   edx,edx
c00187d0:	75 22                	jne    c00187f4 <Semaphore::tryAcquire()+0x90>
c00187d2:	8b 0d 80 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029780
c00187d8:	85 c9                	test   ecx,ecx
c00187da:	74 18                	je     c00187f4 <Semaphore::tryAcquire()+0x90>
c00187dc:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00187e6:	e8 ed fe ff ff       	call   c00186d8 <schedule()>
c00187eb:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00187f0:	48                   	dec    eax
c00187f1:	8d 76 00             	lea    esi,[esi+0x0]
c00187f4:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00187f9:	85 c0                	test   eax,eax
c00187fb:	75 0b                	jne    c0018808 <Semaphore::tryAcquire()+0xa4>
c00187fd:	fb                   	sti    
c00187fe:	b0 01                	mov    al,0x1
c0018800:	83 c4 08             	add    esp,0x8
c0018803:	5b                   	pop    ebx
c0018804:	c3                   	ret    
c0018805:	8d 76 00             	lea    esi,[esi+0x0]
c0018808:	b0 01                	mov    al,0x1
c001880a:	83 c4 08             	add    esp,0x8
c001880d:	5b                   	pop    ebx
c001880e:	c3                   	ret    
c001880f:	90                   	nop
c0018810:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001881a:	e8 b9 fe ff ff       	call   c00186d8 <schedule()>
c001881f:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018824:	48                   	dec    eax
c0018825:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c001882a:	85 c0                	test   eax,eax
c001882c:	75 86                	jne    c00187b4 <Semaphore::tryAcquire()+0x50>
c001882e:	eb 8c                	jmp    c00187bc <Semaphore::tryAcquire()+0x58>

c0018830 <Semaphore::assertLocked(char const*)>:
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018837:	fa                   	cli    
c0018838:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c001883e:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0018843:	8d 48 01             	lea    ecx,[eax+0x1]
c0018846:	89 0d 84 97 02 c0    	mov    DWORD PTR ds:0xc0029784,ecx
c001884c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001884e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018851:	7c 29                	jl     c001887c <Semaphore::assertLocked(char const*)+0x4c>
c0018853:	90                   	nop
c0018854:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c0018859:	85 c0                	test   eax,eax
c001885b:	75 0b                	jne    c0018868 <Semaphore::assertLocked(char const*)+0x38>
c001885d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018862:	85 c0                	test   eax,eax
c0018864:	75 2e                	jne    c0018894 <Semaphore::assertLocked(char const*)+0x64>
c0018866:	66 90                	xchg   ax,ax
c0018868:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001886d:	48                   	dec    eax
c001886e:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018873:	75 03                	jne    c0018878 <Semaphore::assertLocked(char const*)+0x48>
c0018875:	fb                   	sti    
c0018876:	66 90                	xchg   ax,ax
c0018878:	83 c4 0c             	add    esp,0xc
c001887b:	c3                   	ret    
c001887c:	83 ec 0c             	sub    esp,0xc
c001887f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018883:	e8 e5 c7 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0018888:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	48                   	dec    eax
c0018891:	eb c1                	jmp    c0018854 <Semaphore::assertLocked(char const*)+0x24>
c0018893:	90                   	nop
c0018894:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001889e:	e8 35 fe ff ff       	call   c00186d8 <schedule()>
c00188a3:	eb c3                	jmp    c0018868 <Semaphore::assertLocked(char const*)+0x38>
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]

c00188a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00188a8:	83 ec 0c             	sub    esp,0xc
c00188ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00188b7:	e8 1c fe ff ff       	call   c00186d8 <schedule()>
c00188bc:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00188c1:	48                   	dec    eax
c00188c2:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00188c7:	75 03                	jne    c00188cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00188c9:	fb                   	sti    
c00188ca:	66 90                	xchg   ax,ax
c00188cc:	83 c4 0c             	add    esp,0xc
c00188cf:	c3                   	ret    

c00188d0 <blockTask(TaskState)>:
c00188d0:	83 ec 0c             	sub    esp,0xc
c00188d3:	fa                   	cli    
c00188d4:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c00188da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00188e6:	e8 ed fd ff ff       	call   c00186d8 <schedule()>
c00188eb:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00188f0:	48                   	dec    eax
c00188f1:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00188f6:	75 04                	jne    c00188fc <blockTask(TaskState)+0x2c>
c00188f8:	fb                   	sti    
c00188f9:	8d 76 00             	lea    esi,[esi+0x0]
c00188fc:	83 c4 0c             	add    esp,0xc
c00188ff:	c3                   	ret    

c0018900 <waitTask(int, int*, int)>:
c0018900:	83 ec 18             	sub    esp,0x18
c0018903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018908:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001890c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001890f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018918:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001891b:	6a 07                	push   0x7
c001891d:	e8 ae ff ff ff       	call   c00188d0 <blockTask(TaskState)>
c0018922:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001892d:	85 d2                	test   edx,edx
c001892f:	74 0b                	je     c001893c <waitTask(int, int*, int)+0x3c>
c0018931:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018934:	89 02                	mov    DWORD PTR [edx],eax
c0018936:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001893b:	90                   	nop
c001893c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001893f:	83 c4 0c             	add    esp,0xc
c0018942:	c3                   	ret    
c0018943:	90                   	nop

c0018944 <milliTenthSleepUntil(unsigned int)>:
c0018944:	83 ec 0c             	sub    esp,0xc
c0018947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001894b:	39 05 8c 88 02 c0    	cmp    DWORD PTR ds:0xc002888c,eax
c0018951:	76 05                	jbe    c0018958 <milliTenthSleepUntil(unsigned int)+0x14>
c0018953:	90                   	nop
c0018954:	83 c4 0c             	add    esp,0xc
c0018957:	c3                   	ret    
c0018958:	fa                   	cli    
c0018959:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c001895f:	83 ec 08             	sub    esp,0x8
c0018962:	ff 05 84 97 02 c0    	inc    DWORD PTR ds:0xc0029784
c0018968:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001896e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018971:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018977:	68 98 97 02 c0       	push   0xc0029798
c001897c:	e8 0b a5 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018981:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018988:	e8 43 ff ff ff       	call   c00188d0 <blockTask(TaskState)>
c001898d:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0018992:	83 c4 10             	add    esp,0x10
c0018995:	48                   	dec    eax
c0018996:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c001899b:	85 c0                	test   eax,eax
c001899d:	75 09                	jne    c00189a8 <milliTenthSleepUntil(unsigned int)+0x64>
c001899f:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00189a4:	85 c0                	test   eax,eax
c00189a6:	75 14                	jne    c00189bc <milliTenthSleepUntil(unsigned int)+0x78>
c00189a8:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00189ad:	48                   	dec    eax
c00189ae:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00189b3:	75 9f                	jne    c0018954 <milliTenthSleepUntil(unsigned int)+0x10>
c00189b5:	fb                   	sti    
c00189b6:	83 c4 0c             	add    esp,0xc
c00189b9:	c3                   	ret    
c00189ba:	66 90                	xchg   ax,ax
c00189bc:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00189c6:	e8 0d fd ff ff       	call   c00186d8 <schedule()>
c00189cb:	eb db                	jmp    c00189a8 <milliTenthSleepUntil(unsigned int)+0x64>
c00189cd:	8d 76 00             	lea    esi,[esi+0x0]

c00189d0 <milliTenthSleep(unsigned int)>:
c00189d0:	a1 8c 88 02 c0       	mov    eax,ds:0xc002888c
c00189d5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00189d9:	e9 66 ff ff ff       	jmp    c0018944 <milliTenthSleepUntil(unsigned int)>
c00189de:	66 90                	xchg   ax,ax

c00189e0 <sleep(unsigned int)>:
c00189e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189e4:	8d 04 80             	lea    eax,[eax+eax*4]
c00189e7:	8d 04 80             	lea    eax,[eax+eax*4]
c00189ea:	8d 04 80             	lea    eax,[eax+eax*4]
c00189ed:	8d 04 80             	lea    eax,[eax+eax*4]
c00189f0:	c1 e0 04             	shl    eax,0x4
c00189f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00189f7:	eb d7                	jmp    c00189d0 <milliTenthSleep(unsigned int)>
c00189f9:	90                   	nop
c00189fa:	66 90                	xchg   ax,ax

c00189fc <Semaphore::acquire()>:
c00189fc:	83 ec 0c             	sub    esp,0xc
c00189ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a03:	fa                   	cli    
c0018a04:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0018a09:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018a0f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018a12:	89 0d 84 97 02 c0    	mov    DWORD PTR ds:0xc0029784,ecx
c0018a18:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018a1b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018a1d:	7d 2d                	jge    c0018a4c <Semaphore::acquire()+0x50>
c0018a1f:	41                   	inc    ecx
c0018a20:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018a23:	90                   	nop
c0018a24:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c0018a29:	85 c0                	test   eax,eax
c0018a2b:	75 0b                	jne    c0018a38 <Semaphore::acquire()+0x3c>
c0018a2d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a32:	85 c0                	test   eax,eax
c0018a34:	75 62                	jne    c0018a98 <Semaphore::acquire()+0x9c>
c0018a36:	66 90                	xchg   ax,ax
c0018a38:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018a3d:	48                   	dec    eax
c0018a3e:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018a43:	75 03                	jne    c0018a48 <Semaphore::acquire()+0x4c>
c0018a45:	fb                   	sti    
c0018a46:	66 90                	xchg   ax,ax
c0018a48:	83 c4 0c             	add    esp,0xc
c0018a4b:	c3                   	ret    
c0018a4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a51:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018a58:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018a5b:	85 c9                	test   ecx,ecx
c0018a5d:	74 4d                	je     c0018aac <Semaphore::acquire()+0xb0>
c0018a5f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018a62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018a68:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018a6b:	90                   	nop
c0018a6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a71:	83 ec 0c             	sub    esp,0xc
c0018a74:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018a77:	68 e8 63 02 c0       	push   0xc00263e8
c0018a7c:	e8 ca 45 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0018a81:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018a88:	e8 43 fe ff ff       	call   c00188d0 <blockTask(TaskState)>
c0018a8d:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0018a92:	83 c4 10             	add    esp,0x10
c0018a95:	48                   	dec    eax
c0018a96:	eb 8c                	jmp    c0018a24 <Semaphore::acquire()+0x28>
c0018a98:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0018aa2:	e8 31 fc ff ff       	call   c00186d8 <schedule()>
c0018aa7:	eb 8f                	jmp    c0018a38 <Semaphore::acquire()+0x3c>
c0018aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0018aac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018ab4:	eb b6                	jmp    c0018a6c <Semaphore::acquire()+0x70>
c0018ab6:	66 90                	xchg   ax,ax

c0018ab8 <taskReturned>:
c0018ab8:	83 ec 18             	sub    esp,0x18
c0018abb:	68 08 64 02 c0       	push   0xc0026408
c0018ac0:	e8 a8 c5 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	83 ec 0c             	sub    esp,0xc
c0018acb:	6a 02                	push   0x2
c0018acd:	e8 fe fd ff ff       	call   c00188d0 <blockTask(TaskState)>
c0018ad2:	fa                   	cli    
c0018ad3:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018ad9:	e8 fa fb ff ff       	call   c00186d8 <schedule()>
c0018ade:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	48                   	dec    eax
c0018ae7:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018aec:	85 c0                	test   eax,eax
c0018aee:	75 d8                	jne    c0018ac8 <taskReturned+0x10>
c0018af0:	fb                   	sti    
c0018af1:	eb d5                	jmp    c0018ac8 <taskReturned+0x10>
c0018af3:	90                   	nop

c0018af4 <Thr::processFromPID(int)>:
c0018af4:	57                   	push   edi
c0018af5:	56                   	push   esi
c0018af6:	53                   	push   ebx
c0018af7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018afb:	fa                   	cli    
c0018afc:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018b02:	83 ec 0c             	sub    esp,0xc
c0018b05:	68 a4 97 02 c0       	push   0xc00297a4
c0018b0a:	e8 bd a2 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b0f:	83 c4 10             	add    esp,0x10
c0018b12:	89 c7                	mov    edi,eax
c0018b14:	eb 16                	jmp    c0018b2c <Thr::processFromPID(int)+0x38>
c0018b16:	66 90                	xchg   ax,ax
c0018b18:	83 ec 0c             	sub    esp,0xc
c0018b1b:	68 a4 97 02 c0       	push   0xc00297a4
c0018b20:	e8 a7 a2 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b25:	83 c4 10             	add    esp,0x10
c0018b28:	39 f8                	cmp    eax,edi
c0018b2a:	74 4c                	je     c0018b78 <Thr::processFromPID(int)+0x84>
c0018b2c:	83 ec 0c             	sub    esp,0xc
c0018b2f:	68 a4 97 02 c0       	push   0xc00297a4
c0018b34:	e8 93 a2 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b39:	c7 04 24 a4 97 02 c0 	mov    DWORD PTR [esp],0xc00297a4
c0018b40:	89 c3                	mov    ebx,eax
c0018b42:	e8 8d a2 00 00       	call   c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b47:	58                   	pop    eax
c0018b48:	5a                   	pop    edx
c0018b49:	53                   	push   ebx
c0018b4a:	68 a4 97 02 c0       	push   0xc00297a4
c0018b4f:	e8 38 a3 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b54:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	39 30                	cmp    DWORD PTR [eax],esi
c0018b5c:	75 ba                	jne    c0018b18 <Thr::processFromPID(int)+0x24>
c0018b5e:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018b63:	48                   	dec    eax
c0018b64:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018b69:	74 09                	je     c0018b74 <Thr::processFromPID(int)+0x80>
c0018b6b:	90                   	nop
c0018b6c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b6f:	5b                   	pop    ebx
c0018b70:	5e                   	pop    esi
c0018b71:	5f                   	pop    edi
c0018b72:	c3                   	ret    
c0018b73:	90                   	nop
c0018b74:	fb                   	sti    
c0018b75:	eb f5                	jmp    c0018b6c <Thr::processFromPID(int)+0x78>
c0018b77:	90                   	nop
c0018b78:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018b7d:	48                   	dec    eax
c0018b7e:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018b83:	75 07                	jne    c0018b8c <Thr::processFromPID(int)+0x98>
c0018b85:	fb                   	sti    
c0018b86:	5b                   	pop    ebx
c0018b87:	5e                   	pop    esi
c0018b88:	5f                   	pop    edi
c0018b89:	c3                   	ret    
c0018b8a:	66 90                	xchg   ax,ax
c0018b8c:	5b                   	pop    ebx
c0018b8d:	31 c0                	xor    eax,eax
c0018b8f:	5e                   	pop    esi
c0018b90:	5f                   	pop    edi
c0018b91:	c3                   	ret    
c0018b92:	66 90                	xchg   ax,ax

c0018b94 <unblockTask(ThreadControlBlock*)>:
c0018b94:	53                   	push   ebx
c0018b95:	83 ec 08             	sub    esp,0x8
c0018b98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b9c:	fa                   	cli    
c0018b9d:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018ba3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018ba6:	85 c0                	test   eax,eax
c0018ba8:	74 66                	je     c0018c10 <unblockTask(ThreadControlBlock*)+0x7c>
c0018baa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018bad:	48                   	dec    eax
c0018bae:	74 38                	je     c0018be8 <unblockTask(ThreadControlBlock*)+0x54>
c0018bb0:	83 ec 0c             	sub    esp,0xc
c0018bb3:	68 a4 97 02 c0       	push   0xc00297a4
c0018bb8:	e8 0f a2 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018bbd:	83 c4 10             	add    esp,0x10
c0018bc0:	85 c0                	test   eax,eax
c0018bc2:	75 1c                	jne    c0018be0 <unblockTask(ThreadControlBlock*)+0x4c>
c0018bc4:	eb 5e                	jmp    c0018c24 <unblockTask(ThreadControlBlock*)+0x90>
c0018bc6:	66 90                	xchg   ax,ax
c0018bc8:	83 ec 08             	sub    esp,0x8
c0018bcb:	50                   	push   eax
c0018bcc:	68 a4 97 02 c0       	push   0xc00297a4
c0018bd1:	e8 a6 a5 00 00       	call   c002317c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018bd6:	83 c4 10             	add    esp,0x10
c0018bd9:	85 c0                	test   eax,eax
c0018bdb:	74 47                	je     c0018c24 <unblockTask(ThreadControlBlock*)+0x90>
c0018bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018be0:	39 c3                	cmp    ebx,eax
c0018be2:	75 e4                	jne    c0018bc8 <unblockTask(ThreadControlBlock*)+0x34>
c0018be4:	eb 12                	jmp    c0018bf8 <unblockTask(ThreadControlBlock*)+0x64>
c0018be6:	66 90                	xchg   ax,ax
c0018be8:	83 ec 0c             	sub    esp,0xc
c0018beb:	68 8b 63 02 c0       	push   0xc002638b
c0018bf0:	e8 56 44 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018bfd:	48                   	dec    eax
c0018bfe:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018c03:	75 03                	jne    c0018c08 <unblockTask(ThreadControlBlock*)+0x74>
c0018c05:	fb                   	sti    
c0018c06:	66 90                	xchg   ax,ax
c0018c08:	83 c4 08             	add    esp,0x8
c0018c0b:	5b                   	pop    ebx
c0018c0c:	c3                   	ret    
c0018c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c10:	83 ec 0c             	sub    esp,0xc
c0018c13:	68 74 63 02 c0       	push   0xc0026374
c0018c18:	e8 2e 44 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0018c1d:	83 c4 10             	add    esp,0x10
c0018c20:	eb d6                	jmp    c0018bf8 <unblockTask(ThreadControlBlock*)+0x64>
c0018c22:	66 90                	xchg   ax,ax
c0018c24:	83 ec 08             	sub    esp,0x8
c0018c27:	53                   	push   ebx
c0018c28:	68 a4 97 02 c0       	push   0xc00297a4
c0018c2d:	e8 5a a2 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c32:	83 c4 10             	add    esp,0x10
c0018c35:	eb c1                	jmp    c0018bf8 <unblockTask(ThreadControlBlock*)+0x64>
c0018c37:	90                   	nop

c0018c38 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018c38:	55                   	push   ebp
c0018c39:	57                   	push   edi
c0018c3a:	56                   	push   esi
c0018c3b:	53                   	push   ebx
c0018c3c:	83 ec 1c             	sub    esp,0x1c
c0018c3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c43:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c46:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018c4c:	85 ff                	test   edi,edi
c0018c4e:	7e 24                	jle    c0018c74 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018c50:	31 f6                	xor    esi,esi
c0018c52:	66 90                	xchg   ax,ax
c0018c54:	83 ec 0c             	sub    esp,0xc
c0018c57:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018c5e:	46                   	inc    esi
c0018c5f:	e8 eb 10 ff ff       	call   c0009d4f <free>
c0018c64:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c67:	83 c4 10             	add    esp,0x10
c0018c6a:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018c70:	7f e2                	jg     c0018c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018c72:	66 90                	xchg   ax,ax
c0018c74:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018c7e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018c83:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018c86:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018c89:	d3 c0                	rol    eax,cl
c0018c8b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018c92:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018c95:	89 f7                	mov    edi,esi
c0018c97:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018c9f:	0f 85 73 01 00 00    	jne    c0018e18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018ca5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018cab:	85 ed                	test   ebp,ebp
c0018cad:	74 1d                	je     c0018ccc <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018caf:	83 ec 0c             	sub    esp,0xc
c0018cb2:	55                   	push   ebp
c0018cb3:	e8 5a c1 ff ff       	call   c0014e12 <EnvVarContainer::~EnvVarContainer()>
c0018cb8:	59                   	pop    ecx
c0018cb9:	5e                   	pop    esi
c0018cba:	6a 0c                	push   0xc
c0018cbc:	55                   	push   ebp
c0018cbd:	e8 a8 42 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0018cc2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018cc5:	83 c4 10             	add    esp,0x10
c0018cc8:	89 f7                	mov    edi,esi
c0018cca:	66 90                	xchg   ax,ax
c0018ccc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018cd2:	85 c0                	test   eax,eax
c0018cd4:	0f 84 b2 00 00 00    	je     c0018d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018cda:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018cdd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018ce1:	31 c9                	xor    ecx,ecx
c0018ce3:	eb 17                	jmp    c0018cfc <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce8:	41                   	inc    ecx
c0018ce9:	83 f9 10             	cmp    ecx,0x10
c0018cec:	0f 84 9a 00 00 00    	je     c0018d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018cfa:	66 90                	xchg   ax,ax
c0018cfc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018d03:	d3 fa                	sar    edx,cl
c0018d05:	83 e2 01             	and    edx,0x1
c0018d08:	74 de                	je     c0018ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d0a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018d0d:	01 d2                	add    edx,edx
c0018d0f:	01 ca                	add    edx,ecx
c0018d11:	8d 14 92             	lea    edx,[edx+edx*4]
c0018d14:	01 d0                	add    eax,edx
c0018d16:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018d1c:	83 fd 07             	cmp    ebp,0x7
c0018d1f:	75 c7                	jne    c0018ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d21:	05 40 02 00 00       	add    eax,0x240
c0018d26:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018d29:	83 fd ff             	cmp    ebp,0xffffffff
c0018d2c:	0f 8c ee 00 00 00    	jl     c0018e20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018d32:	0f 84 ac 01 00 00    	je     c0018ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018d38:	85 ed                	test   ebp,ebp
c0018d3a:	0f 84 90 01 00 00    	je     c0018ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018d40:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018d42:	75 a4                	jne    c0018ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d44:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d4e:	01 d0                	add    eax,edx
c0018d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018d54:	83 ec 0c             	sub    esp,0xc
c0018d57:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018d5d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018d60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018d66:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018d6d:	50                   	push   eax
c0018d6e:	e8 21 fe ff ff       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d7d:	89 f7                	mov    edi,esi
c0018d7f:	41                   	inc    ecx
c0018d80:	83 f9 10             	cmp    ecx,0x10
c0018d83:	0f 85 6b ff ff ff    	jne    c0018cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018d89:	8d 76 00             	lea    esi,[esi+0x0]
c0018d8c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018d92:	85 c0                	test   eax,eax
c0018d94:	74 62                	je     c0018df8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018d96:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018d9c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018da2:	74 54                	je     c0018df8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018da4:	83 ec 0c             	sub    esp,0xc
c0018da7:	68 a4 97 02 c0       	push   0xc00297a4
c0018dac:	e8 1b a0 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018db1:	c7 04 24 a4 97 02 c0 	mov    DWORD PTR [esp],0xc00297a4
c0018db8:	89 c7                	mov    edi,eax
c0018dba:	e8 f1 9f 00 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	84 c0                	test   al,al
c0018dc4:	0f 84 ce 00 00 00    	je     c0018e98 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018dca:	66 90                	xchg   ax,ax
c0018dcc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018dcf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018dd5:	85 d2                	test   edx,edx
c0018dd7:	74 0f                	je     c0018de8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018dd9:	83 ec 0c             	sub    esp,0xc
c0018ddc:	8b 02                	mov    eax,DWORD PTR [edx]
c0018dde:	52                   	push   edx
c0018ddf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018de2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018de5:	83 c4 10             	add    esp,0x10
c0018de8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018df2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018df5:	8d 76 00             	lea    esi,[esi+0x0]
c0018df8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018dfe:	85 db                	test   ebx,ebx
c0018e00:	74 16                	je     c0018e18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018e02:	83 ec 0c             	sub    esp,0xc
c0018e05:	53                   	push   ebx
c0018e06:	e8 d5 33 ff ff       	call   c000c1e0 <VAS::~VAS()>
c0018e0b:	58                   	pop    eax
c0018e0c:	5a                   	pop    edx
c0018e0d:	6a 14                	push   0x14
c0018e0f:	53                   	push   ebx
c0018e10:	e8 55 41 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	83 c4 1c             	add    esp,0x1c
c0018e1b:	5b                   	pop    ebx
c0018e1c:	5e                   	pop    esi
c0018e1d:	5f                   	pop    edi
c0018e1e:	5d                   	pop    ebp
c0018e1f:	c3                   	ret    
c0018e20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e24:	83 ec 0c             	sub    esp,0xc
c0018e27:	68 3c 64 02 c0       	push   0xc002643c
c0018e2c:	e8 3c c2 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0018e31:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018e34:	83 c4 10             	add    esp,0x10
c0018e37:	89 f7                	mov    edi,esi
c0018e39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e3d:	e9 a6 fe ff ff       	jmp    c0018ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e4a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018e50:	75 1e                	jne    c0018e70 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018e52:	83 ec 0c             	sub    esp,0xc
c0018e55:	68 a4 64 02 c0       	push   0xc00264a4
c0018e5a:	e8 ec 41 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0018e5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e66:	e8 65 fa ff ff       	call   c00188d0 <blockTask(TaskState)>
c0018e6b:	83 c4 10             	add    esp,0x10
c0018e6e:	66 90                	xchg   ax,ax
c0018e70:	83 ec 08             	sub    esp,0x8
c0018e73:	56                   	push   esi
c0018e74:	68 a4 97 02 c0       	push   0xc00297a4
c0018e79:	e8 0e a0 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e7e:	c7 04 24 a4 97 02 c0 	mov    DWORD PTR [esp],0xc00297a4
c0018e85:	e8 42 9f 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e8a:	83 c4 10             	add    esp,0x10
c0018e8d:	39 f8                	cmp    eax,edi
c0018e8f:	0f 84 37 ff ff ff    	je     c0018dcc <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018e95:	8d 76 00             	lea    esi,[esi+0x0]
c0018e98:	83 ec 0c             	sub    esp,0xc
c0018e9b:	68 a4 97 02 c0       	push   0xc00297a4
c0018ea0:	e8 27 9f 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ea5:	c7 04 24 a4 97 02 c0 	mov    DWORD PTR [esp],0xc00297a4
c0018eac:	89 c6                	mov    esi,eax
c0018eae:	e8 21 9f 00 00       	call   c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	39 f3                	cmp    ebx,esi
c0018eb8:	74 b6                	je     c0018e70 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018eba:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018ebd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ec0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018ec6:	75 a8                	jne    c0018e70 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018ec8:	e9 77 ff ff ff       	jmp    c0018e44 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ed4:	83 ec 0c             	sub    esp,0xc
c0018ed7:	68 70 64 02 c0       	push   0xc0026470
c0018edc:	e9 4b ff ff ff       	jmp    c0018e2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee4:	8b 36                	mov    esi,DWORD PTR [esi]
c0018ee6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018eea:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018eed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ef0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018ef6:	01 d7                	add    edi,edx
c0018ef8:	89 f8                	mov    eax,edi
c0018efa:	e9 51 fe ff ff       	jmp    c0018d50 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018eff:	90                   	nop

c0018f00 <cleanerTaskFunction(void*)>:
c0018f00:	53                   	push   ebx
c0018f01:	83 ec 08             	sub    esp,0x8
c0018f04:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018f09:	48                   	dec    eax
c0018f0a:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018f0f:	75 03                	jne    c0018f14 <cleanerTaskFunction(void*)+0x14>
c0018f11:	fb                   	sti    
c0018f12:	66 90                	xchg   ax,ax
c0018f14:	fa                   	cli    
c0018f15:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018f1a:	80 3d 6c 97 02 c0 00 	cmp    BYTE PTR ds:0xc002976c,0x0
c0018f21:	8d 50 01             	lea    edx,[eax+0x1]
c0018f24:	89 15 88 97 02 c0    	mov    DWORD PTR ds:0xc0029788,edx
c0018f2a:	0f 84 ac 00 00 00    	je     c0018fdc <cleanerTaskFunction(void*)+0xdc>
c0018f30:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018f35:	85 c0                	test   eax,eax
c0018f37:	75 03                	jne    c0018f3c <cleanerTaskFunction(void*)+0x3c>
c0018f39:	fb                   	sti    
c0018f3a:	66 90                	xchg   ax,ax
c0018f3c:	c6 05 6c 97 02 c0 00 	mov    BYTE PTR ds:0xc002976c,0x0
c0018f43:	fa                   	cli    
c0018f44:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018f4a:	ff 05 84 97 02 c0    	inc    DWORD PTR ds:0xc0029784
c0018f50:	fa                   	cli    
c0018f51:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018f57:	eb 2b                	jmp    c0018f84 <cleanerTaskFunction(void*)+0x84>
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	83 ec 0c             	sub    esp,0xc
c0018f5f:	68 8c 97 02 c0       	push   0xc002978c
c0018f64:	e8 63 9e 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f69:	c7 04 24 8c 97 02 c0 	mov    DWORD PTR [esp],0xc002978c
c0018f70:	89 c3                	mov    ebx,eax
c0018f72:	e8 5d 9e 00 00       	call   c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f7a:	e8 b9 fc ff ff       	call   c0018c38 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	66 90                	xchg   ax,ax
c0018f84:	83 ec 0c             	sub    esp,0xc
c0018f87:	68 8c 97 02 c0       	push   0xc002978c
c0018f8c:	e8 1f 9e 00 00       	call   c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f91:	83 c4 10             	add    esp,0x10
c0018f94:	84 c0                	test   al,al
c0018f96:	74 c4                	je     c0018f5c <cleanerTaskFunction(void*)+0x5c>
c0018f98:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0018f9d:	48                   	dec    eax
c0018f9e:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0018fa3:	75 03                	jne    c0018fa8 <cleanerTaskFunction(void*)+0xa8>
c0018fa5:	fb                   	sti    
c0018fa6:	66 90                	xchg   ax,ax
c0018fa8:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0018fad:	48                   	dec    eax
c0018fae:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c0018fb3:	0f 85 4b ff ff ff    	jne    c0018f04 <cleanerTaskFunction(void*)+0x4>
c0018fb9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fbe:	85 c0                	test   eax,eax
c0018fc0:	0f 84 3e ff ff ff    	je     c0018f04 <cleanerTaskFunction(void*)+0x4>
c0018fc6:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0018fd0:	e8 03 f7 ff ff       	call   c00186d8 <schedule()>
c0018fd5:	e9 2a ff ff ff       	jmp    c0018f04 <cleanerTaskFunction(void*)+0x4>
c0018fda:	66 90                	xchg   ax,ax
c0018fdc:	83 ec 0c             	sub    esp,0xc
c0018fdf:	6a 02                	push   0x2
c0018fe1:	e8 c2 f8 ff ff       	call   c00188a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	e9 4e ff ff ff       	jmp    c0018f3c <cleanerTaskFunction(void*)+0x3c>
c0018fee:	66 90                	xchg   ax,ax

c0018ff0 <terminateTask(int)>:
c0018ff0:	83 ec 14             	sub    esp,0x14
c0018ff3:	fa                   	cli    
c0018ff4:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0018ffa:	ff 05 84 97 02 c0    	inc    DWORD PTR ds:0xc0029784
c0019000:	fa                   	cli    
c0019001:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0019007:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001900b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019010:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0019013:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019018:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001901b:	50                   	push   eax
c001901c:	68 8c 97 02 c0       	push   0xc002978c
c0019021:	e8 66 9e 00 00       	call   c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019035:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c001903a:	85 c0                	test   eax,eax
c001903c:	74 5e                	je     c001909c <terminateTask(int)+0xac>
c001903e:	83 ec 0c             	sub    esp,0xc
c0019041:	c6 05 6c 97 02 c0 01 	mov    BYTE PTR ds:0xc002976c,0x1
c0019048:	50                   	push   eax
c0019049:	e8 46 fb ff ff       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c001904e:	83 c4 10             	add    esp,0x10
c0019051:	8d 76 00             	lea    esi,[esi+0x0]
c0019054:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019059:	48                   	dec    eax
c001905a:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c001905f:	75 03                	jne    c0019064 <terminateTask(int)+0x74>
c0019061:	fb                   	sti    
c0019062:	66 90                	xchg   ax,ax
c0019064:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c0019069:	48                   	dec    eax
c001906a:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c001906f:	75 0b                	jne    c001907c <terminateTask(int)+0x8c>
c0019071:	83 3d 80 97 02 c0 00 	cmp    DWORD PTR ds:0xc0029780,0x0
c0019078:	75 36                	jne    c00190b0 <terminateTask(int)+0xc0>
c001907a:	66 90                	xchg   ax,ax
c001907c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019081:	48                   	dec    eax
c0019082:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0019087:	75 03                	jne    c001908c <terminateTask(int)+0x9c>
c0019089:	fb                   	sti    
c001908a:	66 90                	xchg   ax,ax
c001908c:	fa                   	cli    
c001908d:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0019093:	90                   	nop
c0019094:	e8 3f f6 ff ff       	call   c00186d8 <schedule()>
c0019099:	eb e1                	jmp    c001907c <terminateTask(int)+0x8c>
c001909b:	90                   	nop
c001909c:	83 ec 0c             	sub    esp,0xc
c001909f:	68 a2 63 02 c0       	push   0xc00263a2
c00190a4:	e8 a2 3f ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	eb a6                	jmp    c0019054 <terminateTask(int)+0x64>
c00190ae:	66 90                	xchg   ax,ax
c00190b0:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00190ba:	eb d8                	jmp    c0019094 <terminateTask(int)+0xa4>

c00190bc <Thr::terminateFromIRQ(int)>:
c00190bc:	83 ec 18             	sub    esp,0x18
c00190bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190c3:	e8 28 ff ff ff       	call   c0018ff0 <terminateTask(int)>

c00190c8 <Semaphore::release()>:
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190cf:	fa                   	cli    
c00190d0:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c00190d5:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c00190db:	8d 48 01             	lea    ecx,[eax+0x1]
c00190de:	89 0d 84 97 02 c0    	mov    DWORD PTR ds:0xc0029784,ecx
c00190e4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00190e7:	85 c9                	test   ecx,ecx
c00190e9:	74 41                	je     c001912c <Semaphore::release()+0x64>
c00190eb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00190f4:	51                   	push   ecx
c00190f5:	e8 9a fa ff ff       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c00190fa:	a1 84 97 02 c0       	mov    eax,ds:0xc0029784
c00190ff:	83 c4 10             	add    esp,0x10
c0019102:	48                   	dec    eax
c0019103:	90                   	nop
c0019104:	a3 84 97 02 c0       	mov    ds:0xc0029784,eax
c0019109:	85 c0                	test   eax,eax
c001910b:	75 0b                	jne    c0019118 <Semaphore::release()+0x50>
c001910d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019112:	85 c0                	test   eax,eax
c0019114:	75 1e                	jne    c0019134 <Semaphore::release()+0x6c>
c0019116:	66 90                	xchg   ax,ax
c0019118:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001911d:	48                   	dec    eax
c001911e:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0019123:	75 03                	jne    c0019128 <Semaphore::release()+0x60>
c0019125:	fb                   	sti    
c0019126:	66 90                	xchg   ax,ax
c0019128:	83 c4 0c             	add    esp,0xc
c001912b:	c3                   	ret    
c001912c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001912f:	eb d3                	jmp    c0019104 <Semaphore::release()+0x3c>
c0019131:	8d 76 00             	lea    esi,[esi+0x0]
c0019134:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001913e:	e8 95 f5 ff ff       	call   c00186d8 <schedule()>
c0019143:	eb d3                	jmp    c0019118 <Semaphore::release()+0x50>
c0019145:	8d 76 00             	lea    esi,[esi+0x0]

c0019148 <__static_initialization_and_destruction_0(int, int)>:
c0019148:	83 ec 0c             	sub    esp,0xc
c001914b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019150:	0f 85 8e 00 00 00    	jne    c00191e4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019156:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001915e:	0f 85 80 00 00 00    	jne    c00191e4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019164:	83 ec 0c             	sub    esp,0xc
c0019167:	68 a4 97 02 c0       	push   0xc00297a4
c001916c:	e8 c7 9f 00 00       	call   c0023138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019171:	83 c4 10             	add    esp,0x10
c0019174:	83 ec 04             	sub    esp,0x4
c0019177:	68 d8 74 02 c0       	push   0xc00274d8
c001917c:	68 a4 97 02 c0       	push   0xc00297a4
c0019181:	68 e8 30 02 c0       	push   0xc00230e8
c0019186:	e8 59 3d ff ff       	call   c000cee4 <__cxa_atexit>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	83 ec 0c             	sub    esp,0xc
c0019191:	68 98 97 02 c0       	push   0xc0029798
c0019196:	e8 9d 9f 00 00       	call   c0023138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001919b:	83 c4 10             	add    esp,0x10
c001919e:	83 ec 04             	sub    esp,0x4
c00191a1:	68 d8 74 02 c0       	push   0xc00274d8
c00191a6:	68 98 97 02 c0       	push   0xc0029798
c00191ab:	68 e8 30 02 c0       	push   0xc00230e8
c00191b0:	e8 2f 3d ff ff       	call   c000cee4 <__cxa_atexit>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	68 8c 97 02 c0       	push   0xc002978c
c00191c0:	e8 73 9f 00 00       	call   c0023138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	83 ec 04             	sub    esp,0x4
c00191cb:	68 d8 74 02 c0       	push   0xc00274d8
c00191d0:	68 8c 97 02 c0       	push   0xc002978c
c00191d5:	68 e8 30 02 c0       	push   0xc00230e8
c00191da:	e8 05 3d ff ff       	call   c000cee4 <__cxa_atexit>
c00191df:	83 c4 10             	add    esp,0x10
c00191e2:	66 90                	xchg   ax,ax
c00191e4:	90                   	nop
c00191e5:	83 c4 0c             	add    esp,0xc
c00191e8:	c3                   	ret    
c00191e9:	8d 76 00             	lea    esi,[esi+0x0]

c00191ec <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00191ec:	83 ec 0c             	sub    esp,0xc
c00191ef:	83 ec 08             	sub    esp,0x8
c00191f2:	68 ff ff 00 00       	push   0xffff
c00191f7:	6a 01                	push   0x1
c00191f9:	e8 4a ff ff ff       	call   c0019148 <__static_initialization_and_destruction_0(int, int)>
c00191fe:	83 c4 10             	add    esp,0x10
c0019201:	83 c4 0c             	add    esp,0xc
c0019204:	c3                   	ret    

c0019205 <Vm::inbv(unsigned short)>:
c0019205:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019209:	66 81 fa fe fe       	cmp    dx,0xfefe
c001920e:	75 06                	jne    c0019216 <Vm::inbv(unsigned short)+0x11>
c0019210:	a0 ec 97 02 c0       	mov    al,ds:0xc00297ec
c0019215:	c3                   	ret    
c0019216:	ec                   	in     al,dx
c0019217:	c3                   	ret    

c0019218 <Vm::outbv(unsigned short, unsigned char)>:
c0019218:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001921c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019220:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019225:	75 25                	jne    c001924c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019227:	8b 0d ec 97 02 c0    	mov    ecx,DWORD PTR ds:0xc00297ec
c001922d:	8d 51 01             	lea    edx,[ecx+0x1]
c0019230:	88 81 00 98 02 c0    	mov    BYTE PTR [ecx-0x3ffd6800],al
c0019236:	89 15 ec 97 02 c0    	mov    DWORD PTR ds:0xc00297ec,edx
c001923c:	83 fa 20             	cmp    edx,0x20
c001923f:	75 0c                	jne    c001924d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019241:	c7 05 ec 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00297ec,0x1f
c001924b:	c3                   	ret    
c001924c:	ee                   	out    dx,al
c001924d:	c3                   	ret    

c001924e <Vm::realToLinear(unsigned short, unsigned short)>:
c001924e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019253:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019258:	c1 e0 04             	shl    eax,0x4
c001925b:	01 d0                	add    eax,edx
c001925d:	c3                   	ret    

c001925e <Vm::getSegment(unsigned int)>:
c001925e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019262:	c1 e8 10             	shr    eax,0x10
c0019265:	c3                   	ret    

c0019266 <Vm::getOffset(unsigned int)>:
c0019266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001926a:	c3                   	ret    

c001926b <Vm::mainloop2()>:
c001926b:	83 ec 18             	sub    esp,0x18
c001926e:	fa                   	cli    
c001926f:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0019275:	6a 02                	push   0x2
c0019277:	c6 05 e5 97 02 c0 01 	mov    BYTE PTR ds:0xc00297e5,0x1
c001927e:	e8 25 f6 ff ff       	call   c00188a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019288:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001928c:	52                   	push   edx
c001928d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019291:	52                   	push   edx
c0019292:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019296:	52                   	push   edx
c0019297:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001929b:	50                   	push   eax
c001929c:	e8 8e 6f fe ff       	call   c000022f <goToVM86>
c00192a1:	83 c4 2c             	add    esp,0x2c
c00192a4:	c3                   	ret    

c00192a5 <Vm::mainVm8086Loop(void*)>:
c00192a5:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00192aa:	48                   	dec    eax
c00192ab:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00192b0:	75 01                	jne    c00192b3 <Vm::mainVm8086Loop(void*)+0xe>
c00192b2:	fb                   	sti    
c00192b3:	eb b6                	jmp    c001926b <Vm::mainloop2()>

c00192b5 <Vm::mainloop3(unsigned long)>:
c00192b5:	83 ec 18             	sub    esp,0x18
c00192b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192bc:	fa                   	cli    
c00192bd:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c00192c3:	6a 02                	push   0x2
c00192c5:	c6 05 e4 97 02 c0 01 	mov    BYTE PTR ds:0xc00297e4,0x1
c00192cc:	a3 e0 97 02 c0       	mov    ds:0xc00297e0,eax
c00192d1:	e8 d2 f5 ff ff       	call   c00188a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192d6:	83 c4 1c             	add    esp,0x1c
c00192d9:	eb 90                	jmp    c001926b <Vm::mainloop2()>

c00192db <Vm::initialise8086()>:
c00192db:	83 ec 0c             	sub    esp,0xc
c00192de:	68 80 00 00 00       	push   0x80
c00192e3:	6a 00                	push   0x0
c00192e5:	68 a5 92 01 c0       	push   0xc00192a5
c00192ea:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c00192f0:	e8 c7 f1 ff ff       	call   c00184bc <Process::createThread(void (*)(void*), void*, int)>
c00192f5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00192fc:	a3 e8 97 02 c0       	mov    ds:0xc00297e8,eax
c0019301:	68 00 01 00 00       	push   0x100
c0019306:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c001930b:	6a 00                	push   0x0
c001930d:	6a 00                	push   0x0
c001930f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019315:	e8 38 33 ff ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001931a:	83 c4 2c             	add    esp,0x2c
c001931d:	c3                   	ret    

c001931e <Vm::finish8086()>:
c001931e:	53                   	push   ebx
c001931f:	83 ec 08             	sub    esp,0x8
c0019322:	fa                   	cli    
c0019323:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0019329:	80 3d e4 97 02 c0 00 	cmp    BYTE PTR ds:0xc00297e4,0x0
c0019330:	75 15                	jne    c0019347 <Vm::finish8086()+0x29>
c0019332:	e8 a1 f3 ff ff       	call   c00186d8 <schedule()>
c0019337:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001933c:	48                   	dec    eax
c001933d:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0019342:	75 de                	jne    c0019322 <Vm::finish8086()+0x4>
c0019344:	fb                   	sti    
c0019345:	eb db                	jmp    c0019322 <Vm::finish8086()+0x4>
c0019347:	83 ec 0c             	sub    esp,0xc
c001934a:	8b 1d e0 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297e0
c0019350:	ff 35 e8 97 02 c0    	push   DWORD PTR ds:0xc00297e8
c0019356:	c6 05 e4 97 02 c0 00 	mov    BYTE PTR ds:0xc00297e4,0x0
c001935d:	e8 32 f8 ff ff       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c0019362:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019367:	83 c4 10             	add    esp,0x10
c001936a:	8d 50 ff             	lea    edx,[eax-0x1]
c001936d:	89 15 88 97 02 c0    	mov    DWORD PTR ds:0xc0029788,edx
c0019373:	85 d2                	test   edx,edx
c0019375:	75 01                	jne    c0019378 <Vm::finish8086()+0x5a>
c0019377:	fb                   	sti    
c0019378:	89 d8                	mov    eax,ebx
c001937a:	83 c4 08             	add    esp,0x8
c001937d:	5b                   	pop    ebx
c001937e:	c3                   	ret    

c001937f <Vm::getOutput8086(unsigned char*)>:
c001937f:	57                   	push   edi
c0019380:	8b 0d ec 97 02 c0    	mov    ecx,DWORD PTR ds:0xc00297ec
c0019386:	56                   	push   esi
c0019387:	be 00 98 02 c0       	mov    esi,0xc0029800
c001938c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019390:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019392:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c0019397:	5e                   	pop    esi
c0019398:	c7 05 ec 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297ec,0x0
c00193a2:	5f                   	pop    edi
c00193a3:	c3                   	ret    

c00193a4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00193a4:	55                   	push   ebp
c00193a5:	57                   	push   edi
c00193a6:	56                   	push   esi
c00193a7:	53                   	push   ebx
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00193af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00193b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00193b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00193bb:	fa                   	cli    
c00193bc:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c00193c2:	80 3d e5 97 02 c0 00 	cmp    BYTE PTR ds:0xc00297e5,0x0
c00193c9:	75 15                	jne    c00193e0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00193cb:	e8 08 f3 ff ff       	call   c00186d8 <schedule()>
c00193d0:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00193d5:	48                   	dec    eax
c00193d6:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00193db:	75 de                	jne    c00193bb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00193dd:	fb                   	sti    
c00193de:	eb db                	jmp    c00193bb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00193e0:	a1 e8 97 02 c0       	mov    eax,ds:0xc00297e8
c00193e5:	c7 05 ec 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297ec,0x0
c00193ef:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00193f3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00193f7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00193fb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00193ff:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019403:	0f b7 ff             	movzx  edi,di
c0019406:	0f b7 f6             	movzx  esi,si
c0019409:	50                   	push   eax
c001940a:	6a 20                	push   0x20
c001940c:	6a 00                	push   0x0
c001940e:	68 00 98 02 c0       	push   0xc0029800
c0019413:	e8 6c 72 fe ff       	call   c0000684 <memset>
c0019418:	5a                   	pop    edx
c0019419:	59                   	pop    ecx
c001941a:	57                   	push   edi
c001941b:	56                   	push   esi
c001941c:	e8 2d fe ff ff       	call   c001924e <Vm::realToLinear(unsigned short, unsigned short)>
c0019421:	83 c4 10             	add    esp,0x10
c0019424:	89 c7                	mov    edi,eax
c0019426:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001942a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001942e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019430:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019435:	c6 05 e5 97 02 c0 00 	mov    BYTE PTR ds:0xc00297e5,0x0
c001943c:	48                   	dec    eax
c001943d:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0019442:	75 01                	jne    c0019445 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019444:	fb                   	sti    
c0019445:	83 ec 0c             	sub    esp,0xc
c0019448:	ff 35 e8 97 02 c0    	push   DWORD PTR ds:0xc00297e8
c001944e:	e8 41 f7 ff ff       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c0019453:	83 c4 1c             	add    esp,0x1c
c0019456:	b0 01                	mov    al,0x1
c0019458:	5b                   	pop    ebx
c0019459:	5e                   	pop    esi
c001945a:	5f                   	pop    edi
c001945b:	5d                   	pop    ebp
c001945c:	c3                   	ret    

c001945d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001945d:	55                   	push   ebp
c001945e:	57                   	push   edi
c001945f:	56                   	push   esi
c0019460:	53                   	push   ebx
c0019461:	83 ec 2c             	sub    esp,0x2c
c0019464:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019468:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001946c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019470:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019474:	fa                   	cli    
c0019475:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c001947b:	0f b6 35 e5 97 02 c0 	movzx  esi,BYTE PTR ds:0xc00297e5
c0019482:	89 f0                	mov    eax,esi
c0019484:	84 c0                	test   al,al
c0019486:	75 1d                	jne    c00194a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019488:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001948c:	e8 47 f2 ff ff       	call   c00186d8 <schedule()>
c0019491:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019496:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001949a:	48                   	dec    eax
c001949b:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00194a0:	75 d2                	jne    c0019474 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00194a2:	fb                   	sti    
c00194a3:	eb cf                	jmp    c0019474 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00194a5:	a1 e8 97 02 c0       	mov    eax,ds:0xc00297e8
c00194aa:	c7 05 ec 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297ec,0x0
c00194b4:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00194b8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00194bc:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00194c0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00194c4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00194c8:	50                   	push   eax
c00194c9:	6a 20                	push   0x20
c00194cb:	6a 00                	push   0x0
c00194cd:	68 00 98 02 c0       	push   0xc0029800
c00194d2:	e8 ad 71 fe ff       	call   c0000684 <memset>
c00194d7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00194de:	e8 5c 08 ff ff       	call   c0009d3f <malloc>
c00194e3:	83 c4 0c             	add    esp,0xc
c00194e6:	89 c3                	mov    ebx,eax
c00194e8:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c00194ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194f2:	50                   	push   eax
c00194f3:	e8 be 40 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c00194f8:	83 c4 10             	add    esp,0x10
c00194fb:	85 db                	test   ebx,ebx
c00194fd:	75 0a                	jne    c0019509 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00194ff:	83 ec 0c             	sub    esp,0xc
c0019502:	68 cc 64 02 c0       	push   0xc00264cc
c0019507:	eb 3e                	jmp    c0019547 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019509:	50                   	push   eax
c001950a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001950e:	50                   	push   eax
c001950f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019513:	50                   	push   eax
c0019514:	53                   	push   ebx
c0019515:	e8 22 44 ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019522:	74 0a                	je     c001952e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019524:	83 ec 0c             	sub    esp,0xc
c0019527:	68 e0 64 02 c0       	push   0xc00264e0
c001952c:	eb 19                	jmp    c0019547 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001952e:	51                   	push   ecx
c001952f:	51                   	push   ecx
c0019530:	6a 01                	push   0x1
c0019532:	53                   	push   ebx
c0019533:	e8 58 41 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	85 c0                	test   eax,eax
c001953d:	74 24                	je     c0019563 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001953f:	83 ec 0c             	sub    esp,0xc
c0019542:	68 f9 64 02 c0       	push   0xc00264f9
c0019547:	e8 21 bb ff ff       	call   c001506d <Krnl::panic(char const*)>
c001954c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019551:	83 c4 10             	add    esp,0x10
c0019554:	48                   	dec    eax
c0019555:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c001955a:	85 c0                	test   eax,eax
c001955c:	75 01                	jne    c001955f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001955e:	fb                   	sti    
c001955f:	31 f6                	xor    esi,esi
c0019561:	eb 58                	jmp    c00195bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019563:	0f b7 ed             	movzx  ebp,bp
c0019566:	50                   	push   eax
c0019567:	0f b7 ff             	movzx  edi,di
c001956a:	50                   	push   eax
c001956b:	55                   	push   ebp
c001956c:	57                   	push   edi
c001956d:	e8 dc fc ff ff       	call   c001924e <Vm::realToLinear(unsigned short, unsigned short)>
c0019572:	5a                   	pop    edx
c0019573:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019575:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019579:	51                   	push   ecx
c001957a:	50                   	push   eax
c001957b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001957f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019583:	53                   	push   ebx
c0019584:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019587:	83 c4 14             	add    esp,0x14
c001958a:	53                   	push   ebx
c001958b:	e8 5e 41 ff ff       	call   c000d6ee <File::close()>
c0019590:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0019595:	83 c4 10             	add    esp,0x10
c0019598:	48                   	dec    eax
c0019599:	c6 05 e5 97 02 c0 00 	mov    BYTE PTR ds:0xc00297e5,0x0
c00195a0:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c00195a5:	85 c0                	test   eax,eax
c00195a7:	75 01                	jne    c00195aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00195a9:	fb                   	sti    
c00195aa:	83 ec 0c             	sub    esp,0xc
c00195ad:	ff 35 e8 97 02 c0    	push   DWORD PTR ds:0xc00297e8
c00195b3:	e8 dc f5 ff ff       	call   c0018b94 <unblockTask(ThreadControlBlock*)>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	83 c4 2c             	add    esp,0x2c
c00195be:	89 f0                	mov    eax,esi
c00195c0:	5b                   	pop    ebx
c00195c1:	5e                   	pop    esi
c00195c2:	5f                   	pop    edi
c00195c3:	5d                   	pop    ebp
c00195c4:	c3                   	ret    

c00195c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00195c5:	57                   	push   edi
c00195c6:	56                   	push   esi
c00195c7:	53                   	push   ebx
c00195c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195d4:	83 e8 06             	sub    eax,0x6
c00195d7:	0f b7 c0             	movzx  eax,ax
c00195da:	50                   	push   eax
c00195db:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00195e0:	50                   	push   eax
c00195e1:	e8 68 fc ff ff       	call   c001924e <Vm::realToLinear(unsigned short, unsigned short)>
c00195e6:	5a                   	pop    edx
c00195e7:	5e                   	pop    esi
c00195e8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00195eb:	8d 56 fa             	lea    edx,[esi-0x6]
c00195ee:	81 e2 ff ff 00 00    	and    edx,0xffff
c00195f4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00195f7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00195fa:	83 c2 02             	add    edx,0x2
c00195fd:	66 89 10             	mov    WORD PTR [eax],dx
c0019600:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019603:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019607:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001960a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001960e:	89 d6                	mov    esi,edx
c0019610:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019616:	66 81 e6 ff fd       	and    si,0xfdff
c001961b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001961f:	74 07                	je     c0019628 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019621:	89 d6                	mov    esi,edx
c0019623:	66 81 ce 00 02       	or     si,0x200
c0019628:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001962c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019631:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019635:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001963d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019640:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019648:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001964b:	5b                   	pop    ebx
c001964c:	5e                   	pop    esi
c001964d:	5f                   	pop    edi
c001964e:	c3                   	ret    

c001964f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001964f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019654:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019659:	c1 e0 04             	shl    eax,0x4
c001965c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001965f:	c3                   	ret    

c0019660 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019665:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001966a:	c1 e0 04             	shl    eax,0x4
c001966d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019671:	c3                   	ret    

c0019672 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019672:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019677:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001967c:	c1 e0 04             	shl    eax,0x4
c001967f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019682:	c3                   	ret    

c0019683 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019683:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019688:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001968d:	c1 e0 04             	shl    eax,0x4
c0019690:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019694:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019697:	c3                   	ret    

c0019698 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019698:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001969d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196a2:	c1 e0 04             	shl    eax,0x4
c00196a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196a9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00196ad:	c3                   	ret    

c00196ae <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00196ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196b8:	c1 e0 04             	shl    eax,0x4
c00196bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196bf:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00196c2:	c3                   	ret    

c00196c3 <Vm::faultHandler(regs*)>:
c00196c3:	55                   	push   ebp
c00196c4:	57                   	push   edi
c00196c5:	56                   	push   esi
c00196c6:	53                   	push   ebx
c00196c7:	83 ec 1c             	sub    esp,0x1c
c00196ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00196ce:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196d1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00196d5:	0f b7 f8             	movzx  edi,ax
c00196d8:	52                   	push   edx
c00196d9:	0f b7 c0             	movzx  eax,ax
c00196dc:	50                   	push   eax
c00196dd:	e8 6c fb ff ff       	call   c001924e <Vm::realToLinear(unsigned short, unsigned short)>
c00196e2:	5a                   	pop    edx
c00196e3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00196e6:	59                   	pop    ecx
c00196e7:	89 c1                	mov    ecx,eax
c00196e9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196f9:	0f b7 c5             	movzx  eax,bp
c00196fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019700:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019704:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019708:	e8 41 fb ff ff       	call   c001924e <Vm::realToLinear(unsigned short, unsigned short)>
c001970d:	5e                   	pop    esi
c001970e:	be 06 00 00 00       	mov    esi,0x6
c0019713:	5a                   	pop    edx
c0019714:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019719:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001971e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019721:	80 fa 9d             	cmp    dl,0x9d
c0019724:	0f 84 2c 02 00 00    	je     c0019956 <Vm::faultHandler(regs*)+0x293>
c001972a:	0f 87 91 00 00 00    	ja     c00197c1 <Vm::faultHandler(regs*)+0xfe>
c0019730:	80 fa 66             	cmp    dl,0x66
c0019733:	0f 84 98 01 00 00    	je     c00198d1 <Vm::faultHandler(regs*)+0x20e>
c0019739:	77 47                	ja     c0019782 <Vm::faultHandler(regs*)+0xbf>
c001973b:	80 fa 36             	cmp    dl,0x36
c001973e:	0f 84 80 01 00 00    	je     c00198c4 <Vm::faultHandler(regs*)+0x201>
c0019744:	77 1a                	ja     c0019760 <Vm::faultHandler(regs*)+0x9d>
c0019746:	80 fa 26             	cmp    dl,0x26
c0019749:	0f 84 4e 01 00 00    	je     c001989d <Vm::faultHandler(regs*)+0x1da>
c001974f:	80 fa 2e             	cmp    dl,0x2e
c0019752:	0f 85 e2 05 00 00    	jne    c0019d3a <Vm::faultHandler(regs*)+0x677>
c0019758:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001975b:	31 f6                	xor    esi,esi
c001975d:	41                   	inc    ecx
c001975e:	eb be                	jmp    c001971e <Vm::faultHandler(regs*)+0x5b>
c0019760:	80 fa 64             	cmp    dl,0x64
c0019763:	0f 84 41 01 00 00    	je     c00198aa <Vm::faultHandler(regs*)+0x1e7>
c0019769:	0f 87 48 01 00 00    	ja     c00198b7 <Vm::faultHandler(regs*)+0x1f4>
c001976f:	80 fa 3e             	cmp    dl,0x3e
c0019772:	0f 85 c2 05 00 00    	jne    c0019d3a <Vm::faultHandler(regs*)+0x677>
c0019778:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001977b:	be 01 00 00 00       	mov    esi,0x1
c0019780:	eb db                	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c0019782:	80 fa 6d             	cmp    dl,0x6d
c0019785:	0f 84 ec 02 00 00    	je     c0019a77 <Vm::faultHandler(regs*)+0x3b4>
c001978b:	77 17                	ja     c00197a4 <Vm::faultHandler(regs*)+0xe1>
c001978d:	80 fa 67             	cmp    dl,0x67
c0019790:	0f 84 48 01 00 00    	je     c00198de <Vm::faultHandler(regs*)+0x21b>
c0019796:	80 fa 6c             	cmp    dl,0x6c
c0019799:	0f 84 69 02 00 00    	je     c0019a08 <Vm::faultHandler(regs*)+0x345>
c001979f:	e9 96 05 00 00       	jmp    c0019d3a <Vm::faultHandler(regs*)+0x677>
c00197a4:	80 fa 6f             	cmp    dl,0x6f
c00197a7:	0f 84 f4 03 00 00    	je     c0019ba1 <Vm::faultHandler(regs*)+0x4de>
c00197ad:	0f 82 59 03 00 00    	jb     c0019b0c <Vm::faultHandler(regs*)+0x449>
c00197b3:	80 fa 9c             	cmp    dl,0x9c
c00197b6:	0f 84 2f 01 00 00    	je     c00198eb <Vm::faultHandler(regs*)+0x228>
c00197bc:	e9 79 05 00 00       	jmp    c0019d3a <Vm::faultHandler(regs*)+0x677>
c00197c1:	80 fa ec             	cmp    dl,0xec
c00197c4:	0f 84 14 05 00 00    	je     c0019cde <Vm::faultHandler(regs*)+0x61b>
c00197ca:	77 7b                	ja     c0019847 <Vm::faultHandler(regs*)+0x184>
c00197cc:	80 fa e4             	cmp    dl,0xe4
c00197cf:	0f 84 93 04 00 00    	je     c0019c68 <Vm::faultHandler(regs*)+0x5a5>
c00197d5:	77 53                	ja     c001982a <Vm::faultHandler(regs*)+0x167>
c00197d7:	80 fa cd             	cmp    dl,0xcd
c00197da:	0f 84 d9 01 00 00    	je     c00199b9 <Vm::faultHandler(regs*)+0x2f6>
c00197e0:	80 fa cf             	cmp    dl,0xcf
c00197e3:	0f 85 51 05 00 00    	jne    c0019d3a <Vm::faultHandler(regs*)+0x677>
c00197e9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00197ec:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00197ef:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00197f3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00197f6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00197fa:	81 ca 00 02 02 00    	or     edx,0x20200
c0019800:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019803:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019807:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001980d:	66 c1 e8 09          	shr    ax,0x9
c0019811:	83 e0 01             	and    eax,0x1
c0019814:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019817:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001981a:	83 c0 06             	add    eax,0x6
c001981d:	25 ff ff 00 00       	and    eax,0xffff
c0019822:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019825:	e9 0c 05 00 00       	jmp    c0019d36 <Vm::faultHandler(regs*)+0x673>
c001982a:	80 fa e6             	cmp    dl,0xe6
c001982d:	0f 84 7f 04 00 00    	je     c0019cb2 <Vm::faultHandler(regs*)+0x5ef>
c0019833:	0f 82 4b 04 00 00    	jb     c0019c84 <Vm::faultHandler(regs*)+0x5c1>
c0019839:	80 fa e7             	cmp    dl,0xe7
c001983c:	0f 84 87 04 00 00    	je     c0019cc9 <Vm::faultHandler(regs*)+0x606>
c0019842:	e9 f3 04 00 00       	jmp    c0019d3a <Vm::faultHandler(regs*)+0x677>
c0019847:	80 fa ef             	cmp    dl,0xef
c001984a:	0f 84 d1 04 00 00    	je     c0019d21 <Vm::faultHandler(regs*)+0x65e>
c0019850:	77 28                	ja     c001987a <Vm::faultHandler(regs*)+0x1b7>
c0019852:	80 fa ed             	cmp    dl,0xed
c0019855:	0f 84 9f 04 00 00    	je     c0019cfa <Vm::faultHandler(regs*)+0x637>
c001985b:	80 fa ee             	cmp    dl,0xee
c001985e:	0f 85 d6 04 00 00    	jne    c0019d3a <Vm::faultHandler(regs*)+0x677>
c0019864:	50                   	push   eax
c0019865:	50                   	push   eax
c0019866:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001986a:	50                   	push   eax
c001986b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001986f:	50                   	push   eax
c0019870:	e8 a3 f9 ff ff       	call   c0019218 <Vm::outbv(unsigned short, unsigned char)>
c0019875:	e9 9f 04 00 00       	jmp    c0019d19 <Vm::faultHandler(regs*)+0x656>
c001987a:	80 fa fa             	cmp    dl,0xfa
c001987d:	0f 84 69 01 00 00    	je     c00199ec <Vm::faultHandler(regs*)+0x329>
c0019883:	80 fa fb             	cmp    dl,0xfb
c0019886:	0f 84 6e 01 00 00    	je     c00199fa <Vm::faultHandler(regs*)+0x337>
c001988c:	80 fa f3             	cmp    dl,0xf3
c001988f:	0f 85 a5 04 00 00    	jne    c0019d3a <Vm::faultHandler(regs*)+0x677>
c0019895:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019898:	e9 c0 fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c001989d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198a0:	be 02 00 00 00       	mov    esi,0x2
c00198a5:	e9 b3 fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c00198aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198ad:	be 03 00 00 00       	mov    esi,0x3
c00198b2:	e9 a6 fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c00198b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198ba:	be 04 00 00 00       	mov    esi,0x4
c00198bf:	e9 99 fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c00198c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198c7:	be 05 00 00 00       	mov    esi,0x5
c00198cc:	e9 8c fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c00198d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198d4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00198d9:	e9 7f fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c00198de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198e1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00198e6:	e9 72 fe ff ff       	jmp    c001975d <Vm::faultHandler(regs*)+0x9a>
c00198eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00198ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00198f2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198f7:	74 30                	je     c0019929 <Vm::faultHandler(regs*)+0x266>
c00198f9:	83 e9 04             	sub    ecx,0x4
c00198fc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019902:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019908:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001990b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001990e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019914:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019918:	0f 84 15 04 00 00    	je     c0019d33 <Vm::faultHandler(regs*)+0x670>
c001991e:	80 ce 02             	or     dh,0x2
c0019921:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019924:	e9 0a 04 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019929:	83 e9 02             	sub    ecx,0x2
c001992c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019932:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019935:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019939:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001993f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019943:	74 05                	je     c001994a <Vm::faultHandler(regs*)+0x287>
c0019945:	80 ce 02             	or     dh,0x2
c0019948:	eb 03                	jmp    c001994d <Vm::faultHandler(regs*)+0x28a>
c001994a:	80 e6 fd             	and    dh,0xfd
c001994d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019951:	e9 dd 03 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019956:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001995b:	74 2a                	je     c0019987 <Vm::faultHandler(regs*)+0x2c4>
c001995d:	8b 10                	mov    edx,DWORD PTR [eax]
c001995f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019965:	81 ca 00 02 02 00    	or     edx,0x20200
c001996b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001996e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019970:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019976:	c1 e8 09             	shr    eax,0x9
c0019979:	83 e0 01             	and    eax,0x1
c001997c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001997f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019982:	83 c0 04             	add    eax,0x4
c0019985:	eb 25                	jmp    c00199ac <Vm::faultHandler(regs*)+0x2e9>
c0019987:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001998a:	81 ca 00 02 02 00    	or     edx,0x20200
c0019990:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019993:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019996:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001999c:	66 c1 e8 09          	shr    ax,0x9
c00199a0:	83 e0 01             	and    eax,0x1
c00199a3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00199a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00199a9:	83 c0 02             	add    eax,0x2
c00199ac:	25 ff ff 00 00       	and    eax,0xffff
c00199b1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00199b4:	e9 7a 03 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c00199b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199bd:	3c ee                	cmp    al,0xee
c00199bf:	75 10                	jne    c00199d1 <Vm::faultHandler(regs*)+0x30e>
c00199c1:	83 ec 0c             	sub    esp,0xc
c00199c4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00199c7:	e8 e9 f8 ff ff       	call   c00192b5 <Vm::mainloop3(unsigned long)>
c00199cc:	e9 4b 03 00 00       	jmp    c0019d1c <Vm::faultHandler(regs*)+0x659>
c00199d1:	83 ec 0c             	sub    esp,0xc
c00199d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00199d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199dc:	51                   	push   ecx
c00199dd:	50                   	push   eax
c00199de:	53                   	push   ebx
c00199df:	e8 e1 fb ff ff       	call   c00195c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00199e4:	83 c4 20             	add    esp,0x20
c00199e7:	e9 4a 03 00 00       	jmp    c0019d36 <Vm::faultHandler(regs*)+0x673>
c00199ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199f1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00199f5:	e9 39 03 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c00199fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199ff:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019a03:	e9 2b 03 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019a08:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a0b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a10:	74 2b                	je     c0019a3d <Vm::faultHandler(regs*)+0x37a>
c0019a12:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019a19:	76 22                	jbe    c0019a3d <Vm::faultHandler(regs*)+0x37a>
c0019a1b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a1f:	50                   	push   eax
c0019a20:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a24:	50                   	push   eax
c0019a25:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a29:	50                   	push   eax
c0019a2a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a2e:	50                   	push   eax
c0019a2f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a33:	50                   	push   eax
c0019a34:	6a 6c                	push   0x6c
c0019a36:	6a 6c                	push   0x6c
c0019a38:	e9 b9 01 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x533>
c0019a3d:	83 ec 0c             	sub    esp,0xc
c0019a40:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a44:	0f b7 f6             	movzx  esi,si
c0019a47:	50                   	push   eax
c0019a48:	e8 b8 f7 ff ff       	call   c0019205 <Vm::inbv(unsigned short)>
c0019a4d:	83 c4 0c             	add    esp,0xc
c0019a50:	0f b6 c0             	movzx  eax,al
c0019a53:	50                   	push   eax
c0019a54:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019a58:	50                   	push   eax
c0019a59:	56                   	push   esi
c0019a5a:	e8 24 fc ff ff       	call   c0019683 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019a5f:	83 c4 10             	add    esp,0x10
c0019a62:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a65:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a69:	74 03                	je     c0019a6e <Vm::faultHandler(regs*)+0x3ab>
c0019a6b:	48                   	dec    eax
c0019a6c:	eb 01                	jmp    c0019a6f <Vm::faultHandler(regs*)+0x3ac>
c0019a6e:	40                   	inc    eax
c0019a6f:	0f b7 c0             	movzx  eax,ax
c0019a72:	e9 8d 00 00 00       	jmp    c0019b04 <Vm::faultHandler(regs*)+0x441>
c0019a77:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a7d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a82:	74 29                	je     c0019aad <Vm::faultHandler(regs*)+0x3ea>
c0019a84:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a89:	76 22                	jbe    c0019aad <Vm::faultHandler(regs*)+0x3ea>
c0019a8b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a8f:	50                   	push   eax
c0019a90:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a94:	50                   	push   eax
c0019a95:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a99:	50                   	push   eax
c0019a9a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a9e:	50                   	push   eax
c0019a9f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019aa3:	50                   	push   eax
c0019aa4:	6a 6d                	push   0x6d
c0019aa6:	6a 6d                	push   0x6d
c0019aa8:	e9 49 01 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x533>
c0019aad:	0f b7 c8             	movzx  ecx,ax
c0019ab0:	0f b7 f6             	movzx  esi,si
c0019ab3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019ab6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019abb:	74 20                	je     c0019add <Vm::faultHandler(regs*)+0x41a>
c0019abd:	ed                   	in     eax,dx
c0019abe:	55                   	push   ebp
c0019abf:	50                   	push   eax
c0019ac0:	51                   	push   ecx
c0019ac1:	56                   	push   esi
c0019ac2:	e8 e7 fb ff ff       	call   c00196ae <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019acd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ad1:	74 05                	je     c0019ad8 <Vm::faultHandler(regs*)+0x415>
c0019ad3:	83 e8 04             	sub    eax,0x4
c0019ad6:	eb 27                	jmp    c0019aff <Vm::faultHandler(regs*)+0x43c>
c0019ad8:	83 c0 04             	add    eax,0x4
c0019adb:	eb 22                	jmp    c0019aff <Vm::faultHandler(regs*)+0x43c>
c0019add:	66 ed                	in     ax,dx
c0019adf:	0f b7 c0             	movzx  eax,ax
c0019ae2:	57                   	push   edi
c0019ae3:	50                   	push   eax
c0019ae4:	51                   	push   ecx
c0019ae5:	56                   	push   esi
c0019ae6:	e8 ad fb ff ff       	call   c0019698 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019aeb:	83 c4 10             	add    esp,0x10
c0019aee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019af1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019af5:	74 05                	je     c0019afc <Vm::faultHandler(regs*)+0x439>
c0019af7:	83 e8 02             	sub    eax,0x2
c0019afa:	eb 03                	jmp    c0019aff <Vm::faultHandler(regs*)+0x43c>
c0019afc:	83 c0 02             	add    eax,0x2
c0019aff:	25 ff ff 00 00       	and    eax,0xffff
c0019b04:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019b07:	e9 27 02 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019b0c:	8d 46 ff             	lea    eax,[esi-0x1]
c0019b0f:	3c 05                	cmp    al,0x5
c0019b11:	77 24                	ja     c0019b37 <Vm::faultHandler(regs*)+0x474>
c0019b13:	0f b6 c0             	movzx  eax,al
c0019b16:	ff 24 85 6c 65 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9a94]
c0019b1d:	0f b7 fd             	movzx  edi,bp
c0019b20:	eb 15                	jmp    c0019b37 <Vm::faultHandler(regs*)+0x474>
c0019b22:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019b26:	eb 0f                	jmp    c0019b37 <Vm::faultHandler(regs*)+0x474>
c0019b28:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019b2c:	eb 09                	jmp    c0019b37 <Vm::faultHandler(regs*)+0x474>
c0019b2e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019b32:	eb 03                	jmp    c0019b37 <Vm::faultHandler(regs*)+0x474>
c0019b34:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019b37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b3a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b3f:	74 29                	je     c0019b6a <Vm::faultHandler(regs*)+0x4a7>
c0019b41:	3d ff ff 00 00       	cmp    eax,0xffff
c0019b46:	76 22                	jbe    c0019b6a <Vm::faultHandler(regs*)+0x4a7>
c0019b48:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019b4c:	50                   	push   eax
c0019b4d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019b51:	50                   	push   eax
c0019b52:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019b56:	50                   	push   eax
c0019b57:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019b5b:	50                   	push   eax
c0019b5c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b60:	50                   	push   eax
c0019b61:	6a 6e                	push   0x6e
c0019b63:	6a 6e                	push   0x6e
c0019b65:	e9 8c 00 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x533>
c0019b6a:	0f b7 c0             	movzx  eax,ax
c0019b6d:	52                   	push   edx
c0019b6e:	52                   	push   edx
c0019b6f:	50                   	push   eax
c0019b70:	57                   	push   edi
c0019b71:	e8 d9 fa ff ff       	call   c001964f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019b76:	59                   	pop    ecx
c0019b77:	0f b6 c0             	movzx  eax,al
c0019b7a:	5e                   	pop    esi
c0019b7b:	50                   	push   eax
c0019b7c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b80:	50                   	push   eax
c0019b81:	e8 92 f6 ff ff       	call   c0019218 <Vm::outbv(unsigned short, unsigned char)>
c0019b86:	83 c4 10             	add    esp,0x10
c0019b89:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b8c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b90:	74 03                	je     c0019b95 <Vm::faultHandler(regs*)+0x4d2>
c0019b92:	48                   	dec    eax
c0019b93:	eb 01                	jmp    c0019b96 <Vm::faultHandler(regs*)+0x4d3>
c0019b95:	40                   	inc    eax
c0019b96:	0f b7 c0             	movzx  eax,ax
c0019b99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b9c:	e9 92 01 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019ba1:	8d 46 ff             	lea    eax,[esi-0x1]
c0019ba4:	3c 05                	cmp    al,0x5
c0019ba6:	77 1f                	ja     c0019bc7 <Vm::faultHandler(regs*)+0x504>
c0019ba8:	0f b6 c0             	movzx  eax,al
c0019bab:	ff 24 85 84 65 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9a7c]
c0019bb2:	89 ef                	mov    edi,ebp
c0019bb4:	eb 11                	jmp    c0019bc7 <Vm::faultHandler(regs*)+0x504>
c0019bb6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019bb9:	eb 0c                	jmp    c0019bc7 <Vm::faultHandler(regs*)+0x504>
c0019bbb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019bbe:	eb 07                	jmp    c0019bc7 <Vm::faultHandler(regs*)+0x504>
c0019bc0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019bc3:	eb 02                	jmp    c0019bc7 <Vm::faultHandler(regs*)+0x504>
c0019bc5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019bc7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019bca:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019bcf:	74 37                	je     c0019c08 <Vm::faultHandler(regs*)+0x545>
c0019bd1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019bd7:	76 2f                	jbe    c0019c08 <Vm::faultHandler(regs*)+0x545>
c0019bd9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019bdd:	50                   	push   eax
c0019bde:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019be2:	50                   	push   eax
c0019be3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019be7:	50                   	push   eax
c0019be8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019bec:	50                   	push   eax
c0019bed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019bf1:	50                   	push   eax
c0019bf2:	6a 6f                	push   0x6f
c0019bf4:	6a 6f                	push   0x6f
c0019bf6:	68 12 65 02 c0       	push   0xc0026512
c0019bfb:	e8 4b 34 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0019c00:	83 c4 20             	add    esp,0x20
c0019c03:	e9 86 01 00 00       	jmp    c0019d8e <Vm::faultHandler(regs*)+0x6cb>
c0019c08:	0f b7 d7             	movzx  edx,di
c0019c0b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019c0e:	0f b7 c6             	movzx  eax,si
c0019c11:	81 e1 00 04 00 00    	and    ecx,0x400
c0019c17:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019c1a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c1f:	74 1d                	je     c0019c3e <Vm::faultHandler(regs*)+0x57b>
c0019c21:	55                   	push   ebp
c0019c22:	55                   	push   ebp
c0019c23:	50                   	push   eax
c0019c24:	52                   	push   edx
c0019c25:	e8 48 fa ff ff       	call   c0019672 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019c2a:	83 c4 10             	add    esp,0x10
c0019c2d:	89 fa                	mov    edx,edi
c0019c2f:	ef                   	out    dx,eax
c0019c30:	85 c9                	test   ecx,ecx
c0019c32:	74 05                	je     c0019c39 <Vm::faultHandler(regs*)+0x576>
c0019c34:	83 ee 04             	sub    esi,0x4
c0019c37:	eb 21                	jmp    c0019c5a <Vm::faultHandler(regs*)+0x597>
c0019c39:	83 c6 04             	add    esi,0x4
c0019c3c:	eb 1c                	jmp    c0019c5a <Vm::faultHandler(regs*)+0x597>
c0019c3e:	55                   	push   ebp
c0019c3f:	55                   	push   ebp
c0019c40:	50                   	push   eax
c0019c41:	52                   	push   edx
c0019c42:	e8 19 fa ff ff       	call   c0019660 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	89 fa                	mov    edx,edi
c0019c4c:	66 ef                	out    dx,ax
c0019c4e:	85 c9                	test   ecx,ecx
c0019c50:	74 05                	je     c0019c57 <Vm::faultHandler(regs*)+0x594>
c0019c52:	83 ee 02             	sub    esi,0x2
c0019c55:	eb 03                	jmp    c0019c5a <Vm::faultHandler(regs*)+0x597>
c0019c57:	83 c6 02             	add    esi,0x2
c0019c5a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019c60:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019c63:	e9 cb 00 00 00       	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019c68:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c6f:	83 ec 0c             	sub    esp,0xc
c0019c72:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c76:	50                   	push   eax
c0019c77:	e8 89 f5 ff ff       	call   c0019205 <Vm::inbv(unsigned short)>
c0019c7c:	0f b6 c0             	movzx  eax,al
c0019c7f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c82:	eb 3f                	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x600>
c0019c84:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c89:	74 07                	je     c0019c92 <Vm::faultHandler(regs*)+0x5cf>
c0019c8b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c8f:	ed                   	in     eax,dx
c0019c90:	eb 14                	jmp    c0019ca6 <Vm::faultHandler(regs*)+0x5e3>
c0019c92:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019c95:	66 31 f6             	xor    si,si
c0019c98:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019c9b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c9f:	66 ed                	in     ax,dx
c0019ca1:	0f b7 c0             	movzx  eax,ax
c0019ca4:	09 f0                	or     eax,esi
c0019ca6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019ca9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019cad:	e9 84 00 00 00       	jmp    c0019d36 <Vm::faultHandler(regs*)+0x673>
c0019cb2:	52                   	push   edx
c0019cb3:	52                   	push   edx
c0019cb4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019cb8:	50                   	push   eax
c0019cb9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019cbd:	50                   	push   eax
c0019cbe:	e8 55 f5 ff ff       	call   c0019218 <Vm::outbv(unsigned short, unsigned char)>
c0019cc3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019cc7:	eb 53                	jmp    c0019d1c <Vm::faultHandler(regs*)+0x659>
c0019cc9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019ccc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019cd0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cd5:	74 03                	je     c0019cda <Vm::faultHandler(regs*)+0x617>
c0019cd7:	ef                   	out    dx,eax
c0019cd8:	eb cf                	jmp    c0019ca9 <Vm::faultHandler(regs*)+0x5e6>
c0019cda:	66 ef                	out    dx,ax
c0019cdc:	eb cb                	jmp    c0019ca9 <Vm::faultHandler(regs*)+0x5e6>
c0019cde:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019ce5:	83 ec 0c             	sub    esp,0xc
c0019ce8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019cec:	50                   	push   eax
c0019ced:	e8 13 f5 ff ff       	call   c0019205 <Vm::inbv(unsigned short)>
c0019cf2:	0f b6 c0             	movzx  eax,al
c0019cf5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019cf8:	eb 1f                	jmp    c0019d19 <Vm::faultHandler(regs*)+0x656>
c0019cfa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019cfd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d02:	74 03                	je     c0019d07 <Vm::faultHandler(regs*)+0x644>
c0019d04:	ed                   	in     eax,dx
c0019d05:	eb 0d                	jmp    c0019d14 <Vm::faultHandler(regs*)+0x651>
c0019d07:	66 ed                	in     ax,dx
c0019d09:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019d0c:	0f b7 c0             	movzx  eax,ax
c0019d0f:	66 31 d2             	xor    dx,dx
c0019d12:	09 d0                	or     eax,edx
c0019d14:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d17:	eb 1a                	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019d19:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d1c:	83 c4 10             	add    esp,0x10
c0019d1f:	eb 15                	jmp    c0019d36 <Vm::faultHandler(regs*)+0x673>
c0019d21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d24:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d2c:	74 03                	je     c0019d31 <Vm::faultHandler(regs*)+0x66e>
c0019d2e:	ef                   	out    dx,eax
c0019d2f:	eb 02                	jmp    c0019d33 <Vm::faultHandler(regs*)+0x670>
c0019d31:	66 ef                	out    dx,ax
c0019d33:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d36:	b0 01                	mov    al,0x1
c0019d38:	eb 56                	jmp    c0019d90 <Vm::faultHandler(regs*)+0x6cd>
c0019d3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019d3e:	50                   	push   eax
c0019d3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019d43:	50                   	push   eax
c0019d44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019d48:	50                   	push   eax
c0019d49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019d4d:	50                   	push   eax
c0019d4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019d52:	50                   	push   eax
c0019d53:	52                   	push   edx
c0019d54:	52                   	push   edx
c0019d55:	68 3f 65 02 c0       	push   0xc002653f
c0019d5a:	e8 ec 32 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0019d5f:	83 c4 20             	add    esp,0x20
c0019d62:	83 ec 0c             	sub    esp,0xc
c0019d65:	6a 60                	push   0x60
c0019d67:	e8 99 f4 ff ff       	call   c0019205 <Vm::inbv(unsigned short)>
c0019d6c:	83 c4 10             	add    esp,0x10
c0019d6f:	3c 1c                	cmp    al,0x1c
c0019d71:	74 04                	je     c0019d77 <Vm::faultHandler(regs*)+0x6b4>
c0019d73:	3c 5a                	cmp    al,0x5a
c0019d75:	75 eb                	jne    c0019d62 <Vm::faultHandler(regs*)+0x69f>
c0019d77:	3c 5a                	cmp    al,0x5a
c0019d79:	74 04                	je     c0019d7f <Vm::faultHandler(regs*)+0x6bc>
c0019d7b:	3c 1c                	cmp    al,0x1c
c0019d7d:	75 0f                	jne    c0019d8e <Vm::faultHandler(regs*)+0x6cb>
c0019d7f:	83 ec 0c             	sub    esp,0xc
c0019d82:	6a 60                	push   0x60
c0019d84:	e8 7c f4 ff ff       	call   c0019205 <Vm::inbv(unsigned short)>
c0019d89:	83 c4 10             	add    esp,0x10
c0019d8c:	eb e9                	jmp    c0019d77 <Vm::faultHandler(regs*)+0x6b4>
c0019d8e:	31 c0                	xor    eax,eax
c0019d90:	83 c4 1c             	add    esp,0x1c
c0019d93:	5b                   	pop    ebx
c0019d94:	5e                   	pop    esi
c0019d95:	5f                   	pop    edi
c0019d96:	5d                   	pop    ebp
c0019d97:	c3                   	ret    

c0019d98 <Vm::fpuInternalTo32(unsigned long long)>:
c0019d98:	57                   	push   edi
c0019d99:	56                   	push   esi
c0019d9a:	53                   	push   ebx
c0019d9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da3:	89 d6                	mov    esi,edx
c0019da5:	89 d7                	mov    edi,edx
c0019da7:	89 c1                	mov    ecx,eax
c0019da9:	c1 ef 14             	shr    edi,0x14
c0019dac:	89 d3                	mov    ebx,edx
c0019dae:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019db4:	31 d2                	xor    edx,edx
c0019db6:	89 f8                	mov    eax,edi
c0019db8:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019dbe:	bf ff 00 00 00       	mov    edi,0xff
c0019dc3:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019dc8:	83 d2 ff             	adc    edx,0xffffffff
c0019dcb:	39 c7                	cmp    edi,eax
c0019dcd:	bf 00 00 00 00       	mov    edi,0x0
c0019dd2:	19 d7                	sbb    edi,edx
c0019dd4:	72 16                	jb     c0019dec <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019dd6:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019dda:	c1 e0 17             	shl    eax,0x17
c0019ddd:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019de3:	09 f1                	or     ecx,esi
c0019de5:	09 c1                	or     ecx,eax
c0019de7:	89 cf                	mov    edi,ecx
c0019de9:	eb 05                	jmp    c0019df0 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019deb:	90                   	nop
c0019dec:	31 ff                	xor    edi,edi
c0019dee:	66 90                	xchg   ax,ax
c0019df0:	89 f8                	mov    eax,edi
c0019df2:	5b                   	pop    ebx
c0019df3:	5e                   	pop    esi
c0019df4:	5f                   	pop    edi
c0019df5:	c3                   	ret    

c0019df6 <Vm::fpuInternalTo64(unsigned long long)>:
c0019df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019dfe:	c3                   	ret    

c0019dff <Vm::fpu32ToInternal(unsigned int)>:
c0019dff:	57                   	push   edi
c0019e00:	31 ff                	xor    edi,edi
c0019e02:	56                   	push   esi
c0019e03:	53                   	push   ebx
c0019e04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e08:	89 cb                	mov    ebx,ecx
c0019e0a:	89 ce                	mov    esi,ecx
c0019e0c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019e12:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019e18:	c1 e9 17             	shr    ecx,0x17
c0019e1b:	89 f0                	mov    eax,esi
c0019e1d:	0f b6 d1             	movzx  edx,cl
c0019e20:	81 c2 80 03 00 00    	add    edx,0x380
c0019e26:	89 d1                	mov    ecx,edx
c0019e28:	89 fa                	mov    edx,edi
c0019e2a:	c1 e1 14             	shl    ecx,0x14
c0019e2d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019e31:	c1 e0 1d             	shl    eax,0x1d
c0019e34:	89 d7                	mov    edi,edx
c0019e36:	89 c6                	mov    esi,eax
c0019e38:	89 ca                	mov    edx,ecx
c0019e3a:	89 f0                	mov    eax,esi
c0019e3c:	09 fa                	or     edx,edi
c0019e3e:	09 da                	or     edx,ebx
c0019e40:	5b                   	pop    ebx
c0019e41:	5e                   	pop    esi
c0019e42:	5f                   	pop    edi
c0019e43:	c3                   	ret    

c0019e44 <Vm::fpu64ToInternal(unsigned long long)>:
c0019e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e4c:	c3                   	ret    

c0019e4d <Vm::fpuFloatToLong(unsigned long long)>:
c0019e4d:	57                   	push   edi
c0019e4e:	31 c0                	xor    eax,eax
c0019e50:	56                   	push   esi
c0019e51:	31 d2                	xor    edx,edx
c0019e53:	53                   	push   ebx
c0019e54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e5c:	89 d9                	mov    ecx,ebx
c0019e5e:	c1 e9 14             	shr    ecx,0x14
c0019e61:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019e67:	89 cf                	mov    edi,ecx
c0019e69:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019e6f:	78 37                	js     c0019ea8 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e71:	89 d9                	mov    ecx,ebx
c0019e73:	89 f0                	mov    eax,esi
c0019e75:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019e7b:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019e81:	89 ca                	mov    edx,ecx
c0019e83:	b9 34 00 00 00       	mov    ecx,0x34
c0019e88:	29 f9                	sub    ecx,edi
c0019e8a:	0f ad d0             	shrd   eax,edx,cl
c0019e8d:	d3 fa                	sar    edx,cl
c0019e8f:	f6 c1 20             	test   cl,0x20
c0019e92:	74 08                	je     c0019e9c <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019e94:	89 d0                	mov    eax,edx
c0019e96:	c1 fa 1f             	sar    edx,0x1f
c0019e99:	8d 76 00             	lea    esi,[esi+0x0]
c0019e9c:	85 db                	test   ebx,ebx
c0019e9e:	79 08                	jns    c0019ea8 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019ea0:	f7 d8                	neg    eax
c0019ea2:	83 d2 00             	adc    edx,0x0
c0019ea5:	f7 da                	neg    edx
c0019ea7:	90                   	nop
c0019ea8:	5b                   	pop    ebx
c0019ea9:	5e                   	pop    esi
c0019eaa:	5f                   	pop    edi
c0019eab:	c3                   	ret    

c0019eac <Vm::fpuULongToFloat(unsigned long long)>:
c0019eac:	57                   	push   edi
c0019ead:	31 c9                	xor    ecx,ecx
c0019eaf:	56                   	push   esi
c0019eb0:	53                   	push   ebx
c0019eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019eb5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ebc:	0f ba e7 14          	bt     edi,0x14
c0019ec0:	72 0a                	jb     c0019ecc <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019ec2:	01 f6                	add    esi,esi
c0019ec4:	11 ff                	adc    edi,edi
c0019ec6:	41                   	inc    ecx
c0019ec7:	eb f3                	jmp    c0019ebc <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ecc:	89 fa                	mov    edx,edi
c0019ece:	89 f0                	mov    eax,esi
c0019ed0:	bb 33 04 00 00       	mov    ebx,0x433
c0019ed5:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019edb:	29 cb                	sub    ebx,ecx
c0019edd:	89 d9                	mov    ecx,ebx
c0019edf:	5b                   	pop    ebx
c0019ee0:	c1 e1 14             	shl    ecx,0x14
c0019ee3:	5e                   	pop    esi
c0019ee4:	09 ca                	or     edx,ecx
c0019ee6:	5f                   	pop    edi
c0019ee7:	c3                   	ret    

c0019ee8 <Vm::fpuLongToFloat(long long)>:
c0019ee8:	56                   	push   esi
c0019ee9:	31 c0                	xor    eax,eax
c0019eeb:	53                   	push   ebx
c0019eec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ef0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ef4:	39 c8                	cmp    eax,ecx
c0019ef6:	19 d8                	sbb    eax,ebx
c0019ef8:	7d 06                	jge    c0019f00 <Vm::fpuLongToFloat(long long)+0x18>
c0019efa:	31 f6                	xor    esi,esi
c0019efc:	eb 0e                	jmp    c0019f0c <Vm::fpuLongToFloat(long long)+0x24>
c0019efe:	66 90                	xchg   ax,ax
c0019f00:	f7 d9                	neg    ecx
c0019f02:	be 01 00 00 00       	mov    esi,0x1
c0019f07:	83 d3 00             	adc    ebx,0x0
c0019f0a:	f7 db                	neg    ebx
c0019f0c:	31 c0                	xor    eax,eax
c0019f0e:	66 90                	xchg   ax,ax
c0019f10:	0f ba e3 14          	bt     ebx,0x14
c0019f14:	72 0a                	jb     c0019f20 <Vm::fpuLongToFloat(long long)+0x38>
c0019f16:	01 c9                	add    ecx,ecx
c0019f18:	11 db                	adc    ebx,ebx
c0019f1a:	40                   	inc    eax
c0019f1b:	eb f3                	jmp    c0019f10 <Vm::fpuLongToFloat(long long)+0x28>
c0019f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f20:	ba 33 04 00 00       	mov    edx,0x433
c0019f25:	29 c2                	sub    edx,eax
c0019f27:	89 c8                	mov    eax,ecx
c0019f29:	c1 e2 14             	shl    edx,0x14
c0019f2c:	89 d9                	mov    ecx,ebx
c0019f2e:	89 f3                	mov    ebx,esi
c0019f30:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019f36:	09 ca                	or     edx,ecx
c0019f38:	84 db                	test   bl,bl
c0019f3a:	74 08                	je     c0019f44 <Vm::fpuLongToFloat(long long)+0x5c>
c0019f3c:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019f42:	66 90                	xchg   ax,ax
c0019f44:	5b                   	pop    ebx
c0019f45:	5e                   	pop    esi
c0019f46:	c3                   	ret    

c0019f47 <Vm::fpuGet0()>:
c0019f47:	31 c0                	xor    eax,eax
c0019f49:	31 d2                	xor    edx,edx
c0019f4b:	c3                   	ret    

c0019f4c <Vm::fpuGet1()>:
c0019f4c:	b8 01 00 00 00       	mov    eax,0x1
c0019f51:	31 d2                	xor    edx,edx
c0019f53:	c3                   	ret    

c0019f54 <Vm::fpuGetPi()>:
c0019f54:	b8 03 00 00 00       	mov    eax,0x3
c0019f59:	31 d2                	xor    edx,edx
c0019f5b:	c3                   	ret    

c0019f5c <Vm::fpuGetLog2E()>:
c0019f5c:	83 ec 18             	sub    esp,0x18
c0019f5f:	68 9c 65 02 c0       	push   0xc002659c
c0019f64:	e8 04 b1 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0019f69:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f6e:	31 d2                	xor    edx,edx
c0019f70:	83 c4 1c             	add    esp,0x1c
c0019f73:	c3                   	ret    

c0019f74 <Vm::fpuGetLogE2()>:
c0019f74:	83 ec 18             	sub    esp,0x18
c0019f77:	68 a8 65 02 c0       	push   0xc00265a8
c0019f7c:	e8 ec b0 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0019f81:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f86:	31 d2                	xor    edx,edx
c0019f88:	83 c4 1c             	add    esp,0x1c
c0019f8b:	c3                   	ret    

c0019f8c <Vm::fpuGetLog210()>:
c0019f8c:	83 ec 18             	sub    esp,0x18
c0019f8f:	68 b4 65 02 c0       	push   0xc00265b4
c0019f94:	e8 d4 b0 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0019f99:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f9e:	31 d2                	xor    edx,edx
c0019fa0:	83 c4 1c             	add    esp,0x1c
c0019fa3:	c3                   	ret    

c0019fa4 <Vm::fpuGetLog102()>:
c0019fa4:	83 ec 18             	sub    esp,0x18
c0019fa7:	68 c1 65 02 c0       	push   0xc00265c1
c0019fac:	e8 bc b0 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0019fb1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019fb6:	31 d2                	xor    edx,edx
c0019fb8:	83 c4 1c             	add    esp,0x1c
c0019fbb:	c3                   	ret    

c0019fbc <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fc0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019fc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fc8:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019fcc:	0f 92 c0             	setb   al
c0019fcf:	c3                   	ret    

c0019fd0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019fd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019fdc:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019fe0:	09 c2                	or     edx,eax
c0019fe2:	0f 94 c0             	sete   al
c0019fe5:	c3                   	ret    

c0019fe6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019fe6:	57                   	push   edi
c0019fe7:	56                   	push   esi
c0019fe8:	53                   	push   ebx
c0019fe9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ff1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ff5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ff9:	57                   	push   edi
c0019ffa:	56                   	push   esi
c0019ffb:	53                   	push   ebx
c0019ffc:	51                   	push   ecx
c0019ffd:	e8 ce ff ff ff       	call   c0019fd0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a002:	83 c4 10             	add    esp,0x10
c001a005:	88 c2                	mov    dl,al
c001a007:	31 c0                	xor    eax,eax
c001a009:	84 d2                	test   dl,dl
c001a00b:	75 0f                	jne    c001a01c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a00d:	57                   	push   edi
c001a00e:	56                   	push   esi
c001a00f:	53                   	push   ebx
c001a010:	51                   	push   ecx
c001a011:	e8 a6 ff ff ff       	call   c0019fbc <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a016:	83 c4 10             	add    esp,0x10
c001a019:	8d 76 00             	lea    esi,[esi+0x0]
c001a01c:	83 e0 01             	and    eax,0x1
c001a01f:	5b                   	pop    ebx
c001a020:	88 c1                	mov    cl,al
c001a022:	83 e2 01             	and    edx,0x1
c001a025:	a0 21 98 02 c0       	mov    al,ds:0xc0029821
c001a02a:	c1 e2 06             	shl    edx,0x6
c001a02d:	83 e0 ba             	and    eax,0xffffffba
c001a030:	5e                   	pop    esi
c001a031:	09 c8                	or     eax,ecx
c001a033:	5f                   	pop    edi
c001a034:	09 d0                	or     eax,edx
c001a036:	a2 21 98 02 c0       	mov    ds:0xc0029821,al
c001a03b:	c3                   	ret    

c001a03c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a03c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a044:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a048:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a04c:	c3                   	ret    

c001a04d <Vm::fpuAbs(unsigned long long)>:
c001a04d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a051:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a055:	c3                   	ret    

c001a056 <Vm::fpuChs(unsigned long long)>:
c001a056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a05a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a05e:	f7 d8                	neg    eax
c001a060:	83 d2 00             	adc    edx,0x0
c001a063:	f7 da                	neg    edx
c001a065:	c3                   	ret    

c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a066:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a06a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a06f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a073:	eb c7                	jmp    c001a03c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a075 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a075:	53                   	push   ebx
c001a076:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a07a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a07e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a082:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a086:	0f af ca             	imul   ecx,edx
c001a089:	0f af d8             	imul   ebx,eax
c001a08c:	f7 e2                	mul    edx
c001a08e:	01 d9                	add    ecx,ebx
c001a090:	5b                   	pop    ebx
c001a091:	01 ca                	add    edx,ecx
c001a093:	c3                   	ret    

c001a094 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a094:	83 ec 0c             	sub    esp,0xc
c001a097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0a7:	e8 34 87 00 00       	call   c00227e0 <__udivdi3>
c001a0ac:	83 c4 1c             	add    esp,0x1c
c001a0af:	c3                   	ret    

c001a0b0 <Vm::fpuSquare(unsigned long long)>:
c001a0b0:	50                   	push   eax
c001a0b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0b9:	52                   	push   edx
c001a0ba:	50                   	push   eax
c001a0bb:	52                   	push   edx
c001a0bc:	50                   	push   eax
c001a0bd:	e8 b3 ff ff ff       	call   c001a075 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a0c2:	83 c4 14             	add    esp,0x14
c001a0c5:	c3                   	ret    

c001a0c6 <Vm::fpuGetReg(int)>:
c001a0c6:	83 ec 0c             	sub    esp,0xc
c001a0c9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a0ce:	76 10                	jbe    c001a0e0 <Vm::fpuGetReg(int)+0x1a>
c001a0d0:	83 ec 0c             	sub    esp,0xc
c001a0d3:	68 ce 65 02 c0       	push   0xc00265ce
c001a0d8:	e8 90 af ff ff       	call   c001506d <Krnl::panic(char const*)>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	a0 21 98 02 c0       	mov    al,ds:0xc0029821
c001a0e5:	b9 08 00 00 00       	mov    ecx,0x8
c001a0ea:	c0 e8 03             	shr    al,0x3
c001a0ed:	83 e0 07             	and    eax,0x7
c001a0f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a0f4:	99                   	cdq    
c001a0f5:	f7 f9                	idiv   ecx
c001a0f7:	8b 04 d5 24 98 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd67dc]
c001a0fe:	8b 14 d5 28 98 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd67d8]
c001a105:	83 c4 0c             	add    esp,0xc
c001a108:	c3                   	ret    

c001a109 <Vm::fpuSetReg(int, unsigned long long)>:
c001a109:	57                   	push   edi
c001a10a:	56                   	push   esi
c001a10b:	52                   	push   edx
c001a10c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a110:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a114:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a119:	76 11                	jbe    c001a12c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a11b:	83 ec 0c             	sub    esp,0xc
c001a11e:	68 e1 65 02 c0       	push   0xc00265e1
c001a123:	e8 45 af ff ff       	call   c001506d <Krnl::panic(char const*)>
c001a128:	83 c4 10             	add    esp,0x10
c001a12b:	90                   	nop
c001a12c:	a0 21 98 02 c0       	mov    al,ds:0xc0029821
c001a131:	b9 08 00 00 00       	mov    ecx,0x8
c001a136:	c0 e8 03             	shr    al,0x3
c001a139:	83 e0 07             	and    eax,0x7
c001a13c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a140:	99                   	cdq    
c001a141:	f7 f9                	idiv   ecx
c001a143:	89 34 d5 24 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd67dc],esi
c001a14a:	89 3c d5 28 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd67d8],edi
c001a151:	58                   	pop    eax
c001a152:	5e                   	pop    esi
c001a153:	5f                   	pop    edi
c001a154:	c3                   	ret    

c001a155 <Vm::fpuPush(unsigned long long)>:
c001a155:	a0 21 98 02 c0       	mov    al,ds:0xc0029821
c001a15a:	c0 e8 03             	shr    al,0x3
c001a15d:	83 e0 07             	and    eax,0x7
c001a160:	83 c0 07             	add    eax,0x7
c001a163:	88 c2                	mov    dl,al
c001a165:	83 e0 07             	and    eax,0x7
c001a168:	83 e2 07             	and    edx,0x7
c001a16b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a172:	8a 15 21 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029821
c001a178:	83 e2 c7             	and    edx,0xffffffc7
c001a17b:	09 ca                	or     edx,ecx
c001a17d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a181:	88 15 21 98 02 c0    	mov    BYTE PTR ds:0xc0029821,dl
c001a187:	89 0c c5 28 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67d8],ecx
c001a18e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a192:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c001a199:	a1 64 98 02 c0       	mov    eax,ds:0xc0029864
c001a19e:	83 f8 08             	cmp    eax,0x8
c001a1a1:	75 09                	jne    c001a1ac <Vm::fpuPush(unsigned long long)+0x57>
c001a1a3:	80 0d 20 98 02 c0 40 	or     BYTE PTR ds:0xc0029820,0x40
c001a1aa:	c3                   	ret    
c001a1ab:	90                   	nop
c001a1ac:	40                   	inc    eax
c001a1ad:	a3 64 98 02 c0       	mov    ds:0xc0029864,eax
c001a1b2:	c3                   	ret    

c001a1b3 <Vm::fpuPop()>:
c001a1b3:	8a 0d 21 98 02 c0    	mov    cl,BYTE PTR ds:0xc0029821
c001a1b9:	53                   	push   ebx
c001a1ba:	c0 e9 03             	shr    cl,0x3
c001a1bd:	8a 1d 21 98 02 c0    	mov    bl,BYTE PTR ds:0xc0029821
c001a1c3:	83 e1 07             	and    ecx,0x7
c001a1c6:	83 e3 c7             	and    ebx,0xffffffc7
c001a1c9:	8b 04 cd 24 98 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd67dc]
c001a1d0:	8b 14 cd 28 98 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd67d8]
c001a1d7:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a1de:	83 e1 38             	and    ecx,0x38
c001a1e1:	09 d9                	or     ecx,ebx
c001a1e3:	88 0d 21 98 02 c0    	mov    BYTE PTR ds:0xc0029821,cl
c001a1e9:	8b 0d 64 98 02 c0    	mov    ecx,DWORD PTR ds:0xc0029864
c001a1ef:	85 c9                	test   ecx,ecx
c001a1f1:	74 09                	je     c001a1fc <Vm::fpuPop()+0x49>
c001a1f3:	49                   	dec    ecx
c001a1f4:	89 0d 64 98 02 c0    	mov    DWORD PTR ds:0xc0029864,ecx
c001a1fa:	eb 08                	jmp    c001a204 <Vm::fpuPop()+0x51>
c001a1fc:	80 0d 20 98 02 c0 40 	or     BYTE PTR ds:0xc0029820,0x40
c001a203:	90                   	nop
c001a204:	5b                   	pop    ebx
c001a205:	c3                   	ret    

c001a206 <Vm::x87Handler(regs*)>:
c001a206:	55                   	push   ebp
c001a207:	57                   	push   edi
c001a208:	56                   	push   esi
c001a209:	53                   	push   ebx
c001a20a:	83 ec 1c             	sub    esp,0x1c
c001a20d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a211:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a216:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a219:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a221:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a225:	50                   	push   eax
c001a226:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a22a:	50                   	push   eax
c001a22b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a22f:	50                   	push   eax
c001a230:	53                   	push   ebx
c001a231:	e8 50 a5 ff ff       	call   c0014786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a236:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a239:	83 c4 10             	add    esp,0x10
c001a23c:	89 c6                	mov    esi,eax
c001a23e:	80 fa d9             	cmp    dl,0xd9
c001a241:	0f 85 79 01 00 00    	jne    c001a3c0 <Vm::x87Handler(regs*)+0x1ba>
c001a247:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a24b:	8d 50 20             	lea    edx,[eax+0x20]
c001a24e:	80 fa 0e             	cmp    dl,0xe
c001a251:	0f 87 a5 00 00 00    	ja     c001a2fc <Vm::x87Handler(regs*)+0xf6>
c001a257:	0f b6 d2             	movzx  edx,dl
c001a25a:	ff 24 95 f4 65 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9a0c]
c001a261:	8d 76 00             	lea    esi,[esi+0x0]
c001a264:	e8 de fc ff ff       	call   c0019f47 <Vm::fpuGet0()>
c001a269:	eb 09                	jmp    c001a274 <Vm::x87Handler(regs*)+0x6e>
c001a26b:	90                   	nop
c001a26c:	e8 db fc ff ff       	call   c0019f4c <Vm::fpuGet1()>
c001a271:	8d 76 00             	lea    esi,[esi+0x0]
c001a274:	57                   	push   edi
c001a275:	57                   	push   edi
c001a276:	66 90                	xchg   ax,ax
c001a278:	52                   	push   edx
c001a279:	50                   	push   eax
c001a27a:	e8 d6 fe ff ff       	call   c001a155 <Vm::fpuPush(unsigned long long)>
c001a27f:	90                   	nop
c001a280:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	90                   	nop
c001a288:	b0 01                	mov    al,0x1
c001a28a:	e9 89 0a 00 00       	jmp    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001a28f:	90                   	nop
c001a290:	83 ec 0c             	sub    esp,0xc
c001a293:	6a 00                	push   0x0
c001a295:	e8 2c fe ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a29a:	59                   	pop    ecx
c001a29b:	5e                   	pop    esi
c001a29c:	52                   	push   edx
c001a29d:	50                   	push   eax
c001a29e:	e8 b3 fd ff ff       	call   c001a056 <Vm::fpuChs(unsigned long long)>
c001a2a3:	eb 17                	jmp    c001a2bc <Vm::x87Handler(regs*)+0xb6>
c001a2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a8:	83 ec 0c             	sub    esp,0xc
c001a2ab:	6a 00                	push   0x0
c001a2ad:	e8 14 fe ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a2b2:	5f                   	pop    edi
c001a2b3:	5d                   	pop    ebp
c001a2b4:	52                   	push   edx
c001a2b5:	50                   	push   eax
c001a2b6:	e8 92 fd ff ff       	call   c001a04d <Vm::fpuAbs(unsigned long long)>
c001a2bb:	90                   	nop
c001a2bc:	83 c4 0c             	add    esp,0xc
c001a2bf:	90                   	nop
c001a2c0:	52                   	push   edx
c001a2c1:	50                   	push   eax
c001a2c2:	66 90                	xchg   ax,ax
c001a2c4:	6a 00                	push   0x0
c001a2c6:	66 90                	xchg   ax,ax
c001a2c8:	e8 3c fe ff ff       	call   c001a109 <Vm::fpuSetReg(int, unsigned long long)>
c001a2cd:	eb b1                	jmp    c001a280 <Vm::x87Handler(regs*)+0x7a>
c001a2cf:	90                   	nop
c001a2d0:	e8 b7 fc ff ff       	call   c0019f8c <Vm::fpuGetLog210()>
c001a2d5:	eb 9d                	jmp    c001a274 <Vm::x87Handler(regs*)+0x6e>
c001a2d7:	90                   	nop
c001a2d8:	e8 7f fc ff ff       	call   c0019f5c <Vm::fpuGetLog2E()>
c001a2dd:	eb 95                	jmp    c001a274 <Vm::x87Handler(regs*)+0x6e>
c001a2df:	90                   	nop
c001a2e0:	e8 6f fc ff ff       	call   c0019f54 <Vm::fpuGetPi()>
c001a2e5:	eb 8d                	jmp    c001a274 <Vm::x87Handler(regs*)+0x6e>
c001a2e7:	90                   	nop
c001a2e8:	e8 b7 fc ff ff       	call   c0019fa4 <Vm::fpuGetLog102()>
c001a2ed:	eb 85                	jmp    c001a274 <Vm::x87Handler(regs*)+0x6e>
c001a2ef:	90                   	nop
c001a2f0:	e8 7f fc ff ff       	call   c0019f74 <Vm::fpuGetLogE2()>
c001a2f5:	e9 7a ff ff ff       	jmp    c001a274 <Vm::x87Handler(regs*)+0x6e>
c001a2fa:	66 90                	xchg   ax,ax
c001a2fc:	8d 50 40             	lea    edx,[eax+0x40]
c001a2ff:	80 fa 07             	cmp    dl,0x7
c001a302:	77 18                	ja     c001a31c <Vm::x87Handler(regs*)+0x116>
c001a304:	83 ec 0c             	sub    esp,0xc
c001a307:	2d c0 00 00 00       	sub    eax,0xc0
c001a30c:	50                   	push   eax
c001a30d:	e8 b4 fd ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a312:	59                   	pop    ecx
c001a313:	5e                   	pop    esi
c001a314:	e9 5f ff ff ff       	jmp    c001a278 <Vm::x87Handler(regs*)+0x72>
c001a319:	8d 76 00             	lea    esi,[esi+0x0]
c001a31c:	8d 50 38             	lea    edx,[eax+0x38]
c001a31f:	80 fa 07             	cmp    dl,0x7
c001a322:	77 3c                	ja     c001a360 <Vm::x87Handler(regs*)+0x15a>
c001a324:	83 ec 0c             	sub    esp,0xc
c001a327:	2d c8 00 00 00       	sub    eax,0xc8
c001a32c:	50                   	push   eax
c001a32d:	e8 94 fd ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a332:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a339:	89 c6                	mov    esi,eax
c001a33b:	89 d7                	mov    edi,edx
c001a33d:	e8 84 fd ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a342:	83 c4 0c             	add    esp,0xc
c001a345:	52                   	push   edx
c001a346:	50                   	push   eax
c001a347:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a34b:	2d c8 00 00 00       	sub    eax,0xc8
c001a350:	50                   	push   eax
c001a351:	e8 b3 fd ff ff       	call   c001a109 <Vm::fpuSetReg(int, unsigned long long)>
c001a356:	83 c4 0c             	add    esp,0xc
c001a359:	57                   	push   edi
c001a35a:	56                   	push   esi
c001a35b:	e9 64 ff ff ff       	jmp    c001a2c4 <Vm::x87Handler(regs*)+0xbe>
c001a360:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a364:	84 d2                	test   dl,dl
c001a366:	75 10                	jne    c001a378 <Vm::x87Handler(regs*)+0x172>
c001a368:	83 ec 0c             	sub    esp,0xc
c001a36b:	ff 36                	push   DWORD PTR [esi]
c001a36d:	e8 8d fa ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001a372:	e9 c9 00 00 00       	jmp    c001a440 <Vm::x87Handler(regs*)+0x23a>
c001a377:	90                   	nop
c001a378:	80 fa 03             	cmp    dl,0x3
c001a37b:	75 13                	jne    c001a390 <Vm::x87Handler(regs*)+0x18a>
c001a37d:	e8 31 fe ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a382:	55                   	push   ebp
c001a383:	55                   	push   ebp
c001a384:	52                   	push   edx
c001a385:	50                   	push   eax
c001a386:	e8 0d fa ff ff       	call   c0019d98 <Vm::fpuInternalTo32(unsigned long long)>
c001a38b:	e9 90 00 00 00       	jmp    c001a420 <Vm::x87Handler(regs*)+0x21a>
c001a390:	80 fa 05             	cmp    dl,0x5
c001a393:	75 0f                	jne    c001a3a4 <Vm::x87Handler(regs*)+0x19e>
c001a395:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a398:	66 a3 22 98 02 c0    	mov    ds:0xc0029822,ax
c001a39e:	e9 ed 00 00 00       	jmp    c001a490 <Vm::x87Handler(regs*)+0x28a>
c001a3a3:	90                   	nop
c001a3a4:	31 c0                	xor    eax,eax
c001a3a6:	80 fa 07             	cmp    dl,0x7
c001a3a9:	0f 85 69 09 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001a3af:	66 a1 22 98 02 c0    	mov    ax,ds:0xc0029822
c001a3b5:	66 89 06             	mov    WORD PTR [esi],ax
c001a3b8:	e9 d3 00 00 00       	jmp    c001a490 <Vm::x87Handler(regs*)+0x28a>
c001a3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c0:	80 fa d8             	cmp    dl,0xd8
c001a3c3:	0f 84 d3 00 00 00    	je     c001a49c <Vm::x87Handler(regs*)+0x296>
c001a3c9:	80 fa dc             	cmp    dl,0xdc
c001a3cc:	0f 84 2a 02 00 00    	je     c001a5fc <Vm::x87Handler(regs*)+0x3f6>
c001a3d2:	80 fa de             	cmp    dl,0xde
c001a3d5:	0f 84 f1 02 00 00    	je     c001a6cc <Vm::x87Handler(regs*)+0x4c6>
c001a3db:	80 fa dd             	cmp    dl,0xdd
c001a3de:	0f 84 94 04 00 00    	je     c001a878 <Vm::x87Handler(regs*)+0x672>
c001a3e4:	80 fa da             	cmp    dl,0xda
c001a3e7:	0f 84 5f 05 00 00    	je     c001a94c <Vm::x87Handler(regs*)+0x746>
c001a3ed:	80 fa df             	cmp    dl,0xdf
c001a3f0:	0f 84 aa 05 00 00    	je     c001a9a0 <Vm::x87Handler(regs*)+0x79a>
c001a3f6:	31 c0                	xor    eax,eax
c001a3f8:	80 fa db             	cmp    dl,0xdb
c001a3fb:	0f 85 17 09 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001a401:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a405:	80 fa 03             	cmp    dl,0x3
c001a408:	0f 85 c2 06 00 00    	jne    c001aad0 <Vm::x87Handler(regs*)+0x8ca>
c001a40e:	e8 a0 fd ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a413:	55                   	push   ebp
c001a414:	55                   	push   ebp
c001a415:	8d 76 00             	lea    esi,[esi+0x0]
c001a418:	52                   	push   edx
c001a419:	50                   	push   eax
c001a41a:	e8 2e fa ff ff       	call   c0019e4d <Vm::fpuFloatToLong(unsigned long long)>
c001a41f:	90                   	nop
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	89 06                	mov    DWORD PTR [esi],eax
c001a425:	eb 69                	jmp    c001a490 <Vm::x87Handler(regs*)+0x28a>
c001a427:	90                   	nop
c001a428:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a42c:	84 d2                	test   dl,dl
c001a42e:	0f 85 2c 06 00 00    	jne    c001aa60 <Vm::x87Handler(regs*)+0x85a>
c001a434:	57                   	push   edi
c001a435:	57                   	push   edi
c001a436:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a439:	ff 36                	push   DWORD PTR [esi]
c001a43b:	e8 04 fa ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001a440:	5e                   	pop    esi
c001a441:	5f                   	pop    edi
c001a442:	52                   	push   edx
c001a443:	50                   	push   eax
c001a444:	e8 0c fd ff ff       	call   c001a155 <Vm::fpuPush(unsigned long long)>
c001a449:	8d 76 00             	lea    esi,[esi+0x0]
c001a44c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a450:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a453:	e9 2c fe ff ff       	jmp    c001a284 <Vm::x87Handler(regs*)+0x7e>
c001a458:	80 fa 03             	cmp    dl,0x3
c001a45b:	0f 85 2b 07 00 00    	jne    c001ab8c <Vm::x87Handler(regs*)+0x986>
c001a461:	57                   	push   edi
c001a462:	57                   	push   edi
c001a463:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a466:	ff 36                	push   DWORD PTR [esi]
c001a468:	e8 d7 f9 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001a46d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a474:	89 c6                	mov    esi,eax
c001a476:	89 d7                	mov    edi,edx
c001a478:	e8 49 fc ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a47d:	57                   	push   edi
c001a47e:	56                   	push   esi
c001a47f:	52                   	push   edx
c001a480:	50                   	push   eax
c001a481:	e8 60 fb ff ff       	call   c0019fe6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a486:	83 c4 20             	add    esp,0x20
c001a489:	e8 25 fd ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a48e:	66 90                	xchg   ax,ax
c001a490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a494:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a497:	e9 ec fd ff ff       	jmp    c001a288 <Vm::x87Handler(regs*)+0x82>
c001a49c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4a0:	8d 50 40             	lea    edx,[eax+0x40]
c001a4a3:	80 fa 07             	cmp    dl,0x7
c001a4a6:	77 2c                	ja     c001a4d4 <Vm::x87Handler(regs*)+0x2ce>
c001a4a8:	83 ec 0c             	sub    esp,0xc
c001a4ab:	2d c0 00 00 00       	sub    eax,0xc0
c001a4b0:	50                   	push   eax
c001a4b1:	e8 10 fc ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a4b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4bd:	89 c6                	mov    esi,eax
c001a4bf:	89 d7                	mov    edi,edx
c001a4c1:	e8 00 fc ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a4c6:	57                   	push   edi
c001a4c7:	56                   	push   esi
c001a4c8:	52                   	push   edx
c001a4c9:	50                   	push   eax
c001a4ca:	e8 6d fb ff ff       	call   c001a03c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a4cf:	eb 33                	jmp    c001a504 <Vm::x87Handler(regs*)+0x2fe>
c001a4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d4:	8d 50 38             	lea    edx,[eax+0x38]
c001a4d7:	80 fa 07             	cmp    dl,0x7
c001a4da:	77 30                	ja     c001a50c <Vm::x87Handler(regs*)+0x306>
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	2d c8 00 00 00       	sub    eax,0xc8
c001a4e4:	50                   	push   eax
c001a4e5:	e8 dc fb ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a4ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4f1:	89 c6                	mov    esi,eax
c001a4f3:	89 d7                	mov    edi,edx
c001a4f5:	e8 cc fb ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a4fa:	57                   	push   edi
c001a4fb:	56                   	push   esi
c001a4fc:	52                   	push   edx
c001a4fd:	50                   	push   eax
c001a4fe:	e8 72 fb ff ff       	call   c001a075 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a503:	90                   	nop
c001a504:	83 c4 1c             	add    esp,0x1c
c001a507:	e9 b4 fd ff ff       	jmp    c001a2c0 <Vm::x87Handler(regs*)+0xba>
c001a50c:	8d 50 30             	lea    edx,[eax+0x30]
c001a50f:	80 fa 07             	cmp    dl,0x7
c001a512:	77 10                	ja     c001a524 <Vm::x87Handler(regs*)+0x31e>
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	2d d0 00 00 00       	sub    eax,0xd0
c001a51c:	e9 c3 03 00 00       	jmp    c001a8e4 <Vm::x87Handler(regs*)+0x6de>
c001a521:	8d 76 00             	lea    esi,[esi+0x0]
c001a524:	8d 50 28             	lea    edx,[eax+0x28]
c001a527:	80 fa 07             	cmp    dl,0x7
c001a52a:	77 10                	ja     c001a53c <Vm::x87Handler(regs*)+0x336>
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	2d d8 00 00 00       	sub    eax,0xd8
c001a534:	e9 e7 03 00 00       	jmp    c001a920 <Vm::x87Handler(regs*)+0x71a>
c001a539:	8d 76 00             	lea    esi,[esi+0x0]
c001a53c:	8d 50 20             	lea    edx,[eax+0x20]
c001a53f:	80 fa 07             	cmp    dl,0x7
c001a542:	77 1c                	ja     c001a560 <Vm::x87Handler(regs*)+0x35a>
c001a544:	83 ec 0c             	sub    esp,0xc
c001a547:	2d e0 00 00 00       	sub    eax,0xe0
c001a54c:	50                   	push   eax
c001a54d:	e8 74 fb ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a552:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a559:	89 c6                	mov    esi,eax
c001a55b:	89 d7                	mov    edi,edx
c001a55d:	eb 25                	jmp    c001a584 <Vm::x87Handler(regs*)+0x37e>
c001a55f:	90                   	nop
c001a560:	8d 50 18             	lea    edx,[eax+0x18]
c001a563:	80 fa 07             	cmp    dl,0x7
c001a566:	77 30                	ja     c001a598 <Vm::x87Handler(regs*)+0x392>
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	6a 00                	push   0x0
c001a56d:	e8 54 fb ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a572:	89 c6                	mov    esi,eax
c001a574:	89 d7                	mov    edi,edx
c001a576:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a57a:	2d e8 00 00 00       	sub    eax,0xe8
c001a57f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a582:	66 90                	xchg   ax,ax
c001a584:	e8 3d fb ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a589:	57                   	push   edi
c001a58a:	56                   	push   esi
c001a58b:	52                   	push   edx
c001a58c:	50                   	push   eax
c001a58d:	e8 d4 fa ff ff       	call   c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a592:	e9 6d ff ff ff       	jmp    c001a504 <Vm::x87Handler(regs*)+0x2fe>
c001a597:	90                   	nop
c001a598:	8d 50 10             	lea    edx,[eax+0x10]
c001a59b:	80 fa 07             	cmp    dl,0x7
c001a59e:	77 1c                	ja     c001a5bc <Vm::x87Handler(regs*)+0x3b6>
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	2d f0 00 00 00       	sub    eax,0xf0
c001a5a8:	50                   	push   eax
c001a5a9:	e8 18 fb ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a5ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5b5:	89 c6                	mov    esi,eax
c001a5b7:	89 d7                	mov    edi,edx
c001a5b9:	eb 25                	jmp    c001a5e0 <Vm::x87Handler(regs*)+0x3da>
c001a5bb:	90                   	nop
c001a5bc:	3c f7                	cmp    al,0xf7
c001a5be:	0f 86 00 04 00 00    	jbe    c001a9c4 <Vm::x87Handler(regs*)+0x7be>
c001a5c4:	83 ec 0c             	sub    esp,0xc
c001a5c7:	6a 00                	push   0x0
c001a5c9:	e8 f8 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a5ce:	89 c6                	mov    esi,eax
c001a5d0:	89 d7                	mov    edi,edx
c001a5d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5d6:	2d f8 00 00 00       	sub    eax,0xf8
c001a5db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5de:	66 90                	xchg   ax,ax
c001a5e0:	e8 e1 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a5e5:	57                   	push   edi
c001a5e6:	56                   	push   esi
c001a5e7:	52                   	push   edx
c001a5e8:	50                   	push   eax
c001a5e9:	e8 a6 fa ff ff       	call   c001a094 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a5ee:	83 c4 1c             	add    esp,0x1c
c001a5f1:	52                   	push   edx
c001a5f2:	50                   	push   eax
c001a5f3:	6a 00                	push   0x0
c001a5f5:	e9 6a 02 00 00       	jmp    c001a864 <Vm::x87Handler(regs*)+0x65e>
c001a5fa:	66 90                	xchg   ax,ax
c001a5fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a600:	8d 50 40             	lea    edx,[eax+0x40]
c001a603:	80 fa 07             	cmp    dl,0x7
c001a606:	77 38                	ja     c001a640 <Vm::x87Handler(regs*)+0x43a>
c001a608:	83 ec 0c             	sub    esp,0xc
c001a60b:	2d c0 00 00 00       	sub    eax,0xc0
c001a610:	50                   	push   eax
c001a611:	e8 b0 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a616:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a61d:	89 c6                	mov    esi,eax
c001a61f:	89 d7                	mov    edi,edx
c001a621:	e8 a0 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a626:	57                   	push   edi
c001a627:	56                   	push   esi
c001a628:	52                   	push   edx
c001a629:	50                   	push   eax
c001a62a:	e8 0d fa ff ff       	call   c001a03c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a62f:	83 c4 1c             	add    esp,0x1c
c001a632:	52                   	push   edx
c001a633:	50                   	push   eax
c001a634:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a638:	2d c0 00 00 00       	sub    eax,0xc0
c001a63d:	eb 41                	jmp    c001a680 <Vm::x87Handler(regs*)+0x47a>
c001a63f:	90                   	nop
c001a640:	8d 50 38             	lea    edx,[eax+0x38]
c001a643:	80 fa 07             	cmp    dl,0x7
c001a646:	77 40                	ja     c001a688 <Vm::x87Handler(regs*)+0x482>
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	2d c8 00 00 00       	sub    eax,0xc8
c001a650:	50                   	push   eax
c001a651:	e8 70 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a656:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a65d:	89 c6                	mov    esi,eax
c001a65f:	89 d7                	mov    edi,edx
c001a661:	e8 60 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a666:	57                   	push   edi
c001a667:	56                   	push   esi
c001a668:	52                   	push   edx
c001a669:	50                   	push   eax
c001a66a:	e8 06 fa ff ff       	call   c001a075 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a66f:	83 c4 1c             	add    esp,0x1c
c001a672:	52                   	push   edx
c001a673:	50                   	push   eax
c001a674:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a678:	2d c8 00 00 00       	sub    eax,0xc8
c001a67d:	8d 76 00             	lea    esi,[esi+0x0]
c001a680:	50                   	push   eax
c001a681:	e9 42 fc ff ff       	jmp    c001a2c8 <Vm::x87Handler(regs*)+0xc2>
c001a686:	66 90                	xchg   ax,ax
c001a688:	83 c0 18             	add    eax,0x18
c001a68b:	3c 07                	cmp    al,0x7
c001a68d:	0f 87 6d 04 00 00    	ja     c001ab00 <Vm::x87Handler(regs*)+0x8fa>
c001a693:	83 ec 0c             	sub    esp,0xc
c001a696:	6a 00                	push   0x0
c001a698:	e8 29 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a69d:	89 c6                	mov    esi,eax
c001a69f:	89 d7                	mov    edi,edx
c001a6a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6a5:	2d e8 00 00 00       	sub    eax,0xe8
c001a6aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6ad:	e8 14 fa ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a6b2:	57                   	push   edi
c001a6b3:	56                   	push   esi
c001a6b4:	52                   	push   edx
c001a6b5:	50                   	push   eax
c001a6b6:	e8 ab f9 ff ff       	call   c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a6bb:	83 c4 1c             	add    esp,0x1c
c001a6be:	52                   	push   edx
c001a6bf:	50                   	push   eax
c001a6c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6c4:	2d e8 00 00 00       	sub    eax,0xe8
c001a6c9:	eb b5                	jmp    c001a680 <Vm::x87Handler(regs*)+0x47a>
c001a6cb:	90                   	nop
c001a6cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6d0:	8d 50 40             	lea    edx,[eax+0x40]
c001a6d3:	80 fa 07             	cmp    dl,0x7
c001a6d6:	77 3c                	ja     c001a714 <Vm::x87Handler(regs*)+0x50e>
c001a6d8:	83 ec 0c             	sub    esp,0xc
c001a6db:	2d c0 00 00 00       	sub    eax,0xc0
c001a6e0:	50                   	push   eax
c001a6e1:	e8 e0 f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a6e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a6ed:	89 c6                	mov    esi,eax
c001a6ef:	89 d7                	mov    edi,edx
c001a6f1:	e8 d0 f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a6f6:	57                   	push   edi
c001a6f7:	56                   	push   esi
c001a6f8:	52                   	push   edx
c001a6f9:	50                   	push   eax
c001a6fa:	e8 3d f9 ff ff       	call   c001a03c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a6ff:	83 c4 1c             	add    esp,0x1c
c001a702:	52                   	push   edx
c001a703:	50                   	push   eax
c001a704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a708:	2d c0 00 00 00       	sub    eax,0xc0
c001a70d:	e9 b2 01 00 00       	jmp    c001a8c4 <Vm::x87Handler(regs*)+0x6be>
c001a712:	66 90                	xchg   ax,ax
c001a714:	8d 50 20             	lea    edx,[eax+0x20]
c001a717:	80 fa 07             	cmp    dl,0x7
c001a71a:	77 3c                	ja     c001a758 <Vm::x87Handler(regs*)+0x552>
c001a71c:	83 ec 0c             	sub    esp,0xc
c001a71f:	2d e0 00 00 00       	sub    eax,0xe0
c001a724:	50                   	push   eax
c001a725:	e8 9c f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a72a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a731:	89 c6                	mov    esi,eax
c001a733:	89 d7                	mov    edi,edx
c001a735:	e8 8c f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a73a:	57                   	push   edi
c001a73b:	56                   	push   esi
c001a73c:	52                   	push   edx
c001a73d:	50                   	push   eax
c001a73e:	e8 23 f9 ff ff       	call   c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a743:	83 c4 1c             	add    esp,0x1c
c001a746:	52                   	push   edx
c001a747:	50                   	push   eax
c001a748:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a74c:	2d e0 00 00 00       	sub    eax,0xe0
c001a751:	e9 6e 01 00 00       	jmp    c001a8c4 <Vm::x87Handler(regs*)+0x6be>
c001a756:	66 90                	xchg   ax,ax
c001a758:	8d 50 18             	lea    edx,[eax+0x18]
c001a75b:	80 fa 07             	cmp    dl,0x7
c001a75e:	77 3c                	ja     c001a79c <Vm::x87Handler(regs*)+0x596>
c001a760:	83 ec 0c             	sub    esp,0xc
c001a763:	6a 00                	push   0x0
c001a765:	e8 5c f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a76a:	89 c6                	mov    esi,eax
c001a76c:	89 d7                	mov    edi,edx
c001a76e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a772:	2d e8 00 00 00       	sub    eax,0xe8
c001a777:	89 04 24             	mov    DWORD PTR [esp],eax
c001a77a:	e8 47 f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a77f:	57                   	push   edi
c001a780:	56                   	push   esi
c001a781:	52                   	push   edx
c001a782:	50                   	push   eax
c001a783:	e8 de f8 ff ff       	call   c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a788:	83 c4 1c             	add    esp,0x1c
c001a78b:	52                   	push   edx
c001a78c:	50                   	push   eax
c001a78d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a791:	2d e8 00 00 00       	sub    eax,0xe8
c001a796:	e9 29 01 00 00       	jmp    c001a8c4 <Vm::x87Handler(regs*)+0x6be>
c001a79b:	90                   	nop
c001a79c:	8d 50 38             	lea    edx,[eax+0x38]
c001a79f:	80 fa 07             	cmp    dl,0x7
c001a7a2:	77 3c                	ja     c001a7e0 <Vm::x87Handler(regs*)+0x5da>
c001a7a4:	83 ec 0c             	sub    esp,0xc
c001a7a7:	2d c8 00 00 00       	sub    eax,0xc8
c001a7ac:	50                   	push   eax
c001a7ad:	e8 14 f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a7b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7b9:	89 c6                	mov    esi,eax
c001a7bb:	89 d7                	mov    edi,edx
c001a7bd:	e8 04 f9 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a7c2:	57                   	push   edi
c001a7c3:	56                   	push   esi
c001a7c4:	52                   	push   edx
c001a7c5:	50                   	push   eax
c001a7c6:	e8 aa f8 ff ff       	call   c001a075 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a7cb:	83 c4 1c             	add    esp,0x1c
c001a7ce:	52                   	push   edx
c001a7cf:	50                   	push   eax
c001a7d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7d4:	2d c8 00 00 00       	sub    eax,0xc8
c001a7d9:	e9 82 00 00 00       	jmp    c001a860 <Vm::x87Handler(regs*)+0x65a>
c001a7de:	66 90                	xchg   ax,ax
c001a7e0:	3c f7                	cmp    al,0xf7
c001a7e2:	76 38                	jbe    c001a81c <Vm::x87Handler(regs*)+0x616>
c001a7e4:	83 ec 0c             	sub    esp,0xc
c001a7e7:	6a 00                	push   0x0
c001a7e9:	e8 d8 f8 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a7ee:	89 c6                	mov    esi,eax
c001a7f0:	89 d7                	mov    edi,edx
c001a7f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7f6:	2d f8 00 00 00       	sub    eax,0xf8
c001a7fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7fe:	e8 c3 f8 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a803:	57                   	push   edi
c001a804:	56                   	push   esi
c001a805:	52                   	push   edx
c001a806:	50                   	push   eax
c001a807:	e8 88 f8 ff ff       	call   c001a094 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a80c:	83 c4 1c             	add    esp,0x1c
c001a80f:	52                   	push   edx
c001a810:	50                   	push   eax
c001a811:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a815:	2d f8 00 00 00       	sub    eax,0xf8
c001a81a:	eb 44                	jmp    c001a860 <Vm::x87Handler(regs*)+0x65a>
c001a81c:	8d 50 10             	lea    edx,[eax+0x10]
c001a81f:	80 fa 07             	cmp    dl,0x7
c001a822:	0f 87 6c 01 00 00    	ja     c001a994 <Vm::x87Handler(regs*)+0x78e>
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	2d f0 00 00 00       	sub    eax,0xf0
c001a830:	50                   	push   eax
c001a831:	e8 90 f8 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a836:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a83d:	89 c6                	mov    esi,eax
c001a83f:	89 d7                	mov    edi,edx
c001a841:	e8 80 f8 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a846:	57                   	push   edi
c001a847:	56                   	push   esi
c001a848:	52                   	push   edx
c001a849:	50                   	push   eax
c001a84a:	e8 45 f8 ff ff       	call   c001a094 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a84f:	83 c4 1c             	add    esp,0x1c
c001a852:	52                   	push   edx
c001a853:	50                   	push   eax
c001a854:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a858:	2d f0 00 00 00       	sub    eax,0xf0
c001a85d:	8d 76 00             	lea    esi,[esi+0x0]
c001a860:	50                   	push   eax
c001a861:	8d 76 00             	lea    esi,[esi+0x0]
c001a864:	e8 a0 f8 ff ff       	call   c001a109 <Vm::fpuSetReg(int, unsigned long long)>
c001a869:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a86d:	e8 41 f9 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a872:	e9 0d fa ff ff       	jmp    c001a284 <Vm::x87Handler(regs*)+0x7e>
c001a877:	90                   	nop
c001a878:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a87c:	8d 50 30             	lea    edx,[eax+0x30]
c001a87f:	80 fa 07             	cmp    dl,0x7
c001a882:	77 20                	ja     c001a8a4 <Vm::x87Handler(regs*)+0x69e>
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	6a 00                	push   0x0
c001a889:	e8 38 f8 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a88e:	83 c4 0c             	add    esp,0xc
c001a891:	52                   	push   edx
c001a892:	50                   	push   eax
c001a893:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a897:	2d d0 00 00 00       	sub    eax,0xd0
c001a89c:	e9 df fd ff ff       	jmp    c001a680 <Vm::x87Handler(regs*)+0x47a>
c001a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a4:	8d 50 28             	lea    edx,[eax+0x28]
c001a8a7:	80 fa 07             	cmp    dl,0x7
c001a8aa:	77 28                	ja     c001a8d4 <Vm::x87Handler(regs*)+0x6ce>
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	6a 00                	push   0x0
c001a8b1:	e8 10 f8 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a8b6:	83 c4 0c             	add    esp,0xc
c001a8b9:	52                   	push   edx
c001a8ba:	50                   	push   eax
c001a8bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a8bf:	2d d8 00 00 00       	sub    eax,0xd8
c001a8c4:	50                   	push   eax
c001a8c5:	e8 3f f8 ff ff       	call   c001a109 <Vm::fpuSetReg(int, unsigned long long)>
c001a8ca:	e8 e4 f8 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a8cf:	e9 ac f9 ff ff       	jmp    c001a280 <Vm::x87Handler(regs*)+0x7a>
c001a8d4:	8d 50 20             	lea    edx,[eax+0x20]
c001a8d7:	80 fa 07             	cmp    dl,0x7
c001a8da:	77 30                	ja     c001a90c <Vm::x87Handler(regs*)+0x706>
c001a8dc:	83 ec 0c             	sub    esp,0xc
c001a8df:	2d e0 00 00 00       	sub    eax,0xe0
c001a8e4:	50                   	push   eax
c001a8e5:	e8 dc f7 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a8ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8f1:	89 c6                	mov    esi,eax
c001a8f3:	89 d7                	mov    edi,edx
c001a8f5:	e8 cc f7 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a8fa:	57                   	push   edi
c001a8fb:	56                   	push   esi
c001a8fc:	52                   	push   edx
c001a8fd:	50                   	push   eax
c001a8fe:	e8 e3 f6 ff ff       	call   c0019fe6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a903:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a907:	e9 78 02 00 00       	jmp    c001ab84 <Vm::x87Handler(regs*)+0x97e>
c001a90c:	8d 50 18             	lea    edx,[eax+0x18]
c001a90f:	80 fa 07             	cmp    dl,0x7
c001a912:	0f 87 10 fb ff ff    	ja     c001a428 <Vm::x87Handler(regs*)+0x222>
c001a918:	83 ec 0c             	sub    esp,0xc
c001a91b:	2d e8 00 00 00       	sub    eax,0xe8
c001a920:	50                   	push   eax
c001a921:	e8 a0 f7 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a926:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a92d:	89 c6                	mov    esi,eax
c001a92f:	89 d7                	mov    edi,edx
c001a931:	e8 90 f7 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a936:	57                   	push   edi
c001a937:	56                   	push   esi
c001a938:	52                   	push   edx
c001a939:	50                   	push   eax
c001a93a:	e8 a7 f6 ff ff       	call   c0019fe6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a93f:	83 c4 20             	add    esp,0x20
c001a942:	e8 6c f8 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a947:	eb 6f                	jmp    c001a9b8 <Vm::x87Handler(regs*)+0x7b2>
c001a949:	8d 76 00             	lea    esi,[esi+0x0]
c001a94c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a950:	0f 85 22 01 00 00    	jne    c001aa78 <Vm::x87Handler(regs*)+0x872>
c001a956:	66 90                	xchg   ax,ax
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	6a 01                	push   0x1
c001a95d:	e8 64 f7 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a962:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a969:	89 c6                	mov    esi,eax
c001a96b:	89 d7                	mov    edi,edx
c001a96d:	e8 54 f7 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001a972:	57                   	push   edi
c001a973:	56                   	push   esi
c001a974:	52                   	push   edx
c001a975:	50                   	push   eax
c001a976:	e8 6b f6 ff ff       	call   c0019fe6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a97b:	83 c4 20             	add    esp,0x20
c001a97e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a982:	e8 2c f8 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a987:	e8 27 f8 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001a98c:	e9 f7 f8 ff ff       	jmp    c001a288 <Vm::x87Handler(regs*)+0x82>
c001a991:	8d 76 00             	lea    esi,[esi+0x0]
c001a994:	3c d9                	cmp    al,0xd9
c001a996:	0f 85 e8 02 00 00    	jne    c001ac84 <Vm::x87Handler(regs*)+0xa7e>
c001a99c:	eb ba                	jmp    c001a958 <Vm::x87Handler(regs*)+0x752>
c001a99e:	66 90                	xchg   ax,ax
c001a9a0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a9a4:	0f 85 2a 03 00 00    	jne    c001acd4 <Vm::x87Handler(regs*)+0xace>
c001a9aa:	0f b7 05 20 98 02 c0 	movzx  eax,WORD PTR ds:0xc0029820
c001a9b1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a9bc:	e9 c7 f8 ff ff       	jmp    c001a288 <Vm::x87Handler(regs*)+0x82>
c001a9c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9c8:	84 d2                	test   dl,dl
c001a9ca:	75 10                	jne    c001a9dc <Vm::x87Handler(regs*)+0x7d6>
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	ff 36                	push   DWORD PTR [esi]
c001a9d1:	e8 29 f4 ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001a9d6:	e9 39 01 00 00       	jmp    c001ab14 <Vm::x87Handler(regs*)+0x90e>
c001a9db:	90                   	nop
c001a9dc:	80 fa 01             	cmp    dl,0x1
c001a9df:	75 0f                	jne    c001a9f0 <Vm::x87Handler(regs*)+0x7ea>
c001a9e1:	83 ec 0c             	sub    esp,0xc
c001a9e4:	ff 36                	push   DWORD PTR [esi]
c001a9e6:	e8 14 f4 ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001a9eb:	e9 b4 02 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0xa9e>
c001a9f0:	80 fa 04             	cmp    dl,0x4
c001a9f3:	75 0f                	jne    c001aa04 <Vm::x87Handler(regs*)+0x7fe>
c001a9f5:	83 ec 0c             	sub    esp,0xc
c001a9f8:	ff 36                	push   DWORD PTR [esi]
c001a9fa:	e8 00 f4 ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001a9ff:	e9 9c 01 00 00       	jmp    c001aba0 <Vm::x87Handler(regs*)+0x99a>
c001aa04:	80 fa 05             	cmp    dl,0x5
c001aa07:	75 1b                	jne    c001aa24 <Vm::x87Handler(regs*)+0x81e>
c001aa09:	83 ec 0c             	sub    esp,0xc
c001aa0c:	6a 00                	push   0x0
c001aa0e:	e8 b3 f6 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001aa13:	89 c7                	mov    edi,eax
c001aa15:	89 d5                	mov    ebp,edx
c001aa17:	58                   	pop    eax
c001aa18:	ff 36                	push   DWORD PTR [esi]
c001aa1a:	e8 e0 f3 ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001aa1f:	e9 bc 01 00 00       	jmp    c001abe0 <Vm::x87Handler(regs*)+0x9da>
c001aa24:	80 fa 06             	cmp    dl,0x6
c001aa27:	75 0f                	jne    c001aa38 <Vm::x87Handler(regs*)+0x832>
c001aa29:	83 ec 0c             	sub    esp,0xc
c001aa2c:	ff 36                	push   DWORD PTR [esi]
c001aa2e:	e8 cc f3 ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001aa33:	e9 cc 01 00 00       	jmp    c001ac04 <Vm::x87Handler(regs*)+0x9fe>
c001aa38:	31 c0                	xor    eax,eax
c001aa3a:	80 fa 07             	cmp    dl,0x7
c001aa3d:	0f 85 d5 02 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001aa43:	83 ec 0c             	sub    esp,0xc
c001aa46:	6a 00                	push   0x0
c001aa48:	e8 79 f6 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001aa4d:	89 c7                	mov    edi,eax
c001aa4f:	89 d5                	mov    ebp,edx
c001aa51:	58                   	pop    eax
c001aa52:	ff 36                	push   DWORD PTR [esi]
c001aa54:	e8 a6 f3 ff ff       	call   c0019dff <Vm::fpu32ToInternal(unsigned int)>
c001aa59:	e9 ee 01 00 00       	jmp    c001ac4c <Vm::x87Handler(regs*)+0xa46>
c001aa5e:	66 90                	xchg   ax,ax
c001aa60:	80 fa 03             	cmp    dl,0x3
c001aa63:	0f 85 f7 01 00 00    	jne    c001ac60 <Vm::x87Handler(regs*)+0xa5a>
c001aa69:	e8 45 f7 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001aa6e:	51                   	push   ecx
c001aa6f:	51                   	push   ecx
c001aa70:	e9 03 02 00 00       	jmp    c001ac78 <Vm::x87Handler(regs*)+0xa72>
c001aa75:	8d 76 00             	lea    esi,[esi+0x0]
c001aa78:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa7c:	80 fa 01             	cmp    dl,0x1
c001aa7f:	75 0b                	jne    c001aa8c <Vm::x87Handler(regs*)+0x886>
c001aa81:	57                   	push   edi
c001aa82:	57                   	push   edi
c001aa83:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa85:	e9 0e 02 00 00       	jmp    c001ac98 <Vm::x87Handler(regs*)+0xa92>
c001aa8a:	66 90                	xchg   ax,ax
c001aa8c:	80 fa 04             	cmp    dl,0x4
c001aa8f:	75 13                	jne    c001aaa4 <Vm::x87Handler(regs*)+0x89e>
c001aa91:	31 d2                	xor    edx,edx
c001aa93:	51                   	push   ecx
c001aa94:	51                   	push   ecx
c001aa95:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa97:	52                   	push   edx
c001aa98:	50                   	push   eax
c001aa99:	e8 4a f4 ff ff       	call   c0019ee8 <Vm::fpuLongToFloat(long long)>
c001aa9e:	e9 fd 00 00 00       	jmp    c001aba0 <Vm::x87Handler(regs*)+0x99a>
c001aaa3:	90                   	nop
c001aaa4:	31 c0                	xor    eax,eax
c001aaa6:	80 fa 07             	cmp    dl,0x7
c001aaa9:	0f 85 69 02 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001aaaf:	83 ec 0c             	sub    esp,0xc
c001aab2:	6a 00                	push   0x0
c001aab4:	e8 0d f6 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001aab9:	89 c7                	mov    edi,eax
c001aabb:	89 d5                	mov    ebp,edx
c001aabd:	58                   	pop    eax
c001aabe:	8b 06                	mov    eax,DWORD PTR [esi]
c001aac0:	5a                   	pop    edx
c001aac1:	31 d2                	xor    edx,edx
c001aac3:	52                   	push   edx
c001aac4:	50                   	push   eax
c001aac5:	e8 1e f4 ff ff       	call   c0019ee8 <Vm::fpuLongToFloat(long long)>
c001aaca:	e9 7d 01 00 00       	jmp    c001ac4c <Vm::x87Handler(regs*)+0xa46>
c001aacf:	90                   	nop
c001aad0:	84 d2                	test   dl,dl
c001aad2:	75 10                	jne    c001aae4 <Vm::x87Handler(regs*)+0x8de>
c001aad4:	31 d2                	xor    edx,edx
c001aad6:	55                   	push   ebp
c001aad7:	55                   	push   ebp
c001aad8:	8b 06                	mov    eax,DWORD PTR [esi]
c001aada:	52                   	push   edx
c001aadb:	50                   	push   eax
c001aadc:	e9 03 02 00 00       	jmp    c001ace4 <Vm::x87Handler(regs*)+0xade>
c001aae1:	8d 76 00             	lea    esi,[esi+0x0]
c001aae4:	31 c0                	xor    eax,eax
c001aae6:	80 fa 02             	cmp    dl,0x2
c001aae9:	0f 85 29 02 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001aaef:	83 ec 0c             	sub    esp,0xc
c001aaf2:	6a 00                	push   0x0
c001aaf4:	e8 cd f5 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001aaf9:	59                   	pop    ecx
c001aafa:	5f                   	pop    edi
c001aafb:	e9 18 f9 ff ff       	jmp    c001a418 <Vm::x87Handler(regs*)+0x212>
c001ab00:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ab04:	84 d2                	test   dl,dl
c001ab06:	75 2c                	jne    c001ab34 <Vm::x87Handler(regs*)+0x92e>
c001ab08:	50                   	push   eax
c001ab09:	50                   	push   eax
c001ab0a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab0d:	ff 36                	push   DWORD PTR [esi]
c001ab0f:	e8 30 f3 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001ab14:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab1b:	89 c6                	mov    esi,eax
c001ab1d:	89 d7                	mov    edi,edx
c001ab1f:	e8 a2 f5 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001ab24:	57                   	push   edi
c001ab25:	56                   	push   esi
c001ab26:	52                   	push   edx
c001ab27:	50                   	push   eax
c001ab28:	e8 0f f5 ff ff       	call   c001a03c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ab2d:	e9 8e 01 00 00       	jmp    c001acc0 <Vm::x87Handler(regs*)+0xaba>
c001ab32:	66 90                	xchg   ax,ax
c001ab34:	80 fa 01             	cmp    dl,0x1
c001ab37:	75 13                	jne    c001ab4c <Vm::x87Handler(regs*)+0x946>
c001ab39:	50                   	push   eax
c001ab3a:	50                   	push   eax
c001ab3b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab3e:	ff 36                	push   DWORD PTR [esi]
c001ab40:	e8 ff f2 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001ab45:	e9 5a 01 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0xa9e>
c001ab4a:	66 90                	xchg   ax,ax
c001ab4c:	80 fa 02             	cmp    dl,0x2
c001ab4f:	0f 85 03 f9 ff ff    	jne    c001a458 <Vm::x87Handler(regs*)+0x252>
c001ab55:	55                   	push   ebp
c001ab56:	55                   	push   ebp
c001ab57:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab5a:	ff 36                	push   DWORD PTR [esi]
c001ab5c:	e8 e3 f2 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001ab61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab68:	89 c6                	mov    esi,eax
c001ab6a:	89 d7                	mov    edi,edx
c001ab6c:	e8 55 f5 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001ab71:	57                   	push   edi
c001ab72:	56                   	push   esi
c001ab73:	52                   	push   edx
c001ab74:	50                   	push   eax
c001ab75:	e8 6c f4 ff ff       	call   c0019fe6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ab7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab7e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ab81:	8d 76 00             	lea    esi,[esi+0x0]
c001ab84:	83 c4 20             	add    esp,0x20
c001ab87:	e9 fc f6 ff ff       	jmp    c001a288 <Vm::x87Handler(regs*)+0x82>
c001ab8c:	80 fa 04             	cmp    dl,0x4
c001ab8f:	75 2f                	jne    c001abc0 <Vm::x87Handler(regs*)+0x9ba>
c001ab91:	51                   	push   ecx
c001ab92:	51                   	push   ecx
c001ab93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab96:	ff 36                	push   DWORD PTR [esi]
c001ab98:	e8 a7 f2 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001ab9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aba0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aba7:	89 c6                	mov    esi,eax
c001aba9:	89 d7                	mov    edi,edx
c001abab:	e8 16 f5 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001abb0:	57                   	push   edi
c001abb1:	56                   	push   esi
c001abb2:	52                   	push   edx
c001abb3:	50                   	push   eax
c001abb4:	e8 ad f4 ff ff       	call   c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001abb9:	e9 02 01 00 00       	jmp    c001acc0 <Vm::x87Handler(regs*)+0xaba>
c001abbe:	66 90                	xchg   ax,ax
c001abc0:	80 fa 05             	cmp    dl,0x5
c001abc3:	75 2b                	jne    c001abf0 <Vm::x87Handler(regs*)+0x9ea>
c001abc5:	83 ec 0c             	sub    esp,0xc
c001abc8:	6a 00                	push   0x0
c001abca:	e8 f7 f4 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001abcf:	89 c7                	mov    edi,eax
c001abd1:	89 d5                	mov    ebp,edx
c001abd3:	58                   	pop    eax
c001abd4:	5a                   	pop    edx
c001abd5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abd8:	ff 36                	push   DWORD PTR [esi]
c001abda:	e8 65 f2 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001abdf:	90                   	nop
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	55                   	push   ebp
c001abe4:	57                   	push   edi
c001abe5:	52                   	push   edx
c001abe6:	50                   	push   eax
c001abe7:	e8 7a f4 ff ff       	call   c001a066 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001abec:	eb 6a                	jmp    c001ac58 <Vm::x87Handler(regs*)+0xa52>
c001abee:	66 90                	xchg   ax,ax
c001abf0:	80 fa 06             	cmp    dl,0x6
c001abf3:	75 2f                	jne    c001ac24 <Vm::x87Handler(regs*)+0xa1e>
c001abf5:	51                   	push   ecx
c001abf6:	51                   	push   ecx
c001abf7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abfa:	ff 36                	push   DWORD PTR [esi]
c001abfc:	e8 43 f2 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001ac01:	8d 76 00             	lea    esi,[esi+0x0]
c001ac04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac0b:	89 c6                	mov    esi,eax
c001ac0d:	89 d7                	mov    edi,edx
c001ac0f:	e8 b2 f4 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001ac14:	57                   	push   edi
c001ac15:	56                   	push   esi
c001ac16:	52                   	push   edx
c001ac17:	50                   	push   eax
c001ac18:	e8 77 f4 ff ff       	call   c001a094 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac1d:	e9 9e 00 00 00       	jmp    c001acc0 <Vm::x87Handler(regs*)+0xaba>
c001ac22:	66 90                	xchg   ax,ax
c001ac24:	31 c0                	xor    eax,eax
c001ac26:	80 fa 07             	cmp    dl,0x7
c001ac29:	0f 85 e9 00 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001ac2f:	83 ec 0c             	sub    esp,0xc
c001ac32:	6a 00                	push   0x0
c001ac34:	e8 8d f4 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001ac39:	89 c7                	mov    edi,eax
c001ac3b:	89 d5                	mov    ebp,edx
c001ac3d:	58                   	pop    eax
c001ac3e:	5a                   	pop    edx
c001ac3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac42:	ff 36                	push   DWORD PTR [esi]
c001ac44:	e8 fb f1 ff ff       	call   c0019e44 <Vm::fpu64ToInternal(unsigned long long)>
c001ac49:	8d 76 00             	lea    esi,[esi+0x0]
c001ac4c:	83 c4 10             	add    esp,0x10
c001ac4f:	55                   	push   ebp
c001ac50:	57                   	push   edi
c001ac51:	52                   	push   edx
c001ac52:	50                   	push   eax
c001ac53:	e8 3c f4 ff ff       	call   c001a094 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac58:	83 c4 0c             	add    esp,0xc
c001ac5b:	eb 67                	jmp    c001acc4 <Vm::x87Handler(regs*)+0xabe>
c001ac5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac60:	31 c0                	xor    eax,eax
c001ac62:	80 fa 02             	cmp    dl,0x2
c001ac65:	0f 85 ad 00 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001ac6b:	83 ec 0c             	sub    esp,0xc
c001ac6e:	6a 00                	push   0x0
c001ac70:	e8 51 f4 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001ac75:	59                   	pop    ecx
c001ac76:	5f                   	pop    edi
c001ac77:	90                   	nop
c001ac78:	52                   	push   edx
c001ac79:	50                   	push   eax
c001ac7a:	e8 77 f1 ff ff       	call   c0019df6 <Vm::fpuInternalTo64(unsigned long long)>
c001ac7f:	e9 84 00 00 00       	jmp    c001ad08 <Vm::x87Handler(regs*)+0xb02>
c001ac84:	31 c0                	xor    eax,eax
c001ac86:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ac8b:	0f 85 87 00 00 00    	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001ac91:	50                   	push   eax
c001ac92:	50                   	push   eax
c001ac93:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ac96:	66 90                	xchg   ax,ax
c001ac98:	31 d2                	xor    edx,edx
c001ac9a:	52                   	push   edx
c001ac9b:	50                   	push   eax
c001ac9c:	e8 47 f2 ff ff       	call   c0019ee8 <Vm::fpuLongToFloat(long long)>
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acab:	89 c6                	mov    esi,eax
c001acad:	89 d7                	mov    edi,edx
c001acaf:	e8 12 f4 ff ff       	call   c001a0c6 <Vm::fpuGetReg(int)>
c001acb4:	57                   	push   edi
c001acb5:	56                   	push   esi
c001acb6:	52                   	push   edx
c001acb7:	50                   	push   eax
c001acb8:	e8 b8 f3 ff ff       	call   c001a075 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001acbd:	8d 76 00             	lea    esi,[esi+0x0]
c001acc0:	83 c4 1c             	add    esp,0x1c
c001acc3:	90                   	nop
c001acc4:	52                   	push   edx
c001acc5:	50                   	push   eax
c001acc6:	6a 00                	push   0x0
c001acc8:	e8 3c f4 ff ff       	call   c001a109 <Vm::fpuSetReg(int, unsigned long long)>
c001accd:	e9 7a f7 ff ff       	jmp    c001a44c <Vm::x87Handler(regs*)+0x246>
c001acd2:	66 90                	xchg   ax,ax
c001acd4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001acd8:	80 fa 05             	cmp    dl,0x5
c001acdb:	75 13                	jne    c001acf0 <Vm::x87Handler(regs*)+0xaea>
c001acdd:	55                   	push   ebp
c001acde:	55                   	push   ebp
c001acdf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ace2:	ff 36                	push   DWORD PTR [esi]
c001ace4:	e8 c3 f1 ff ff       	call   c0019eac <Vm::fpuULongToFloat(unsigned long long)>
c001ace9:	e9 52 f7 ff ff       	jmp    c001a440 <Vm::x87Handler(regs*)+0x23a>
c001acee:	66 90                	xchg   ax,ax
c001acf0:	31 c0                	xor    eax,eax
c001acf2:	80 fa 07             	cmp    dl,0x7
c001acf5:	75 21                	jne    c001ad18 <Vm::x87Handler(regs*)+0xb12>
c001acf7:	e8 b7 f4 ff ff       	call   c001a1b3 <Vm::fpuPop()>
c001acfc:	51                   	push   ecx
c001acfd:	51                   	push   ecx
c001acfe:	52                   	push   edx
c001acff:	50                   	push   eax
c001ad00:	e8 48 f1 ff ff       	call   c0019e4d <Vm::fpuFloatToLong(unsigned long long)>
c001ad05:	8d 76 00             	lea    esi,[esi+0x0]
c001ad08:	83 c4 10             	add    esp,0x10
c001ad0b:	89 06                	mov    DWORD PTR [esi],eax
c001ad0d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ad10:	e9 7b f7 ff ff       	jmp    c001a490 <Vm::x87Handler(regs*)+0x28a>
c001ad15:	8d 76 00             	lea    esi,[esi+0x0]
c001ad18:	83 c4 1c             	add    esp,0x1c
c001ad1b:	5b                   	pop    ebx
c001ad1c:	5e                   	pop    esi
c001ad1d:	5f                   	pop    edi
c001ad1e:	5d                   	pop    ebp
c001ad1f:	c3                   	ret    

c001ad20 <__static_initialization_and_destruction_0(int, int)>:
c001ad20:	83 ec 0c             	sub    esp,0xc
c001ad23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ad28:	75 1a                	jne    c001ad44 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ad2a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ad32:	75 10                	jne    c001ad44 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ad34:	83 ec 0c             	sub    esp,0xc
c001ad37:	68 20 98 02 c0       	push   0xc0029820
c001ad3c:	e8 43 84 00 00       	call   c0023184 <Vm::_FPUState::_FPUState()>
c001ad41:	83 c4 10             	add    esp,0x10
c001ad44:	90                   	nop
c001ad45:	83 c4 0c             	add    esp,0xc
c001ad48:	c3                   	ret    
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]

c001ad4c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ad4c:	83 ec 0c             	sub    esp,0xc
c001ad4f:	83 ec 08             	sub    esp,0x8
c001ad52:	68 ff ff 00 00       	push   0xffff
c001ad57:	6a 01                	push   0x1
c001ad59:	e8 c2 ff ff ff       	call   c001ad20 <__static_initialization_and_destruction_0(int, int)>
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	83 c4 0c             	add    esp,0xc
c001ad64:	c3                   	ret    

c001ad65 <Hal::noTSC()>:
c001ad65:	31 c0                	xor    eax,eax
c001ad67:	31 d2                	xor    edx,edx
c001ad69:	c3                   	ret    

c001ad6a <Hal::readTSC()>:
c001ad6a:	0f 31                	rdtsc  
c001ad6c:	c3                   	ret    

c001ad6d <Hal::initialise()>:
c001ad6d:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c001ad72:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ad78:	b8 6a ad 01 c0       	mov    eax,0xc001ad6a
c001ad7d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001ad84:	75 05                	jne    c001ad8b <Hal::initialise()+0x1e>
c001ad86:	b8 65 ad 01 c0       	mov    eax,0xc001ad65
c001ad8b:	a3 68 98 02 c0       	mov    ds:0xc0029868,eax
c001ad90:	c3                   	ret    

c001ad91 <Hal::makeBeep(int)>:
c001ad91:	53                   	push   ebx
c001ad92:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ad96:	85 db                	test   ebx,ebx
c001ad98:	75 07                	jne    c001ada1 <Hal::makeBeep(int)+0x10>
c001ad9a:	e4 61                	in     al,0x61
c001ad9c:	83 e0 fc             	and    eax,0xfffffffc
c001ad9f:	eb 26                	jmp    c001adc7 <Hal::makeBeep(int)+0x36>
c001ada1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ada6:	99                   	cdq    
c001ada7:	f7 fb                	idiv   ebx
c001ada9:	89 c1                	mov    ecx,eax
c001adab:	b0 b6                	mov    al,0xb6
c001adad:	e6 43                	out    0x43,al
c001adaf:	88 c8                	mov    al,cl
c001adb1:	e6 42                	out    0x42,al
c001adb3:	89 c8                	mov    eax,ecx
c001adb5:	c1 e8 08             	shr    eax,0x8
c001adb8:	e6 42                	out    0x42,al
c001adba:	e4 61                	in     al,0x61
c001adbc:	88 c2                	mov    dl,al
c001adbe:	83 ca 03             	or     edx,0x3
c001adc1:	38 c2                	cmp    dl,al
c001adc3:	74 04                	je     c001adc9 <Hal::makeBeep(int)+0x38>
c001adc5:	88 d0                	mov    al,dl
c001adc7:	e6 61                	out    0x61,al
c001adc9:	5b                   	pop    ebx
c001adca:	c3                   	ret    

c001adcb <Hal::getRand()>:
c001adcb:	31 c0                	xor    eax,eax
c001adcd:	c3                   	ret    
c001adce:	66 90                	xchg   ax,ax

c001add0 <FAT::getName()>:
c001add0:	b8 30 66 02 c0       	mov    eax,0xc0026630
c001add5:	c3                   	ret    
c001add6:	66 90                	xchg   ax,ax

c001add8 <FAT::tell(void*, unsigned long long*)>:
c001add8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001addd:	75 09                	jne    c001ade8 <FAT::tell(void*, unsigned long long*)+0x10>
c001addf:	b8 04 00 00 00       	mov    eax,0x4
c001ade4:	c3                   	ret    
c001ade5:	8d 76 00             	lea    esi,[esi+0x0]
c001ade8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aded:	75 09                	jne    c001adf8 <FAT::tell(void*, unsigned long long*)+0x20>
c001adef:	b8 04 00 00 00       	mov    eax,0x4
c001adf4:	c3                   	ret    
c001adf5:	8d 76 00             	lea    esi,[esi+0x0]
c001adf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adfc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001adff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ae02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae06:	89 01                	mov    DWORD PTR [ecx],eax
c001ae08:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ae0b:	b8 00 00 00 00       	mov    eax,0x0
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop
c001ae12:	66 90                	xchg   ax,ax

c001ae14 <FAT::stat(void*, unsigned long long*)>:
c001ae14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ae19:	75 09                	jne    c001ae24 <FAT::stat(void*, unsigned long long*)+0x10>
c001ae1b:	b8 04 00 00 00       	mov    eax,0x4
c001ae20:	c3                   	ret    
c001ae21:	8d 76 00             	lea    esi,[esi+0x0]
c001ae24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae29:	75 09                	jne    c001ae34 <FAT::stat(void*, unsigned long long*)+0x20>
c001ae2b:	b8 04 00 00 00       	mov    eax,0x4
c001ae30:	c3                   	ret    
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae38:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ae3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae42:	89 01                	mov    DWORD PTR [ecx],eax
c001ae44:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ae47:	b8 00 00 00 00       	mov    eax,0x0
c001ae4c:	c3                   	ret    
c001ae4d:	90                   	nop
c001ae4e:	66 90                	xchg   ax,ax

c001ae50 <FAT::~FAT()>:
c001ae50:	83 ec 0c             	sub    esp,0xc
c001ae53:	ba 7c 66 02 c0       	mov    edx,0xc002667c
c001ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5c:	89 10                	mov    DWORD PTR [eax],edx
c001ae5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae62:	83 ec 0c             	sub    esp,0xc
c001ae65:	50                   	push   eax
c001ae66:	e8 1b 25 ff ff       	call   c000d386 <Filesystem::~Filesystem()>
c001ae6b:	83 c4 10             	add    esp,0x10
c001ae6e:	90                   	nop
c001ae6f:	83 c4 0c             	add    esp,0xc
c001ae72:	c3                   	ret    
c001ae73:	90                   	nop

c001ae74 <FAT::~FAT()>:
c001ae74:	83 ec 0c             	sub    esp,0xc
c001ae77:	83 ec 0c             	sub    esp,0xc
c001ae7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae7e:	e8 cd ff ff ff       	call   c001ae50 <FAT::~FAT()>
c001ae83:	83 c4 10             	add    esp,0x10
c001ae86:	83 ec 08             	sub    esp,0x8
c001ae89:	6a 08                	push   0x8
c001ae8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae8f:	e8 d6 20 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	83 c4 0c             	add    esp,0xc
c001ae9a:	c3                   	ret    
c001ae9b:	90                   	nop

c001ae9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ae9c:	83 ec 1c             	sub    esp,0x1c
c001ae9f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001aea6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001aeab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aeaf:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001aeb6:	83 f8 ff             	cmp    eax,0xffffffff
c001aeb9:	75 35                	jne    c001aef0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001aebb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aebf:	88 c2                	mov    dl,al
c001aec1:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001aec6:	01 d0                	add    eax,edx
c001aec8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001aecc:	8b 15 80 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029880
c001aed2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aed6:	89 14 85 a0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6760],edx
c001aedd:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001aee2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aee6:	89 14 85 20 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66e0],edx
c001aeed:	eb 19                	jmp    c001af08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001aeef:	90                   	nop
c001aef0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aef4:	88 c2                	mov    dl,al
c001aef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aefa:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001af01:	01 d0                	add    eax,edx
c001af03:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af07:	90                   	nop
c001af08:	83 ec 04             	sub    esp,0x4
c001af0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af13:	8d 44 24 15          	lea    eax,[esp+0x15]
c001af17:	50                   	push   eax
c001af18:	e8 15 bd fe ff       	call   c0006c32 <f_getlabel>
c001af1d:	83 c4 10             	add    esp,0x10
c001af20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001af29:	75 09                	jne    c001af34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001af2b:	b8 00 00 00 00       	mov    eax,0x0
c001af30:	eb 0a                	jmp    c001af3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001af32:	66 90                	xchg   ax,ax
c001af34:	b8 01 00 00 00       	mov    eax,0x1
c001af39:	8d 76 00             	lea    esi,[esi+0x0]
c001af3c:	83 c4 1c             	add    esp,0x1c
c001af3f:	c3                   	ret    

c001af40 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001af40:	57                   	push   edi
c001af41:	83 ec 58             	sub    esp,0x58
c001af44:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001af4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001af50:	b9 0f 00 00 00       	mov    ecx,0xf
c001af55:	b8 00 00 00 00       	mov    eax,0x0
c001af5a:	fc                   	cld    
c001af5b:	89 d7                	mov    edi,edx
c001af5d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af5f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af63:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001af6a:	83 f8 ff             	cmp    eax,0xffffffff
c001af6d:	75 35                	jne    c001afa4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001af6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001af73:	88 c2                	mov    dl,al
c001af75:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001af7a:	01 d0                	add    eax,edx
c001af7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af80:	8b 15 80 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029880
c001af86:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af8a:	89 14 85 a0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6760],edx
c001af91:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001af96:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001af9a:	89 14 85 20 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66e0],edx
c001afa1:	eb 19                	jmp    c001afbc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001afa3:	90                   	nop
c001afa4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001afa8:	88 c2                	mov    dl,al
c001afaa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afae:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001afb5:	01 d0                	add    eax,edx
c001afb7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afbb:	90                   	nop
c001afbc:	83 ec 08             	sub    esp,0x8
c001afbf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001afc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afc7:	50                   	push   eax
c001afc8:	e8 b3 58 fe ff       	call   c0000880 <strcat>
c001afcd:	83 c4 10             	add    esp,0x10
c001afd0:	83 ec 0c             	sub    esp,0xc
c001afd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afd7:	50                   	push   eax
c001afd8:	e8 43 be fe ff       	call   c0006e20 <f_setlabel>
c001afdd:	83 c4 10             	add    esp,0x10
c001afe0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001afe4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001afe9:	75 09                	jne    c001aff4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001afeb:	b8 00 00 00 00       	mov    eax,0x0
c001aff0:	eb 0a                	jmp    c001affc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001aff2:	66 90                	xchg   ax,ax
c001aff4:	b8 01 00 00 00       	mov    eax,0x1
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	83 c4 58             	add    esp,0x58
c001afff:	5f                   	pop    edi
c001b000:	c3                   	ret    
c001b001:	90                   	nop
c001b002:	66 90                	xchg   ax,ax

c001b004 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b004:	83 ec 2c             	sub    esp,0x2c
c001b007:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b00f:	83 ec 08             	sub    esp,0x8
c001b012:	68 54 66 02 c0       	push   0xc0026654
c001b017:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b01b:	e8 ac 57 fe ff       	call   c00007cc <strcmp>
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	85 c0                	test   eax,eax
c001b025:	0f 94 c0             	sete   al
c001b028:	84 c0                	test   al,al
c001b02a:	74 10                	je     c001b03c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b02c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b034:	e9 b3 00 00 00       	jmp    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b039:	8d 76 00             	lea    esi,[esi+0x0]
c001b03c:	83 ec 08             	sub    esp,0x8
c001b03f:	68 46 66 02 c0       	push   0xc0026646
c001b044:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b048:	e8 7f 57 fe ff       	call   c00007cc <strcmp>
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	85 c0                	test   eax,eax
c001b052:	0f 94 c0             	sete   al
c001b055:	84 c0                	test   al,al
c001b057:	74 0f                	je     c001b068 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b059:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b061:	e9 86 00 00 00       	jmp    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b066:	66 90                	xchg   ax,ax
c001b068:	83 ec 08             	sub    esp,0x8
c001b06b:	68 4c 66 02 c0       	push   0xc002664c
c001b070:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b074:	e8 53 57 fe ff       	call   c00007cc <strcmp>
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	85 c0                	test   eax,eax
c001b07e:	0f 94 c0             	sete   al
c001b081:	84 c0                	test   al,al
c001b083:	74 0b                	je     c001b090 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b085:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b08d:	eb 5d                	jmp    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b08f:	90                   	nop
c001b090:	83 ec 08             	sub    esp,0x8
c001b093:	68 ec 38 02 c0       	push   0xc00238ec
c001b098:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b09c:	e8 2b 57 fe ff       	call   c00007cc <strcmp>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	85 c0                	test   eax,eax
c001b0a6:	0f 94 c0             	sete   al
c001b0a9:	84 c0                	test   al,al
c001b0ab:	74 0b                	je     c001b0b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b0ad:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b0b5:	eb 35                	jmp    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b0b7:	90                   	nop
c001b0b8:	83 ec 08             	sub    esp,0x8
c001b0bb:	68 52 66 02 c0       	push   0xc0026652
c001b0c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b0c4:	e8 03 57 fe ff       	call   c00007cc <strcmp>
c001b0c9:	83 c4 10             	add    esp,0x10
c001b0cc:	85 c0                	test   eax,eax
c001b0ce:	0f 94 c0             	sete   al
c001b0d1:	84 c0                	test   al,al
c001b0d3:	74 0b                	je     c001b0e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b0d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b0dd:	eb 0d                	jmp    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b0df:	90                   	nop
c001b0e0:	b8 08 00 00 00       	mov    eax,0x8
c001b0e5:	e9 ea 00 00 00       	jmp    c001b1d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0ea:	66 90                	xchg   ax,ax
c001b0ec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b0f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b0f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0fc:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001b103:	83 f8 ff             	cmp    eax,0xffffffff
c001b106:	75 34                	jne    c001b13c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b108:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b10c:	88 c2                	mov    dl,al
c001b10e:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001b113:	01 d0                	add    eax,edx
c001b115:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b119:	8b 15 80 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029880
c001b11f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b123:	89 14 85 a0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6760],edx
c001b12a:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001b12f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b133:	89 14 85 20 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66e0],edx
c001b13a:	eb 18                	jmp    c001b154 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b13c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b140:	88 c2                	mov    dl,al
c001b142:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b146:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001b14d:	01 d0                	add    eax,edx
c001b14f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b153:	90                   	nop
c001b154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b158:	88 04 24             	mov    BYTE PTR [esp],al
c001b15b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b15f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b163:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b16b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b170:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b178:	83 ec 0c             	sub    esp,0xc
c001b17b:	68 00 20 00 00       	push   0x2000
c001b180:	e8 ba eb fe ff       	call   c0009d3f <malloc>
c001b185:	83 c4 10             	add    esp,0x10
c001b188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b18c:	68 00 20 00 00       	push   0x2000
c001b191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b195:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b199:	50                   	push   eax
c001b19a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b19e:	50                   	push   eax
c001b19f:	e8 fd c2 fe ff       	call   c00074a1 <f_mkfs>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b1b0:	75 0a                	jne    c001b1bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b1b2:	b8 00 00 00 00       	mov    eax,0x0
c001b1b7:	eb 1b                	jmp    c001b1d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1bc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b1c1:	75 09                	jne    c001b1cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b1c3:	b8 09 00 00 00       	mov    eax,0x9
c001b1c8:	eb 0a                	jmp    c001b1d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b1ca:	66 90                	xchg   ax,ax
c001b1cc:	b8 01 00 00 00       	mov    eax,0x1
c001b1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d4:	83 c4 2c             	add    esp,0x2c
c001b1d7:	c3                   	ret    

c001b1d8 <FAT::tryMount(LogicalDisk*, int)>:
c001b1d8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b1de:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001b1e3:	83 f8 14             	cmp    eax,0x14
c001b1e6:	75 18                	jne    c001b200 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b1e8:	83 ec 0c             	sub    esp,0xc
c001b1eb:	68 58 66 02 c0       	push   0xc0026658
c001b1f0:	e8 78 9e ff ff       	call   c001506d <Krnl::panic(char const*)>
c001b1f5:	83 c4 10             	add    esp,0x10
c001b1f8:	b0 00                	mov    al,0x0
c001b1fa:	e9 e9 01 00 00       	jmp    c001b3e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b1ff:	90                   	nop
c001b200:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b207:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b20d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b213:	3d 00 02 00 00       	cmp    eax,0x200
c001b218:	74 0a                	je     c001b224 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b21a:	b0 00                	mov    al,0x0
c001b21c:	e9 c7 01 00 00       	jmp    c001b3e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b221:	8d 76 00             	lea    esi,[esi+0x0]
c001b224:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b22c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b233:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001b23a:	83 f8 ff             	cmp    eax,0xffffffff
c001b23d:	74 09                	je     c001b248 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b23f:	b0 01                	mov    al,0x1
c001b241:	e9 a2 01 00 00       	jmp    c001b3e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b246:	66 90                	xchg   ax,ax
c001b248:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b252:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b25a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b261:	88 c2                	mov    dl,al
c001b263:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001b268:	01 d0                	add    eax,edx
c001b26a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b271:	8b 15 80 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029880
c001b277:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b27e:	89 14 85 a0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6760],edx
c001b285:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001b28a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b291:	89 14 85 20 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66e0],edx
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	68 54 02 00 00       	push   0x254
c001b2a0:	e8 9a ea fe ff       	call   c0009d3f <malloc>
c001b2a5:	83 c4 10             	add    esp,0x10
c001b2a8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b2af:	83 ec 04             	sub    esp,0x4
c001b2b2:	6a 00                	push   0x0
c001b2b4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b2bb:	50                   	push   eax
c001b2bc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2c3:	e8 61 9b fe ff       	call   c0004e29 <f_mount>
c001b2c8:	83 c4 10             	add    esp,0x10
c001b2cb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b2d2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b2da:	74 1c                	je     c001b2f8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b2dc:	83 ec 0c             	sub    esp,0xc
c001b2df:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2e6:	e8 74 ea fe ff       	call   c0009d5f <rfree>
c001b2eb:	83 c4 10             	add    esp,0x10
c001b2ee:	b0 00                	mov    al,0x0
c001b2f0:	e9 f3 00 00 00       	jmp    c001b3e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2f8:	83 ec 04             	sub    esp,0x4
c001b2fb:	68 00 01 00 00       	push   0x100
c001b300:	6a 00                	push   0x0
c001b302:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b309:	50                   	push   eax
c001b30a:	e8 75 53 fe ff       	call   c0000684 <memset>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	83 ec 08             	sub    esp,0x8
c001b315:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b31c:	50                   	push   eax
c001b31d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b324:	50                   	push   eax
c001b325:	e8 56 55 fe ff       	call   c0000880 <strcat>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	83 ec 08             	sub    esp,0x8
c001b330:	68 66 66 02 c0       	push   0xc0026666
c001b335:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b33c:	50                   	push   eax
c001b33d:	e8 3e 55 fe ff       	call   c0000880 <strcat>
c001b342:	83 c4 10             	add    esp,0x10
c001b345:	83 ec 04             	sub    esp,0x4
c001b348:	6a 01                	push   0x1
c001b34a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b351:	50                   	push   eax
c001b352:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b356:	50                   	push   eax
c001b357:	e8 2f 9b fe ff       	call   c0004e8b <f_open>
c001b35c:	83 c4 10             	add    esp,0x10
c001b35f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b366:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b36d:	85 c0                	test   eax,eax
c001b36f:	74 0b                	je     c001b37c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b371:	78 31                	js     c001b3a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b373:	83 e8 04             	sub    eax,0x4
c001b376:	83 f8 01             	cmp    eax,0x1
c001b379:	77 29                	ja     c001b3a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b37b:	90                   	nop
c001b37c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b384:	83 ec 0c             	sub    esp,0xc
c001b387:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b38b:	50                   	push   eax
c001b38c:	e8 4c a6 fe ff       	call   c00059dd <f_close>
c001b391:	83 c4 10             	add    esp,0x10
c001b394:	90                   	nop
c001b395:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b39d:	74 41                	je     c001b3e0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b39f:	eb 33                	jmp    c001b3d4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b3ae:	e8 ac e9 fe ff       	call   c0009d5f <rfree>
c001b3b3:	83 c4 10             	add    esp,0x10
c001b3b6:	83 ec 04             	sub    esp,0x4
c001b3b9:	6a 00                	push   0x0
c001b3bb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b3c2:	50                   	push   eax
c001b3c3:	6a 00                	push   0x0
c001b3c5:	e8 5f 9a fe ff       	call   c0004e29 <f_mount>
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	b0 00                	mov    al,0x0
c001b3cf:	eb 17                	jmp    c001b3e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3d4:	a1 80 98 02 c0       	mov    eax,ds:0xc0029880
c001b3d9:	40                   	inc    eax
c001b3da:	a3 80 98 02 c0       	mov    ds:0xc0029880,eax
c001b3df:	90                   	nop
c001b3e0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b3e7:	90                   	nop
c001b3e8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <FAT::allocateSwapfile(char const*, int)>:
c001b3f0:	55                   	push   ebp
c001b3f1:	57                   	push   edi
c001b3f2:	56                   	push   esi
c001b3f3:	53                   	push   ebx
c001b3f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b3fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b405:	83 ec 0c             	sub    esp,0xc
c001b408:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b40f:	e8 2b e9 fe ff       	call   c0009d3f <malloc>
c001b414:	83 c4 10             	add    esp,0x10
c001b417:	89 c7                	mov    edi,eax
c001b419:	a1 b0 97 02 c0       	mov    eax,ds:0xc00297b0
c001b41e:	83 ec 04             	sub    esp,0x4
c001b421:	50                   	push   eax
c001b422:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b429:	57                   	push   edi
c001b42a:	e8 87 21 ff ff       	call   c000d5b6 <File::File(char const*, Process*)>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b439:	83 ec 04             	sub    esp,0x4
c001b43c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b440:	50                   	push   eax
c001b441:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b445:	50                   	push   eax
c001b446:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b44d:	e8 ea 24 ff ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c001b452:	83 c4 10             	add    esp,0x10
c001b455:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b45c:	c1 e0 14             	shl    eax,0x14
c001b45f:	89 c7                	mov    edi,eax
c001b461:	89 c5                	mov    ebp,eax
c001b463:	c1 fd 1f             	sar    ebp,0x1f
c001b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b46e:	89 f9                	mov    ecx,edi
c001b470:	31 c1                	xor    ecx,eax
c001b472:	89 cb                	mov    ebx,ecx
c001b474:	89 e9                	mov    ecx,ebp
c001b476:	31 d1                	xor    ecx,edx
c001b478:	89 ce                	mov    esi,ecx
c001b47a:	89 f0                	mov    eax,esi
c001b47c:	09 d8                	or     eax,ebx
c001b47e:	0f 84 98 00 00 00    	je     c001b51c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b484:	83 ec 0c             	sub    esp,0xc
c001b487:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b48e:	e8 75 23 ff ff       	call   c000d808 <File::unlink()>
c001b493:	83 c4 10             	add    esp,0x10
c001b496:	83 ec 08             	sub    esp,0x8
c001b499:	6a 12                	push   0x12
c001b49b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4a2:	e8 e9 21 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b4b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b4b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b4be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b4c5:	c1 e0 14             	shl    eax,0x14
c001b4c8:	99                   	cdq    
c001b4c9:	6a 01                	push   0x1
c001b4cb:	52                   	push   edx
c001b4cc:	50                   	push   eax
c001b4cd:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b4d4:	e8 b4 bb fe ff       	call   c000708d <f_expand>
c001b4d9:	83 c4 10             	add    esp,0x10
c001b4dc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b4e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4e5:	83 c0 10             	add    eax,0x10
c001b4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4ea:	83 ec 0c             	sub    esp,0xc
c001b4ed:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b4f1:	52                   	push   edx
c001b4f2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b4f6:	52                   	push   edx
c001b4f7:	6a 00                	push   0x0
c001b4f9:	68 00 04 00 00       	push   0x400
c001b4fe:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b505:	ff d0                	call   eax
c001b507:	83 c4 20             	add    esp,0x20
c001b50a:	83 ec 0c             	sub    esp,0xc
c001b50d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b514:	e8 d5 21 ff ff       	call   c000d6ee <File::close()>
c001b519:	83 c4 10             	add    esp,0x10
c001b51c:	83 ec 08             	sub    esp,0x8
c001b51f:	6a 01                	push   0x1
c001b521:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b528:	e8 63 21 ff ff       	call   c000d690 <File::open(FileOpenMode)>
c001b52d:	83 c4 10             	add    esp,0x10
c001b530:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b537:	8b 00                	mov    eax,DWORD PTR [eax]
c001b539:	83 c0 0c             	add    eax,0xc
c001b53c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b53e:	83 ec 0c             	sub    esp,0xc
c001b541:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b545:	52                   	push   edx
c001b546:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b54a:	52                   	push   edx
c001b54b:	6a 00                	push   0x0
c001b54d:	6a 04                	push   0x4
c001b54f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b556:	ff d0                	call   eax
c001b558:	83 c4 20             	add    esp,0x20
c001b55b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b562:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b568:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b56f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b576:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b579:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b57c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b583:	83 ec 0c             	sub    esp,0xc
c001b586:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b58d:	e8 5c 21 ff ff       	call   c000d6ee <File::close()>
c001b592:	83 c4 10             	add    esp,0x10
c001b595:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b59c:	ba 00 00 00 00       	mov    edx,0x0
c001b5a1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b5a7:	5b                   	pop    ebx
c001b5a8:	5e                   	pop    esi
c001b5a9:	5f                   	pop    edi
c001b5aa:	5d                   	pop    ebp
c001b5ab:	c3                   	ret    

c001b5ac <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b5ac:	57                   	push   edi
c001b5ad:	56                   	push   esi
c001b5ae:	53                   	push   ebx
c001b5af:	81 ec 50 02 00 00    	sub    esp,0x250
c001b5b5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b5bd:	74 0d                	je     c001b5cc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b5bf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b5c7:	75 0f                	jne    c001b5d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5cc:	b8 04 00 00 00       	mov    eax,0x4
c001b5d1:	e9 36 01 00 00       	jmp    c001b70c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b5d6:	66 90                	xchg   ax,ax
c001b5d8:	83 ec 08             	sub    esp,0x8
c001b5db:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b5e2:	50                   	push   eax
c001b5e3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b5ea:	e8 f8 a9 fe ff       	call   c0005fe7 <f_readdir>
c001b5ef:	83 c4 10             	add    esp,0x10
c001b5f2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b5f9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b60a:	83 c0 1a             	add    eax,0x1a
c001b60d:	50                   	push   eax
c001b60e:	e8 8d 50 fe ff       	call   c00006a0 <strlen>
c001b613:	83 c4 10             	add    esp,0x10
c001b616:	ba 00 00 00 00       	mov    edx,0x0
c001b61b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b61f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b623:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b62a:	0f b6 c0             	movzx  eax,al
c001b62d:	83 e0 10             	and    eax,0x10
c001b630:	74 0a                	je     c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b632:	b8 02 00 00 00       	mov    eax,0x2
c001b637:	eb 0b                	jmp    c001b644 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b639:	8d 76 00             	lea    esi,[esi+0x0]
c001b63c:	b8 01 00 00 00       	mov    eax,0x1
c001b641:	8d 76 00             	lea    esi,[esi+0x0]
c001b644:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b648:	83 ec 08             	sub    esp,0x8
c001b64b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b652:	83 c0 1a             	add    eax,0x1a
c001b655:	50                   	push   eax
c001b656:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b65a:	83 c0 10             	add    eax,0x10
c001b65d:	50                   	push   eax
c001b65e:	e8 dd 50 fe ff       	call   c0000740 <strcpy>
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b66d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b674:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b678:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b67f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b686:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b68d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b694:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b69b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b6a2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b6a9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b6b0:	89 c6                	mov    esi,eax
c001b6b2:	89 d7                	mov    edi,edx
c001b6b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b6b6:	89 c8                	mov    eax,ecx
c001b6b8:	89 fa                	mov    edx,edi
c001b6ba:	89 f3                	mov    ebx,esi
c001b6bc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b6c3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b6ca:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b6d1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b6d8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6de:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b6e5:	84 c0                	test   al,al
c001b6e7:	75 07                	jne    c001b6f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b6e9:	b8 07 00 00 00       	mov    eax,0x7
c001b6ee:	eb 1c                	jmp    c001b70c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b6f0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b6f7:	85 c0                	test   eax,eax
c001b6f9:	75 09                	jne    c001b704 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b6fb:	b8 00 00 00 00       	mov    eax,0x0
c001b700:	eb 0a                	jmp    c001b70c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b702:	66 90                	xchg   ax,ax
c001b704:	b8 01 00 00 00       	mov    eax,0x1
c001b709:	8d 76 00             	lea    esi,[esi+0x0]
c001b70c:	81 c4 50 02 00 00    	add    esp,0x250
c001b712:	5b                   	pop    ebx
c001b713:	5e                   	pop    esi
c001b714:	5f                   	pop    edi
c001b715:	c3                   	ret    
c001b716:	66 90                	xchg   ax,ax

c001b718 <FAT::read(void*, unsigned long, void*, int*)>:
c001b718:	83 ec 1c             	sub    esp,0x1c
c001b71b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b720:	74 0a                	je     c001b72c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b722:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b727:	75 0b                	jne    c001b734 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b729:	8d 76 00             	lea    esi,[esi+0x0]
c001b72c:	b8 04 00 00 00       	mov    eax,0x4
c001b731:	eb 41                	jmp    c001b774 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b733:	90                   	nop
c001b734:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b738:	50                   	push   eax
c001b739:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b73d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b741:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b745:	e8 7d 9b fe ff       	call   c00052c7 <f_read>
c001b74a:	83 c4 10             	add    esp,0x10
c001b74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b755:	89 c2                	mov    edx,eax
c001b757:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b75b:	89 10                	mov    DWORD PTR [eax],edx
c001b75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b761:	85 c0                	test   eax,eax
c001b763:	75 07                	jne    c001b76c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b765:	b8 00 00 00 00       	mov    eax,0x0
c001b76a:	eb 08                	jmp    c001b774 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b76c:	b8 01 00 00 00       	mov    eax,0x1
c001b771:	8d 76 00             	lea    esi,[esi+0x0]
c001b774:	83 c4 1c             	add    esp,0x1c
c001b777:	c3                   	ret    

c001b778 <FAT::write(void*, unsigned long, void*, int*)>:
c001b778:	83 ec 1c             	sub    esp,0x1c
c001b77b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b780:	74 0a                	je     c001b78c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b782:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b787:	75 0b                	jne    c001b794 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b789:	8d 76 00             	lea    esi,[esi+0x0]
c001b78c:	b8 04 00 00 00       	mov    eax,0x4
c001b791:	eb 41                	jmp    c001b7d4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b793:	90                   	nop
c001b794:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b798:	50                   	push   eax
c001b799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b79d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b7a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7a5:	e8 9d 9d fe ff       	call   c0005547 <f_write>
c001b7aa:	83 c4 10             	add    esp,0x10
c001b7ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7b5:	89 c2                	mov    edx,eax
c001b7b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b7bb:	89 10                	mov    DWORD PTR [eax],edx
c001b7bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7c1:	85 c0                	test   eax,eax
c001b7c3:	75 07                	jne    c001b7cc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b7c5:	b8 00 00 00 00       	mov    eax,0x0
c001b7ca:	eb 08                	jmp    c001b7d4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b7cc:	b8 01 00 00 00       	mov    eax,0x1
c001b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d4:	83 c4 1c             	add    esp,0x1c
c001b7d7:	c3                   	ret    

c001b7d8 <FAT::close(void*)>:
c001b7d8:	83 ec 1c             	sub    esp,0x1c
c001b7db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b7e0:	75 0a                	jne    c001b7ec <FAT::close(void*)+0x14>
c001b7e2:	b8 04 00 00 00       	mov    eax,0x4
c001b7e7:	eb 3f                	jmp    c001b828 <FAT::close(void*)+0x50>
c001b7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7ec:	83 ec 0c             	sub    esp,0xc
c001b7ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7f3:	e8 e5 a1 fe ff       	call   c00059dd <f_close>
c001b7f8:	83 c4 10             	add    esp,0x10
c001b7fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ff:	83 ec 0c             	sub    esp,0xc
c001b802:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b806:	e8 44 e5 fe ff       	call   c0009d4f <free>
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b812:	85 c0                	test   eax,eax
c001b814:	75 0a                	jne    c001b820 <FAT::close(void*)+0x48>
c001b816:	b8 00 00 00 00       	mov    eax,0x0
c001b81b:	eb 0b                	jmp    c001b828 <FAT::close(void*)+0x50>
c001b81d:	8d 76 00             	lea    esi,[esi+0x0]
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	8d 76 00             	lea    esi,[esi+0x0]
c001b828:	83 c4 1c             	add    esp,0x1c
c001b82b:	c3                   	ret    

c001b82c <FAT::closeDir(void*)>:
c001b82c:	83 ec 1c             	sub    esp,0x1c
c001b82f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b834:	75 0a                	jne    c001b840 <FAT::closeDir(void*)+0x14>
c001b836:	b8 04 00 00 00       	mov    eax,0x4
c001b83b:	eb 3f                	jmp    c001b87c <FAT::closeDir(void*)+0x50>
c001b83d:	8d 76 00             	lea    esi,[esi+0x0]
c001b840:	83 ec 0c             	sub    esp,0xc
c001b843:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b847:	e8 79 a7 fe ff       	call   c0005fc5 <f_closedir>
c001b84c:	83 c4 10             	add    esp,0x10
c001b84f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b853:	83 ec 0c             	sub    esp,0xc
c001b856:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b85a:	e8 f0 e4 fe ff       	call   c0009d4f <free>
c001b85f:	83 c4 10             	add    esp,0x10
c001b862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b866:	85 c0                	test   eax,eax
c001b868:	75 0a                	jne    c001b874 <FAT::closeDir(void*)+0x48>
c001b86a:	b8 00 00 00 00       	mov    eax,0x0
c001b86f:	eb 0b                	jmp    c001b87c <FAT::closeDir(void*)+0x50>
c001b871:	8d 76 00             	lea    esi,[esi+0x0]
c001b874:	b8 01 00 00 00       	mov    eax,0x1
c001b879:	8d 76 00             	lea    esi,[esi+0x0]
c001b87c:	83 c4 1c             	add    esp,0x1c
c001b87f:	c3                   	ret    

c001b880 <FAT::seek(void*, unsigned long long)>:
c001b880:	83 ec 2c             	sub    esp,0x2c
c001b883:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b88b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b88f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b893:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b898:	75 0a                	jne    c001b8a4 <FAT::seek(void*, unsigned long long)+0x24>
c001b89a:	b8 04 00 00 00       	mov    eax,0x4
c001b89f:	eb 37                	jmp    c001b8d8 <FAT::seek(void*, unsigned long long)+0x58>
c001b8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a4:	83 ec 04             	sub    esp,0x4
c001b8a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b8ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b8af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b8b3:	e8 54 a1 fe ff       	call   c0005a0c <f_lseek>
c001b8b8:	83 c4 10             	add    esp,0x10
c001b8bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8c3:	85 c0                	test   eax,eax
c001b8c5:	75 09                	jne    c001b8d0 <FAT::seek(void*, unsigned long long)+0x50>
c001b8c7:	b8 00 00 00 00       	mov    eax,0x0
c001b8cc:	eb 0a                	jmp    c001b8d8 <FAT::seek(void*, unsigned long long)+0x58>
c001b8ce:	66 90                	xchg   ax,ax
c001b8d0:	b8 01 00 00 00       	mov    eax,0x1
c001b8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d8:	83 c4 2c             	add    esp,0x2c
c001b8db:	c3                   	ret    

c001b8dc <fatWrapperReadDisk>:
c001b8dc:	83 ec 1c             	sub    esp,0x1c
c001b8df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b8f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b8f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8fb:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c001b902:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b906:	83 ec 0c             	sub    esp,0xc
c001b909:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b90d:	52                   	push   edx
c001b90e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b916:	50                   	push   eax
c001b917:	e8 f2 4f ff ff       	call   c001090e <LogicalDisk::read(unsigned long long, int, void*)>
c001b91c:	83 c4 20             	add    esp,0x20
c001b91f:	83 c4 1c             	add    esp,0x1c
c001b922:	c3                   	ret    
c001b923:	90                   	nop

c001b924 <fatWrapperWriteDisk>:
c001b924:	83 ec 1c             	sub    esp,0x1c
c001b927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b92b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b92f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b933:	89 04 24             	mov    DWORD PTR [esp],eax
c001b936:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b93a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b93e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b943:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c001b94a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b94e:	83 ec 0c             	sub    esp,0xc
c001b951:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b955:	52                   	push   edx
c001b956:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b95a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b95e:	50                   	push   eax
c001b95f:	e8 16 50 ff ff       	call   c001097a <LogicalDisk::write(unsigned long long, int, void*)>
c001b964:	83 c4 20             	add    esp,0x20
c001b967:	83 c4 1c             	add    esp,0x1c
c001b96a:	c3                   	ret    
c001b96b:	90                   	nop

c001b96c <fatWrapperIoctl>:
c001b96c:	53                   	push   ebx
c001b96d:	83 ec 28             	sub    esp,0x28
c001b970:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b978:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b97c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b980:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b985:	75 31                	jne    c001b9b8 <fatWrapperIoctl+0x4c>
c001b987:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b98b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b98f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b994:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c001b99b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b9a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b9a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9ab:	66 89 02             	mov    WORD PTR [edx],ax
c001b9ae:	b8 00 00 00 00       	mov    eax,0x0
c001b9b3:	e9 bc 00 00 00       	jmp    c001ba74 <fatWrapperIoctl+0x108>
c001b9b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b9bd:	75 6d                	jne    c001ba2c <fatWrapperIoctl+0xc0>
c001b9bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b9cc:	8b 04 85 20 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77e0]
c001b9d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b9d9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b9df:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b9e5:	89 c8                	mov    eax,ecx
c001b9e7:	89 da                	mov    edx,ebx
c001b9e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b9ed:	c1 e0 0a             	shl    eax,0xa
c001b9f0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b9f5:	8b 0c 8d 20 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77e0]
c001b9fc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ba02:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ba08:	89 cb                	mov    ebx,ecx
c001ba0a:	c1 fb 1f             	sar    ebx,0x1f
c001ba0d:	53                   	push   ebx
c001ba0e:	51                   	push   ecx
c001ba0f:	52                   	push   edx
c001ba10:	50                   	push   eax
c001ba11:	e8 ca 6d 00 00       	call   c00227e0 <__udivdi3>
c001ba16:	83 c4 10             	add    esp,0x10
c001ba19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ba1d:	89 01                	mov    DWORD PTR [ecx],eax
c001ba1f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba22:	b8 00 00 00 00       	mov    eax,0x0
c001ba27:	eb 4b                	jmp    c001ba74 <fatWrapperIoctl+0x108>
c001ba29:	8d 76 00             	lea    esi,[esi+0x0]
c001ba2c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ba31:	75 09                	jne    c001ba3c <fatWrapperIoctl+0xd0>
c001ba33:	b8 00 00 00 00       	mov    eax,0x0
c001ba38:	eb 3a                	jmp    c001ba74 <fatWrapperIoctl+0x108>
c001ba3a:	66 90                	xchg   ax,ax
c001ba3c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ba41:	75 19                	jne    c001ba5c <fatWrapperIoctl+0xf0>
c001ba43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba4f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ba55:	b8 00 00 00 00       	mov    eax,0x0
c001ba5a:	eb 18                	jmp    c001ba74 <fatWrapperIoctl+0x108>
c001ba5c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ba61:	75 09                	jne    c001ba6c <fatWrapperIoctl+0x100>
c001ba63:	b8 00 00 00 00       	mov    eax,0x0
c001ba68:	eb 0a                	jmp    c001ba74 <fatWrapperIoctl+0x108>
c001ba6a:	66 90                	xchg   ax,ax
c001ba6c:	b8 04 00 00 00       	mov    eax,0x4
c001ba71:	8d 76 00             	lea    esi,[esi+0x0]
c001ba74:	83 c4 28             	add    esp,0x28
c001ba77:	5b                   	pop    ebx
c001ba78:	c3                   	ret    
c001ba79:	90                   	nop
c001ba7a:	66 90                	xchg   ax,ax

c001ba7c <FAT::FAT()>:
c001ba7c:	83 ec 1c             	sub    esp,0x1c
c001ba7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba83:	83 ec 0c             	sub    esp,0xc
c001ba86:	50                   	push   eax
c001ba87:	e8 d6 18 ff ff       	call   c000d362 <Filesystem::Filesystem()>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	ba 7c 66 02 c0       	mov    edx,0xc002667c
c001ba94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba98:	89 10                	mov    DWORD PTR [eax],edx
c001ba9a:	c7 05 80 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029880,0x0
c001baa4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001baac:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bab1:	7f 15                	jg     c001bac8 <FAT::FAT()+0x4c>
c001bab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab7:	c7 04 85 a0 98 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6760],0xffffffff
c001bac2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bac6:	eb e4                	jmp    c001baac <FAT::FAT()+0x30>
c001bac8:	90                   	nop
c001bac9:	83 c4 1c             	add    esp,0x1c
c001bacc:	c3                   	ret    
c001bacd:	90                   	nop
c001bace:	66 90                	xchg   ax,ax

c001bad0 <FAT::fixFilepath(char*)>:
c001bad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bad4:	8a 00                	mov    al,BYTE PTR [eax]
c001bad6:	3c 40                	cmp    al,0x40
c001bad8:	7e 2e                	jle    c001bb08 <FAT::fixFilepath(char*)+0x38>
c001bada:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bade:	8a 00                	mov    al,BYTE PTR [eax]
c001bae0:	83 e8 41             	sub    eax,0x41
c001bae3:	88 c2                	mov    dl,al
c001bae5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bae9:	88 10                	mov    BYTE PTR [eax],dl
c001baeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baef:	8a 00                	mov    al,BYTE PTR [eax]
c001baf1:	0f be c0             	movsx  eax,al
c001baf4:	8b 04 85 a0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6760]
c001bafb:	83 c0 30             	add    eax,0x30
c001bafe:	88 c2                	mov    dl,al
c001bb00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb04:	88 10                	mov    BYTE PTR [eax],dl
c001bb06:	66 90                	xchg   ax,ax
c001bb08:	90                   	nop
c001bb09:	c3                   	ret    
c001bb0a:	66 90                	xchg   ax,ax

c001bb0c <FAT::open(char const*, void**, FileOpenMode)>:
c001bb0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb1a:	74 0c                	je     c001bb28 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bb1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bb24:	75 0e                	jne    c001bb34 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bb26:	66 90                	xchg   ax,ax
c001bb28:	b8 04 00 00 00       	mov    eax,0x4
c001bb2d:	e9 06 01 00 00       	jmp    c001bc38 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bb32:	66 90                	xchg   ax,ax
c001bb34:	83 ec 08             	sub    esp,0x8
c001bb37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb42:	50                   	push   eax
c001bb43:	e8 f8 4b fe ff       	call   c0000740 <strcpy>
c001bb48:	83 c4 10             	add    esp,0x10
c001bb4b:	83 ec 08             	sub    esp,0x8
c001bb4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bb52:	50                   	push   eax
c001bb53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb5a:	e8 71 ff ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001bb5f:	83 c4 10             	add    esp,0x10
c001bb62:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bb6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb71:	83 e0 01             	and    eax,0x1
c001bb74:	74 0a                	je     c001bb80 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001bb76:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bb7e:	66 90                	xchg   ax,ax
c001bb80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb87:	83 e0 04             	and    eax,0x4
c001bb8a:	74 10                	je     c001bb9c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bb8c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bb94:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bb9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bba3:	83 e0 02             	and    eax,0x2
c001bba6:	74 08                	je     c001bbb0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bba8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bbb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bbb7:	83 e0 08             	and    eax,0x8
c001bbba:	74 08                	je     c001bbc4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001bbbc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001bbc4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bbcb:	83 e0 10             	and    eax,0x10
c001bbce:	74 08                	je     c001bbd8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bbd0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bbd8:	83 ec 0c             	sub    esp,0xc
c001bbdb:	68 50 02 00 00       	push   0x250
c001bbe0:	e8 5a e1 fe ff       	call   c0009d3f <malloc>
c001bbe5:	83 c4 10             	add    esp,0x10
c001bbe8:	89 c2                	mov    edx,eax
c001bbea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbf1:	89 10                	mov    DWORD PTR [eax],edx
c001bbf3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bbfb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc02:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc04:	83 ec 04             	sub    esp,0x4
c001bc07:	52                   	push   edx
c001bc08:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bc0c:	52                   	push   edx
c001bc0d:	50                   	push   eax
c001bc0e:	e8 78 92 fe ff       	call   c0004e8b <f_open>
c001bc13:	83 c4 10             	add    esp,0x10
c001bc16:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bc1d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bc25:	74 09                	je     c001bc30 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bc27:	b8 01 00 00 00       	mov    eax,0x1
c001bc2c:	eb 0a                	jmp    c001bc38 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bc2e:	66 90                	xchg   ax,ax
c001bc30:	b8 00 00 00 00       	mov    eax,0x0
c001bc35:	8d 76 00             	lea    esi,[esi+0x0]
c001bc38:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <FAT::openDir(char const*, void**)>:
c001bc40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc4e:	74 0c                	je     c001bc5c <FAT::openDir(char const*, void**)+0x1c>
c001bc50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bc58:	75 0e                	jne    c001bc68 <FAT::openDir(char const*, void**)+0x28>
c001bc5a:	66 90                	xchg   ax,ax
c001bc5c:	b8 04 00 00 00       	mov    eax,0x4
c001bc61:	e9 82 00 00 00       	jmp    c001bce8 <FAT::openDir(char const*, void**)+0xa8>
c001bc66:	66 90                	xchg   ax,ax
c001bc68:	83 ec 08             	sub    esp,0x8
c001bc6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc72:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc76:	50                   	push   eax
c001bc77:	e8 c4 4a fe ff       	call   c0000740 <strcpy>
c001bc7c:	83 c4 10             	add    esp,0x10
c001bc7f:	83 ec 08             	sub    esp,0x8
c001bc82:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc86:	50                   	push   eax
c001bc87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc8e:	e8 3d fe ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	83 ec 0c             	sub    esp,0xc
c001bc99:	6a 4c                	push   0x4c
c001bc9b:	e8 9f e0 fe ff       	call   c0009d3f <malloc>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	89 c2                	mov    edx,eax
c001bca5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bcac:	89 10                	mov    DWORD PTR [eax],edx
c001bcae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bcb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcb7:	83 ec 08             	sub    esp,0x8
c001bcba:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bcbe:	52                   	push   edx
c001bcbf:	50                   	push   eax
c001bcc0:	e8 fe a1 fe ff       	call   c0005ec3 <f_opendir>
c001bcc5:	83 c4 10             	add    esp,0x10
c001bcc8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bccf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bcd7:	74 07                	je     c001bce0 <FAT::openDir(char const*, void**)+0xa0>
c001bcd9:	b8 01 00 00 00       	mov    eax,0x1
c001bcde:	eb 08                	jmp    c001bce8 <FAT::openDir(char const*, void**)+0xa8>
c001bce0:	b8 00 00 00 00       	mov    eax,0x0
c001bce5:	8d 76 00             	lea    esi,[esi+0x0]
c001bce8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bcee:	c3                   	ret    
c001bcef:	90                   	nop

c001bcf0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bcf0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bcf6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bcfe:	75 0c                	jne    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bd00:	b8 04 00 00 00       	mov    eax,0x4
c001bd05:	e9 d2 00 00 00       	jmp    c001bddc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd0a:	66 90                	xchg   ax,ax
c001bd0c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bd14:	75 0a                	jne    c001bd20 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bd16:	b8 04 00 00 00       	mov    eax,0x4
c001bd1b:	e9 bc 00 00 00       	jmp    c001bddc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd20:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bd28:	75 0a                	jne    c001bd34 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bd2a:	b8 04 00 00 00       	mov    eax,0x4
c001bd2f:	e9 a8 00 00 00       	jmp    c001bddc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd34:	83 ec 08             	sub    esp,0x8
c001bd37:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd3e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bd45:	50                   	push   eax
c001bd46:	e8 f5 49 fe ff       	call   c0000740 <strcpy>
c001bd4b:	83 c4 10             	add    esp,0x10
c001bd4e:	83 ec 08             	sub    esp,0x8
c001bd51:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bd58:	50                   	push   eax
c001bd59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd60:	e8 6b fd ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001bd65:	83 c4 10             	add    esp,0x10
c001bd68:	83 ec 08             	sub    esp,0x8
c001bd6b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd6f:	50                   	push   eax
c001bd70:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bd77:	50                   	push   eax
c001bd78:	e8 05 a3 fe ff       	call   c0006082 <f_stat>
c001bd7d:	83 c4 10             	add    esp,0x10
c001bd80:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bd87:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bd8e:	85 c0                	test   eax,eax
c001bd90:	74 0a                	je     c001bd9c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bd92:	83 f8 04             	cmp    eax,0x4
c001bd95:	74 35                	je     c001bdcc <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bd97:	eb 3b                	jmp    c001bdd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bd99:	8d 76 00             	lea    esi,[esi+0x0]
c001bd9c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bda0:	0f b6 c0             	movzx  eax,al
c001bda3:	83 e0 10             	and    eax,0x10
c001bda6:	0f 95 c2             	setne  dl
c001bda9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bdb0:	88 10                	mov    BYTE PTR [eax],dl
c001bdb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bdb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdb9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bdc0:	89 01                	mov    DWORD PTR [ecx],eax
c001bdc2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bdc5:	b8 00 00 00 00       	mov    eax,0x0
c001bdca:	eb 10                	jmp    c001bddc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bdcc:	b8 02 00 00 00       	mov    eax,0x2
c001bdd1:	eb 09                	jmp    c001bddc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bdd3:	90                   	nop
c001bdd4:	b8 01 00 00 00       	mov    eax,0x1
c001bdd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bddc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bde2:	c3                   	ret    
c001bde3:	90                   	nop

c001bde4 <FAT::unlink(char const*)>:
c001bde4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bdea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bdf2:	75 08                	jne    c001bdfc <FAT::unlink(char const*)+0x18>
c001bdf4:	b8 04 00 00 00       	mov    eax,0x4
c001bdf9:	eb 61                	jmp    c001be5c <FAT::unlink(char const*)+0x78>
c001bdfb:	90                   	nop
c001bdfc:	83 ec 08             	sub    esp,0x8
c001bdff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be06:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be0a:	50                   	push   eax
c001be0b:	e8 30 49 fe ff       	call   c0000740 <strcpy>
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	83 ec 08             	sub    esp,0x8
c001be16:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be1a:	50                   	push   eax
c001be1b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be22:	e8 a9 fc ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001be27:	83 c4 10             	add    esp,0x10
c001be2a:	83 ec 0c             	sub    esp,0xc
c001be2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be31:	50                   	push   eax
c001be32:	e8 9d a5 fe ff       	call   c00063d4 <f_unlink>
c001be37:	83 c4 10             	add    esp,0x10
c001be3a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001be41:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001be48:	85 c0                	test   eax,eax
c001be4a:	75 08                	jne    c001be54 <FAT::unlink(char const*)+0x70>
c001be4c:	b8 00 00 00 00       	mov    eax,0x0
c001be51:	eb 09                	jmp    c001be5c <FAT::unlink(char const*)+0x78>
c001be53:	90                   	nop
c001be54:	b8 01 00 00 00       	mov    eax,0x1
c001be59:	8d 76 00             	lea    esi,[esi+0x0]
c001be5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be62:	c3                   	ret    
c001be63:	90                   	nop

c001be64 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001be64:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001be6a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001be71:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001be78:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001be7c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001be80:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001be88:	75 0a                	jne    c001be94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001be8a:	b8 04 00 00 00       	mov    eax,0x4
c001be8f:	e9 30 01 00 00       	jmp    c001bfc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001be94:	83 ec 08             	sub    esp,0x8
c001be97:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001be9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bea2:	50                   	push   eax
c001bea3:	e8 98 48 fe ff       	call   c0000740 <strcpy>
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	83 ec 08             	sub    esp,0x8
c001beae:	8d 44 24 20          	lea    eax,[esp+0x20]
c001beb2:	50                   	push   eax
c001beb3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001beba:	e8 11 fc ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001beca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bed2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bed7:	83 e0 01             	and    eax,0x1
c001beda:	74 08                	je     c001bee4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bedc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bee4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bee9:	83 e0 02             	and    eax,0x2
c001beec:	74 0a                	je     c001bef8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001beee:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bef6:	66 90                	xchg   ax,ax
c001bef8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001befd:	83 e0 04             	and    eax,0x4
c001bf00:	74 0a                	je     c001bf0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bf02:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bf0a:	66 90                	xchg   ax,ax
c001bf0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf11:	83 e0 08             	and    eax,0x8
c001bf14:	74 0a                	je     c001bf20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bf16:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bf1e:	66 90                	xchg   ax,ax
c001bf20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf25:	83 e0 01             	and    eax,0x1
c001bf28:	74 0a                	je     c001bf34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bf2a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bf32:	66 90                	xchg   ax,ax
c001bf34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf39:	83 e0 02             	and    eax,0x2
c001bf3c:	74 0a                	je     c001bf48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bf3e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bf46:	66 90                	xchg   ax,ax
c001bf48:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf4d:	83 e0 04             	and    eax,0x4
c001bf50:	74 0a                	je     c001bf5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bf52:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bf5a:	66 90                	xchg   ax,ax
c001bf5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf61:	83 e0 08             	and    eax,0x8
c001bf64:	74 0a                	je     c001bf70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bf66:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bf6e:	66 90                	xchg   ax,ax
c001bf70:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bf77:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bf7e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bf86:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bf8e:	83 ec 04             	sub    esp,0x4
c001bf91:	52                   	push   edx
c001bf92:	50                   	push   eax
c001bf93:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bf97:	50                   	push   eax
c001bf98:	e8 d9 aa fe ff       	call   c0006a76 <f_chmod>
c001bf9d:	83 c4 10             	add    esp,0x10
c001bfa0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bfa7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bfae:	85 c0                	test   eax,eax
c001bfb0:	75 0a                	jne    c001bfbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bfb2:	b8 00 00 00 00       	mov    eax,0x0
c001bfb7:	eb 0b                	jmp    c001bfc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bfb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfbc:	b8 01 00 00 00       	mov    eax,0x1
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bfca:	c3                   	ret    
c001bfcb:	90                   	nop

c001bfcc <FAT::rename(char const*, char const*)>:
c001bfcc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bfd2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bfda:	74 0c                	je     c001bfe8 <FAT::rename(char const*, char const*)+0x1c>
c001bfdc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bfe4:	75 0e                	jne    c001bff4 <FAT::rename(char const*, char const*)+0x28>
c001bfe6:	66 90                	xchg   ax,ax
c001bfe8:	b8 04 00 00 00       	mov    eax,0x4
c001bfed:	e9 9e 00 00 00       	jmp    c001c090 <FAT::rename(char const*, char const*)+0xc4>
c001bff2:	66 90                	xchg   ax,ax
c001bff4:	83 ec 08             	sub    esp,0x8
c001bff7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bffe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c005:	50                   	push   eax
c001c006:	e8 35 47 fe ff       	call   c0000740 <strcpy>
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	83 ec 08             	sub    esp,0x8
c001c011:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c018:	50                   	push   eax
c001c019:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c020:	e8 ab fa ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001c025:	83 c4 10             	add    esp,0x10
c001c028:	83 ec 08             	sub    esp,0x8
c001c02b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c032:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c036:	50                   	push   eax
c001c037:	e8 04 47 fe ff       	call   c0000740 <strcpy>
c001c03c:	83 c4 10             	add    esp,0x10
c001c03f:	83 ec 08             	sub    esp,0x8
c001c042:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c046:	50                   	push   eax
c001c047:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c04e:	e8 7d fa ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001c053:	83 c4 10             	add    esp,0x10
c001c056:	83 ec 08             	sub    esp,0x8
c001c059:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c05d:	50                   	push   eax
c001c05e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c065:	50                   	push   eax
c001c066:	e8 18 a7 fe ff       	call   c0006783 <f_rename>
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c075:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c07c:	85 c0                	test   eax,eax
c001c07e:	75 08                	jne    c001c088 <FAT::rename(char const*, char const*)+0xbc>
c001c080:	b8 00 00 00 00       	mov    eax,0x0
c001c085:	eb 09                	jmp    c001c090 <FAT::rename(char const*, char const*)+0xc4>
c001c087:	90                   	nop
c001c088:	b8 01 00 00 00       	mov    eax,0x1
c001c08d:	8d 76 00             	lea    esi,[esi+0x0]
c001c090:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c096:	c3                   	ret    
c001c097:	90                   	nop

c001c098 <FAT::mkdir(char const*)>:
c001c098:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c09e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c0a6:	75 08                	jne    c001c0b0 <FAT::mkdir(char const*)+0x18>
c001c0a8:	b8 04 00 00 00       	mov    eax,0x4
c001c0ad:	eb 61                	jmp    c001c110 <FAT::mkdir(char const*)+0x78>
c001c0af:	90                   	nop
c001c0b0:	83 ec 08             	sub    esp,0x8
c001c0b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0be:	50                   	push   eax
c001c0bf:	e8 7c 46 fe ff       	call   c0000740 <strcpy>
c001c0c4:	83 c4 10             	add    esp,0x10
c001c0c7:	83 ec 08             	sub    esp,0x8
c001c0ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0ce:	50                   	push   eax
c001c0cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0d6:	e8 f5 f9 ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001c0db:	83 c4 10             	add    esp,0x10
c001c0de:	83 ec 0c             	sub    esp,0xc
c001c0e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0e5:	50                   	push   eax
c001c0e6:	e8 6c a4 fe ff       	call   c0006557 <f_mkdir>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c0f5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c0fc:	85 c0                	test   eax,eax
c001c0fe:	75 08                	jne    c001c108 <FAT::mkdir(char const*)+0x70>
c001c100:	b8 00 00 00 00       	mov    eax,0x0
c001c105:	eb 09                	jmp    c001c110 <FAT::mkdir(char const*)+0x78>
c001c107:	90                   	nop
c001c108:	b8 01 00 00 00       	mov    eax,0x1
c001c10d:	8d 76 00             	lea    esi,[esi+0x0]
c001c110:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c116:	c3                   	ret    
c001c117:	90                   	nop

c001c118 <FAT::exists(char const*)>:
c001c118:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c11e:	83 ec 08             	sub    esp,0x8
c001c121:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c128:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c12c:	50                   	push   eax
c001c12d:	e8 0e 46 fe ff       	call   c0000740 <strcpy>
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	83 ec 08             	sub    esp,0x8
c001c138:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c13c:	50                   	push   eax
c001c13d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c144:	e8 87 f9 ff ff       	call   c001bad0 <FAT::fixFilepath(char*)>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	83 ec 08             	sub    esp,0x8
c001c14f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c156:	50                   	push   eax
c001c157:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c15b:	50                   	push   eax
c001c15c:	e8 21 9f fe ff       	call   c0006082 <f_stat>
c001c161:	83 c4 10             	add    esp,0x10
c001c164:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c16b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c172:	85 c0                	test   eax,eax
c001c174:	75 06                	jne    c001c17c <FAT::exists(char const*)+0x64>
c001c176:	b0 01                	mov    al,0x1
c001c178:	eb 06                	jmp    c001c180 <FAT::exists(char const*)+0x68>
c001c17a:	66 90                	xchg   ax,ax
c001c17c:	b0 00                	mov    al,0x0
c001c17e:	66 90                	xchg   ax,ax
c001c180:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c186:	c3                   	ret    
c001c187:	90                   	nop

c001c188 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c188:	b8 08 00 00 00       	mov    eax,0x8
c001c18d:	c3                   	ret    

c001c18e <ISO9660::seek(void*, unsigned long long)>:
c001c18e:	53                   	push   ebx
c001c18f:	b8 04 00 00 00       	mov    eax,0x4
c001c194:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c198:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c19c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c1a0:	85 d2                	test   edx,edx
c001c1a2:	74 17                	je     c001c1bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c1a4:	89 c8                	mov    eax,ecx
c001c1a6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c1a9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c1ac:	b8 01 00 00 00       	mov    eax,0x1
c001c1b1:	73 08                	jae    c001c1bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c1b3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c1b6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c1b9:	31 c0                	xor    eax,eax
c001c1bb:	5b                   	pop    ebx
c001c1bc:	c3                   	ret    
c001c1bd:	90                   	nop

c001c1be <ISO9660::tell(void*, unsigned long long*)>:
c001c1be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1c6:	85 d2                	test   edx,edx
c001c1c8:	74 12                	je     c001c1dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c1ca:	85 c0                	test   eax,eax
c001c1cc:	74 0e                	je     c001c1dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c1ce:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c1d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c1d4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c1d7:	89 10                	mov    DWORD PTR [eax],edx
c001c1d9:	31 c0                	xor    eax,eax
c001c1db:	c3                   	ret    
c001c1dc:	b8 04 00 00 00       	mov    eax,0x4
c001c1e1:	c3                   	ret    

c001c1e2 <ISO9660::getName()>:
c001c1e2:	b8 dc 66 02 c0       	mov    eax,0xc00266dc
c001c1e7:	c3                   	ret    

c001c1e8 <ISO9660::stat(void*, unsigned long long*)>:
c001c1e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1f0:	85 d2                	test   edx,edx
c001c1f2:	74 12                	je     c001c206 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c1f4:	85 c0                	test   eax,eax
c001c1f6:	74 0e                	je     c001c206 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c1f8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c1fb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c1fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c201:	89 10                	mov    DWORD PTR [eax],edx
c001c203:	31 c0                	xor    eax,eax
c001c205:	c3                   	ret    
c001c206:	b8 04 00 00 00       	mov    eax,0x4
c001c20b:	c3                   	ret    

c001c20c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c20c:	b8 01 00 00 00       	mov    eax,0x1
c001c211:	c3                   	ret    

c001c212 <ISO9660::unlink(char const*)>:
c001c212:	b8 01 00 00 00       	mov    eax,0x1
c001c217:	c3                   	ret    

c001c218 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c218:	b8 01 00 00 00       	mov    eax,0x1
c001c21d:	c3                   	ret    

c001c21e <ISO9660::rename(char const*, char const*)>:
c001c21e:	b8 01 00 00 00       	mov    eax,0x1
c001c223:	c3                   	ret    

c001c224 <ISO9660::mkdir(char const*)>:
c001c224:	b8 01 00 00 00       	mov    eax,0x1
c001c229:	c3                   	ret    

c001c22a <ISO9660::close(void*)>:
c001c22a:	83 ec 0c             	sub    esp,0xc
c001c22d:	b8 04 00 00 00       	mov    eax,0x4
c001c232:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c236:	85 d2                	test   edx,edx
c001c238:	74 0e                	je     c001c248 <ISO9660::close(void*)+0x1e>
c001c23a:	83 ec 0c             	sub    esp,0xc
c001c23d:	52                   	push   edx
c001c23e:	e8 0c db fe ff       	call   c0009d4f <free>
c001c243:	83 c4 10             	add    esp,0x10
c001c246:	31 c0                	xor    eax,eax
c001c248:	83 c4 0c             	add    esp,0xc
c001c24b:	c3                   	ret    

c001c24c <ISO9660::closeDir(void*)>:
c001c24c:	83 ec 0c             	sub    esp,0xc
c001c24f:	b8 04 00 00 00       	mov    eax,0x4
c001c254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c258:	85 d2                	test   edx,edx
c001c25a:	74 0e                	je     c001c26a <ISO9660::closeDir(void*)+0x1e>
c001c25c:	83 ec 0c             	sub    esp,0xc
c001c25f:	52                   	push   edx
c001c260:	e8 ea da fe ff       	call   c0009d4f <free>
c001c265:	83 c4 10             	add    esp,0x10
c001c268:	31 c0                	xor    eax,eax
c001c26a:	83 c4 0c             	add    esp,0xc
c001c26d:	c3                   	ret    

c001c26e <ISO9660::~ISO9660()>:
c001c26e:	83 ec 0c             	sub    esp,0xc
c001c271:	ba 00 67 02 c0       	mov    edx,0xc0026700
c001c276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27a:	89 10                	mov    DWORD PTR [eax],edx
c001c27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c280:	83 ec 0c             	sub    esp,0xc
c001c283:	50                   	push   eax
c001c284:	e8 fd 10 ff ff       	call   c000d386 <Filesystem::~Filesystem()>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	90                   	nop
c001c28d:	83 c4 0c             	add    esp,0xc
c001c290:	c3                   	ret    
c001c291:	90                   	nop

c001c292 <ISO9660::~ISO9660()>:
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	83 ec 0c             	sub    esp,0xc
c001c298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c29c:	e8 cd ff ff ff       	call   c001c26e <ISO9660::~ISO9660()>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	83 ec 08             	sub    esp,0x8
c001c2a7:	6a 08                	push   0x8
c001c2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2ad:	e8 b8 0c ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c001c2b2:	83 c4 10             	add    esp,0x10
c001c2b5:	83 c4 0c             	add    esp,0xc
c001c2b8:	c3                   	ret    

c001c2b9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c2b9:	55                   	push   ebp
c001c2ba:	31 c9                	xor    ecx,ecx
c001c2bc:	57                   	push   edi
c001c2bd:	56                   	push   esi
c001c2be:	53                   	push   ebx
c001c2bf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c2c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c2c7:	89 eb                	mov    ebx,ebp
c001c2c9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c2cd:	39 ce                	cmp    esi,ecx
c001c2cf:	7e 17                	jle    c001c2e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c2d1:	31 d2                	xor    edx,edx
c001c2d3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c2d7:	7d 13                	jge    c001c2ec <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c2d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c2dd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c2e0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c2e3:	75 0d                	jne    c001c2f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c2e5:	42                   	inc    edx
c001c2e6:	eb eb                	jmp    c001c2d3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c2e8:	31 c0                	xor    eax,eax
c001c2ea:	eb 0a                	jmp    c001c2f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c2ec:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c2f0:	eb 04                	jmp    c001c2f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c2f2:	41                   	inc    ecx
c001c2f3:	43                   	inc    ebx
c001c2f4:	eb d7                	jmp    c001c2cd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c2f6:	5b                   	pop    ebx
c001c2f7:	5e                   	pop    esi
c001c2f8:	5f                   	pop    edi
c001c2f9:	5d                   	pop    ebp
c001c2fa:	c3                   	ret    

c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c2fb:	57                   	push   edi
c001c2fc:	56                   	push   esi
c001c2fd:	53                   	push   ebx
c001c2fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c302:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c306:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c30a:	39 35 80 99 02 c0    	cmp    DWORD PTR ds:0xc0029980,esi
c001c310:	75 08                	jne    c001c31a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c312:	38 1d 94 7c 02 c0    	cmp    BYTE PTR ds:0xc0027c94,bl
c001c318:	74 4a                	je     c001c364 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c31a:	83 ec 0c             	sub    esp,0xc
c001c31d:	31 d2                	xor    edx,edx
c001c31f:	68 a0 99 02 c0       	push   0xc00299a0
c001c324:	0f be c3             	movsx  eax,bl
c001c327:	6a 01                	push   0x1
c001c329:	52                   	push   edx
c001c32a:	56                   	push   esi
c001c32b:	ff 34 85 1c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78e4]
c001c332:	e8 d7 45 ff ff       	call   c001090e <LogicalDisk::read(unsigned long long, int, void*)>
c001c337:	83 c4 20             	add    esp,0x20
c001c33a:	85 c0                	test   eax,eax
c001c33c:	75 0e                	jne    c001c34c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c33e:	89 35 80 99 02 c0    	mov    DWORD PTR ds:0xc0029980,esi
c001c344:	88 1d 94 7c 02 c0    	mov    BYTE PTR ds:0xc0027c94,bl
c001c34a:	eb 18                	jmp    c001c364 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c34c:	50                   	push   eax
c001c34d:	68 00 08 00 00       	push   0x800
c001c352:	6a 00                	push   0x0
c001c354:	57                   	push   edi
c001c355:	e8 2a 43 fe ff       	call   c0000684 <memset>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	b8 01 00 00 00       	mov    eax,0x1
c001c362:	eb 0e                	jmp    c001c372 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c364:	be a0 99 02 c0       	mov    esi,0xc00299a0
c001c369:	b9 00 08 00 00       	mov    ecx,0x800
c001c36e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c370:	31 c0                	xor    eax,eax
c001c372:	5b                   	pop    ebx
c001c373:	5e                   	pop    esi
c001c374:	5f                   	pop    edi
c001c375:	c3                   	ret    

c001c376 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c376:	81 ec 10 08 00 00    	sub    esp,0x810
c001c37c:	c7 05 80 99 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029980,0xdeadbeef
c001c386:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c38d:	83 c0 41             	add    eax,0x41
c001c390:	0f be c0             	movsx  eax,al
c001c393:	50                   	push   eax
c001c394:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c398:	50                   	push   eax
c001c399:	6a 10                	push   0x10
c001c39b:	e8 5b ff ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	31 d2                	xor    edx,edx
c001c3a5:	85 c0                	test   eax,eax
c001c3a7:	75 24                	jne    c001c3cd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3a9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c3ae:	75 1d                	jne    c001c3cd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3b0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c3b5:	75 16                	jne    c001c3cd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3b7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c3bc:	75 0f                	jne    c001c3cd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3be:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c3c3:	75 08                	jne    c001c3cd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3c5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c3ca:	0f 94 c2             	sete   dl
c001c3cd:	88 d0                	mov    al,dl
c001c3cf:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c3d5:	c3                   	ret    

c001c3d6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c3d6:	55                   	push   ebp
c001c3d7:	57                   	push   edi
c001c3d8:	56                   	push   esi
c001c3d9:	53                   	push   ebx
c001c3da:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c3e0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c3e7:	85 ed                	test   ebp,ebp
c001c3e9:	0f 84 da 01 00 00    	je     c001c5c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c3ef:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c3f7:	0f 84 cc 01 00 00    	je     c001c5c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c3fd:	b8 01 00 00 00       	mov    eax,0x1
c001c402:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c406:	0f 85 c2 01 00 00    	jne    c001c5ce <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c40c:	31 d2                	xor    edx,edx
c001c40e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c415:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c418:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c41b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c41e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c421:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c425:	01 c8                	add    eax,ecx
c001c427:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c42a:	11 da                	adc    edx,ebx
c001c42c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c430:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c434:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c438:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c43c:	19 d7                	sbb    edi,edx
c001c43e:	72 11                	jb     c001c451 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c440:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c443:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c447:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c44b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c44f:	eb 0c                	jmp    c001c45d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c451:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c455:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c459:	29 ce                	sub    esi,ecx
c001c45b:	19 df                	sbb    edi,ebx
c001c45d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c460:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c463:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c467:	c1 e0 0b             	shl    eax,0xb
c001c46a:	01 c8                	add    eax,ecx
c001c46c:	11 da                	adc    edx,ebx
c001c46e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c471:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c475:	51                   	push   ecx
c001c476:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c47a:	50                   	push   eax
c001c47b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c47f:	53                   	push   ebx
c001c480:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c488:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c48c:	50                   	push   eax
c001c48d:	e8 69 fe ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c492:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c495:	b8 00 08 00 00       	mov    eax,0x800
c001c49a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c4a0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c4a4:	29 d0                	sub    eax,edx
c001c4a6:	83 c4 10             	add    esp,0x10
c001c4a9:	89 f9                	mov    ecx,edi
c001c4ab:	39 c6                	cmp    esi,eax
c001c4ad:	83 d9 00             	sbb    ecx,0x0
c001c4b0:	7d 1b                	jge    c001c4cd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c4b2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c4b7:	75 12                	jne    c001c4cb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c4b9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4c6:	e9 fa 00 00 00       	jmp    c001c5c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c4cb:	89 f0                	mov    eax,esi
c001c4cd:	01 d3                	add    ebx,edx
c001c4cf:	31 d2                	xor    edx,edx
c001c4d1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c4d5:	39 c2                	cmp    edx,eax
c001c4d7:	7d 14                	jge    c001c4ed <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c4d9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c4e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c4e4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c4e7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c4ea:	42                   	inc    edx
c001c4eb:	eb e8                	jmp    c001c4d5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c4ed:	89 c2                	mov    edx,eax
c001c4ef:	85 c0                	test   eax,eax
c001c4f1:	79 02                	jns    c001c4f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c4f3:	31 d2                	xor    edx,edx
c001c4f5:	01 c2                	add    edx,eax
c001c4f7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c4fa:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c501:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c505:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c509:	99                   	cdq    
c001c50a:	01 c1                	add    ecx,eax
c001c50c:	11 d3                	adc    ebx,edx
c001c50e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c512:	29 c6                	sub    esi,eax
c001c514:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c518:	19 d7                	sbb    edi,edx
c001c51a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c51d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c521:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c526:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c529:	b8 00 00 00 00       	mov    eax,0x0
c001c52e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c532:	7d 43                	jge    c001c577 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c534:	52                   	push   edx
c001c535:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c539:	50                   	push   eax
c001c53a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c53e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c542:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c546:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c54a:	50                   	push   eax
c001c54b:	e8 ab fd ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c550:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c558:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c55d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c565:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c56d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c572:	83 c4 10             	add    esp,0x10
c001c575:	eb aa                	jmp    c001c521 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c577:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c57e:	74 2a                	je     c001c5aa <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c580:	50                   	push   eax
c001c581:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c585:	50                   	push   eax
c001c586:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c58a:	56                   	push   esi
c001c58b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c58f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c593:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c597:	51                   	push   ecx
c001c598:	e8 5e fd ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c59d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c5a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c5a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c5b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c5b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5b9:	89 18                	mov    DWORD PTR [eax],ebx
c001c5bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5bf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c5c2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c5c5:	31 c0                	xor    eax,eax
c001c5c7:	eb 05                	jmp    c001c5ce <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c5c9:	b8 04 00 00 00       	mov    eax,0x4
c001c5ce:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c5d4:	5b                   	pop    ebx
c001c5d5:	5e                   	pop    esi
c001c5d6:	5f                   	pop    edi
c001c5d7:	5d                   	pop    ebp
c001c5d8:	c3                   	ret    
c001c5d9:	90                   	nop

c001c5da <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c5da:	55                   	push   ebp
c001c5db:	57                   	push   edi
c001c5dc:	56                   	push   esi
c001c5dd:	53                   	push   ebx
c001c5de:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c5e4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c5eb:	85 ed                	test   ebp,ebp
c001c5ed:	0f 84 51 02 00 00    	je     c001c844 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c5f3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c5fb:	0f 84 43 02 00 00    	je     c001c844 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c601:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c604:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c607:	75 0a                	jne    c001c613 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c609:	b8 07 00 00 00       	mov    eax,0x7
c001c60e:	e9 36 02 00 00       	jmp    c001c849 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c613:	50                   	push   eax
c001c614:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c618:	50                   	push   eax
c001c619:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c620:	53                   	push   ebx
c001c621:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c624:	c1 e0 0b             	shl    eax,0xb
c001c627:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c62a:	c1 e8 0b             	shr    eax,0xb
c001c62d:	50                   	push   eax
c001c62e:	e8 c8 fc ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c636:	83 c4 10             	add    esp,0x10
c001c639:	89 c1                	mov    ecx,eax
c001c63b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c63e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c644:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c647:	84 db                	test   bl,bl
c001c649:	0f 85 8b 00 00 00    	jne    c001c6da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c64f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c655:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c658:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c65e:	29 c6                	sub    esi,eax
c001c660:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c664:	89 f3                	mov    ebx,esi
c001c666:	89 f1                	mov    ecx,esi
c001c668:	c1 fb 1f             	sar    ebx,0x1f
c001c66b:	01 f0                	add    eax,esi
c001c66d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c670:	11 da                	adc    edx,ebx
c001c672:	89 04 24             	mov    DWORD PTR [esp],eax
c001c675:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c679:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c67c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c67f:	89 d8                	mov    eax,ebx
c001c681:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c685:	ba 00 00 00 00       	mov    edx,0x0
c001c68a:	19 f8                	sbb    eax,edi
c001c68c:	b8 00 00 00 00       	mov    eax,0x0
c001c691:	73 08                	jae    c001c69b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c693:	89 f0                	mov    eax,esi
c001c695:	89 fa                	mov    edx,edi
c001c697:	29 c8                	sub    eax,ecx
c001c699:	19 da                	sbb    edx,ebx
c001c69b:	89 d7                	mov    edi,edx
c001c69d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c6a0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c6a3:	09 c7                	or     edi,eax
c001c6a5:	0f 84 5e ff ff ff    	je     c001c609 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c6ab:	57                   	push   edi
c001c6ac:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6b0:	50                   	push   eax
c001c6b1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c6b8:	53                   	push   ebx
c001c6b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6bc:	c1 e0 0b             	shl    eax,0xb
c001c6bf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c6c3:	c1 e8 0b             	shr    eax,0xb
c001c6c6:	50                   	push   eax
c001c6c7:	e8 2f fc ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c6cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	25 ff 07 00 00       	and    eax,0x7ff
c001c6d7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c6da:	31 ff                	xor    edi,edi
c001c6dc:	56                   	push   esi
c001c6dd:	6a 28                	push   0x28
c001c6df:	6a 00                	push   0x0
c001c6e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c6e5:	50                   	push   eax
c001c6e6:	e8 99 3f fe ff       	call   c0000684 <memset>
c001c6eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c6ee:	25 ff 07 00 00       	and    eax,0x7ff
c001c6f3:	89 c6                	mov    esi,eax
c001c6f5:	83 c6 21             	add    esi,0x21
c001c6f8:	83 d7 00             	adc    edi,0x0
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	31 c9                	xor    ecx,ecx
c001c700:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c707:	83 f9 28             	cmp    ecx,0x28
c001c70a:	88 04 24             	mov    BYTE PTR [esp],al
c001c70d:	0f 94 c2             	sete   dl
c001c710:	88 d0                	mov    al,dl
c001c712:	ba ff 07 00 00       	mov    edx,0x7ff
c001c717:	39 f2                	cmp    edx,esi
c001c719:	ba 00 00 00 00       	mov    edx,0x0
c001c71e:	19 fa                	sbb    edx,edi
c001c720:	0f 92 c2             	setb   dl
c001c723:	09 c2                	or     edx,eax
c001c725:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c729:	0f 94 c0             	sete   al
c001c72c:	08 d0                	or     al,dl
c001c72e:	75 16                	jne    c001c746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c730:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c734:	74 10                	je     c001c746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c736:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c739:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c73d:	41                   	inc    ecx
c001c73e:	83 c6 01             	add    esi,0x1
c001c741:	83 d7 00             	adc    edi,0x0
c001c744:	eb ba                	jmp    c001c700 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c746:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c74d:	83 ec 0c             	sub    esp,0xc
c001c750:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c754:	56                   	push   esi
c001c755:	e8 46 3f fe ff       	call   c00006a0 <strlen>
c001c75a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c761:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c765:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c76d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c770:	5a                   	pop    edx
c001c771:	25 ff 07 00 00       	and    eax,0x7ff
c001c776:	59                   	pop    ecx
c001c777:	01 f8                	add    eax,edi
c001c779:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c77f:	83 e0 02             	and    eax,0x2
c001c782:	3c 01                	cmp    al,0x1
c001c784:	19 c0                	sbb    eax,eax
c001c786:	83 c0 02             	add    eax,0x2
c001c789:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c78d:	56                   	push   esi
c001c78e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c792:	50                   	push   eax
c001c793:	e8 a8 3f fe ff       	call   c0000740 <strcpy>
c001c798:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	84 c0                	test   al,al
c001c7a1:	75 21                	jne    c001c7c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c7a3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c7ab:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c7b3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c7bb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c7c2:	eb 28                	jmp    c001c7ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c7c4:	fe c8                	dec    al
c001c7c6:	75 24                	jne    c001c7ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c7c8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c7d0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c7d8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c7e0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c7e7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c7ec:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c7f0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c7f7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c7fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c800:	0f b6 f3             	movzx  esi,bl
c001c803:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c80a:	31 db                	xor    ebx,ebx
c001c80c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c812:	89 df                	mov    edi,ebx
c001c814:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c81a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c81d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c820:	39 c6                	cmp    esi,eax
c001c822:	19 d7                	sbb    edi,edx
c001c824:	72 10                	jb     c001c836 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c826:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c82d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c834:	eb 0a                	jmp    c001c840 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c836:	29 f0                	sub    eax,esi
c001c838:	19 da                	sbb    edx,ebx
c001c83a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c83d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c840:	31 c0                	xor    eax,eax
c001c842:	eb 05                	jmp    c001c849 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c844:	b8 04 00 00 00       	mov    eax,0x4
c001c849:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c84f:	5b                   	pop    ebx
c001c850:	5e                   	pop    esi
c001c851:	5f                   	pop    edi
c001c852:	5d                   	pop    ebp
c001c853:	c3                   	ret    

c001c854 <readRoot(unsigned int*, unsigned int*, char)>:
c001c854:	57                   	push   edi
c001c855:	56                   	push   esi
c001c856:	81 ec 38 08 00 00    	sub    esp,0x838
c001c85c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c864:	50                   	push   eax
c001c865:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c869:	50                   	push   eax
c001c86a:	6a 10                	push   0x10
c001c86c:	e8 8a fa ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c871:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c878:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c87c:	b9 22 00 00 00       	mov    ecx,0x22
c001c881:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c883:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c88a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c88e:	89 10                	mov    DWORD PTR [eax],edx
c001c890:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c897:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c89b:	89 10                	mov    DWORD PTR [eax],edx
c001c89d:	81 c4 44 08 00 00    	add    esp,0x844
c001c8a3:	b0 01                	mov    al,0x1
c001c8a5:	5e                   	pop    esi
c001c8a6:	5f                   	pop    edi
c001c8a7:	c3                   	ret    

c001c8a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c8a8:	55                   	push   ebp
c001c8a9:	57                   	push   edi
c001c8aa:	56                   	push   esi
c001c8ab:	53                   	push   ebx
c001c8ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8b2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c8b9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c8c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8c4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c8c8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c8d0:	75 03                	jne    c001c8d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c8d2:	83 c3 02             	add    ebx,0x2
c001c8d5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c8d8:	75 03                	jne    c001c8dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c8da:	43                   	inc    ebx
c001c8db:	eb f8                	jmp    c001c8d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c8dd:	52                   	push   edx
c001c8de:	68 00 01 00 00       	push   0x100
c001c8e3:	6a 00                	push   0x0
c001c8e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c8e9:	50                   	push   eax
c001c8ea:	e8 95 3d fe ff       	call   c0000684 <memset>
c001c8ef:	83 c4 10             	add    esp,0x10
c001c8f2:	31 d2                	xor    edx,edx
c001c8f4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c8f7:	84 c0                	test   al,al
c001c8f9:	74 21                	je     c001c91c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c8fb:	3c 2f                	cmp    al,0x2f
c001c8fd:	75 0b                	jne    c001c90a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c8ff:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c903:	bd 01 00 00 00       	mov    ebp,0x1
c001c908:	eb 14                	jmp    c001c91e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c90a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c90d:	80 f9 19             	cmp    cl,0x19
c001c910:	77 03                	ja     c001c915 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c912:	83 e8 20             	sub    eax,0x20
c001c915:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c919:	42                   	inc    edx
c001c91a:	eb d8                	jmp    c001c8f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c91c:	31 ed                	xor    ebp,ebp
c001c91e:	83 ec 0c             	sub    esp,0xc
c001c921:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c928:	e8 12 d4 fe ff       	call   c0009d3f <malloc>
c001c92d:	89 c6                	mov    esi,eax
c001c92f:	89 c2                	mov    edx,eax
c001c931:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c938:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001c93e:	c1 ef 0b             	shr    edi,0xb
c001c941:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c948:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c94c:	83 c4 10             	add    esp,0x10
c001c94f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c958:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001c95f:	74 29                	je     c001c98a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001c961:	50                   	push   eax
c001c962:	57                   	push   edi
c001c963:	52                   	push   edx
c001c964:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c968:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c96f:	e8 87 f9 ff ff       	call   c001c2fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c974:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c978:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c97f:	81 c2 00 08 00 00    	add    edx,0x800
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	eb ca                	jmp    c001c954 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c991:	57                   	push   edi
c001c992:	e8 09 3d fe ff       	call   c00006a0 <strlen>
c001c997:	50                   	push   eax
c001c998:	57                   	push   edi
c001c999:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c9a0:	56                   	push   esi
c001c9a1:	e8 13 f9 ff ff       	call   c001c2b9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c9a6:	83 c4 20             	add    esp,0x20
c001c9a9:	85 c0                	test   eax,eax
c001c9ab:	75 13                	jne    c001c9c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001c9ad:	83 ec 0c             	sub    esp,0xc
c001c9b0:	56                   	push   esi
c001c9b1:	e8 99 d3 fe ff       	call   c0009d4f <free>
c001c9b6:	83 c4 10             	add    esp,0x10
c001c9b9:	31 c0                	xor    eax,eax
c001c9bb:	e9 b3 00 00 00       	jmp    c001ca73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c9c0:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c9c4:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c9c8:	c1 e7 08             	shl    edi,0x8
c001c9cb:	c1 e2 10             	shl    edx,0x10
c001c9ce:	09 d7                	or     edi,edx
c001c9d0:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c9d4:	09 d7                	or     edi,edx
c001c9d6:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c9da:	c1 e2 18             	shl    edx,0x18
c001c9dd:	09 d7                	or     edi,edx
c001c9df:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c9e3:	89 d1                	mov    ecx,edx
c001c9e5:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c9e9:	c1 e1 08             	shl    ecx,0x8
c001c9ec:	c1 e2 10             	shl    edx,0x10
c001c9ef:	09 ca                	or     edx,ecx
c001c9f1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c9f5:	09 ca                	or     edx,ecx
c001c9f7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c9fb:	c1 e1 18             	shl    ecx,0x18
c001c9fe:	09 ca                	or     edx,ecx
c001ca00:	89 e9                	mov    ecx,ebp
c001ca02:	84 c9                	test   cl,cl
c001ca04:	74 3c                	je     c001ca42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001ca06:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	56                   	push   esi
c001ca0e:	e8 3c d3 fe ff       	call   c0009d4f <free>
c001ca13:	83 c4 0c             	add    esp,0xc
c001ca16:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ca1d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ca22:	50                   	push   eax
c001ca23:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ca2a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ca31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca35:	52                   	push   edx
c001ca36:	57                   	push   edi
c001ca37:	53                   	push   ebx
c001ca38:	e8 6b fe ff ff       	call   c001c8a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ca3d:	83 c4 20             	add    esp,0x20
c001ca40:	eb 31                	jmp    c001ca73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001ca42:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ca45:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ca4c:	d0 e8                	shr    al,1
c001ca4e:	89 3b                	mov    DWORD PTR [ebx],edi
c001ca50:	83 e0 01             	and    eax,0x1
c001ca53:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ca5a:	83 ec 0c             	sub    esp,0xc
c001ca5d:	89 13                	mov    DWORD PTR [ebx],edx
c001ca5f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ca66:	89 03                	mov    DWORD PTR [ebx],eax
c001ca68:	56                   	push   esi
c001ca69:	e8 e1 d2 fe ff       	call   c0009d4f <free>
c001ca6e:	83 c4 10             	add    esp,0x10
c001ca71:	b0 01                	mov    al,0x1
c001ca73:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ca79:	5b                   	pop    ebx
c001ca7a:	5e                   	pop    esi
c001ca7b:	5f                   	pop    edi
c001ca7c:	5d                   	pop    ebp
c001ca7d:	c3                   	ret    

c001ca7e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ca7e:	55                   	push   ebp
c001ca7f:	57                   	push   edi
c001ca80:	56                   	push   esi
c001ca81:	53                   	push   ebx
c001ca82:	83 ec 20             	sub    esp,0x20
c001ca85:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ca89:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ca8d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ca91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca99:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001caa1:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001caa6:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001caac:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001cab2:	57                   	push   edi
c001cab3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cab7:	50                   	push   eax
c001cab8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cabc:	50                   	push   eax
c001cabd:	e8 92 fd ff ff       	call   c001c854 <readRoot(unsigned int*, unsigned int*, char)>
c001cac2:	5a                   	pop    edx
c001cac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cac7:	e8 d4 3b fe ff       	call   c00006a0 <strlen>
c001cacc:	83 c4 10             	add    esp,0x10
c001cacf:	83 f8 03             	cmp    eax,0x3
c001cad2:	77 17                	ja     c001caeb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cad8:	89 03                	mov    DWORD PTR [ebx],eax
c001cada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cade:	89 06                	mov    DWORD PTR [esi],eax
c001cae0:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001cae7:	b0 01                	mov    al,0x1
c001cae9:	eb 19                	jmp    c001cb04 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001caeb:	50                   	push   eax
c001caec:	55                   	push   ebp
c001caed:	57                   	push   edi
c001caee:	56                   	push   esi
c001caef:	53                   	push   ebx
c001caf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cafc:	e8 a7 fd ff ff       	call   c001c8a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cb01:	83 c4 20             	add    esp,0x20
c001cb04:	83 c4 1c             	add    esp,0x1c
c001cb07:	5b                   	pop    ebx
c001cb08:	5e                   	pop    esi
c001cb09:	5f                   	pop    edi
c001cb0a:	5d                   	pop    ebp
c001cb0b:	c3                   	ret    

c001cb0c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cb0c:	57                   	push   edi
c001cb0d:	56                   	push   esi
c001cb0e:	53                   	push   ebx
c001cb0f:	83 ec 10             	sub    esp,0x10
c001cb12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb16:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb1a:	85 ff                	test   edi,edi
c001cb1c:	0f 84 8b 00 00 00    	je     c001cbad <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cb22:	85 f6                	test   esi,esi
c001cb24:	0f 84 83 00 00 00    	je     c001cbad <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cb2a:	b8 03 00 00 00       	mov    eax,0x3
c001cb2f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001cb34:	75 7c                	jne    c001cbb2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cb36:	83 ec 0c             	sub    esp,0xc
c001cb39:	6a 1c                	push   0x1c
c001cb3b:	e8 ff d1 fe ff       	call   c0009d3f <malloc>
c001cb40:	89 07                	mov    DWORD PTR [edi],eax
c001cb42:	89 c3                	mov    ebx,eax
c001cb44:	58                   	pop    eax
c001cb45:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb49:	50                   	push   eax
c001cb4a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cb4d:	50                   	push   eax
c001cb4e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb52:	50                   	push   eax
c001cb53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb57:	50                   	push   eax
c001cb58:	56                   	push   esi
c001cb59:	e8 20 ff ff ff       	call   c001ca7e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb5e:	83 c4 20             	add    esp,0x20
c001cb61:	84 c0                	test   al,al
c001cb63:	74 07                	je     c001cb6c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001cb65:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb6a:	74 0b                	je     c001cb77 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001cb6c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cb70:	b8 01 00 00 00       	mov    eax,0x1
c001cb75:	eb 3b                	jmp    c001cbb2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cb77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cb7f:	89 03                	mov    DWORD PTR [ebx],eax
c001cb81:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cb93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb9a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb9d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cba4:	8a 06                	mov    al,BYTE PTR [esi]
c001cba6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cba9:	31 c0                	xor    eax,eax
c001cbab:	eb 05                	jmp    c001cbb2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cbad:	b8 04 00 00 00       	mov    eax,0x4
c001cbb2:	83 c4 10             	add    esp,0x10
c001cbb5:	5b                   	pop    ebx
c001cbb6:	5e                   	pop    esi
c001cbb7:	5f                   	pop    edi
c001cbb8:	c3                   	ret    
c001cbb9:	90                   	nop

c001cbba <ISO9660::exists(char const*)>:
c001cbba:	83 ec 28             	sub    esp,0x28
c001cbbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbc1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cbc5:	52                   	push   edx
c001cbc6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cbc9:	52                   	push   edx
c001cbca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cbce:	52                   	push   edx
c001cbcf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cbd3:	52                   	push   edx
c001cbd4:	50                   	push   eax
c001cbd5:	e8 a4 fe ff ff       	call   c001ca7e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cbda:	83 c4 3c             	add    esp,0x3c
c001cbdd:	c3                   	ret    

c001cbde <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cbde:	56                   	push   esi
c001cbdf:	53                   	push   ebx
c001cbe0:	83 ec 14             	sub    esp,0x14
c001cbe3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cbe7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cbeb:	85 db                	test   ebx,ebx
c001cbed:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cbf1:	0f 94 c2             	sete   dl
c001cbf4:	85 f6                	test   esi,esi
c001cbf6:	0f 94 c0             	sete   al
c001cbf9:	08 c2                	or     dl,al
c001cbfb:	75 68                	jne    c001cc65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cbfd:	85 c9                	test   ecx,ecx
c001cbff:	74 64                	je     c001cc65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cc01:	83 ec 0c             	sub    esp,0xc
c001cc04:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cc07:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc0b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cc11:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc18:	50                   	push   eax
c001cc19:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cc1c:	50                   	push   eax
c001cc1d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc21:	50                   	push   eax
c001cc22:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc26:	50                   	push   eax
c001cc27:	51                   	push   ecx
c001cc28:	e8 51 fe ff ff       	call   c001ca7e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cc2d:	83 c4 20             	add    esp,0x20
c001cc30:	ba 01 00 00 00       	mov    edx,0x1
c001cc35:	84 c0                	test   al,al
c001cc37:	74 31                	je     c001cc6a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cc39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc44:	89 03                	mov    DWORD PTR [ebx],eax
c001cc46:	ba 00 00 00 00       	mov    edx,0x0
c001cc4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc4f:	85 c0                	test   eax,eax
c001cc51:	0f 95 06             	setne  BYTE PTR [esi]
c001cc54:	74 14                	je     c001cc6a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cc56:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cc5c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc63:	eb 05                	jmp    c001cc6a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cc65:	ba 04 00 00 00       	mov    edx,0x4
c001cc6a:	83 c4 14             	add    esp,0x14
c001cc6d:	89 d0                	mov    eax,edx
c001cc6f:	5b                   	pop    ebx
c001cc70:	5e                   	pop    esi
c001cc71:	c3                   	ret    

c001cc72 <ISO9660::openDir(char const*, void**)>:
c001cc72:	57                   	push   edi
c001cc73:	56                   	push   esi
c001cc74:	53                   	push   ebx
c001cc75:	83 ec 10             	sub    esp,0x10
c001cc78:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc80:	85 ff                	test   edi,edi
c001cc82:	74 7b                	je     c001ccff <ISO9660::openDir(char const*, void**)+0x8d>
c001cc84:	85 f6                	test   esi,esi
c001cc86:	74 77                	je     c001ccff <ISO9660::openDir(char const*, void**)+0x8d>
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	6a 1c                	push   0x1c
c001cc8d:	e8 ad d0 fe ff       	call   c0009d3f <malloc>
c001cc92:	89 07                	mov    DWORD PTR [edi],eax
c001cc94:	89 c3                	mov    ebx,eax
c001cc96:	58                   	pop    eax
c001cc97:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc9b:	50                   	push   eax
c001cc9c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cc9f:	50                   	push   eax
c001cca0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cca4:	50                   	push   eax
c001cca5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cca9:	50                   	push   eax
c001ccaa:	56                   	push   esi
c001ccab:	e8 ce fd ff ff       	call   c001ca7e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ccb0:	83 c4 20             	add    esp,0x20
c001ccb3:	84 c0                	test   al,al
c001ccb5:	74 07                	je     c001ccbe <ISO9660::openDir(char const*, void**)+0x4c>
c001ccb7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ccbc:	75 0b                	jne    c001ccc9 <ISO9660::openDir(char const*, void**)+0x57>
c001ccbe:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ccc2:	b8 01 00 00 00       	mov    eax,0x1
c001ccc7:	eb 3b                	jmp    c001cd04 <ISO9660::openDir(char const*, void**)+0x92>
c001ccc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cccd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ccd1:	89 03                	mov    DWORD PTR [ebx],eax
c001ccd3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ccda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccde:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cce5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ccec:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ccef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ccf6:	8a 06                	mov    al,BYTE PTR [esi]
c001ccf8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ccfb:	31 c0                	xor    eax,eax
c001ccfd:	eb 05                	jmp    c001cd04 <ISO9660::openDir(char const*, void**)+0x92>
c001ccff:	b8 04 00 00 00       	mov    eax,0x4
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	5b                   	pop    ebx
c001cd08:	5e                   	pop    esi
c001cd09:	5f                   	pop    edi
c001cd0a:	c3                   	ret    
c001cd0b:	90                   	nop

c001cd0c <ISO9660::ISO9660()>:
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	50                   	push   eax
c001cd17:	e8 46 06 ff ff       	call   c000d362 <Filesystem::Filesystem()>
c001cd1c:	83 c4 10             	add    esp,0x10
c001cd1f:	ba 00 67 02 c0       	mov    edx,0xc0026700
c001cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd28:	89 10                	mov    DWORD PTR [eax],edx
c001cd2a:	90                   	nop
c001cd2b:	83 c4 0c             	add    esp,0xc
c001cd2e:	c3                   	ret    
c001cd2f:	90                   	nop

c001cd30 <SoundCard::beginPlayback()>:
c001cd30:	c7 44 24 04 60 67 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026760
c001cd38:	e9 30 83 ff ff       	jmp    c001506d <Krnl::panic(char const*)>
c001cd3d:	90                   	nop

c001cd3e <SoundCard::stopPlayback()>:
c001cd3e:	c7 44 24 04 94 67 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026794
c001cd46:	e9 22 83 ff ff       	jmp    c001506d <Krnl::panic(char const*)>
c001cd4b:	90                   	nop

c001cd4c <SoundCard::SoundCard(char const*)>:
c001cd4c:	83 ec 1c             	sub    esp,0x1c
c001cd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd53:	83 ec 08             	sub    esp,0x8
c001cd56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd5a:	50                   	push   eax
c001cd5b:	e8 a2 19 ff ff       	call   c000e702 <Device::Device(char const*)>
c001cd60:	83 c4 10             	add    esp,0x10
c001cd63:	ba 2c 68 02 c0       	mov    edx,0xc002682c
c001cd68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd6c:	89 10                	mov    DWORD PTR [eax],edx
c001cd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd72:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cd79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd7d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cd87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd8b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cd95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd99:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cda3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cdb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdb9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cdbe:	7f 19                	jg     c001cdd9 <SoundCard::SoundCard(char const*)+0x8d>
c001cdc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cdc8:	83 c2 54             	add    edx,0x54
c001cdcb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cdd3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cdd7:	eb e0                	jmp    c001cdb9 <SoundCard::SoundCard(char const*)+0x6d>
c001cdd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cddd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cde4:	90                   	nop
c001cde5:	83 c4 1c             	add    esp,0x1c
c001cde8:	c3                   	ret    
c001cde9:	90                   	nop

c001cdea <SoundCard::~SoundCard()>:
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	ba 2c 68 02 c0       	mov    edx,0xc002682c
c001cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf6:	89 10                	mov    DWORD PTR [eax],edx
c001cdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfc:	83 ec 0c             	sub    esp,0xc
c001cdff:	50                   	push   eax
c001ce00:	e8 c7 15 ff ff       	call   c000e3cc <Device::~Device()>
c001ce05:	83 c4 10             	add    esp,0x10
c001ce08:	90                   	nop
c001ce09:	83 c4 0c             	add    esp,0xc
c001ce0c:	c3                   	ret    
c001ce0d:	90                   	nop

c001ce0e <SoundCard::~SoundCard()>:
c001ce0e:	83 ec 0c             	sub    esp,0xc
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce18:	e8 cd ff ff ff       	call   c001cdea <SoundCard::~SoundCard()>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	83 ec 08             	sub    esp,0x8
c001ce23:	68 e8 01 00 00       	push   0x1e8
c001ce28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce2c:	e8 39 01 ff ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c001ce31:	83 c4 10             	add    esp,0x10
c001ce34:	83 c4 0c             	add    esp,0xc
c001ce37:	c3                   	ret    

c001ce38 <SoundCard::configureRates(int, int, int)>:
c001ce38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce3c:	31 c0                	xor    eax,eax
c001ce3e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ce45:	75 20                	jne    c001ce67 <SoundCard::configureRates(int, int, int)+0x2f>
c001ce47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce4b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ce51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce55:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ce5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ce65:	b0 01                	mov    al,0x1
c001ce67:	c3                   	ret    

c001ce68 <SoundCard::getSamples16(int, short*)>:
c001ce68:	55                   	push   ebp
c001ce69:	57                   	push   edi
c001ce6a:	31 ff                	xor    edi,edi
c001ce6c:	56                   	push   esi
c001ce6d:	53                   	push   ebx
c001ce6e:	31 db                	xor    ebx,ebx
c001ce70:	83 ec 18             	sub    esp,0x18
c001ce73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce77:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ce7b:	68 c7 67 02 c0       	push   0xc00267c7
c001ce80:	e8 c6 01 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001ce85:	83 c4 0c             	add    esp,0xc
c001ce88:	8d 04 36             	lea    eax,[esi+esi*1]
c001ce8b:	50                   	push   eax
c001ce8c:	6a 00                	push   0x0
c001ce8e:	55                   	push   ebp
c001ce8f:	e8 f0 37 fe ff       	call   c0000684 <memset>
c001ce94:	83 c4 10             	add    esp,0x10
c001ce97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce9b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cea2:	85 c0                	test   eax,eax
c001cea4:	74 1b                	je     c001cec1 <SoundCard::getSamples16(int, short*)+0x59>
c001cea6:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ceaa:	75 15                	jne    c001cec1 <SoundCard::getSamples16(int, short*)+0x59>
c001ceac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceb0:	55                   	push   ebp
c001ceb1:	56                   	push   esi
c001ceb2:	50                   	push   eax
c001ceb3:	e8 58 03 00 00       	call   c001d210 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	39 c7                	cmp    edi,eax
c001cebd:	7d 02                	jge    c001cec1 <SoundCard::getSamples16(int, short*)+0x59>
c001cebf:	89 c7                	mov    edi,eax
c001cec1:	43                   	inc    ebx
c001cec2:	83 fb 20             	cmp    ebx,0x20
c001cec5:	75 d0                	jne    c001ce97 <SoundCard::getSamples16(int, short*)+0x2f>
c001cec7:	83 c4 0c             	add    esp,0xc
c001ceca:	89 f8                	mov    eax,edi
c001cecc:	5b                   	pop    ebx
c001cecd:	5e                   	pop    esi
c001cece:	5f                   	pop    edi
c001cecf:	5d                   	pop    ebp
c001ced0:	c3                   	ret    
c001ced1:	90                   	nop

c001ced2 <SoundCard::getSamples32(int, int*)>:
c001ced2:	55                   	push   ebp
c001ced3:	57                   	push   edi
c001ced4:	31 ff                	xor    edi,edi
c001ced6:	56                   	push   esi
c001ced7:	31 f6                	xor    esi,esi
c001ced9:	53                   	push   ebx
c001ceda:	83 ec 10             	sub    esp,0x10
c001cedd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cee1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cee5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cee9:	c1 e0 02             	shl    eax,0x2
c001ceec:	50                   	push   eax
c001ceed:	6a 00                	push   0x0
c001ceef:	55                   	push   ebp
c001cef0:	e8 8f 37 fe ff       	call   c0000684 <memset>
c001cef5:	83 c4 10             	add    esp,0x10
c001cef8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ceff:	85 c0                	test   eax,eax
c001cf01:	74 1b                	je     c001cf1e <SoundCard::getSamples32(int, int*)+0x4c>
c001cf03:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cf07:	75 15                	jne    c001cf1e <SoundCard::getSamples32(int, int*)+0x4c>
c001cf09:	53                   	push   ebx
c001cf0a:	55                   	push   ebp
c001cf0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf0f:	50                   	push   eax
c001cf10:	e8 f7 03 00 00       	call   c001d30c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	39 c6                	cmp    esi,eax
c001cf1a:	7d 02                	jge    c001cf1e <SoundCard::getSamples32(int, int*)+0x4c>
c001cf1c:	89 c6                	mov    esi,eax
c001cf1e:	47                   	inc    edi
c001cf1f:	83 ff 20             	cmp    edi,0x20
c001cf22:	75 d4                	jne    c001cef8 <SoundCard::getSamples32(int, int*)+0x26>
c001cf24:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cf2a:	85 f6                	test   esi,esi
c001cf2c:	75 0f                	jne    c001cf3d <SoundCard::getSamples32(int, int*)+0x6b>
c001cf2e:	84 c0                	test   al,al
c001cf30:	74 1b                	je     c001cf4d <SoundCard::getSamples32(int, int*)+0x7b>
c001cf32:	83 ec 0c             	sub    esp,0xc
c001cf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf37:	53                   	push   ebx
c001cf38:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cf3b:	eb 0d                	jmp    c001cf4a <SoundCard::getSamples32(int, int*)+0x78>
c001cf3d:	84 c0                	test   al,al
c001cf3f:	75 0c                	jne    c001cf4d <SoundCard::getSamples32(int, int*)+0x7b>
c001cf41:	83 ec 0c             	sub    esp,0xc
c001cf44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf46:	53                   	push   ebx
c001cf47:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cf4a:	83 c4 10             	add    esp,0x10
c001cf4d:	83 c4 0c             	add    esp,0xc
c001cf50:	89 f0                	mov    eax,esi
c001cf52:	5b                   	pop    ebx
c001cf53:	5e                   	pop    esi
c001cf54:	5f                   	pop    edi
c001cf55:	5d                   	pop    ebp
c001cf56:	c3                   	ret    
c001cf57:	90                   	nop

c001cf58 <SoundCard::addChannel(SoundPort*)>:
c001cf58:	56                   	push   esi
c001cf59:	53                   	push   ebx
c001cf5a:	53                   	push   ebx
c001cf5b:	31 db                	xor    ebx,ebx
c001cf5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf61:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cf69:	74 27                	je     c001cf92 <SoundCard::addChannel(SoundPort*)+0x3a>
c001cf6b:	43                   	inc    ebx
c001cf6c:	83 fb 20             	cmp    ebx,0x20
c001cf6f:	75 f0                	jne    c001cf61 <SoundCard::addChannel(SoundPort*)+0x9>
c001cf71:	83 ec 0c             	sub    esp,0xc
c001cf74:	83 cb ff             	or     ebx,0xffffffff
c001cf77:	68 ed 67 02 c0       	push   0xc00267ed
c001cf7c:	e8 ca 00 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001cf81:	c7 04 24 e6 67 02 c0 	mov    DWORD PTR [esp],0xc00267e6
c001cf88:	e8 e0 80 ff ff       	call   c001506d <Krnl::panic(char const*)>
c001cf8d:	83 c4 10             	add    esp,0x10
c001cf90:	eb 1b                	jmp    c001cfad <SoundCard::addChannel(SoundPort*)+0x55>
c001cf92:	51                   	push   ecx
c001cf93:	51                   	push   ecx
c001cf94:	53                   	push   ebx
c001cf95:	68 05 68 02 c0       	push   0xc0026805
c001cf9a:	e8 ac 00 ff ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001cf9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfa3:	83 c4 10             	add    esp,0x10
c001cfa6:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cfad:	89 d8                	mov    eax,ebx
c001cfaf:	5a                   	pop    edx
c001cfb0:	5b                   	pop    ebx
c001cfb1:	5e                   	pop    esi
c001cfb2:	c3                   	ret    
c001cfb3:	90                   	nop

c001cfb4 <SoundCard::removeChannel(int)>:
c001cfb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cfbc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cfc7:	c3                   	ret    

c001cfc8 <SoundPort::SoundPort(int, int, int, int)>:
c001cfc8:	83 ec 0c             	sub    esp,0xc
c001cfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfda:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfe6:	89 10                	mov    DWORD PTR [eax],edx
c001cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cff0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cffb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cffe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d003:	75 13                	jne    c001d018 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d009:	8b 00                	mov    eax,DWORD PTR [eax]
c001d00b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d010:	01 c0                	add    eax,eax
c001d012:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d016:	66 90                	xchg   ax,ax
c001d018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d020:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d027:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d032:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d035:	c1 e0 02             	shl    eax,0x2
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	50                   	push   eax
c001d03c:	e8 fe cc fe ff       	call   c0009d3f <malloc>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	89 c2                	mov    edx,eax
c001d046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d04d:	90                   	nop
c001d04e:	83 c4 0c             	add    esp,0xc
c001d051:	c3                   	ret    
c001d052:	66 90                	xchg   ax,ax

c001d054 <SoundPort::~SoundPort()>:
c001d054:	83 ec 0c             	sub    esp,0xc
c001d057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d05e:	85 c0                	test   eax,eax
c001d060:	74 1e                	je     c001d080 <SoundPort::~SoundPort()+0x2c>
c001d062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d066:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d069:	83 ec 0c             	sub    esp,0xc
c001d06c:	50                   	push   eax
c001d06d:	e8 dd cc fe ff       	call   c0009d4f <free>
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d079:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d080:	90                   	nop
c001d081:	83 c4 0c             	add    esp,0xc
c001d084:	c3                   	ret    
c001d085:	90                   	nop
c001d086:	66 90                	xchg   ax,ax

c001d088 <SoundPort::unpause()>:
c001d088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d08c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d090:	c3                   	ret    
c001d091:	90                   	nop
c001d092:	66 90                	xchg   ax,ax

c001d094 <SoundPort::pause()>:
c001d094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d098:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d09c:	c3                   	ret    
c001d09d:	90                   	nop
c001d09e:	66 90                	xchg   ax,ax

c001d0a0 <SoundPort::getBufferUsed()>:
c001d0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d0a7:	c3                   	ret    

c001d0a8 <SoundPort::getBufferSize()>:
c001d0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d0af:	c3                   	ret    

c001d0b0 <SoundPort::buffer16(short*, int)>:
c001d0b0:	55                   	push   ebp
c001d0b1:	57                   	push   edi
c001d0b2:	56                   	push   esi
c001d0b3:	53                   	push   ebx
c001d0b4:	83 ec 1c             	sub    esp,0x1c
c001d0b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d0bf:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d0c2:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d0c5:	0f 84 85 00 00 00    	je     c001d150 <SoundPort::buffer16(short*, int)+0xa0>
c001d0cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d0cf:	85 c9                	test   ecx,ecx
c001d0d1:	7e 7d                	jle    c001d150 <SoundPort::buffer16(short*, int)+0xa0>
c001d0d3:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d0d7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d0da:	c1 e1 0f             	shl    ecx,0xf
c001d0dd:	8d 70 01             	lea    esi,[eax+0x1]
c001d0e0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d0e3:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d0e6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0e9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0ec:	74 6e                	je     c001d15c <SoundPort::buffer16(short*, int)+0xac>
c001d0ee:	31 f6                	xor    esi,esi
c001d0f0:	eb 22                	jmp    c001d114 <SoundPort::buffer16(short*, int)+0x64>
c001d0f2:	66 90                	xchg   ax,ax
c001d0f4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d0f9:	8d 79 01             	lea    edi,[ecx+0x1]
c001d0fc:	c1 e3 0f             	shl    ebx,0xf
c001d0ff:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d102:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d105:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d108:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d10b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d10e:	74 1c                	je     c001d12c <SoundPort::buffer16(short*, int)+0x7c>
c001d110:	89 c6                	mov    esi,eax
c001d112:	66 90                	xchg   ax,ax
c001d114:	8d 46 01             	lea    eax,[esi+0x1]
c001d117:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d11b:	75 d7                	jne    c001d0f4 <SoundPort::buffer16(short*, int)+0x44>
c001d11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d121:	83 c4 1c             	add    esp,0x1c
c001d124:	5b                   	pop    ebx
c001d125:	5e                   	pop    esi
c001d126:	5f                   	pop    edi
c001d127:	5d                   	pop    ebp
c001d128:	c3                   	ret    
c001d129:	8d 76 00             	lea    esi,[esi+0x0]
c001d12c:	8d 46 02             	lea    eax,[esi+0x2]
c001d12f:	90                   	nop
c001d130:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	68 58 68 02 c0       	push   0xc0026858
c001d13c:	e8 0a ff fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d148:	83 c4 1c             	add    esp,0x1c
c001d14b:	5b                   	pop    ebx
c001d14c:	5e                   	pop    esi
c001d14d:	5f                   	pop    edi
c001d14e:	5d                   	pop    ebp
c001d14f:	c3                   	ret    
c001d150:	83 c4 1c             	add    esp,0x1c
c001d153:	31 c0                	xor    eax,eax
c001d155:	5b                   	pop    ebx
c001d156:	5e                   	pop    esi
c001d157:	5f                   	pop    edi
c001d158:	5d                   	pop    ebp
c001d159:	c3                   	ret    
c001d15a:	66 90                	xchg   ax,ax
c001d15c:	b8 01 00 00 00       	mov    eax,0x1
c001d161:	eb cd                	jmp    c001d130 <SoundPort::buffer16(short*, int)+0x80>
c001d163:	90                   	nop

c001d164 <SoundPort::buffer32(int*, int)>:
c001d164:	55                   	push   ebp
c001d165:	57                   	push   edi
c001d166:	56                   	push   esi
c001d167:	53                   	push   ebx
c001d168:	83 ec 1c             	sub    esp,0x1c
c001d16b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d16f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d173:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d176:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d17a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d17e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d181:	74 79                	je     c001d1fc <SoundPort::buffer32(int*, int)+0x98>
c001d183:	85 c0                	test   eax,eax
c001d185:	7e 75                	jle    c001d1fc <SoundPort::buffer32(int*, int)+0x98>
c001d187:	8d 71 01             	lea    esi,[ecx+0x1]
c001d18a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d18d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d190:	8b 37                	mov    esi,DWORD PTR [edi]
c001d192:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d195:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d198:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d19b:	74 6b                	je     c001d208 <SoundPort::buffer32(int*, int)+0xa4>
c001d19d:	31 f6                	xor    esi,esi
c001d19f:	eb 1f                	jmp    c001d1c0 <SoundPort::buffer32(int*, int)+0x5c>
c001d1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1a4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d1a7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d1aa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d1ad:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d1b0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d1b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1b7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1ba:	74 1c                	je     c001d1d8 <SoundPort::buffer32(int*, int)+0x74>
c001d1bc:	89 de                	mov    esi,ebx
c001d1be:	66 90                	xchg   ax,ax
c001d1c0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d1c3:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d1c7:	75 db                	jne    c001d1a4 <SoundPort::buffer32(int*, int)+0x40>
c001d1c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1cd:	83 c4 1c             	add    esp,0x1c
c001d1d0:	5b                   	pop    ebx
c001d1d1:	5e                   	pop    esi
c001d1d2:	5f                   	pop    edi
c001d1d3:	5d                   	pop    ebp
c001d1d4:	c3                   	ret    
c001d1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1d8:	8d 46 02             	lea    eax,[esi+0x2]
c001d1db:	90                   	nop
c001d1dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e0:	83 ec 0c             	sub    esp,0xc
c001d1e3:	68 73 68 02 c0       	push   0xc0026873
c001d1e8:	e8 5e fe fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001d1ed:	83 c4 10             	add    esp,0x10
c001d1f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1f4:	83 c4 1c             	add    esp,0x1c
c001d1f7:	5b                   	pop    ebx
c001d1f8:	5e                   	pop    esi
c001d1f9:	5f                   	pop    edi
c001d1fa:	5d                   	pop    ebp
c001d1fb:	c3                   	ret    
c001d1fc:	83 c4 1c             	add    esp,0x1c
c001d1ff:	31 c0                	xor    eax,eax
c001d201:	5b                   	pop    ebx
c001d202:	5e                   	pop    esi
c001d203:	5f                   	pop    edi
c001d204:	5d                   	pop    ebp
c001d205:	c3                   	ret    
c001d206:	66 90                	xchg   ax,ax
c001d208:	b8 01 00 00 00       	mov    eax,0x1
c001d20d:	eb cd                	jmp    c001d1dc <SoundPort::buffer32(int*, int)+0x78>
c001d20f:	90                   	nop

c001d210 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d210:	57                   	push   edi
c001d211:	56                   	push   esi
c001d212:	53                   	push   ebx
c001d213:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d217:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d21b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d221:	39 03                	cmp    DWORD PTR [ebx],eax
c001d223:	74 13                	je     c001d238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d225:	83 ec 0c             	sub    esp,0xc
c001d228:	68 c8 68 02 c0       	push   0xc00268c8
c001d22d:	e8 3b 7e ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d232:	83 c4 10             	add    esp,0x10
c001d235:	8d 76 00             	lea    esi,[esi+0x0]
c001d238:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d23e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d241:	74 11                	je     c001d254 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d243:	83 ec 0c             	sub    esp,0xc
c001d246:	68 8e 68 02 c0       	push   0xc002688e
c001d24b:	e8 1d 7e ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d250:	83 c4 10             	add    esp,0x10
c001d253:	90                   	nop
c001d254:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d25a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d25d:	74 11                	je     c001d270 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d25f:	83 ec 0c             	sub    esp,0xc
c001d262:	68 8e 68 02 c0       	push   0xc002688e
c001d267:	e8 01 7e ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d26c:	83 c4 10             	add    esp,0x10
c001d26f:	90                   	nop
c001d270:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d273:	89 c6                	mov    esi,eax
c001d275:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d279:	7e 05                	jle    c001d280 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d27b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d27f:	90                   	nop
c001d280:	85 f6                	test   esi,esi
c001d282:	7e 30                	jle    c001d2b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d284:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d288:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d28b:	31 c9                	xor    ecx,ecx
c001d28d:	01 d7                	add    edi,edx
c001d28f:	90                   	nop
c001d290:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d293:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d296:	85 c0                	test   eax,eax
c001d298:	79 06                	jns    c001d2a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d29a:	05 ff 7f 00 00       	add    eax,0x7fff
c001d29f:	90                   	nop
c001d2a0:	c1 f8 0f             	sar    eax,0xf
c001d2a3:	83 c1 04             	add    ecx,0x4
c001d2a6:	66 01 02             	add    WORD PTR [edx],ax
c001d2a9:	83 c2 02             	add    edx,0x2
c001d2ac:	39 d7                	cmp    edi,edx
c001d2ae:	75 e0                	jne    c001d290 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d2b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d2b3:	90                   	nop
c001d2b4:	56                   	push   esi
c001d2b5:	89 c2                	mov    edx,eax
c001d2b7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d2be:	29 f2                	sub    edx,esi
c001d2c0:	52                   	push   edx
c001d2c1:	50                   	push   eax
c001d2c2:	68 e8 68 02 c0       	push   0xc00268e8
c001d2c7:	e8 7f fd fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001d2cc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d2cf:	50                   	push   eax
c001d2d0:	01 f8                	add    eax,edi
c001d2d2:	50                   	push   eax
c001d2d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d2d6:	29 f0                	sub    eax,esi
c001d2d8:	c1 e0 02             	shl    eax,0x2
c001d2db:	50                   	push   eax
c001d2dc:	68 18 69 02 c0       	push   0xc0026918
c001d2e1:	e8 65 fd fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001d2e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d2e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d2ec:	83 c4 1c             	add    esp,0x1c
c001d2ef:	01 d7                	add    edi,edx
c001d2f1:	29 f0                	sub    eax,esi
c001d2f3:	c1 e0 02             	shl    eax,0x2
c001d2f6:	50                   	push   eax
c001d2f7:	57                   	push   edi
c001d2f8:	52                   	push   edx
c001d2f9:	e8 be 32 fe ff       	call   c00005bc <memmove>
c001d2fe:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d301:	83 c4 10             	add    esp,0x10
c001d304:	89 f0                	mov    eax,esi
c001d306:	5b                   	pop    ebx
c001d307:	5e                   	pop    esi
c001d308:	5f                   	pop    edi
c001d309:	c3                   	ret    
c001d30a:	66 90                	xchg   ax,ax

c001d30c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d30c:	57                   	push   edi
c001d30d:	56                   	push   esi
c001d30e:	53                   	push   ebx
c001d30f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d313:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d317:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d31b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d321:	39 06                	cmp    DWORD PTR [esi],eax
c001d323:	74 13                	je     c001d338 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d325:	83 ec 0c             	sub    esp,0xc
c001d328:	68 3c 69 02 c0       	push   0xc002693c
c001d32d:	e8 3b 7d ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	8d 76 00             	lea    esi,[esi+0x0]
c001d338:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d33e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d341:	74 11                	je     c001d354 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d343:	83 ec 0c             	sub    esp,0xc
c001d346:	68 aa 68 02 c0       	push   0xc00268aa
c001d34b:	e8 1d 7d ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	90                   	nop
c001d354:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d35a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d35d:	74 11                	je     c001d370 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d35f:	83 ec 0c             	sub    esp,0xc
c001d362:	68 aa 68 02 c0       	push   0xc00268aa
c001d367:	e8 01 7d ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d36c:	83 c4 10             	add    esp,0x10
c001d36f:	90                   	nop
c001d370:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d373:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d377:	7e 07                	jle    c001d380 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d379:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d37d:	8d 76 00             	lea    esi,[esi+0x0]
c001d380:	85 ff                	test   edi,edi
c001d382:	7e 1c                	jle    c001d3a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d384:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d38b:	31 c0                	xor    eax,eax
c001d38d:	8d 76 00             	lea    esi,[esi+0x0]
c001d390:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d393:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d396:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d399:	83 c0 04             	add    eax,0x4
c001d39c:	39 c1                	cmp    ecx,eax
c001d39e:	75 f0                	jne    c001d390 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d3a0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d3a3:	50                   	push   eax
c001d3a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d3a7:	29 f8                	sub    eax,edi
c001d3a9:	c1 e0 02             	shl    eax,0x2
c001d3ac:	50                   	push   eax
c001d3ad:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d3b0:	50                   	push   eax
c001d3b1:	52                   	push   edx
c001d3b2:	e8 05 32 fe ff       	call   c00005bc <memmove>
c001d3b7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d3ba:	83 c4 10             	add    esp,0x10
c001d3bd:	89 f8                	mov    eax,edi
c001d3bf:	5b                   	pop    ebx
c001d3c0:	5e                   	pop    esi
c001d3c1:	5f                   	pop    edi
c001d3c2:	c3                   	ret    
c001d3c3:	90                   	nop

c001d3c4 <PCI::open(int, int, void*)>:
c001d3c4:	83 ec 18             	sub    esp,0x18
c001d3c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d3cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3d7:	50                   	push   eax
c001d3d8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d3db:	31 c0                	xor    eax,eax
c001d3dd:	83 c4 1c             	add    esp,0x1c
c001d3e0:	c3                   	ret    
c001d3e1:	90                   	nop

c001d3e2 <PCI::close(int, int, void*)>:
c001d3e2:	31 c0                	xor    eax,eax
c001d3e4:	c3                   	ret    
c001d3e5:	90                   	nop

c001d3e6 <PCI::PCI()>:
c001d3e6:	83 ec 0c             	sub    esp,0xc
c001d3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ed:	83 ec 08             	sub    esp,0x8
c001d3f0:	68 5b 69 02 c0       	push   0xc002695b
c001d3f5:	50                   	push   eax
c001d3f6:	e8 29 0a ff ff       	call   c000de24 <Bus::Bus(char const*)>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	ba 30 6b 02 c0       	mov    edx,0xc0026b30
c001d403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d407:	89 10                	mov    DWORD PTR [eax],edx
c001d409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d40d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41b:	a3 a0 a1 02 c0       	mov    ds:0xc002a1a0,eax
c001d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d424:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d42a:	0f b6 d0             	movzx  edx,al
c001d42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d431:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d442:	0f b6 d0             	movzx  edx,al
c001d445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d449:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d452:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d458:	8d 50 01             	lea    edx,[eax+0x1]
c001d45b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d45f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d465:	0f b6 d0             	movzx  edx,al
c001d468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d470:	83 c9 c0             	or     ecx,0xffffffc0
c001d473:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d477:	90                   	nop
c001d478:	83 c4 0c             	add    esp,0xc
c001d47b:	c3                   	ret    

c001d47c <PCI::readBAR8(unsigned int, int)>:
c001d47c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d480:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d484:	f6 c2 01             	test   dl,0x1
c001d487:	74 07                	je     c001d490 <PCI::readBAR8(unsigned int, int)+0x14>
c001d489:	83 e2 fc             	and    edx,0xfffffffc
c001d48c:	01 c2                	add    edx,eax
c001d48e:	ec                   	in     al,dx
c001d48f:	c3                   	ret    
c001d490:	83 e2 f0             	and    edx,0xfffffff0
c001d493:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d496:	c3                   	ret    
c001d497:	90                   	nop

c001d498 <PCI::readBAR16(unsigned int, int)>:
c001d498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d49c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4a0:	f6 c2 01             	test   dl,0x1
c001d4a3:	74 08                	je     c001d4ad <PCI::readBAR16(unsigned int, int)+0x15>
c001d4a5:	83 e2 fc             	and    edx,0xfffffffc
c001d4a8:	01 c2                	add    edx,eax
c001d4aa:	66 ed                	in     ax,dx
c001d4ac:	c3                   	ret    
c001d4ad:	83 e2 f0             	and    edx,0xfffffff0
c001d4b0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d4b4:	c3                   	ret    
c001d4b5:	90                   	nop

c001d4b6 <PCI::readBAR32(unsigned int, int)>:
c001d4b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4be:	f6 c2 01             	test   dl,0x1
c001d4c1:	74 07                	je     c001d4ca <PCI::readBAR32(unsigned int, int)+0x14>
c001d4c3:	83 e2 fc             	and    edx,0xfffffffc
c001d4c6:	01 c2                	add    edx,eax
c001d4c8:	ed                   	in     eax,dx
c001d4c9:	c3                   	ret    
c001d4ca:	83 e2 f0             	and    edx,0xfffffff0
c001d4cd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d4d0:	c3                   	ret    
c001d4d1:	90                   	nop

c001d4d2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d4d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4de:	f6 c2 01             	test   dl,0x1
c001d4e1:	74 07                	je     c001d4ea <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d4e3:	83 e2 fc             	and    edx,0xfffffffc
c001d4e6:	01 ca                	add    edx,ecx
c001d4e8:	ee                   	out    dx,al
c001d4e9:	c3                   	ret    
c001d4ea:	83 e2 f0             	and    edx,0xfffffff0
c001d4ed:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d4f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4fe:	f6 c2 01             	test   dl,0x1
c001d501:	74 08                	je     c001d50b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d503:	83 e2 fc             	and    edx,0xfffffffc
c001d506:	01 ca                	add    edx,ecx
c001d508:	66 ef                	out    dx,ax
c001d50a:	c3                   	ret    
c001d50b:	83 e2 f0             	and    edx,0xfffffff0
c001d50e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d512:	c3                   	ret    
c001d513:	90                   	nop

c001d514 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d514:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d51c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d520:	f6 c2 01             	test   dl,0x1
c001d523:	74 07                	je     c001d52c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d525:	83 e2 fc             	and    edx,0xfffffffc
c001d528:	01 ca                	add    edx,ecx
c001d52a:	ef                   	out    dx,eax
c001d52b:	c3                   	ret    
c001d52c:	83 e2 f0             	and    edx,0xfffffff0
c001d52f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d532:	c3                   	ret    
c001d533:	90                   	nop

c001d534 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d534:	55                   	push   ebp
c001d535:	57                   	push   edi
c001d536:	56                   	push   esi
c001d537:	53                   	push   ebx
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d53f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d543:	89 f0                	mov    eax,esi
c001d545:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d549:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d54d:	3c 07                	cmp    al,0x7
c001d54f:	76 10                	jbe    c001d561 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d551:	83 ec 0c             	sub    esp,0xc
c001d554:	68 63 69 02 c0       	push   0xc0026963
c001d559:	e8 0f 7b ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d55e:	83 c4 10             	add    esp,0x10
c001d561:	80 fb 0f             	cmp    bl,0xf
c001d564:	76 10                	jbe    c001d576 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d566:	83 ec 0c             	sub    esp,0xc
c001d569:	68 93 69 02 c0       	push   0xc0026993
c001d56e:	e8 fa 7a ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	8d 04 36             	lea    eax,[esi+esi*1]
c001d579:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d57e:	83 c8 f0             	or     eax,0xfffffff0
c001d581:	ee                   	out    dx,al
c001d582:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d587:	89 e8                	mov    eax,ebp
c001d589:	ee                   	out    dx,al
c001d58a:	83 c4 0c             	add    esp,0xc
c001d58d:	89 d8                	mov    eax,ebx
c001d58f:	66 81 e7 fc 00       	and    di,0xfc
c001d594:	5b                   	pop    ebx
c001d595:	c1 e0 08             	shl    eax,0x8
c001d598:	5e                   	pop    esi
c001d599:	09 f8                	or     eax,edi
c001d59b:	5f                   	pop    edi
c001d59c:	66 0d 00 c0          	or     ax,0xc000
c001d5a0:	5d                   	pop    ebp
c001d5a1:	c3                   	ret    

c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d5a2:	57                   	push   edi
c001d5a3:	56                   	push   esi
c001d5a4:	53                   	push   ebx
c001d5a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5ad:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d5b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d5b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d5bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d5bf:	83 ff 01             	cmp    edi,0x1
c001d5c2:	75 3e                	jne    c001d602 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d5c4:	89 de                	mov    esi,ebx
c001d5c6:	0f b6 c0             	movzx  eax,al
c001d5c9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d5cf:	c1 e0 10             	shl    eax,0x10
c001d5d2:	0f b6 c9             	movzx  ecx,cl
c001d5d5:	09 f0                	or     eax,esi
c001d5d7:	c1 e1 08             	shl    ecx,0x8
c001d5da:	0f b6 d2             	movzx  edx,dl
c001d5dd:	09 c8                	or     eax,ecx
c001d5df:	c1 e2 0b             	shl    edx,0xb
c001d5e2:	09 d0                	or     eax,edx
c001d5e4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d5e9:	0d 00 00 00 80       	or     eax,0x80000000
c001d5ee:	ef                   	out    dx,eax
c001d5ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d5f4:	ed                   	in     eax,dx
c001d5f5:	83 e3 02             	and    ebx,0x2
c001d5f8:	0f b6 cb             	movzx  ecx,bl
c001d5fb:	c1 e1 03             	shl    ecx,0x3
c001d5fe:	d3 e8                	shr    eax,cl
c001d600:	eb 43                	jmp    c001d645 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d602:	83 ff 02             	cmp    edi,0x2
c001d605:	75 2c                	jne    c001d633 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d607:	83 ec 0c             	sub    esp,0xc
c001d60a:	0f b6 c9             	movzx  ecx,cl
c001d60d:	0f b6 d2             	movzx  edx,dl
c001d610:	0f b6 fb             	movzx  edi,bl
c001d613:	0f b6 c0             	movzx  eax,al
c001d616:	57                   	push   edi
c001d617:	51                   	push   ecx
c001d618:	52                   	push   edx
c001d619:	50                   	push   eax
c001d61a:	56                   	push   esi
c001d61b:	e8 14 ff ff ff       	call   c001d534 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d620:	89 c2                	mov    edx,eax
c001d622:	ed                   	in     eax,dx
c001d623:	83 e3 02             	and    ebx,0x2
c001d626:	83 c4 20             	add    esp,0x20
c001d629:	0f b6 cb             	movzx  ecx,bl
c001d62c:	c1 e1 03             	shl    ecx,0x3
c001d62f:	d3 e8                	shr    eax,cl
c001d631:	eb 12                	jmp    c001d645 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d633:	83 ec 0c             	sub    esp,0xc
c001d636:	68 c3 69 02 c0       	push   0xc00269c3
c001d63b:	e8 2d 7a ff ff       	call   c001506d <Krnl::panic(char const*)>
c001d640:	83 c4 10             	add    esp,0x10
c001d643:	31 c0                	xor    eax,eax
c001d645:	5b                   	pop    ebx
c001d646:	5e                   	pop    esi
c001d647:	5f                   	pop    edi
c001d648:	c3                   	ret    
c001d649:	90                   	nop

c001d64a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d64a:	83 ec 18             	sub    esp,0x18
c001d64d:	6a 00                	push   0x0
c001d64f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d654:	50                   	push   eax
c001d655:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d65a:	50                   	push   eax
c001d65b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d660:	50                   	push   eax
c001d661:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d665:	e8 38 ff ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d66a:	83 c4 2c             	add    esp,0x2c
c001d66d:	c3                   	ret    

c001d66e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d66e:	83 ec 18             	sub    esp,0x18
c001d671:	6a 0e                	push   0xe
c001d673:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d678:	50                   	push   eax
c001d679:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d67e:	50                   	push   eax
c001d67f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d684:	50                   	push   eax
c001d685:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d689:	e8 14 ff ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d68e:	83 c4 2c             	add    esp,0x2c
c001d691:	0f b6 c0             	movzx  eax,al
c001d694:	c3                   	ret    
c001d695:	90                   	nop

c001d696 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d696:	55                   	push   ebp
c001d697:	57                   	push   edi
c001d698:	56                   	push   esi
c001d699:	53                   	push   ebx
c001d69a:	83 ec 18             	sub    esp,0x18
c001d69d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d6a2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d6a7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d6ac:	6a 0a                	push   0xa
c001d6ae:	56                   	push   esi
c001d6af:	55                   	push   ebp
c001d6b0:	57                   	push   edi
c001d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6b5:	e8 e8 fe ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ba:	83 c4 14             	add    esp,0x14
c001d6bd:	89 c3                	mov    ebx,eax
c001d6bf:	6a 0a                	push   0xa
c001d6c1:	0f b6 db             	movzx  ebx,bl
c001d6c4:	56                   	push   esi
c001d6c5:	55                   	push   ebp
c001d6c6:	57                   	push   edi
c001d6c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6cb:	e8 d2 fe ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6d0:	83 c4 2c             	add    esp,0x2c
c001d6d3:	25 00 ff 00 00       	and    eax,0xff00
c001d6d8:	09 d8                	or     eax,ebx
c001d6da:	5b                   	pop    ebx
c001d6db:	5e                   	pop    esi
c001d6dc:	5f                   	pop    edi
c001d6dd:	5d                   	pop    ebp
c001d6de:	c3                   	ret    
c001d6df:	90                   	nop

c001d6e0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d6e0:	83 ec 18             	sub    esp,0x18
c001d6e3:	6a 08                	push   0x8
c001d6e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6ea:	50                   	push   eax
c001d6eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6f0:	50                   	push   eax
c001d6f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6f6:	50                   	push   eax
c001d6f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6fb:	e8 a2 fe ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d700:	83 c4 2c             	add    esp,0x2c
c001d703:	0f b6 c4             	movzx  eax,ah
c001d706:	c3                   	ret    
c001d707:	90                   	nop

c001d708 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d708:	83 ec 18             	sub    esp,0x18
c001d70b:	6a 08                	push   0x8
c001d70d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d712:	50                   	push   eax
c001d713:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d718:	50                   	push   eax
c001d719:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d71e:	50                   	push   eax
c001d71f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d723:	e8 7a fe ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d728:	83 c4 2c             	add    esp,0x2c
c001d72b:	c3                   	ret    

c001d72c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d72c:	83 ec 18             	sub    esp,0x18
c001d72f:	6a 3c                	push   0x3c
c001d731:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d736:	50                   	push   eax
c001d737:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d73c:	50                   	push   eax
c001d73d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d742:	50                   	push   eax
c001d743:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d747:	e8 56 fe ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d74c:	83 c4 2c             	add    esp,0x2c
c001d74f:	c3                   	ret    

c001d750 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d750:	83 ec 18             	sub    esp,0x18
c001d753:	6a 18                	push   0x18
c001d755:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d75a:	50                   	push   eax
c001d75b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d760:	50                   	push   eax
c001d761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d766:	50                   	push   eax
c001d767:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d76b:	e8 32 fe ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d770:	83 c4 2c             	add    esp,0x2c
c001d773:	0f b6 c4             	movzx  eax,ah
c001d776:	c3                   	ret    
c001d777:	90                   	nop

c001d778 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d778:	55                   	push   ebp
c001d779:	57                   	push   edi
c001d77a:	56                   	push   esi
c001d77b:	53                   	push   ebx
c001d77c:	83 ec 28             	sub    esp,0x28
c001d77f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d783:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d788:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d78d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d792:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d799:	8d 43 12             	lea    eax,[ebx+0x12]
c001d79c:	83 c3 10             	add    ebx,0x10
c001d79f:	0f b6 c0             	movzx  eax,al
c001d7a2:	0f b6 db             	movzx  ebx,bl
c001d7a5:	50                   	push   eax
c001d7a6:	51                   	push   ecx
c001d7a7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d7ab:	57                   	push   edi
c001d7ac:	55                   	push   ebp
c001d7ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d7b1:	e8 ec fd ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7b6:	83 c4 14             	add    esp,0x14
c001d7b9:	89 c6                	mov    esi,eax
c001d7bb:	53                   	push   ebx
c001d7bc:	c1 e6 10             	shl    esi,0x10
c001d7bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7c3:	51                   	push   ecx
c001d7c4:	57                   	push   edi
c001d7c5:	55                   	push   ebp
c001d7c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d7ca:	e8 d3 fd ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7cf:	83 c4 3c             	add    esp,0x3c
c001d7d2:	0f b7 c0             	movzx  eax,ax
c001d7d5:	5b                   	pop    ebx
c001d7d6:	09 f0                	or     eax,esi
c001d7d8:	5e                   	pop    esi
c001d7d9:	5f                   	pop    edi
c001d7da:	5d                   	pop    ebp
c001d7db:	c3                   	ret    

c001d7dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d7dc:	55                   	push   ebp
c001d7dd:	57                   	push   edi
c001d7de:	56                   	push   esi
c001d7df:	53                   	push   ebx
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d7e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d7eb:	89 f5                	mov    ebp,esi
c001d7ed:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d7f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d7fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d7ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d803:	83 f9 01             	cmp    ecx,0x1
c001d806:	75 5d                	jne    c001d865 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d808:	0f b6 c8             	movzx  ecx,al
c001d80b:	0f b6 d2             	movzx  edx,dl
c001d80e:	c1 e1 10             	shl    ecx,0x10
c001d811:	c1 e2 0b             	shl    edx,0xb
c001d814:	89 f0                	mov    eax,esi
c001d816:	25 fc 00 00 00       	and    eax,0xfc
c001d81b:	09 c1                	or     ecx,eax
c001d81d:	89 e8                	mov    eax,ebp
c001d81f:	0f b6 c0             	movzx  eax,al
c001d822:	c1 e0 08             	shl    eax,0x8
c001d825:	09 c1                	or     ecx,eax
c001d827:	09 d1                	or     ecx,edx
c001d829:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d82e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d834:	89 c8                	mov    eax,ecx
c001d836:	ef                   	out    dx,eax
c001d837:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d83c:	ed                   	in     eax,dx
c001d83d:	0f b7 db             	movzx  ebx,bx
c001d840:	83 e6 02             	and    esi,0x2
c001d843:	74 0a                	je     c001d84f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d845:	0f b7 d0             	movzx  edx,ax
c001d848:	c1 e3 10             	shl    ebx,0x10
c001d84b:	09 d3                	or     ebx,edx
c001d84d:	eb 05                	jmp    c001d854 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d84f:	66 31 c0             	xor    ax,ax
c001d852:	09 c3                	or     ebx,eax
c001d854:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d859:	89 c8                	mov    eax,ecx
c001d85b:	ef                   	out    dx,eax
c001d85c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d861:	89 d8                	mov    eax,ebx
c001d863:	eb 41                	jmp    c001d8a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d865:	83 f9 02             	cmp    ecx,0x2
c001d868:	75 45                	jne    c001d8af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d86a:	83 ec 0c             	sub    esp,0xc
c001d86d:	0f b6 d2             	movzx  edx,dl
c001d870:	89 f1                	mov    ecx,esi
c001d872:	0f b6 c0             	movzx  eax,al
c001d875:	0f b6 f1             	movzx  esi,cl
c001d878:	89 e9                	mov    ecx,ebp
c001d87a:	56                   	push   esi
c001d87b:	0f b6 c9             	movzx  ecx,cl
c001d87e:	51                   	push   ecx
c001d87f:	52                   	push   edx
c001d880:	50                   	push   eax
c001d881:	57                   	push   edi
c001d882:	e8 ad fc ff ff       	call   c001d534 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d887:	89 c2                	mov    edx,eax
c001d889:	ed                   	in     eax,dx
c001d88a:	83 c4 20             	add    esp,0x20
c001d88d:	0f b7 db             	movzx  ebx,bx
c001d890:	f6 c2 02             	test   dl,0x2
c001d893:	74 0c                	je     c001d8a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d895:	0f b7 c8             	movzx  ecx,ax
c001d898:	89 d8                	mov    eax,ebx
c001d89a:	c1 e0 10             	shl    eax,0x10
c001d89d:	09 c8                	or     eax,ecx
c001d89f:	eb 05                	jmp    c001d8a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d8a1:	66 31 c0             	xor    ax,ax
c001d8a4:	09 d8                	or     eax,ebx
c001d8a6:	ef                   	out    dx,eax
c001d8a7:	83 c4 0c             	add    esp,0xc
c001d8aa:	5b                   	pop    ebx
c001d8ab:	5e                   	pop    esi
c001d8ac:	5f                   	pop    edi
c001d8ad:	5d                   	pop    ebp
c001d8ae:	c3                   	ret    
c001d8af:	c7 44 24 20 c3 69 02 c0 	mov    DWORD PTR [esp+0x20],0xc00269c3
c001d8b7:	83 c4 0c             	add    esp,0xc
c001d8ba:	5b                   	pop    ebx
c001d8bb:	5e                   	pop    esi
c001d8bc:	5f                   	pop    edi
c001d8bd:	5d                   	pop    ebp
c001d8be:	e9 aa 77 ff ff       	jmp    c001506d <Krnl::panic(char const*)>
c001d8c3:	90                   	nop

c001d8c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d8c4:	55                   	push   ebp
c001d8c5:	57                   	push   edi
c001d8c6:	56                   	push   esi
c001d8c7:	53                   	push   ebx
c001d8c8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d8ce:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001d8d5:	75 0f                	jne    c001d8e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d8d7:	80 3d ac a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1ac,0x0
c001d8de:	0f 85 fa 00 00 00    	jne    c001d9de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d8e4:	eb 2f                	jmp    c001d915 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d8e6:	83 ec 0c             	sub    esp,0xc
c001d8e9:	68 c9 69 02 c0       	push   0xc00269c9
c001d8ee:	e8 a6 c4 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001d8f3:	83 c4 10             	add    esp,0x10
c001d8f6:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001d8fd:	75 d8                	jne    c001d8d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d8ff:	e4 60                	in     al,0x60
c001d901:	3c 1c                	cmp    al,0x1c
c001d903:	74 04                	je     c001d909 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d905:	3c 5a                	cmp    al,0x5a
c001d907:	75 f6                	jne    c001d8ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d909:	e4 60                	in     al,0x60
c001d90b:	3c 5a                	cmp    al,0x5a
c001d90d:	74 fa                	je     c001d909 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d90f:	3c 1c                	cmp    al,0x1c
c001d911:	74 f6                	je     c001d909 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d913:	eb c2                	jmp    c001d8d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d915:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001d91c:	0f 85 86 00 00 00    	jne    c001d9a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d922:	83 ec 0c             	sub    esp,0xc
c001d925:	68 14 01 00 00       	push   0x114
c001d92a:	e8 10 c4 fe ff       	call   c0009d3f <malloc>
c001d92f:	83 c4 0c             	add    esp,0xc
c001d932:	89 c3                	mov    ebx,eax
c001d934:	ff 35 b0 97 02 c0    	push   DWORD PTR ds:0xc00297b0
c001d93a:	68 e3 69 02 c0       	push   0xc00269e3
c001d93f:	50                   	push   eax
c001d940:	e8 71 fc fe ff       	call   c000d5b6 <File::File(char const*, Process*)>
c001d945:	5a                   	pop    edx
c001d946:	59                   	pop    ecx
c001d947:	6a 01                	push   0x1
c001d949:	53                   	push   ebx
c001d94a:	e8 41 fd fe ff       	call   c000d690 <File::open(FileOpenMode)>
c001d94f:	83 c4 0c             	add    esp,0xc
c001d952:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d956:	50                   	push   eax
c001d957:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d95b:	50                   	push   eax
c001d95c:	53                   	push   ebx
c001d95d:	e8 da ff fe ff       	call   c000d93c <File::stat(unsigned long long*, bool*)>
c001d962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d966:	40                   	inc    eax
c001d967:	89 04 24             	mov    DWORD PTR [esp],eax
c001d96a:	e8 d0 c3 fe ff       	call   c0009d3f <malloc>
c001d96f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d973:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001d978:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d97c:	5e                   	pop    esi
c001d97d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d97f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d983:	51                   	push   ecx
c001d984:	50                   	push   eax
c001d985:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d989:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d98d:	53                   	push   ebx
c001d98e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d991:	83 c4 14             	add    esp,0x14
c001d994:	53                   	push   ebx
c001d995:	e8 54 fd fe ff       	call   c000d6ee <File::close()>
c001d99a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c001d9a6:	eb 36                	jmp    c001d9de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d9a8:	83 ec 0c             	sub    esp,0xc
c001d9ab:	68 fc 69 02 c0       	push   0xc00269fc
c001d9b0:	e8 e4 c3 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001d9b5:	83 c4 10             	add    esp,0x10
c001d9b8:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001d9bf:	0f 85 5d ff ff ff    	jne    c001d922 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d9c5:	e4 60                	in     al,0x60
c001d9c7:	3c 1c                	cmp    al,0x1c
c001d9c9:	74 04                	je     c001d9cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d9cb:	3c 5a                	cmp    al,0x5a
c001d9cd:	75 f6                	jne    c001d9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d9cf:	e4 60                	in     al,0x60
c001d9d1:	3c 5a                	cmp    al,0x5a
c001d9d3:	74 fa                	je     c001d9cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d9d5:	3c 1c                	cmp    al,0x1c
c001d9d7:	74 f6                	je     c001d9cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d9d9:	e9 44 ff ff ff       	jmp    c001d922 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d9de:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001d9e5:	75 0b                	jne    c001d9f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d9e7:	31 f6                	xor    esi,esi
c001d9e9:	31 db                	xor    ebx,ebx
c001d9eb:	31 ed                	xor    ebp,ebp
c001d9ed:	e9 a3 01 00 00       	jmp    c001db95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d9f2:	83 ec 0c             	sub    esp,0xc
c001d9f5:	68 0e 6a 02 c0       	push   0xc0026a0e
c001d9fa:	e8 9a c3 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001d9ff:	8b 15 80 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028280
c001da05:	83 c4 10             	add    esp,0x10
c001da08:	f6 c2 80             	test   dl,0x80
c001da0b:	74 0c                	je     c001da19 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001da0d:	0f ba e2 0b          	bt     edx,0xb
c001da11:	72 1a                	jb     c001da2d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001da13:	eb d2                	jmp    c001d9e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001da15:	3c 5a                	cmp    al,0x5a
c001da17:	74 0c                	je     c001da25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001da19:	e4 60                	in     al,0x60
c001da1b:	3c 1c                	cmp    al,0x1c
c001da1d:	75 f6                	jne    c001da15 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001da1f:	eb 04                	jmp    c001da25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001da21:	3c 1c                	cmp    al,0x1c
c001da23:	75 e8                	jne    c001da0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001da25:	e4 60                	in     al,0x60
c001da27:	3c 5a                	cmp    al,0x5a
c001da29:	74 fa                	je     c001da25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001da2b:	eb f4                	jmp    c001da21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001da2d:	83 ec 0c             	sub    esp,0xc
c001da30:	68 13 6a 02 c0       	push   0xc0026a13
c001da35:	e8 5f c3 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001da3a:	83 c4 10             	add    esp,0x10
c001da3d:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001da44:	75 a1                	jne    c001d9e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001da46:	e4 60                	in     al,0x60
c001da48:	3c 5a                	cmp    al,0x5a
c001da4a:	74 04                	je     c001da50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001da4c:	3c 1c                	cmp    al,0x1c
c001da4e:	75 f6                	jne    c001da46 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001da50:	e4 60                	in     al,0x60
c001da52:	3c 5a                	cmp    al,0x5a
c001da54:	74 fa                	je     c001da50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001da56:	3c 1c                	cmp    al,0x1c
c001da58:	74 f6                	je     c001da50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001da5a:	eb 8b                	jmp    c001d9e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001da5c:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001da63:	0f 85 3d 01 00 00    	jne    c001dba6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001da69:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001da6e:	8d 7e 01             	lea    edi,[esi+0x1]
c001da71:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001da74:	d4 40                	aam    0x40
c001da76:	d5 39                	aad    0x39
c001da78:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001da7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001da83:	0f 85 53 01 00 00    	jne    c001dbdc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001da89:	8b 15 a8 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1a8
c001da8f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001da92:	d4 40                	aam    0x40
c001da94:	d5 39                	aad    0x39
c001da96:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da9a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001da9e:	d4 40                	aam    0x40
c001daa0:	d5 39                	aad    0x39
c001daa2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001daa6:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001daaa:	d4 40                	aam    0x40
c001daac:	d5 39                	aad    0x39
c001daae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dab2:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001dab6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001daba:	3c 56                	cmp    al,0x56
c001dabc:	74 49                	je     c001db07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001dabe:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dac2:	d4 40                	aam    0x40
c001dac4:	d5 39                	aad    0x39
c001dac6:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dac9:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001dacd:	0f b6 c9             	movzx  ecx,cl
c001dad0:	c1 e1 04             	shl    ecx,0x4
c001dad3:	d4 40                	aam    0x40
c001dad5:	d5 39                	aad    0x39
c001dad7:	83 e8 30             	sub    eax,0x30
c001dada:	0f b6 c0             	movzx  eax,al
c001dadd:	09 c1                	or     ecx,eax
c001dadf:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001dae3:	c1 e1 04             	shl    ecx,0x4
c001dae6:	d4 40                	aam    0x40
c001dae8:	d5 39                	aad    0x39
c001daea:	83 e8 30             	sub    eax,0x30
c001daed:	0f b6 c0             	movzx  eax,al
c001daf0:	09 c1                	or     ecx,eax
c001daf2:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001daf6:	c1 e1 04             	shl    ecx,0x4
c001daf9:	d4 40                	aam    0x40
c001dafb:	d5 39                	aad    0x39
c001dafd:	83 e8 30             	sub    eax,0x30
c001db00:	0f b6 c0             	movzx  eax,al
c001db03:	09 c8                	or     eax,ecx
c001db05:	89 c5                	mov    ebp,eax
c001db07:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001db0b:	80 f9 44             	cmp    cl,0x44
c001db0e:	74 47                	je     c001db57 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001db10:	88 c8                	mov    al,cl
c001db12:	d4 40                	aam    0x40
c001db14:	d5 39                	aad    0x39
c001db16:	83 e8 30             	sub    eax,0x30
c001db19:	0f b6 f8             	movzx  edi,al
c001db1c:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001db20:	c1 e7 04             	shl    edi,0x4
c001db23:	d4 40                	aam    0x40
c001db25:	d5 39                	aad    0x39
c001db27:	8d 58 d0             	lea    ebx,[eax-0x30]
c001db2a:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001db2e:	0f b6 db             	movzx  ebx,bl
c001db31:	09 fb                	or     ebx,edi
c001db33:	c1 e3 04             	shl    ebx,0x4
c001db36:	d4 40                	aam    0x40
c001db38:	d5 39                	aad    0x39
c001db3a:	83 e8 30             	sub    eax,0x30
c001db3d:	0f b6 f8             	movzx  edi,al
c001db40:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001db44:	09 fb                	or     ebx,edi
c001db46:	89 df                	mov    edi,ebx
c001db48:	c1 e7 04             	shl    edi,0x4
c001db4b:	d4 40                	aam    0x40
c001db4d:	d5 39                	aad    0x39
c001db4f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001db52:	0f b6 db             	movzx  ebx,bl
c001db55:	09 fb                	or     ebx,edi
c001db57:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001db5c:	83 c6 10             	add    esi,0x10
c001db5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db63:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001db67:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001db6a:	3c 0a                	cmp    al,0xa
c001db6c:	0f 85 a0 00 00 00    	jne    c001dc12 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001db72:	3c 0a                	cmp    al,0xa
c001db74:	0f 94 c0             	sete   al
c001db77:	0f b6 c0             	movzx  eax,al
c001db7a:	01 c6                	add    esi,eax
c001db7c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001db81:	0f 84 a2 00 00 00    	je     c001dc29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001db87:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001db8f:	0f 84 94 00 00 00    	je     c001dc29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001db95:	39 35 a4 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1a4,esi
c001db9b:	0f 8f bb fe ff ff    	jg     c001da5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001dba1:	e9 e8 00 00 00       	jmp    c001dc8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001dba6:	83 ec 0c             	sub    esp,0xc
c001dba9:	68 1a 6a 02 c0       	push   0xc0026a1a
c001dbae:	e8 e6 c1 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001dbb3:	83 c4 10             	add    esp,0x10
c001dbb6:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001dbbd:	0f 85 a6 fe ff ff    	jne    c001da69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dbc3:	e4 60                	in     al,0x60
c001dbc5:	3c 5a                	cmp    al,0x5a
c001dbc7:	74 04                	je     c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dbc9:	3c 1c                	cmp    al,0x1c
c001dbcb:	75 f6                	jne    c001dbc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dbcd:	e4 60                	in     al,0x60
c001dbcf:	3c 5a                	cmp    al,0x5a
c001dbd1:	74 fa                	je     c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dbd3:	3c 1c                	cmp    al,0x1c
c001dbd5:	74 f6                	je     c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dbd7:	e9 8d fe ff ff       	jmp    c001da69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dbdc:	83 ec 0c             	sub    esp,0xc
c001dbdf:	68 22 6a 02 c0       	push   0xc0026a22
c001dbe4:	e8 b0 c1 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001dbe9:	83 c4 10             	add    esp,0x10
c001dbec:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001dbf3:	0f 85 90 fe ff ff    	jne    c001da89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dbf9:	e4 60                	in     al,0x60
c001dbfb:	3c 5a                	cmp    al,0x5a
c001dbfd:	74 04                	je     c001dc03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dbff:	3c 1c                	cmp    al,0x1c
c001dc01:	75 f6                	jne    c001dbf9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001dc03:	e4 60                	in     al,0x60
c001dc05:	3c 5a                	cmp    al,0x5a
c001dc07:	74 fa                	je     c001dc03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dc09:	3c 1c                	cmp    al,0x1c
c001dc0b:	74 f6                	je     c001dc03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dc0d:	e9 77 fe ff ff       	jmp    c001da89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dc12:	47                   	inc    edi
c001dc13:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001dc17:	0f 84 55 ff ff ff    	je     c001db72 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001dc1d:	46                   	inc    esi
c001dc1e:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001dc21:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dc24:	e9 3e ff ff ff       	jmp    c001db67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001dc29:	80 f9 44             	cmp    cl,0x44
c001dc2c:	74 0e                	je     c001dc3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001dc2e:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001dc36:	0f 85 59 ff ff ff    	jne    c001db95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dc3c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dc40:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001dc44:	c1 e0 04             	shl    eax,0x4
c001dc47:	83 ea 30             	sub    edx,0x30
c001dc4a:	09 d0                	or     eax,edx
c001dc4c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001dc53:	0f 85 3c ff ff ff    	jne    c001db95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dc59:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001dc5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc61:	c1 e2 04             	shl    edx,0x4
c001dc64:	83 e8 30             	sub    eax,0x30
c001dc67:	09 d0                	or     eax,edx
c001dc69:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dc70:	0f 85 1f ff ff ff    	jne    c001db95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dc76:	50                   	push   eax
c001dc77:	50                   	push   eax
c001dc78:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dc7c:	50                   	push   eax
c001dc7d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001dc84:	e8 b7 2a fe ff       	call   c0000740 <strcpy>
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	eb 15                	jmp    c001dca3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001dc8e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dc95:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dca0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dca3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dcaa:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dcb0:	5b                   	pop    ebx
c001dcb1:	5e                   	pop    esi
c001dcb2:	5f                   	pop    edi
c001dcb3:	5d                   	pop    ebp
c001dcb4:	c3                   	ret    
c001dcb5:	90                   	nop

c001dcb6 <PCI::checkBus(unsigned char)>:
c001dcb6:	56                   	push   esi
c001dcb7:	53                   	push   ebx
c001dcb8:	31 db                	xor    ebx,ebx
c001dcba:	51                   	push   ecx
c001dcbb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dcc0:	52                   	push   edx
c001dcc1:	53                   	push   ebx
c001dcc2:	43                   	inc    ebx
c001dcc3:	56                   	push   esi
c001dcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcc8:	e8 bf 07 00 00       	call   c001e48c <PCI::checkDevice(unsigned char, unsigned char)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	83 fb 20             	cmp    ebx,0x20
c001dcd3:	75 eb                	jne    c001dcc0 <PCI::checkBus(unsigned char)+0xa>
c001dcd5:	58                   	pop    eax
c001dcd6:	5b                   	pop    ebx
c001dcd7:	5e                   	pop    esi
c001dcd8:	c3                   	ret    
c001dcd9:	90                   	nop

c001dcda <PCI::foundDevice(PCIDeviceInfo)>:
c001dcda:	55                   	push   ebp
c001dcdb:	57                   	push   edi
c001dcdc:	56                   	push   esi
c001dcdd:	53                   	push   ebx
c001dcde:	83 ec 1c             	sub    esp,0x1c
c001dce1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dce5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dceb:	0f 84 20 04 00 00    	je     c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcf1:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001dcf8:	75 37                	jne    c001dd31 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dcfa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dcfe:	66 81 f9 06 04       	cmp    cx,0x406
c001dd03:	75 5b                	jne    c001dd60 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dd05:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dd0a:	50                   	push   eax
c001dd0b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dd10:	50                   	push   eax
c001dd11:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dd16:	50                   	push   eax
c001dd17:	53                   	push   ebx
c001dd18:	e8 33 fa ff ff       	call   c001d750 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dd1d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dd21:	0f b6 c0             	movzx  eax,al
c001dd24:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dd28:	83 c4 2c             	add    esp,0x2c
c001dd2b:	5b                   	pop    ebx
c001dd2c:	5e                   	pop    esi
c001dd2d:	5f                   	pop    edi
c001dd2e:	5d                   	pop    ebp
c001dd2f:	eb 85                	jmp    c001dcb6 <PCI::checkBus(unsigned char)>
c001dd31:	83 ec 0c             	sub    esp,0xc
c001dd34:	68 2b 6a 02 c0       	push   0xc0026a2b
c001dd39:	e8 5b c0 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001dd48:	75 b0                	jne    c001dcfa <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dd4a:	e4 60                	in     al,0x60
c001dd4c:	3c 5a                	cmp    al,0x5a
c001dd4e:	74 04                	je     c001dd54 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dd50:	3c 1c                	cmp    al,0x1c
c001dd52:	75 f6                	jne    c001dd4a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dd54:	e4 60                	in     al,0x60
c001dd56:	3c 5a                	cmp    al,0x5a
c001dd58:	74 fa                	je     c001dd54 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dd5a:	3c 1c                	cmp    al,0x1c
c001dd5c:	74 f6                	je     c001dd54 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dd5e:	eb 9a                	jmp    c001dcfa <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dd60:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dd66:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dd6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd6e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dd72:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dd76:	88 d0                	mov    al,dl
c001dd78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd7d:	74 3b                	je     c001ddba <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dd7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dd83:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dd86:	85 d2                	test   edx,edx
c001dd88:	74 24                	je     c001ddae <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dd8a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dd90:	31 ef                	xor    edi,ebp
c001dd92:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dd98:	75 14                	jne    c001ddae <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dd9a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dda0:	75 0c                	jne    c001ddae <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dda2:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dda8:	0f 84 63 03 00 00    	je     c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001ddae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ddb2:	8b 12                	mov    edx,DWORD PTR [edx]
c001ddb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ddb8:	eb be                	jmp    c001dd78 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001ddba:	66 81 f9 01 06       	cmp    cx,0x601
c001ddbf:	0f 85 81 01 00 00    	jne    c001df46 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001ddc5:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001ddcc:	75 25                	jne    c001ddf3 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001ddce:	83 ec 0c             	sub    esp,0xc
c001ddd1:	68 64 01 00 00       	push   0x164
c001ddd6:	e8 64 bf fe ff       	call   c0009d3f <malloc>
c001dddb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddde:	89 c5                	mov    ebp,eax
c001dde0:	e8 d3 12 00 00       	call   c001f0b8 <SATABus::SATABus()>
c001dde5:	83 c4 10             	add    esp,0x10
c001dde8:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001ddef:	74 4a                	je     c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001ddf1:	eb 2f                	jmp    c001de22 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001ddf3:	83 ec 0c             	sub    esp,0xc
c001ddf6:	68 3b 6a 02 c0       	push   0xc0026a3b
c001ddfb:	e8 99 bf fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001de00:	83 c4 10             	add    esp,0x10
c001de03:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001de0a:	75 c2                	jne    c001ddce <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001de0c:	e4 60                	in     al,0x60
c001de0e:	3c 1c                	cmp    al,0x1c
c001de10:	74 04                	je     c001de16 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001de12:	3c 5a                	cmp    al,0x5a
c001de14:	75 f6                	jne    c001de0c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001de16:	e4 60                	in     al,0x60
c001de18:	3c 5a                	cmp    al,0x5a
c001de1a:	74 fa                	je     c001de16 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001de1c:	3c 1c                	cmp    al,0x1c
c001de1e:	74 f6                	je     c001de16 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001de20:	eb ac                	jmp    c001ddce <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001de22:	83 ec 0c             	sub    esp,0xc
c001de25:	68 41 6a 02 c0       	push   0xc0026a41
c001de2a:	e8 6a bf fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001de39:	74 1b                	je     c001de56 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001de3b:	50                   	push   eax
c001de3c:	50                   	push   eax
c001de3d:	55                   	push   ebp
c001de3e:	53                   	push   ebx
c001de3f:	e8 ba 06 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c001de44:	83 c4 10             	add    esp,0x10
c001de47:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001de4e:	74 33                	je     c001de83 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001de50:	eb 18                	jmp    c001de6a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001de52:	3c 1c                	cmp    al,0x1c
c001de54:	74 0c                	je     c001de62 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001de56:	e4 60                	in     al,0x60
c001de58:	3c 5a                	cmp    al,0x5a
c001de5a:	75 f6                	jne    c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001de5c:	eb 04                	jmp    c001de62 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001de5e:	3c 1c                	cmp    al,0x1c
c001de60:	75 d9                	jne    c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001de62:	e4 60                	in     al,0x60
c001de64:	3c 5a                	cmp    al,0x5a
c001de66:	74 fa                	je     c001de62 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001de68:	eb f4                	jmp    c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	68 49 6a 02 c0       	push   0xc0026a49
c001de72:	e8 22 bf fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001de77:	83 c4 10             	add    esp,0x10
c001de7a:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001de81:	74 29                	je     c001deac <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001de83:	83 ec 2c             	sub    esp,0x2c
c001de86:	b9 09 00 00 00       	mov    ecx,0x9
c001de8b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001de8f:	fc                   	cld    
c001de90:	89 e7                	mov    edi,esp
c001de92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de94:	55                   	push   ebp
c001de95:	e8 76 05 ff ff       	call   c000e410 <Device::preOpenPCI(PCIDeviceInfo)>
c001de9a:	83 c4 30             	add    esp,0x30
c001de9d:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001dea4:	74 33                	je     c001ded9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dea6:	eb 18                	jmp    c001dec0 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dea8:	3c 1c                	cmp    al,0x1c
c001deaa:	74 0c                	je     c001deb8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001deac:	e4 60                	in     al,0x60
c001deae:	3c 5a                	cmp    al,0x5a
c001deb0:	75 f6                	jne    c001dea8 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001deb2:	eb 04                	jmp    c001deb8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001deb4:	3c 1c                	cmp    al,0x1c
c001deb6:	75 cb                	jne    c001de83 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001deb8:	e4 60                	in     al,0x60
c001deba:	3c 5a                	cmp    al,0x5a
c001debc:	74 fa                	je     c001deb8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001debe:	eb f4                	jmp    c001deb4 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dec0:	83 ec 0c             	sub    esp,0xc
c001dec3:	68 51 6a 02 c0       	push   0xc0026a51
c001dec8:	e8 cc be fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001ded7:	74 23                	je     c001defc <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001ded9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dedc:	6a 00                	push   0x0
c001dede:	6a 00                	push   0x0
c001dee0:	6a 00                	push   0x0
c001dee2:	55                   	push   ebp
c001dee3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dee6:	83 c4 10             	add    esp,0x10
c001dee9:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001def0:	0f 84 1b 02 00 00    	je     c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001def6:	eb 18                	jmp    c001df10 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001def8:	3c 1c                	cmp    al,0x1c
c001defa:	74 0c                	je     c001df08 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001defc:	e4 60                	in     al,0x60
c001defe:	3c 5a                	cmp    al,0x5a
c001df00:	75 f6                	jne    c001def8 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001df02:	eb 04                	jmp    c001df08 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001df04:	3c 1c                	cmp    al,0x1c
c001df06:	75 d1                	jne    c001ded9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001df08:	e4 60                	in     al,0x60
c001df0a:	3c 5a                	cmp    al,0x5a
c001df0c:	74 fa                	je     c001df08 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001df0e:	eb f4                	jmp    c001df04 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001df10:	83 ec 0c             	sub    esp,0xc
c001df13:	68 59 6a 02 c0       	push   0xc0026a59
c001df18:	e8 7c be fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001df1d:	83 c4 10             	add    esp,0x10
c001df20:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001df27:	0f 85 e4 01 00 00    	jne    c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df2d:	e4 60                	in     al,0x60
c001df2f:	3c 5a                	cmp    al,0x5a
c001df31:	74 04                	je     c001df37 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001df33:	3c 1c                	cmp    al,0x1c
c001df35:	75 f6                	jne    c001df2d <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001df37:	e4 60                	in     al,0x60
c001df39:	3c 5a                	cmp    al,0x5a
c001df3b:	74 fa                	je     c001df37 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001df3d:	3c 1c                	cmp    al,0x1c
c001df3f:	74 f6                	je     c001df37 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001df41:	e9 cb 01 00 00       	jmp    c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df46:	66 81 f9 01 01       	cmp    cx,0x101
c001df4b:	0f 85 7a 01 00 00    	jne    c001e0cb <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001df51:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001df58:	75 25                	jne    c001df7f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001df5a:	83 ec 0c             	sub    esp,0xc
c001df5d:	68 70 02 00 00       	push   0x270
c001df62:	e8 d8 bd fe ff       	call   c0009d3f <malloc>
c001df67:	89 04 24             	mov    DWORD PTR [esp],eax
c001df6a:	89 c5                	mov    ebp,eax
c001df6c:	e8 df 05 00 00       	call   c001e550 <IDE::IDE()>
c001df71:	83 c4 10             	add    esp,0x10
c001df74:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001df7b:	74 4a                	je     c001dfc7 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001df7d:	eb 2f                	jmp    c001dfae <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001df7f:	83 ec 0c             	sub    esp,0xc
c001df82:	68 61 6a 02 c0       	push   0xc0026a61
c001df87:	e8 0d be fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001df8c:	83 c4 10             	add    esp,0x10
c001df8f:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001df96:	75 c2                	jne    c001df5a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001df98:	e4 60                	in     al,0x60
c001df9a:	3c 5a                	cmp    al,0x5a
c001df9c:	74 04                	je     c001dfa2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001df9e:	3c 1c                	cmp    al,0x1c
c001dfa0:	75 f6                	jne    c001df98 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001dfa2:	e4 60                	in     al,0x60
c001dfa4:	3c 5a                	cmp    al,0x5a
c001dfa6:	74 fa                	je     c001dfa2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dfa8:	3c 1c                	cmp    al,0x1c
c001dfaa:	74 f6                	je     c001dfa2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dfac:	eb ac                	jmp    c001df5a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dfae:	83 ec 0c             	sub    esp,0xc
c001dfb1:	68 68 6a 02 c0       	push   0xc0026a68
c001dfb6:	e8 de bd fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001dfc5:	74 1b                	je     c001dfe2 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001dfc7:	57                   	push   edi
c001dfc8:	57                   	push   edi
c001dfc9:	55                   	push   ebp
c001dfca:	53                   	push   ebx
c001dfcb:	e8 2e 05 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c001dfd0:	83 c4 10             	add    esp,0x10
c001dfd3:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001dfda:	74 33                	je     c001e00f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dfdc:	eb 18                	jmp    c001dff6 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001dfde:	3c 1c                	cmp    al,0x1c
c001dfe0:	74 0c                	je     c001dfee <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dfe2:	e4 60                	in     al,0x60
c001dfe4:	3c 5a                	cmp    al,0x5a
c001dfe6:	75 f6                	jne    c001dfde <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001dfe8:	eb 04                	jmp    c001dfee <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dfea:	3c 1c                	cmp    al,0x1c
c001dfec:	75 d9                	jne    c001dfc7 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dfee:	e4 60                	in     al,0x60
c001dff0:	3c 5a                	cmp    al,0x5a
c001dff2:	74 fa                	je     c001dfee <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dff4:	eb f4                	jmp    c001dfea <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	68 6f 6a 02 c0       	push   0xc0026a6f
c001dffe:	e8 96 bd fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001e003:	83 c4 10             	add    esp,0x10
c001e006:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001e00d:	74 29                	je     c001e038 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e00f:	83 ec 2c             	sub    esp,0x2c
c001e012:	b9 09 00 00 00       	mov    ecx,0x9
c001e017:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e01b:	fc                   	cld    
c001e01c:	89 e7                	mov    edi,esp
c001e01e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e020:	55                   	push   ebp
c001e021:	e8 ea 03 ff ff       	call   c000e410 <Device::preOpenPCI(PCIDeviceInfo)>
c001e026:	83 c4 30             	add    esp,0x30
c001e029:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001e030:	74 33                	je     c001e065 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e032:	eb 18                	jmp    c001e04c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e034:	3c 1c                	cmp    al,0x1c
c001e036:	74 0c                	je     c001e044 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e038:	e4 60                	in     al,0x60
c001e03a:	3c 5a                	cmp    al,0x5a
c001e03c:	75 f6                	jne    c001e034 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e03e:	eb 04                	jmp    c001e044 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e040:	3c 1c                	cmp    al,0x1c
c001e042:	75 cb                	jne    c001e00f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e044:	e4 60                	in     al,0x60
c001e046:	3c 5a                	cmp    al,0x5a
c001e048:	74 fa                	je     c001e044 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e04a:	eb f4                	jmp    c001e040 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	68 76 6a 02 c0       	push   0xc0026a76
c001e054:	e8 40 bd fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001e059:	83 c4 10             	add    esp,0x10
c001e05c:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001e063:	74 23                	je     c001e088 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e065:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e068:	6a 00                	push   0x0
c001e06a:	6a 00                	push   0x0
c001e06c:	6a 00                	push   0x0
c001e06e:	55                   	push   ebp
c001e06f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001e07c:	0f 84 8f 00 00 00    	je     c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e082:	eb 18                	jmp    c001e09c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e084:	3c 1c                	cmp    al,0x1c
c001e086:	74 0c                	je     c001e094 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e088:	e4 60                	in     al,0x60
c001e08a:	3c 5a                	cmp    al,0x5a
c001e08c:	75 f6                	jne    c001e084 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e08e:	eb 04                	jmp    c001e094 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e090:	3c 1c                	cmp    al,0x1c
c001e092:	75 d1                	jne    c001e065 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e094:	e4 60                	in     al,0x60
c001e096:	3c 5a                	cmp    al,0x5a
c001e098:	74 fa                	je     c001e094 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e09a:	eb f4                	jmp    c001e090 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	68 7d 6a 02 c0       	push   0xc0026a7d
c001e0a4:	e8 f0 bc fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001e0a9:	83 c4 10             	add    esp,0x10
c001e0ac:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001e0b3:	75 5c                	jne    c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0b5:	e4 60                	in     al,0x60
c001e0b7:	3c 5a                	cmp    al,0x5a
c001e0b9:	74 04                	je     c001e0bf <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e0bb:	3c 1c                	cmp    al,0x1c
c001e0bd:	75 f6                	jne    c001e0b5 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e0bf:	e4 60                	in     al,0x60
c001e0c1:	3c 5a                	cmp    al,0x5a
c001e0c3:	74 fa                	je     c001e0bf <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e0c5:	3c 1c                	cmp    al,0x1c
c001e0c7:	74 f6                	je     c001e0bf <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e0c9:	eb 46                	jmp    c001e111 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0cb:	83 ec 0c             	sub    esp,0xc
c001e0ce:	68 58 01 00 00       	push   0x158
c001e0d3:	e8 67 bc fe ff       	call   c0009d3f <malloc>
c001e0d8:	89 c5                	mov    ebp,eax
c001e0da:	58                   	pop    eax
c001e0db:	5a                   	pop    edx
c001e0dc:	68 84 6a 02 c0       	push   0xc0026a84
c001e0e1:	55                   	push   ebp
c001e0e2:	e8 21 07 ff ff       	call   c000e808 <DriverlessDevice::DriverlessDevice(char const*)>
c001e0e7:	59                   	pop    ecx
c001e0e8:	5e                   	pop    esi
c001e0e9:	55                   	push   ebp
c001e0ea:	53                   	push   ebx
c001e0eb:	e8 0e 04 ff ff       	call   c000e4fe <Device::addChild(Device*)>
c001e0f0:	83 c4 10             	add    esp,0x10
c001e0f3:	b9 09 00 00 00       	mov    ecx,0x9
c001e0f8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e0fc:	fc                   	cld    
c001e0fd:	89 fe                	mov    esi,edi
c001e0ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e101:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e105:	83 c4 1c             	add    esp,0x1c
c001e108:	5b                   	pop    ebx
c001e109:	5e                   	pop    esi
c001e10a:	5f                   	pop    edi
c001e10b:	5d                   	pop    ebp
c001e10c:	e9 ff 02 ff ff       	jmp    c000e410 <Device::preOpenPCI(PCIDeviceInfo)>
c001e111:	83 c4 1c             	add    esp,0x1c
c001e114:	5b                   	pop    ebx
c001e115:	5e                   	pop    esi
c001e116:	5f                   	pop    edi
c001e117:	5d                   	pop    ebp
c001e118:	c3                   	ret    
c001e119:	90                   	nop

c001e11a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e11a:	55                   	push   ebp
c001e11b:	57                   	push   edi
c001e11c:	56                   	push   esi
c001e11d:	53                   	push   ebx
c001e11e:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e124:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e12b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e132:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e136:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e13d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e141:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e148:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e14c:	68 9e 6a 02 c0       	push   0xc0026a9e
c001e151:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e155:	53                   	push   ebx
c001e156:	e8 e5 25 fe ff       	call   c0000740 <strcpy>
c001e15b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e160:	b2 64                	mov    dl,0x64
c001e162:	89 c8                	mov    eax,ecx
c001e164:	f6 f2                	div    dl
c001e166:	b2 0a                	mov    dl,0xa
c001e168:	83 c0 30             	add    eax,0x30
c001e16b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e16f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e173:	83 c4 10             	add    esp,0x10
c001e176:	89 c8                	mov    eax,ecx
c001e178:	f6 f2                	div    dl
c001e17a:	89 c1                	mov    ecx,eax
c001e17c:	0f b6 c0             	movzx  eax,al
c001e17f:	88 e9                	mov    cl,ch
c001e181:	f6 f2                	div    dl
c001e183:	88 e0                	mov    al,ah
c001e185:	83 c0 30             	add    eax,0x30
c001e188:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e18c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e190:	8d 41 30             	lea    eax,[ecx+0x30]
c001e193:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e197:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e19b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e1a0:	f6 f2                	div    dl
c001e1a2:	89 c1                	mov    ecx,eax
c001e1a4:	0f b6 c0             	movzx  eax,al
c001e1a7:	88 e9                	mov    cl,ch
c001e1a9:	f6 f2                	div    dl
c001e1ab:	88 e0                	mov    al,ah
c001e1ad:	83 c0 30             	add    eax,0x30
c001e1b0:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e1b4:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e1b8:	8d 41 30             	lea    eax,[ecx+0x30]
c001e1bb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e1bf:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e1c3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e1c8:	f6 f2                	div    dl
c001e1ca:	89 c1                	mov    ecx,eax
c001e1cc:	0f b6 c0             	movzx  eax,al
c001e1cf:	88 e9                	mov    cl,ch
c001e1d1:	f6 f2                	div    dl
c001e1d3:	88 e0                	mov    al,ah
c001e1d5:	83 c0 30             	add    eax,0x30
c001e1d8:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001e1df:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e1e3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e1e7:	8d 41 30             	lea    eax,[ecx+0x30]
c001e1ea:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e1ee:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e1f2:	74 29                	je     c001e21d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	53                   	push   ebx
c001e1f8:	e8 9c bb fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001e207:	75 14                	jne    c001e21d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e209:	e4 60                	in     al,0x60
c001e20b:	3c 1c                	cmp    al,0x1c
c001e20d:	74 04                	je     c001e213 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e20f:	3c 5a                	cmp    al,0x5a
c001e211:	75 f6                	jne    c001e209 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e213:	e4 60                	in     al,0x60
c001e215:	3c 5a                	cmp    al,0x5a
c001e217:	74 fa                	je     c001e213 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e219:	3c 1c                	cmp    al,0x1c
c001e21b:	74 f6                	je     c001e213 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e21d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e222:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e227:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	6a 0c                	push   0xc
c001e231:	56                   	push   esi
c001e232:	53                   	push   ebx
c001e233:	57                   	push   edi
c001e234:	55                   	push   ebp
c001e235:	e8 68 f3 ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e23a:	83 c4 20             	add    esp,0x20
c001e23d:	56                   	push   esi
c001e23e:	53                   	push   ebx
c001e23f:	57                   	push   edi
c001e240:	55                   	push   ebp
c001e241:	e8 50 f4 ff ff       	call   c001d696 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e246:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e24b:	56                   	push   esi
c001e24c:	53                   	push   ebx
c001e24d:	57                   	push   edi
c001e24e:	55                   	push   ebp
c001e24f:	e8 d8 f4 ff ff       	call   c001d72c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e254:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e258:	83 c4 14             	add    esp,0x14
c001e25b:	6a 3c                	push   0x3c
c001e25d:	56                   	push   esi
c001e25e:	53                   	push   ebx
c001e25f:	57                   	push   edi
c001e260:	55                   	push   ebp
c001e261:	e8 3c f3 ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e266:	0f b6 c4             	movzx  eax,ah
c001e269:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e26d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e271:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e278:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c001e27d:	83 c4 20             	add    esp,0x20
c001e280:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e286:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e28d:	0f 84 38 01 00 00    	je     c001e3cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e293:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e29b:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c001e2a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2a4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2aa:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e2b0:	0f 8e 15 01 00 00    	jle    c001e3cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e2b6:	50                   	push   eax
c001e2b7:	50                   	push   eax
c001e2b8:	68 b9 6a 02 c0       	push   0xc0026ab9
c001e2bd:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e2c1:	50                   	push   eax
c001e2c2:	e8 79 24 fe ff       	call   c0000740 <strcpy>
c001e2c7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e2cb:	b9 0a 00 00 00       	mov    ecx,0xa
c001e2d0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e2d4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e2d8:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e2dc:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e2e0:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e2e4:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e2e8:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e2ec:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e2f0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e2f4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e2f8:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e2fc:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e300:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e304:	83 c4 10             	add    esp,0x10
c001e307:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e30b:	99                   	cdq    
c001e30c:	f7 f9                	idiv   ecx
c001e30e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e312:	99                   	cdq    
c001e313:	f7 f9                	idiv   ecx
c001e315:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e319:	83 c2 30             	add    edx,0x30
c001e31c:	83 c0 30             	add    eax,0x30
c001e31f:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e323:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e327:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001e32e:	74 2d                	je     c001e35d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e337:	50                   	push   eax
c001e338:	e8 5c ba fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001e33d:	83 c4 10             	add    esp,0x10
c001e340:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001e347:	75 14                	jne    c001e35d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e349:	e4 60                	in     al,0x60
c001e34b:	3c 5a                	cmp    al,0x5a
c001e34d:	74 04                	je     c001e353 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e34f:	3c 1c                	cmp    al,0x1c
c001e351:	75 f6                	jne    c001e349 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e353:	e4 60                	in     al,0x60
c001e355:	3c 5a                	cmp    al,0x5a
c001e357:	74 fa                	je     c001e353 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e359:	3c 1c                	cmp    al,0x1c
c001e35b:	74 f6                	je     c001e353 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e35d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e361:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c001e366:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e36c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e36f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e376:	39 d3                	cmp    ebx,edx
c001e378:	75 48                	jne    c001e3c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e37a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e381:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e385:	75 3b                	jne    c001e3c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e387:	83 ec 0c             	sub    esp,0xc
c001e38a:	68 e8 6a 02 c0       	push   0xc0026ae8
c001e38f:	e8 b7 ec fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001e394:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e398:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c001e39d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e3a3:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e3ab:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e3af:	50                   	push   eax
c001e3b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e3b4:	53                   	push   ebx
c001e3b5:	68 0d 6b 02 c0       	push   0xc0026b0d
c001e3ba:	e8 8c ec fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001e3bf:	83 c4 20             	add    esp,0x20
c001e3c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e3c6:	e9 d0 fe ff ff       	jmp    c001e29b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e3cb:	31 d2                	xor    edx,edx
c001e3cd:	83 ec 0c             	sub    esp,0xc
c001e3d0:	56                   	push   esi
c001e3d1:	53                   	push   ebx
c001e3d2:	57                   	push   edi
c001e3d3:	52                   	push   edx
c001e3d4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e3d8:	55                   	push   ebp
c001e3d9:	e8 9a f3 ff ff       	call   c001d778 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e3e2:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e3e9:	42                   	inc    edx
c001e3ea:	83 c4 20             	add    esp,0x20
c001e3ed:	83 fa 06             	cmp    edx,0x6
c001e3f0:	75 db                	jne    c001e3cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e3f2:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e3f7:	83 ec 0c             	sub    esp,0xc
c001e3fa:	86 e0                	xchg   al,ah
c001e3fc:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e404:	6a 02                	push   0x2
c001e406:	56                   	push   esi
c001e407:	53                   	push   ebx
c001e408:	57                   	push   edi
c001e409:	55                   	push   ebp
c001e40a:	e8 93 f1 ff ff       	call   c001d5a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e40f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e417:	83 c4 20             	add    esp,0x20
c001e41a:	56                   	push   esi
c001e41b:	53                   	push   ebx
c001e41c:	57                   	push   edi
c001e41d:	55                   	push   ebp
c001e41e:	e8 bd f2 ff ff       	call   c001d6e0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e423:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e42a:	56                   	push   esi
c001e42b:	53                   	push   ebx
c001e42c:	57                   	push   edi
c001e42d:	55                   	push   ebp
c001e42e:	e8 17 f2 ff ff       	call   c001d64a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e433:	b9 09 00 00 00       	mov    ecx,0x9
c001e438:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e440:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e444:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e44b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e44f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e456:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e45a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e461:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e465:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e46c:	83 ec 0c             	sub    esp,0xc
c001e46f:	fc                   	cld    
c001e470:	89 e7                	mov    edi,esp
c001e472:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e479:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e47b:	55                   	push   ebp
c001e47c:	e8 59 f8 ff ff       	call   c001dcda <PCI::foundDevice(PCIDeviceInfo)>
c001e481:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e487:	5b                   	pop    ebx
c001e488:	5e                   	pop    esi
c001e489:	5f                   	pop    edi
c001e48a:	5d                   	pop    ebp
c001e48b:	c3                   	ret    

c001e48c <PCI::checkDevice(unsigned char, unsigned char)>:
c001e48c:	55                   	push   ebp
c001e48d:	57                   	push   edi
c001e48e:	56                   	push   esi
c001e48f:	53                   	push   ebx
c001e490:	83 ec 0c             	sub    esp,0xc
c001e493:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e497:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e49c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e4a1:	6a 00                	push   0x0
c001e4a3:	56                   	push   esi
c001e4a4:	57                   	push   edi
c001e4a5:	55                   	push   ebp
c001e4a6:	e8 9f f1 ff ff       	call   c001d64a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4ab:	6a 00                	push   0x0
c001e4ad:	56                   	push   esi
c001e4ae:	57                   	push   edi
c001e4af:	55                   	push   ebp
c001e4b0:	e8 65 fc ff ff       	call   c001e11a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e4b5:	83 c4 20             	add    esp,0x20
c001e4b8:	6a 00                	push   0x0
c001e4ba:	56                   	push   esi
c001e4bb:	57                   	push   edi
c001e4bc:	55                   	push   ebp
c001e4bd:	e8 ac f1 ff ff       	call   c001d66e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e4c2:	83 c4 10             	add    esp,0x10
c001e4c5:	84 c0                	test   al,al
c001e4c7:	79 27                	jns    c001e4f0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e4c9:	bb 01 00 00 00       	mov    ebx,0x1
c001e4ce:	53                   	push   ebx
c001e4cf:	56                   	push   esi
c001e4d0:	57                   	push   edi
c001e4d1:	55                   	push   ebp
c001e4d2:	e8 73 f1 ff ff       	call   c001d64a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4d7:	83 c4 10             	add    esp,0x10
c001e4da:	66 40                	inc    ax
c001e4dc:	74 0c                	je     c001e4ea <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e4de:	53                   	push   ebx
c001e4df:	56                   	push   esi
c001e4e0:	57                   	push   edi
c001e4e1:	55                   	push   ebp
c001e4e2:	e8 33 fc ff ff       	call   c001e11a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e4e7:	83 c4 10             	add    esp,0x10
c001e4ea:	43                   	inc    ebx
c001e4eb:	83 fb 08             	cmp    ebx,0x8
c001e4ee:	75 de                	jne    c001e4ce <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e4f0:	83 c4 0c             	add    esp,0xc
c001e4f3:	5b                   	pop    ebx
c001e4f4:	5e                   	pop    esi
c001e4f5:	5f                   	pop    edi
c001e4f6:	5d                   	pop    ebp
c001e4f7:	c3                   	ret    

c001e4f8 <PCI::detect()>:
c001e4f8:	56                   	push   esi
c001e4f9:	53                   	push   ebx
c001e4fa:	53                   	push   ebx
c001e4fb:	31 db                	xor    ebx,ebx
c001e4fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e501:	6a 00                	push   0x0
c001e503:	6a 00                	push   0x0
c001e505:	6a 00                	push   0x0
c001e507:	56                   	push   esi
c001e508:	e8 61 f1 ff ff       	call   c001d66e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e50d:	83 c4 10             	add    esp,0x10
c001e510:	a8 80                	test   al,0x80
c001e512:	75 21                	jne    c001e535 <PCI::detect()+0x3d>
c001e514:	51                   	push   ecx
c001e515:	51                   	push   ecx
c001e516:	6a 00                	push   0x0
c001e518:	56                   	push   esi
c001e519:	e8 98 f7 ff ff       	call   c001dcb6 <PCI::checkBus(unsigned char)>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	eb 24                	jmp    c001e547 <PCI::detect()+0x4f>
c001e523:	52                   	push   edx
c001e524:	52                   	push   edx
c001e525:	53                   	push   ebx
c001e526:	43                   	inc    ebx
c001e527:	56                   	push   esi
c001e528:	e8 89 f7 ff ff       	call   c001dcb6 <PCI::checkBus(unsigned char)>
c001e52d:	83 c4 10             	add    esp,0x10
c001e530:	83 fb 08             	cmp    ebx,0x8
c001e533:	74 12                	je     c001e547 <PCI::detect()+0x4f>
c001e535:	53                   	push   ebx
c001e536:	6a 00                	push   0x0
c001e538:	6a 00                	push   0x0
c001e53a:	56                   	push   esi
c001e53b:	e8 0a f1 ff ff       	call   c001d64a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e540:	83 c4 10             	add    esp,0x10
c001e543:	66 40                	inc    ax
c001e545:	74 dc                	je     c001e523 <PCI::detect()+0x2b>
c001e547:	58                   	pop    eax
c001e548:	5b                   	pop    ebx
c001e549:	5e                   	pop    esi
c001e54a:	c3                   	ret    
c001e54b:	90                   	nop

c001e54c <IDE::close(int, int, void*)>:
c001e54c:	83 c8 ff             	or     eax,0xffffffff
c001e54f:	c3                   	ret    

c001e550 <IDE::IDE()>:
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e557:	83 ec 08             	sub    esp,0x8
c001e55a:	68 54 6b 02 c0       	push   0xc0026b54
c001e55f:	50                   	push   eax
c001e560:	e8 47 03 ff ff       	call   c000e8ac <HardDiskController::HardDiskController(char const*)>
c001e565:	83 c4 10             	add    esp,0x10
c001e568:	ba 00 6c 02 c0       	mov    edx,0xc0026c00
c001e56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e571:	89 10                	mov    DWORD PTR [eax],edx
c001e573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e577:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e57e:	90                   	nop
c001e57f:	83 c4 0c             	add    esp,0xc
c001e582:	c3                   	ret    
c001e583:	90                   	nop

c001e584 <IDE::prepareInterrupt(unsigned char)>:
c001e584:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e589:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e58d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e595:	c3                   	ret    

c001e596 <selectDrive(unsigned char, unsigned char)>:
c001e596:	c3                   	ret    
c001e597:	90                   	nop

c001e598 <IDE::getBase(unsigned char)>:
c001e598:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5a1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e5a9:	c3                   	ret    

c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e5aa:	55                   	push   ebp
c001e5ab:	57                   	push   edi
c001e5ac:	56                   	push   esi
c001e5ad:	53                   	push   ebx
c001e5ae:	83 ec 1c             	sub    esp,0x1c
c001e5b1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e5b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e5b9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e5bc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e5c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e5c4:	80 f9 03             	cmp    cl,0x3
c001e5c7:	77 51                	ja     c001e61a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e5c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5cd:	0f b6 f2             	movzx  esi,dl
c001e5d0:	0f b6 db             	movzx  ebx,bl
c001e5d3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e5d6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e5da:	83 ca 80             	or     edx,0xffffff80
c001e5dd:	0f b6 d2             	movzx  edx,dl
c001e5e0:	52                   	push   edx
c001e5e1:	6a 0c                	push   0xc
c001e5e3:	56                   	push   esi
c001e5e4:	57                   	push   edi
c001e5e5:	e8 c0 ff ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5ea:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e5ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e5f3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e5f7:	ee                   	out    dx,al
c001e5f8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e5fd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e601:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e605:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e609:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e611:	83 c4 2c             	add    esp,0x2c
c001e614:	5b                   	pop    ebx
c001e615:	5e                   	pop    esi
c001e616:	5f                   	pop    edi
c001e617:	5d                   	pop    ebp
c001e618:	eb 90                	jmp    c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e61a:	80 fb 07             	cmp    bl,0x7
c001e61d:	77 12                	ja     c001e631 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e61f:	0f b6 d2             	movzx  edx,dl
c001e622:	0f b6 db             	movzx  ebx,bl
c001e625:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e62d:	89 da                	mov    edx,ebx
c001e62f:	eb 2f                	jmp    c001e660 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e631:	80 fb 0d             	cmp    bl,0xd
c001e634:	77 13                	ja     c001e649 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e636:	0f b6 d2             	movzx  edx,dl
c001e639:	0f b6 db             	movzx  ebx,bl
c001e63c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e643:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e647:	eb 17                	jmp    c001e660 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e649:	80 fb 15             	cmp    bl,0x15
c001e64c:	77 13                	ja     c001e661 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e64e:	0f b6 d2             	movzx  edx,dl
c001e651:	0f b6 db             	movzx  ebx,bl
c001e654:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e65c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e660:	ee                   	out    dx,al
c001e661:	83 c4 1c             	add    esp,0x1c
c001e664:	5b                   	pop    ebx
c001e665:	5e                   	pop    esi
c001e666:	5f                   	pop    edi
c001e667:	5d                   	pop    ebp
c001e668:	c3                   	ret    
c001e669:	90                   	nop

c001e66a <IDE::read(unsigned char, unsigned char)>:
c001e66a:	55                   	push   ebp
c001e66b:	57                   	push   edi
c001e66c:	56                   	push   esi
c001e66d:	53                   	push   ebx
c001e66e:	83 ec 1c             	sub    esp,0x1c
c001e671:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e675:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e679:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e67c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e680:	3c 03                	cmp    al,0x3
c001e682:	77 43                	ja     c001e6c7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e684:	0f b6 f2             	movzx  esi,dl
c001e687:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e68a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e68e:	83 c8 80             	or     eax,0xffffff80
c001e691:	0f b6 c0             	movzx  eax,al
c001e694:	50                   	push   eax
c001e695:	6a 0c                	push   0xc
c001e697:	56                   	push   esi
c001e698:	57                   	push   edi
c001e699:	e8 0c ff ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e69e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e6a3:	0f b6 c3             	movzx  eax,bl
c001e6a6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e6aa:	ec                   	in     al,dx
c001e6ab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e6af:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e6b4:	52                   	push   edx
c001e6b5:	6a 0c                	push   0xc
c001e6b7:	56                   	push   esi
c001e6b8:	57                   	push   edi
c001e6b9:	e8 ec fe ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6be:	83 c4 20             	add    esp,0x20
c001e6c1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e6c5:	eb 49                	jmp    c001e710 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e6c7:	80 fb 07             	cmp    bl,0x7
c001e6ca:	77 12                	ja     c001e6de <IDE::read(unsigned char, unsigned char)+0x74>
c001e6cc:	0f b6 d2             	movzx  edx,dl
c001e6cf:	0f b6 c3             	movzx  eax,bl
c001e6d2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e6da:	89 c2                	mov    edx,eax
c001e6dc:	eb 31                	jmp    c001e70f <IDE::read(unsigned char, unsigned char)+0xa5>
c001e6de:	80 fb 0d             	cmp    bl,0xd
c001e6e1:	77 13                	ja     c001e6f6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e6e3:	0f b6 d2             	movzx  edx,dl
c001e6e6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e6ed:	0f b6 d3             	movzx  edx,bl
c001e6f0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e6f4:	eb 19                	jmp    c001e70f <IDE::read(unsigned char, unsigned char)+0xa5>
c001e6f6:	31 c0                	xor    eax,eax
c001e6f8:	80 fb 15             	cmp    bl,0x15
c001e6fb:	77 13                	ja     c001e710 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e6fd:	0f b6 d2             	movzx  edx,dl
c001e700:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e708:	0f b6 d3             	movzx  edx,bl
c001e70b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e70f:	ec                   	in     al,dx
c001e710:	83 c4 1c             	add    esp,0x1c
c001e713:	5b                   	pop    ebx
c001e714:	5e                   	pop    esi
c001e715:	5f                   	pop    edi
c001e716:	5d                   	pop    ebp
c001e717:	c3                   	ret    

c001e718 <IDE::waitInterrupt(unsigned char)>:
c001e718:	55                   	push   ebp
c001e719:	57                   	push   edi
c001e71a:	56                   	push   esi
c001e71b:	53                   	push   ebx
c001e71c:	31 db                	xor    ebx,ebx
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e725:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e72a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e732:	89 e8                	mov    eax,ebp
c001e734:	84 c0                	test   al,al
c001e736:	75 30                	jne    c001e768 <IDE::waitInterrupt(unsigned char)+0x50>
c001e738:	50                   	push   eax
c001e739:	6a 0c                	push   0xc
c001e73b:	56                   	push   esi
c001e73c:	57                   	push   edi
c001e73d:	e8 28 ff ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001e742:	83 c4 10             	add    esp,0x10
c001e745:	a8 01                	test   al,0x1
c001e747:	75 27                	jne    c001e770 <IDE::waitInterrupt(unsigned char)+0x58>
c001e749:	f6 c3 04             	test   bl,0x4
c001e74c:	75 12                	jne    c001e760 <IDE::waitInterrupt(unsigned char)+0x48>
c001e74e:	83 fb 32             	cmp    ebx,0x32
c001e751:	7e 0d                	jle    c001e760 <IDE::waitInterrupt(unsigned char)+0x48>
c001e753:	83 ec 0c             	sub    esp,0xc
c001e756:	6a 64                	push   0x64
c001e758:	e8 73 a2 ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c001e75d:	83 c4 10             	add    esp,0x10
c001e760:	83 fb 3c             	cmp    ebx,0x3c
c001e763:	74 0b                	je     c001e770 <IDE::waitInterrupt(unsigned char)+0x58>
c001e765:	43                   	inc    ebx
c001e766:	eb c2                	jmp    c001e72a <IDE::waitInterrupt(unsigned char)+0x12>
c001e768:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e770:	83 c4 0c             	add    esp,0xc
c001e773:	89 e8                	mov    eax,ebp
c001e775:	5b                   	pop    ebx
c001e776:	5e                   	pop    esi
c001e777:	5f                   	pop    edi
c001e778:	5d                   	pop    ebp
c001e779:	c3                   	ret    

c001e77a <ideChannel0IRQHandler(regs*, void*)>:
c001e77a:	83 ec 10             	sub    esp,0x10
c001e77d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e781:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e788:	6a 07                	push   0x7
c001e78a:	6a 00                	push   0x0
c001e78c:	50                   	push   eax
c001e78d:	e8 d8 fe ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001e792:	83 c4 1c             	add    esp,0x1c
c001e795:	c3                   	ret    

c001e796 <ideChannel1IRQHandler(regs*, void*)>:
c001e796:	83 ec 10             	sub    esp,0x10
c001e799:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e79d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e7a4:	6a 07                	push   0x7
c001e7a6:	6a 01                	push   0x1
c001e7a8:	50                   	push   eax
c001e7a9:	e8 bc fe ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001e7ae:	83 c4 1c             	add    esp,0x1c
c001e7b1:	c3                   	ret    

c001e7b2 <IDE::enableIRQs(unsigned char, bool)>:
c001e7b2:	57                   	push   edi
c001e7b3:	56                   	push   esi
c001e7b4:	be 04 00 00 00       	mov    esi,0x4
c001e7b9:	53                   	push   ebx
c001e7ba:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e7bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7c3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e7c8:	0f 94 c0             	sete   al
c001e7cb:	d1 e0                	shl    eax,1
c001e7cd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e7d4:	0f b6 c0             	movzx  eax,al
c001e7d7:	50                   	push   eax
c001e7d8:	6a 0c                	push   0xc
c001e7da:	57                   	push   edi
c001e7db:	53                   	push   ebx
c001e7dc:	e8 c9 fd ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7e1:	83 c4 10             	add    esp,0x10
c001e7e4:	50                   	push   eax
c001e7e5:	6a 0c                	push   0xc
c001e7e7:	57                   	push   edi
c001e7e8:	53                   	push   ebx
c001e7e9:	e8 7c fe ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001e7ee:	83 c4 10             	add    esp,0x10
c001e7f1:	4e                   	dec    esi
c001e7f2:	75 f0                	jne    c001e7e4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e7f4:	5b                   	pop    ebx
c001e7f5:	5e                   	pop    esi
c001e7f6:	5f                   	pop    edi
c001e7f7:	c3                   	ret    

c001e7f8 <IDE::open(int, int, void*)>:
c001e7f8:	55                   	push   ebp
c001e7f9:	57                   	push   edi
c001e7fa:	56                   	push   esi
c001e7fb:	53                   	push   ebx
c001e7fc:	83 ec 1c             	sub    esp,0x1c
c001e7ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e803:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e80c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e815:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e81c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e823:	0f 85 cb 02 00 00    	jne    c001eaf4 <IDE::open(int, int, void*)+0x2fc>
c001e829:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e82f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e833:	83 e0 7f             	and    eax,0x7f
c001e836:	3c 05                	cmp    al,0x5
c001e838:	74 04                	je     c001e83e <IDE::open(int, int, void*)+0x46>
c001e83a:	3c 0f                	cmp    al,0xf
c001e83c:	75 32                	jne    c001e870 <IDE::open(int, int, void*)+0x78>
c001e83e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e844:	83 e0 fc             	and    eax,0xfffffffc
c001e847:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e84e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e854:	83 e0 fc             	and    eax,0xfffffffc
c001e857:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e85e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e864:	83 e0 fc             	and    eax,0xfffffffc
c001e867:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e86e:	eb 14                	jmp    c001e884 <IDE::open(int, int, void*)+0x8c>
c001e870:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e87a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e884:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e88b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e892:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e896:	89 c6                	mov    esi,eax
c001e898:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e89d:	c1 e6 10             	shl    esi,0x10
c001e8a0:	89 e8                	mov    eax,ebp
c001e8a2:	89 fa                	mov    edx,edi
c001e8a4:	c1 e0 0b             	shl    eax,0xb
c001e8a7:	09 f0                	or     eax,esi
c001e8a9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e8b0:	c1 e6 08             	shl    esi,0x8
c001e8b3:	09 c6                	or     esi,eax
c001e8b5:	89 f0                	mov    eax,esi
c001e8b7:	0d 08 00 00 80       	or     eax,0x80000008
c001e8bc:	ef                   	out    dx,eax
c001e8bd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e8c2:	89 ca                	mov    edx,ecx
c001e8c4:	ed                   	in     eax,dx
c001e8c5:	c1 e8 10             	shr    eax,0x10
c001e8c8:	3d ff ff 00 00       	cmp    eax,0xffff
c001e8cd:	0f 84 f5 00 00 00    	je     c001e9c8 <IDE::open(int, int, void*)+0x1d0>
c001e8d3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e8d9:	89 fa                	mov    edx,edi
c001e8db:	89 f0                	mov    eax,esi
c001e8dd:	ef                   	out    dx,eax
c001e8de:	b0 fe                	mov    al,0xfe
c001e8e0:	89 ca                	mov    edx,ecx
c001e8e2:	ee                   	out    dx,al
c001e8e3:	89 f0                	mov    eax,esi
c001e8e5:	89 fa                	mov    edx,edi
c001e8e7:	ef                   	out    dx,eax
c001e8e8:	89 ca                	mov    edx,ecx
c001e8ea:	ed                   	in     eax,dx
c001e8eb:	3c fe                	cmp    al,0xfe
c001e8ed:	0f 85 a9 00 00 00    	jne    c001e99c <IDE::open(int, int, void*)+0x1a4>
c001e8f3:	8b 15 68 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028268
c001e8f9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e900:	74 33                	je     c001e935 <IDE::open(int, int, void*)+0x13d>
c001e902:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e908:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e90c:	40                   	inc    eax
c001e90d:	83 ec 0c             	sub    esp,0xc
c001e910:	0f b6 c0             	movzx  eax,al
c001e913:	50                   	push   eax
c001e914:	55                   	push   ebp
c001e915:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e919:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e91f:	51                   	push   ecx
c001e920:	e8 57 3c ff ff       	call   c001257c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e925:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e92a:	83 c4 1c             	add    esp,0x1c
c001e92d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e933:	eb 0a                	jmp    c001e93f <IDE::open(int, int, void*)+0x147>
c001e935:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e93f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e946:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e94d:	c1 e1 10             	shl    ecx,0x10
c001e950:	c1 e0 08             	shl    eax,0x8
c001e953:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e958:	09 c1                	or     ecx,eax
c001e95a:	89 fa                	mov    edx,edi
c001e95c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e963:	c1 e0 0b             	shl    eax,0xb
c001e966:	09 c1                	or     ecx,eax
c001e968:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e96e:	89 c8                	mov    eax,ecx
c001e970:	ef                   	out    dx,eax
c001e971:	be fc 0c 00 00       	mov    esi,0xcfc
c001e976:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e97c:	89 f2                	mov    edx,esi
c001e97e:	ee                   	out    dx,al
c001e97f:	89 c8                	mov    eax,ecx
c001e981:	89 fa                	mov    edx,edi
c001e983:	ef                   	out    dx,eax
c001e984:	89 f2                	mov    edx,esi
c001e986:	ed                   	in     eax,dx
c001e987:	0f b6 c0             	movzx  eax,al
c001e98a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e990:	74 46                	je     c001e9d8 <IDE::open(int, int, void*)+0x1e0>
c001e992:	83 ec 0c             	sub    esp,0xc
c001e995:	68 6c 6b 02 c0       	push   0xc0026b6c
c001e99a:	eb 34                	jmp    c001e9d0 <IDE::open(int, int, void*)+0x1d8>
c001e99c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e9a5:	75 17                	jne    c001e9be <IDE::open(int, int, void*)+0x1c6>
c001e9a7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e9ac:	74 07                	je     c001e9b5 <IDE::open(int, int, void*)+0x1bd>
c001e9ae:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e9b3:	75 09                	jne    c001e9be <IDE::open(int, int, void*)+0x1c6>
c001e9b5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e9bc:	eb 1a                	jmp    c001e9d8 <IDE::open(int, int, void*)+0x1e0>
c001e9be:	83 ec 0c             	sub    esp,0xc
c001e9c1:	68 74 6b 02 c0       	push   0xc0026b74
c001e9c6:	eb 08                	jmp    c001e9d0 <IDE::open(int, int, void*)+0x1d8>
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	68 a5 6b 02 c0       	push   0xc0026ba5
c001e9d0:	e8 98 66 ff ff       	call   c001506d <Krnl::panic(char const*)>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e9df:	79 1a                	jns    c001e9fb <IDE::open(int, int, void*)+0x203>
c001e9e1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e9e7:	83 e0 fc             	and    eax,0xfffffffc
c001e9ea:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e9f1:	83 c0 08             	add    eax,0x8
c001e9f4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e9fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ea01:	89 c2                	mov    edx,eax
c001ea03:	83 e2 0f             	and    edx,0xf
c001ea06:	66 83 fa 08          	cmp    dx,0x8
c001ea0a:	75 0a                	jne    c001ea16 <IDE::open(int, int, void*)+0x21e>
c001ea0c:	83 e8 02             	sub    eax,0x2
c001ea0f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea16:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ea1c:	89 c2                	mov    edx,eax
c001ea1e:	83 e2 0f             	and    edx,0xf
c001ea21:	66 83 fa 08          	cmp    dx,0x8
c001ea25:	75 0a                	jne    c001ea31 <IDE::open(int, int, void*)+0x239>
c001ea27:	83 e8 02             	sub    eax,0x2
c001ea2a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea31:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001ea38:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ea3f:	89 c8                	mov    eax,ecx
c001ea41:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ea44:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ea48:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ea4c:	8d 51 01             	lea    edx,[ecx+0x1]
c001ea4f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ea54:	0f b6 d2             	movzx  edx,dl
c001ea57:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ea5e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea61:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ea65:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ea69:	8d 48 02             	lea    ecx,[eax+0x2]
c001ea6c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ea71:	0f b6 c9             	movzx  ecx,cl
c001ea74:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ea7a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ea7d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ea81:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ea85:	8d 50 03             	lea    edx,[eax+0x3]
c001ea88:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ea8d:	0f b6 d2             	movzx  edx,dl
c001ea90:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ea96:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea99:	83 c0 04             	add    eax,0x4
c001ea9c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eaa0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001eaa4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001eaaa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eaaf:	56                   	push   esi
c001eab0:	56                   	push   esi
c001eab1:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001eab8:	50                   	push   eax
c001eab9:	68 cf 6b 02 c0       	push   0xc0026bcf
c001eabe:	e8 88 e5 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001eac3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001eaca:	83 c4 10             	add    esp,0x10
c001eacd:	66 85 f6             	test   si,si
c001ead0:	74 5f                	je     c001eb31 <IDE::open(int, int, void*)+0x339>
c001ead2:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ead9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eadc:	89 d0                	mov    eax,edx
c001eade:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eae2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001eae6:	40                   	inc    eax
c001eae7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001eaed:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eaf2:	eb 3d                	jmp    c001eb31 <IDE::open(int, int, void*)+0x339>
c001eaf4:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001eafa:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eb01:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eb08:	66 05 06 02          	add    ax,0x206
c001eb0c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb13:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001eb1a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eb21:	66 05 06 02          	add    ax,0x206
c001eb25:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb2c:	e9 ca fe ff ff       	jmp    c001e9fb <IDE::open(int, int, void*)+0x203>
c001eb31:	50                   	push   eax
c001eb32:	50                   	push   eax
c001eb33:	6a 00                	push   0x0
c001eb35:	53                   	push   ebx
c001eb36:	e8 49 fa ff ff       	call   c001e584 <IDE::prepareInterrupt(unsigned char)>
c001eb3b:	5a                   	pop    edx
c001eb3c:	59                   	pop    ecx
c001eb3d:	6a 01                	push   0x1
c001eb3f:	53                   	push   ebx
c001eb40:	e8 3f fa ff ff       	call   c001e584 <IDE::prepareInterrupt(unsigned char)>
c001eb45:	83 c4 0c             	add    esp,0xc
c001eb48:	6a 00                	push   0x0
c001eb4a:	6a 00                	push   0x0
c001eb4c:	53                   	push   ebx
c001eb4d:	e8 60 fc ff ff       	call   c001e7b2 <IDE::enableIRQs(unsigned char, bool)>
c001eb52:	83 c4 0c             	add    esp,0xc
c001eb55:	6a 00                	push   0x0
c001eb57:	6a 01                	push   0x1
c001eb59:	53                   	push   ebx
c001eb5a:	e8 53 fc ff ff       	call   c001e7b2 <IDE::enableIRQs(unsigned char, bool)>
c001eb5f:	83 c4 10             	add    esp,0x10
c001eb62:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001eb69:	74 34                	je     c001eb9f <IDE::open(int, int, void*)+0x3a7>
c001eb6b:	83 ec 0c             	sub    esp,0xc
c001eb6e:	53                   	push   ebx
c001eb6f:	6a 01                	push   0x1
c001eb71:	68 7a e7 01 c0       	push   0xc001e77a
c001eb76:	6a 0e                	push   0xe
c001eb78:	53                   	push   ebx
c001eb79:	e8 f8 f8 fe ff       	call   c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb7e:	83 c4 14             	add    esp,0x14
c001eb81:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eb87:	53                   	push   ebx
c001eb88:	6a 01                	push   0x1
c001eb8a:	68 96 e7 01 c0       	push   0xc001e796
c001eb8f:	6a 0f                	push   0xf
c001eb91:	53                   	push   ebx
c001eb92:	e8 df f8 fe ff       	call   c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb97:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001eb9d:	eb 38                	jmp    c001ebd7 <IDE::open(int, int, void*)+0x3df>
c001eb9f:	83 ec 0c             	sub    esp,0xc
c001eba2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ebac:	53                   	push   ebx
c001ebad:	6a 00                	push   0x0
c001ebaf:	68 7a e7 01 c0       	push   0xc001e77a
c001ebb4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ebba:	53                   	push   ebx
c001ebbb:	e8 b6 f8 fe ff       	call   c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebc0:	83 c4 14             	add    esp,0x14
c001ebc3:	53                   	push   ebx
c001ebc4:	6a 00                	push   0x0
c001ebc6:	68 96 e7 01 c0       	push   0xc001e796
c001ebcb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ebd1:	53                   	push   ebx
c001ebd2:	e8 9f f8 fe ff       	call   c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ebd9:	83 c4 20             	add    esp,0x20
c001ebdc:	83 ec 0c             	sub    esp,0xc
c001ebdf:	53                   	push   ebx
c001ebe0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ebe3:	83 c4 0c             	add    esp,0xc
c001ebe6:	6a 07                	push   0x7
c001ebe8:	6a 00                	push   0x0
c001ebea:	53                   	push   ebx
c001ebeb:	e8 7a fa ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ebf0:	83 c4 0c             	add    esp,0xc
c001ebf3:	6a 07                	push   0x7
c001ebf5:	6a 01                	push   0x1
c001ebf7:	53                   	push   ebx
c001ebf8:	e8 6d fa ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ebfd:	83 c4 0c             	add    esp,0xc
c001ec00:	6a 01                	push   0x1
c001ec02:	6a 00                	push   0x0
c001ec04:	53                   	push   ebx
c001ec05:	e8 a8 fb ff ff       	call   c001e7b2 <IDE::enableIRQs(unsigned char, bool)>
c001ec0a:	83 c4 0c             	add    esp,0xc
c001ec0d:	6a 01                	push   0x1
c001ec0f:	6a 01                	push   0x1
c001ec11:	53                   	push   ebx
c001ec12:	e8 9b fb ff ff       	call   c001e7b2 <IDE::enableIRQs(unsigned char, bool)>
c001ec17:	83 c4 2c             	add    esp,0x2c
c001ec1a:	31 c0                	xor    eax,eax
c001ec1c:	5b                   	pop    ebx
c001ec1d:	5e                   	pop    esi
c001ec1e:	5f                   	pop    edi
c001ec1f:	5d                   	pop    ebp
c001ec20:	c3                   	ret    
c001ec21:	90                   	nop

c001ec22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ec22:	55                   	push   ebp
c001ec23:	57                   	push   edi
c001ec24:	56                   	push   esi
c001ec25:	53                   	push   ebx
c001ec26:	83 ec 1c             	sub    esp,0x1c
c001ec29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ec31:	8d 50 f8             	lea    edx,[eax-0x8]
c001ec34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ec38:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ec3c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ec40:	80 fa 03             	cmp    dl,0x3
c001ec43:	77 5d                	ja     c001eca2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ec45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec4d:	0f b6 db             	movzx  ebx,bl
c001ec50:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ec53:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ec57:	83 ca 80             	or     edx,0xffffff80
c001ec5a:	0f b6 d2             	movzx  edx,dl
c001ec5d:	52                   	push   edx
c001ec5e:	6a 0c                	push   0xc
c001ec60:	53                   	push   ebx
c001ec61:	56                   	push   esi
c001ec62:	e8 43 f9 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec67:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ec6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ec74:	0f b6 c0             	movzx  eax,al
c001ec77:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ec7b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ec7d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ec82:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ec86:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ec8a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ec8e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ec96:	83 c4 2c             	add    esp,0x2c
c001ec99:	5b                   	pop    ebx
c001ec9a:	5e                   	pop    esi
c001ec9b:	5f                   	pop    edi
c001ec9c:	5d                   	pop    ebp
c001ec9d:	e9 08 f9 ff ff       	jmp    c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca2:	3c 07                	cmp    al,0x7
c001eca4:	77 10                	ja     c001ecb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eca6:	0f b6 db             	movzx  ebx,bl
c001eca9:	0f b6 d0             	movzx  edx,al
c001ecac:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ecb4:	eb 2d                	jmp    c001ece3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ecb6:	3c 0d                	cmp    al,0xd
c001ecb8:	77 13                	ja     c001eccd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ecba:	0f b6 db             	movzx  ebx,bl
c001ecbd:	0f b6 c0             	movzx  eax,al
c001ecc0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ecc7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001eccb:	eb 16                	jmp    c001ece3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eccd:	3c 15                	cmp    al,0x15
c001eccf:	77 14                	ja     c001ece5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ecd1:	0f b6 db             	movzx  ebx,bl
c001ecd4:	0f b6 c0             	movzx  eax,al
c001ecd7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ecdf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ece3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ece5:	83 c4 1c             	add    esp,0x1c
c001ece8:	5b                   	pop    ebx
c001ece9:	5e                   	pop    esi
c001ecea:	5f                   	pop    edi
c001eceb:	5d                   	pop    ebp
c001ecec:	c3                   	ret    
c001eced:	90                   	nop

c001ecee <IDE::detect()>:
c001ecee:	55                   	push   ebp
c001ecef:	57                   	push   edi
c001ecf0:	56                   	push   esi
c001ecf1:	53                   	push   ebx
c001ecf2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ecf8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ecff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ed06:	0f 85 97 02 00 00    	jne    c001efa3 <IDE::detect()+0x2b5>
c001ed0c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ed13:	31 f6                	xor    esi,esi
c001ed15:	31 ed                	xor    ebp,ebp
c001ed17:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ed1f:	89 e8                	mov    eax,ebp
c001ed21:	c1 e0 06             	shl    eax,0x6
c001ed24:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ed2c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ed30:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ed34:	c1 e0 04             	shl    eax,0x4
c001ed37:	83 c8 a0             	or     eax,0xffffffa0
c001ed3a:	0f b6 c0             	movzx  eax,al
c001ed3d:	50                   	push   eax
c001ed3e:	6a 06                	push   0x6
c001ed40:	56                   	push   esi
c001ed41:	53                   	push   ebx
c001ed42:	e8 63 f8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed47:	83 c4 0c             	add    esp,0xc
c001ed4a:	6a 0c                	push   0xc
c001ed4c:	56                   	push   esi
c001ed4d:	53                   	push   ebx
c001ed4e:	e8 17 f9 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ed53:	83 c4 0c             	add    esp,0xc
c001ed56:	6a 0c                	push   0xc
c001ed58:	56                   	push   esi
c001ed59:	53                   	push   ebx
c001ed5a:	e8 0b f9 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ed5f:	83 c4 0c             	add    esp,0xc
c001ed62:	6a 0c                	push   0xc
c001ed64:	56                   	push   esi
c001ed65:	53                   	push   ebx
c001ed66:	e8 ff f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ed6b:	83 c4 0c             	add    esp,0xc
c001ed6e:	6a 0c                	push   0xc
c001ed70:	56                   	push   esi
c001ed71:	53                   	push   ebx
c001ed72:	e8 f3 f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ed77:	68 ec 00 00 00       	push   0xec
c001ed7c:	6a 07                	push   0x7
c001ed7e:	56                   	push   esi
c001ed7f:	53                   	push   ebx
c001ed80:	e8 25 f8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed85:	83 c4 1c             	add    esp,0x1c
c001ed88:	6a 0c                	push   0xc
c001ed8a:	56                   	push   esi
c001ed8b:	53                   	push   ebx
c001ed8c:	e8 d9 f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ed91:	83 c4 0c             	add    esp,0xc
c001ed94:	6a 0c                	push   0xc
c001ed96:	56                   	push   esi
c001ed97:	53                   	push   ebx
c001ed98:	e8 cd f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ed9d:	83 c4 0c             	add    esp,0xc
c001eda0:	6a 0c                	push   0xc
c001eda2:	56                   	push   esi
c001eda3:	53                   	push   ebx
c001eda4:	e8 c1 f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001eda9:	83 c4 0c             	add    esp,0xc
c001edac:	6a 0c                	push   0xc
c001edae:	56                   	push   esi
c001edaf:	53                   	push   ebx
c001edb0:	e8 b5 f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001edb5:	83 c4 0c             	add    esp,0xc
c001edb8:	6a 0c                	push   0xc
c001edba:	56                   	push   esi
c001edbb:	53                   	push   ebx
c001edbc:	e8 a9 f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	84 c0                	test   al,al
c001edc6:	0f 84 5f 01 00 00    	je     c001ef2b <IDE::detect()+0x23d>
c001edcc:	31 ff                	xor    edi,edi
c001edce:	50                   	push   eax
c001edcf:	6a 0c                	push   0xc
c001edd1:	56                   	push   esi
c001edd2:	53                   	push   ebx
c001edd3:	e8 92 f8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001edd8:	83 c4 10             	add    esp,0x10
c001eddb:	a8 01                	test   al,0x1
c001eddd:	0f 85 69 01 00 00    	jne    c001ef4c <IDE::detect()+0x25e>
c001ede3:	84 c0                	test   al,al
c001ede5:	78 04                	js     c001edeb <IDE::detect()+0xfd>
c001ede7:	a8 08                	test   al,0x8
c001ede9:	75 23                	jne    c001ee0e <IDE::detect()+0x120>
c001edeb:	47                   	inc    edi
c001edec:	81 ff 17 01 00 00    	cmp    edi,0x117
c001edf2:	7e da                	jle    c001edce <IDE::detect()+0xe0>
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	6a 32                	push   0x32
c001edf9:	e8 d2 9b ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ee07:	75 c5                	jne    c001edce <IDE::detect()+0xe0>
c001ee09:	e9 3e 01 00 00       	jmp    c001ef4c <IDE::detect()+0x25e>
c001ee0e:	31 c9                	xor    ecx,ecx
c001ee10:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ee14:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	68 80 00 00 00       	push   0x80
c001ee20:	57                   	push   edi
c001ee21:	6a 00                	push   0x0
c001ee23:	56                   	push   esi
c001ee24:	53                   	push   ebx
c001ee25:	e8 f8 fd ff ff       	call   c001ec22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ee2a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ee2f:	89 e8                	mov    eax,ebp
c001ee31:	89 d1                	mov    ecx,edx
c001ee33:	c1 e0 06             	shl    eax,0x6
c001ee36:	01 d8                	add    eax,ebx
c001ee38:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ee3f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ee46:	89 f2                	mov    edx,esi
c001ee48:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ee4e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ee52:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ee58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ee5c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ee63:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ee6b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ee72:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ee7a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ee80:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ee87:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ee8d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ee91:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ee95:	83 c4 20             	add    esp,0x20
c001ee98:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ee9b:	83 c0 02             	add    eax,0x2
c001ee9e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001eea4:	83 c7 02             	add    edi,0x2
c001eea7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001eeaa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001eeb0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001eeb4:	75 e2                	jne    c001ee98 <IDE::detect()+0x1aa>
c001eeb6:	89 e8                	mov    eax,ebp
c001eeb8:	c1 e0 06             	shl    eax,0x6
c001eebb:	01 d8                	add    eax,ebx
c001eebd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001eec3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001eeca:	66 c1 ea 09          	shr    dx,0x9
c001eece:	83 e2 01             	and    edx,0x1
c001eed1:	84 c9                	test   cl,cl
c001eed3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001eed9:	75 22                	jne    c001eefd <IDE::detect()+0x20f>
c001eedb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001eee2:	74 46                	je     c001ef2a <IDE::detect()+0x23c>
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	68 7c 01 00 00       	push   0x17c
c001eeec:	e8 4e ae fe ff       	call   c0009d3f <malloc>
c001eef1:	89 c7                	mov    edi,eax
c001eef3:	89 04 24             	mov    DWORD PTR [esp],eax
c001eef6:	e8 49 06 00 00       	call   c001f544 <ATA::ATA()>
c001eefb:	eb 17                	jmp    c001ef14 <IDE::detect()+0x226>
c001eefd:	83 ec 0c             	sub    esp,0xc
c001ef00:	68 84 01 00 00       	push   0x184
c001ef05:	e8 35 ae fe ff       	call   c0009d3f <malloc>
c001ef0a:	89 c7                	mov    edi,eax
c001ef0c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef0f:	e8 b8 0c 00 00       	call   c001fbcc <ATAPI::ATAPI()>
c001ef14:	5a                   	pop    edx
c001ef15:	59                   	pop    ecx
c001ef16:	57                   	push   edi
c001ef17:	53                   	push   ebx
c001ef18:	e8 e1 f5 fe ff       	call   c000e4fe <Device::addChild(Device*)>
c001ef1d:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef1f:	53                   	push   ebx
c001ef20:	55                   	push   ebp
c001ef21:	6a 00                	push   0x0
c001ef23:	57                   	push   edi
c001ef24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ef27:	83 c4 20             	add    esp,0x20
c001ef2a:	45                   	inc    ebp
c001ef2b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ef30:	74 0d                	je     c001ef3f <IDE::detect()+0x251>
c001ef32:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ef3a:	e9 e0 fd ff ff       	jmp    c001ed1f <IDE::detect()+0x31>
c001ef3f:	4e                   	dec    esi
c001ef40:	74 61                	je     c001efa3 <IDE::detect()+0x2b5>
c001ef42:	be 01 00 00 00       	mov    esi,0x1
c001ef47:	e9 cb fd ff ff       	jmp    c001ed17 <IDE::detect()+0x29>
c001ef4c:	50                   	push   eax
c001ef4d:	6a 04                	push   0x4
c001ef4f:	56                   	push   esi
c001ef50:	53                   	push   ebx
c001ef51:	e8 14 f7 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ef56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ef5a:	83 c4 0c             	add    esp,0xc
c001ef5d:	6a 05                	push   0x5
c001ef5f:	56                   	push   esi
c001ef60:	53                   	push   ebx
c001ef61:	e8 04 f7 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001ef66:	83 c4 10             	add    esp,0x10
c001ef69:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ef6d:	80 fa 14             	cmp    dl,0x14
c001ef70:	75 04                	jne    c001ef76 <IDE::detect()+0x288>
c001ef72:	3c eb                	cmp    al,0xeb
c001ef74:	eb 07                	jmp    c001ef7d <IDE::detect()+0x28f>
c001ef76:	3c 96                	cmp    al,0x96
c001ef78:	75 b1                	jne    c001ef2b <IDE::detect()+0x23d>
c001ef7a:	80 fa 69             	cmp    dl,0x69
c001ef7d:	75 ac                	jne    c001ef2b <IDE::detect()+0x23d>
c001ef7f:	68 a1 00 00 00       	push   0xa1
c001ef84:	6a 07                	push   0x7
c001ef86:	56                   	push   esi
c001ef87:	53                   	push   ebx
c001ef88:	e8 1d f6 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef8d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ef94:	e8 37 9a ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c001ef99:	83 c4 10             	add    esp,0x10
c001ef9c:	b1 01                	mov    cl,0x1
c001ef9e:	e9 6d fe ff ff       	jmp    c001ee10 <IDE::detect()+0x122>
c001efa3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001efa9:	5b                   	pop    ebx
c001efaa:	5e                   	pop    esi
c001efab:	5f                   	pop    edi
c001efac:	5d                   	pop    ebp
c001efad:	c3                   	ret    

c001efae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001efae:	55                   	push   ebp
c001efaf:	57                   	push   edi
c001efb0:	56                   	push   esi
c001efb1:	53                   	push   ebx
c001efb2:	83 ec 1c             	sub    esp,0x1c
c001efb5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001efb9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001efbd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001efc1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001efc5:	88 c3                	mov    bl,al
c001efc7:	84 c0                	test   al,al
c001efc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efcd:	0f 84 81 00 00 00    	je     c001f054 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001efd3:	83 ec 0c             	sub    esp,0xc
c001efd6:	68 eb 6b 02 c0       	push   0xc0026beb
c001efdb:	e8 6b e0 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001efe0:	83 c4 10             	add    esp,0x10
c001efe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efe7:	3c 01                	cmp    al,0x1
c001efe9:	74 63                	je     c001f04e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001efeb:	3c 02                	cmp    al,0x2
c001efed:	75 53                	jne    c001f042 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001efef:	d1 e6                	shl    esi,1
c001eff1:	09 ee                	or     esi,ebp
c001eff3:	50                   	push   eax
c001eff4:	89 f0                	mov    eax,esi
c001eff6:	6a 01                	push   0x1
c001eff8:	0f b6 f0             	movzx  esi,al
c001effb:	c1 e6 06             	shl    esi,0x6
c001effe:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f006:	50                   	push   eax
c001f007:	57                   	push   edi
c001f008:	e8 5d f6 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001f00d:	83 c4 10             	add    esp,0x10
c001f010:	a8 01                	test   al,0x1
c001f012:	74 02                	je     c001f016 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f014:	b3 07                	mov    bl,0x7
c001f016:	a8 02                	test   al,0x2
c001f018:	74 02                	je     c001f01c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f01a:	b3 03                	mov    bl,0x3
c001f01c:	a8 04                	test   al,0x4
c001f01e:	74 02                	je     c001f022 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f020:	b3 14                	mov    bl,0x14
c001f022:	a8 08                	test   al,0x8
c001f024:	74 02                	je     c001f028 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f026:	b3 03                	mov    bl,0x3
c001f028:	a8 10                	test   al,0x10
c001f02a:	74 02                	je     c001f02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f02c:	b3 15                	mov    bl,0x15
c001f02e:	a8 20                	test   al,0x20
c001f030:	74 02                	je     c001f034 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f032:	b3 03                	mov    bl,0x3
c001f034:	a8 40                	test   al,0x40
c001f036:	74 02                	je     c001f03a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f038:	b3 16                	mov    bl,0x16
c001f03a:	84 c0                	test   al,al
c001f03c:	79 16                	jns    c001f054 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f03e:	b3 0d                	mov    bl,0xd
c001f040:	eb 12                	jmp    c001f054 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f042:	3c 03                	cmp    al,0x3
c001f044:	74 0c                	je     c001f052 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f046:	3c 04                	cmp    al,0x4
c001f048:	75 0a                	jne    c001f054 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f04a:	b3 08                	mov    bl,0x8
c001f04c:	eb 06                	jmp    c001f054 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f04e:	b3 13                	mov    bl,0x13
c001f050:	eb 02                	jmp    c001f054 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f052:	b3 17                	mov    bl,0x17
c001f054:	83 c4 1c             	add    esp,0x1c
c001f057:	88 d8                	mov    al,bl
c001f059:	5b                   	pop    ebx
c001f05a:	5e                   	pop    esi
c001f05b:	5f                   	pop    edi
c001f05c:	5d                   	pop    ebp
c001f05d:	c3                   	ret    

c001f05e <IDE::polling(unsigned char, unsigned int)>:
c001f05e:	57                   	push   edi
c001f05f:	56                   	push   esi
c001f060:	53                   	push   ebx
c001f061:	bb 04 00 00 00       	mov    ebx,0x4
c001f066:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f06a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f06f:	52                   	push   edx
c001f070:	6a 0c                	push   0xc
c001f072:	56                   	push   esi
c001f073:	57                   	push   edi
c001f074:	e8 f1 f5 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	4b                   	dec    ebx
c001f07d:	75 f0                	jne    c001f06f <IDE::polling(unsigned char, unsigned int)+0x11>
c001f07f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f084:	50                   	push   eax
c001f085:	6a 0c                	push   0xc
c001f087:	56                   	push   esi
c001f088:	57                   	push   edi
c001f089:	e8 dc f5 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001f08e:	83 c4 10             	add    esp,0x10
c001f091:	a8 01                	test   al,0x1
c001f093:	75 17                	jne    c001f0ac <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f095:	a8 20                	test   al,0x20
c001f097:	75 0f                	jne    c001f0a8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f099:	4b                   	dec    ebx
c001f09a:	74 10                	je     c001f0ac <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f09c:	84 c0                	test   al,al
c001f09e:	78 e4                	js     c001f084 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f0a0:	a8 08                	test   al,0x8
c001f0a2:	74 e0                	je     c001f084 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f0a4:	31 c0                	xor    eax,eax
c001f0a6:	eb 06                	jmp    c001f0ae <IDE::polling(unsigned char, unsigned int)+0x50>
c001f0a8:	b0 01                	mov    al,0x1
c001f0aa:	eb 02                	jmp    c001f0ae <IDE::polling(unsigned char, unsigned int)+0x50>
c001f0ac:	b0 02                	mov    al,0x2
c001f0ae:	5b                   	pop    ebx
c001f0af:	5e                   	pop    esi
c001f0b0:	5f                   	pop    edi
c001f0b1:	c3                   	ret    

c001f0b2 <SATABus::close(int, int, void*)>:
c001f0b2:	31 c0                	xor    eax,eax
c001f0b4:	c3                   	ret    
c001f0b5:	90                   	nop

c001f0b6 <SATABus::detect()>:
c001f0b6:	c3                   	ret    
c001f0b7:	90                   	nop

c001f0b8 <SATABus::SATABus()>:
c001f0b8:	83 ec 0c             	sub    esp,0xc
c001f0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bf:	83 ec 08             	sub    esp,0x8
c001f0c2:	68 24 6c 02 c0       	push   0xc0026c24
c001f0c7:	50                   	push   eax
c001f0c8:	e8 df f7 fe ff       	call   c000e8ac <HardDiskController::HardDiskController(char const*)>
c001f0cd:	83 c4 10             	add    esp,0x10
c001f0d0:	ba cc 6c 02 c0       	mov    edx,0xc0026ccc
c001f0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d9:	89 10                	mov    DWORD PTR [eax],edx
c001f0db:	83 ec 0c             	sub    esp,0xc
c001f0de:	6a 50                	push   0x50
c001f0e0:	e8 fc b3 fe ff       	call   c000a4e1 <Phys::allocateContiguousPages(int)>
c001f0e5:	83 c4 10             	add    esp,0x10
c001f0e8:	89 c2                	mov    edx,eax
c001f0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f0f4:	83 ec 0c             	sub    esp,0xc
c001f0f7:	6a 50                	push   0x50
c001f0f9:	e8 f3 cb fe ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c001f0fe:	83 c4 10             	add    esp,0x10
c001f101:	89 c2                	mov    edx,eax
c001f103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f107:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f10d:	a1 94 83 02 c0       	mov    eax,ds:0xc0028394
c001f112:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f116:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f11c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f120:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	6a 03                	push   0x3
c001f12b:	6a 50                	push   0x50
c001f12d:	51                   	push   ecx
c001f12e:	52                   	push   edx
c001f12f:	50                   	push   eax
c001f130:	e8 1d d5 fe ff       	call   c000c652 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f135:	83 c4 20             	add    esp,0x20
c001f138:	90                   	nop
c001f139:	83 c4 0c             	add    esp,0xc
c001f13c:	c3                   	ret    
c001f13d:	90                   	nop

c001f13e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f13e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f142:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f145:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f148:	09 c2                	or     edx,eax
c001f14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f14e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f154:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f156:	31 c0                	xor    eax,eax
c001f158:	c1 e9 08             	shr    ecx,0x8
c001f15b:	83 e1 0f             	and    ecx,0xf
c001f15e:	39 c8                	cmp    eax,ecx
c001f160:	74 0a                	je     c001f16c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f162:	f6 c2 01             	test   dl,0x1
c001f165:	74 08                	je     c001f16f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f167:	d1 ea                	shr    edx,1
c001f169:	40                   	inc    eax
c001f16a:	eb f2                	jmp    c001f15e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f16c:	83 c8 ff             	or     eax,0xffffffff
c001f16f:	c3                   	ret    

c001f170 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f170:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f174:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f177:	89 c2                	mov    edx,eax
c001f179:	c1 ea 08             	shr    edx,0x8
c001f17c:	83 e2 0f             	and    edx,0xf
c001f17f:	fe ca                	dec    dl
c001f181:	75 31                	jne    c001f1b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f183:	83 e0 0f             	and    eax,0xf
c001f186:	3c 03                	cmp    al,0x3
c001f188:	75 2a                	jne    c001f1b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f18a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f18d:	b8 02 00 00 00       	mov    eax,0x2
c001f192:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f198:	74 1c                	je     c001f1b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f19a:	b8 04 00 00 00       	mov    eax,0x4
c001f19f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f1a5:	74 0f                	je     c001f1b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1a7:	31 c0                	xor    eax,eax
c001f1a9:	83 fa 03             	cmp    edx,0x3
c001f1ac:	0f 94 c0             	sete   al
c001f1af:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f1b3:	c3                   	ret    
c001f1b4:	31 c0                	xor    eax,eax
c001f1b6:	c3                   	ret    
c001f1b7:	90                   	nop

c001f1b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f1b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1bf:	0f ba e2 0f          	bt     edx,0xf
c001f1c3:	72 f7                	jb     c001f1bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f1c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1c8:	83 ca 10             	or     edx,0x10
c001f1cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f1ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1d1:	83 ca 01             	or     edx,0x1
c001f1d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f1d7:	c3                   	ret    

c001f1d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1df:	83 e2 fe             	and    edx,0xfffffffe
c001f1e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f1e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1e8:	83 e2 ef             	and    edx,0xffffffef
c001f1eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f1ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1f1:	0f ba e2 0e          	bt     edx,0xe
c001f1f5:	72 f7                	jb     c001f1ee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f1f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1fa:	0f ba e2 0f          	bt     edx,0xf
c001f1fe:	72 ee                	jb     c001f1ee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f200:	c3                   	ret    
c001f201:	90                   	nop

c001f202 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f202:	55                   	push   ebp
c001f203:	57                   	push   edi
c001f204:	56                   	push   esi
c001f205:	53                   	push   ebx
c001f206:	83 ec 1c             	sub    esp,0x1c
c001f209:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f20d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f211:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f215:	53                   	push   ebx
c001f216:	89 fd                	mov    ebp,edi
c001f218:	56                   	push   esi
c001f219:	c1 e5 0a             	shl    ebp,0xa
c001f21c:	e8 b7 ff ff ff       	call   c001f1d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f221:	83 ec 0c             	sub    esp,0xc
c001f224:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f22a:	01 e8                	add    eax,ebp
c001f22c:	89 03                	mov    DWORD PTR [ebx],eax
c001f22e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f230:	68 00 04 00 00       	push   0x400
c001f235:	6a 00                	push   0x0
c001f237:	50                   	push   eax
c001f238:	e8 47 14 fe ff       	call   c0000684 <memset>
c001f23d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f243:	89 fa                	mov    edx,edi
c001f245:	01 e8                	add    eax,ebp
c001f247:	c1 e7 0d             	shl    edi,0xd
c001f24a:	89 03                	mov    DWORD PTR [ebx],eax
c001f24c:	c1 e2 08             	shl    edx,0x8
c001f24f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f256:	81 c2 00 80 00 00    	add    edx,0x8000
c001f25c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f260:	89 d0                	mov    eax,edx
c001f262:	83 c4 1c             	add    esp,0x1c
c001f265:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f26b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f26e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f271:	68 00 01 00 00       	push   0x100
c001f276:	6a 00                	push   0x0
c001f278:	50                   	push   eax
c001f279:	e8 06 14 fe ff       	call   c0000684 <memset>
c001f27e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f282:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f288:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f28e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f292:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f295:	83 c4 10             	add    esp,0x10
c001f298:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f29f:	31 ff                	xor    edi,edi
c001f2a1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f2a7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f2ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2b1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2b7:	83 c5 20             	add    ebp,0x20
c001f2ba:	01 f8                	add    eax,edi
c001f2bc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f2bf:	52                   	push   edx
c001f2c0:	68 00 01 00 00       	push   0x100
c001f2c5:	6a 00                	push   0x0
c001f2c7:	50                   	push   eax
c001f2c8:	e8 b7 13 fe ff       	call   c0000684 <memset>
c001f2cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f2d1:	83 c4 10             	add    esp,0x10
c001f2d4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f2da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f2e1:	01 f8                	add    eax,edi
c001f2e3:	81 c7 00 01 00 00    	add    edi,0x100
c001f2e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f2ec:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f2f2:	75 b3                	jne    c001f2a7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f2f4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f2f8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f2fc:	83 c4 1c             	add    esp,0x1c
c001f2ff:	5b                   	pop    ebx
c001f300:	5e                   	pop    esi
c001f301:	5f                   	pop    edi
c001f302:	5d                   	pop    ebp
c001f303:	e9 b0 fe ff ff       	jmp    c001f1b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f308 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f308:	55                   	push   ebp
c001f309:	57                   	push   edi
c001f30a:	56                   	push   esi
c001f30b:	53                   	push   ebx
c001f30c:	83 ec 0c             	sub    esp,0xc
c001f30f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f313:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001f31a:	74 2d                	je     c001f349 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f31c:	83 ec 0c             	sub    esp,0xc
c001f31f:	68 48 6c 02 c0       	push   0xc0026c48
c001f324:	e8 70 aa fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001f329:	83 c4 10             	add    esp,0x10
c001f32c:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001f333:	75 14                	jne    c001f349 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f335:	e4 60                	in     al,0x60
c001f337:	3c 1c                	cmp    al,0x1c
c001f339:	74 04                	je     c001f33f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f33b:	3c 5a                	cmp    al,0x5a
c001f33d:	75 f6                	jne    c001f335 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f33f:	e4 60                	in     al,0x60
c001f341:	3c 5a                	cmp    al,0x5a
c001f343:	74 fa                	je     c001f33f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f345:	3c 1c                	cmp    al,0x1c
c001f347:	74 f6                	je     c001f33f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f349:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f34d:	31 db                	xor    ebx,ebx
c001f34f:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f352:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f358:	0f 84 78 01 00 00    	je     c001f4d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f35e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f362:	89 d8                	mov    eax,ebx
c001f364:	c1 e0 07             	shl    eax,0x7
c001f367:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f36e:	50                   	push   eax
c001f36f:	50                   	push   eax
c001f370:	57                   	push   edi
c001f371:	56                   	push   esi
c001f372:	e8 f9 fd ff ff       	call   c001f170 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f377:	83 c4 10             	add    esp,0x10
c001f37a:	83 f8 01             	cmp    eax,0x1
c001f37d:	0f 85 19 01 00 00    	jne    c001f49c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f383:	50                   	push   eax
c001f384:	53                   	push   ebx
c001f385:	57                   	push   edi
c001f386:	56                   	push   esi
c001f387:	e8 76 fe ff ff       	call   c001f202 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f38c:	83 c4 10             	add    esp,0x10
c001f38f:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001f396:	74 2d                	je     c001f3c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f398:	83 ec 0c             	sub    esp,0xc
c001f39b:	68 5d 6c 02 c0       	push   0xc0026c5d
c001f3a0:	e8 f4 a9 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001f3a5:	83 c4 10             	add    esp,0x10
c001f3a8:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001f3af:	75 14                	jne    c001f3c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3b1:	e4 60                	in     al,0x60
c001f3b3:	3c 1c                	cmp    al,0x1c
c001f3b5:	74 04                	je     c001f3bb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3b7:	3c 5a                	cmp    al,0x5a
c001f3b9:	75 f6                	jne    c001f3b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f3bb:	e4 60                	in     al,0x60
c001f3bd:	3c 5a                	cmp    al,0x5a
c001f3bf:	74 fa                	je     c001f3bb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3c1:	3c 1c                	cmp    al,0x1c
c001f3c3:	74 f6                	je     c001f3bb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3c5:	83 ec 0c             	sub    esp,0xc
c001f3c8:	68 7c 01 00 00       	push   0x17c
c001f3cd:	e8 6d a9 fe ff       	call   c0009d3f <malloc>
c001f3d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3d5:	89 c7                	mov    edi,eax
c001f3d7:	e8 28 10 00 00       	call   c0020404 <SATA::SATA()>
c001f3dc:	83 c4 10             	add    esp,0x10
c001f3df:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001f3e6:	74 2d                	je     c001f415 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f3e8:	83 ec 0c             	sub    esp,0xc
c001f3eb:	68 72 6c 02 c0       	push   0xc0026c72
c001f3f0:	e8 a4 a9 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001f3f5:	83 c4 10             	add    esp,0x10
c001f3f8:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001f3ff:	75 14                	jne    c001f415 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f401:	e4 60                	in     al,0x60
c001f403:	3c 5a                	cmp    al,0x5a
c001f405:	74 04                	je     c001f40b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f407:	3c 1c                	cmp    al,0x1c
c001f409:	75 f6                	jne    c001f401 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f40b:	e4 60                	in     al,0x60
c001f40d:	3c 5a                	cmp    al,0x5a
c001f40f:	74 fa                	je     c001f40b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f411:	3c 1c                	cmp    al,0x1c
c001f413:	74 f6                	je     c001f40b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f415:	50                   	push   eax
c001f416:	50                   	push   eax
c001f417:	57                   	push   edi
c001f418:	56                   	push   esi
c001f419:	e8 e0 f0 fe ff       	call   c000e4fe <Device::addChild(Device*)>
c001f41e:	83 c4 10             	add    esp,0x10
c001f421:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001f428:	74 2d                	je     c001f457 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	68 87 6c 02 c0       	push   0xc0026c87
c001f432:	e8 62 a9 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001f441:	75 14                	jne    c001f457 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f443:	e4 60                	in     al,0x60
c001f445:	3c 1c                	cmp    al,0x1c
c001f447:	74 04                	je     c001f44d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f449:	3c 5a                	cmp    al,0x5a
c001f44b:	75 f6                	jne    c001f443 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f44d:	e4 60                	in     al,0x60
c001f44f:	3c 5a                	cmp    al,0x5a
c001f451:	74 fa                	je     c001f44d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f453:	3c 1c                	cmp    al,0x1c
c001f455:	74 f6                	je     c001f44d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f457:	8b 07                	mov    eax,DWORD PTR [edi]
c001f459:	56                   	push   esi
c001f45a:	6a 00                	push   0x0
c001f45c:	53                   	push   ebx
c001f45d:	57                   	push   edi
c001f45e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f461:	83 c4 10             	add    esp,0x10
c001f464:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c001f46b:	74 69                	je     c001f4d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f46d:	83 ec 0c             	sub    esp,0xc
c001f470:	68 9c 6c 02 c0       	push   0xc0026c9c
c001f475:	e8 1f a9 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c001f47a:	83 c4 10             	add    esp,0x10
c001f47d:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c001f484:	75 50                	jne    c001f4d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f486:	e4 60                	in     al,0x60
c001f488:	3c 1c                	cmp    al,0x1c
c001f48a:	74 04                	je     c001f490 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f48c:	3c 5a                	cmp    al,0x5a
c001f48e:	75 f6                	jne    c001f486 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f490:	e4 60                	in     al,0x60
c001f492:	3c 5a                	cmp    al,0x5a
c001f494:	74 fa                	je     c001f490 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f496:	3c 1c                	cmp    al,0x1c
c001f498:	74 f6                	je     c001f490 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f49a:	eb 3a                	jmp    c001f4d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f49c:	83 f8 04             	cmp    eax,0x4
c001f49f:	75 35                	jne    c001f4d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4a1:	50                   	push   eax
c001f4a2:	53                   	push   ebx
c001f4a3:	57                   	push   edi
c001f4a4:	56                   	push   esi
c001f4a5:	e8 58 fd ff ff       	call   c001f202 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4aa:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f4b1:	e8 89 a8 fe ff       	call   c0009d3f <malloc>
c001f4b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4b9:	89 c7                	mov    edi,eax
c001f4bb:	e8 ba 17 00 00       	call   c0020c7a <SATAPI::SATAPI()>
c001f4c0:	5a                   	pop    edx
c001f4c1:	59                   	pop    ecx
c001f4c2:	57                   	push   edi
c001f4c3:	56                   	push   esi
c001f4c4:	e8 35 f0 fe ff       	call   c000e4fe <Device::addChild(Device*)>
c001f4c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001f4cb:	56                   	push   esi
c001f4cc:	6a 00                	push   0x0
c001f4ce:	53                   	push   ebx
c001f4cf:	57                   	push   edi
c001f4d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f4d3:	83 c4 20             	add    esp,0x20
c001f4d6:	d1 ed                	shr    ebp,1
c001f4d8:	43                   	inc    ebx
c001f4d9:	83 fb 20             	cmp    ebx,0x20
c001f4dc:	0f 85 70 fe ff ff    	jne    c001f352 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f4e2:	83 c4 0c             	add    esp,0xc
c001f4e5:	5b                   	pop    ebx
c001f4e6:	5e                   	pop    esi
c001f4e7:	5f                   	pop    edi
c001f4e8:	5d                   	pop    ebp
c001f4e9:	c3                   	ret    

c001f4ea <SATABus::open(int, int, void*)>:
c001f4ea:	53                   	push   ebx
c001f4eb:	83 ec 10             	sub    esp,0x10
c001f4ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4f2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f4f8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f4fe:	50                   	push   eax
c001f4ff:	68 b1 6c 02 c0       	push   0xc0026cb1
c001f504:	e8 42 db fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f509:	58                   	pop    eax
c001f50a:	5a                   	pop    edx
c001f50b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f511:	53                   	push   ebx
c001f512:	e8 f1 fd ff ff       	call   c001f308 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f517:	31 c0                	xor    eax,eax
c001f519:	83 c4 18             	add    esp,0x18
c001f51c:	5b                   	pop    ebx
c001f51d:	c3                   	ret    

c001f51e <ATA::close(int, int, void*)>:
c001f51e:	83 ec 0c             	sub    esp,0xc
c001f521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f525:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f52b:	85 c0                	test   eax,eax
c001f52d:	74 0c                	je     c001f53b <ATA::close(int, int, void*)+0x1d>
c001f52f:	83 ec 0c             	sub    esp,0xc
c001f532:	8b 10                	mov    edx,DWORD PTR [eax]
c001f534:	50                   	push   eax
c001f535:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f538:	83 c4 10             	add    esp,0x10
c001f53b:	31 c0                	xor    eax,eax
c001f53d:	83 c4 0c             	add    esp,0xc
c001f540:	c3                   	ret    
c001f541:	90                   	nop

c001f542 <ATA::powerSaving(PowerSavingLevel)>:
c001f542:	c3                   	ret    
c001f543:	90                   	nop

c001f544 <ATA::ATA()>:
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54b:	83 ec 04             	sub    esp,0x4
c001f54e:	68 00 02 00 00       	push   0x200
c001f553:	68 4f 6e 02 c0       	push   0xc0026e4f
c001f558:	50                   	push   eax
c001f559:	e8 d8 f3 fe ff       	call   c000e936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f55e:	83 c4 10             	add    esp,0x10
c001f561:	ba 44 6d 02 c0       	mov    edx,0xc0026d44
c001f566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56a:	89 10                	mov    DWORD PTR [eax],edx
c001f56c:	90                   	nop
c001f56d:	83 c4 0c             	add    esp,0xc
c001f570:	c3                   	ret    
c001f571:	90                   	nop

c001f572 <ATA::flush(bool)>:
c001f572:	53                   	push   ebx
c001f573:	83 ec 08             	sub    esp,0x8
c001f576:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f57b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f57f:	19 c0                	sbb    eax,eax
c001f581:	83 e0 fd             	and    eax,0xfffffffd
c001f584:	05 ea 00 00 00       	add    eax,0xea
c001f589:	50                   	push   eax
c001f58a:	6a 07                	push   0x7
c001f58c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f593:	50                   	push   eax
c001f594:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f59a:	e8 0b f0 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f59f:	83 c4 0c             	add    esp,0xc
c001f5a2:	6a 00                	push   0x0
c001f5a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5ab:	50                   	push   eax
c001f5ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5b2:	e8 a7 fa ff ff       	call   c001f05e <IDE::polling(unsigned char, unsigned int)>
c001f5b7:	83 c4 18             	add    esp,0x18
c001f5ba:	5b                   	pop    ebx
c001f5bb:	c3                   	ret    

c001f5bc <ATA::readyForCommand()>:
c001f5bc:	56                   	push   esi
c001f5bd:	53                   	push   ebx
c001f5be:	53                   	push   ebx
c001f5bf:	31 db                	xor    ebx,ebx
c001f5c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5c5:	51                   	push   ecx
c001f5c6:	6a 0c                	push   0xc
c001f5c8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f5cf:	50                   	push   eax
c001f5d0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f5d6:	e8 8f f0 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	a8 88                	test   al,0x88
c001f5e0:	74 1f                	je     c001f601 <ATA::readyForCommand()+0x45>
c001f5e2:	43                   	inc    ebx
c001f5e3:	83 fb 63             	cmp    ebx,0x63
c001f5e6:	7e dd                	jle    c001f5c5 <ATA::readyForCommand()+0x9>
c001f5e8:	83 ec 0c             	sub    esp,0xc
c001f5eb:	6a 0a                	push   0xa
c001f5ed:	e8 de 93 ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f5fb:	75 c8                	jne    c001f5c5 <ATA::readyForCommand()+0x9>
c001f5fd:	31 c0                	xor    eax,eax
c001f5ff:	eb 02                	jmp    c001f603 <ATA::readyForCommand()+0x47>
c001f601:	b0 01                	mov    al,0x1
c001f603:	5a                   	pop    edx
c001f604:	5b                   	pop    ebx
c001f605:	5e                   	pop    esi
c001f606:	c3                   	ret    
c001f607:	90                   	nop

c001f608 <ATA::access(unsigned long long, int, void*, bool)>:
c001f608:	55                   	push   ebp
c001f609:	57                   	push   edi
c001f60a:	56                   	push   esi
c001f60b:	53                   	push   ebx
c001f60c:	83 ec 38             	sub    esp,0x38
c001f60f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f613:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f617:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f61b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f61f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f623:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f627:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f62b:	68 f0 6c 02 c0       	push   0xc0026cf0
c001f630:	e8 16 da fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f635:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f63b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f63f:	83 c4 10             	add    esp,0x10
c001f642:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f648:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f64c:	c1 e0 06             	shl    eax,0x6
c001f64f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f657:	74 5d                	je     c001f6b6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f659:	89 fa                	mov    edx,edi
c001f65b:	89 f0                	mov    eax,esi
c001f65d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f661:	c1 ea 1c             	shr    edx,0x1c
c001f664:	89 d1                	mov    ecx,edx
c001f666:	09 c1                	or     ecx,eax
c001f668:	74 25                	je     c001f68f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f66a:	31 ed                	xor    ebp,ebp
c001f66c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f673:	89 fa                	mov    edx,edi
c001f675:	89 f0                	mov    eax,esi
c001f677:	0f ad d0             	shrd   eax,edx,cl
c001f67a:	d3 ea                	shr    edx,cl
c001f67c:	f6 c1 20             	test   cl,0x20
c001f67f:	74 02                	je     c001f683 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f681:	89 d0                	mov    eax,edx
c001f683:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f687:	45                   	inc    ebp
c001f688:	83 fd 06             	cmp    ebp,0x6
c001f68b:	75 df                	jne    c001f66c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f68d:	eb 76                	jmp    c001f705 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f68f:	89 f0                	mov    eax,esi
c001f691:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f696:	89 fa                	mov    edx,edi
c001f698:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f69f:	0f ac d0 10          	shrd   eax,edx,0x10
c001f6a3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6a8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f6ac:	c1 ee 18             	shr    esi,0x18
c001f6af:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6b4:	eb 56                	jmp    c001f70c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6b6:	6a 00                	push   0x0
c001f6b8:	6a 3f                	push   0x3f
c001f6ba:	57                   	push   edi
c001f6bb:	56                   	push   esi
c001f6bc:	e8 1f 32 00 00       	call   c00228e0 <__umoddi3>
c001f6c1:	83 c4 10             	add    esp,0x10
c001f6c4:	40                   	inc    eax
c001f6c5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f6c9:	6a 00                	push   0x0
c001f6cb:	68 f0 03 00 00       	push   0x3f0
c001f6d0:	57                   	push   edi
c001f6d1:	56                   	push   esi
c001f6d2:	e8 09 31 00 00       	call   c00227e0 <__udivdi3>
c001f6d7:	83 c4 10             	add    esp,0x10
c001f6da:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f6df:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6eb:	6a 00                	push   0x0
c001f6ed:	6a 3f                	push   0x3f
c001f6ef:	57                   	push   edi
c001f6f0:	56                   	push   esi
c001f6f1:	e8 ea 30 00 00       	call   c00227e0 <__udivdi3>
c001f6f6:	83 c4 10             	add    esp,0x10
c001f6f9:	89 c6                	mov    esi,eax
c001f6fb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f700:	83 e6 0f             	and    esi,0xf
c001f703:	eb 07                	jmp    c001f70c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f705:	31 f6                	xor    esi,esi
c001f707:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f70c:	bf 01 00 00 00       	mov    edi,0x1
c001f711:	50                   	push   eax
c001f712:	6a 00                	push   0x0
c001f714:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f71b:	50                   	push   eax
c001f71c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f720:	e8 8d f0 ff ff       	call   c001e7b2 <IDE::enableIRQs(unsigned char, bool)>
c001f725:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f728:	e8 8f fe ff ff       	call   c001f5bc <ATA::readyForCommand()>
c001f72d:	83 c4 10             	add    esp,0x10
c001f730:	84 c0                	test   al,al
c001f732:	0f 84 bc 02 00 00    	je     c001f9f4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f738:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f73e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f744:	c1 e0 04             	shl    eax,0x4
c001f747:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f74e:	09 c6                	or     esi,eax
c001f750:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f755:	75 05                	jne    c001f75c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f757:	83 ce a0             	or     esi,0xffffffa0
c001f75a:	eb 03                	jmp    c001f75f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f75c:	83 ce e0             	or     esi,0xffffffe0
c001f75f:	89 f0                	mov    eax,esi
c001f761:	0f b6 f0             	movzx  esi,al
c001f764:	56                   	push   esi
c001f765:	6a 06                	push   0x6
c001f767:	51                   	push   ecx
c001f768:	52                   	push   edx
c001f769:	e8 3c ee ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f76e:	83 c4 10             	add    esp,0x10
c001f771:	6a 00                	push   0x0
c001f773:	6a 01                	push   0x1
c001f775:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f77c:	50                   	push   eax
c001f77d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f783:	e8 22 ee ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f788:	83 c4 10             	add    esp,0x10
c001f78b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f790:	75 6e                	jne    c001f800 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f792:	6a 00                	push   0x0
c001f794:	6a 08                	push   0x8
c001f796:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f79d:	50                   	push   eax
c001f79e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7a4:	e8 01 ee ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7a9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f7ae:	50                   	push   eax
c001f7af:	6a 09                	push   0x9
c001f7b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7b8:	50                   	push   eax
c001f7b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7bf:	e8 e6 ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7c4:	83 c4 20             	add    esp,0x20
c001f7c7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f7cc:	50                   	push   eax
c001f7cd:	6a 0a                	push   0xa
c001f7cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7d6:	50                   	push   eax
c001f7d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7dd:	e8 c8 ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7e2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f7e7:	50                   	push   eax
c001f7e8:	6a 0b                	push   0xb
c001f7ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7f1:	50                   	push   eax
c001f7f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7f8:	e8 ad ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7fd:	83 c4 20             	add    esp,0x20
c001f800:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f805:	50                   	push   eax
c001f806:	6a 02                	push   0x2
c001f808:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f80f:	50                   	push   eax
c001f810:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f816:	e8 8f ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f81b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f820:	50                   	push   eax
c001f821:	6a 03                	push   0x3
c001f823:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f82a:	50                   	push   eax
c001f82b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f831:	e8 74 ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f836:	83 c4 20             	add    esp,0x20
c001f839:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f83e:	50                   	push   eax
c001f83f:	6a 04                	push   0x4
c001f841:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f848:	50                   	push   eax
c001f849:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f84f:	e8 56 ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f854:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f859:	50                   	push   eax
c001f85a:	6a 05                	push   0x5
c001f85c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f863:	50                   	push   eax
c001f864:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f86a:	e8 3b ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f86f:	83 c4 20             	add    esp,0x20
c001f872:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f877:	0f 94 c0             	sete   al
c001f87a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f87f:	74 09                	je     c001f88a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f881:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f888:	eb 07                	jmp    c001f891 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f88a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f891:	0f b6 c0             	movzx  eax,al
c001f894:	50                   	push   eax
c001f895:	6a 07                	push   0x7
c001f897:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f89e:	50                   	push   eax
c001f89f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8a5:	e8 00 ed ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8aa:	c7 04 24 fd 6c 02 c0 	mov    DWORD PTR [esp],0xc0026cfd
c001f8b1:	e8 95 d7 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f8b6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f8ba:	83 c4 10             	add    esp,0x10
c001f8bd:	85 f6                	test   esi,esi
c001f8bf:	0f 84 f7 00 00 00    	je     c001f9bc <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f8c5:	83 ec 0c             	sub    esp,0xc
c001f8c8:	68 00 6d 02 c0       	push   0xc0026d00
c001f8cd:	e8 79 d7 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f8d2:	83 c4 0c             	add    esp,0xc
c001f8d5:	6a 01                	push   0x1
c001f8d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8de:	50                   	push   eax
c001f8df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8e5:	e8 74 f7 ff ff       	call   c001f05e <IDE::polling(unsigned char, unsigned int)>
c001f8ea:	c7 04 24 03 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d03
c001f8f1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f8f5:	e8 51 d7 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f8fa:	83 c4 10             	add    esp,0x10
c001f8fd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f901:	84 c0                	test   al,al
c001f903:	74 2b                	je     c001f930 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f905:	0f b6 f8             	movzx  edi,al
c001f908:	57                   	push   edi
c001f909:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f910:	50                   	push   eax
c001f911:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f918:	50                   	push   eax
c001f919:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f91f:	e8 8a f6 ff ff       	call   c001efae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f924:	c7 04 24 06 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d06
c001f92b:	e9 bc 00 00 00       	jmp    c001f9ec <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f930:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f935:	74 50                	je     c001f987 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f937:	83 ec 0c             	sub    esp,0xc
c001f93a:	31 ed                	xor    ebp,ebp
c001f93c:	68 11 6d 02 c0       	push   0xc0026d11
c001f941:	e8 05 d7 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f946:	83 c4 10             	add    esp,0x10
c001f949:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f94d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f951:	50                   	push   eax
c001f952:	50                   	push   eax
c001f953:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f95a:	50                   	push   eax
c001f95b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f961:	e8 32 ec ff ff       	call   c001e598 <IDE::getBase(unsigned char)>
c001f966:	89 c2                	mov    edx,eax
c001f968:	89 f8                	mov    eax,edi
c001f96a:	66 ef                	out    dx,ax
c001f96c:	45                   	inc    ebp
c001f96d:	83 c4 10             	add    esp,0x10
c001f970:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f976:	75 d1                	jne    c001f949 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	68 14 6d 02 c0       	push   0xc0026d14
c001f980:	e8 c6 d6 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f985:	eb 24                	jmp    c001f9ab <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f987:	51                   	push   ecx
c001f988:	51                   	push   ecx
c001f989:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f990:	50                   	push   eax
c001f991:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f997:	e8 fc eb ff ff       	call   c001e598 <IDE::getBase(unsigned char)>
c001f99c:	b9 00 01 00 00       	mov    ecx,0x100
c001f9a1:	89 c2                	mov    edx,eax
c001f9a3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f9a7:	fc                   	cld    
c001f9a8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	4e                   	dec    esi
c001f9af:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f9b7:	e9 01 ff ff ff       	jmp    c001f8bd <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f9bc:	31 ff                	xor    edi,edi
c001f9be:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9c3:	74 2f                	je     c001f9f4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f9c5:	83 ec 0c             	sub    esp,0xc
c001f9c8:	68 17 6d 02 c0       	push   0xc0026d17
c001f9cd:	e8 79 d6 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f9d2:	58                   	pop    eax
c001f9d3:	31 c0                	xor    eax,eax
c001f9d5:	5a                   	pop    edx
c001f9d6:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f9db:	0f 94 c0             	sete   al
c001f9de:	50                   	push   eax
c001f9df:	53                   	push   ebx
c001f9e0:	e8 8d fb ff ff       	call   c001f572 <ATA::flush(bool)>
c001f9e5:	c7 04 24 1a 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d1a
c001f9ec:	e8 5a d6 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001f9f1:	83 c4 10             	add    esp,0x10
c001f9f4:	83 c4 2c             	add    esp,0x2c
c001f9f7:	89 f8                	mov    eax,edi
c001f9f9:	5b                   	pop    ebx
c001f9fa:	5e                   	pop    esi
c001f9fb:	5f                   	pop    edi
c001f9fc:	5d                   	pop    ebp
c001f9fd:	c3                   	ret    

c001f9fe <ATA::read(unsigned long long, int, void*)>:
c001f9fe:	57                   	push   edi
c001f9ff:	b8 04 00 00 00       	mov    eax,0x4
c001fa04:	56                   	push   esi
c001fa05:	53                   	push   ebx
c001fa06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa0e:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa15:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa19:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa1f:	77 25                	ja     c001fa46 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa21:	b8 06 00 00 00       	mov    eax,0x6
c001fa26:	85 f6                	test   esi,esi
c001fa28:	74 1c                	je     c001fa46 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa2a:	50                   	push   eax
c001fa2b:	50                   	push   eax
c001fa2c:	6a 00                	push   0x0
c001fa2e:	56                   	push   esi
c001fa2f:	52                   	push   edx
c001fa30:	53                   	push   ebx
c001fa31:	51                   	push   ecx
c001fa32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa36:	e8 cd fb ff ff       	call   c001f608 <ATA::access(unsigned long long, int, void*, bool)>
c001fa3b:	83 c4 20             	add    esp,0x20
c001fa3e:	85 c0                	test   eax,eax
c001fa40:	0f 95 c0             	setne  al
c001fa43:	0f b6 c0             	movzx  eax,al
c001fa46:	5b                   	pop    ebx
c001fa47:	5e                   	pop    esi
c001fa48:	5f                   	pop    edi
c001fa49:	c3                   	ret    

c001fa4a <ATA::write(unsigned long long, int, void*)>:
c001fa4a:	55                   	push   ebp
c001fa4b:	57                   	push   edi
c001fa4c:	56                   	push   esi
c001fa4d:	53                   	push   ebx
c001fa4e:	83 ec 18             	sub    esp,0x18
c001fa51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa55:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa59:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fa5d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fa61:	68 1d 6d 02 c0       	push   0xc0026d1d
c001fa66:	e8 e0 d5 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001fa6b:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fa6e:	83 c4 10             	add    esp,0x10
c001fa71:	b8 04 00 00 00       	mov    eax,0x4
c001fa76:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fa7c:	77 25                	ja     c001faa3 <ATA::write(unsigned long long, int, void*)+0x59>
c001fa7e:	b8 06 00 00 00       	mov    eax,0x6
c001fa83:	85 f6                	test   esi,esi
c001fa85:	74 1c                	je     c001faa3 <ATA::write(unsigned long long, int, void*)+0x59>
c001fa87:	50                   	push   eax
c001fa88:	50                   	push   eax
c001fa89:	6a 01                	push   0x1
c001fa8b:	56                   	push   esi
c001fa8c:	53                   	push   ebx
c001fa8d:	55                   	push   ebp
c001fa8e:	57                   	push   edi
c001fa8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fa93:	e8 70 fb ff ff       	call   c001f608 <ATA::access(unsigned long long, int, void*, bool)>
c001fa98:	83 c4 20             	add    esp,0x20
c001fa9b:	85 c0                	test   eax,eax
c001fa9d:	0f 95 c0             	setne  al
c001faa0:	0f b6 c0             	movzx  eax,al
c001faa3:	83 c4 0c             	add    esp,0xc
c001faa6:	5b                   	pop    ebx
c001faa7:	5e                   	pop    esi
c001faa8:	5f                   	pop    edi
c001faa9:	5d                   	pop    ebp
c001faaa:	c3                   	ret    
c001faab:	90                   	nop

c001faac <ATA::detectCHS()>:
c001faac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fab0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fab6:	c1 e0 06             	shl    eax,0x6
c001fab9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fabf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fac9:	c7 44 24 04 29 6d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026d29
c001fad1:	e9 97 55 ff ff       	jmp    c001506d <Krnl::panic(char const*)>

c001fad6 <ATA::open(int, int, void*)>:
c001fad6:	53                   	push   ebx
c001fad7:	83 ec 08             	sub    esp,0x8
c001fada:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fade:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fae6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001faec:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001faf2:	c1 e0 06             	shl    eax,0x6
c001faf5:	01 d0                	add    eax,edx
c001faf7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fafe:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fb04:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fb0b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb15:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb1b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb22:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb29:	75 0c                	jne    c001fb37 <ATA::open(int, int, void*)+0x61>
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	53                   	push   ebx
c001fb2f:	e8 78 ff ff ff       	call   c001faac <ATA::detectCHS()>
c001fb34:	83 c4 10             	add    esp,0x10
c001fb37:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb3d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb43:	c1 e0 06             	shl    eax,0x6
c001fb46:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb4d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fb57:	d1 e8                	shr    eax,1
c001fb59:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb5f:	6a 04                	push   0x4
c001fb61:	6a 0c                	push   0xc
c001fb63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb6a:	50                   	push   eax
c001fb6b:	52                   	push   edx
c001fb6c:	e8 39 ea ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb71:	90                   	nop
c001fb72:	90                   	nop
c001fb73:	6a 00                	push   0x0
c001fb75:	6a 0c                	push   0xc
c001fb77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb7e:	50                   	push   eax
c001fb7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb85:	e8 20 ea ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb8a:	83 c4 14             	add    esp,0x14
c001fb8d:	53                   	push   ebx
c001fb8e:	e8 0b ee fe ff       	call   c000e99e <PhysicalDisk::startCache()>
c001fb93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb96:	e8 7b 0f ff ff       	call   c0010b16 <createPartitionsForDisk(PhysicalDisk*)>
c001fb9b:	31 c0                	xor    eax,eax
c001fb9d:	83 c4 18             	add    esp,0x18
c001fba0:	5b                   	pop    ebx
c001fba1:	c3                   	ret    

c001fba2 <ATAPI::write(unsigned long long, int, void*)>:
c001fba2:	b8 03 00 00 00       	mov    eax,0x3
c001fba7:	c3                   	ret    

c001fba8 <ATAPI::close(int, int, void*)>:
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbaf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbb5:	85 c0                	test   eax,eax
c001fbb7:	74 0c                	je     c001fbc5 <ATAPI::close(int, int, void*)+0x1d>
c001fbb9:	83 ec 0c             	sub    esp,0xc
c001fbbc:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbbe:	50                   	push   eax
c001fbbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbc2:	83 c4 10             	add    esp,0x10
c001fbc5:	31 c0                	xor    eax,eax
c001fbc7:	83 c4 0c             	add    esp,0xc
c001fbca:	c3                   	ret    
c001fbcb:	90                   	nop

c001fbcc <ATAPI::ATAPI()>:
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd3:	83 ec 04             	sub    esp,0x4
c001fbd6:	68 00 08 00 00       	push   0x800
c001fbdb:	68 29 70 02 c0       	push   0xc0027029
c001fbe0:	50                   	push   eax
c001fbe1:	e8 50 ed fe ff       	call   c000e936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fbe6:	83 c4 10             	add    esp,0x10
c001fbe9:	ba bc 6d 02 c0       	mov    edx,0xc0026dbc
c001fbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf2:	89 10                	mov    DWORD PTR [eax],edx
c001fbf4:	90                   	nop
c001fbf5:	83 c4 0c             	add    esp,0xc
c001fbf8:	c3                   	ret    
c001fbf9:	90                   	nop

c001fbfa <ATAPI::readyForCommand()>:
c001fbfa:	56                   	push   esi
c001fbfb:	53                   	push   ebx
c001fbfc:	53                   	push   ebx
c001fbfd:	31 db                	xor    ebx,ebx
c001fbff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc03:	51                   	push   ecx
c001fc04:	6a 0c                	push   0xc
c001fc06:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc0d:	50                   	push   eax
c001fc0e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc14:	e8 51 ea ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	a8 88                	test   al,0x88
c001fc1e:	74 25                	je     c001fc45 <ATAPI::readyForCommand()+0x4b>
c001fc20:	43                   	inc    ebx
c001fc21:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fc27:	7e da                	jle    c001fc03 <ATAPI::readyForCommand()+0x9>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	68 5e 01 00 00       	push   0x15e
c001fc31:	e8 9a 8d ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c001fc36:	83 c4 10             	add    esp,0x10
c001fc39:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fc3f:	75 c2                	jne    c001fc03 <ATAPI::readyForCommand()+0x9>
c001fc41:	31 c0                	xor    eax,eax
c001fc43:	eb 02                	jmp    c001fc47 <ATAPI::readyForCommand()+0x4d>
c001fc45:	b0 01                	mov    al,0x1
c001fc47:	5a                   	pop    edx
c001fc48:	5b                   	pop    ebx
c001fc49:	5e                   	pop    esi
c001fc4a:	c3                   	ret    
c001fc4b:	90                   	nop

c001fc4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fc4c:	55                   	push   ebp
c001fc4d:	57                   	push   edi
c001fc4e:	56                   	push   esi
c001fc4f:	53                   	push   ebx
c001fc50:	83 ec 20             	sub    esp,0x20
c001fc53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fc57:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fc5b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fc5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc63:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fc67:	6a 01                	push   0x1
c001fc69:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc70:	50                   	push   eax
c001fc71:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc77:	e8 36 eb ff ff       	call   c001e7b2 <IDE::enableIRQs(unsigned char, bool)>
c001fc7c:	5e                   	pop    esi
c001fc7d:	58                   	pop    eax
c001fc7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc85:	50                   	push   eax
c001fc86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc8c:	e8 f3 e8 ff ff       	call   c001e584 <IDE::prepareInterrupt(unsigned char)>
c001fc91:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fc94:	e8 61 ff ff ff       	call   c001fbfa <ATAPI::readyForCommand()>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	84 c0                	test   al,al
c001fc9e:	75 0a                	jne    c001fcaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fca0:	bb 01 00 00 00       	mov    ebx,0x1
c001fca5:	e9 57 02 00 00       	jmp    c001ff01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fcaa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fcb0:	c1 e0 04             	shl    eax,0x4
c001fcb3:	0f b6 c0             	movzx  eax,al
c001fcb6:	50                   	push   eax
c001fcb7:	6a 06                	push   0x6
c001fcb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcc0:	50                   	push   eax
c001fcc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcc7:	e8 de e8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fccc:	6a 00                	push   0x0
c001fcce:	6a 01                	push   0x1
c001fcd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcd7:	50                   	push   eax
c001fcd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcde:	e8 c7 e8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fce3:	83 c4 20             	add    esp,0x20
c001fce6:	0f b6 c3             	movzx  eax,bl
c001fce9:	0f b6 df             	movzx  ebx,bh
c001fcec:	50                   	push   eax
c001fced:	6a 04                	push   0x4
c001fcef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcf6:	50                   	push   eax
c001fcf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcfd:	e8 a8 e8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd02:	53                   	push   ebx
c001fd03:	6a 05                	push   0x5
c001fd05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd0c:	50                   	push   eax
c001fd0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd13:	e8 92 e8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd18:	83 c4 20             	add    esp,0x20
c001fd1b:	68 a0 00 00 00       	push   0xa0
c001fd20:	6a 07                	push   0x7
c001fd22:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd29:	50                   	push   eax
c001fd2a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd30:	e8 75 e8 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd35:	83 c4 0c             	add    esp,0xc
c001fd38:	6a 01                	push   0x1
c001fd3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd41:	50                   	push   eax
c001fd42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd48:	e8 11 f3 ff ff       	call   c001f05e <IDE::polling(unsigned char, unsigned int)>
c001fd4d:	83 c4 10             	add    esp,0x10
c001fd50:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fd56:	84 c0                	test   al,al
c001fd58:	74 23                	je     c001fd7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fd5a:	0f b6 d8             	movzx  ebx,al
c001fd5d:	0f b6 d2             	movzx  edx,dl
c001fd60:	53                   	push   ebx
c001fd61:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fd68:	50                   	push   eax
c001fd69:	52                   	push   edx
c001fd6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd70:	e8 39 f2 ff ff       	call   c001efae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fd75:	83 c4 10             	add    esp,0x10
c001fd78:	e9 84 01 00 00       	jmp    c001ff01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fd7d:	0f b6 d2             	movzx  edx,dl
c001fd80:	53                   	push   ebx
c001fd81:	53                   	push   ebx
c001fd82:	52                   	push   edx
c001fd83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd89:	e8 0a e8 ff ff       	call   c001e598 <IDE::getBase(unsigned char)>
c001fd8e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fd92:	b9 06 00 00 00       	mov    ecx,0x6
c001fd97:	89 c2                	mov    edx,eax
c001fd99:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fd9c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fda0:	83 c4 10             	add    esp,0x10
c001fda3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fda9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdb0:	85 db                	test   ebx,ebx
c001fdb2:	0f 84 ec 00 00 00    	je     c001fea4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fdb8:	51                   	push   ecx
c001fdb9:	51                   	push   ecx
c001fdba:	52                   	push   edx
c001fdbb:	50                   	push   eax
c001fdbc:	e8 57 e9 ff ff       	call   c001e718 <IDE::waitInterrupt(unsigned char)>
c001fdc1:	83 c4 10             	add    esp,0x10
c001fdc4:	84 c0                	test   al,al
c001fdc6:	0f 84 d4 fe ff ff    	je     c001fca0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fdcc:	56                   	push   esi
c001fdcd:	56                   	push   esi
c001fdce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdd5:	50                   	push   eax
c001fdd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fddc:	e8 a3 e7 ff ff       	call   c001e584 <IDE::prepareInterrupt(unsigned char)>
c001fde1:	83 c4 0c             	add    esp,0xc
c001fde4:	6a 04                	push   0x4
c001fde6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fded:	50                   	push   eax
c001fdee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdf4:	e8 71 e8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001fdf9:	83 c4 0c             	add    esp,0xc
c001fdfc:	89 c6                	mov    esi,eax
c001fdfe:	6a 05                	push   0x5
c001fe00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe07:	50                   	push   eax
c001fe08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe0e:	e8 57 e8 ff ff       	call   c001e66a <IDE::read(unsigned char, unsigned char)>
c001fe13:	89 f1                	mov    ecx,esi
c001fe15:	0f b6 c0             	movzx  eax,al
c001fe18:	0f b6 f1             	movzx  esi,cl
c001fe1b:	c1 e0 08             	shl    eax,0x8
c001fe1e:	09 c6                	or     esi,eax
c001fe20:	d1 fe                	sar    esi,1
c001fe22:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fe26:	83 c4 10             	add    esp,0x10
c001fe29:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fe2e:	74 41                	je     c001fe71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fe30:	31 c9                	xor    ecx,ecx
c001fe32:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe38:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe3f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fe43:	75 0a                	jne    c001fe4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fe45:	01 c9                	add    ecx,ecx
c001fe47:	01 cd                	add    ebp,ecx
c001fe49:	4b                   	dec    ebx
c001fe4a:	e9 54 ff ff ff       	jmp    c001fda3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fe4f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fe54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe58:	51                   	push   ecx
c001fe59:	51                   	push   ecx
c001fe5a:	52                   	push   edx
c001fe5b:	50                   	push   eax
c001fe5c:	e8 37 e7 ff ff       	call   c001e598 <IDE::getBase(unsigned char)>
c001fe61:	89 c2                	mov    edx,eax
c001fe63:	89 f0                	mov    eax,esi
c001fe65:	66 ef                	out    dx,ax
c001fe67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fe6b:	83 c4 10             	add    esp,0x10
c001fe6e:	41                   	inc    ecx
c001fe6f:	eb c1                	jmp    c001fe32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fe71:	31 f6                	xor    esi,esi
c001fe73:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe79:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe80:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fe84:	75 06                	jne    c001fe8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fe86:	01 f6                	add    esi,esi
c001fe88:	01 f5                	add    ebp,esi
c001fe8a:	eb bd                	jmp    c001fe49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fe8c:	51                   	push   ecx
c001fe8d:	51                   	push   ecx
c001fe8e:	52                   	push   edx
c001fe8f:	50                   	push   eax
c001fe90:	e8 03 e7 ff ff       	call   c001e598 <IDE::getBase(unsigned char)>
c001fe95:	89 c2                	mov    edx,eax
c001fe97:	66 ed                	in     ax,dx
c001fe99:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fe9e:	83 c4 10             	add    esp,0x10
c001fea1:	46                   	inc    esi
c001fea2:	eb cf                	jmp    c001fe73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fea4:	51                   	push   ecx
c001fea5:	51                   	push   ecx
c001fea6:	52                   	push   edx
c001fea7:	50                   	push   eax
c001fea8:	e8 6b e8 ff ff       	call   c001e718 <IDE::waitInterrupt(unsigned char)>
c001fead:	83 c4 10             	add    esp,0x10
c001feb0:	84 c0                	test   al,al
c001feb2:	0f 84 e8 fd ff ff    	je     c001fca0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001feb8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001febd:	52                   	push   edx
c001febe:	52                   	push   edx
c001febf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fec6:	50                   	push   eax
c001fec7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fecd:	e8 b2 e6 ff ff       	call   c001e584 <IDE::prepareInterrupt(unsigned char)>
c001fed2:	83 c4 10             	add    esp,0x10
c001fed5:	50                   	push   eax
c001fed6:	50                   	push   eax
c001fed7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fede:	50                   	push   eax
c001fedf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fee5:	e8 ae e6 ff ff       	call   c001e598 <IDE::getBase(unsigned char)>
c001feea:	8d 50 07             	lea    edx,[eax+0x7]
c001feed:	ec                   	in     al,dx
c001feee:	83 c4 10             	add    esp,0x10
c001fef1:	a8 88                	test   al,0x88
c001fef3:	74 0a                	je     c001feff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fef5:	4b                   	dec    ebx
c001fef6:	75 dd                	jne    c001fed5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fef8:	bb 02 00 00 00       	mov    ebx,0x2
c001fefd:	eb 02                	jmp    c001ff01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001feff:	31 db                	xor    ebx,ebx
c001ff01:	83 c4 1c             	add    esp,0x1c
c001ff04:	89 d8                	mov    eax,ebx
c001ff06:	5b                   	pop    ebx
c001ff07:	5e                   	pop    esi
c001ff08:	5f                   	pop    edi
c001ff09:	5d                   	pop    ebp
c001ff0a:	c3                   	ret    
c001ff0b:	90                   	nop

c001ff0c <ATAPI::diskRemoved()>:
c001ff0c:	53                   	push   ebx
c001ff0d:	83 ec 14             	sub    esp,0x14
c001ff10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff14:	68 74 6d 02 c0       	push   0xc0026d74
c001ff19:	e8 2d d1 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001ff1e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ff25:	c7 04 24 8a 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d8a
c001ff2c:	e8 1a d1 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001ff31:	58                   	pop    eax
c001ff32:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ff38:	e8 57 09 ff ff       	call   c0010894 <LogicalDisk::unmount()>
c001ff3d:	c7 04 24 99 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d99
c001ff44:	e8 02 d1 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001ff49:	5a                   	pop    edx
c001ff4a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ff50:	e8 47 13 ff ff       	call   c001129c <VCache::writeWriteBuffer()>
c001ff55:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ff5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ff5f:	83 c4 18             	add    esp,0x18
c001ff62:	5b                   	pop    ebx
c001ff63:	e9 24 13 ff ff       	jmp    c001128c <VCache::invalidateReadBuffer()>

c001ff68 <ATAPI::eject()>:
c001ff68:	57                   	push   edi
c001ff69:	b9 03 00 00 00       	mov    ecx,0x3
c001ff6e:	53                   	push   ebx
c001ff6f:	83 ec 14             	sub    esp,0x14
c001ff72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ff76:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ff7a:	fc                   	cld    
c001ff7b:	31 c0                	xor    eax,eax
c001ff7d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff7f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ff84:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ff89:	50                   	push   eax
c001ff8a:	50                   	push   eax
c001ff8b:	6a 00                	push   0x0
c001ff8d:	6a 00                	push   0x0
c001ff8f:	6a 00                	push   0x0
c001ff91:	6a 02                	push   0x2
c001ff93:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ff97:	50                   	push   eax
c001ff98:	53                   	push   ebx
c001ff99:	e8 ae fc ff ff       	call   c001fc4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff9e:	83 c4 14             	add    esp,0x14
c001ffa1:	53                   	push   ebx
c001ffa2:	e8 65 ff ff ff       	call   c001ff0c <ATAPI::diskRemoved()>
c001ffa7:	83 c4 24             	add    esp,0x24
c001ffaa:	31 c0                	xor    eax,eax
c001ffac:	5b                   	pop    ebx
c001ffad:	5f                   	pop    edi
c001ffae:	c3                   	ret    
c001ffaf:	90                   	nop

c001ffb0 <ATAPI::diskInserted()>:
c001ffb0:	83 ec 18             	sub    esp,0x18
c001ffb3:	68 35 70 02 c0       	push   0xc0027035
c001ffb8:	e8 8e d0 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c001ffbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffc1:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ffc8:	83 c4 1c             	add    esp,0x1c
c001ffcb:	c3                   	ret    

c001ffcc <ATAPI::detectMedia()>:
c001ffcc:	56                   	push   esi
c001ffcd:	53                   	push   ebx
c001ffce:	83 ec 28             	sub    esp,0x28
c001ffd1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ffd5:	6a 0c                	push   0xc
c001ffd7:	6a 00                	push   0x0
c001ffd9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ffdd:	56                   	push   esi
c001ffde:	e8 a1 06 fe ff       	call   c0000684 <memset>
c001ffe3:	58                   	pop    eax
c001ffe4:	5a                   	pop    edx
c001ffe5:	6a 00                	push   0x0
c001ffe7:	6a 00                	push   0x0
c001ffe9:	6a 00                	push   0x0
c001ffeb:	6a 00                	push   0x0
c001ffed:	56                   	push   esi
c001ffee:	53                   	push   ebx
c001ffef:	e8 58 fc ff ff       	call   c001fc4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fff4:	83 c4 1c             	add    esp,0x1c
c001fff7:	6a 0c                	push   0xc
c001fff9:	6a 00                	push   0x0
c001fffb:	56                   	push   esi
c001fffc:	e8 83 06 fe ff       	call   c0000684 <memset>
c0020001:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020006:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002000b:	59                   	pop    ecx
c002000c:	58                   	pop    eax
c002000d:	6a 01                	push   0x1
c002000f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020013:	50                   	push   eax
c0020014:	6a 00                	push   0x0
c0020016:	6a 12                	push   0x12
c0020018:	56                   	push   esi
c0020019:	53                   	push   ebx
c002001a:	e8 2d fc ff ff       	call   c001fc4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002001f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020023:	83 c4 20             	add    esp,0x20
c0020026:	83 e0 7f             	and    eax,0x7f
c0020029:	3c 70                	cmp    al,0x70
c002002b:	74 15                	je     c0020042 <ATAPI::detectMedia()+0x76>
c002002d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020034:	75 0c                	jne    c0020042 <ATAPI::detectMedia()+0x76>
c0020036:	83 ec 0c             	sub    esp,0xc
c0020039:	53                   	push   ebx
c002003a:	e8 71 ff ff ff       	call   c001ffb0 <ATAPI::diskInserted()>
c002003f:	83 c4 10             	add    esp,0x10
c0020042:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020046:	83 e0 0f             	and    eax,0xf
c0020049:	3c 02                	cmp    al,0x2
c002004b:	75 1b                	jne    c0020068 <ATAPI::detectMedia()+0x9c>
c002004d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020052:	75 2d                	jne    c0020081 <ATAPI::detectMedia()+0xb5>
c0020054:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002005b:	74 24                	je     c0020081 <ATAPI::detectMedia()+0xb5>
c002005d:	83 ec 0c             	sub    esp,0xc
c0020060:	53                   	push   ebx
c0020061:	e8 a6 fe ff ff       	call   c001ff0c <ATAPI::diskRemoved()>
c0020066:	eb 16                	jmp    c002007e <ATAPI::detectMedia()+0xb2>
c0020068:	84 c0                	test   al,al
c002006a:	75 15                	jne    c0020081 <ATAPI::detectMedia()+0xb5>
c002006c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020073:	75 0c                	jne    c0020081 <ATAPI::detectMedia()+0xb5>
c0020075:	83 ec 0c             	sub    esp,0xc
c0020078:	53                   	push   ebx
c0020079:	e8 32 ff ff ff       	call   c001ffb0 <ATAPI::diskInserted()>
c002007e:	83 c4 10             	add    esp,0x10
c0020081:	83 c4 24             	add    esp,0x24
c0020084:	5b                   	pop    ebx
c0020085:	5e                   	pop    esi
c0020086:	c3                   	ret    
c0020087:	90                   	nop

c0020088 <ATAPI::open(int, int, void*)>:
c0020088:	56                   	push   esi
c0020089:	53                   	push   ebx
c002008a:	50                   	push   eax
c002008b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002008f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020093:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020097:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002009d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200a3:	c1 e0 06             	shl    eax,0x6
c00200a6:	01 d0                	add    eax,edx
c00200a8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00200af:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00200b5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00200bc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00200c6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00200cc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00200d3:	6a 04                	push   0x4
c00200d5:	6a 0c                	push   0xc
c00200d7:	51                   	push   ecx
c00200d8:	52                   	push   edx
c00200d9:	e8 cc e4 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200de:	90                   	nop
c00200df:	90                   	nop
c00200e0:	6a 00                	push   0x0
c00200e2:	6a 0c                	push   0xc
c00200e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200eb:	50                   	push   eax
c00200ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200f2:	e8 b3 e4 ff ff       	call   c001e5aa <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200f7:	83 c4 14             	add    esp,0x14
c00200fa:	68 74 01 00 00       	push   0x174
c00200ff:	e8 3b 9c fe ff       	call   c0009d3f <malloc>
c0020104:	83 c4 0c             	add    esp,0xc
c0020107:	89 c6                	mov    esi,eax
c0020109:	6a 00                	push   0x0
c002010b:	68 ff ff ff 7f       	push   0x7fffffff
c0020110:	6a 00                	push   0x0
c0020112:	6a 00                	push   0x0
c0020114:	53                   	push   ebx
c0020115:	68 12 71 02 c0       	push   0xc0027112
c002011a:	50                   	push   eax
c002011b:	e8 80 05 ff ff       	call   c00106a0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020120:	83 c4 14             	add    esp,0x14
c0020123:	56                   	push   esi
c0020124:	e8 2d 06 ff ff       	call   c0010756 <LogicalDisk::assignDriveLetter()>
c0020129:	5a                   	pop    edx
c002012a:	0f be c0             	movsx  eax,al
c002012d:	59                   	pop    ecx
c002012e:	50                   	push   eax
c002012f:	68 a7 6d 02 c0       	push   0xc0026da7
c0020134:	e8 12 cf fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0020139:	58                   	pop    eax
c002013a:	5a                   	pop    edx
c002013b:	56                   	push   esi
c002013c:	53                   	push   ebx
c002013d:	e8 bc e3 fe ff       	call   c000e4fe <Device::addChild(Device*)>
c0020142:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002014b:	e8 4e e8 fe ff       	call   c000e99e <PhysicalDisk::startCache()>
c0020150:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020157:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002015a:	e8 6d fe ff ff       	call   c001ffcc <ATAPI::detectMedia()>
c002015f:	83 c4 14             	add    esp,0x14
c0020162:	31 c0                	xor    eax,eax
c0020164:	5b                   	pop    ebx
c0020165:	5e                   	pop    esi
c0020166:	c3                   	ret    
c0020167:	90                   	nop

c0020168 <ATAPI::read(unsigned long long, int, void*)>:
c0020168:	55                   	push   ebp
c0020169:	57                   	push   edi
c002016a:	56                   	push   esi
c002016b:	53                   	push   ebx
c002016c:	83 ec 1c             	sub    esp,0x1c
c002016f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020173:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020177:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002017b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020182:	74 41                	je     c00201c5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020184:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020188:	b9 03 00 00 00       	mov    ecx,0x3
c002018d:	fc                   	cld    
c002018e:	31 c0                	xor    eax,eax
c0020190:	86 fb                	xchg   bl,bh
c0020192:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020194:	c1 c3 10             	rol    ebx,0x10
c0020197:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002019c:	89 e8                	mov    eax,ebp
c002019e:	86 fb                	xchg   bl,bh
c00201a0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00201a4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00201a8:	50                   	push   eax
c00201a9:	50                   	push   eax
c00201aa:	55                   	push   ebp
c00201ab:	c1 e5 0b             	shl    ebp,0xb
c00201ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00201b2:	6a 00                	push   0x0
c00201b4:	55                   	push   ebp
c00201b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201b9:	50                   	push   eax
c00201ba:	56                   	push   esi
c00201bb:	e8 8c fa ff ff       	call   c001fc4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00201c0:	83 c4 20             	add    esp,0x20
c00201c3:	eb 1a                	jmp    c00201df <ATAPI::read(unsigned long long, int, void*)+0x77>
c00201c5:	83 ec 0c             	sub    esp,0xc
c00201c8:	56                   	push   esi
c00201c9:	e8 fe fd ff ff       	call   c001ffcc <ATAPI::detectMedia()>
c00201ce:	83 c4 10             	add    esp,0x10
c00201d1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00201d8:	75 aa                	jne    c0020184 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00201da:	b8 02 00 00 00       	mov    eax,0x2
c00201df:	83 c4 1c             	add    esp,0x1c
c00201e2:	5b                   	pop    ebx
c00201e3:	5e                   	pop    esi
c00201e4:	5f                   	pop    edi
c00201e5:	5d                   	pop    ebp
c00201e6:	c3                   	ret    
c00201e7:	90                   	nop

c00201e8 <SATA::close(int, int, void*)>:
c00201e8:	83 ec 0c             	sub    esp,0xc
c00201eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00201f5:	85 c0                	test   eax,eax
c00201f7:	74 0c                	je     c0020205 <SATA::close(int, int, void*)+0x1d>
c00201f9:	83 ec 0c             	sub    esp,0xc
c00201fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00201fe:	50                   	push   eax
c00201ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020202:	83 c4 10             	add    esp,0x10
c0020205:	31 c0                	xor    eax,eax
c0020207:	83 c4 0c             	add    esp,0xc
c002020a:	c3                   	ret    
c002020b:	90                   	nop

c002020c <SATA::powerSaving(PowerSavingLevel)>:
c002020c:	c3                   	ret    
c002020d:	90                   	nop

c002020e <SATA::open(int, int, void*)>:
c002020e:	56                   	push   esi
c002020f:	53                   	push   ebx
c0020210:	51                   	push   ecx
c0020211:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020215:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002021c:	74 2d                	je     c002024b <SATA::open(int, int, void*)+0x3d>
c002021e:	83 ec 0c             	sub    esp,0xc
c0020221:	68 ec 6d 02 c0       	push   0xc0026dec
c0020226:	e8 6e 9b fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020235:	75 14                	jne    c002024b <SATA::open(int, int, void*)+0x3d>
c0020237:	e4 60                	in     al,0x60
c0020239:	3c 5a                	cmp    al,0x5a
c002023b:	74 04                	je     c0020241 <SATA::open(int, int, void*)+0x33>
c002023d:	3c 1c                	cmp    al,0x1c
c002023f:	75 f6                	jne    c0020237 <SATA::open(int, int, void*)+0x29>
c0020241:	e4 60                	in     al,0x60
c0020243:	3c 5a                	cmp    al,0x5a
c0020245:	74 fa                	je     c0020241 <SATA::open(int, int, void*)+0x33>
c0020247:	3c 1c                	cmp    al,0x1c
c0020249:	74 f6                	je     c0020241 <SATA::open(int, int, void*)+0x33>
c002024b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002024f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020259:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002025f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020269:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002026d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020277:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002027d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020284:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002028b:	74 2d                	je     c00202ba <SATA::open(int, int, void*)+0xac>
c002028d:	83 ec 0c             	sub    esp,0xc
c0020290:	68 f9 6d 02 c0       	push   0xc0026df9
c0020295:	e8 ff 9a fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c002029a:	83 c4 10             	add    esp,0x10
c002029d:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00202a4:	75 14                	jne    c00202ba <SATA::open(int, int, void*)+0xac>
c00202a6:	e4 60                	in     al,0x60
c00202a8:	3c 1c                	cmp    al,0x1c
c00202aa:	74 04                	je     c00202b0 <SATA::open(int, int, void*)+0xa2>
c00202ac:	3c 5a                	cmp    al,0x5a
c00202ae:	75 f6                	jne    c00202a6 <SATA::open(int, int, void*)+0x98>
c00202b0:	e4 60                	in     al,0x60
c00202b2:	3c 5a                	cmp    al,0x5a
c00202b4:	74 fa                	je     c00202b0 <SATA::open(int, int, void*)+0xa2>
c00202b6:	3c 1c                	cmp    al,0x1c
c00202b8:	74 f6                	je     c00202b0 <SATA::open(int, int, void*)+0xa2>
c00202ba:	e8 37 a1 fe ff       	call   c000a3f6 <Phys::allocatePage()>
c00202bf:	89 c6                	mov    esi,eax
c00202c1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00202c7:	81 c6 00 10 00 00    	add    esi,0x1000
c00202cd:	e8 24 a1 fe ff       	call   c000a3f6 <Phys::allocatePage()>
c00202d2:	39 c6                	cmp    esi,eax
c00202d4:	74 10                	je     c00202e6 <SATA::open(int, int, void*)+0xd8>
c00202d6:	83 ec 0c             	sub    esp,0xc
c00202d9:	68 06 6e 02 c0       	push   0xc0026e06
c00202de:	e8 8a 4d ff ff       	call   c001506d <Krnl::panic(char const*)>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00202ed:	74 2d                	je     c002031c <SATA::open(int, int, void*)+0x10e>
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	68 1a 6e 02 c0       	push   0xc0026e1a
c00202f7:	e8 9d 9a fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00202fc:	83 c4 10             	add    esp,0x10
c00202ff:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020306:	75 14                	jne    c002031c <SATA::open(int, int, void*)+0x10e>
c0020308:	e4 60                	in     al,0x60
c002030a:	3c 1c                	cmp    al,0x1c
c002030c:	74 04                	je     c0020312 <SATA::open(int, int, void*)+0x104>
c002030e:	3c 5a                	cmp    al,0x5a
c0020310:	75 f6                	jne    c0020308 <SATA::open(int, int, void*)+0xfa>
c0020312:	e4 60                	in     al,0x60
c0020314:	3c 5a                	cmp    al,0x5a
c0020316:	74 fa                	je     c0020312 <SATA::open(int, int, void*)+0x104>
c0020318:	3c 1c                	cmp    al,0x1c
c002031a:	74 f6                	je     c0020312 <SATA::open(int, int, void*)+0x104>
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	6a 02                	push   0x2
c0020321:	e8 cb b9 fe ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0020326:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002032c:	6a 03                	push   0x3
c002032e:	50                   	push   eax
c002032f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020335:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c002033b:	e8 1c c0 fe ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c0020340:	83 c4 20             	add    esp,0x20
c0020343:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002034a:	74 2d                	je     c0020379 <SATA::open(int, int, void*)+0x16b>
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	68 27 6e 02 c0       	push   0xc0026e27
c0020354:	e8 40 9a fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020359:	83 c4 10             	add    esp,0x10
c002035c:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020363:	75 14                	jne    c0020379 <SATA::open(int, int, void*)+0x16b>
c0020365:	e4 60                	in     al,0x60
c0020367:	3c 1c                	cmp    al,0x1c
c0020369:	74 04                	je     c002036f <SATA::open(int, int, void*)+0x161>
c002036b:	3c 5a                	cmp    al,0x5a
c002036d:	75 f6                	jne    c0020365 <SATA::open(int, int, void*)+0x157>
c002036f:	e4 60                	in     al,0x60
c0020371:	3c 5a                	cmp    al,0x5a
c0020373:	74 fa                	je     c002036f <SATA::open(int, int, void*)+0x161>
c0020375:	3c 1c                	cmp    al,0x1c
c0020377:	74 f6                	je     c002036f <SATA::open(int, int, void*)+0x161>
c0020379:	83 ec 0c             	sub    esp,0xc
c002037c:	53                   	push   ebx
c002037d:	e8 1c e6 fe ff       	call   c000e99e <PhysicalDisk::startCache()>
c0020382:	83 c4 10             	add    esp,0x10
c0020385:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002038c:	74 2d                	je     c00203bb <SATA::open(int, int, void*)+0x1ad>
c002038e:	83 ec 0c             	sub    esp,0xc
c0020391:	68 34 6e 02 c0       	push   0xc0026e34
c0020396:	e8 fe 99 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c002039b:	83 c4 10             	add    esp,0x10
c002039e:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00203a5:	75 14                	jne    c00203bb <SATA::open(int, int, void*)+0x1ad>
c00203a7:	e4 60                	in     al,0x60
c00203a9:	3c 1c                	cmp    al,0x1c
c00203ab:	74 04                	je     c00203b1 <SATA::open(int, int, void*)+0x1a3>
c00203ad:	3c 5a                	cmp    al,0x5a
c00203af:	75 f6                	jne    c00203a7 <SATA::open(int, int, void*)+0x199>
c00203b1:	e4 60                	in     al,0x60
c00203b3:	3c 5a                	cmp    al,0x5a
c00203b5:	74 fa                	je     c00203b1 <SATA::open(int, int, void*)+0x1a3>
c00203b7:	3c 1c                	cmp    al,0x1c
c00203b9:	74 f6                	je     c00203b1 <SATA::open(int, int, void*)+0x1a3>
c00203bb:	83 ec 0c             	sub    esp,0xc
c00203be:	53                   	push   ebx
c00203bf:	e8 52 07 ff ff       	call   c0010b16 <createPartitionsForDisk(PhysicalDisk*)>
c00203c4:	83 c4 10             	add    esp,0x10
c00203c7:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00203ce:	74 2d                	je     c00203fd <SATA::open(int, int, void*)+0x1ef>
c00203d0:	83 ec 0c             	sub    esp,0xc
c00203d3:	68 41 6e 02 c0       	push   0xc0026e41
c00203d8:	e8 bc 99 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00203dd:	83 c4 10             	add    esp,0x10
c00203e0:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00203e7:	75 14                	jne    c00203fd <SATA::open(int, int, void*)+0x1ef>
c00203e9:	e4 60                	in     al,0x60
c00203eb:	3c 1c                	cmp    al,0x1c
c00203ed:	74 04                	je     c00203f3 <SATA::open(int, int, void*)+0x1e5>
c00203ef:	3c 5a                	cmp    al,0x5a
c00203f1:	75 f6                	jne    c00203e9 <SATA::open(int, int, void*)+0x1db>
c00203f3:	e4 60                	in     al,0x60
c00203f5:	3c 5a                	cmp    al,0x5a
c00203f7:	74 fa                	je     c00203f3 <SATA::open(int, int, void*)+0x1e5>
c00203f9:	3c 1c                	cmp    al,0x1c
c00203fb:	74 f6                	je     c00203f3 <SATA::open(int, int, void*)+0x1e5>
c00203fd:	5a                   	pop    edx
c00203fe:	31 c0                	xor    eax,eax
c0020400:	5b                   	pop    ebx
c0020401:	5e                   	pop    esi
c0020402:	c3                   	ret    
c0020403:	90                   	nop

c0020404 <SATA::SATA()>:
c0020404:	83 ec 0c             	sub    esp,0xc
c0020407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040b:	83 ec 04             	sub    esp,0x4
c002040e:	68 00 02 00 00       	push   0x200
c0020413:	68 4e 6e 02 c0       	push   0xc0026e4e
c0020418:	50                   	push   eax
c0020419:	e8 18 e5 fe ff       	call   c000e936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002041e:	83 c4 10             	add    esp,0x10
c0020421:	ba f8 6f 02 c0       	mov    edx,0xc0026ff8
c0020426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042a:	89 10                	mov    DWORD PTR [eax],edx
c002042c:	90                   	nop
c002042d:	83 c4 0c             	add    esp,0xc
c0020430:	c3                   	ret    
c0020431:	90                   	nop

c0020432 <SATA::access(unsigned long long, int, void*, bool)>:
c0020432:	55                   	push   ebp
c0020433:	57                   	push   edi
c0020434:	56                   	push   esi
c0020435:	53                   	push   ebx
c0020436:	83 ec 2c             	sub    esp,0x2c
c0020439:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002043d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020441:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020445:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002044c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020450:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020454:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020458:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002045c:	75 19                	jne    c0020477 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c002045e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020463:	7e 41                	jle    c00204a6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020465:	83 ec 0c             	sub    esp,0xc
c0020468:	68 6d 6e 02 c0       	push   0xc0026e6d
c002046d:	e8 fb 4b ff ff       	call   c001506d <Krnl::panic(char const*)>
c0020472:	83 c4 10             	add    esp,0x10
c0020475:	eb 2f                	jmp    c00204a6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020477:	83 ec 0c             	sub    esp,0xc
c002047a:	68 5e 6e 02 c0       	push   0xc0026e5e
c002047f:	e8 15 99 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c002048e:	75 ce                	jne    c002045e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020490:	e4 60                	in     al,0x60
c0020492:	3c 1c                	cmp    al,0x1c
c0020494:	74 04                	je     c002049a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020496:	3c 5a                	cmp    al,0x5a
c0020498:	75 f6                	jne    c0020490 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c002049a:	e4 60                	in     al,0x60
c002049c:	3c 5a                	cmp    al,0x5a
c002049e:	74 fa                	je     c002049a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204a0:	3c 1c                	cmp    al,0x1c
c00204a2:	74 f6                	je     c002049a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204a4:	eb b8                	jmp    c002045e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204a6:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00204ad:	75 29                	jne    c00204d8 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00204af:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204b5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00204bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204c1:	8d 75 02             	lea    esi,[ebp+0x2]
c00204c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204c8:	c1 e6 07             	shl    esi,0x7
c00204cb:	01 c6                	add    esi,eax
c00204cd:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00204d4:	74 4a                	je     c0020520 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00204d6:	eb 2f                	jmp    c0020507 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c00204d8:	83 ec 0c             	sub    esp,0xc
c00204db:	68 a6 6e 02 c0       	push   0xc0026ea6
c00204e0:	e8 b4 98 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00204e5:	83 c4 10             	add    esp,0x10
c00204e8:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00204ef:	75 be                	jne    c00204af <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00204f1:	e4 60                	in     al,0x60
c00204f3:	3c 1c                	cmp    al,0x1c
c00204f5:	74 04                	je     c00204fb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00204f7:	3c 5a                	cmp    al,0x5a
c00204f9:	75 f6                	jne    c00204f1 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c00204fb:	e4 60                	in     al,0x60
c00204fd:	3c 5a                	cmp    al,0x5a
c00204ff:	74 fa                	je     c00204fb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020501:	3c 1c                	cmp    al,0x1c
c0020503:	74 f6                	je     c00204fb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020505:	eb a8                	jmp    c00204af <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020507:	83 ec 0c             	sub    esp,0xc
c002050a:	68 b5 6e 02 c0       	push   0xc0026eb5
c002050f:	e8 85 98 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020514:	83 c4 10             	add    esp,0x10
c0020517:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c002051e:	74 3d                	je     c002055d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020520:	89 e8                	mov    eax,ebp
c0020522:	c1 e0 07             	shl    eax,0x7
c0020525:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020529:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020533:	52                   	push   edx
c0020534:	52                   	push   edx
c0020535:	56                   	push   esi
c0020536:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002053c:	e8 fd eb ff ff       	call   c001f13e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020541:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020545:	83 c4 10             	add    esp,0x10
c0020548:	b8 01 00 00 00       	mov    eax,0x1
c002054d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020552:	75 1d                	jne    c0020571 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020554:	e9 c8 04 00 00       	jmp    c0020a21 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020559:	3c 5a                	cmp    al,0x5a
c002055b:	74 0c                	je     c0020569 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002055d:	e4 60                	in     al,0x60
c002055f:	3c 1c                	cmp    al,0x1c
c0020561:	75 f6                	jne    c0020559 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020563:	eb 04                	jmp    c0020569 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020565:	3c 1c                	cmp    al,0x1c
c0020567:	75 b7                	jne    c0020520 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020569:	e4 60                	in     al,0x60
c002056b:	3c 5a                	cmp    al,0x5a
c002056d:	74 fa                	je     c0020569 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002056f:	eb f4                	jmp    c0020565 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020571:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020578:	74 3a                	je     c00205b4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c002057a:	83 ec 0c             	sub    esp,0xc
c002057d:	68 c4 6e 02 c0       	push   0xc0026ec4
c0020582:	e8 12 98 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020587:	83 c4 10             	add    esp,0x10
c002058a:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020591:	74 0d                	je     c00205a0 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020593:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020598:	74 34                	je     c00205ce <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c002059a:	eb 1f                	jmp    c00205bb <SATA::access(unsigned long long, int, void*, bool)+0x189>
c002059c:	3c 1c                	cmp    al,0x1c
c002059e:	74 0c                	je     c00205ac <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205a0:	e4 60                	in     al,0x60
c00205a2:	3c 5a                	cmp    al,0x5a
c00205a4:	75 f6                	jne    c002059c <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00205a6:	eb 04                	jmp    c00205ac <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205a8:	3c 1c                	cmp    al,0x1c
c00205aa:	75 e7                	jne    c0020593 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00205ac:	e4 60                	in     al,0x60
c00205ae:	3c 5a                	cmp    al,0x5a
c00205b0:	74 fa                	je     c00205ac <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205b2:	eb f4                	jmp    c00205a8 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00205b4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205b9:	74 1c                	je     c00205d7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00205bb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00205bf:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00205c5:	c1 e1 09             	shl    ecx,0x9
c00205c8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00205cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205ce:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00205d5:	75 55                	jne    c002062c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c00205d7:	8d 45 02             	lea    eax,[ebp+0x2]
c00205da:	c1 e0 07             	shl    eax,0x7
c00205dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00205e1:	8b 38                	mov    edi,DWORD PTR [eax]
c00205e3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00205e9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c00205ef:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c00205f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f9:	c1 e0 05             	shl    eax,0x5
c00205fc:	01 c7                	add    edi,eax
c00205fe:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020602:	83 e0 01             	and    eax,0x1
c0020605:	c1 e0 06             	shl    eax,0x6
c0020608:	88 c2                	mov    dl,al
c002060a:	8a 07                	mov    al,BYTE PTR [edi]
c002060c:	83 e0 bf             	and    eax,0xffffffbf
c002060f:	09 d0                	or     eax,edx
c0020611:	88 07                	mov    BYTE PTR [edi],al
c0020613:	8b 07                	mov    eax,DWORD PTR [edi]
c0020615:	25 e0 ff 00 00       	and    eax,0xffe0
c002061a:	0d 05 00 01 00       	or     eax,0x10005
c002061f:	89 07                	mov    DWORD PTR [edi],eax
c0020621:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020628:	74 4d                	je     c0020677 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002062a:	eb 32                	jmp    c002065e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	68 d3 6e 02 c0       	push   0xc0026ed3
c0020634:	e8 60 97 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020639:	83 c4 10             	add    esp,0x10
c002063c:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020643:	75 92                	jne    c00205d7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020645:	e4 60                	in     al,0x60
c0020647:	3c 1c                	cmp    al,0x1c
c0020649:	74 04                	je     c002064f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002064b:	3c 5a                	cmp    al,0x5a
c002064d:	75 f6                	jne    c0020645 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002064f:	e4 60                	in     al,0x60
c0020651:	3c 5a                	cmp    al,0x5a
c0020653:	74 fa                	je     c002064f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020655:	3c 1c                	cmp    al,0x1c
c0020657:	74 f6                	je     c002064f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020659:	e9 79 ff ff ff       	jmp    c00205d7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002065e:	83 ec 0c             	sub    esp,0xc
c0020661:	68 e2 6e 02 c0       	push   0xc0026ee2
c0020666:	e8 2e 97 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c002066b:	83 c4 10             	add    esp,0x10
c002066e:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020675:	74 3b                	je     c00206b2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020677:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002067d:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020683:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020689:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c002068c:	50                   	push   eax
c002068d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020691:	83 c0 08             	add    eax,0x8
c0020694:	c1 e0 04             	shl    eax,0x4
c0020697:	50                   	push   eax
c0020698:	6a 00                	push   0x0
c002069a:	56                   	push   esi
c002069b:	e8 e4 ff fd ff       	call   c0000684 <memset>
c00206a0:	83 c4 10             	add    esp,0x10
c00206a3:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00206aa:	74 33                	je     c00206df <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00206ac:	eb 18                	jmp    c00206c6 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00206ae:	3c 1c                	cmp    al,0x1c
c00206b0:	74 0c                	je     c00206be <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206b2:	e4 60                	in     al,0x60
c00206b4:	3c 5a                	cmp    al,0x5a
c00206b6:	75 f6                	jne    c00206ae <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00206b8:	eb 04                	jmp    c00206be <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206ba:	3c 1c                	cmp    al,0x1c
c00206bc:	75 b9                	jne    c0020677 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00206be:	e4 60                	in     al,0x60
c00206c0:	3c 5a                	cmp    al,0x5a
c00206c2:	74 fa                	je     c00206be <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206c4:	eb f4                	jmp    c00206ba <SATA::access(unsigned long long, int, void*, bool)+0x288>
c00206c6:	83 ec 0c             	sub    esp,0xc
c00206c9:	68 f1 6e 02 c0       	push   0xc0026ef1
c00206ce:	e8 c6 96 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00206dd:	74 48                	je     c0020727 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c00206df:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00206e5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00206eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00206ef:	c1 e0 09             	shl    eax,0x9
c00206f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206f6:	48                   	dec    eax
c00206f7:	25 ff ff 3f 00       	and    eax,0x3fffff
c00206fc:	89 c2                	mov    edx,eax
c00206fe:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020704:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020709:	09 d0                	or     eax,edx
c002070b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020711:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020718:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002071f:	74 33                	je     c0020754 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020721:	eb 18                	jmp    c002073b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020723:	3c 1c                	cmp    al,0x1c
c0020725:	74 0c                	je     c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020727:	e4 60                	in     al,0x60
c0020729:	3c 5a                	cmp    al,0x5a
c002072b:	75 f6                	jne    c0020723 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c002072d:	eb 04                	jmp    c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002072f:	3c 1c                	cmp    al,0x1c
c0020731:	75 ac                	jne    c00206df <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020733:	e4 60                	in     al,0x60
c0020735:	3c 5a                	cmp    al,0x5a
c0020737:	74 fa                	je     c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020739:	eb f4                	jmp    c002072f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c002073b:	83 ec 0c             	sub    esp,0xc
c002073e:	68 00 6f 02 c0       	push   0xc0026f00
c0020743:	e8 51 96 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020748:	83 c4 10             	add    esp,0x10
c002074b:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020752:	74 63                	je     c00207b7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020754:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020757:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002075b:	66 25 00 7f          	and    ax,0x7f00
c002075f:	66 0d 27 80          	or     ax,0x8027
c0020763:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020768:	66 89 06             	mov    WORD PTR [esi],ax
c002076b:	19 c0                	sbb    eax,eax
c002076d:	83 e0 f0             	and    eax,0xfffffff0
c0020770:	83 c0 35             	add    eax,0x35
c0020773:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020776:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002077a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002077e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020782:	c1 e8 10             	shr    eax,0x10
c0020785:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002078c:	c1 e8 18             	shr    eax,0x18
c002078f:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020796:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020799:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002079d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00207a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207a4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00207a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00207ab:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00207af:	74 33                	je     c00207e4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00207b1:	eb 18                	jmp    c00207cb <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00207b3:	3c 1c                	cmp    al,0x1c
c00207b5:	74 0c                	je     c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207b7:	e4 60                	in     al,0x60
c00207b9:	3c 5a                	cmp    al,0x5a
c00207bb:	75 f6                	jne    c00207b3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00207bd:	eb 04                	jmp    c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207bf:	3c 1c                	cmp    al,0x1c
c00207c1:	75 91                	jne    c0020754 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00207c3:	e4 60                	in     al,0x60
c00207c5:	3c 5a                	cmp    al,0x5a
c00207c7:	74 fa                	je     c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207c9:	eb f4                	jmp    c00207bf <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c00207cb:	83 ec 0c             	sub    esp,0xc
c00207ce:	68 0f 6f 02 c0       	push   0xc0026f0f
c00207d3:	e8 c1 95 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00207d8:	83 c4 10             	add    esp,0x10
c00207db:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00207e2:	74 11                	je     c00207f5 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c00207e4:	89 e8                	mov    eax,ebp
c00207e6:	31 f6                	xor    esi,esi
c00207e8:	c1 e0 07             	shl    eax,0x7
c00207eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207ef:	eb 21                	jmp    c0020812 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c00207f1:	3c 1c                	cmp    al,0x1c
c00207f3:	74 0c                	je     c0020801 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00207f5:	e4 60                	in     al,0x60
c00207f7:	3c 5a                	cmp    al,0x5a
c00207f9:	75 f6                	jne    c00207f1 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c00207fb:	eb 04                	jmp    c0020801 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00207fd:	3c 1c                	cmp    al,0x1c
c00207ff:	75 e3                	jne    c00207e4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020801:	e4 60                	in     al,0x60
c0020803:	3c 5a                	cmp    al,0x5a
c0020805:	74 fa                	je     c0020801 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020807:	eb f4                	jmp    c00207fd <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020809:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002080f:	74 0c                	je     c002081d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020811:	46                   	inc    esi
c0020812:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020818:	80 e2 88             	and    dl,0x88
c002081b:	75 ec                	jne    c0020809 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c002081d:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020824:	74 3d                	je     c0020863 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020826:	83 ec 0c             	sub    esp,0xc
c0020829:	68 1e 6f 02 c0       	push   0xc0026f1e
c002082e:	e8 66 95 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020833:	8b 15 80 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028280
c0020839:	83 c4 10             	add    esp,0x10
c002083c:	f6 c2 80             	test   dl,0x80
c002083f:	74 0e                	je     c002084f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020841:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020847:	75 2f                	jne    c0020878 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020849:	eb 20                	jmp    c002086b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002084b:	3c 1c                	cmp    al,0x1c
c002084d:	74 0c                	je     c002085b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002084f:	e4 60                	in     al,0x60
c0020851:	3c 5a                	cmp    al,0x5a
c0020853:	75 f6                	jne    c002084b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020855:	eb 04                	jmp    c002085b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020857:	3c 1c                	cmp    al,0x1c
c0020859:	75 e6                	jne    c0020841 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002085b:	e4 60                	in     al,0x60
c002085d:	3c 5a                	cmp    al,0x5a
c002085f:	74 fa                	je     c002085b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020861:	eb f4                	jmp    c0020857 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020863:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020869:	75 13                	jne    c002087e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002086b:	83 ec 0c             	sub    esp,0xc
c002086e:	68 2e 6f 02 c0       	push   0xc0026f2e
c0020873:	e9 d2 00 00 00       	jmp    c002094a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020878:	0f ba e2 0b          	bt     edx,0xb
c002087c:	72 25                	jb     c00208a3 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002087e:	be 01 00 00 00       	mov    esi,0x1
c0020883:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020887:	89 e8                	mov    eax,ebp
c0020889:	d3 e6                	shl    esi,cl
c002088b:	c1 e0 07             	shl    eax,0x7
c002088e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020892:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020899:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002089f:	74 4a                	je     c00208eb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00208a1:	eb 2f                	jmp    c00208d2 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00208a3:	83 ec 0c             	sub    esp,0xc
c00208a6:	68 3c 6f 02 c0       	push   0xc0026f3c
c00208ab:	e8 e9 94 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00208b0:	83 c4 10             	add    esp,0x10
c00208b3:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00208ba:	75 c2                	jne    c002087e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208bc:	e4 60                	in     al,0x60
c00208be:	3c 5a                	cmp    al,0x5a
c00208c0:	74 04                	je     c00208c6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208c2:	3c 1c                	cmp    al,0x1c
c00208c4:	75 f6                	jne    c00208bc <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00208c6:	e4 60                	in     al,0x60
c00208c8:	3c 5a                	cmp    al,0x5a
c00208ca:	74 fa                	je     c00208c6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208cc:	3c 1c                	cmp    al,0x1c
c00208ce:	74 f6                	je     c00208c6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208d0:	eb ac                	jmp    c002087e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208d2:	83 ec 0c             	sub    esp,0xc
c00208d5:	68 4c 6f 02 c0       	push   0xc0026f4c
c00208da:	e8 ba 94 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00208df:	83 c4 10             	add    esp,0x10
c00208e2:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00208e9:	74 0f                	je     c00208fa <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00208eb:	89 e8                	mov    eax,ebp
c00208ed:	c1 e0 07             	shl    eax,0x7
c00208f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00208f4:	eb 24                	jmp    c002091a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00208f6:	3c 1c                	cmp    al,0x1c
c00208f8:	74 0c                	je     c0020906 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00208fa:	e4 60                	in     al,0x60
c00208fc:	3c 5a                	cmp    al,0x5a
c00208fe:	75 f6                	jne    c00208f6 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020900:	eb 04                	jmp    c0020906 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020902:	3c 1c                	cmp    al,0x1c
c0020904:	75 e5                	jne    c00208eb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020906:	e4 60                	in     al,0x60
c0020908:	3c 5a                	cmp    al,0x5a
c002090a:	74 fa                	je     c0020906 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002090c:	eb f4                	jmp    c0020902 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002090e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020914:	0f ba e2 1e          	bt     edx,0x1e
c0020918:	72 28                	jb     c0020942 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002091a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020920:	85 d6                	test   esi,edx
c0020922:	75 ea                	jne    c002090e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020924:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c002092b:	75 2f                	jne    c002095c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c002092d:	89 e8                	mov    eax,ebp
c002092f:	c1 e0 07             	shl    eax,0x7
c0020932:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020936:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002093c:	0f ba e0 1e          	bt     eax,0x1e
c0020940:	73 49                	jae    c002098b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020942:	83 ec 0c             	sub    esp,0xc
c0020945:	68 5c 6f 02 c0       	push   0xc0026f5c
c002094a:	e8 fc c6 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c002094f:	83 c4 10             	add    esp,0x10
c0020952:	b8 01 00 00 00       	mov    eax,0x1
c0020957:	e9 c5 00 00 00       	jmp    c0020a21 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002095c:	83 ec 0c             	sub    esp,0xc
c002095f:	68 6d 6f 02 c0       	push   0xc0026f6d
c0020964:	e8 30 94 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020969:	83 c4 10             	add    esp,0x10
c002096c:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020973:	75 b8                	jne    c002092d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020975:	e4 60                	in     al,0x60
c0020977:	3c 5a                	cmp    al,0x5a
c0020979:	74 04                	je     c002097f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002097b:	3c 1c                	cmp    al,0x1c
c002097d:	75 f6                	jne    c0020975 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002097f:	e4 60                	in     al,0x60
c0020981:	3c 5a                	cmp    al,0x5a
c0020983:	74 fa                	je     c002097f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020985:	3c 1c                	cmp    al,0x1c
c0020987:	74 f6                	je     c002097f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020989:	eb a2                	jmp    c002092d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002098b:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020992:	74 3a                	je     c00209ce <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020994:	83 ec 0c             	sub    esp,0xc
c0020997:	68 7d 6f 02 c0       	push   0xc0026f7d
c002099c:	e8 f8 93 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c00209ab:	74 0d                	je     c00209ba <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00209ad:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209b2:	75 31                	jne    c00209e5 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00209b4:	eb 1f                	jmp    c00209d5 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00209b6:	3c 1c                	cmp    al,0x1c
c00209b8:	74 0c                	je     c00209c6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209ba:	e4 60                	in     al,0x60
c00209bc:	3c 5a                	cmp    al,0x5a
c00209be:	75 f6                	jne    c00209b6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00209c0:	eb 04                	jmp    c00209c6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209c2:	3c 1c                	cmp    al,0x1c
c00209c4:	75 e7                	jne    c00209ad <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00209c6:	e4 60                	in     al,0x60
c00209c8:	3c 5a                	cmp    al,0x5a
c00209ca:	74 fa                	je     c00209c6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209cc:	eb f4                	jmp    c00209c2 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00209ce:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209d3:	75 19                	jne    c00209ee <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00209d5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00209db:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00209df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00209e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209e5:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c00209ec:	75 04                	jne    c00209f2 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00209ee:	31 c0                	xor    eax,eax
c00209f0:	eb 2f                	jmp    c0020a21 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00209f2:	83 ec 0c             	sub    esp,0xc
c00209f5:	68 8d 6f 02 c0       	push   0xc0026f8d
c00209fa:	e8 9a 93 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c00209ff:	83 c4 10             	add    esp,0x10
c0020a02:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020a09:	75 e3                	jne    c00209ee <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a0b:	e4 60                	in     al,0x60
c0020a0d:	3c 1c                	cmp    al,0x1c
c0020a0f:	74 04                	je     c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a11:	3c 5a                	cmp    al,0x5a
c0020a13:	75 f6                	jne    c0020a0b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020a15:	e4 60                	in     al,0x60
c0020a17:	3c 5a                	cmp    al,0x5a
c0020a19:	74 fa                	je     c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a1b:	3c 1c                	cmp    al,0x1c
c0020a1d:	74 f6                	je     c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a1f:	eb cd                	jmp    c00209ee <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a21:	83 c4 2c             	add    esp,0x2c
c0020a24:	5b                   	pop    ebx
c0020a25:	5e                   	pop    esi
c0020a26:	5f                   	pop    edi
c0020a27:	5d                   	pop    ebp
c0020a28:	c3                   	ret    
c0020a29:	90                   	nop

c0020a2a <SATA::read(unsigned long long, int, void*)>:
c0020a2a:	55                   	push   ebp
c0020a2b:	57                   	push   edi
c0020a2c:	56                   	push   esi
c0020a2d:	53                   	push   ebx
c0020a2e:	83 ec 0c             	sub    esp,0xc
c0020a31:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020a35:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020a39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a41:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020a48:	74 2d                	je     c0020a77 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a4a:	83 ec 0c             	sub    esp,0xc
c0020a4d:	68 9d 6f 02 c0       	push   0xc0026f9d
c0020a52:	e8 42 93 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020a57:	83 c4 10             	add    esp,0x10
c0020a5a:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020a61:	75 14                	jne    c0020a77 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a63:	e4 60                	in     al,0x60
c0020a65:	3c 1c                	cmp    al,0x1c
c0020a67:	74 04                	je     c0020a6d <SATA::read(unsigned long long, int, void*)+0x43>
c0020a69:	3c 5a                	cmp    al,0x5a
c0020a6b:	75 f6                	jne    c0020a63 <SATA::read(unsigned long long, int, void*)+0x39>
c0020a6d:	e4 60                	in     al,0x60
c0020a6f:	3c 5a                	cmp    al,0x5a
c0020a71:	74 fa                	je     c0020a6d <SATA::read(unsigned long long, int, void*)+0x43>
c0020a73:	3c 1c                	cmp    al,0x1c
c0020a75:	74 f6                	je     c0020a6d <SATA::read(unsigned long long, int, void*)+0x43>
c0020a77:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020a7a:	b8 04 00 00 00       	mov    eax,0x4
c0020a7f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020a85:	0f 87 96 00 00 00    	ja     c0020b21 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020a8b:	b8 06 00 00 00       	mov    eax,0x6
c0020a90:	85 ed                	test   ebp,ebp
c0020a92:	0f 84 89 00 00 00    	je     c0020b21 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020a98:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020a9f:	74 2d                	je     c0020ace <SATA::read(unsigned long long, int, void*)+0xa4>
c0020aa1:	83 ec 0c             	sub    esp,0xc
c0020aa4:	68 aa 6f 02 c0       	push   0xc0026faa
c0020aa9:	e8 eb 92 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020aae:	83 c4 10             	add    esp,0x10
c0020ab1:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020ab8:	75 14                	jne    c0020ace <SATA::read(unsigned long long, int, void*)+0xa4>
c0020aba:	e4 60                	in     al,0x60
c0020abc:	3c 5a                	cmp    al,0x5a
c0020abe:	74 04                	je     c0020ac4 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020ac0:	3c 1c                	cmp    al,0x1c
c0020ac2:	75 f6                	jne    c0020aba <SATA::read(unsigned long long, int, void*)+0x90>
c0020ac4:	e4 60                	in     al,0x60
c0020ac6:	3c 5a                	cmp    al,0x5a
c0020ac8:	74 fa                	je     c0020ac4 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020aca:	3c 1c                	cmp    al,0x1c
c0020acc:	74 f6                	je     c0020ac4 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020ace:	50                   	push   eax
c0020acf:	50                   	push   eax
c0020ad0:	6a 00                	push   0x0
c0020ad2:	55                   	push   ebp
c0020ad3:	53                   	push   ebx
c0020ad4:	57                   	push   edi
c0020ad5:	56                   	push   esi
c0020ad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ada:	e8 53 f9 ff ff       	call   c0020432 <SATA::access(unsigned long long, int, void*, bool)>
c0020adf:	83 c4 20             	add    esp,0x20
c0020ae2:	89 c3                	mov    ebx,eax
c0020ae4:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020aeb:	74 2d                	je     c0020b1a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020aed:	83 ec 0c             	sub    esp,0xc
c0020af0:	68 b7 6f 02 c0       	push   0xc0026fb7
c0020af5:	e8 9f 92 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020afa:	83 c4 10             	add    esp,0x10
c0020afd:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020b04:	75 14                	jne    c0020b1a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020b06:	e4 60                	in     al,0x60
c0020b08:	3c 5a                	cmp    al,0x5a
c0020b0a:	74 04                	je     c0020b10 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b0c:	3c 1c                	cmp    al,0x1c
c0020b0e:	75 f6                	jne    c0020b06 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020b10:	e4 60                	in     al,0x60
c0020b12:	3c 5a                	cmp    al,0x5a
c0020b14:	74 fa                	je     c0020b10 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b16:	3c 1c                	cmp    al,0x1c
c0020b18:	74 f6                	je     c0020b10 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b1a:	31 c0                	xor    eax,eax
c0020b1c:	85 db                	test   ebx,ebx
c0020b1e:	0f 95 c0             	setne  al
c0020b21:	83 c4 0c             	add    esp,0xc
c0020b24:	5b                   	pop    ebx
c0020b25:	5e                   	pop    esi
c0020b26:	5f                   	pop    edi
c0020b27:	5d                   	pop    ebp
c0020b28:	c3                   	ret    
c0020b29:	90                   	nop

c0020b2a <SATA::write(unsigned long long, int, void*)>:
c0020b2a:	55                   	push   ebp
c0020b2b:	57                   	push   edi
c0020b2c:	56                   	push   esi
c0020b2d:	53                   	push   ebx
c0020b2e:	83 ec 1c             	sub    esp,0x1c
c0020b31:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020b35:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020b39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020b3d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020b41:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020b48:	74 2d                	je     c0020b77 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b4a:	83 ec 0c             	sub    esp,0xc
c0020b4d:	68 c4 6f 02 c0       	push   0xc0026fc4
c0020b52:	e8 42 92 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020b57:	83 c4 10             	add    esp,0x10
c0020b5a:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020b61:	75 14                	jne    c0020b77 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b63:	e4 60                	in     al,0x60
c0020b65:	3c 1c                	cmp    al,0x1c
c0020b67:	74 04                	je     c0020b6d <SATA::write(unsigned long long, int, void*)+0x43>
c0020b69:	3c 5a                	cmp    al,0x5a
c0020b6b:	75 f6                	jne    c0020b63 <SATA::write(unsigned long long, int, void*)+0x39>
c0020b6d:	e4 60                	in     al,0x60
c0020b6f:	3c 5a                	cmp    al,0x5a
c0020b71:	74 fa                	je     c0020b6d <SATA::write(unsigned long long, int, void*)+0x43>
c0020b73:	3c 1c                	cmp    al,0x1c
c0020b75:	74 f6                	je     c0020b6d <SATA::write(unsigned long long, int, void*)+0x43>
c0020b77:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020b7a:	b8 04 00 00 00       	mov    eax,0x4
c0020b7f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020b85:	0f 87 bd 00 00 00    	ja     c0020c48 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b8b:	b8 06 00 00 00       	mov    eax,0x6
c0020b90:	85 db                	test   ebx,ebx
c0020b92:	0f 84 b0 00 00 00    	je     c0020c48 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b98:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020b9f:	74 2d                	je     c0020bce <SATA::write(unsigned long long, int, void*)+0xa4>
c0020ba1:	83 ec 0c             	sub    esp,0xc
c0020ba4:	68 d2 6f 02 c0       	push   0xc0026fd2
c0020ba9:	e8 eb 91 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020bae:	83 c4 10             	add    esp,0x10
c0020bb1:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020bb8:	75 14                	jne    c0020bce <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bba:	e4 60                	in     al,0x60
c0020bbc:	3c 1c                	cmp    al,0x1c
c0020bbe:	74 04                	je     c0020bc4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bc0:	3c 5a                	cmp    al,0x5a
c0020bc2:	75 f6                	jne    c0020bba <SATA::write(unsigned long long, int, void*)+0x90>
c0020bc4:	e4 60                	in     al,0x60
c0020bc6:	3c 5a                	cmp    al,0x5a
c0020bc8:	74 fa                	je     c0020bc4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bca:	3c 1c                	cmp    al,0x1c
c0020bcc:	74 f6                	je     c0020bc4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bce:	c1 e5 09             	shl    ebp,0x9
c0020bd1:	01 dd                	add    ebp,ebx
c0020bd3:	89 f0                	mov    eax,esi
c0020bd5:	89 fa                	mov    edx,edi
c0020bd7:	83 c0 01             	add    eax,0x1
c0020bda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bde:	83 d2 00             	adc    edx,0x0
c0020be1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020be5:	50                   	push   eax
c0020be6:	50                   	push   eax
c0020be7:	6a 01                	push   0x1
c0020be9:	53                   	push   ebx
c0020bea:	81 c3 00 02 00 00    	add    ebx,0x200
c0020bf0:	6a 01                	push   0x1
c0020bf2:	57                   	push   edi
c0020bf3:	56                   	push   esi
c0020bf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020bf8:	e8 35 f8 ff ff       	call   c0020432 <SATA::access(unsigned long long, int, void*, bool)>
c0020bfd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020c01:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020c05:	83 c4 20             	add    esp,0x20
c0020c08:	39 dd                	cmp    ebp,ebx
c0020c0a:	75 c7                	jne    c0020bd3 <SATA::write(unsigned long long, int, void*)+0xa9>
c0020c0c:	f6 05 81 82 02 c0 08 	test   BYTE PTR ds:0xc0028281,0x8
c0020c13:	75 04                	jne    c0020c19 <SATA::write(unsigned long long, int, void*)+0xef>
c0020c15:	31 c0                	xor    eax,eax
c0020c17:	eb 2f                	jmp    c0020c48 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020c19:	83 ec 0c             	sub    esp,0xc
c0020c1c:	68 e0 6f 02 c0       	push   0xc0026fe0
c0020c21:	e8 73 91 fe ff       	call   c0009d99 <Krnl::setBootMessage(char const*)>
c0020c26:	83 c4 10             	add    esp,0x10
c0020c29:	f6 05 80 82 02 c0 80 	test   BYTE PTR ds:0xc0028280,0x80
c0020c30:	75 e3                	jne    c0020c15 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c32:	e4 60                	in     al,0x60
c0020c34:	3c 5a                	cmp    al,0x5a
c0020c36:	74 04                	je     c0020c3c <SATA::write(unsigned long long, int, void*)+0x112>
c0020c38:	3c 1c                	cmp    al,0x1c
c0020c3a:	75 f6                	jne    c0020c32 <SATA::write(unsigned long long, int, void*)+0x108>
c0020c3c:	e4 60                	in     al,0x60
c0020c3e:	3c 5a                	cmp    al,0x5a
c0020c40:	74 fa                	je     c0020c3c <SATA::write(unsigned long long, int, void*)+0x112>
c0020c42:	3c 1c                	cmp    al,0x1c
c0020c44:	74 f6                	je     c0020c3c <SATA::write(unsigned long long, int, void*)+0x112>
c0020c46:	eb cd                	jmp    c0020c15 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c48:	83 c4 1c             	add    esp,0x1c
c0020c4b:	5b                   	pop    ebx
c0020c4c:	5e                   	pop    esi
c0020c4d:	5f                   	pop    edi
c0020c4e:	5d                   	pop    ebp
c0020c4f:	c3                   	ret    

c0020c50 <SATAPI::write(unsigned long long, int, void*)>:
c0020c50:	b8 03 00 00 00       	mov    eax,0x3
c0020c55:	c3                   	ret    

c0020c56 <SATAPI::close(int, int, void*)>:
c0020c56:	83 ec 0c             	sub    esp,0xc
c0020c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020c63:	85 c0                	test   eax,eax
c0020c65:	74 0c                	je     c0020c73 <SATAPI::close(int, int, void*)+0x1d>
c0020c67:	83 ec 0c             	sub    esp,0xc
c0020c6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c6c:	50                   	push   eax
c0020c6d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020c70:	83 c4 10             	add    esp,0x10
c0020c73:	31 c0                	xor    eax,eax
c0020c75:	83 c4 0c             	add    esp,0xc
c0020c78:	c3                   	ret    
c0020c79:	90                   	nop

c0020c7a <SATAPI::SATAPI()>:
c0020c7a:	83 ec 0c             	sub    esp,0xc
c0020c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c81:	83 ec 04             	sub    esp,0x4
c0020c84:	68 00 08 00 00       	push   0x800
c0020c89:	68 28 70 02 c0       	push   0xc0027028
c0020c8e:	50                   	push   eax
c0020c8f:	e8 a2 dc fe ff       	call   c000e936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020c94:	83 c4 10             	add    esp,0x10
c0020c97:	ba 64 71 02 c0       	mov    edx,0xc0027164
c0020c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ca0:	89 10                	mov    DWORD PTR [eax],edx
c0020ca2:	90                   	nop
c0020ca3:	83 c4 0c             	add    esp,0xc
c0020ca6:	c3                   	ret    
c0020ca7:	90                   	nop

c0020ca8 <SATAPI::diskRemoved()>:
c0020ca8:	c3                   	ret    
c0020ca9:	90                   	nop

c0020caa <SATAPI::diskInserted()>:
c0020caa:	83 ec 18             	sub    esp,0x18
c0020cad:	68 34 70 02 c0       	push   0xc0027034
c0020cb2:	e8 94 c3 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0020cb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cbb:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020cc2:	83 c4 1c             	add    esp,0x1c
c0020cc5:	c3                   	ret    

c0020cc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020cc6:	55                   	push   ebp
c0020cc7:	57                   	push   edi
c0020cc8:	56                   	push   esi
c0020cc9:	53                   	push   ebx
c0020cca:	83 ec 38             	sub    esp,0x38
c0020ccd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020cd1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020cd5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020cd9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020cdd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020ce1:	68 4c 70 02 c0       	push   0xc002704c
c0020ce6:	e8 60 c3 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0020ceb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020cf1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020cf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cfb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020d01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d05:	c1 e0 07             	shl    eax,0x7
c0020d08:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020d0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d10:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d1a:	5a                   	pop    edx
c0020d1b:	59                   	pop    ecx
c0020d1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d20:	8d 58 02             	lea    ebx,[eax+0x2]
c0020d23:	c1 e3 07             	shl    ebx,0x7
c0020d26:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020d2a:	53                   	push   ebx
c0020d2b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d31:	e8 08 e4 ff ff       	call   c001f13e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d3a:	83 c4 10             	add    esp,0x10
c0020d3d:	b8 01 00 00 00       	mov    eax,0x1
c0020d42:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d47:	0f 84 ff 01 00 00    	je     c0020f4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020d4d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020d53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020d55:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020d5b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020d61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d65:	c1 e1 05             	shl    ecx,0x5
c0020d68:	01 c8                	add    eax,ecx
c0020d6a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020d6c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020d72:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020d78:	89 08                	mov    DWORD PTR [eax],ecx
c0020d7a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020d80:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020d86:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020d8c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020d8f:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020d92:	50                   	push   eax
c0020d93:	68 90 00 00 00       	push   0x90
c0020d98:	6a 00                	push   0x0
c0020d9a:	53                   	push   ebx
c0020d9b:	e8 e4 f8 fd ff       	call   c0000684 <memset>
c0020da0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020da4:	b9 0c 00 00 00       	mov    ecx,0xc
c0020da9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020dab:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020db1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020db5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020dbb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020dbf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020dc3:	48                   	dec    eax
c0020dc4:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020dc9:	89 c1                	mov    ecx,eax
c0020dcb:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020dd1:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020dd6:	09 c8                	or     eax,ecx
c0020dd8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020dde:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020de1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020de8:	66 25 00 7f          	and    ax,0x7f00
c0020dec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020df0:	66 0d 27 80          	or     ax,0x8027
c0020df4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020df8:	66 89 03             	mov    WORD PTR [ebx],ax
c0020dfb:	89 d0                	mov    eax,edx
c0020dfd:	c1 ea 18             	shr    edx,0x18
c0020e00:	c1 e8 10             	shr    eax,0x10
c0020e03:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020e06:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020e09:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020e0d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020e10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e14:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020e17:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e1b:	83 c4 10             	add    esp,0x10
c0020e1e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020e22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e26:	31 c0                	xor    eax,eax
c0020e28:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020e2e:	80 e1 88             	and    cl,0x88
c0020e31:	74 0a                	je     c0020e3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020e33:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e38:	74 0a                	je     c0020e44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020e3a:	40                   	inc    eax
c0020e3b:	eb eb                	jmp    c0020e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020e3d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e42:	75 0a                	jne    c0020e4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020e44:	83 ec 0c             	sub    esp,0xc
c0020e47:	68 66 70 02 c0       	push   0xc0027066
c0020e4c:	eb 43                	jmp    c0020e91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020e4e:	be 01 00 00 00       	mov    esi,0x1
c0020e53:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e57:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e5b:	d3 e6                	shl    esi,cl
c0020e5d:	c1 e7 07             	shl    edi,0x7
c0020e60:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020e66:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020e6b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020e6f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020e75:	85 c6                	test   esi,eax
c0020e77:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020e7d:	0f 84 96 00 00 00    	je     c0020f19 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020e83:	0f ba e0 1e          	bt     eax,0x1e
c0020e87:	73 1a                	jae    c0020ea3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020e89:	83 ec 0c             	sub    esp,0xc
c0020e8c:	68 7b 70 02 c0       	push   0xc002707b
c0020e91:	e8 b5 c1 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0020e96:	83 c4 10             	add    esp,0x10
c0020e99:	b8 01 00 00 00       	mov    eax,0x1
c0020e9e:	e9 a9 00 00 00       	jmp    c0020f4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020ea3:	83 fb 0d             	cmp    ebx,0xd
c0020ea6:	77 12                	ja     c0020eba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0020ea8:	83 ec 0c             	sub    esp,0xc
c0020eab:	68 c8 00 00 00       	push   0xc8
c0020eb0:	e8 1b 7b ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c0020eb5:	83 c4 10             	add    esp,0x10
c0020eb8:	eb 2a                	jmp    c0020ee4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020eba:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020ec0:	83 f8 0d             	cmp    eax,0xd
c0020ec3:	77 0a                	ja     c0020ecf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020ec5:	83 ec 0c             	sub    esp,0xc
c0020ec8:	68 58 02 00 00       	push   0x258
c0020ecd:	eb 28                	jmp    c0020ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020ecf:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020ed5:	83 f8 0d             	cmp    eax,0xd
c0020ed8:	77 0a                	ja     c0020ee4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020eda:	83 ec 0c             	sub    esp,0xc
c0020edd:	68 dc 05 00 00       	push   0x5dc
c0020ee2:	eb 13                	jmp    c0020ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020ee4:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020eea:	83 f8 0d             	cmp    eax,0xd
c0020eed:	77 10                	ja     c0020eff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0020eef:	83 ec 0c             	sub    esp,0xc
c0020ef2:	68 c4 09 00 00       	push   0x9c4
c0020ef7:	e8 d4 7a ff ff       	call   c00189d0 <milliTenthSleep(unsigned int)>
c0020efc:	83 c4 10             	add    esp,0x10
c0020eff:	43                   	inc    ebx
c0020f00:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020f06:	0f 85 63 ff ff ff    	jne    c0020e6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0020f0c:	83 ec 0c             	sub    esp,0xc
c0020f0f:	68 8e 70 02 c0       	push   0xc002708e
c0020f14:	e9 78 ff ff ff       	jmp    c0020e91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020f19:	0f ba e0 1e          	bt     eax,0x1e
c0020f1d:	73 0d                	jae    c0020f2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0020f1f:	83 ec 0c             	sub    esp,0xc
c0020f22:	68 a2 70 02 c0       	push   0xc00270a2
c0020f27:	e9 65 ff ff ff       	jmp    c0020e91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020f2c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020f31:	74 17                	je     c0020f4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020f33:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020f38:	74 10                	je     c0020f4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020f3a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020f40:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020f44:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020f48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f4a:	31 c0                	xor    eax,eax
c0020f4c:	83 c4 2c             	add    esp,0x2c
c0020f4f:	5b                   	pop    ebx
c0020f50:	5e                   	pop    esi
c0020f51:	5f                   	pop    edi
c0020f52:	5d                   	pop    ebp
c0020f53:	c3                   	ret    

c0020f54 <SATAPI::eject()>:
c0020f54:	57                   	push   edi
c0020f55:	b9 03 00 00 00       	mov    ecx,0x3
c0020f5a:	83 ec 18             	sub    esp,0x18
c0020f5d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020f61:	fc                   	cld    
c0020f62:	31 c0                	xor    eax,eax
c0020f64:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f66:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020f6b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020f70:	50                   	push   eax
c0020f71:	6a 00                	push   0x0
c0020f73:	6a 00                	push   0x0
c0020f75:	6a 00                	push   0x0
c0020f77:	6a 00                	push   0x0
c0020f79:	6a 02                	push   0x2
c0020f7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f7f:	50                   	push   eax
c0020f80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f84:	e8 3d fd ff ff       	call   c0020cc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f89:	31 c0                	xor    eax,eax
c0020f8b:	83 c4 38             	add    esp,0x38
c0020f8e:	5f                   	pop    edi
c0020f8f:	c3                   	ret    

c0020f90 <SATAPI::detectMedia()>:
c0020f90:	56                   	push   esi
c0020f91:	53                   	push   ebx
c0020f92:	83 ec 30             	sub    esp,0x30
c0020f95:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020f99:	68 b7 70 02 c0       	push   0xc00270b7
c0020f9e:	e8 a8 c0 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0020fa3:	83 c4 0c             	add    esp,0xc
c0020fa6:	6a 0c                	push   0xc
c0020fa8:	6a 00                	push   0x0
c0020faa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020fae:	56                   	push   esi
c0020faf:	e8 d0 f6 fd ff       	call   c0000684 <memset>
c0020fb4:	83 c4 0c             	add    esp,0xc
c0020fb7:	6a 00                	push   0x0
c0020fb9:	6a 00                	push   0x0
c0020fbb:	6a 00                	push   0x0
c0020fbd:	6a 00                	push   0x0
c0020fbf:	6a 00                	push   0x0
c0020fc1:	56                   	push   esi
c0020fc2:	53                   	push   ebx
c0020fc3:	e8 fe fc ff ff       	call   c0020cc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fc8:	83 c4 20             	add    esp,0x20
c0020fcb:	48                   	dec    eax
c0020fcc:	74 34                	je     c0021002 <SATAPI::detectMedia()+0x72>
c0020fce:	50                   	push   eax
c0020fcf:	6a 0c                	push   0xc
c0020fd1:	6a 00                	push   0x0
c0020fd3:	56                   	push   esi
c0020fd4:	e8 ab f6 fd ff       	call   c0000684 <memset>
c0020fd9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020fde:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020fe3:	83 c4 0c             	add    esp,0xc
c0020fe6:	6a 01                	push   0x1
c0020fe8:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020fec:	50                   	push   eax
c0020fed:	6a 00                	push   0x0
c0020fef:	6a 00                	push   0x0
c0020ff1:	6a 12                	push   0x12
c0020ff3:	56                   	push   esi
c0020ff4:	53                   	push   ebx
c0020ff5:	e8 cc fc ff ff       	call   c0020cc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ffa:	83 c4 20             	add    esp,0x20
c0020ffd:	48                   	dec    eax
c0020ffe:	75 39                	jne    c0021039 <SATAPI::detectMedia()+0xa9>
c0021000:	eb 1e                	jmp    c0021020 <SATAPI::detectMedia()+0x90>
c0021002:	83 ec 0c             	sub    esp,0xc
c0021005:	68 cb 70 02 c0       	push   0xc00270cb
c002100a:	e8 3c c0 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c002100f:	83 c4 10             	add    esp,0x10
c0021012:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021019:	74 b3                	je     c0020fce <SATAPI::detectMedia()+0x3e>
c002101b:	e9 93 00 00 00       	jmp    c00210b3 <SATAPI::detectMedia()+0x123>
c0021020:	83 ec 0c             	sub    esp,0xc
c0021023:	68 d5 70 02 c0       	push   0xc00270d5
c0021028:	e8 1e c0 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c002102d:	83 c4 10             	add    esp,0x10
c0021030:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021037:	75 7a                	jne    c00210b3 <SATAPI::detectMedia()+0x123>
c0021039:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c002103d:	83 e0 7f             	and    eax,0x7f
c0021040:	3c 70                	cmp    al,0x70
c0021042:	74 25                	je     c0021069 <SATAPI::detectMedia()+0xd9>
c0021044:	83 ec 0c             	sub    esp,0xc
c0021047:	68 df 70 02 c0       	push   0xc00270df
c002104c:	e8 fa bf fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0021051:	83 c4 10             	add    esp,0x10
c0021054:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002105b:	75 0c                	jne    c0021069 <SATAPI::detectMedia()+0xd9>
c002105d:	83 ec 0c             	sub    esp,0xc
c0021060:	53                   	push   ebx
c0021061:	e8 44 fc ff ff       	call   c0020caa <SATAPI::diskInserted()>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002106d:	83 e0 0f             	and    eax,0xf
c0021070:	3c 02                	cmp    al,0x2
c0021072:	75 16                	jne    c002108a <SATAPI::detectMedia()+0xfa>
c0021074:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021079:	75 38                	jne    c00210b3 <SATAPI::detectMedia()+0x123>
c002107b:	83 ec 0c             	sub    esp,0xc
c002107e:	68 e8 70 02 c0       	push   0xc00270e8
c0021083:	e8 c3 bf fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0021088:	eb 26                	jmp    c00210b0 <SATAPI::detectMedia()+0x120>
c002108a:	84 c0                	test   al,al
c002108c:	75 25                	jne    c00210b3 <SATAPI::detectMedia()+0x123>
c002108e:	83 ec 0c             	sub    esp,0xc
c0021091:	68 f1 70 02 c0       	push   0xc00270f1
c0021096:	e8 b0 bf fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210a5:	75 0c                	jne    c00210b3 <SATAPI::detectMedia()+0x123>
c00210a7:	83 ec 0c             	sub    esp,0xc
c00210aa:	53                   	push   ebx
c00210ab:	e8 fa fb ff ff       	call   c0020caa <SATAPI::diskInserted()>
c00210b0:	83 c4 10             	add    esp,0x10
c00210b3:	83 c4 24             	add    esp,0x24
c00210b6:	5b                   	pop    ebx
c00210b7:	5e                   	pop    esi
c00210b8:	c3                   	ret    
c00210b9:	90                   	nop

c00210ba <SATAPI::open(int, int, void*)>:
c00210ba:	56                   	push   esi
c00210bb:	53                   	push   ebx
c00210bc:	51                   	push   ecx
c00210bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210c5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00210cf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00210d5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00210df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210e3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00210ed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00210f3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00210fa:	e8 f7 92 fe ff       	call   c000a3f6 <Phys::allocatePage()>
c00210ff:	89 c6                	mov    esi,eax
c0021101:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021107:	81 c6 00 10 00 00    	add    esi,0x1000
c002110d:	e8 e4 92 fe ff       	call   c000a3f6 <Phys::allocatePage()>
c0021112:	39 c6                	cmp    esi,eax
c0021114:	74 10                	je     c0021126 <SATAPI::open(int, int, void*)+0x6c>
c0021116:	83 ec 0c             	sub    esp,0xc
c0021119:	68 fb 70 02 c0       	push   0xc00270fb
c002111e:	e8 4a 3f ff ff       	call   c001506d <Krnl::panic(char const*)>
c0021123:	83 c4 10             	add    esp,0x10
c0021126:	83 ec 0c             	sub    esp,0xc
c0021129:	6a 02                	push   0x2
c002112b:	e8 c1 ab fe ff       	call   c000bcf1 <Virt::allocateKernelVirtualPages(int)>
c0021130:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021136:	6a 03                	push   0x3
c0021138:	50                   	push   eax
c0021139:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002113f:	ff 35 94 83 02 c0    	push   DWORD PTR ds:0xc0028394
c0021145:	e8 12 b2 fe ff       	call   c000c35c <VAS::mapPage(unsigned long, unsigned long, int)>
c002114a:	83 c4 14             	add    esp,0x14
c002114d:	68 74 01 00 00       	push   0x174
c0021152:	e8 e8 8b fe ff       	call   c0009d3f <malloc>
c0021157:	83 c4 0c             	add    esp,0xc
c002115a:	89 c6                	mov    esi,eax
c002115c:	6a 00                	push   0x0
c002115e:	68 ff ff ff 7f       	push   0x7fffffff
c0021163:	6a 00                	push   0x0
c0021165:	6a 00                	push   0x0
c0021167:	53                   	push   ebx
c0021168:	68 11 71 02 c0       	push   0xc0027111
c002116d:	50                   	push   eax
c002116e:	e8 2d f5 fe ff       	call   c00106a0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021173:	83 c4 14             	add    esp,0x14
c0021176:	56                   	push   esi
c0021177:	e8 da f5 fe ff       	call   c0010756 <LogicalDisk::assignDriveLetter()>
c002117c:	5a                   	pop    edx
c002117d:	0f be c0             	movsx  eax,al
c0021180:	59                   	pop    ecx
c0021181:	50                   	push   eax
c0021182:	68 a7 6d 02 c0       	push   0xc0026da7
c0021187:	e8 bf be fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c002118c:	58                   	pop    eax
c002118d:	5a                   	pop    edx
c002118e:	56                   	push   esi
c002118f:	53                   	push   ebx
c0021190:	e8 69 d3 fe ff       	call   c000e4fe <Device::addChild(Device*)>
c0021195:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002119b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002119e:	e8 fb d7 fe ff       	call   c000e99e <PhysicalDisk::startCache()>
c00211a3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00211aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211ad:	e8 de fd ff ff       	call   c0020f90 <SATAPI::detectMedia()>
c00211b2:	83 c4 14             	add    esp,0x14
c00211b5:	31 c0                	xor    eax,eax
c00211b7:	5b                   	pop    ebx
c00211b8:	5e                   	pop    esi
c00211b9:	c3                   	ret    

c00211ba <SATAPI::read(unsigned long long, int, void*)>:
c00211ba:	55                   	push   ebp
c00211bb:	57                   	push   edi
c00211bc:	56                   	push   esi
c00211bd:	53                   	push   ebx
c00211be:	83 ec 48             	sub    esp,0x48
c00211c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00211c5:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00211c9:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00211cd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00211d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00211d9:	68 1f 71 02 c0       	push   0xc002711f
c00211de:	e8 68 be fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	83 fb 04             	cmp    ebx,0x4
c00211e9:	7e 10                	jle    c00211fb <SATAPI::read(unsigned long long, int, void*)+0x41>
c00211eb:	83 ec 0c             	sub    esp,0xc
c00211ee:	68 30 71 02 c0       	push   0xc0027130
c00211f3:	e8 75 3e ff ff       	call   c001506d <Krnl::panic(char const*)>
c00211f8:	83 c4 10             	add    esp,0x10
c00211fb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00211ff:	31 ed                	xor    ebp,ebp
c0021201:	b9 03 00 00 00       	mov    ecx,0x3
c0021206:	fc                   	cld    
c0021207:	89 e8                	mov    eax,ebp
c0021209:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002120b:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021210:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021215:	50                   	push   eax
c0021216:	6a 00                	push   0x0
c0021218:	6a 00                	push   0x0
c002121a:	6a 00                	push   0x0
c002121c:	6a 00                	push   0x0
c002121e:	6a 02                	push   0x2
c0021220:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021224:	50                   	push   eax
c0021225:	56                   	push   esi
c0021226:	e8 9b fa ff ff       	call   c0020cc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002122b:	8d 7c 24 44          	lea    edi,[esp+0x44]
c002122f:	89 e8                	mov    eax,ebp
c0021231:	b9 03 00 00 00       	mov    ecx,0x3
c0021236:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021238:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002123c:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021240:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021245:	86 e0                	xchg   al,ah
c0021247:	c1 c0 10             	rol    eax,0x10
c002124a:	86 e0                	xchg   al,ah
c002124c:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021250:	83 c4 1c             	add    esp,0x1c
c0021253:	53                   	push   ebx
c0021254:	c1 e3 0b             	shl    ebx,0xb
c0021257:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002125b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002125f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021263:	53                   	push   ebx
c0021264:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021268:	50                   	push   eax
c0021269:	56                   	push   esi
c002126a:	e8 57 fa ff ff       	call   c0020cc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002126f:	83 c4 20             	add    esp,0x20
c0021272:	85 c0                	test   eax,eax
c0021274:	74 14                	je     c002128a <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021276:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002127a:	83 ec 0c             	sub    esp,0xc
c002127d:	56                   	push   esi
c002127e:	e8 0d fd ff ff       	call   c0020f90 <SATAPI::detectMedia()>
c0021283:	83 c4 10             	add    esp,0x10
c0021286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002128a:	83 c4 3c             	add    esp,0x3c
c002128d:	5b                   	pop    ebx
c002128e:	5e                   	pop    esi
c002128f:	5f                   	pop    edi
c0021290:	5d                   	pop    ebp
c0021291:	c3                   	ret    
c0021292:	66 90                	xchg   ax,ax

c0021294 <AVX::open(int, int, void*)>:
c0021294:	83 ec 0c             	sub    esp,0xc
c0021297:	e8 70 11 00 00       	call   c002240c <avxInit>
c002129c:	b8 00 00 00 00       	mov    eax,0x0
c00212a1:	83 c4 0c             	add    esp,0xc
c00212a4:	c3                   	ret    
c00212a5:	90                   	nop
c00212a6:	66 90                	xchg   ax,ax

c00212a8 <AVX::close(int, int, void*)>:
c00212a8:	83 ec 0c             	sub    esp,0xc
c00212ab:	e8 7e 11 00 00       	call   c002242e <avxClose>
c00212b0:	b8 00 00 00 00       	mov    eax,0x0
c00212b5:	83 c4 0c             	add    esp,0xc
c00212b8:	c3                   	ret    
c00212b9:	90                   	nop
c00212ba:	66 90                	xchg   ax,ax

c00212bc <AVX::available()>:
c00212bc:	83 ec 0c             	sub    esp,0xc
c00212bf:	e8 fc 10 00 00       	call   c00223c0 <avxDetect>
c00212c4:	85 c0                	test   eax,eax
c00212c6:	0f 95 c0             	setne  al
c00212c9:	83 c4 0c             	add    esp,0xc
c00212cc:	c3                   	ret    
c00212cd:	90                   	nop
c00212ce:	66 90                	xchg   ax,ax

c00212d0 <AVX::save(void*)>:
c00212d0:	83 ec 0c             	sub    esp,0xc
c00212d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212d7:	83 ec 0c             	sub    esp,0xc
c00212da:	50                   	push   eax
c00212db:	e8 0a 11 00 00       	call   c00223ea <avxSave>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	90                   	nop
c00212e4:	83 c4 0c             	add    esp,0xc
c00212e7:	c3                   	ret    

c00212e8 <AVX::load(void*)>:
c00212e8:	83 ec 0c             	sub    esp,0xc
c00212eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212ef:	83 ec 0c             	sub    esp,0xc
c00212f2:	50                   	push   eax
c00212f3:	e8 03 11 00 00       	call   c00223fb <avxLoad>
c00212f8:	83 c4 10             	add    esp,0x10
c00212fb:	90                   	nop
c00212fc:	83 c4 0c             	add    esp,0xc
c00212ff:	c3                   	ret    

c0021300 <AVX::AVX()>:
c0021300:	83 ec 0c             	sub    esp,0xc
c0021303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021307:	83 ec 08             	sub    esp,0x8
c002130a:	68 94 71 02 c0       	push   0xc0027194
c002130f:	50                   	push   eax
c0021310:	e8 ff d6 fe ff       	call   c000ea14 <FPU::FPU(char const*)>
c0021315:	83 c4 10             	add    esp,0x10
c0021318:	ba a4 71 02 c0       	mov    edx,0xc00271a4
c002131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021321:	89 10                	mov    DWORD PTR [eax],edx
c0021323:	90                   	nop
c0021324:	83 c4 0c             	add    esp,0xc
c0021327:	c3                   	ret    

c0021328 <MMX::available()>:
c0021328:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c002132d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021333:	83 e0 20             	and    eax,0x20
c0021336:	84 c0                	test   al,al
c0021338:	0f 95 c0             	setne  al
c002133b:	c3                   	ret    

c002133c <MMX::open(int, int, void*)>:
c002133c:	83 ec 0c             	sub    esp,0xc
c002133f:	e8 8b 11 00 00       	call   c00224cf <x87Init>
c0021344:	b8 00 00 00 00       	mov    eax,0x0
c0021349:	83 c4 0c             	add    esp,0xc
c002134c:	c3                   	ret    
c002134d:	90                   	nop
c002134e:	66 90                	xchg   ax,ax

c0021350 <MMX::close(int, int, void*)>:
c0021350:	83 ec 0c             	sub    esp,0xc
c0021353:	e8 90 11 00 00       	call   c00224e8 <x87Close>
c0021358:	b8 00 00 00 00       	mov    eax,0x0
c002135d:	83 c4 0c             	add    esp,0xc
c0021360:	c3                   	ret    
c0021361:	90                   	nop
c0021362:	66 90                	xchg   ax,ax

c0021364 <MMX::save(void*)>:
c0021364:	83 ec 0c             	sub    esp,0xc
c0021367:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002136b:	83 ec 0c             	sub    esp,0xc
c002136e:	50                   	push   eax
c002136f:	e8 4d 11 00 00       	call   c00224c1 <x87Save>
c0021374:	83 c4 10             	add    esp,0x10
c0021377:	90                   	nop
c0021378:	83 c4 0c             	add    esp,0xc
c002137b:	c3                   	ret    

c002137c <MMX::load(void*)>:
c002137c:	83 ec 0c             	sub    esp,0xc
c002137f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021383:	83 ec 0c             	sub    esp,0xc
c0021386:	50                   	push   eax
c0021387:	e8 3c 11 00 00       	call   c00224c8 <x87Load>
c002138c:	83 c4 10             	add    esp,0x10
c002138f:	90                   	nop
c0021390:	83 c4 0c             	add    esp,0xc
c0021393:	c3                   	ret    

c0021394 <MMX::MMX()>:
c0021394:	83 ec 0c             	sub    esp,0xc
c0021397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002139b:	83 ec 08             	sub    esp,0x8
c002139e:	68 d4 71 02 c0       	push   0xc00271d4
c00213a3:	50                   	push   eax
c00213a4:	e8 6b d6 fe ff       	call   c000ea14 <FPU::FPU(char const*)>
c00213a9:	83 c4 10             	add    esp,0x10
c00213ac:	ba e4 71 02 c0       	mov    edx,0xc00271e4
c00213b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b5:	89 10                	mov    DWORD PTR [eax],edx
c00213b7:	90                   	nop
c00213b8:	83 c4 0c             	add    esp,0xc
c00213bb:	c3                   	ret    

c00213bc <SSE::open(int, int, void*)>:
c00213bc:	83 ec 0c             	sub    esp,0xc
c00213bf:	e8 c4 10 00 00       	call   c0022488 <sseInit>
c00213c4:	b8 00 00 00 00       	mov    eax,0x0
c00213c9:	83 c4 0c             	add    esp,0xc
c00213cc:	c3                   	ret    
c00213cd:	90                   	nop
c00213ce:	66 90                	xchg   ax,ax

c00213d0 <SSE::close(int, int, void*)>:
c00213d0:	83 ec 0c             	sub    esp,0xc
c00213d3:	e8 c0 10 00 00       	call   c0022498 <sseClose>
c00213d8:	b8 00 00 00 00       	mov    eax,0x0
c00213dd:	83 c4 0c             	add    esp,0xc
c00213e0:	c3                   	ret    
c00213e1:	90                   	nop
c00213e2:	66 90                	xchg   ax,ax

c00213e4 <SSE::available()>:
c00213e4:	83 ec 1c             	sub    esp,0x1c
c00213e7:	e8 74 10 00 00       	call   c0022460 <absolutelyNoChanceInHell>
c00213ec:	85 c0                	test   eax,eax
c00213ee:	0f 95 c0             	setne  al
c00213f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00213f5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00213f9:	83 c4 1c             	add    esp,0x1c
c00213fc:	c3                   	ret    
c00213fd:	90                   	nop
c00213fe:	66 90                	xchg   ax,ax

c0021400 <SSE::save(void*)>:
c0021400:	83 ec 0c             	sub    esp,0xc
c0021403:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021407:	83 ec 0c             	sub    esp,0xc
c002140a:	50                   	push   eax
c002140b:	e8 68 10 00 00       	call   c0022478 <sseSave>
c0021410:	83 c4 10             	add    esp,0x10
c0021413:	90                   	nop
c0021414:	83 c4 0c             	add    esp,0xc
c0021417:	c3                   	ret    

c0021418 <SSE::load(void*)>:
c0021418:	83 ec 0c             	sub    esp,0xc
c002141b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002141f:	83 ec 0c             	sub    esp,0xc
c0021422:	50                   	push   eax
c0021423:	e8 58 10 00 00       	call   c0022480 <sseLoad>
c0021428:	83 c4 10             	add    esp,0x10
c002142b:	90                   	nop
c002142c:	83 c4 0c             	add    esp,0xc
c002142f:	c3                   	ret    

c0021430 <SSE::SSE()>:
c0021430:	83 ec 0c             	sub    esp,0xc
c0021433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021437:	83 ec 08             	sub    esp,0x8
c002143a:	68 14 72 02 c0       	push   0xc0027214
c002143f:	50                   	push   eax
c0021440:	e8 cf d5 fe ff       	call   c000ea14 <FPU::FPU(char const*)>
c0021445:	83 c4 10             	add    esp,0x10
c0021448:	ba 24 72 02 c0       	mov    edx,0xc0027224
c002144d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021451:	89 10                	mov    DWORD PTR [eax],edx
c0021453:	90                   	nop
c0021454:	83 c4 0c             	add    esp,0xc
c0021457:	c3                   	ret    

c0021458 <x87::open(int, int, void*)>:
c0021458:	55                   	push   ebp
c0021459:	89 e5                	mov    ebp,esp
c002145b:	83 ec 08             	sub    esp,0x8
c002145e:	e8 6c 10 00 00       	call   c00224cf <x87Init>
c0021463:	b8 00 00 00 00       	mov    eax,0x0
c0021468:	c9                   	leave  
c0021469:	c3                   	ret    

c002146a <x87::close(int, int, void*)>:
c002146a:	55                   	push   ebp
c002146b:	89 e5                	mov    ebp,esp
c002146d:	83 ec 08             	sub    esp,0x8
c0021470:	e8 73 10 00 00       	call   c00224e8 <x87Close>
c0021475:	b8 00 00 00 00       	mov    eax,0x0
c002147a:	c9                   	leave  
c002147b:	c3                   	ret    

c002147c <x87::available()>:
c002147c:	55                   	push   ebp
c002147d:	89 e5                	mov    ebp,esp
c002147f:	83 ec 08             	sub    esp,0x8
c0021482:	e8 1f 10 00 00       	call   c00224a6 <x87Detect>
c0021487:	85 c0                	test   eax,eax
c0021489:	0f 95 c0             	setne  al
c002148c:	c9                   	leave  
c002148d:	c3                   	ret    

c002148e <x87::save(void*)>:
c002148e:	55                   	push   ebp
c002148f:	89 e5                	mov    ebp,esp
c0021491:	83 ec 08             	sub    esp,0x8
c0021494:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021497:	83 ec 0c             	sub    esp,0xc
c002149a:	50                   	push   eax
c002149b:	e8 21 10 00 00       	call   c00224c1 <x87Save>
c00214a0:	83 c4 10             	add    esp,0x10
c00214a3:	90                   	nop
c00214a4:	c9                   	leave  
c00214a5:	c3                   	ret    

c00214a6 <x87::load(void*)>:
c00214a6:	55                   	push   ebp
c00214a7:	89 e5                	mov    ebp,esp
c00214a9:	83 ec 08             	sub    esp,0x8
c00214ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00214af:	83 ec 0c             	sub    esp,0xc
c00214b2:	50                   	push   eax
c00214b3:	e8 10 10 00 00       	call   c00224c8 <x87Load>
c00214b8:	83 c4 10             	add    esp,0x10
c00214bb:	90                   	nop
c00214bc:	c9                   	leave  
c00214bd:	c3                   	ret    

c00214be <x87::x87()>:
c00214be:	83 ec 0c             	sub    esp,0xc
c00214c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c5:	83 ec 08             	sub    esp,0x8
c00214c8:	68 54 72 02 c0       	push   0xc0027254
c00214cd:	50                   	push   eax
c00214ce:	e8 41 d5 fe ff       	call   c000ea14 <FPU::FPU(char const*)>
c00214d3:	83 c4 10             	add    esp,0x10
c00214d6:	ba 64 72 02 c0       	mov    edx,0xc0027264
c00214db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214df:	89 10                	mov    DWORD PTR [eax],edx
c00214e1:	90                   	nop
c00214e2:	83 c4 0c             	add    esp,0xc
c00214e5:	c3                   	ret    

c00214e6 <APIC::disable()>:
c00214e6:	90                   	nop
c00214e7:	c3                   	ret    

c00214e8 <APIC::close(int, int, void*)>:
c00214e8:	55                   	push   ebp
c00214e9:	89 e5                	mov    ebp,esp
c00214eb:	83 ec 08             	sub    esp,0x8
c00214ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00214f3:	83 c0 3c             	add    eax,0x3c
c00214f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00214f8:	83 ec 0c             	sub    esp,0xc
c00214fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00214fe:	ff d0                	call   eax
c0021500:	83 c4 10             	add    esp,0x10
c0021503:	b8 00 00 00 00       	mov    eax,0x0
c0021508:	c9                   	leave  
c0021509:	c3                   	ret    

c002150a <IOAPIC::close(int, int, void*)>:
c002150a:	b8 00 00 00 00       	mov    eax,0x0
c002150f:	c3                   	ret    

c0021510 <APIC::io_wait()>:
c0021510:	eb 00                	jmp    c0021512 <APIC::io_wait()+0x2>
c0021512:	eb 00                	jmp    c0021514 <APIC::io_wait()+0x4>
c0021514:	90                   	nop
c0021515:	c3                   	ret    

c0021516 <APIC::getBase()>:
c0021516:	55                   	push   ebp
c0021517:	89 e5                	mov    ebp,esp
c0021519:	83 ec 18             	sub    esp,0x18
c002151c:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0021521:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021527:	83 e0 08             	and    eax,0x8
c002152a:	84 c0                	test   al,al
c002152c:	75 07                	jne    c0021535 <APIC::getBase()+0x1f>
c002152e:	b8 00 00 00 00       	mov    eax,0x0
c0021533:	eb 21                	jmp    c0021556 <APIC::getBase()+0x40>
c0021535:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c002153a:	83 ec 08             	sub    esp,0x8
c002153d:	6a 1b                	push   0x1b
c002153f:	50                   	push   eax
c0021540:	e8 29 7d fe ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0021545:	83 c4 10             	add    esp,0x10
c0021548:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002154b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002154e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021551:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021556:	c9                   	leave  
c0021557:	c3                   	ret    

c0021558 <APIC::eoi(unsigned char)>:
c0021558:	55                   	push   ebp
c0021559:	89 e5                	mov    ebp,esp
c002155b:	83 ec 28             	sub    esp,0x28
c002155e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021561:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021564:	83 ec 0c             	sub    esp,0xc
c0021567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002156a:	e8 a7 ff ff ff       	call   c0021516 <APIC::getBase()>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	05 b0 00 00 00       	add    eax,0xb0
c0021577:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002157a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002157d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021583:	90                   	nop
c0021584:	c9                   	leave  
c0021585:	c3                   	ret    

c0021586 <APIC::open(int, int, void*)>:
c0021586:	55                   	push   ebp
c0021587:	89 e5                	mov    ebp,esp
c0021589:	57                   	push   edi
c002158a:	56                   	push   esi
c002158b:	53                   	push   ebx
c002158c:	83 ec 2c             	sub    esp,0x2c
c002158f:	83 ec 0c             	sub    esp,0xc
c0021592:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021595:	e8 7c ff ff ff       	call   c0021516 <APIC::getBase()>
c002159a:	83 c4 10             	add    esp,0x10
c002159d:	89 c2                	mov    edx,eax
c002159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215a2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215a8:	0f b6 f8             	movzx  edi,al
c00215ab:	89 d0                	mov    eax,edx
c00215ad:	ba 00 00 00 00       	mov    edx,0x0
c00215b2:	89 c1                	mov    ecx,eax
c00215b4:	80 e5 ff             	and    ch,0xff
c00215b7:	89 cb                	mov    ebx,ecx
c00215b9:	0f b6 f2             	movzx  esi,dl
c00215bc:	89 d8                	mov    eax,ebx
c00215be:	89 f2                	mov    edx,esi
c00215c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215c3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00215c6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00215ca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00215ce:	83 e0 00             	and    eax,0x0
c00215d1:	09 d0                	or     eax,edx
c00215d3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00215d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215e0:	8d 50 01             	lea    edx,[eax+0x1]
c00215e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215e6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00215ec:	0f b6 d0             	movzx  edx,al
c00215ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215f2:	83 c2 08             	add    edx,0x8
c00215f5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00215f9:	0f b6 c9             	movzx  ecx,cl
c00215fc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021602:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021606:	83 ec 0c             	sub    esp,0xc
c0021609:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002160c:	e8 05 ff ff ff       	call   c0021516 <APIC::getBase()>
c0021611:	83 c4 10             	add    esp,0x10
c0021614:	05 f0 00 00 00       	add    eax,0xf0
c0021619:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002161c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002161f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021621:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021624:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002162b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021632:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021635:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021638:	89 10                	mov    DWORD PTR [eax],edx
c002163a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021641:	a1 d0 8a 02 c0       	mov    eax,ds:0xc0028ad0
c0021646:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021649:	7d 7c                	jge    c00216c7 <APIC::open(int, int, void*)+0x141>
c002164b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002164e:	8b 04 85 e0 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7520]
c0021655:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021658:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002165b:	8b 04 85 e0 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7520]
c0021662:	c1 e8 08             	shr    eax,0x8
c0021665:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021669:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002166c:	8b 04 85 e0 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7520]
c0021673:	c1 e8 18             	shr    eax,0x18
c0021676:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021679:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002167d:	75 40                	jne    c00216bf <APIC::open(int, int, void*)+0x139>
c002167f:	83 ec 0c             	sub    esp,0xc
c0021682:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021685:	e8 8c fe ff ff       	call   c0021516 <APIC::getBase()>
c002168a:	83 c4 10             	add    esp,0x10
c002168d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021691:	75 07                	jne    c002169a <APIC::open(int, int, void*)+0x114>
c0021693:	ba 60 03 00 00       	mov    edx,0x360
c0021698:	eb 05                	jmp    c002169f <APIC::open(int, int, void*)+0x119>
c002169a:	ba 50 03 00 00       	mov    edx,0x350
c002169f:	01 d0                	add    eax,edx
c00216a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00216a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00216a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00216a9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00216ac:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00216b3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00216b7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00216ba:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00216bd:	89 10                	mov    DWORD PTR [eax],edx
c00216bf:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00216c2:	e9 7a ff ff ff       	jmp    c0021641 <APIC::open(int, int, void*)+0xbb>
c00216c7:	b8 00 00 00 00       	mov    eax,0x0
c00216cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00216cf:	5b                   	pop    ebx
c00216d0:	5e                   	pop    esi
c00216d1:	5f                   	pop    edi
c00216d2:	5d                   	pop    ebp
c00216d3:	c3                   	ret    

c00216d4 <IOAPIC::IOAPIC()>:
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216db:	83 ec 08             	sub    esp,0x8
c00216de:	68 94 72 02 c0       	push   0xc0027294
c00216e3:	50                   	push   eax
c00216e4:	e8 19 d0 fe ff       	call   c000e702 <Device::Device(char const*)>
c00216e9:	83 c4 10             	add    esp,0x10
c00216ec:	ba bc 73 02 c0       	mov    edx,0xc00273bc
c00216f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f5:	89 10                	mov    DWORD PTR [eax],edx
c00216f7:	90                   	nop
c00216f8:	83 c4 0c             	add    esp,0xc
c00216fb:	c3                   	ret    

c00216fc <APIC::APIC()>:
c00216fc:	53                   	push   ebx
c00216fd:	83 ec 18             	sub    esp,0x18
c0021700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021704:	83 ec 08             	sub    esp,0x8
c0021707:	68 9c 72 02 c0       	push   0xc002729c
c002170c:	50                   	push   eax
c002170d:	e8 80 d7 fe ff       	call   c000ee92 <InterruptController::InterruptController(char const*)>
c0021712:	83 c4 10             	add    esp,0x10
c0021715:	ba 74 73 02 c0       	mov    edx,0xc0027374
c002171a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002171e:	89 10                	mov    DWORD PTR [eax],edx
c0021720:	a0 00 a2 02 c0       	mov    al,ds:0xc002a200
c0021725:	83 f0 01             	xor    eax,0x1
c0021728:	84 c0                	test   al,al
c002172a:	0f 84 a1 00 00 00    	je     c00217d1 <APIC::APIC()+0xd5>
c0021730:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021735:	a0 80 8b 02 c0       	mov    al,ds:0xc0028b80
c002173a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002173e:	0f 83 86 00 00 00    	jae    c00217ca <APIC::APIC()+0xce>
c0021744:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002174c:	83 ec 0c             	sub    esp,0xc
c002174f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021753:	e8 e7 85 fe ff       	call   c0009d3f <malloc>
c0021758:	83 c4 10             	add    esp,0x10
c002175b:	89 c3                	mov    ebx,eax
c002175d:	83 ec 0c             	sub    esp,0xc
c0021760:	53                   	push   ebx
c0021761:	e8 6e ff ff ff       	call   c00216d4 <IOAPIC::IOAPIC()>
c0021766:	83 c4 10             	add    esp,0x10
c0021769:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002176d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021776:	89 14 85 e0 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e20],edx
c002177d:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c0021782:	40                   	inc    eax
c0021783:	a3 c0 a1 02 c0       	mov    ds:0xc002a1c0,eax
c0021788:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c002178d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021793:	83 ec 08             	sub    esp,0x8
c0021796:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002179a:	50                   	push   eax
c002179b:	e8 5e cd fe ff       	call   c000e4fe <Device::addChild(Device*)>
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00217a9:	83 c0 08             	add    eax,0x8
c00217ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00217ae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00217b3:	6a 00                	push   0x0
c00217b5:	6a 00                	push   0x0
c00217b7:	52                   	push   edx
c00217b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00217bc:	ff d0                	call   eax
c00217be:	83 c4 10             	add    esp,0x10
c00217c1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00217c5:	e9 6b ff ff ff       	jmp    c0021735 <APIC::APIC()+0x39>
c00217ca:	c6 05 00 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a200,0x1
c00217d1:	90                   	nop
c00217d2:	83 c4 18             	add    esp,0x18
c00217d5:	5b                   	pop    ebx
c00217d6:	c3                   	ret    
c00217d7:	90                   	nop

c00217d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00217d8:	55                   	push   ebp
c00217d9:	89 e5                	mov    ebp,esp
c00217db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00217e4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00217e7:	72 1d                	jb     c0021806 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00217e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217ec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00217f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217f5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00217fb:	01 d0                	add    eax,edx
c00217fd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021800:	73 04                	jae    c0021806 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021802:	b0 01                	mov    al,0x1
c0021804:	eb 02                	jmp    c0021808 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021806:	b0 00                	mov    al,0x0
c0021808:	5d                   	pop    ebp
c0021809:	c3                   	ret    

c002180a <IOAPIC::read(int)>:
c002180a:	55                   	push   ebp
c002180b:	89 e5                	mov    ebp,esp
c002180d:	83 ec 10             	sub    esp,0x10
c0021810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021813:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021819:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002181c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002181f:	0f b6 d0             	movzx  edx,al
c0021822:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021825:	89 10                	mov    DWORD PTR [eax],edx
c0021827:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002182a:	83 c0 10             	add    eax,0x10
c002182d:	8b 00                	mov    eax,DWORD PTR [eax]
c002182f:	c9                   	leave  
c0021830:	c3                   	ret    
c0021831:	90                   	nop

c0021832 <IOAPIC::open(int, int, void*)>:
c0021832:	55                   	push   ebp
c0021833:	89 e5                	mov    ebp,esp
c0021835:	57                   	push   edi
c0021836:	56                   	push   esi
c0021837:	53                   	push   ebx
c0021838:	83 ec 0c             	sub    esp,0xc
c002183b:	83 ec 0c             	sub    esp,0xc
c002183e:	68 c7 72 02 c0       	push   0xc00272c7
c0021843:	e8 03 b8 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0021848:	83 c4 10             	add    esp,0x10
c002184b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002184e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021851:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002185a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021860:	8b 14 85 c0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7440]
c0021867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021873:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021879:	8b 14 85 40 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73c0]
c0021880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021883:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002188c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021895:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002189b:	0f b6 f8             	movzx  edi,al
c002189e:	89 d0                	mov    eax,edx
c00218a0:	ba 00 00 00 00       	mov    edx,0x0
c00218a5:	89 c1                	mov    ecx,eax
c00218a7:	80 e5 ff             	and    ch,0xff
c00218aa:	89 cb                	mov    ebx,ecx
c00218ac:	0f b6 f2             	movzx  esi,dl
c00218af:	89 d8                	mov    eax,ebx
c00218b1:	89 f2                	mov    edx,esi
c00218b3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218b6:	8d 5f 08             	lea    ebx,[edi+0x8]
c00218b9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00218bd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00218c1:	83 e0 00             	and    eax,0x0
c00218c4:	09 d0                	or     eax,edx
c00218c6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00218ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218cd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00218d3:	8d 50 01             	lea    edx,[eax+0x1]
c00218d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218d9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00218df:	0f b6 d0             	movzx  edx,al
c00218e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218e5:	83 c2 08             	add    edx,0x8
c00218e8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00218ec:	0f b6 c9             	movzx  ecx,cl
c00218ef:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00218f5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00218f9:	83 ec 08             	sub    esp,0x8
c00218fc:	6a 01                	push   0x1
c00218fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021901:	e8 04 ff ff ff       	call   c002180a <IOAPIC::read(int)>
c0021906:	83 c4 10             	add    esp,0x10
c0021909:	c1 f8 10             	sar    eax,0x10
c002190c:	0f b6 c0             	movzx  eax,al
c002190f:	8d 50 01             	lea    edx,[eax+0x1]
c0021912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021915:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002191b:	b8 00 00 00 00       	mov    eax,0x0
c0021920:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021923:	5b                   	pop    ebx
c0021924:	5e                   	pop    esi
c0021925:	5f                   	pop    edi
c0021926:	5d                   	pop    ebp
c0021927:	c3                   	ret    

c0021928 <IOAPIC::write(int, int)>:
c0021928:	55                   	push   ebp
c0021929:	89 e5                	mov    ebp,esp
c002192b:	83 ec 10             	sub    esp,0x10
c002192e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021931:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021937:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002193a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002193d:	0f b6 d0             	movzx  edx,al
c0021940:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021943:	89 10                	mov    DWORD PTR [eax],edx
c0021945:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021948:	8d 50 10             	lea    edx,[eax+0x10]
c002194b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002194e:	89 02                	mov    DWORD PTR [edx],eax
c0021950:	90                   	nop
c0021951:	c9                   	leave  
c0021952:	c3                   	ret    
c0021953:	90                   	nop

c0021954 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021954:	55                   	push   ebp
c0021955:	89 e5                	mov    ebp,esp
c0021957:	53                   	push   ebx
c0021958:	83 ec 2c             	sub    esp,0x2c
c002195b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002195e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021961:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021964:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021967:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002196a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002196d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021970:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021973:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021976:	88 d8                	mov    al,bl
c0021978:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002197b:	88 c8                	mov    al,cl
c002197d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021980:	88 d0                	mov    al,dl
c0021982:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021985:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021989:	83 c0 08             	add    eax,0x8
c002198c:	01 c0                	add    eax,eax
c002198e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021991:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021995:	83 c0 08             	add    eax,0x8
c0021998:	01 c0                	add    eax,eax
c002199a:	40                   	inc    eax
c002199b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002199e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00219a1:	50                   	push   eax
c00219a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219a5:	e8 60 fe ff ff       	call   c002180a <IOAPIC::read(int)>
c00219aa:	83 c4 08             	add    esp,0x8
c00219ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00219b0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00219b7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00219ba:	c1 e0 18             	shl    eax,0x18
c00219bd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00219c0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00219c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00219c6:	52                   	push   edx
c00219c7:	50                   	push   eax
c00219c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219cb:	e8 58 ff ff ff       	call   c0021928 <IOAPIC::write(int, int)>
c00219d0:	83 c4 0c             	add    esp,0xc
c00219d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00219d6:	50                   	push   eax
c00219d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219da:	e8 2b fe ff ff       	call   c002180a <IOAPIC::read(int)>
c00219df:	83 c4 08             	add    esp,0x8
c00219e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00219e5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00219ec:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00219f3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00219fa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00219fe:	74 09                	je     c0021a09 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021a00:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021a07:	eb 07                	jmp    c0021a10 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021a09:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021a10:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021a14:	74 09                	je     c0021a1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021a16:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021a1d:	eb 07                	jmp    c0021a26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021a1f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021a26:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021a2d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021a31:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021a34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021a37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021a3a:	52                   	push   edx
c0021a3b:	50                   	push   eax
c0021a3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a3f:	e8 e4 fe ff ff       	call   c0021928 <IOAPIC::write(int, int)>
c0021a44:	83 c4 0c             	add    esp,0xc
c0021a47:	90                   	nop
c0021a48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021a4b:	c9                   	leave  
c0021a4c:	c3                   	ret    
c0021a4d:	90                   	nop

c0021a4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021a4e:	55                   	push   ebp
c0021a4f:	89 e5                	mov    ebp,esp
c0021a51:	57                   	push   edi
c0021a52:	56                   	push   esi
c0021a53:	53                   	push   ebx
c0021a54:	83 ec 2c             	sub    esp,0x2c
c0021a57:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021a5a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021a5d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021a61:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021a65:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a69:	74 5a                	je     c0021ac5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a6b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021a6f:	7f 44                	jg     c0021ab5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021a71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a74:	05 60 79 02 c0       	add    eax,0xc0027960
c0021a79:	8a 00                	mov    al,BYTE PTR [eax]
c0021a7b:	0f b6 c0             	movzx  eax,al
c0021a7e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021a81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a84:	66 8b 84 00 60 8b 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd74a0]
c0021a8c:	0f b7 c0             	movzx  eax,ax
c0021a8f:	83 e0 02             	and    eax,0x2
c0021a92:	85 c0                	test   eax,eax
c0021a94:	74 04                	je     c0021a9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021a96:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021a9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a9d:	66 8b 84 00 60 8b 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd74a0]
c0021aa5:	0f b7 c0             	movzx  eax,ax
c0021aa8:	83 e0 08             	and    eax,0x8
c0021aab:	85 c0                	test   eax,eax
c0021aad:	74 16                	je     c0021ac5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021aaf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021ab3:	eb 10                	jmp    c0021ac5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021ab5:	83 ec 0c             	sub    esp,0xc
c0021ab8:	68 d8 72 02 c0       	push   0xc00272d8
c0021abd:	e8 ab 35 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0021ac2:	83 c4 10             	add    esp,0x10
c0021ac5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021ac9:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c0021ace:	83 ec 08             	sub    esp,0x8
c0021ad1:	50                   	push   eax
c0021ad2:	68 10 73 02 c0       	push   0xc0027310
c0021ad7:	e8 6f b5 fe ff       	call   c000d04b <Dbg::kprintf(char const*, ...)>
c0021adc:	83 c4 10             	add    esp,0x10
c0021adf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021ae6:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c0021aeb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021aee:	7d 67                	jge    c0021b57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021af0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021af3:	8b 04 85 e0 a1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e20]
c0021afa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021afd:	83 ec 08             	sub    esp,0x8
c0021b00:	52                   	push   edx
c0021b01:	50                   	push   eax
c0021b02:	e8 d1 fc ff ff       	call   c00217d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021b07:	83 c4 10             	add    esp,0x10
c0021b0a:	84 c0                	test   al,al
c0021b0c:	74 44                	je     c0021b52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021b0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b11:	8b 1c 85 e0 a1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5e20]
c0021b18:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021b1c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021b1f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b26:	83 c0 20             	add    eax,0x20
c0021b29:	0f b6 f0             	movzx  esi,al
c0021b2c:	b8 00 00 00 00       	mov    eax,0x0
c0021b31:	99                   	cdq    
c0021b32:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021b35:	0f b6 c9             	movzx  ecx,cl
c0021b38:	83 ec 04             	sub    esp,0x4
c0021b3b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021b3e:	57                   	push   edi
c0021b3f:	56                   	push   esi
c0021b40:	52                   	push   edx
c0021b41:	50                   	push   eax
c0021b42:	51                   	push   ecx
c0021b43:	53                   	push   ebx
c0021b44:	e8 0b fe ff ff       	call   c0021954 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021b49:	83 c4 20             	add    esp,0x20
c0021b4c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021b50:	eb 05                	jmp    c0021b57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b52:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021b55:	eb 8f                	jmp    c0021ae6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021b57:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021b5a:	83 f0 01             	xor    eax,0x1
c0021b5d:	84 c0                	test   al,al
c0021b5f:	74 10                	je     c0021b71 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021b61:	83 ec 0c             	sub    esp,0xc
c0021b64:	68 27 73 02 c0       	push   0xc0027327
c0021b69:	e8 ff 34 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0021b6e:	83 c4 10             	add    esp,0x10
c0021b71:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021b75:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021b7c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021b80:	7f 65                	jg     c0021be7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b88:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b8f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b92:	01 ca                	add    edx,ecx
c0021b94:	83 c2 54             	add    edx,0x54
c0021b97:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021b9b:	85 c0                	test   eax,eax
c0021b9d:	75 43                	jne    c0021be2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ba2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ba5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021bac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021baf:	01 ca                	add    edx,ecx
c0021bb1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021bb4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021bb7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bbe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021bc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021bc8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021bcb:	01 ca                	add    edx,ecx
c0021bcd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021bd3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021bd6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021bda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bdd:	83 e8 20             	sub    eax,0x20
c0021be0:	eb 1a                	jmp    c0021bfc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021be2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021be5:	eb 95                	jmp    c0021b7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021be7:	83 ec 0c             	sub    esp,0xc
c0021bea:	68 34 73 02 c0       	push   0xc0027334
c0021bef:	e8 79 34 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0021bf4:	83 c4 10             	add    esp,0x10
c0021bf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021bfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021bff:	5b                   	pop    ebx
c0021c00:	5e                   	pop    esi
c0021c01:	5f                   	pop    edi
c0021c02:	5d                   	pop    ebp
c0021c03:	c3                   	ret    

c0021c04 <PIC::disable()>:
c0021c04:	55                   	push   ebp
c0021c05:	89 e5                	mov    ebp,esp
c0021c07:	83 ec 10             	sub    esp,0x10
c0021c0a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021c10:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021c14:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c17:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021c1b:	ee                   	out    dx,al
c0021c1c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021c22:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021c26:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021c29:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021c2d:	ee                   	out    dx,al
c0021c2e:	90                   	nop
c0021c2f:	c9                   	leave  
c0021c30:	c3                   	ret    
c0021c31:	90                   	nop

c0021c32 <PIC::close(int, int, void*)>:
c0021c32:	55                   	push   ebp
c0021c33:	89 e5                	mov    ebp,esp
c0021c35:	83 ec 08             	sub    esp,0x8
c0021c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c3d:	83 c0 3c             	add    eax,0x3c
c0021c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c42:	83 ec 0c             	sub    esp,0xc
c0021c45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c48:	ff d0                	call   eax
c0021c4a:	83 c4 10             	add    esp,0x10
c0021c4d:	b8 00 00 00 00       	mov    eax,0x0
c0021c52:	c9                   	leave  
c0021c53:	c3                   	ret    

c0021c54 <PIC::PIC()>:
c0021c54:	83 ec 0c             	sub    esp,0xc
c0021c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5b:	83 ec 08             	sub    esp,0x8
c0021c5e:	68 e0 73 02 c0       	push   0xc00273e0
c0021c63:	50                   	push   eax
c0021c64:	e8 29 d2 fe ff       	call   c000ee92 <InterruptController::InterruptController(char const*)>
c0021c69:	83 c4 10             	add    esp,0x10
c0021c6c:	ba 0c 74 02 c0       	mov    edx,0xc002740c
c0021c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c75:	89 10                	mov    DWORD PTR [eax],edx
c0021c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c81:	0f b6 d0             	movzx  edx,al
c0021c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c88:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c99:	0f b6 d0             	movzx  edx,al
c0021c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021caf:	8d 50 01             	lea    edx,[eax+0x1]
c0021cb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021cb6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021cbc:	0f b6 d0             	movzx  edx,al
c0021cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021cc7:	83 e1 3f             	and    ecx,0x3f
c0021cca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cd8:	0f b6 d0             	movzx  edx,al
c0021cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cdf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cf0:	0f b6 d0             	movzx  edx,al
c0021cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d06:	8d 50 01             	lea    edx,[eax+0x1]
c0021d09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d0d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021d13:	0f b6 d0             	movzx  edx,al
c0021d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d1a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021d1e:	83 e1 3f             	and    ecx,0x3f
c0021d21:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021d25:	90                   	nop
c0021d26:	83 c4 0c             	add    esp,0xc
c0021d29:	c3                   	ret    

c0021d2a <PIC::ioWait()>:
c0021d2a:	eb 00                	jmp    c0021d2c <PIC::ioWait()+0x2>
c0021d2c:	eb 00                	jmp    c0021d2e <PIC::ioWait()+0x4>
c0021d2e:	90                   	nop
c0021d2f:	c3                   	ret    

c0021d30 <PIC::getIRQReg(int)>:
c0021d30:	55                   	push   ebp
c0021d31:	89 e5                	mov    ebp,esp
c0021d33:	83 ec 10             	sub    esp,0x10
c0021d36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d39:	0f b6 c0             	movzx  eax,al
c0021d3c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021d42:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021d45:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021d48:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021d4c:	ee                   	out    dx,al
c0021d4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d50:	0f b6 c0             	movzx  eax,al
c0021d53:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021d59:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021d5c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021d5f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021d63:	ee                   	out    dx,al
c0021d64:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021d6a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021d6e:	89 c2                	mov    edx,eax
c0021d70:	ec                   	in     al,dx
c0021d71:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021d74:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021d77:	0f b6 c0             	movzx  eax,al
c0021d7a:	c1 e0 08             	shl    eax,0x8
c0021d7d:	89 c1                	mov    ecx,eax
c0021d7f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021d85:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021d89:	89 c2                	mov    edx,eax
c0021d8b:	ec                   	in     al,dx
c0021d8c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021d8f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021d92:	0f b6 c0             	movzx  eax,al
c0021d95:	09 c8                	or     eax,ecx
c0021d97:	c9                   	leave  
c0021d98:	c3                   	ret    
c0021d99:	90                   	nop

c0021d9a <PIC::eoi(unsigned char)>:
c0021d9a:	55                   	push   ebp
c0021d9b:	89 e5                	mov    ebp,esp
c0021d9d:	83 ec 14             	sub    esp,0x14
c0021da0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021da3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021da6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021daa:	75 1e                	jne    c0021dca <PIC::eoi(unsigned char)+0x30>
c0021dac:	6a 0b                	push   0xb
c0021dae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021db1:	e8 7a ff ff ff       	call   c0021d30 <PIC::getIRQReg(int)>
c0021db6:	83 c4 08             	add    esp,0x8
c0021db9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021dbd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021dc1:	25 80 00 00 00       	and    eax,0x80
c0021dc6:	85 c0                	test   eax,eax
c0021dc8:	74 5f                	je     c0021e29 <PIC::eoi(unsigned char)+0x8f>
c0021dca:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021dce:	75 2d                	jne    c0021dfd <PIC::eoi(unsigned char)+0x63>
c0021dd0:	6a 0b                	push   0xb
c0021dd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dd5:	e8 56 ff ff ff       	call   c0021d30 <PIC::getIRQReg(int)>
c0021dda:	83 c4 08             	add    esp,0x8
c0021ddd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021de1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021de4:	66 85 c0             	test   ax,ax
c0021de7:	78 14                	js     c0021dfd <PIC::eoi(unsigned char)+0x63>
c0021de9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021def:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021df3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021df6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021dfa:	ee                   	out    dx,al
c0021dfb:	eb 2d                	jmp    c0021e2a <PIC::eoi(unsigned char)+0x90>
c0021dfd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021e01:	76 12                	jbe    c0021e15 <PIC::eoi(unsigned char)+0x7b>
c0021e03:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021e09:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021e0d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021e10:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021e14:	ee                   	out    dx,al
c0021e15:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021e1b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021e1f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021e22:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021e26:	ee                   	out    dx,al
c0021e27:	eb 01                	jmp    c0021e2a <PIC::eoi(unsigned char)+0x90>
c0021e29:	90                   	nop
c0021e2a:	c9                   	leave  
c0021e2b:	c3                   	ret    

c0021e2c <PIC::remap()>:
c0021e2c:	55                   	push   ebp
c0021e2d:	89 e5                	mov    ebp,esp
c0021e2f:	83 ec 48             	sub    esp,0x48
c0021e32:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021e39:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021e40:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021e46:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021e49:	89 c2                	mov    edx,eax
c0021e4b:	ec                   	in     al,dx
c0021e4c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021e4f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021e52:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021e55:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021e5b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021e5e:	89 c2                	mov    edx,eax
c0021e60:	ec                   	in     al,dx
c0021e61:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021e64:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021e67:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021e6a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021e70:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021e74:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021e77:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021e7a:	ee                   	out    dx,al
c0021e7b:	83 ec 0c             	sub    esp,0xc
c0021e7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e81:	e8 a4 fe ff ff       	call   c0021d2a <PIC::ioWait()>
c0021e86:	83 c4 10             	add    esp,0x10
c0021e89:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021e8f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021e93:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021e96:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021e99:	ee                   	out    dx,al
c0021e9a:	83 ec 0c             	sub    esp,0xc
c0021e9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ea0:	e8 85 fe ff ff       	call   c0021d2a <PIC::ioWait()>
c0021ea5:	83 c4 10             	add    esp,0x10
c0021ea8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021eab:	0f b6 c0             	movzx  eax,al
c0021eae:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021eb4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021eb7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021eba:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021ebd:	ee                   	out    dx,al
c0021ebe:	83 ec 0c             	sub    esp,0xc
c0021ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ec4:	e8 61 fe ff ff       	call   c0021d2a <PIC::ioWait()>
c0021ec9:	83 c4 10             	add    esp,0x10
c0021ecc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021ecf:	0f b6 c0             	movzx  eax,al
c0021ed2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021ed8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021edb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021ede:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021ee1:	ee                   	out    dx,al
c0021ee2:	83 ec 0c             	sub    esp,0xc
c0021ee5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ee8:	e8 3d fe ff ff       	call   c0021d2a <PIC::ioWait()>
c0021eed:	83 c4 10             	add    esp,0x10
c0021ef0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021ef6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021efa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021efd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021f00:	ee                   	out    dx,al
c0021f01:	83 ec 0c             	sub    esp,0xc
c0021f04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f07:	e8 1e fe ff ff       	call   c0021d2a <PIC::ioWait()>
c0021f0c:	83 c4 10             	add    esp,0x10
c0021f0f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021f15:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021f19:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021f1c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021f1f:	ee                   	out    dx,al
c0021f20:	83 ec 0c             	sub    esp,0xc
c0021f23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f26:	e8 ff fd ff ff       	call   c0021d2a <PIC::ioWait()>
c0021f2b:	83 c4 10             	add    esp,0x10
c0021f2e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021f34:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021f38:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021f3b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021f3e:	ee                   	out    dx,al
c0021f3f:	83 ec 0c             	sub    esp,0xc
c0021f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f45:	e8 e0 fd ff ff       	call   c0021d2a <PIC::ioWait()>
c0021f4a:	83 c4 10             	add    esp,0x10
c0021f4d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021f53:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021f57:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021f5a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021f5d:	ee                   	out    dx,al
c0021f5e:	83 ec 0c             	sub    esp,0xc
c0021f61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f64:	e8 c1 fd ff ff       	call   c0021d2a <PIC::ioWait()>
c0021f69:	83 c4 10             	add    esp,0x10
c0021f6c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021f70:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021f76:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021f79:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021f7c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021f7f:	ee                   	out    dx,al
c0021f80:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021f84:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021f8a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021f8d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021f90:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021f93:	ee                   	out    dx,al
c0021f94:	90                   	nop
c0021f95:	c9                   	leave  
c0021f96:	c3                   	ret    
c0021f97:	90                   	nop

c0021f98 <PIC::open(int, int, void*)>:
c0021f98:	55                   	push   ebp
c0021f99:	89 e5                	mov    ebp,esp
c0021f9b:	83 ec 18             	sub    esp,0x18
c0021f9e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021fa4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021fa8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021fab:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021faf:	ee                   	out    dx,al
c0021fb0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021fb6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021fba:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021fbd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021fc1:	ee                   	out    dx,al
c0021fc2:	83 ec 0c             	sub    esp,0xc
c0021fc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fc8:	e8 5f fe ff ff       	call   c0021e2c <PIC::remap()>
c0021fcd:	83 c4 10             	add    esp,0x10
c0021fd0:	b8 00 00 00 00       	mov    eax,0x0
c0021fd5:	c9                   	leave  
c0021fd6:	c3                   	ret    
c0021fd7:	90                   	nop

c0021fd8 <APICTimer::close(int, int, void*)>:
c0021fd8:	b8 00 00 00 00       	mov    eax,0x0
c0021fdd:	c3                   	ret    
c0021fde:	66 90                	xchg   ax,ax

c0021fe0 <apicTimerHandler(regs*, void*)>:
c0021fe0:	83 ec 0c             	sub    esp,0xc
c0021fe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fe7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021fe9:	b8 10 27 00 00       	mov    eax,0x2710
c0021fee:	ba 00 00 00 00       	mov    edx,0x0
c0021ff3:	f7 f1                	div    ecx
c0021ff5:	83 ec 0c             	sub    esp,0xc
c0021ff8:	50                   	push   eax
c0021ff9:	e8 c3 ee fe ff       	call   c0010ec1 <timerHandler(unsigned int)>
c0021ffe:	83 c4 10             	add    esp,0x10
c0022001:	90                   	nop
c0022002:	83 c4 0c             	add    esp,0xc
c0022005:	c3                   	ret    
c0022006:	66 90                	xchg   ax,ax

c0022008 <APICTimer::write(int)>:
c0022008:	83 ec 1c             	sub    esp,0x1c
c002200b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002200f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022013:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022019:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c002201e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022024:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002202a:	83 ec 0c             	sub    esp,0xc
c002202d:	50                   	push   eax
c002202e:	e8 e3 f4 ff ff       	call   c0021516 <APIC::getBase()>
c0022033:	83 c4 10             	add    esp,0x10
c0022036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002203a:	a1 8c 88 02 c0       	mov    eax,ds:0xc002888c
c002203f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022047:	05 e0 03 00 00       	add    eax,0x3e0
c002204c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022052:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022056:	05 80 03 00 00       	add    eax,0x380
c002205b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022061:	fb                   	sti    
c0022062:	66 90                	xchg   ax,ax
c0022064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022068:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002206e:	a1 8c 88 02 c0       	mov    eax,ds:0xc002888c
c0022073:	39 c2                	cmp    edx,eax
c0022075:	76 05                	jbe    c002207c <APICTimer::write(int)+0x74>
c0022077:	eb eb                	jmp    c0022064 <APICTimer::write(int)+0x5c>
c0022079:	8d 76 00             	lea    esi,[esi+0x0]
c002207c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022080:	05 20 03 00 00       	add    eax,0x320
c0022085:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002208b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002208f:	05 90 03 00 00       	add    eax,0x390
c0022094:	8b 00                	mov    eax,DWORD PTR [eax]
c0022096:	f7 d0                	not    eax
c0022098:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002209c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a4:	ba 00 00 00 00       	mov    edx,0x0
c00220a9:	f7 f1                	div    ecx
c00220ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00220ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00220b8:	0d 00 00 02 00       	or     eax,0x20000
c00220bd:	89 c2                	mov    edx,eax
c00220bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220c3:	05 20 03 00 00       	add    eax,0x320
c00220c8:	89 10                	mov    DWORD PTR [eax],edx
c00220ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220ce:	05 e0 03 00 00       	add    eax,0x3e0
c00220d3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00220d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220dd:	05 80 03 00 00       	add    eax,0x380
c00220e2:	89 c2                	mov    edx,eax
c00220e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00220e7:	89 02                	mov    DWORD PTR [edx],eax
c00220e9:	90                   	nop
c00220ea:	83 c4 1c             	add    esp,0x1c
c00220ed:	c3                   	ret    
c00220ee:	66 90                	xchg   ax,ax

c00220f0 <APICTimer::open(int, int, void*)>:
c00220f0:	57                   	push   edi
c00220f1:	56                   	push   esi
c00220f2:	53                   	push   ebx
c00220f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00220f9:	83 c0 24             	add    eax,0x24
c00220fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00220fe:	83 ec 08             	sub    esp,0x8
c0022101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022109:	ff d0                	call   eax
c002210b:	83 c4 10             	add    esp,0x10
c002210e:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c0022113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022119:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002211f:	83 ec 0c             	sub    esp,0xc
c0022122:	50                   	push   eax
c0022123:	e8 ee f3 ff ff       	call   c0021516 <APIC::getBase()>
c0022128:	83 c4 10             	add    esp,0x10
c002212b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022135:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002213b:	0f b6 f8             	movzx  edi,al
c002213e:	89 d0                	mov    eax,edx
c0022140:	ba 00 00 00 00       	mov    edx,0x0
c0022145:	89 c1                	mov    ecx,eax
c0022147:	80 e5 ff             	and    ch,0xff
c002214a:	89 cb                	mov    ebx,ecx
c002214c:	0f b6 f2             	movzx  esi,dl
c002214f:	89 d8                	mov    eax,ebx
c0022151:	89 f2                	mov    edx,esi
c0022153:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022157:	8d 5f 08             	lea    ebx,[edi+0x8]
c002215a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002215e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022162:	83 e0 00             	and    eax,0x0
c0022165:	09 d0                	or     eax,edx
c0022167:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002216b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022175:	8d 50 01             	lea    edx,[eax+0x1]
c0022178:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002217c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022182:	0f b6 d0             	movzx  edx,al
c0022185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022189:	83 c2 08             	add    edx,0x8
c002218c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022190:	0f b6 c9             	movzx  ecx,cl
c0022193:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022199:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002219d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00221a5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00221ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221b3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00221b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221bd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00221c3:	83 ec 0c             	sub    esp,0xc
c00221c6:	51                   	push   ecx
c00221c7:	6a 01                	push   0x1
c00221c9:	68 e0 1f 02 c0       	push   0xc0021fe0
c00221ce:	52                   	push   edx
c00221cf:	50                   	push   eax
c00221d0:	e8 a1 c2 fe ff       	call   c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00221d5:	83 c4 20             	add    esp,0x20
c00221d8:	89 c2                	mov    edx,eax
c00221da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221de:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00221e4:	b8 00 00 00 00       	mov    eax,0x0
c00221e9:	5b                   	pop    ebx
c00221ea:	5e                   	pop    esi
c00221eb:	5f                   	pop    edi
c00221ec:	c3                   	ret    
c00221ed:	90                   	nop
c00221ee:	66 90                	xchg   ax,ax

c00221f0 <APICTimer::APICTimer()>:
c00221f0:	83 ec 0c             	sub    esp,0xc
c00221f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f7:	83 ec 08             	sub    esp,0x8
c00221fa:	68 4c 74 02 c0       	push   0xc002744c
c00221ff:	50                   	push   eax
c0022200:	e8 2b ec fe ff       	call   c0010e30 <Timer::Timer(char const*)>
c0022205:	83 c4 10             	add    esp,0x10
c0022208:	ba 60 74 02 c0       	mov    edx,0xc0027460
c002220d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022211:	89 10                	mov    DWORD PTR [eax],edx
c0022213:	90                   	nop
c0022214:	83 c4 0c             	add    esp,0xc
c0022217:	c3                   	ret    

c0022218 <PIT::write(int)>:
c0022218:	83 ec 10             	sub    esp,0x10
c002221b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002221f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022223:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002222d:	a3 04 a2 02 c0       	mov    ds:0xc002a204,eax
c0022232:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022237:	99                   	cdq    
c0022238:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002223c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022240:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022247:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002224c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022250:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022255:	ee                   	out    dx,al
c0022256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002225a:	0f b6 c0             	movzx  eax,al
c002225d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022264:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022268:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002226c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022271:	ee                   	out    dx,al
c0022272:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022276:	c1 f8 08             	sar    eax,0x8
c0022279:	0f b6 c0             	movzx  eax,al
c002227c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022283:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022287:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002228b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022290:	ee                   	out    dx,al
c0022291:	90                   	nop
c0022292:	83 c4 10             	add    esp,0x10
c0022295:	c3                   	ret    
c0022296:	66 90                	xchg   ax,ax

c0022298 <pitHandler(regs*, void*)>:
c0022298:	83 ec 0c             	sub    esp,0xc
c002229b:	8b 0d 04 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a204
c00222a1:	b8 10 27 00 00       	mov    eax,0x2710
c00222a6:	99                   	cdq    
c00222a7:	f7 f9                	idiv   ecx
c00222a9:	83 ec 0c             	sub    esp,0xc
c00222ac:	50                   	push   eax
c00222ad:	e8 0f ec fe ff       	call   c0010ec1 <timerHandler(unsigned int)>
c00222b2:	83 c4 10             	add    esp,0x10
c00222b5:	90                   	nop
c00222b6:	83 c4 0c             	add    esp,0xc
c00222b9:	c3                   	ret    
c00222ba:	66 90                	xchg   ax,ax

c00222bc <PIT::open(int, int, void*)>:
c00222bc:	83 ec 0c             	sub    esp,0xc
c00222bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00222c5:	83 c0 24             	add    eax,0x24
c00222c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ca:	83 ec 08             	sub    esp,0x8
c00222cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222d5:	ff d0                	call   eax
c00222d7:	83 c4 10             	add    esp,0x10
c00222da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222de:	83 ec 0c             	sub    esp,0xc
c00222e1:	6a 00                	push   0x0
c00222e3:	6a 01                	push   0x1
c00222e5:	68 98 22 02 c0       	push   0xc0022298
c00222ea:	6a 00                	push   0x0
c00222ec:	50                   	push   eax
c00222ed:	e8 84 c1 fe ff       	call   c000e476 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00222f2:	83 c4 20             	add    esp,0x20
c00222f5:	89 c2                	mov    edx,eax
c00222f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022301:	b8 00 00 00 00       	mov    eax,0x0
c0022306:	83 c4 0c             	add    esp,0xc
c0022309:	c3                   	ret    
c002230a:	66 90                	xchg   ax,ax

c002230c <PIT::close(int, int, void*)>:
c002230c:	83 ec 0c             	sub    esp,0xc
c002230f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022313:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002231d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022321:	6a 01                	push   0x1
c0022323:	68 98 22 02 c0       	push   0xc0022298
c0022328:	6a 00                	push   0x0
c002232a:	50                   	push   eax
c002232b:	e8 90 c1 fe ff       	call   c000e4c0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022330:	83 c4 10             	add    esp,0x10
c0022333:	b8 00 00 00 00       	mov    eax,0x0
c0022338:	83 c4 0c             	add    esp,0xc
c002233b:	c3                   	ret    

c002233c <PIT::PIT()>:
c002233c:	83 ec 0c             	sub    esp,0xc
c002233f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022343:	83 ec 08             	sub    esp,0x8
c0022346:	68 88 74 02 c0       	push   0xc0027488
c002234b:	50                   	push   eax
c002234c:	e8 df ea fe ff       	call   c0010e30 <Timer::Timer(char const*)>
c0022351:	83 c4 10             	add    esp,0x10
c0022354:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0022359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235d:	89 10                	mov    DWORD PTR [eax],edx
c002235f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022363:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022369:	0f b6 d0             	movzx  edx,al
c002236c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022370:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022381:	0f b6 d0             	movzx  edx,al
c0022384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022388:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002238d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022391:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022397:	8d 50 01             	lea    edx,[eax+0x1]
c002239a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002239e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223a4:	0f b6 d0             	movzx  edx,al
c00223a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223af:	83 e1 3f             	and    ecx,0x3f
c00223b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223b6:	90                   	nop
c00223b7:	83 c4 0c             	add    esp,0xc
c00223ba:	c3                   	ret    
c00223bb:	66 90                	xchg   ax,ax
c00223bd:	66 90                	xchg   ax,ax
c00223bf:	90                   	nop

c00223c0 <avxDetect>:
c00223c0:	b8 01 00 00 00       	mov    eax,0x1
c00223c5:	0f a2                	cpuid  
c00223c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00223cd:	74 15                	je     c00223e4 <avxDetect.noAVX>
c00223cf:	b8 01 00 00 00       	mov    eax,0x1
c00223d4:	0f a2                	cpuid  
c00223d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00223dc:	74 06                	je     c00223e4 <avxDetect.noAVX>
c00223de:	b8 01 00 00 00       	mov    eax,0x1
c00223e3:	c3                   	ret    

c00223e4 <avxDetect.noAVX>:
c00223e4:	b8 00 00 00 00       	mov    eax,0x0
c00223e9:	c3                   	ret    

c00223ea <avxSave>:
c00223ea:	53                   	push   ebx
c00223eb:	52                   	push   edx
c00223ec:	31 c0                	xor    eax,eax
c00223ee:	48                   	dec    eax
c00223ef:	89 c2                	mov    edx,eax
c00223f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00223f5:	0f ae 23             	xsave  [ebx]
c00223f8:	5a                   	pop    edx
c00223f9:	5b                   	pop    ebx
c00223fa:	c3                   	ret    

c00223fb <avxLoad>:
c00223fb:	53                   	push   ebx
c00223fc:	52                   	push   edx
c00223fd:	31 c0                	xor    eax,eax
c00223ff:	48                   	dec    eax
c0022400:	89 c2                	mov    edx,eax
c0022402:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022406:	0f ae 2b             	xrstor [ebx]
c0022409:	5a                   	pop    edx
c002240a:	5b                   	pop    ebx
c002240b:	c3                   	ret    

c002240c <avxInit>:
c002240c:	e8 77 00 00 00       	call   c0022488 <sseInit>
c0022411:	50                   	push   eax
c0022412:	51                   	push   ecx
c0022413:	0f 20 e0             	mov    eax,cr4
c0022416:	0d 00 00 04 00       	or     eax,0x40000
c002241b:	0f 22 e0             	mov    cr4,eax
c002241e:	31 c9                	xor    ecx,ecx
c0022420:	0f 01 d0             	xgetbv 
c0022423:	0d 07 00 00 00       	or     eax,0x7
c0022428:	0f 01 d1             	xsetbv 
c002242b:	59                   	pop    ecx
c002242c:	58                   	pop    eax
c002242d:	c3                   	ret    

c002242e <avxClose>:
c002242e:	c3                   	ret    

c002242f <wouldSheSayYes>:
c002242f:	c3                   	ret    
c0022430:	49                   	dec    ecx
c0022431:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022435:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022439:	75 20                	jne    c002245b <retry+0x6>
c002243b:	4e                   	dec    esi
c002243c:	79 61                	jns    c002249f <sseClose+0x7>
c002243e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022443:	66 90                	xchg   ax,ax
c0022445:	66 90                	xchg   ax,ax
c0022447:	66 90                	xchg   ax,ax
c0022449:	66 90                	xchg   ax,ax
c002244b:	66 90                	xchg   ax,ax
c002244d:	66 90                	xchg   ax,ax
c002244f:	90                   	nop

c0022450 <_i386_getRDRAND>:
c0022450:	b9 64 00 00 00       	mov    ecx,0x64

c0022455 <retry>:
c0022455:	0f c7 f0             	rdrand eax
c0022458:	72 05                	jb     c002245f <retry.done>
c002245a:	e2 f9                	loop   c0022455 <retry>

c002245c <retry.fail>:
c002245c:	31 c0                	xor    eax,eax
c002245e:	c3                   	ret    

c002245f <retry.done>:
c002245f:	c3                   	ret    

c0022460 <absolutelyNoChanceInHell>:
c0022460:	b8 01 00 00 00       	mov    eax,0x1
c0022465:	0f a2                	cpuid  
c0022467:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002246d:	74 06                	je     c0022475 <sseDetect.noSSE>
c002246f:	b8 01 00 00 00       	mov    eax,0x1
c0022474:	c3                   	ret    

c0022475 <sseDetect.noSSE>:
c0022475:	31 c0                	xor    eax,eax
c0022477:	c3                   	ret    

c0022478 <sseSave>:
c0022478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002247c:	0f ae 00             	fxsave [eax]
c002247f:	c3                   	ret    

c0022480 <sseLoad>:
c0022480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022484:	0f ae 08             	fxrstor [eax]
c0022487:	c3                   	ret    

c0022488 <sseInit>:
c0022488:	e8 42 00 00 00       	call   c00224cf <x87Init>
c002248d:	0f 20 e0             	mov    eax,cr4
c0022490:	66 0d 00 06          	or     ax,0x600
c0022494:	0f 22 e0             	mov    cr4,eax
c0022497:	c3                   	ret    

c0022498 <sseClose>:
c0022498:	c3                   	ret    
c0022499:	66 90                	xchg   ax,ax
c002249b:	66 90                	xchg   ax,ax
c002249d:	66 90                	xchg   ax,ax
c002249f:	90                   	nop

c00224a0 <value_37F>:
c00224a0:	7f 03                	jg     c00224a5 <value_37A+0x1>

c00224a2 <value_37E>:
c00224a2:	7e 03                	jle    c00224a7 <x87Detect+0x1>

c00224a4 <value_37A>:
c00224a4:	7a 03                	jp     c00224a9 <x87Detect+0x3>

c00224a6 <x87Detect>:
c00224a6:	b8 01 00 00 00       	mov    eax,0x1
c00224ab:	0f a2                	cpuid  
c00224ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00224b3:	74 06                	je     c00224bb <x87Detect.nox87>
c00224b5:	b8 01 00 00 00       	mov    eax,0x1
c00224ba:	c3                   	ret    

c00224bb <x87Detect.nox87>:
c00224bb:	b8 00 00 00 00       	mov    eax,0x0
c00224c0:	c3                   	ret    

c00224c1 <x87Save>:
c00224c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224c5:	dd 30                	fnsave [eax]
c00224c7:	c3                   	ret    

c00224c8 <x87Load>:
c00224c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224cc:	dd 20                	frstor [eax]
c00224ce:	c3                   	ret    

c00224cf <x87Init>:
c00224cf:	0f 20 c0             	mov    eax,cr0
c00224d2:	66 25 fb ff          	and    ax,0xfffb
c00224d6:	66 0d 22 00          	or     ax,0x22
c00224da:	0f 22 c0             	mov    cr0,eax
c00224dd:	db e3                	fninit 
c00224df:	0f 06                	clts   
c00224e1:	d9 2d a4 24 02 c0    	fldcw  WORD PTR ds:0xc00224a4
c00224e7:	c3                   	ret    

c00224e8 <x87Close>:
c00224e8:	c3                   	ret    
c00224e9:	66 90                	xchg   ax,ax
c00224eb:	90                   	nop

c00224ec <__do_global_ctors_aux>:
c00224ec:	a1 88 36 02 c0       	mov    eax,ds:0xc0023688
c00224f1:	83 f8 ff             	cmp    eax,0xffffffff
c00224f4:	74 1a                	je     c0022510 <__do_global_ctors_aux+0x24>
c00224f6:	55                   	push   ebp
c00224f7:	89 e5                	mov    ebp,esp
c00224f9:	53                   	push   ebx
c00224fa:	52                   	push   edx
c00224fb:	bb 88 36 02 c0       	mov    ebx,0xc0023688
c0022500:	ff d0                	call   eax
c0022502:	83 eb 04             	sub    ebx,0x4
c0022505:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022507:	83 f8 ff             	cmp    eax,0xffffffff
c002250a:	75 f4                	jne    c0022500 <__do_global_ctors_aux+0x14>
c002250c:	58                   	pop    eax
c002250d:	5b                   	pop    ebx
c002250e:	5d                   	pop    ebp
c002250f:	c3                   	ret    
c0022510:	c3                   	ret    
c0022511:	66 90                	xchg   ax,ax
c0022513:	90                   	nop

c0022514 <__divdi3>:
c0022514:	55                   	push   ebp
c0022515:	57                   	push   edi
c0022516:	56                   	push   esi
c0022517:	53                   	push   ebx
c0022518:	83 ec 1c             	sub    esp,0x1c
c002251b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002251f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022523:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022526:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002252a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002252e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022532:	85 db                	test   ebx,ebx
c0022534:	0f 88 8e 00 00 00    	js     c00225c8 <__divdi3+0xb4>
c002253a:	89 dd                	mov    ebp,ebx
c002253c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022544:	89 d3                	mov    ebx,edx
c0022546:	85 d2                	test   edx,edx
c0022548:	79 0d                	jns    c0022557 <__divdi3+0x43>
c002254a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002254e:	f7 d8                	neg    eax
c0022550:	83 d2 00             	adc    edx,0x0
c0022553:	f7 da                	neg    edx
c0022555:	89 d3                	mov    ebx,edx
c0022557:	89 c7                	mov    edi,eax
c0022559:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002255c:	85 db                	test   ebx,ebx
c002255e:	75 48                	jne    c00225a8 <__divdi3+0x94>
c0022560:	39 ef                	cmp    edi,ebp
c0022562:	76 24                	jbe    c0022588 <__divdi3+0x74>
c0022564:	89 ea                	mov    edx,ebp
c0022566:	f7 f7                	div    edi
c0022568:	89 c1                	mov    ecx,eax
c002256a:	31 f6                	xor    esi,esi
c002256c:	89 c8                	mov    eax,ecx
c002256e:	89 f2                	mov    edx,esi
c0022570:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022574:	85 c9                	test   ecx,ecx
c0022576:	74 07                	je     c002257f <__divdi3+0x6b>
c0022578:	f7 d8                	neg    eax
c002257a:	83 d2 00             	adc    edx,0x0
c002257d:	f7 da                	neg    edx
c002257f:	83 c4 1c             	add    esp,0x1c
c0022582:	5b                   	pop    ebx
c0022583:	5e                   	pop    esi
c0022584:	5f                   	pop    edi
c0022585:	5d                   	pop    ebp
c0022586:	c3                   	ret    
c0022587:	90                   	nop
c0022588:	85 ff                	test   edi,edi
c002258a:	75 0b                	jne    c0022597 <__divdi3+0x83>
c002258c:	b8 01 00 00 00       	mov    eax,0x1
c0022591:	31 d2                	xor    edx,edx
c0022593:	f7 f3                	div    ebx
c0022595:	89 c7                	mov    edi,eax
c0022597:	31 d2                	xor    edx,edx
c0022599:	89 e8                	mov    eax,ebp
c002259b:	f7 f7                	div    edi
c002259d:	89 c6                	mov    esi,eax
c002259f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00225a2:	f7 f7                	div    edi
c00225a4:	89 c1                	mov    ecx,eax
c00225a6:	eb c4                	jmp    c002256c <__divdi3+0x58>
c00225a8:	39 eb                	cmp    ebx,ebp
c00225aa:	77 3c                	ja     c00225e8 <__divdi3+0xd4>
c00225ac:	0f bd f3             	bsr    esi,ebx
c00225af:	83 f6 1f             	xor    esi,0x1f
c00225b2:	75 40                	jne    c00225f4 <__divdi3+0xe0>
c00225b4:	39 eb                	cmp    ebx,ebp
c00225b6:	72 09                	jb     c00225c1 <__divdi3+0xad>
c00225b8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00225bb:	0f 87 97 00 00 00    	ja     c0022658 <__divdi3+0x144>
c00225c1:	b9 01 00 00 00       	mov    ecx,0x1
c00225c6:	eb a4                	jmp    c002256c <__divdi3+0x58>
c00225c8:	f7 d9                	neg    ecx
c00225ca:	83 d3 00             	adc    ebx,0x0
c00225cd:	f7 db                	neg    ebx
c00225cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00225d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00225d6:	89 dd                	mov    ebp,ebx
c00225d8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00225e0:	e9 5f ff ff ff       	jmp    c0022544 <__divdi3+0x30>
c00225e5:	8d 76 00             	lea    esi,[esi+0x0]
c00225e8:	31 f6                	xor    esi,esi
c00225ea:	31 c9                	xor    ecx,ecx
c00225ec:	e9 7b ff ff ff       	jmp    c002256c <__divdi3+0x58>
c00225f1:	8d 76 00             	lea    esi,[esi+0x0]
c00225f4:	b8 20 00 00 00       	mov    eax,0x20
c00225f9:	29 f0                	sub    eax,esi
c00225fb:	89 f1                	mov    ecx,esi
c00225fd:	d3 e3                	shl    ebx,cl
c00225ff:	89 fa                	mov    edx,edi
c0022601:	88 c1                	mov    cl,al
c0022603:	d3 ea                	shr    edx,cl
c0022605:	09 da                	or     edx,ebx
c0022607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002260b:	89 f1                	mov    ecx,esi
c002260d:	d3 e7                	shl    edi,cl
c002260f:	89 eb                	mov    ebx,ebp
c0022611:	88 c1                	mov    cl,al
c0022613:	d3 eb                	shr    ebx,cl
c0022615:	89 f1                	mov    ecx,esi
c0022617:	d3 e5                	shl    ebp,cl
c0022619:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002261c:	88 c1                	mov    cl,al
c002261e:	d3 ea                	shr    edx,cl
c0022620:	09 d5                	or     ebp,edx
c0022622:	89 e8                	mov    eax,ebp
c0022624:	89 da                	mov    edx,ebx
c0022626:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002262a:	89 d3                	mov    ebx,edx
c002262c:	89 c5                	mov    ebp,eax
c002262e:	f7 e7                	mul    edi
c0022630:	39 d3                	cmp    ebx,edx
c0022632:	72 18                	jb     c002264c <__divdi3+0x138>
c0022634:	74 0a                	je     c0022640 <__divdi3+0x12c>
c0022636:	89 e9                	mov    ecx,ebp
c0022638:	31 f6                	xor    esi,esi
c002263a:	e9 2d ff ff ff       	jmp    c002256c <__divdi3+0x58>
c002263f:	90                   	nop
c0022640:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022643:	89 f1                	mov    ecx,esi
c0022645:	d3 e7                	shl    edi,cl
c0022647:	39 c7                	cmp    edi,eax
c0022649:	73 eb                	jae    c0022636 <__divdi3+0x122>
c002264b:	90                   	nop
c002264c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002264f:	31 f6                	xor    esi,esi
c0022651:	e9 16 ff ff ff       	jmp    c002256c <__divdi3+0x58>
c0022656:	66 90                	xchg   ax,ax
c0022658:	31 c9                	xor    ecx,ecx
c002265a:	e9 0d ff ff ff       	jmp    c002256c <__divdi3+0x58>
c002265f:	90                   	nop

c0022660 <__moddi3>:
c0022660:	55                   	push   ebp
c0022661:	57                   	push   edi
c0022662:	56                   	push   esi
c0022663:	53                   	push   ebx
c0022664:	83 ec 2c             	sub    esp,0x2c
c0022667:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002266b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002266f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022673:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022677:	85 db                	test   ebx,ebx
c0022679:	0f 88 85 00 00 00    	js     c0022704 <__moddi3+0xa4>
c002267f:	89 de                	mov    esi,ebx
c0022681:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022689:	89 d7                	mov    edi,edx
c002268b:	85 d2                	test   edx,edx
c002268d:	79 09                	jns    c0022698 <__moddi3+0x38>
c002268f:	f7 d8                	neg    eax
c0022691:	83 d2 00             	adc    edx,0x0
c0022694:	f7 da                	neg    edx
c0022696:	89 d7                	mov    edi,edx
c0022698:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002269c:	89 cd                	mov    ebp,ecx
c002269e:	85 ff                	test   edi,edi
c00226a0:	75 52                	jne    c00226f4 <__moddi3+0x94>
c00226a2:	89 c3                	mov    ebx,eax
c00226a4:	39 f0                	cmp    eax,esi
c00226a6:	76 24                	jbe    c00226cc <__moddi3+0x6c>
c00226a8:	89 c8                	mov    eax,ecx
c00226aa:	89 f2                	mov    edx,esi
c00226ac:	f7 f3                	div    ebx
c00226ae:	89 d6                	mov    esi,edx
c00226b0:	89 f0                	mov    eax,esi
c00226b2:	31 d2                	xor    edx,edx
c00226b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00226b8:	85 c9                	test   ecx,ecx
c00226ba:	74 07                	je     c00226c3 <__moddi3+0x63>
c00226bc:	f7 d8                	neg    eax
c00226be:	83 d2 00             	adc    edx,0x0
c00226c1:	f7 da                	neg    edx
c00226c3:	83 c4 2c             	add    esp,0x2c
c00226c6:	5b                   	pop    ebx
c00226c7:	5e                   	pop    esi
c00226c8:	5f                   	pop    edi
c00226c9:	5d                   	pop    ebp
c00226ca:	c3                   	ret    
c00226cb:	90                   	nop
c00226cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00226d0:	85 db                	test   ebx,ebx
c00226d2:	75 0d                	jne    c00226e1 <__moddi3+0x81>
c00226d4:	b8 01 00 00 00       	mov    eax,0x1
c00226d9:	31 d2                	xor    edx,edx
c00226db:	f7 f7                	div    edi
c00226dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226e1:	89 f0                	mov    eax,esi
c00226e3:	31 d2                	xor    edx,edx
c00226e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00226e9:	f7 f7                	div    edi
c00226eb:	89 e8                	mov    eax,ebp
c00226ed:	f7 f7                	div    edi
c00226ef:	89 d6                	mov    esi,edx
c00226f1:	eb bd                	jmp    c00226b0 <__moddi3+0x50>
c00226f3:	90                   	nop
c00226f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00226f8:	39 f7                	cmp    edi,esi
c00226fa:	76 20                	jbe    c002271c <__moddi3+0xbc>
c00226fc:	89 c8                	mov    eax,ecx
c00226fe:	89 f2                	mov    edx,esi
c0022700:	eb b2                	jmp    c00226b4 <__moddi3+0x54>
c0022702:	66 90                	xchg   ax,ax
c0022704:	f7 d9                	neg    ecx
c0022706:	83 d3 00             	adc    ebx,0x0
c0022709:	f7 db                	neg    ebx
c002270b:	89 de                	mov    esi,ebx
c002270d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022715:	e9 6f ff ff ff       	jmp    c0022689 <__moddi3+0x29>
c002271a:	66 90                	xchg   ax,ax
c002271c:	0f bd c7             	bsr    eax,edi
c002271f:	83 f0 1f             	xor    eax,0x1f
c0022722:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022726:	75 24                	jne    c002274c <__moddi3+0xec>
c0022728:	39 f7                	cmp    edi,esi
c002272a:	72 06                	jb     c0022732 <__moddi3+0xd2>
c002272c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022730:	77 0c                	ja     c002273e <__moddi3+0xde>
c0022732:	89 e9                	mov    ecx,ebp
c0022734:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022738:	19 fe                	sbb    esi,edi
c002273a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002273e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022742:	89 f2                	mov    edx,esi
c0022744:	e9 6b ff ff ff       	jmp    c00226b4 <__moddi3+0x54>
c0022749:	8d 76 00             	lea    esi,[esi+0x0]
c002274c:	b8 20 00 00 00       	mov    eax,0x20
c0022751:	89 c2                	mov    edx,eax
c0022753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022757:	29 da                	sub    edx,ebx
c0022759:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002275d:	88 d9                	mov    cl,bl
c002275f:	d3 e7                	shl    edi,cl
c0022761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022765:	88 d1                	mov    cl,dl
c0022767:	d3 e8                	shr    eax,cl
c0022769:	09 c7                	or     edi,eax
c002276b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002276f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022773:	89 d8                	mov    eax,ebx
c0022775:	88 d9                	mov    cl,bl
c0022777:	d3 e7                	shl    edi,cl
c0022779:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002277d:	89 f3                	mov    ebx,esi
c002277f:	88 d1                	mov    cl,dl
c0022781:	d3 eb                	shr    ebx,cl
c0022783:	89 c7                	mov    edi,eax
c0022785:	88 c1                	mov    cl,al
c0022787:	d3 e6                	shl    esi,cl
c0022789:	89 e8                	mov    eax,ebp
c002278b:	88 d1                	mov    cl,dl
c002278d:	d3 e8                	shr    eax,cl
c002278f:	09 f0                	or     eax,esi
c0022791:	89 f9                	mov    ecx,edi
c0022793:	d3 e5                	shl    ebp,cl
c0022795:	89 da                	mov    edx,ebx
c0022797:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002279b:	89 d3                	mov    ebx,edx
c002279d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00227a1:	89 c6                	mov    esi,eax
c00227a3:	89 d1                	mov    ecx,edx
c00227a5:	39 d3                	cmp    ebx,edx
c00227a7:	72 27                	jb     c00227d0 <__moddi3+0x170>
c00227a9:	74 21                	je     c00227cc <__moddi3+0x16c>
c00227ab:	29 f5                	sub    ebp,esi
c00227ad:	19 cb                	sbb    ebx,ecx
c00227af:	89 de                	mov    esi,ebx
c00227b1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00227b5:	d3 e6                	shl    esi,cl
c00227b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00227bb:	89 f9                	mov    ecx,edi
c00227bd:	d3 ed                	shr    ebp,cl
c00227bf:	09 ee                	or     esi,ebp
c00227c1:	89 f0                	mov    eax,esi
c00227c3:	d3 eb                	shr    ebx,cl
c00227c5:	89 da                	mov    edx,ebx
c00227c7:	e9 e8 fe ff ff       	jmp    c00226b4 <__moddi3+0x54>
c00227cc:	39 c5                	cmp    ebp,eax
c00227ce:	73 db                	jae    c00227ab <__moddi3+0x14b>
c00227d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00227d4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00227d8:	89 d1                	mov    ecx,edx
c00227da:	89 c6                	mov    esi,eax
c00227dc:	eb cd                	jmp    c00227ab <__moddi3+0x14b>
c00227de:	66 90                	xchg   ax,ax

c00227e0 <__udivdi3>:
c00227e0:	55                   	push   ebp
c00227e1:	57                   	push   edi
c00227e2:	56                   	push   esi
c00227e3:	53                   	push   ebx
c00227e4:	83 ec 1c             	sub    esp,0x1c
c00227e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00227eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00227f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00227f7:	85 d2                	test   edx,edx
c00227f9:	75 41                	jne    c002283c <__udivdi3+0x5c>
c00227fb:	39 f7                	cmp    edi,esi
c00227fd:	76 15                	jbe    c0022814 <__udivdi3+0x34>
c00227ff:	89 e8                	mov    eax,ebp
c0022801:	89 f2                	mov    edx,esi
c0022803:	f7 f7                	div    edi
c0022805:	31 db                	xor    ebx,ebx
c0022807:	89 da                	mov    edx,ebx
c0022809:	83 c4 1c             	add    esp,0x1c
c002280c:	5b                   	pop    ebx
c002280d:	5e                   	pop    esi
c002280e:	5f                   	pop    edi
c002280f:	5d                   	pop    ebp
c0022810:	c3                   	ret    
c0022811:	8d 76 00             	lea    esi,[esi+0x0]
c0022814:	89 f9                	mov    ecx,edi
c0022816:	85 ff                	test   edi,edi
c0022818:	75 0b                	jne    c0022825 <__udivdi3+0x45>
c002281a:	b8 01 00 00 00       	mov    eax,0x1
c002281f:	31 d2                	xor    edx,edx
c0022821:	f7 f7                	div    edi
c0022823:	89 c1                	mov    ecx,eax
c0022825:	31 d2                	xor    edx,edx
c0022827:	89 f0                	mov    eax,esi
c0022829:	f7 f1                	div    ecx
c002282b:	89 c3                	mov    ebx,eax
c002282d:	89 e8                	mov    eax,ebp
c002282f:	f7 f1                	div    ecx
c0022831:	89 da                	mov    edx,ebx
c0022833:	83 c4 1c             	add    esp,0x1c
c0022836:	5b                   	pop    ebx
c0022837:	5e                   	pop    esi
c0022838:	5f                   	pop    edi
c0022839:	5d                   	pop    ebp
c002283a:	c3                   	ret    
c002283b:	90                   	nop
c002283c:	39 f2                	cmp    edx,esi
c002283e:	77 1c                	ja     c002285c <__udivdi3+0x7c>
c0022840:	0f bd da             	bsr    ebx,edx
c0022843:	83 f3 1f             	xor    ebx,0x1f
c0022846:	75 24                	jne    c002286c <__udivdi3+0x8c>
c0022848:	39 f2                	cmp    edx,esi
c002284a:	72 08                	jb     c0022854 <__udivdi3+0x74>
c002284c:	39 ef                	cmp    edi,ebp
c002284e:	0f 87 84 00 00 00    	ja     c00228d8 <__udivdi3+0xf8>
c0022854:	b8 01 00 00 00       	mov    eax,0x1
c0022859:	eb ac                	jmp    c0022807 <__udivdi3+0x27>
c002285b:	90                   	nop
c002285c:	31 db                	xor    ebx,ebx
c002285e:	31 c0                	xor    eax,eax
c0022860:	89 da                	mov    edx,ebx
c0022862:	83 c4 1c             	add    esp,0x1c
c0022865:	5b                   	pop    ebx
c0022866:	5e                   	pop    esi
c0022867:	5f                   	pop    edi
c0022868:	5d                   	pop    ebp
c0022869:	c3                   	ret    
c002286a:	66 90                	xchg   ax,ax
c002286c:	b8 20 00 00 00       	mov    eax,0x20
c0022871:	29 d8                	sub    eax,ebx
c0022873:	88 d9                	mov    cl,bl
c0022875:	d3 e2                	shl    edx,cl
c0022877:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002287b:	89 fa                	mov    edx,edi
c002287d:	88 c1                	mov    cl,al
c002287f:	d3 ea                	shr    edx,cl
c0022881:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022885:	09 d1                	or     ecx,edx
c0022887:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002288b:	88 d9                	mov    cl,bl
c002288d:	d3 e7                	shl    edi,cl
c002288f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022893:	89 f7                	mov    edi,esi
c0022895:	88 c1                	mov    cl,al
c0022897:	d3 ef                	shr    edi,cl
c0022899:	88 d9                	mov    cl,bl
c002289b:	d3 e6                	shl    esi,cl
c002289d:	89 ea                	mov    edx,ebp
c002289f:	88 c1                	mov    cl,al
c00228a1:	d3 ea                	shr    edx,cl
c00228a3:	09 d6                	or     esi,edx
c00228a5:	89 f0                	mov    eax,esi
c00228a7:	89 fa                	mov    edx,edi
c00228a9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00228ad:	89 d7                	mov    edi,edx
c00228af:	89 c6                	mov    esi,eax
c00228b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00228b5:	39 d7                	cmp    edi,edx
c00228b7:	72 13                	jb     c00228cc <__udivdi3+0xec>
c00228b9:	74 09                	je     c00228c4 <__udivdi3+0xe4>
c00228bb:	89 f0                	mov    eax,esi
c00228bd:	31 db                	xor    ebx,ebx
c00228bf:	e9 43 ff ff ff       	jmp    c0022807 <__udivdi3+0x27>
c00228c4:	88 d9                	mov    cl,bl
c00228c6:	d3 e5                	shl    ebp,cl
c00228c8:	39 c5                	cmp    ebp,eax
c00228ca:	73 ef                	jae    c00228bb <__udivdi3+0xdb>
c00228cc:	8d 46 ff             	lea    eax,[esi-0x1]
c00228cf:	31 db                	xor    ebx,ebx
c00228d1:	e9 31 ff ff ff       	jmp    c0022807 <__udivdi3+0x27>
c00228d6:	66 90                	xchg   ax,ax
c00228d8:	31 c0                	xor    eax,eax
c00228da:	e9 28 ff ff ff       	jmp    c0022807 <__udivdi3+0x27>
c00228df:	90                   	nop

c00228e0 <__umoddi3>:
c00228e0:	55                   	push   ebp
c00228e1:	57                   	push   edi
c00228e2:	56                   	push   esi
c00228e3:	53                   	push   ebx
c00228e4:	83 ec 1c             	sub    esp,0x1c
c00228e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00228f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00228f7:	89 da                	mov    edx,ebx
c00228f9:	85 c0                	test   eax,eax
c00228fb:	75 37                	jne    c0022934 <__umoddi3+0x54>
c00228fd:	39 df                	cmp    edi,ebx
c00228ff:	76 13                	jbe    c0022914 <__umoddi3+0x34>
c0022901:	89 f0                	mov    eax,esi
c0022903:	f7 f7                	div    edi
c0022905:	89 d0                	mov    eax,edx
c0022907:	31 d2                	xor    edx,edx
c0022909:	83 c4 1c             	add    esp,0x1c
c002290c:	5b                   	pop    ebx
c002290d:	5e                   	pop    esi
c002290e:	5f                   	pop    edi
c002290f:	5d                   	pop    ebp
c0022910:	c3                   	ret    
c0022911:	8d 76 00             	lea    esi,[esi+0x0]
c0022914:	89 fd                	mov    ebp,edi
c0022916:	85 ff                	test   edi,edi
c0022918:	75 0b                	jne    c0022925 <__umoddi3+0x45>
c002291a:	b8 01 00 00 00       	mov    eax,0x1
c002291f:	31 d2                	xor    edx,edx
c0022921:	f7 f7                	div    edi
c0022923:	89 c5                	mov    ebp,eax
c0022925:	89 d8                	mov    eax,ebx
c0022927:	31 d2                	xor    edx,edx
c0022929:	f7 f5                	div    ebp
c002292b:	89 f0                	mov    eax,esi
c002292d:	f7 f5                	div    ebp
c002292f:	89 d0                	mov    eax,edx
c0022931:	eb d4                	jmp    c0022907 <__umoddi3+0x27>
c0022933:	90                   	nop
c0022934:	89 f1                	mov    ecx,esi
c0022936:	39 d8                	cmp    eax,ebx
c0022938:	76 0a                	jbe    c0022944 <__umoddi3+0x64>
c002293a:	89 f0                	mov    eax,esi
c002293c:	83 c4 1c             	add    esp,0x1c
c002293f:	5b                   	pop    ebx
c0022940:	5e                   	pop    esi
c0022941:	5f                   	pop    edi
c0022942:	5d                   	pop    ebp
c0022943:	c3                   	ret    
c0022944:	0f bd e8             	bsr    ebp,eax
c0022947:	83 f5 1f             	xor    ebp,0x1f
c002294a:	75 1c                	jne    c0022968 <__umoddi3+0x88>
c002294c:	39 d8                	cmp    eax,ebx
c002294e:	72 04                	jb     c0022954 <__umoddi3+0x74>
c0022950:	39 f7                	cmp    edi,esi
c0022952:	77 08                	ja     c002295c <__umoddi3+0x7c>
c0022954:	89 da                	mov    edx,ebx
c0022956:	29 fe                	sub    esi,edi
c0022958:	19 c2                	sbb    edx,eax
c002295a:	89 f1                	mov    ecx,esi
c002295c:	89 c8                	mov    eax,ecx
c002295e:	83 c4 1c             	add    esp,0x1c
c0022961:	5b                   	pop    ebx
c0022962:	5e                   	pop    esi
c0022963:	5f                   	pop    edi
c0022964:	5d                   	pop    ebp
c0022965:	c3                   	ret    
c0022966:	66 90                	xchg   ax,ax
c0022968:	ba 20 00 00 00       	mov    edx,0x20
c002296d:	29 ea                	sub    edx,ebp
c002296f:	89 e9                	mov    ecx,ebp
c0022971:	d3 e0                	shl    eax,cl
c0022973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022977:	89 f8                	mov    eax,edi
c0022979:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002297d:	88 d1                	mov    cl,dl
c002297f:	d3 e8                	shr    eax,cl
c0022981:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022985:	09 c1                	or     ecx,eax
c0022987:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002298b:	89 e9                	mov    ecx,ebp
c002298d:	d3 e7                	shl    edi,cl
c002298f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022993:	89 d8                	mov    eax,ebx
c0022995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022999:	88 d1                	mov    cl,dl
c002299b:	d3 e8                	shr    eax,cl
c002299d:	89 c7                	mov    edi,eax
c002299f:	89 e9                	mov    ecx,ebp
c00229a1:	d3 e3                	shl    ebx,cl
c00229a3:	89 f0                	mov    eax,esi
c00229a5:	88 d1                	mov    cl,dl
c00229a7:	d3 e8                	shr    eax,cl
c00229a9:	09 d8                	or     eax,ebx
c00229ab:	89 e9                	mov    ecx,ebp
c00229ad:	d3 e6                	shl    esi,cl
c00229af:	89 f3                	mov    ebx,esi
c00229b1:	89 fa                	mov    edx,edi
c00229b3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00229b7:	89 d1                	mov    ecx,edx
c00229b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00229bd:	89 c6                	mov    esi,eax
c00229bf:	89 d7                	mov    edi,edx
c00229c1:	39 d1                	cmp    ecx,edx
c00229c3:	72 27                	jb     c00229ec <__umoddi3+0x10c>
c00229c5:	74 21                	je     c00229e8 <__umoddi3+0x108>
c00229c7:	89 ca                	mov    edx,ecx
c00229c9:	29 f3                	sub    ebx,esi
c00229cb:	19 fa                	sbb    edx,edi
c00229cd:	89 d0                	mov    eax,edx
c00229cf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00229d3:	d3 e0                	shl    eax,cl
c00229d5:	89 e9                	mov    ecx,ebp
c00229d7:	d3 eb                	shr    ebx,cl
c00229d9:	09 d8                	or     eax,ebx
c00229db:	d3 ea                	shr    edx,cl
c00229dd:	83 c4 1c             	add    esp,0x1c
c00229e0:	5b                   	pop    ebx
c00229e1:	5e                   	pop    esi
c00229e2:	5f                   	pop    edi
c00229e3:	5d                   	pop    ebp
c00229e4:	c3                   	ret    
c00229e5:	8d 76 00             	lea    esi,[esi+0x0]
c00229e8:	39 c3                	cmp    ebx,eax
c00229ea:	73 db                	jae    c00229c7 <__umoddi3+0xe7>
c00229ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00229f0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00229f4:	89 d7                	mov    edi,edx
c00229f6:	89 c6                	mov    esi,eax
c00229f8:	eb cd                	jmp    c00229c7 <__umoddi3+0xe7>

Disassembly of section .init:

c00229fa <_init>:
c00229fa:	55                   	push   ebp
c00229fb:	89 e5                	mov    ebp,esp
c00229fd:	e8 16 d7 fd ff       	call   c0000118 <frame_dummy>
c0022a02:	e8 e5 fa ff ff       	call   c00224ec <__do_global_ctors_aux>
c0022a07:	5d                   	pop    ebp
c0022a08:	c3                   	ret    

Disassembly of section .fini:

c0022a09 <_fini>:
c0022a09:	55                   	push   ebp
c0022a0a:	89 e5                	mov    ebp,esp
c0022a0c:	e8 97 d6 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022a11:	5d                   	pop    ebp
c0022a12:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022a14 <Computer::~Computer()>:
c0022a14:	83 ec 0c             	sub    esp,0xc
c0022a17:	ba 98 40 02 c0       	mov    edx,0xc0024098
c0022a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a20:	89 10                	mov    DWORD PTR [eax],edx
c0022a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a26:	83 ec 0c             	sub    esp,0xc
c0022a29:	50                   	push   eax
c0022a2a:	e8 9d b9 fe ff       	call   c000e3cc <Device::~Device()>
c0022a2f:	83 c4 10             	add    esp,0x10
c0022a32:	90                   	nop
c0022a33:	83 c4 0c             	add    esp,0xc
c0022a36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022a38 <Computer::~Computer()>:
c0022a38:	83 ec 0c             	sub    esp,0xc
c0022a3b:	83 ec 0c             	sub    esp,0xc
c0022a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a42:	e8 cd ff ff ff       	call   c0022a14 <Computer::~Computer()>
c0022a47:	83 c4 10             	add    esp,0x10
c0022a4a:	83 ec 08             	sub    esp,0x8
c0022a4d:	68 ec 01 00 00       	push   0x1ec
c0022a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a56:	e8 0f a5 fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0022a5b:	83 c4 10             	add    esp,0x10
c0022a5e:	83 c4 0c             	add    esp,0xc
c0022a61:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022a62 <idleCommon()>:
c0022a62:	83 ec 0c             	sub    esp,0xc
c0022a65:	fa                   	cli    
c0022a66:	ff 05 88 97 02 c0    	inc    DWORD PTR ds:0xc0029788
c0022a6c:	e8 67 5c ff ff       	call   c00186d8 <schedule()>
c0022a71:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0022a76:	48                   	dec    eax
c0022a77:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0022a7c:	75 01                	jne    c0022a7f <idleCommon()+0x1d>
c0022a7e:	fb                   	sti    
c0022a7f:	83 c4 0c             	add    esp,0xc
c0022a82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022a84 <LinkedList<UnixFile>::~LinkedList()>:
c0022a84:	90                   	nop
c0022a85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022a86 <LinkedList<UnixFile>::LinkedList()>:
c0022a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022abf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022ac6:	90                   	nop
c0022ac7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022ac8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022ac8:	83 ec 0c             	sub    esp,0xc
c0022acb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022ad0:	75 10                	jne    c0022ae2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022ad2:	83 ec 0c             	sub    esp,0xc
c0022ad5:	68 68 44 02 c0       	push   0xc0024468
c0022ada:	e8 8e 25 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022adf:	83 c4 10             	add    esp,0x10
c0022ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae8:	85 c0                	test   eax,eax
c0022aea:	74 34                	je     c0022b20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022af3:	85 c0                	test   eax,eax
c0022af5:	74 29                	je     c0022b20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022afb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022afe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b1e:	eb 65                	jmp    c0022b85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b26:	85 c0                	test   eax,eax
c0022b28:	75 4b                	jne    c0022b75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b31:	85 c0                	test   eax,eax
c0022b33:	75 40                	jne    c0022b75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b3d:	89 10                	mov    DWORD PTR [eax],edx
c0022b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b5f:	85 c0                	test   eax,eax
c0022b61:	74 22                	je     c0022b85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b63:	83 ec 0c             	sub    esp,0xc
c0022b66:	68 8a 44 02 c0       	push   0xc002448a
c0022b6b:	e8 fd 24 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022b70:	83 c4 10             	add    esp,0x10
c0022b73:	eb 10                	jmp    c0022b85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b75:	83 ec 0c             	sub    esp,0xc
c0022b78:	68 94 44 02 c0       	push   0xc0024494
c0022b7d:	e8 eb 24 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022b82:	83 c4 10             	add    esp,0x10
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b8c:	8d 50 01             	lea    edx,[eax+0x1]
c0022b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b96:	90                   	nop
c0022b97:	83 c4 0c             	add    esp,0xc
c0022b9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022b9c <LinkedList<UnixFile>::getFirstElement()>:
c0022b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ba2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022ba4 <LinkedList<UnixFile>::removeFirst()>:
c0022ba4:	83 ec 0c             	sub    esp,0xc
c0022ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bad:	85 c0                	test   eax,eax
c0022baf:	75 12                	jne    c0022bc3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022bb1:	83 ec 0c             	sub    esp,0xc
c0022bb4:	68 a0 44 02 c0       	push   0xc00244a0
c0022bb9:	e8 af 24 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022bbe:	83 c4 10             	add    esp,0x10
c0022bc1:	eb 7e                	jmp    c0022c41 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bcd:	85 c0                	test   eax,eax
c0022bcf:	74 10                	je     c0022be1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022bd1:	83 ec 0c             	sub    esp,0xc
c0022bd4:	68 eb 44 02 c0       	push   0xc00244eb
c0022bd9:	e8 8f 24 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022bde:	83 c4 10             	add    esp,0x10
c0022be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022be7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bea:	85 c0                	test   eax,eax
c0022bec:	75 33                	jne    c0022c21 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c0a:	83 f8 01             	cmp    eax,0x1
c0022c0d:	74 21                	je     c0022c30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022c0f:	83 ec 0c             	sub    esp,0xc
c0022c12:	68 c4 44 02 c0       	push   0xc00244c4
c0022c17:	e8 51 24 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022c1c:	83 c4 10             	add    esp,0x10
c0022c1f:	eb 0f                	jmp    c0022c30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c27:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c2e:	89 10                	mov    DWORD PTR [eax],edx
c0022c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c37:	8d 50 ff             	lea    edx,[eax-0x1]
c0022c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c41:	83 c4 0c             	add    esp,0xc
c0022c44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022c46 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c4d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022c4e <DriverlessDevice::~DriverlessDevice()>:
c0022c4e:	ba dc 4c 02 c0       	mov    edx,0xc0024cdc
c0022c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c57:	89 10                	mov    DWORD PTR [eax],edx
c0022c59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c5d:	50                   	push   eax
c0022c5e:	e8 69 b7 fe ff       	call   c000e3cc <Device::~Device()>
c0022c63:	83 c4 04             	add    esp,0x4
c0022c66:	90                   	nop
c0022c67:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022c68 <DriverlessDevice::~DriverlessDevice()>:
c0022c68:	83 ec 0c             	sub    esp,0xc
c0022c6b:	83 ec 0c             	sub    esp,0xc
c0022c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c72:	e8 d7 ff ff ff       	call   c0022c4e <DriverlessDevice::~DriverlessDevice()>
c0022c77:	83 c4 10             	add    esp,0x10
c0022c7a:	83 ec 08             	sub    esp,0x8
c0022c7d:	68 58 01 00 00       	push   0x158
c0022c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c86:	e8 df a2 fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0022c8b:	83 c4 10             	add    esp,0x10
c0022c8e:	83 c4 0c             	add    esp,0xc
c0022c91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022c92 <LinkedList<Device>::addElement(Device*)>:
c0022c92:	83 ec 0c             	sub    esp,0xc
c0022c95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022c9a:	75 10                	jne    c0022cac <LinkedList<Device>::addElement(Device*)+0x1a>
c0022c9c:	83 ec 0c             	sub    esp,0xc
c0022c9f:	68 68 44 02 c0       	push   0xc0024468
c0022ca4:	e8 c4 23 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022ca9:	83 c4 10             	add    esp,0x10
c0022cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cb2:	85 c0                	test   eax,eax
c0022cb4:	74 3a                	je     c0022cf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cbd:	85 c0                	test   eax,eax
c0022cbf:	74 2f                	je     c0022cf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ccc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ce4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022cee:	eb 68                	jmp    c0022d58 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cf6:	85 c0                	test   eax,eax
c0022cf8:	75 4e                	jne    c0022d48 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d01:	85 c0                	test   eax,eax
c0022d03:	75 43                	jne    c0022d48 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d0d:	89 10                	mov    DWORD PTR [eax],edx
c0022d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d21:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d32:	85 c0                	test   eax,eax
c0022d34:	74 22                	je     c0022d58 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d36:	83 ec 0c             	sub    esp,0xc
c0022d39:	68 8a 44 02 c0       	push   0xc002448a
c0022d3e:	e8 2a 23 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022d43:	83 c4 10             	add    esp,0x10
c0022d46:	eb 10                	jmp    c0022d58 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d48:	83 ec 0c             	sub    esp,0xc
c0022d4b:	68 94 44 02 c0       	push   0xc0024494
c0022d50:	e8 18 23 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022d55:	83 c4 10             	add    esp,0x10
c0022d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d5f:	8d 50 01             	lea    edx,[eax+0x1]
c0022d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d69:	90                   	nop
c0022d6a:	83 c4 0c             	add    esp,0xc
c0022d6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022d6e <LinkedList<Device>::LinkedList()>:
c0022d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022da3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022dae:	90                   	nop
c0022daf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022db0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022db6:	85 c0                	test   eax,eax
c0022db8:	75 0e                	jne    c0022dc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dc1:	85 c0                	test   eax,eax
c0022dc3:	75 03                	jne    c0022dc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022dc5:	b0 01                	mov    al,0x1
c0022dc7:	c3                   	ret    
c0022dc8:	b0 00                	mov    al,0x0
c0022dca:	90                   	nop
c0022dcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022dcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022dd4:	83 ec 0c             	sub    esp,0xc
c0022dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ddd:	85 c0                	test   eax,eax
c0022ddf:	75 17                	jne    c0022df8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022de1:	83 ec 0c             	sub    esp,0xc
c0022de4:	68 a0 44 02 c0       	push   0xc00244a0
c0022de9:	e8 7f 22 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022dee:	83 c4 10             	add    esp,0x10
c0022df1:	e9 92 00 00 00       	jmp    c0022e88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022df6:	66 90                	xchg   ax,ax
c0022df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e02:	85 c0                	test   eax,eax
c0022e04:	0f 95 c0             	setne  al
c0022e07:	84 c0                	test   al,al
c0022e09:	74 11                	je     c0022e1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022e0b:	83 ec 0c             	sub    esp,0xc
c0022e0e:	68 eb 44 02 c0       	push   0xc00244eb
c0022e13:	e8 55 22 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022e18:	83 c4 10             	add    esp,0x10
c0022e1b:	90                   	nop
c0022e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e25:	85 c0                	test   eax,eax
c0022e27:	0f 94 c0             	sete   al
c0022e2a:	84 c0                	test   al,al
c0022e2c:	74 36                	je     c0022e64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e4a:	83 f8 01             	cmp    eax,0x1
c0022e4d:	74 25                	je     c0022e74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e4f:	83 ec 0c             	sub    esp,0xc
c0022e52:	68 c4 44 02 c0       	push   0xc00244c4
c0022e57:	e8 11 22 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022e5c:	83 c4 10             	add    esp,0x10
c0022e5f:	eb 13                	jmp    c0022e74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e61:	8d 76 00             	lea    esi,[esi+0x0]
c0022e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e6a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e71:	89 10                	mov    DWORD PTR [eax],edx
c0022e73:	90                   	nop
c0022e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e7b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e85:	8d 76 00             	lea    esi,[esi+0x0]
c0022e88:	83 c4 0c             	add    esp,0xc
c0022e8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022e8c:	83 ec 0c             	sub    esp,0xc
c0022e8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022e94:	75 12                	jne    c0022ea8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022e96:	83 ec 0c             	sub    esp,0xc
c0022e99:	68 68 44 02 c0       	push   0xc0024468
c0022e9e:	e8 ca 21 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022ea3:	83 c4 10             	add    esp,0x10
c0022ea6:	66 90                	xchg   ax,ax
c0022ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eae:	85 c0                	test   eax,eax
c0022eb0:	74 36                	je     c0022ee8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022eb9:	85 c0                	test   eax,eax
c0022ebb:	74 2b                	je     c0022ee8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ec4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ec8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ed3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022edd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022ee4:	eb 6a                	jmp    c0022f50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ee6:	66 90                	xchg   ax,ax
c0022ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eee:	85 c0                	test   eax,eax
c0022ef0:	75 4e                	jne    c0022f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ef9:	85 c0                	test   eax,eax
c0022efb:	75 43                	jne    c0022f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f05:	89 10                	mov    DWORD PTR [eax],edx
c0022f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f19:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f27:	85 c0                	test   eax,eax
c0022f29:	74 25                	je     c0022f50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022f2b:	83 ec 0c             	sub    esp,0xc
c0022f2e:	68 8a 44 02 c0       	push   0xc002448a
c0022f33:	e8 35 21 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022f38:	83 c4 10             	add    esp,0x10
c0022f3b:	eb 13                	jmp    c0022f50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0022f40:	83 ec 0c             	sub    esp,0xc
c0022f43:	68 94 44 02 c0       	push   0xc0024494
c0022f48:	e8 20 21 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022f4d:	83 c4 10             	add    esp,0x10
c0022f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f57:	8d 50 01             	lea    edx,[eax+0x1]
c0022f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f61:	90                   	nop
c0022f62:	83 c4 0c             	add    esp,0xc
c0022f65:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022f68 <ACPI::~ACPI()>:
c0022f68:	83 ec 0c             	sub    esp,0xc
c0022f6b:	ba 04 58 02 c0       	mov    edx,0xc0025804
c0022f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f74:	89 10                	mov    DWORD PTR [eax],edx
c0022f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7a:	83 ec 0c             	sub    esp,0xc
c0022f7d:	50                   	push   eax
c0022f7e:	e8 49 b4 fe ff       	call   c000e3cc <Device::~Device()>
c0022f83:	83 c4 10             	add    esp,0x10
c0022f86:	90                   	nop
c0022f87:	83 c4 0c             	add    esp,0xc
c0022f8a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022f8c <ACPI::~ACPI()>:
c0022f8c:	83 ec 0c             	sub    esp,0xc
c0022f8f:	83 ec 0c             	sub    esp,0xc
c0022f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f96:	e8 cd ff ff ff       	call   c0022f68 <ACPI::~ACPI()>
c0022f9b:	83 c4 10             	add    esp,0x10
c0022f9e:	83 ec 08             	sub    esp,0x8
c0022fa1:	68 64 12 00 00       	push   0x1264
c0022fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022faa:	e8 bb 9f fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0022faf:	83 c4 10             	add    esp,0x10
c0022fb2:	83 c4 0c             	add    esp,0xc
c0022fb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022fb8 <LinkedList<Device>::~LinkedList()>:
c0022fb8:	90                   	nop
c0022fb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022fbc <LinkedList<Device>::isEmpty()>:
c0022fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fc2:	85 c0                	test   eax,eax
c0022fc4:	75 0e                	jne    c0022fd4 <LinkedList<Device>::isEmpty()+0x18>
c0022fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022fcd:	85 c0                	test   eax,eax
c0022fcf:	75 03                	jne    c0022fd4 <LinkedList<Device>::isEmpty()+0x18>
c0022fd1:	b0 01                	mov    al,0x1
c0022fd3:	c3                   	ret    
c0022fd4:	b0 00                	mov    al,0x0
c0022fd6:	90                   	nop
c0022fd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022fd8 <LinkedList<Device>::getFirstElement()>:
c0022fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022fe0 <LinkedList<Device>::removeFirst()>:
c0022fe0:	83 ec 0c             	sub    esp,0xc
c0022fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fe9:	85 c0                	test   eax,eax
c0022feb:	75 17                	jne    c0023004 <LinkedList<Device>::removeFirst()+0x24>
c0022fed:	83 ec 0c             	sub    esp,0xc
c0022ff0:	68 a0 44 02 c0       	push   0xc00244a0
c0022ff5:	e8 73 20 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0022ffa:	83 c4 10             	add    esp,0x10
c0022ffd:	e9 92 00 00 00       	jmp    c0023094 <LinkedList<Device>::removeFirst()+0xb4>
c0023002:	66 90                	xchg   ax,ax
c0023004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002300b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023011:	85 c0                	test   eax,eax
c0023013:	74 13                	je     c0023028 <LinkedList<Device>::removeFirst()+0x48>
c0023015:	83 ec 0c             	sub    esp,0xc
c0023018:	68 eb 44 02 c0       	push   0xc00244eb
c002301d:	e8 4b 20 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0023022:	83 c4 10             	add    esp,0x10
c0023025:	8d 76 00             	lea    esi,[esi+0x0]
c0023028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302c:	8b 00                	mov    eax,DWORD PTR [eax]
c002302e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023034:	85 c0                	test   eax,eax
c0023036:	75 34                	jne    c002306c <LinkedList<Device>::removeFirst()+0x8c>
c0023038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023046:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002304d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023051:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023054:	83 f8 01             	cmp    eax,0x1
c0023057:	74 27                	je     c0023080 <LinkedList<Device>::removeFirst()+0xa0>
c0023059:	83 ec 0c             	sub    esp,0xc
c002305c:	68 c4 44 02 c0       	push   0xc00244c4
c0023061:	e8 07 20 ff ff       	call   c001506d <Krnl::panic(char const*)>
c0023066:	83 c4 10             	add    esp,0x10
c0023069:	eb 15                	jmp    c0023080 <LinkedList<Device>::removeFirst()+0xa0>
c002306b:	90                   	nop
c002306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023070:	8b 00                	mov    eax,DWORD PTR [eax]
c0023072:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0023078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307c:	89 10                	mov    DWORD PTR [eax],edx
c002307e:	66 90                	xchg   ax,ax
c0023080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023084:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023087:	8d 50 ff             	lea    edx,[eax-0x1]
c002308a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002308e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023091:	8d 76 00             	lea    esi,[esi+0x0]
c0023094:	83 c4 0c             	add    esp,0xc
c0023097:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023098 <CPU::~CPU()>:
c0023098:	83 ec 0c             	sub    esp,0xc
c002309b:	ba 94 5d 02 c0       	mov    edx,0xc0025d94
c00230a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a4:	89 10                	mov    DWORD PTR [eax],edx
c00230a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230aa:	83 ec 0c             	sub    esp,0xc
c00230ad:	50                   	push   eax
c00230ae:	e8 19 b3 fe ff       	call   c000e3cc <Device::~Device()>
c00230b3:	83 c4 10             	add    esp,0x10
c00230b6:	90                   	nop
c00230b7:	83 c4 0c             	add    esp,0xc
c00230ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00230bc <CPU::~CPU()>:
c00230bc:	83 ec 0c             	sub    esp,0xc
c00230bf:	83 ec 0c             	sub    esp,0xc
c00230c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230c6:	e8 cd ff ff ff       	call   c0023098 <CPU::~CPU()>
c00230cb:	83 c4 10             	add    esp,0x10
c00230ce:	83 ec 08             	sub    esp,0x8
c00230d1:	68 98 11 00 00       	push   0x1198
c00230d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230da:	e8 8b 9e fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00230df:	83 c4 10             	add    esp,0x10
c00230e2:	83 c4 0c             	add    esp,0xc
c00230e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00230e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00230e8:	90                   	nop
c00230e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00230ec <ThreadControlBlock::ThreadControlBlock()>:
c00230ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00230f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023106:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002310d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023111:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002311c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023127:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002312b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002312f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023133:	90                   	nop
c0023134:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002313c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023146:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002314d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023151:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002315c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023166:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002316d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023171:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023178:	90                   	nop
c0023179:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002317c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002317c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023180:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023183:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023184 <Vm::_FPUState::_FPUState()>:
c0023184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023188:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002318f:	90                   	nop
c0023190:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023192 <PCI::~PCI()>:
c0023192:	83 ec 0c             	sub    esp,0xc
c0023195:	ba 30 6b 02 c0       	mov    edx,0xc0026b30
c002319a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002319e:	89 10                	mov    DWORD PTR [eax],edx
c00231a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a4:	83 ec 0c             	sub    esp,0xc
c00231a7:	50                   	push   eax
c00231a8:	e8 af ac fe ff       	call   c000de5c <Bus::~Bus()>
c00231ad:	83 c4 10             	add    esp,0x10
c00231b0:	90                   	nop
c00231b1:	83 c4 0c             	add    esp,0xc
c00231b4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00231b6 <PCI::~PCI()>:
c00231b6:	83 ec 0c             	sub    esp,0xc
c00231b9:	83 ec 0c             	sub    esp,0xc
c00231bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c0:	e8 cd ff ff ff       	call   c0023192 <PCI::~PCI()>
c00231c5:	83 c4 10             	add    esp,0x10
c00231c8:	83 ec 08             	sub    esp,0x8
c00231cb:	68 5c 01 00 00       	push   0x15c
c00231d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231d4:	e8 91 9d fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00231d9:	83 c4 10             	add    esp,0x10
c00231dc:	83 c4 0c             	add    esp,0xc
c00231df:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00231e0 <IDE::~IDE()>:
c00231e0:	83 ec 0c             	sub    esp,0xc
c00231e3:	ba 00 6c 02 c0       	mov    edx,0xc0026c00
c00231e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ec:	89 10                	mov    DWORD PTR [eax],edx
c00231ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f2:	83 ec 0c             	sub    esp,0xc
c00231f5:	50                   	push   eax
c00231f6:	e8 e9 b6 fe ff       	call   c000e8e4 <HardDiskController::~HardDiskController()>
c00231fb:	83 c4 10             	add    esp,0x10
c00231fe:	90                   	nop
c00231ff:	83 c4 0c             	add    esp,0xc
c0023202:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023204 <IDE::~IDE()>:
c0023204:	83 ec 0c             	sub    esp,0xc
c0023207:	83 ec 0c             	sub    esp,0xc
c002320a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002320e:	e8 cd ff ff ff       	call   c00231e0 <IDE::~IDE()>
c0023213:	83 c4 10             	add    esp,0x10
c0023216:	83 ec 08             	sub    esp,0x8
c0023219:	68 70 02 00 00       	push   0x270
c002321e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023222:	e8 43 9d fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023227:	83 c4 10             	add    esp,0x10
c002322a:	83 c4 0c             	add    esp,0xc
c002322d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002322e <SATABus::~SATABus()>:
c002322e:	83 ec 0c             	sub    esp,0xc
c0023231:	ba cc 6c 02 c0       	mov    edx,0xc0026ccc
c0023236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002323a:	89 10                	mov    DWORD PTR [eax],edx
c002323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023240:	83 ec 0c             	sub    esp,0xc
c0023243:	50                   	push   eax
c0023244:	e8 9b b6 fe ff       	call   c000e8e4 <HardDiskController::~HardDiskController()>
c0023249:	83 c4 10             	add    esp,0x10
c002324c:	90                   	nop
c002324d:	83 c4 0c             	add    esp,0xc
c0023250:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023252 <SATABus::~SATABus()>:
c0023252:	83 ec 0c             	sub    esp,0xc
c0023255:	83 ec 0c             	sub    esp,0xc
c0023258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002325c:	e8 cd ff ff ff       	call   c002322e <SATABus::~SATABus()>
c0023261:	83 c4 10             	add    esp,0x10
c0023264:	83 ec 08             	sub    esp,0x8
c0023267:	68 64 01 00 00       	push   0x164
c002326c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023270:	e8 f5 9c fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023275:	83 c4 10             	add    esp,0x10
c0023278:	83 c4 0c             	add    esp,0xc
c002327b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002327c <ATA::~ATA()>:
c002327c:	83 ec 0c             	sub    esp,0xc
c002327f:	ba 44 6d 02 c0       	mov    edx,0xc0026d44
c0023284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023288:	89 10                	mov    DWORD PTR [eax],edx
c002328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328e:	83 ec 0c             	sub    esp,0xc
c0023291:	50                   	push   eax
c0023292:	e8 2f b7 fe ff       	call   c000e9c6 <PhysicalDisk::~PhysicalDisk()>
c0023297:	83 c4 10             	add    esp,0x10
c002329a:	90                   	nop
c002329b:	83 c4 0c             	add    esp,0xc
c002329e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00232a0 <ATA::~ATA()>:
c00232a0:	83 ec 0c             	sub    esp,0xc
c00232a3:	83 ec 0c             	sub    esp,0xc
c00232a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232aa:	e8 cd ff ff ff       	call   c002327c <ATA::~ATA()>
c00232af:	83 c4 10             	add    esp,0x10
c00232b2:	83 ec 08             	sub    esp,0x8
c00232b5:	68 7c 01 00 00       	push   0x17c
c00232ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232be:	e8 a7 9c fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00232c3:	83 c4 10             	add    esp,0x10
c00232c6:	83 c4 0c             	add    esp,0xc
c00232c9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00232ca <ATAPI::~ATAPI()>:
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	ba bc 6d 02 c0       	mov    edx,0xc0026dbc
c00232d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d6:	89 10                	mov    DWORD PTR [eax],edx
c00232d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232dc:	83 ec 0c             	sub    esp,0xc
c00232df:	50                   	push   eax
c00232e0:	e8 e1 b6 fe ff       	call   c000e9c6 <PhysicalDisk::~PhysicalDisk()>
c00232e5:	83 c4 10             	add    esp,0x10
c00232e8:	90                   	nop
c00232e9:	83 c4 0c             	add    esp,0xc
c00232ec:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00232ee <ATAPI::~ATAPI()>:
c00232ee:	83 ec 0c             	sub    esp,0xc
c00232f1:	83 ec 0c             	sub    esp,0xc
c00232f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232f8:	e8 cd ff ff ff       	call   c00232ca <ATAPI::~ATAPI()>
c00232fd:	83 c4 10             	add    esp,0x10
c0023300:	83 ec 08             	sub    esp,0x8
c0023303:	68 84 01 00 00       	push   0x184
c0023308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002330c:	e8 59 9c fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023311:	83 c4 10             	add    esp,0x10
c0023314:	83 c4 0c             	add    esp,0xc
c0023317:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023318 <SATA::~SATA()>:
c0023318:	83 ec 0c             	sub    esp,0xc
c002331b:	ba f8 6f 02 c0       	mov    edx,0xc0026ff8
c0023320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023324:	89 10                	mov    DWORD PTR [eax],edx
c0023326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332a:	83 ec 0c             	sub    esp,0xc
c002332d:	50                   	push   eax
c002332e:	e8 93 b6 fe ff       	call   c000e9c6 <PhysicalDisk::~PhysicalDisk()>
c0023333:	83 c4 10             	add    esp,0x10
c0023336:	90                   	nop
c0023337:	83 c4 0c             	add    esp,0xc
c002333a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002333c <SATA::~SATA()>:
c002333c:	83 ec 0c             	sub    esp,0xc
c002333f:	83 ec 0c             	sub    esp,0xc
c0023342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023346:	e8 cd ff ff ff       	call   c0023318 <SATA::~SATA()>
c002334b:	83 c4 10             	add    esp,0x10
c002334e:	83 ec 08             	sub    esp,0x8
c0023351:	68 7c 01 00 00       	push   0x17c
c0023356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002335a:	e8 0b 9c fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c002335f:	83 c4 10             	add    esp,0x10
c0023362:	83 c4 0c             	add    esp,0xc
c0023365:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023366 <SATAPI::~SATAPI()>:
c0023366:	83 ec 0c             	sub    esp,0xc
c0023369:	ba 64 71 02 c0       	mov    edx,0xc0027164
c002336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023372:	89 10                	mov    DWORD PTR [eax],edx
c0023374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023378:	83 ec 0c             	sub    esp,0xc
c002337b:	50                   	push   eax
c002337c:	e8 45 b6 fe ff       	call   c000e9c6 <PhysicalDisk::~PhysicalDisk()>
c0023381:	83 c4 10             	add    esp,0x10
c0023384:	90                   	nop
c0023385:	83 c4 0c             	add    esp,0xc
c0023388:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002338a <SATAPI::~SATAPI()>:
c002338a:	83 ec 0c             	sub    esp,0xc
c002338d:	83 ec 0c             	sub    esp,0xc
c0023390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023394:	e8 cd ff ff ff       	call   c0023366 <SATAPI::~SATAPI()>
c0023399:	83 c4 10             	add    esp,0x10
c002339c:	83 ec 08             	sub    esp,0x8
c002339f:	68 84 01 00 00       	push   0x184
c00233a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233a8:	e8 bd 9b fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00233ad:	83 c4 10             	add    esp,0x10
c00233b0:	83 c4 0c             	add    esp,0xc
c00233b3:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00233b4 <AVX::~AVX()>:
c00233b4:	83 ec 0c             	sub    esp,0xc
c00233b7:	ba a4 71 02 c0       	mov    edx,0xc00271a4
c00233bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c0:	89 10                	mov    DWORD PTR [eax],edx
c00233c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c6:	83 ec 0c             	sub    esp,0xc
c00233c9:	50                   	push   eax
c00233ca:	e8 7d b6 fe ff       	call   c000ea4c <FPU::~FPU()>
c00233cf:	83 c4 10             	add    esp,0x10
c00233d2:	90                   	nop
c00233d3:	83 c4 0c             	add    esp,0xc
c00233d6:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00233d8 <AVX::~AVX()>:
c00233d8:	83 ec 0c             	sub    esp,0xc
c00233db:	83 ec 0c             	sub    esp,0xc
c00233de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233e2:	e8 cd ff ff ff       	call   c00233b4 <AVX::~AVX()>
c00233e7:	83 c4 10             	add    esp,0x10
c00233ea:	83 ec 08             	sub    esp,0x8
c00233ed:	68 58 01 00 00       	push   0x158
c00233f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233f6:	e8 6f 9b fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00233fb:	83 c4 10             	add    esp,0x10
c00233fe:	83 c4 0c             	add    esp,0xc
c0023401:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023404 <MMX::~MMX()>:
c0023404:	83 ec 0c             	sub    esp,0xc
c0023407:	ba e4 71 02 c0       	mov    edx,0xc00271e4
c002340c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023410:	89 10                	mov    DWORD PTR [eax],edx
c0023412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023416:	83 ec 0c             	sub    esp,0xc
c0023419:	50                   	push   eax
c002341a:	e8 2d b6 fe ff       	call   c000ea4c <FPU::~FPU()>
c002341f:	83 c4 10             	add    esp,0x10
c0023422:	90                   	nop
c0023423:	83 c4 0c             	add    esp,0xc
c0023426:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023428 <MMX::~MMX()>:
c0023428:	83 ec 0c             	sub    esp,0xc
c002342b:	83 ec 0c             	sub    esp,0xc
c002342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023432:	e8 cd ff ff ff       	call   c0023404 <MMX::~MMX()>
c0023437:	83 c4 10             	add    esp,0x10
c002343a:	83 ec 08             	sub    esp,0x8
c002343d:	68 58 01 00 00       	push   0x158
c0023442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023446:	e8 1f 9b fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c002344b:	83 c4 10             	add    esp,0x10
c002344e:	83 c4 0c             	add    esp,0xc
c0023451:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023454 <SSE::~SSE()>:
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	ba 24 72 02 c0       	mov    edx,0xc0027224
c002345c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023460:	89 10                	mov    DWORD PTR [eax],edx
c0023462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	50                   	push   eax
c002346a:	e8 dd b5 fe ff       	call   c000ea4c <FPU::~FPU()>
c002346f:	83 c4 10             	add    esp,0x10
c0023472:	90                   	nop
c0023473:	83 c4 0c             	add    esp,0xc
c0023476:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023478 <SSE::~SSE()>:
c0023478:	83 ec 0c             	sub    esp,0xc
c002347b:	83 ec 0c             	sub    esp,0xc
c002347e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023482:	e8 cd ff ff ff       	call   c0023454 <SSE::~SSE()>
c0023487:	83 c4 10             	add    esp,0x10
c002348a:	83 ec 08             	sub    esp,0x8
c002348d:	68 58 01 00 00       	push   0x158
c0023492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023496:	e8 cf 9a fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c002349b:	83 c4 10             	add    esp,0x10
c002349e:	83 c4 0c             	add    esp,0xc
c00234a1:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00234a2 <x87::~x87()>:
c00234a2:	83 ec 0c             	sub    esp,0xc
c00234a5:	ba 64 72 02 c0       	mov    edx,0xc0027264
c00234aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ae:	89 10                	mov    DWORD PTR [eax],edx
c00234b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b4:	83 ec 0c             	sub    esp,0xc
c00234b7:	50                   	push   eax
c00234b8:	e8 8f b5 fe ff       	call   c000ea4c <FPU::~FPU()>
c00234bd:	83 c4 10             	add    esp,0x10
c00234c0:	90                   	nop
c00234c1:	83 c4 0c             	add    esp,0xc
c00234c4:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00234c6 <x87::~x87()>:
c00234c6:	83 ec 0c             	sub    esp,0xc
c00234c9:	83 ec 0c             	sub    esp,0xc
c00234cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234d0:	e8 cd ff ff ff       	call   c00234a2 <x87::~x87()>
c00234d5:	83 c4 10             	add    esp,0x10
c00234d8:	83 ec 08             	sub    esp,0x8
c00234db:	68 58 01 00 00       	push   0x158
c00234e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234e4:	e8 81 9a fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00234e9:	83 c4 10             	add    esp,0x10
c00234ec:	83 c4 0c             	add    esp,0xc
c00234ef:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00234f0 <IOAPIC::~IOAPIC()>:
c00234f0:	83 ec 0c             	sub    esp,0xc
c00234f3:	ba bc 73 02 c0       	mov    edx,0xc00273bc
c00234f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234fc:	89 10                	mov    DWORD PTR [eax],edx
c00234fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023502:	83 ec 0c             	sub    esp,0xc
c0023505:	50                   	push   eax
c0023506:	e8 c1 ae fe ff       	call   c000e3cc <Device::~Device()>
c002350b:	83 c4 10             	add    esp,0x10
c002350e:	90                   	nop
c002350f:	83 c4 0c             	add    esp,0xc
c0023512:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023514 <IOAPIC::~IOAPIC()>:
c0023514:	83 ec 0c             	sub    esp,0xc
c0023517:	83 ec 0c             	sub    esp,0xc
c002351a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002351e:	e8 cd ff ff ff       	call   c00234f0 <IOAPIC::~IOAPIC()>
c0023523:	83 c4 10             	add    esp,0x10
c0023526:	83 ec 08             	sub    esp,0x8
c0023529:	68 68 01 00 00       	push   0x168
c002352e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023532:	e8 33 9a fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023537:	83 c4 10             	add    esp,0x10
c002353a:	83 c4 0c             	add    esp,0xc
c002353d:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c002353e <APIC::~APIC()>:
c002353e:	83 ec 0c             	sub    esp,0xc
c0023541:	ba 74 73 02 c0       	mov    edx,0xc0027374
c0023546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354a:	89 10                	mov    DWORD PTR [eax],edx
c002354c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023550:	83 ec 0c             	sub    esp,0xc
c0023553:	50                   	push   eax
c0023554:	e8 df b9 fe ff       	call   c000ef38 <InterruptController::~InterruptController()>
c0023559:	83 c4 10             	add    esp,0x10
c002355c:	90                   	nop
c002355d:	83 c4 0c             	add    esp,0xc
c0023560:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023562 <APIC::~APIC()>:
c0023562:	83 ec 0c             	sub    esp,0xc
c0023565:	83 ec 0c             	sub    esp,0xc
c0023568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002356c:	e8 cd ff ff ff       	call   c002353e <APIC::~APIC()>
c0023571:	83 c4 10             	add    esp,0x10
c0023574:	83 ec 08             	sub    esp,0x8
c0023577:	68 58 21 00 00       	push   0x2158
c002357c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023580:	e8 e5 99 fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023585:	83 c4 10             	add    esp,0x10
c0023588:	83 c4 0c             	add    esp,0xc
c002358b:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002358c <PIC::~PIC()>:
c002358c:	83 ec 0c             	sub    esp,0xc
c002358f:	ba 0c 74 02 c0       	mov    edx,0xc002740c
c0023594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023598:	89 10                	mov    DWORD PTR [eax],edx
c002359a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359e:	83 ec 0c             	sub    esp,0xc
c00235a1:	50                   	push   eax
c00235a2:	e8 91 b9 fe ff       	call   c000ef38 <InterruptController::~InterruptController()>
c00235a7:	83 c4 10             	add    esp,0x10
c00235aa:	90                   	nop
c00235ab:	83 c4 0c             	add    esp,0xc
c00235ae:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00235b0 <PIC::~PIC()>:
c00235b0:	83 ec 0c             	sub    esp,0xc
c00235b3:	83 ec 0c             	sub    esp,0xc
c00235b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ba:	e8 cd ff ff ff       	call   c002358c <PIC::~PIC()>
c00235bf:	83 c4 10             	add    esp,0x10
c00235c2:	83 ec 08             	sub    esp,0x8
c00235c5:	68 58 21 00 00       	push   0x2158
c00235ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ce:	e8 97 99 fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c00235d3:	83 c4 10             	add    esp,0x10
c00235d6:	83 c4 0c             	add    esp,0xc
c00235d9:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00235dc <APICTimer::~APICTimer()>:
c00235dc:	83 ec 0c             	sub    esp,0xc
c00235df:	ba 60 74 02 c0       	mov    edx,0xc0027460
c00235e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235e8:	89 10                	mov    DWORD PTR [eax],edx
c00235ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ee:	83 ec 0c             	sub    esp,0xc
c00235f1:	50                   	push   eax
c00235f2:	e8 71 d8 fe ff       	call   c0010e68 <Timer::~Timer()>
c00235f7:	83 c4 10             	add    esp,0x10
c00235fa:	90                   	nop
c00235fb:	83 c4 0c             	add    esp,0xc
c00235fe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023600 <APICTimer::~APICTimer()>:
c0023600:	83 ec 0c             	sub    esp,0xc
c0023603:	83 ec 0c             	sub    esp,0xc
c0023606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002360a:	e8 cd ff ff ff       	call   c00235dc <APICTimer::~APICTimer()>
c002360f:	83 c4 10             	add    esp,0x10
c0023612:	83 ec 08             	sub    esp,0x8
c0023615:	68 60 01 00 00       	push   0x160
c002361a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002361e:	e8 47 99 fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023623:	83 c4 10             	add    esp,0x10
c0023626:	83 c4 0c             	add    esp,0xc
c0023629:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002362c <PIT::~PIT()>:
c002362c:	83 ec 0c             	sub    esp,0xc
c002362f:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0023634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023638:	89 10                	mov    DWORD PTR [eax],edx
c002363a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002363e:	83 ec 0c             	sub    esp,0xc
c0023641:	50                   	push   eax
c0023642:	e8 21 d8 fe ff       	call   c0010e68 <Timer::~Timer()>
c0023647:	83 c4 10             	add    esp,0x10
c002364a:	90                   	nop
c002364b:	83 c4 0c             	add    esp,0xc
c002364e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023650 <PIT::~PIT()>:
c0023650:	83 ec 0c             	sub    esp,0xc
c0023653:	83 ec 0c             	sub    esp,0xc
c0023656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002365a:	e8 cd ff ff ff       	call   c002362c <PIT::~PIT()>
c002365f:	83 c4 10             	add    esp,0x10
c0023662:	83 ec 08             	sub    esp,0x8
c0023665:	68 5c 01 00 00       	push   0x15c
c002366a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002366e:	e8 f7 98 fe ff       	call   c000cf6a <operator delete(void*, unsigned long)>
c0023673:	83 c4 10             	add    esp,0x10
c0023676:	83 c4 0c             	add    esp,0xc
c0023679:	c3                   	ret    
