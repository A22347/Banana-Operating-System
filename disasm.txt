
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 34 fb 01 c0       	mov    eax,0xc001fb34
c0000025:	3d 34 fb 01 c0       	cmp    eax,0xc001fb34
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 34 fb 01 c0       	push   0xc001fb34
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 34 fb 01 c0       	mov    eax,0xc001fb34
c0000051:	2d 34 fb 01 c0       	sub    eax,0xc001fb34
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 34 fb 01 c0       	push   0xc001fb34
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c8 cd 01 c0       	mov    ebx,0xc001cdc8
c0000097:	81 eb c4 cd 01 c0    	sub    ebx,0xc001cdc4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c4 cd 01 c0       	mov    esi,0xc001cdc4
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 34 fb 01 c0       	push   0xc001fb34
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 34 fb 01 c0       	push   0xc001fb34
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 60 2d 01 00       	call   c0013010 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 2a a0 00 00       	call   c000a2f2 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 3e 2d 01 00       	call   c0013010 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 47 32 01 00       	call   c0013538 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 96 38 01 00       	call   c0013b90 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 1c fe 00 00       	jmp    c001019e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe3220],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3220],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe3220],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3220],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3220],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe311c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 36 52 01 00       	jmp    c0016f20 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 64 52 01 00       	jmp    c0016f64 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 89 52 01 00       	jmp    c0016fa8 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2fc0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2fc0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 38 f0 01 c0       	mov    edx,0xc001f038
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc ce 01 c0       	mov    edx,0xc001cefc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 cf 01 c0       	mov    eax,0xc001cf02
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3040]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b cf 01 c0       	mov    eax,0xc001cf0b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2fc0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 cf 01 c0       	mov    eax,0xc001cf90
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 cf 01 c0       	mov    ebx,0xc001cf80
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 cf 01 c0       	mov    edx,0xc001cf60
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 cf 01 c0       	mov    edx,0xc001cf70
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 cf 01 c0       	mov    edx,0xc001cf12
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e cf 01 c0       	mov    edx,0xc001cf1e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 cf 01 c0       	mov    edx,0xc001cf32
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d360
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d360
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d1 01 c0       	mov    eax,0xc001d160
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d0 01 c0       	mov    eax,0xc001d0a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2fa0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 7d 18 01 00       	call   c00177fc <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 d4 01 c0       	push   0xc001d460
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 d4 01 c0       	push   0xc001d460
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 d4 01 c0       	push   0xc001d463
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a d4 01 c0       	push   0xc001d46a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 b6 50 00 00       	call   c000ba8e <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 d4 01 c0       	push   0xc001d471
c0006a09:	e8 2d 91 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 8a d4 01 c0       	push   0xc001d48a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 2a c9 00 00       	call   c0013360 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 3d cb 00 00       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 dc 3f 01 c0       	push   0xc0013fdc
c0006a5a:	52                   	push   edx
c0006a5b:	e8 28 cb 00 00       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 88 d5 01 c0       	push   0xc001d588
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 c2 90 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006a79:	e8 3d d9 00 00       	call   c00143bb <Vm::initialise8086()>
c0006a7e:	e8 4f 3e 00 00       	call   c000a8d2 <Fs::initVFS()>
c0006a83:	c7 04 24 97 d4 01 c0 	mov    DWORD PTR [esp],0xc001d497
c0006a8a:	e8 ac 90 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 d5 01 c0       	push   0xc001d588
c0006aae:	e8 88 90 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006ab3:	e8 5e 95 00 00       	call   c0010016 <Krnl::loadSystemEnv()>
c0006ab8:	e8 bb 97 00 00       	call   c0010278 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 d4 01 c0       	push   0xc001d4b1
c0006ac7:	68 ba d4 01 c0       	push   0xc001d4ba
c0006acc:	e8 25 ae 00 00       	call   c00118f6 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 07 49 00 00       	call   c000b3e0 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ac
c0006ae0:	e8 56 90 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 95 4f 00 00       	call   c000ba8c <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4c2
c0006afe:	e8 38 90 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 d4 01 c0       	push   0xc001d4d3
c0006b12:	e8 66 c2 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 8e c4 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 77 ce 00 00       	call   c00139a4 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef d4 01 c0       	push   0xc001d4ef
c0006b41:	50                   	push   eax
c0006b42:	e8 c1 4f 00 00       	call   c000bb08 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 95 51 01 00       	call   c001bdc6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 fc 83 00 00       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 d5 83 00 00       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 b3 83 00 00       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 91 83 00 00       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 9f 82 00 00       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 7a 82 00 00       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ff 4f 01 00       	call   c001bd80 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 fc 4c 01 00       	call   c001baa0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 96 82 00 00       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 d4 01 c0       	push   0xc001d4f8
c0006e14:	e8 9a 93 00 00       	call   c00101b3 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe d4 01 c0       	push   0xc001d4fe
c0006e4c:	e8 62 93 00 00       	call   c00101b3 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 47 7c 00 00       	jmp    c000eae0 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 04 d5 01 c0       	push   0xc001d504
c0006eed:	0f 94 05 a0 f7 01 c0 	sete   BYTE PTR ds:0xc001f7a0
c0006ef4:	e8 42 8c 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 69 77 00 00       	call   c000e678 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 52 4a 00 00       	call   c000b970 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c d5 01 c0 	mov    DWORD PTR [esp],0xc001d51c
c0006f37:	e8 ff 8b 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 ce 81 00 00       	call   c000f120 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 0f 4a 00 00       	call   c000b970 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc d5 01 c0       	push   0xc001d5cc
c0006f7e:	e8 b8 8b 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006f83:	e8 6a e5 00 00       	call   c00154f2 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 d5 01 c0 	mov    DWORD PTR [esp],0xc001d536
c0006f8f:	e8 a7 8b 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 00 c7 00 00       	call   c00136a0 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 d5 01 c0       	push   0xc001d551
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 3f 35 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 d5 01 c0       	push   0xc001d562
c000700e:	e8 a0 91 00 00       	call   c00101b3 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f d5 01 c0       	push   0xc001d56f
c0007023:	e8 8b 91 00 00       	call   c00101b3 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d579
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 74 91 00 00       	jmp    c00101b3 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 a7 df 00 00       	call   c00151cc <HalSystemIdle()>
c0007225:	e8 58 51 01 00       	call   c001c382 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 30 bb 01 c0       	push   0xc001bb30
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 40 bb 01 c0       	push   0xc001bb40
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 4a bb 01 c0       	push   0xc001bb4a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 54 bb 01 c0       	push   0xc001bb54
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 5e bb 01 c0       	push   0xc001bb5e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 68 bb 01 c0       	push   0xc001bb68
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 72 bb 01 c0       	push   0xc001bb72
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 7c bb 01 c0       	push   0xc001bb7c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 86 bb 01 c0       	push   0xc001bb86
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 8e bb 01 c0       	push   0xc001bb8e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 98 bb 01 c0       	push   0xc001bb98
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 a0 bb 01 c0       	push   0xc001bba0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 a8 bb 01 c0       	push   0xc001bba8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 b0 bb 01 c0       	push   0xc001bbb0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 b8 bb 01 c0       	push   0xc001bbb8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 c0 bb 01 c0       	push   0xc001bbc0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ca bb 01 c0       	push   0xc001bbca
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 d4 bb 01 c0       	push   0xc001bbd4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 de bb 01 c0       	push   0xc001bbde
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 78 bc 01 c0       	push   0xc001bc78
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 7f bc 01 c0       	push   0xc001bc7f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 6a bc 01 c0       	push   0xc001bc6a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 71 bc 01 c0       	push   0xc001bc71
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 e8 bb 01 c0       	push   0xc001bbe8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 f2 bb 01 c0       	push   0xc001bbf2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 fc bb 01 c0       	push   0xc001bbfc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 06 bc 01 c0       	push   0xc001bc06
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 10 bc 01 c0       	push   0xc001bc10
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 1a bc 01 c0       	push   0xc001bc1a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 24 bc 01 c0       	push   0xc001bc24
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 2e bc 01 c0       	push   0xc001bc2e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 38 bc 01 c0       	push   0xc001bc38
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 42 bc 01 c0       	push   0xc001bc42
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 4c bc 01 c0       	push   0xc001bc4c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 56 bc 01 c0       	push   0xc001bc56
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 60 bc 01 c0       	push   0xc001bc60
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 11 bd 01 c0       	push   0xc001bd11
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 1b bd 01 c0       	push   0xc001bd1b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 25 bd 01 c0       	push   0xc001bd25
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 2f bd 01 c0       	push   0xc001bd2f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 39 bd 01 c0       	push   0xc001bd39
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 43 bd 01 c0       	push   0xc001bd43
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 4d bd 01 c0       	push   0xc001bd4d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 57 bd 01 c0       	push   0xc001bd57
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 1f 24 00 00       	call   c0009a38 <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 86 bb 01 c0       	push   0xc001bb86
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 88 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f788
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 88 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f788
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 5a 22 00 00       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 88 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f788,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 88 f7 01 c0       	mov    eax,ds:0xc001f788
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c d6 01 c0       	push   0xc001d61c
c000770e:	e8 1d 2e 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c d6 01 c0       	push   0xc001d64c
c000772d:	e8 81 8a 00 00       	call   c00101b3 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 d6 01 c0       	push   0xc001d651
c0007743:	e8 6b 8a 00 00       	call   c00101b3 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 b2 22 00 00       	call   c0009a38 <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 58 d6 01 c0       	push   0xc001d658
c0007862:	e8 c9 2c 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 61 82 00 00       	call   c000facd <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 7c 4a 01 00       	call   c001c31a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 1f 00 00       	call   c00097d0 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 70 d6 01 c0       	push   0xc001d670
c000792c:	e8 82 88 00 00       	call   c00101b3 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 70 d6 01 c0       	push   0xc001d670
c0007993:	e8 1b 88 00 00       	call   c00101b3 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 8c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f78c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 8c f7 01 c0    	add    eax,DWORD PTR ds:0xc001f78c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 8c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f78c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 15 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d715
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 30 87 00 00       	jmp    c00101b3 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 22 27 00 00       	call   c000a212 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 98 d6 01 c0       	push   0xc001d698
c0007aff:	e8 af 86 00 00       	call   c00101b3 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 2b d7 01 c0       	push   0xc001d72b
c0007c18:	e8 13 29 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 c8 d6 01 c0       	push   0xc001d6c8
c0007ca4:	e8 87 28 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ec d6 01 c0       	push   0xc001d6ec
c0007d40:	e8 eb 27 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 51 d7 01 c0       	push   0xc001d751
c0007d76:	e8 b5 27 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 43 d7 01 c0       	push   0xc001d743
c0007de5:	e8 c9 83 00 00       	call   c00101b3 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba b0 d7 01 c0       	mov    edx,0xc001d7b0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 40 25 00 00       	call   c000a43a <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 6d d7 01 c0       	push   0xc001d76d
c0007fa7:	e8 07 82 00 00       	call   c00101b3 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 b3 b7 00 00       	call   c00137a8 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 73 41 01 00       	call   c001c200 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 8a d7 01 c0       	push   0xc001d78a
c00080a2:	e8 0c 81 00 00       	call   c00101b3 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba b0 d7 01 c0       	mov    edx,0xc001d7b0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 44 d8 01 c0       	mov    edx,0xc001d844
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 c9 22 00 00       	call   c000a43a <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 04 46 00 00       	call   c000c790 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 d2 e1 00 00       	call   c0016384 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d c0 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0840]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d c0 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0840]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 78 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0988]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 50 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09b0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 f5 de 00 00       	call   c0016210 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 50 df 00 00       	jmp    c0016318 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 c4 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7c4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 9f 7d 00 00       	jmp    c00101b3 <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 18 2e 00 00       	jmp    c000b387 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be d2 d7 01 c0       	mov    esi,0xc001d7d2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 62 da 00 00       	call   c0016318 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 44 d8 01 c0       	mov    edx,0xc001d844
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 84 0f 00 00       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 e3 d7 01 c0       	push   0xc001d7e3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 e9 d7 01 c0       	push   0xc001d7e9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 ef d7 01 c0       	push   0xc001d7ef
c0008b78:	e8 36 76 00 00       	call   c00101b3 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 00 f8 01 c0       	mov    eax,ds:0xc001f800
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 00 f8 01 c0    	mov    DWORD PTR ds:0xc001f800,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 63 35 01 00       	call   c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 28 d9 01 c0       	mov    edx,0xc001d928
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 67 34 01 00       	call   c001c4bc <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 5b 34 01 00       	call   c001c4c4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 61 33 01 00       	call   c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 e4 d8 01 c0       	push   0xc001d8e4
c00090a9:	e8 05 71 00 00       	call   c00101b3 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 5e 13 00 00       	call   c000a43a <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 28 d9 01 c0       	mov    edx,0xc001d928
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 12 13 00 00       	call   c000a43a <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 6a 33 01 00       	call   c001c4bc <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 f7 33 01 00       	call   c001c566 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 b5 31 01 00       	call   c001c3a6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 84 f7 01 c0       	push   0xc001f784
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 a4 c3 01 c0       	push   0xc001c3a4
c0009206:	e8 df 11 00 00       	call   c000a3ea <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 08 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f808
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d 08 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f808
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d 04 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f804
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 04 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f804,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d 04 f8 01 c0    	mov    DWORD PTR ds:0xc001f804,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 3c d9 01 c0       	push   0xc001d93c
c00092ff:	e8 af 6e 00 00       	call   c00101b3 <KePanic(char const*)>
c0009304:	8b 3d 04 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f804
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d 04 f8 01 c0    	mov    DWORD PTR ds:0xc001f804,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 04 f8 01 c0       	mov    eax,ds:0xc001f804
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 04 f8 01 c0    	mov    DWORD PTR ds:0xc001f804,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 04 f8 01 c0       	mov    ds:0xc001f804,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 0c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f80c
c00093bf:	03 05 14 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f814
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d 0c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f80c
c00093d5:	a1 10 f8 01 c0       	mov    eax,ds:0xc001f810
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d 10 f8 01 c0    	cmp    DWORD PTR ds:0xc001f810,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 cd da 01 c0       	push   0xc001dacd
c0009419:	e8 95 6d 00 00       	call   c00101b3 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 e4 da 01 c0       	push   0xc001dae4
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d 10 f8 01 c0    	mov    DWORD PTR ds:0xc001f810,ebx
c00094b7:	c6 05 18 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f818,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 14 f8 01 c0       	mov    ds:0xc001f814,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 0c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f80c,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 10 f8 01 c0       	mov    eax,ds:0xc001f810
c00094e9:	f7 35 0c f8 01 c0    	div    DWORD PTR ds:0xc001f80c
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 5c d9 01 c0       	push   0xc001d95c
c000955d:	e8 51 6c 00 00       	call   c00101b3 <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 fb da 01 c0       	push   0xc001dafb
c0009624:	e8 8a 6b 00 00       	call   c00101b3 <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 80 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d980
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 36 6b 00 00       	jmp    c00101b3 <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 17 db 01 c0       	push   0xc001db17
c000968b:	e8 23 6b 00 00       	call   c00101b3 <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 33 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db33
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 da 6a 00 00       	jmp    c00101b3 <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 a4 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9a4
c00096f9:	e9 32 0e 00 00       	jmp    c000a530 <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	83 ec 0c             	sub    esp,0xc
c000971f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009723:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009727:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000972b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000972f:	85 ff                	test   edi,edi
c0009731:	7e 33                	jle    c0009766 <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c0009733:	c1 e7 0c             	shl    edi,0xc
c0009736:	01 ef                	add    edi,ebp
c0009738:	55                   	push   ebp
c0009739:	81 c5 00 10 00 00    	add    ebp,0x1000
c000973f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009743:	50                   	push   eax
c0009744:	e8 4d fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009749:	8b 08                	mov    ecx,DWORD PTR [eax]
c000974b:	21 d9                	and    ecx,ebx
c000974d:	09 f1                	or     ecx,esi
c000974f:	89 08                	mov    DWORD PTR [eax],ecx
c0009751:	89 34 24             	mov    DWORD PTR [esp],esi
c0009754:	53                   	push   ebx
c0009755:	68 4d db 01 c0       	push   0xc001db4d
c000975a:	e8 d1 0d 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000975f:	83 c4 10             	add    esp,0x10
c0009762:	39 ef                	cmp    edi,ebp
c0009764:	75 d2                	jne    c0009738 <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c0009766:	83 c4 0c             	add    esp,0xc
c0009769:	5b                   	pop    ebx
c000976a:	5e                   	pop    esi
c000976b:	5f                   	pop    edi
c000976c:	5d                   	pop    ebp
c000976d:	c3                   	ret    

c000976e <VAS::setToWriteCombining(unsigned long, int)>:
c000976e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009773:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009779:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009780:	75 01                	jne    c0009783 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009782:	c3                   	ret    
c0009783:	83 ec 18             	sub    esp,0x18
c0009786:	68 80 00 00 00       	push   0x80
c000978b:	6a ff                	push   0xffffffff
c000978d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009791:	50                   	push   eax
c0009792:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009796:	52                   	push   edx
c0009797:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000979b:	51                   	push   ecx
c000979c:	e8 77 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c00097a1:	83 c4 2c             	add    esp,0x2c
c00097a4:	c3                   	ret    
c00097a5:	90                   	nop

c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00097a6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097af:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097b6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097b9:	19 c0                	sbb    eax,eax
c00097bb:	83 ca 03             	or     edx,0x3
c00097be:	83 e0 fc             	and    eax,0xfffffffc
c00097c1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097c8:	0f 20 d8             	mov    eax,cr3
c00097cb:	0f 22 d8             	mov    cr3,eax
c00097ce:	c3                   	ret    
c00097cf:	90                   	nop

c00097d0 <VAS::~VAS()>:
c00097d0:	83 ec 2c             	sub    esp,0x2c
c00097d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097db:	fa                   	cli    
c00097dc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097e1:	40                   	inc    eax
c00097e2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097e7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00097ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097f1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097fb:	6a 01                	push   0x1
c00097fd:	50                   	push   eax
c00097fe:	e8 a3 ff ff ff       	call   c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>
c0009803:	83 c4 0c             	add    esp,0xc
c0009806:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000980e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009816:	0f 8f d4 00 00 00    	jg     c00098f0 <VAS::~VAS()+0x120>
c000981c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009820:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009823:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009827:	c1 e2 02             	shl    edx,0x2
c000982a:	01 d0                	add    eax,edx
c000982c:	8b 00                	mov    eax,DWORD PTR [eax]
c000982e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009836:	83 e0 01             	and    eax,0x1
c0009839:	0f 84 a8 00 00 00    	je     c00098e7 <VAS::~VAS()+0x117>
c000983f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009847:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000984f:	7f 72                	jg     c00098c3 <VAS::~VAS()+0xf3>
c0009851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009855:	c1 e0 0a             	shl    eax,0xa
c0009858:	89 c2                	mov    edx,eax
c000985a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000985e:	01 d0                	add    eax,edx
c0009860:	c1 e0 0c             	shl    eax,0xc
c0009863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009867:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000986c:	8b 00                	mov    eax,DWORD PTR [eax]
c000986e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009871:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009877:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000987b:	6a 01                	push   0x1
c000987d:	50                   	push   eax
c000987e:	e8 e7 fc ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009883:	83 c4 0c             	add    esp,0xc
c0009886:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000988a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009890:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009898:	25 01 04 00 00       	and    eax,0x401
c000989d:	3d 01 04 00 00       	cmp    eax,0x401
c00098a2:	75 19                	jne    c00098bd <VAS::~VAS()+0xed>
c00098a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098ad:	83 ec 0c             	sub    esp,0xc
c00098b0:	50                   	push   eax
c00098b1:	e8 7d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098b6:	83 c4 10             	add    esp,0x10
c00098b9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098bd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098c1:	eb 84                	jmp    c0009847 <VAS::~VAS()+0x77>
c00098c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c7:	25 00 04 00 00       	and    eax,0x400
c00098cc:	74 19                	je     c00098e7 <VAS::~VAS()+0x117>
c00098ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 53 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098e7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098eb:	e9 1e ff ff ff       	jmp    c000980e <VAS::~VAS()+0x3e>
c00098f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098f7:	83 ec 0c             	sub    esp,0xc
c00098fa:	50                   	push   eax
c00098fb:	e8 b5 fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009900:	83 c4 10             	add    esp,0x10
c0009903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009907:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000990a:	83 ec 0c             	sub    esp,0xc
c000990d:	50                   	push   eax
c000990e:	e8 20 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009913:	83 c4 10             	add    esp,0x10
c0009916:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000991a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000991f:	48                   	dec    eax
c0009920:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009925:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000992a:	85 c0                	test   eax,eax
c000992c:	75 01                	jne    c000992f <VAS::~VAS()+0x15f>
c000992e:	fb                   	sti    
c000992f:	90                   	nop
c0009930:	83 c4 2c             	add    esp,0x2c
c0009933:	c3                   	ret    

c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009934:	55                   	push   ebp
c0009935:	57                   	push   edi
c0009936:	56                   	push   esi
c0009937:	53                   	push   ebx
c0009938:	83 ec 1c             	sub    esp,0x1c
c000993b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000993f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009943:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009949:	77 0b                	ja     c0009956 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000994b:	0f 20 d8             	mov    eax,cr3
c000994e:	0f 20 d8             	mov    eax,cr3
c0009951:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009954:	75 47                	jne    c000999d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009956:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000995a:	09 d8                	or     eax,ebx
c000995c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009961:	75 57                	jne    c00099ba <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009963:	89 de                	mov    esi,ebx
c0009965:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009968:	c1 ee 16             	shr    esi,0x16
c000996b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009972:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009976:	74 54                	je     c00099cc <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009978:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000997c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009982:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009986:	c1 e6 0c             	shl    esi,0xc
c0009989:	c1 eb 0a             	shr    ebx,0xa
c000998c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009992:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009995:	83 c4 1c             	add    esp,0x1c
c0009998:	5b                   	pop    ebx
c0009999:	5e                   	pop    esi
c000999a:	5f                   	pop    edi
c000999b:	5d                   	pop    ebp
c000999c:	c3                   	ret    
c000999d:	83 ec 0c             	sub    esp,0xc
c00099a0:	68 c8 d9 01 c0       	push   0xc001d9c8
c00099a5:	e8 86 0b 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00099aa:	83 c4 10             	add    esp,0x10
c00099ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099b1:	09 d8                	or     eax,ebx
c00099b3:	a9 ff 0f 00 00       	test   eax,0xfff
c00099b8:	74 a9                	je     c0009963 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099ba:	83 ec 0c             	sub    esp,0xc
c00099bd:	68 30 da 01 c0       	push   0xc001da30
c00099c2:	e8 ec 67 00 00       	call   c00101b3 <KePanic(char const*)>
c00099c7:	83 c4 10             	add    esp,0x10
c00099ca:	eb 97                	jmp    c0009963 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099d0:	e8 c0 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099d5:	83 ec 0c             	sub    esp,0xc
c00099d8:	89 c5                	mov    ebp,eax
c00099da:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099e4:	6a 01                	push   0x1
c00099e6:	e8 9a f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099eb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099f2:	6a 01                	push   0x1
c00099f4:	50                   	push   eax
c00099f5:	55                   	push   ebp
c00099f6:	81 cd 07 04 00 00    	or     ebp,0x407
c00099fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a00:	51                   	push   ecx
c0009a01:	e8 28 02 00 00       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a06:	83 c4 1c             	add    esp,0x1c
c0009a09:	68 00 10 00 00       	push   0x1000
c0009a0e:	6a 00                	push   0x0
c0009a10:	50                   	push   eax
c0009a11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a15:	e8 b6 6a ff ff       	call   c00004d0 <memset>
c0009a1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a1e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a21:	e8 8f fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a2a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a33:	e9 40 ff ff ff       	jmp    c0009978 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a38 <VAS::allocatePages(int, int)>:
c0009a38:	55                   	push   ebp
c0009a39:	57                   	push   edi
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	83 ec 1c             	sub    esp,0x1c
c0009a3f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a43:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a4e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a54:	83 e0 01             	and    eax,0x1
c0009a57:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a5b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a5f:	0f 85 cc 00 00 00    	jne    c0009b31 <VAS::allocatePages(int, int)+0xf9>
c0009a65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a6c:	85 c0                	test   eax,eax
c0009a6e:	0f 84 a1 00 00 00    	je     c0009b15 <VAS::allocatePages(int, int)+0xdd>
c0009a74:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a7c:	c1 e6 0c             	shl    esi,0xc
c0009a7f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a83:	85 c0                	test   eax,eax
c0009a85:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a88:	7e 33                	jle    c0009abd <VAS::allocatePages(int, int)+0x85>
c0009a8a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a8e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a92:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a98:	e8 f8 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a9d:	55                   	push   ebp
c0009a9e:	53                   	push   ebx
c0009a9f:	50                   	push   eax
c0009aa0:	57                   	push   edi
c0009aa1:	e8 8e fe ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009aa6:	83 c4 10             	add    esp,0x10
c0009aa9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aae:	74 03                	je     c0009ab3 <VAS::allocatePages(int, int)+0x7b>
c0009ab0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ab3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ab9:	39 de                	cmp    esi,ebx
c0009abb:	75 db                	jne    c0009a98 <VAS::allocatePages(int, int)+0x60>
c0009abd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ac2:	75 12                	jne    c0009ad6 <VAS::allocatePages(int, int)+0x9e>
c0009ac4:	0f 20 d8             	mov    eax,cr3
c0009ac7:	0f 22 d8             	mov    cr3,eax
c0009aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ace:	83 c4 1c             	add    esp,0x1c
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	5d                   	pop    ebp
c0009ad5:	c3                   	ret    
c0009ad6:	c1 ee 0a             	shr    esi,0xa
c0009ad9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009add:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ae3:	c1 eb 0a             	shr    ebx,0xa
c0009ae6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009aec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009af2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009af8:	39 c3                	cmp    ebx,eax
c0009afa:	77 ce                	ja     c0009aca <VAS::allocatePages(int, int)+0x92>
c0009afc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b05:	39 d8                	cmp    eax,ebx
c0009b07:	73 f3                	jae    c0009afc <VAS::allocatePages(int, int)+0xc4>
c0009b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b0d:	83 c4 1c             	add    esp,0x1c
c0009b10:	5b                   	pop    ebx
c0009b11:	5e                   	pop    esi
c0009b12:	5f                   	pop    edi
c0009b13:	5d                   	pop    ebp
c0009b14:	c3                   	ret    
c0009b15:	83 ec 0c             	sub    esp,0xc
c0009b18:	68 54 da 01 c0       	push   0xc001da54
c0009b1d:	e8 91 66 00 00       	call   c00101b3 <KePanic(char const*)>
c0009b22:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b29:	83 c4 10             	add    esp,0x10
c0009b2c:	e9 43 ff ff ff       	jmp    c0009a74 <VAS::allocatePages(int, int)+0x3c>
c0009b31:	83 ec 0c             	sub    esp,0xc
c0009b34:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b38:	51                   	push   ecx
c0009b39:	e8 47 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b42:	83 c4 10             	add    esp,0x10
c0009b45:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b4a:	0f 87 9b 00 00 00    	ja     c0009beb <VAS::allocatePages(int, int)+0x1b3>
c0009b50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b54:	85 d2                	test   edx,edx
c0009b56:	7e 3c                	jle    c0009b94 <VAS::allocatePages(int, int)+0x15c>
c0009b58:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b5c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b60:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b64:	c1 e5 0c             	shl    ebp,0xc
c0009b67:	81 ce 00 04 00 00    	or     esi,0x400
c0009b6d:	01 dd                	add    ebp,ebx
c0009b6f:	e8 21 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b74:	56                   	push   esi
c0009b75:	53                   	push   ebx
c0009b76:	50                   	push   eax
c0009b77:	57                   	push   edi
c0009b78:	e8 b7 fd ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b85:	74 03                	je     c0009b8a <VAS::allocatePages(int, int)+0x152>
c0009b87:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b90:	39 dd                	cmp    ebp,ebx
c0009b92:	75 db                	jne    c0009b6f <VAS::allocatePages(int, int)+0x137>
c0009b94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b99:	0f 84 25 ff ff ff    	je     c0009ac4 <VAS::allocatePages(int, int)+0x8c>
c0009b9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ba7:	89 d3                	mov    ebx,edx
c0009ba9:	c1 e0 0c             	shl    eax,0xc
c0009bac:	c1 eb 0a             	shr    ebx,0xa
c0009baf:	01 d0                	add    eax,edx
c0009bb1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bb7:	c1 e8 0a             	shr    eax,0xa
c0009bba:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bc5:	2d 00 00 40 00       	sub    eax,0x400000
c0009bca:	39 c3                	cmp    ebx,eax
c0009bcc:	0f 87 f8 fe ff ff    	ja     c0009aca <VAS::allocatePages(int, int)+0x92>
c0009bd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bdb:	39 d8                	cmp    eax,ebx
c0009bdd:	73 f3                	jae    c0009bd2 <VAS::allocatePages(int, int)+0x19a>
c0009bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be3:	83 c4 1c             	add    esp,0x1c
c0009be6:	5b                   	pop    ebx
c0009be7:	5e                   	pop    esi
c0009be8:	5f                   	pop    edi
c0009be9:	5d                   	pop    ebp
c0009bea:	c3                   	ret    
c0009beb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bf6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bfd:	0f 84 4d ff ff ff    	je     c0009b50 <VAS::allocatePages(int, int)+0x118>
c0009c03:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c0b:	e9 40 ff ff ff       	jmp    c0009b50 <VAS::allocatePages(int, int)+0x118>

c0009c10 <VAS::setCPUSpecific(unsigned long)>:
c0009c10:	83 ec 0c             	sub    esp,0xc
c0009c13:	6a 05                	push   0x5
c0009c15:	68 00 00 40 c2       	push   0xc2400000
c0009c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c1e:	50                   	push   eax
c0009c1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c23:	52                   	push   edx
c0009c24:	e8 0b fd ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c29:	83 c4 1c             	add    esp,0x1c
c0009c2c:	c3                   	ret    
c0009c2d:	90                   	nop

c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c2e:	55                   	push   ebp
c0009c2f:	57                   	push   edi
c0009c30:	56                   	push   esi
c0009c31:	53                   	push   ebx
c0009c32:	83 ec 1c             	sub    esp,0x1c
c0009c35:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c3a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c44:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c48:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c4e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c52:	83 e0 01             	and    eax,0x1
c0009c55:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5d:	85 c0                	test   eax,eax
c0009c5f:	7e 39                	jle    c0009c9a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c65:	89 f3                	mov    ebx,esi
c0009c67:	c1 e0 0c             	shl    eax,0xc
c0009c6a:	01 f0                	add    eax,esi
c0009c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c70:	55                   	push   ebp
c0009c71:	53                   	push   ebx
c0009c72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c76:	29 f0                	sub    eax,esi
c0009c78:	01 d8                	add    eax,ebx
c0009c7a:	50                   	push   eax
c0009c7b:	57                   	push   edi
c0009c7c:	e8 b3 fc ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c81:	83 c4 10             	add    esp,0x10
c0009c84:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c89:	74 03                	je     c0009c8e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c8b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c8e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c94:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c98:	75 d6                	jne    c0009c70 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c9a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c9f:	75 10                	jne    c0009cb1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009ca1:	0f 20 d8             	mov    eax,cr3
c0009ca4:	0f 22 d8             	mov    cr3,eax
c0009ca7:	83 c4 1c             	add    esp,0x1c
c0009caa:	89 f0                	mov    eax,esi
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	5d                   	pop    ebp
c0009cb0:	c3                   	ret    
c0009cb1:	89 f3                	mov    ebx,esi
c0009cb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cb7:	c1 eb 0a             	shr    ebx,0xa
c0009cba:	c1 e0 0c             	shl    eax,0xc
c0009cbd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cc3:	01 f0                	add    eax,esi
c0009cc5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ccb:	c1 e8 0a             	shr    eax,0xa
c0009cce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cd3:	2d 00 00 40 00       	sub    eax,0x400000
c0009cd8:	39 c3                	cmp    ebx,eax
c0009cda:	77 cb                	ja     c0009ca7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ce5:	39 d8                	cmp    eax,ebx
c0009ce7:	73 f3                	jae    c0009cdc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ce9:	83 c4 1c             	add    esp,0x1c
c0009cec:	89 f0                	mov    eax,esi
c0009cee:	5b                   	pop    ebx
c0009cef:	5e                   	pop    esi
c0009cf0:	5f                   	pop    edi
c0009cf1:	5d                   	pop    ebp
c0009cf2:	c3                   	ret    
c0009cf3:	90                   	nop

c0009cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cf4:	55                   	push   ebp
c0009cf5:	57                   	push   edi
c0009cf6:	56                   	push   esi
c0009cf7:	53                   	push   ebx
c0009cf8:	83 ec 1c             	sub    esp,0x1c
c0009cfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d03:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d0b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d10:	75 4a                	jne    c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d12:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d16:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d19:	c1 eb 16             	shr    ebx,0x16
c0009d1c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d23:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d27:	74 4d                	je     c0009d76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d2d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d31:	c1 e8 0a             	shr    eax,0xa
c0009d34:	80 fa 01             	cmp    dl,0x1
c0009d37:	19 d2                	sbb    edx,edx
c0009d39:	c1 e3 0c             	shl    ebx,0xc
c0009d3c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d40:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d46:	25 fc 0f 00 00       	and    eax,0xffc
c0009d4b:	01 d8                	add    eax,ebx
c0009d4d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d54:	83 c4 1c             	add    esp,0x1c
c0009d57:	5b                   	pop    ebx
c0009d58:	5e                   	pop    esi
c0009d59:	5f                   	pop    edi
c0009d5a:	5d                   	pop    ebp
c0009d5b:	c3                   	ret    
c0009d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d60:	83 ec 0c             	sub    esp,0xc
c0009d63:	68 80 da 01 c0       	push   0xc001da80
c0009d68:	e8 46 64 00 00       	call   c00101b3 <KePanic(char const*)>
c0009d6d:	83 c4 10             	add    esp,0x10
c0009d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d74:	eb 9c                	jmp    c0009d12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7a:	e8 16 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	89 c5                	mov    ebp,eax
c0009d84:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009d8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d8e:	6a 01                	push   0x1
c0009d90:	e8 f0 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d95:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d9c:	6a 01                	push   0x1
c0009d9e:	50                   	push   eax
c0009d9f:	55                   	push   ebp
c0009da0:	81 cd 07 04 00 00    	or     ebp,0x407
c0009da6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009daa:	51                   	push   ecx
c0009dab:	e8 7e fe ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db0:	83 c4 1c             	add    esp,0x1c
c0009db3:	68 00 10 00 00       	push   0x1000
c0009db8:	6a 00                	push   0x0
c0009dba:	50                   	push   eax
c0009dbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dbf:	e8 0c 67 ff ff       	call   c00004d0 <memset>
c0009dc4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dc8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcb:	e8 e5 f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ddd:	e9 47 ff ff ff       	jmp    c0009d29 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009de2 <VAS::VAS(bool)>:
c0009de2:	53                   	push   ebx
c0009de3:	83 ec 28             	sub    esp,0x28
c0009de6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e08:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e0c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e0f:	e8 81 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e14:	89 c2                	mov    edx,eax
c0009e16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e1d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e23:	83 ec 0c             	sub    esp,0xc
c0009e26:	6a 01                	push   0x1
c0009e28:	e8 58 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 c2                	mov    edx,eax
c0009e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e39:	83 ec 0c             	sub    esp,0xc
c0009e3c:	6a 03                	push   0x3
c0009e3e:	6a 01                	push   0x1
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	53                   	push   ebx
c0009e43:	e8 e6 fd ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e48:	83 c4 20             	add    esp,0x20
c0009e4b:	89 c2                	mov    edx,eax
c0009e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e51:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e5c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e64:	7f 1c                	jg     c0009e82 <VAS::VAS(bool)+0xa0>
c0009e66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e71:	c1 e2 02             	shl    edx,0x2
c0009e74:	01 d0                	add    eax,edx
c0009e76:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e80:	eb da                	jmp    c0009e5c <VAS::VAS(bool)+0x7a>
c0009e82:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e8a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e92:	7f 7a                	jg     c0009f0e <VAS::VAS(bool)+0x12c>
c0009e94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e98:	2d 00 02 00 00       	sub    eax,0x200
c0009e9d:	c1 e0 0c             	shl    eax,0xc
c0009ea0:	83 c8 03             	or     eax,0x3
c0009ea3:	89 c2                	mov    edx,eax
c0009ea5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009eaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eb6:	83 e0 10             	and    eax,0x10
c0009eb9:	84 c0                	test   al,al
c0009ebb:	74 07                	je     c0009ec4 <VAS::VAS(bool)+0xe2>
c0009ebd:	b8 00 01 00 00       	mov    eax,0x100
c0009ec2:	eb 05                	jmp    c0009ec9 <VAS::VAS(bool)+0xe7>
c0009ec4:	b8 00 00 00 00       	mov    eax,0x0
c0009ec9:	09 d0                	or     eax,edx
c0009ecb:	89 c1                	mov    ecx,eax
c0009ecd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ed8:	c1 e2 02             	shl    edx,0x2
c0009edb:	01 d0                	add    eax,edx
c0009edd:	89 ca                	mov    edx,ecx
c0009edf:	89 10                	mov    DWORD PTR [eax],edx
c0009ee1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ee5:	2d 40 03 00 00       	sub    eax,0x340
c0009eea:	83 f8 7f             	cmp    eax,0x7f
c0009eed:	77 16                	ja     c0009f05 <VAS::VAS(bool)+0x123>
c0009eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009efa:	c1 e2 02             	shl    edx,0x2
c0009efd:	01 d0                	add    eax,edx
c0009eff:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f05:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f09:	e9 7c ff ff ff       	jmp    c0009e8a <VAS::VAS(bool)+0xa8>
c0009f0e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f19:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f1f:	83 e0 10             	and    eax,0x10
c0009f22:	84 c0                	test   al,al
c0009f24:	74 07                	je     c0009f2d <VAS::VAS(bool)+0x14b>
c0009f26:	b8 03 41 00 00       	mov    eax,0x4103
c0009f2b:	eb 05                	jmp    c0009f32 <VAS::VAS(bool)+0x150>
c0009f2d:	b8 03 40 00 00       	mov    eax,0x4003
c0009f32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f36:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f39:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f3f:	89 02                	mov    DWORD PTR [edx],eax
c0009f41:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f4c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f52:	83 ec 08             	sub    esp,0x8
c0009f55:	50                   	push   eax
c0009f56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f5a:	e8 b1 fc ff ff       	call   c0009c10 <VAS::setCPUSpecific(unsigned long)>
c0009f5f:	83 c4 10             	add    esp,0x10
c0009f62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f66:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f69:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f74:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f7a:	83 e0 10             	and    eax,0x10
c0009f7d:	84 c0                	test   al,al
c0009f7f:	74 07                	je     c0009f88 <VAS::VAS(bool)+0x1a6>
c0009f81:	b8 00 01 00 00       	mov    eax,0x100
c0009f86:	eb 05                	jmp    c0009f8d <VAS::VAS(bool)+0x1ab>
c0009f88:	b8 00 00 00 00       	mov    eax,0x0
c0009f8d:	09 c2                	or     edx,eax
c0009f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f96:	05 fc 0f 00 00       	add    eax,0xffc
c0009f9b:	83 ca 03             	or     edx,0x3
c0009f9e:	89 10                	mov    DWORD PTR [eax],edx
c0009fa0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fab:	83 ec 0c             	sub    esp,0xc
c0009fae:	50                   	push   eax
c0009faf:	e8 50 1c 00 00       	call   c000bc04 <Device::getName()>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	83 ec 08             	sub    esp,0x8
c0009fba:	68 67 db 01 c0       	push   0xc001db67
c0009fbf:	50                   	push   eax
c0009fc0:	e8 1b 67 ff ff       	call   c00006e0 <strcmp>
c0009fc5:	83 c4 10             	add    esp,0x10
c0009fc8:	85 c0                	test   eax,eax
c0009fca:	0f 94 c0             	sete   al
c0009fcd:	84 c0                	test   al,al
c0009fcf:	0f 84 87 00 00 00    	je     c000a05c <VAS::VAS(bool)+0x27a>
c0009fd5:	fa                   	cli    
c0009fd6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009fdb:	40                   	inc    eax
c0009fdc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009fe1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fec:	05 7c 09 00 00       	add    eax,0x97c
c0009ff1:	83 ec 0c             	sub    esp,0xc
c0009ff4:	50                   	push   eax
c0009ff5:	e8 bc d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009ffa:	83 c4 10             	add    esp,0x10
c0009ffd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a002:	89 c3                	mov    ebx,eax
c000a004:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a009:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a00f:	05 7c 09 00 00       	add    eax,0x97c
c000a014:	83 ec 0c             	sub    esp,0xc
c000a017:	50                   	push   eax
c000a018:	e8 99 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	83 ec 08             	sub    esp,0x8
c000a023:	50                   	push   eax
c000a024:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a028:	e8 69 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	8b 00                	mov    eax,DWORD PTR [eax]
c000a032:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a037:	6a 11                	push   0x11
c000a039:	53                   	push   ebx
c000a03a:	50                   	push   eax
c000a03b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a03f:	e8 f0 f8 ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a044:	83 c4 10             	add    esp,0x10
c000a047:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a04c:	48                   	dec    eax
c000a04d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a052:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a057:	85 c0                	test   eax,eax
c000a059:	75 01                	jne    c000a05c <VAS::VAS(bool)+0x27a>
c000a05b:	fb                   	sti    
c000a05c:	90                   	nop
c000a05d:	83 c4 28             	add    esp,0x28
c000a060:	5b                   	pop    ebx
c000a061:	c3                   	ret    

c000a062 <VAS::evict(unsigned long)>:
c000a062:	55                   	push   ebp
c000a063:	57                   	push   edi
c000a064:	56                   	push   esi
c000a065:	53                   	push   ebx
c000a066:	83 ec 1c             	sub    esp,0x1c
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a071:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a075:	e8 4c f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a07a:	8b 0d 0c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f80c
c000a080:	89 c7                	mov    edi,eax
c000a082:	85 c9                	test   ecx,ecx
c000a084:	7e 3e                	jle    c000a0c4 <VAS::evict(unsigned long)+0x62>
c000a086:	89 ee                	mov    esi,ebp
c000a088:	31 db                	xor    ebx,ebx
c000a08a:	83 ec 0c             	sub    esp,0xc
c000a08d:	57                   	push   edi
c000a08e:	e8 21 f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a093:	89 34 24             	mov    DWORD PTR [esp],esi
c000a096:	01 d8                	add    eax,ebx
c000a098:	6a 01                	push   0x1
c000a09a:	31 d2                	xor    edx,edx
c000a09c:	43                   	inc    ebx
c000a09d:	52                   	push   edx
c000a09e:	81 c6 00 02 00 00    	add    esi,0x200
c000a0a4:	50                   	push   eax
c000a0a5:	0f be 05 18 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f818
c000a0ac:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a0b3:	52                   	push   edx
c000a0b4:	e8 0b 2c 00 00       	call   c000ccc4 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0b9:	83 c4 20             	add    esp,0x20
c000a0bc:	39 1d 0c f8 01 c0    	cmp    DWORD PTR ds:0xc001f80c,ebx
c000a0c2:	7f c6                	jg     c000a08a <VAS::evict(unsigned long)+0x28>
c000a0c4:	83 ec 08             	sub    esp,0x8
c000a0c7:	c1 e7 0b             	shl    edi,0xb
c000a0ca:	55                   	push   ebp
c000a0cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cf:	50                   	push   eax
c000a0d0:	e8 c1 f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0d7:	89 d1                	mov    ecx,edx
c000a0d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0df:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0e5:	09 cf                	or     edi,ecx
c000a0e7:	89 38                	mov    DWORD PTR [eax],edi
c000a0e9:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0ec:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a0f2:	e8 3c d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0f7:	0f 20 d8             	mov    eax,cr3
c000a0fa:	0f 22 d8             	mov    cr3,eax
c000a0fd:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a102:	c7 44 24 40 75 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001db75
c000a10a:	8d 50 01             	lea    edx,[eax+0x1]
c000a10d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a111:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a117:	83 c4 2c             	add    esp,0x2c
c000a11a:	5b                   	pop    ebx
c000a11b:	5e                   	pop    esi
c000a11c:	5f                   	pop    edi
c000a11d:	5d                   	pop    ebp
c000a11e:	e9 0d 04 00 00       	jmp    c000a530 <Dbg::kprintf(char const*, ...)>
c000a123:	90                   	nop

c000a124 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a124:	55                   	push   ebp
c000a125:	57                   	push   edi
c000a126:	56                   	push   esi
c000a127:	53                   	push   ebx
c000a128:	83 ec 14             	sub    esp,0x14
c000a12b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a12f:	53                   	push   ebx
c000a130:	68 86 db 01 c0       	push   0xc001db86
c000a135:	e8 f6 03 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a13a:	83 c4 10             	add    esp,0x10
c000a13d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a143:	74 21                	je     c000a166 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a145:	83 ec 08             	sub    esp,0x8
c000a148:	53                   	push   ebx
c000a149:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a14d:	57                   	push   edi
c000a14e:	e8 43 f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a153:	83 c4 10             	add    esp,0x10
c000a156:	89 c6                	mov    esi,eax
c000a158:	85 c0                	test   eax,eax
c000a15a:	74 0a                	je     c000a166 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a15c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a15e:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a164:	74 0a                	je     c000a170 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a166:	31 c0                	xor    eax,eax
c000a168:	83 c4 0c             	add    esp,0xc
c000a16b:	5b                   	pop    ebx
c000a16c:	5e                   	pop    esi
c000a16d:	5f                   	pop    edi
c000a16e:	5d                   	pop    ebp
c000a16f:	c3                   	ret    
c000a170:	e8 20 d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a175:	c1 ed 0b             	shr    ebp,0xb
c000a178:	8b 16                	mov    edx,DWORD PTR [esi]
c000a17a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a180:	09 c2                	or     edx,eax
c000a182:	81 ca 01 08 00 00    	or     edx,0x801
c000a188:	89 16                	mov    DWORD PTR [esi],edx
c000a18a:	8b 35 0c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f80c
c000a190:	85 f6                	test   esi,esi
c000a192:	7e 3e                	jle    c000a1d2 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a194:	89 df                	mov    edi,ebx
c000a196:	31 f6                	xor    esi,esi
c000a198:	83 ec 0c             	sub    esp,0xc
c000a19b:	55                   	push   ebp
c000a19c:	e8 13 f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a1a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1a4:	01 f0                	add    eax,esi
c000a1a6:	6a 01                	push   0x1
c000a1a8:	31 d2                	xor    edx,edx
c000a1aa:	46                   	inc    esi
c000a1ab:	52                   	push   edx
c000a1ac:	81 c7 00 02 00 00    	add    edi,0x200
c000a1b2:	50                   	push   eax
c000a1b3:	0f be 05 18 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f818
c000a1ba:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1c1:	51                   	push   ecx
c000a1c2:	e8 91 2a 00 00       	call   c000cc58 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1c7:	83 c4 20             	add    esp,0x20
c000a1ca:	39 35 0c f8 01 c0    	cmp    DWORD PTR ds:0xc001f80c,esi
c000a1d0:	7f c6                	jg     c000a198 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1d2:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a1d7:	48                   	dec    eax
c000a1d8:	52                   	push   edx
c000a1d9:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a1de:	50                   	push   eax
c000a1df:	53                   	push   ebx
c000a1e0:	68 99 db 01 c0       	push   0xc001db99
c000a1e5:	e8 46 03 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a1ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1ed:	e8 a4 f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1f2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	48                   	dec    eax
c000a1fb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a200:	85 c0                	test   eax,eax
c000a202:	75 01                	jne    c000a205 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a204:	fb                   	sti    
c000a205:	0f 20 d8             	mov    eax,cr3
c000a208:	0f 22 d8             	mov    cr3,eax
c000a20b:	b0 01                	mov    al,0x1
c000a20d:	e9 56 ff ff ff       	jmp    c000a168 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a212 <VAS::scanForEviction()>:
c000a212:	57                   	push   edi
c000a213:	31 ff                	xor    edi,edi
c000a215:	56                   	push   esi
c000a216:	53                   	push   ebx
c000a217:	83 ec 10             	sub    esp,0x10
c000a21a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a21e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a221:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a227:	75 0e                	jne    c000a237 <VAS::scanForEviction()+0x25>
c000a229:	89 da                	mov    edx,ebx
c000a22b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a22e:	c1 ea 16             	shr    edx,0x16
c000a231:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a235:	74 4e                	je     c000a285 <VAS::scanForEviction()+0x73>
c000a237:	53                   	push   ebx
c000a238:	56                   	push   esi
c000a239:	e8 58 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a23e:	5a                   	pop    edx
c000a23f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a241:	59                   	pop    ecx
c000a242:	89 d1                	mov    ecx,edx
c000a244:	81 e1 01 08 00 00    	and    ecx,0x801
c000a24a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a250:	74 3e                	je     c000a290 <VAS::scanForEviction()+0x7e>
c000a252:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a258:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a25e:	76 2b                	jbe    c000a28b <VAS::scanForEviction()+0x79>
c000a260:	47                   	inc    edi
c000a261:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a268:	83 ff 03             	cmp    edi,0x3
c000a26b:	74 32                	je     c000a29f <VAS::scanForEviction()+0x8d>
c000a26d:	31 db                	xor    ebx,ebx
c000a26f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a275:	75 c0                	jne    c000a237 <VAS::scanForEviction()+0x25>
c000a277:	89 da                	mov    edx,ebx
c000a279:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a27c:	c1 ea 16             	shr    edx,0x16
c000a27f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a283:	75 b2                	jne    c000a237 <VAS::scanForEviction()+0x25>
c000a285:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a28b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a28e:	eb 91                	jmp    c000a221 <VAS::scanForEviction()+0xf>
c000a290:	f6 c2 20             	test   dl,0x20
c000a293:	74 13                	je     c000a2a8 <VAS::scanForEviction()+0x96>
c000a295:	83 e2 df             	and    edx,0xffffffdf
c000a298:	89 10                	mov    DWORD PTR [eax],edx
c000a29a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a29d:	eb b3                	jmp    c000a252 <VAS::scanForEviction()+0x40>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	31 c0                	xor    eax,eax
c000a2a4:	5b                   	pop    ebx
c000a2a5:	5e                   	pop    esi
c000a2a6:	5f                   	pop    edi
c000a2a7:	c3                   	ret    
c000a2a8:	83 ec 08             	sub    esp,0x8
c000a2ab:	89 d0                	mov    eax,edx
c000a2ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2b6:	53                   	push   ebx
c000a2b7:	68 ae db 01 c0       	push   0xc001dbae
c000a2bc:	e8 6f 02 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a2c1:	58                   	pop    eax
c000a2c2:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2c5:	5a                   	pop    edx
c000a2c6:	51                   	push   ecx
c000a2c7:	56                   	push   esi
c000a2c8:	e8 95 fd ff ff       	call   c000a062 <VAS::evict(unsigned long)>
c000a2cd:	5b                   	pop    ebx
c000a2ce:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2d1:	5f                   	pop    edi
c000a2d2:	50                   	push   eax
c000a2d3:	68 c2 db 01 c0       	push   0xc001dbc2
c000a2d8:	e8 53 02 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a2dd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2eb:	83 c4 10             	add    esp,0x10
c000a2ee:	5b                   	pop    ebx
c000a2ef:	5e                   	pop    esi
c000a2f0:	5f                   	pop    edi
c000a2f1:	c3                   	ret    

c000a2f2 <mapVASFirstTime>:
c000a2f2:	55                   	push   ebp
c000a2f3:	57                   	push   edi
c000a2f4:	56                   	push   esi
c000a2f5:	53                   	push   ebx
c000a2f6:	83 ec 0c             	sub    esp,0xc
c000a2f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2fe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a301:	4a                   	dec    edx
c000a302:	0f 84 ca 00 00 00    	je     c000a3d2 <mapVASFirstTime+0xe0>
c000a308:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a30b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a30e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a313:	c1 e5 15             	shl    ebp,0x15
c000a316:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a31b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a321:	29 eb                	sub    ebx,ebp
c000a323:	29 ef                	sub    edi,ebp
c000a325:	e8 6b d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a32a:	83 ec 0c             	sub    esp,0xc
c000a32d:	68 03 04 00 00       	push   0x403
c000a332:	6a 01                	push   0x1
c000a334:	53                   	push   ebx
c000a335:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a33b:	50                   	push   eax
c000a33c:	56                   	push   esi
c000a33d:	e8 ec f8 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a342:	83 c4 20             	add    esp,0x20
c000a345:	39 fb                	cmp    ebx,edi
c000a347:	75 dc                	jne    c000a325 <mapVASFirstTime+0x33>
c000a349:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a34e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a353:	29 eb                	sub    ebx,ebp
c000a355:	29 ef                	sub    edi,ebp
c000a357:	e8 39 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a35c:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a360:	19 d2                	sbb    edx,edx
c000a362:	83 ec 0c             	sub    esp,0xc
c000a365:	83 e2 04             	and    edx,0x4
c000a368:	81 c2 03 04 00 00    	add    edx,0x403
c000a36e:	52                   	push   edx
c000a36f:	6a 01                	push   0x1
c000a371:	53                   	push   ebx
c000a372:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a378:	50                   	push   eax
c000a379:	56                   	push   esi
c000a37a:	e8 af f8 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a37f:	83 c4 20             	add    esp,0x20
c000a382:	39 df                	cmp    edi,ebx
c000a384:	75 d1                	jne    c000a357 <mapVASFirstTime+0x65>
c000a386:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a38b:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a391:	c1 eb 0c             	shr    ebx,0xc
c000a394:	53                   	push   ebx
c000a395:	68 7d 00 02 c0       	push   0xc002007d
c000a39a:	68 00 00 02 c0       	push   0xc0020000
c000a39f:	68 a4 da 01 c0       	push   0xc001daa4
c000a3a4:	e8 87 01 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a3a9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c000a3b0:	53                   	push   ebx
c000a3b1:	68 00 00 02 c0       	push   0xc0020000
c000a3b6:	68 00 00 02 c0       	push   0xc0020000
c000a3bb:	56                   	push   esi
c000a3bc:	e8 6d f8 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3c1:	0f 20 d8             	mov    eax,cr3
c000a3c4:	0f 22 d8             	mov    cr3,eax
c000a3c7:	83 c4 20             	add    esp,0x20
c000a3ca:	83 c4 0c             	add    esp,0xc
c000a3cd:	5b                   	pop    ebx
c000a3ce:	5e                   	pop    esi
c000a3cf:	5f                   	pop    edi
c000a3d0:	5d                   	pop    ebp
c000a3d1:	c3                   	ret    
c000a3d2:	83 ec 0c             	sub    esp,0xc
c000a3d5:	68 d5 db 01 c0       	push   0xc001dbd5
c000a3da:	e8 51 01 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a3df:	83 c4 10             	add    esp,0x10
c000a3e2:	83 c4 0c             	add    esp,0xc
c000a3e5:	5b                   	pop    ebx
c000a3e6:	5e                   	pop    esi
c000a3e7:	5f                   	pop    edi
c000a3e8:	5d                   	pop    ebp
c000a3e9:	c3                   	ret    

c000a3ea <__cxa_atexit>:
c000a3ea:	31 c0                	xor    eax,eax
c000a3ec:	c3                   	ret    

c000a3ed <__cxa_finalize>:
c000a3ed:	c3                   	ret    

c000a3ee <__stack_chk_fail>:
c000a3ee:	55                   	push   ebp
c000a3ef:	89 e5                	mov    ebp,esp
c000a3f1:	83 ec 10             	sub    esp,0x10
c000a3f4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3f7:	68 ee db 01 c0       	push   0xc001dbee
c000a3fc:	e8 2f 01 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a401:	58                   	pop    eax
c000a402:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a405:	5a                   	pop    edx
c000a406:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a409:	68 ee db 01 c0       	push   0xc001dbee
c000a40e:	e8 1d 01 00 00       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000a413:	c7 04 24 f6 db 01 c0 	mov    DWORD PTR [esp],0xc001dbf6
c000a41a:	e8 94 5d 00 00       	call   c00101b3 <KePanic(char const*)>
c000a41f:	83 c4 10             	add    esp,0x10
c000a422:	c9                   	leave  
c000a423:	c3                   	ret    

c000a424 <__cxa_pure_virtual>:
c000a424:	83 ec 18             	sub    esp,0x18
c000a427:	68 0e dc 01 c0       	push   0xc001dc0e
c000a42c:	e8 82 5d 00 00       	call   c00101b3 <KePanic(char const*)>
c000a431:	83 c4 1c             	add    esp,0x1c
c000a434:	c3                   	ret    

c000a435 <operator new[](unsigned long)>:
c000a435:	e9 7f d3 ff ff       	jmp    c00077b9 <malloc>

c000a43a <operator delete(void*, unsigned long)>:
c000a43a:	e9 9a d3 ff ff       	jmp    c00077d9 <rfree>

c000a43f <operator delete[](void*)>:
c000a43f:	e9 95 d3 ff ff       	jmp    c00077d9 <rfree>

c000a444 <operator delete[](void*, unsigned long)>:
c000a444:	e9 90 d3 ff ff       	jmp    c00077d9 <rfree>

c000a449 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a449:	55                   	push   ebp
c000a44a:	b9 04 00 00 00       	mov    ecx,0x4
c000a44f:	57                   	push   edi
c000a450:	56                   	push   esi
c000a451:	be d3 d7 01 c0       	mov    esi,0xc001d7d3
c000a456:	53                   	push   ebx
c000a457:	83 ec 20             	sub    esp,0x20
c000a45a:	a1 d2 d7 01 c0       	mov    eax,ds:0xc001d7d2
c000a45f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a463:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a467:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a46b:	a1 df d7 01 c0       	mov    eax,ds:0xc001d7df
c000a470:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a474:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a478:	fc                   	cld    
c000a479:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a47b:	89 ee                	mov    esi,ebp
c000a47d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a481:	eb 02                	jmp    c000a485 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a483:	89 c6                	mov    esi,eax
c000a485:	31 d2                	xor    edx,edx
c000a487:	41                   	inc    ecx
c000a488:	89 f0                	mov    eax,esi
c000a48a:	f7 f3                	div    ebx
c000a48c:	39 de                	cmp    esi,ebx
c000a48e:	73 f3                	jae    c000a483 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a490:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a493:	eb 02                	jmp    c000a497 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a495:	89 c5                	mov    ebp,eax
c000a497:	31 d2                	xor    edx,edx
c000a499:	49                   	dec    ecx
c000a49a:	89 e8                	mov    eax,ebp
c000a49c:	f7 f3                	div    ebx
c000a49e:	39 dd                	cmp    ebp,ebx
c000a4a0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4a4:	88 11                	mov    BYTE PTR [ecx],dl
c000a4a6:	73 ed                	jae    c000a495 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4ac:	83 c4 20             	add    esp,0x20
c000a4af:	5b                   	pop    ebx
c000a4b0:	5e                   	pop    esi
c000a4b1:	5f                   	pop    edi
c000a4b2:	5d                   	pop    ebp
c000a4b3:	c3                   	ret    

c000a4b4 <Dbg::logc(char)>:
c000a4b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4b8:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a4bf:	75 12                	jne    c000a4d3 <Dbg::logc(char)+0x1f>
c000a4c1:	ba fd 03 00 00       	mov    edx,0x3fd
c000a4c6:	ec                   	in     al,dx
c000a4c7:	a8 20                	test   al,0x20
c000a4c9:	74 fb                	je     c000a4c6 <Dbg::logc(char)+0x12>
c000a4cb:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4d0:	88 c8                	mov    al,cl
c000a4d2:	ee                   	out    dx,al
c000a4d3:	c3                   	ret    

c000a4d4 <Dbg::logs(char*)>:
c000a4d4:	53                   	push   ebx
c000a4d5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4dc:	84 c0                	test   al,al
c000a4de:	74 0f                	je     c000a4ef <Dbg::logs(char*)+0x1b>
c000a4e0:	50                   	push   eax
c000a4e1:	43                   	inc    ebx
c000a4e2:	e8 cd ff ff ff       	call   c000a4b4 <Dbg::logc(char)>
c000a4e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4ea:	5a                   	pop    edx
c000a4eb:	84 c0                	test   al,al
c000a4ed:	75 f1                	jne    c000a4e0 <Dbg::logs(char*)+0xc>
c000a4ef:	5b                   	pop    ebx
c000a4f0:	c3                   	ret    

c000a4f1 <Dbg::logWriteInt(unsigned int)>:
c000a4f1:	83 ec 10             	sub    esp,0x10
c000a4f4:	6a 0a                	push   0xa
c000a4f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4fa:	50                   	push   eax
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	50                   	push   eax
c000a500:	e8 44 ff ff ff       	call   c000a449 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a505:	50                   	push   eax
c000a506:	e8 c9 ff ff ff       	call   c000a4d4 <Dbg::logs(char*)>
c000a50b:	83 c4 20             	add    esp,0x20
c000a50e:	c3                   	ret    

c000a50f <Dbg::logWriteIntBase(unsigned int, int)>:
c000a50f:	83 ec 10             	sub    esp,0x10
c000a512:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a516:	50                   	push   eax
c000a517:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a51b:	50                   	push   eax
c000a51c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a520:	52                   	push   edx
c000a521:	e8 23 ff ff ff       	call   c000a449 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a526:	50                   	push   eax
c000a527:	e8 a8 ff ff ff       	call   c000a4d4 <Dbg::logs(char*)>
c000a52c:	83 c4 20             	add    esp,0x20
c000a52f:	c3                   	ret    

c000a530 <Dbg::kprintf(char const*, ...)>:
c000a530:	55                   	push   ebp
c000a531:	57                   	push   edi
c000a532:	56                   	push   esi
c000a533:	53                   	push   ebx
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a53b:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a542:	74 08                	je     c000a54c <Dbg::kprintf(char const*, ...)+0x1c>
c000a544:	83 c4 0c             	add    esp,0xc
c000a547:	5b                   	pop    ebx
c000a548:	5e                   	pop    esi
c000a549:	5f                   	pop    edi
c000a54a:	5d                   	pop    ebp
c000a54b:	c3                   	ret    
c000a54c:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a550:	31 ff                	xor    edi,edi
c000a552:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a556:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a559:	84 c0                	test   al,al
c000a55b:	74 e7                	je     c000a544 <Dbg::kprintf(char const*, ...)+0x14>
c000a55d:	8d 77 01             	lea    esi,[edi+0x1]
c000a560:	3c 25                	cmp    al,0x25
c000a562:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a565:	75 47                	jne    c000a5ae <Dbg::kprintf(char const*, ...)+0x7e>
c000a567:	83 c7 02             	add    edi,0x2
c000a56a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a56d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a570:	83 e8 25             	sub    eax,0x25
c000a573:	3c 53                	cmp    al,0x53
c000a575:	0f 87 d2 00 00 00    	ja     c000a64d <Dbg::kprintf(char const*, ...)+0x11d>
c000a57b:	25 ff 00 00 00       	and    eax,0xff
c000a580:	ff 24 85 24 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe23dc]
c000a587:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a58b:	89 c8                	mov    eax,ecx
c000a58d:	83 c1 04             	add    ecx,0x4
c000a590:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a594:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a596:	55                   	push   ebp
c000a597:	e8 55 ff ff ff       	call   c000a4f1 <Dbg::logWriteInt(unsigned int)>
c000a59c:	58                   	pop    eax
c000a59d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5a0:	84 c0                	test   al,al
c000a5a2:	74 a0                	je     c000a544 <Dbg::kprintf(char const*, ...)+0x14>
c000a5a4:	8d 77 01             	lea    esi,[edi+0x1]
c000a5a7:	3c 25                	cmp    al,0x25
c000a5a9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5ac:	74 b9                	je     c000a567 <Dbg::kprintf(char const*, ...)+0x37>
c000a5ae:	50                   	push   eax
c000a5af:	89 f7                	mov    edi,esi
c000a5b1:	e8 fe fe ff ff       	call   c000a4b4 <Dbg::logc(char)>
c000a5b6:	89 ee                	mov    esi,ebp
c000a5b8:	58                   	pop    eax
c000a5b9:	eb e2                	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5bf:	89 c8                	mov    eax,ecx
c000a5c1:	83 c1 04             	add    ecx,0x4
c000a5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5ca:	50                   	push   eax
c000a5cb:	e8 04 ff ff ff       	call   c000a4d4 <Dbg::logs(char*)>
c000a5d0:	58                   	pop    eax
c000a5d1:	eb ca                	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5d7:	89 d0                	mov    eax,edx
c000a5d9:	83 c2 04             	add    edx,0x4
c000a5dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5e2:	50                   	push   eax
c000a5e3:	e8 09 ff ff ff       	call   c000a4f1 <Dbg::logWriteInt(unsigned int)>
c000a5e8:	58                   	pop    eax
c000a5e9:	eb b2                	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ef:	89 d0                	mov    eax,edx
c000a5f1:	83 c2 04             	add    edx,0x4
c000a5f4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5fb:	50                   	push   eax
c000a5fc:	e8 b3 fe ff ff       	call   c000a4b4 <Dbg::logc(char)>
c000a601:	58                   	pop    eax
c000a602:	eb 99                	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a604:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a608:	89 c8                	mov    eax,ecx
c000a60a:	83 c1 04             	add    ecx,0x4
c000a60d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a611:	6a 10                	push   0x10
c000a613:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a615:	51                   	push   ecx
c000a616:	e8 f4 fe ff ff       	call   c000a50f <Dbg::logWriteIntBase(unsigned int, int)>
c000a61b:	5d                   	pop    ebp
c000a61c:	58                   	pop    eax
c000a61d:	e9 7b ff ff ff       	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a622:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a626:	89 d0                	mov    eax,edx
c000a628:	83 c2 08             	add    edx,0x8
c000a62b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a62f:	6a 10                	push   0x10
c000a631:	8b 00                	mov    eax,DWORD PTR [eax]
c000a633:	50                   	push   eax
c000a634:	e8 d6 fe ff ff       	call   c000a50f <Dbg::logWriteIntBase(unsigned int, int)>
c000a639:	58                   	pop    eax
c000a63a:	5a                   	pop    edx
c000a63b:	e9 5d ff ff ff       	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a640:	6a 25                	push   0x25
c000a642:	e8 6d fe ff ff       	call   c000a4b4 <Dbg::logc(char)>
c000a647:	5a                   	pop    edx
c000a648:	e9 50 ff ff ff       	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a64d:	6a 25                	push   0x25
c000a64f:	e8 60 fe ff ff       	call   c000a4b4 <Dbg::logc(char)>
c000a654:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a658:	50                   	push   eax
c000a659:	e8 56 fe ff ff       	call   c000a4b4 <Dbg::logc(char)>
c000a65e:	5a                   	pop    edx
c000a65f:	59                   	pop    ecx
c000a660:	e9 38 ff ff ff       	jmp    c000a59d <Dbg::kprintf(char const*, ...)+0x6d>
c000a665:	90                   	nop

c000a666 <File::read(unsigned long long, void*, int*)>:
c000a666:	53                   	push   ebx
c000a667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a66b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a66f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a676:	3c 19                	cmp    al,0x19
c000a678:	77 35                	ja     c000a6af <File::read(unsigned long long, void*, int*)+0x49>
c000a67a:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a681:	85 c0                	test   eax,eax
c000a683:	74 2a                	je     c000a6af <File::read(unsigned long long, void*, int*)+0x49>
c000a685:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a68b:	85 c0                	test   eax,eax
c000a68d:	74 20                	je     c000a6af <File::read(unsigned long long, void*, int*)+0x49>
c000a68f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a693:	74 21                	je     c000a6b6 <File::read(unsigned long long, void*, int*)+0x50>
c000a695:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a697:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a69b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6a9:	5b                   	pop    ebx
c000a6aa:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6ad:	ff e0                	jmp    eax
c000a6af:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b4:	eb 05                	jmp    c000a6bb <File::read(unsigned long long, void*, int*)+0x55>
c000a6b6:	b8 05 00 00 00       	mov    eax,0x5
c000a6bb:	5b                   	pop    ebx
c000a6bc:	c3                   	ret    
c000a6bd:	90                   	nop

c000a6be <File::write(unsigned long long, void*, int*)>:
c000a6be:	53                   	push   ebx
c000a6bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ce:	3c 19                	cmp    al,0x19
c000a6d0:	77 35                	ja     c000a707 <File::write(unsigned long long, void*, int*)+0x49>
c000a6d2:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6d9:	85 c0                	test   eax,eax
c000a6db:	74 2a                	je     c000a707 <File::write(unsigned long long, void*, int*)+0x49>
c000a6dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6e3:	85 c0                	test   eax,eax
c000a6e5:	74 20                	je     c000a707 <File::write(unsigned long long, void*, int*)+0x49>
c000a6e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6eb:	74 21                	je     c000a70e <File::write(unsigned long long, void*, int*)+0x50>
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a701:	5b                   	pop    ebx
c000a702:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a705:	ff e0                	jmp    eax
c000a707:	b8 0b 00 00 00       	mov    eax,0xb
c000a70c:	eb 05                	jmp    c000a713 <File::write(unsigned long long, void*, int*)+0x55>
c000a70e:	b8 05 00 00 00       	mov    eax,0x5
c000a713:	5b                   	pop    ebx
c000a714:	c3                   	ret    
c000a715:	90                   	nop

c000a716 <Directory::read(unsigned long long, void*, int*)>:
c000a716:	53                   	push   ebx
c000a717:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a71b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a71f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a726:	3c 19                	cmp    al,0x19
c000a728:	77 35                	ja     c000a75f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a72a:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a731:	85 c0                	test   eax,eax
c000a733:	74 2a                	je     c000a75f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a735:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a73b:	85 c0                	test   eax,eax
c000a73d:	74 20                	je     c000a75f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a73f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a743:	74 21                	je     c000a766 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a745:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a747:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a74b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a751:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a755:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a759:	5b                   	pop    ebx
c000a75a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a75d:	ff e0                	jmp    eax
c000a75f:	b8 0b 00 00 00       	mov    eax,0xb
c000a764:	eb 05                	jmp    c000a76b <Directory::read(unsigned long long, void*, int*)+0x55>
c000a766:	b8 05 00 00 00       	mov    eax,0x5
c000a76b:	5b                   	pop    ebx
c000a76c:	c3                   	ret    
c000a76d:	90                   	nop

c000a76e <Directory::write(unsigned long long, void*, int*)>:
c000a76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a772:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a779:	b8 0b 00 00 00       	mov    eax,0xb
c000a77e:	80 fa 19             	cmp    dl,0x19
c000a781:	77 18                	ja     c000a79b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a783:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a78a:	85 d2                	test   edx,edx
c000a78c:	74 0d                	je     c000a79b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a78e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a795:	19 c0                	sbb    eax,eax
c000a797:	83 e0 0a             	and    eax,0xa
c000a79a:	40                   	inc    eax
c000a79b:	c3                   	ret    

c000a79c <File::isAtty()>:
c000a79c:	31 c0                	xor    eax,eax
c000a79e:	c3                   	ret    
c000a79f:	90                   	nop

c000a7a0 <Directory::isAtty()>:
c000a7a0:	31 c0                	xor    eax,eax
c000a7a2:	c3                   	ret    
c000a7a3:	90                   	nop

c000a7a4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7a4:	b8 0a 00 00 00       	mov    eax,0xa
c000a7a9:	c3                   	ret    

c000a7aa <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7aa:	b8 0a 00 00 00       	mov    eax,0xa
c000a7af:	c3                   	ret    

c000a7b0 <Filesystem::allocateSwapfile(char const*, int)>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	31 d2                	xor    edx,edx
c000a7b4:	c3                   	ret    
c000a7b5:	90                   	nop

c000a7b6 <File::~File()>:
c000a7b6:	83 ec 0c             	sub    esp,0xc
c000a7b9:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000a7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c2:	89 10                	mov    DWORD PTR [eax],edx
c000a7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c8:	83 ec 0c             	sub    esp,0xc
c000a7cb:	50                   	push   eax
c000a7cc:	e8 53 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7d1:	83 c4 10             	add    esp,0x10
c000a7d4:	90                   	nop
c000a7d5:	83 c4 0c             	add    esp,0xc
c000a7d8:	c3                   	ret    
c000a7d9:	90                   	nop

c000a7da <File::~File()>:
c000a7da:	83 ec 0c             	sub    esp,0xc
c000a7dd:	83 ec 0c             	sub    esp,0xc
c000a7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e4:	e8 cd ff ff ff       	call   c000a7b6 <File::~File()>
c000a7e9:	83 c4 10             	add    esp,0x10
c000a7ec:	83 ec 08             	sub    esp,0x8
c000a7ef:	68 14 01 00 00       	push   0x114
c000a7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f8:	e8 3d fc ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	83 c4 0c             	add    esp,0xc
c000a803:	c3                   	ret    

c000a804 <Directory::~Directory()>:
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	ba 00 de 01 c0       	mov    edx,0xc001de00
c000a80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a810:	89 10                	mov    DWORD PTR [eax],edx
c000a812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a816:	83 ec 0c             	sub    esp,0xc
c000a819:	50                   	push   eax
c000a81a:	e8 05 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a81f:	83 c4 10             	add    esp,0x10
c000a822:	90                   	nop
c000a823:	83 c4 0c             	add    esp,0xc
c000a826:	c3                   	ret    
c000a827:	90                   	nop

c000a828 <Directory::~Directory()>:
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	83 ec 0c             	sub    esp,0xc
c000a82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a832:	e8 cd ff ff ff       	call   c000a804 <Directory::~Directory()>
c000a837:	83 c4 10             	add    esp,0x10
c000a83a:	83 ec 08             	sub    esp,0x8
c000a83d:	68 14 01 00 00       	push   0x114
c000a842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a846:	e8 ef fb ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 c4 0c             	add    esp,0xc
c000a851:	c3                   	ret    

c000a852 <Filesystem::Filesystem()>:
c000a852:	ba 7c dd 01 c0       	mov    edx,0xc001dd7c
c000a857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a85b:	89 10                	mov    DWORD PTR [eax],edx
c000a85d:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a867:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a86e:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a873:	90                   	nop
c000a874:	c3                   	ret    
c000a875:	90                   	nop

c000a876 <Filesystem::~Filesystem()>:
c000a876:	ba 7c dd 01 c0       	mov    edx,0xc001dd7c
c000a87b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a87f:	89 10                	mov    DWORD PTR [eax],edx
c000a881:	90                   	nop
c000a882:	c3                   	ret    
c000a883:	90                   	nop

c000a884 <Filesystem::~Filesystem()>:
c000a884:	83 ec 0c             	sub    esp,0xc
c000a887:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a88b:	e8 e6 ff ff ff       	call   c000a876 <Filesystem::~Filesystem()>
c000a890:	83 c4 04             	add    esp,0x4
c000a893:	83 ec 08             	sub    esp,0x8
c000a896:	6a 08                	push   0x8
c000a898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89c:	e8 99 fb ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000a8a1:	83 c4 10             	add    esp,0x10
c000a8a4:	83 c4 0c             	add    esp,0xc
c000a8a7:	c3                   	ret    

c000a8a8 <Fs::getcwd(Process*, char*, int)>:
c000a8a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8ac:	31 c0                	xor    eax,eax
c000a8ae:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a8b1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a8b5:	7d 15                	jge    c000a8cc <Fs::getcwd(Process*, char*, int)+0x24>
c000a8b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8bb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a8c2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a8c5:	84 c9                	test   cl,cl
c000a8c7:	74 06                	je     c000a8cf <Fs::getcwd(Process*, char*, int)+0x27>
c000a8c9:	40                   	inc    eax
c000a8ca:	eb e2                	jmp    c000a8ae <Fs::getcwd(Process*, char*, int)+0x6>
c000a8cc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8cf:	31 c0                	xor    eax,eax
c000a8d1:	c3                   	ret    

c000a8d2 <Fs::initVFS()>:
c000a8d2:	83 ec 18             	sub    esp,0x18
c000a8d5:	6a 08                	push   0x8
c000a8d7:	e8 dd ce ff ff       	call   c00077b9 <malloc>
c000a8dc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8df:	e8 e0 c7 00 00       	call   c00170c4 <FAT::FAT()>
c000a8e4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8eb:	e8 c9 ce ff ff       	call   c00077b9 <malloc>
c000a8f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8f3:	e8 28 d5 00 00       	call   c0017e20 <ISO9660::ISO9660()>
c000a8f8:	83 c4 1c             	add    esp,0x1c
c000a8fb:	c3                   	ret    

c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8fc:	55                   	push   ebp
c000a8fd:	57                   	push   edi
c000a8fe:	56                   	push   esi
c000a8ff:	53                   	push   ebx
c000a900:	81 ec 10 04 00 00    	sub    esp,0x410
c000a906:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a90d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a914:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a91b:	68 00 04 00 00       	push   0x400
c000a920:	6a 00                	push   0x0
c000a922:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a926:	56                   	push   esi
c000a927:	e8 a4 5b ff ff       	call   c00004d0 <memset>
c000a92c:	83 c4 10             	add    esp,0x10
c000a92f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a933:	75 0b                	jne    c000a940 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a935:	50                   	push   eax
c000a936:	50                   	push   eax
c000a937:	57                   	push   edi
c000a938:	56                   	push   esi
c000a939:	e8 c2 5c ff ff       	call   c0000600 <strcpy>
c000a93e:	eb 41                	jmp    c000a981 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a940:	8a 07                	mov    al,BYTE PTR [edi]
c000a942:	3c 5c                	cmp    al,0x5c
c000a944:	74 04                	je     c000a94a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a946:	3c 2f                	cmp    al,0x2f
c000a948:	75 18                	jne    c000a962 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a94a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a94d:	3c 60                	cmp    al,0x60
c000a94f:	7e 03                	jle    c000a954 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a951:	83 e8 20             	sub    eax,0x20
c000a954:	88 04 24             	mov    BYTE PTR [esp],al
c000a957:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a95e:	50                   	push   eax
c000a95f:	50                   	push   eax
c000a960:	eb 18                	jmp    c000a97a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a962:	50                   	push   eax
c000a963:	50                   	push   eax
c000a964:	55                   	push   ebp
c000a965:	56                   	push   esi
c000a966:	e8 95 5c ff ff       	call   c0000600 <strcpy>
c000a96b:	5a                   	pop    edx
c000a96c:	59                   	pop    ecx
c000a96d:	68 9a eb 01 c0       	push   0xc001eb9a
c000a972:	56                   	push   esi
c000a973:	e8 48 5e ff ff       	call   c00007c0 <strcat>
c000a978:	5d                   	pop    ebp
c000a979:	58                   	pop    eax
c000a97a:	57                   	push   edi
c000a97b:	56                   	push   esi
c000a97c:	e8 3f 5e ff ff       	call   c00007c0 <strcat>
c000a981:	83 c4 10             	add    esp,0x10
c000a984:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a987:	3c 60                	cmp    al,0x60
c000a989:	7e 03                	jle    c000a98e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a98b:	83 e8 20             	sub    eax,0x20
c000a98e:	88 04 24             	mov    BYTE PTR [esp],al
c000a991:	88 03                	mov    BYTE PTR [ebx],al
c000a993:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a99a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9a0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9a4:	bf 03 00 00 00       	mov    edi,0x3
c000a9a9:	b8 03 00 00 00       	mov    eax,0x3
c000a9ae:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a9b1:	84 d2                	test   dl,dl
c000a9b3:	0f 84 91 00 00 00    	je     c000aa4a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a9b9:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a9bc:	80 fa 5c             	cmp    dl,0x5c
c000a9bf:	74 05                	je     c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a9c1:	80 fa 2f             	cmp    dl,0x2f
c000a9c4:	75 12                	jne    c000a9d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9c6:	89 c5                	mov    ebp,eax
c000a9c8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9cd:	74 09                	je     c000a9d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9cf:	40                   	inc    eax
c000a9d0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9d4:	89 cf                	mov    edi,ecx
c000a9d6:	eb d6                	jmp    c000a9ae <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9d8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9dd:	75 5b                	jne    c000aa3a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9df:	80 fa 2e             	cmp    dl,0x2e
c000a9e2:	75 56                	jne    c000aa3a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9e4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9e8:	74 19                	je     c000aa03 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9ea:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9ef:	74 53                	je     c000aa44 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9f1:	89 f9                	mov    ecx,edi
c000a9f3:	41                   	inc    ecx
c000a9f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9f7:	80 fa 2f             	cmp    dl,0x2f
c000a9fa:	74 f7                	je     c000a9f3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9fc:	80 fa 5c             	cmp    dl,0x5c
c000a9ff:	74 f2                	je     c000a9f3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa01:	eb d1                	jmp    c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa03:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa08:	74 3a                	je     c000aa44 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa0a:	83 f8 03             	cmp    eax,0x3
c000aa0d:	74 c5                	je     c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa0f:	41                   	inc    ecx
c000aa10:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa13:	80 fa 2f             	cmp    dl,0x2f
c000aa16:	74 f7                	je     c000aa0f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa18:	80 fa 5c             	cmp    dl,0x5c
c000aa1b:	74 f2                	je     c000aa0f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa1d:	48                   	dec    eax
c000aa1e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa22:	75 06                	jne    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa24:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa28:	eb f3                	jmp    c000aa1d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa2a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa2e:	74 07                	je     c000aa37 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa30:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa34:	48                   	dec    eax
c000aa35:	eb f3                	jmp    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa37:	40                   	inc    eax
c000aa38:	eb 9a                	jmp    c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa3a:	80 fa 2f             	cmp    dl,0x2f
c000aa3d:	74 95                	je     c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa3f:	80 fa 5c             	cmp    dl,0x5c
c000aa42:	74 90                	je     c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa44:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa47:	40                   	inc    eax
c000aa48:	eb 8a                	jmp    c000a9d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa4a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa4e:	83 ec 0c             	sub    esp,0xc
c000aa51:	53                   	push   ebx
c000aa52:	e8 e9 5a ff ff       	call   c0000540 <strlen>
c000aa57:	83 c4 10             	add    esp,0x10
c000aa5a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa5f:	75 26                	jne    c000aa87 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa61:	83 ec 0c             	sub    esp,0xc
c000aa64:	53                   	push   ebx
c000aa65:	e8 d6 5a ff ff       	call   c0000540 <strlen>
c000aa6a:	83 c4 10             	add    esp,0x10
c000aa6d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa72:	74 26                	je     c000aa9a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa74:	83 ec 0c             	sub    esp,0xc
c000aa77:	53                   	push   ebx
c000aa78:	e8 c3 5a ff ff       	call   c0000540 <strlen>
c000aa7d:	83 c4 10             	add    esp,0x10
c000aa80:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa85:	eb c7                	jmp    c000aa4e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa87:	83 ec 0c             	sub    esp,0xc
c000aa8a:	53                   	push   ebx
c000aa8b:	e8 b0 5a ff ff       	call   c0000540 <strlen>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa98:	74 c7                	je     c000aa61 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa9a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aaa0:	5b                   	pop    ebx
c000aaa1:	5e                   	pop    esi
c000aaa2:	5f                   	pop    edi
c000aaa3:	5d                   	pop    ebp
c000aaa4:	c3                   	ret    
c000aaa5:	90                   	nop

c000aaa6 <File::File(char const*, Process*)>:
c000aaa6:	83 ec 0c             	sub    esp,0xc
c000aaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	6a 00                	push   0x0
c000aab2:	50                   	push   eax
c000aab3:	e8 8a e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aab8:	83 c4 10             	add    esp,0x10
c000aabb:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000aac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac4:	89 10                	mov    DWORD PTR [eax],edx
c000aac6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aaca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad4:	83 c0 0d             	add    eax,0xd
c000aad7:	83 ec 04             	sub    esp,0x4
c000aada:	52                   	push   edx
c000aadb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadf:	50                   	push   eax
c000aae0:	e8 17 fe ff ff       	call   c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)>
c000aae5:	83 c4 10             	add    esp,0x10
c000aae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aaef:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab00:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab08:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab0e:	25 ff 00 00 00       	and    eax,0xff
c000ab13:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab1a:	85 c0                	test   eax,eax
c000ab1c:	74 42                	je     c000ab60 <File::File(char const*, Process*)+0xba>
c000ab1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab22:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab28:	25 ff 00 00 00       	and    eax,0xff
c000ab2d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab34:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab3a:	85 c0                	test   eax,eax
c000ab3c:	75 22                	jne    c000ab60 <File::File(char const*, Process*)+0xba>
c000ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab42:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab48:	25 ff 00 00 00       	and    eax,0xff
c000ab4d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab54:	83 ec 0c             	sub    esp,0xc
c000ab57:	50                   	push   eax
c000ab58:	e8 39 20 00 00       	call   c000cb96 <LogicalDisk::mount()>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	90                   	nop
c000ab61:	83 c4 0c             	add    esp,0xc
c000ab64:	c3                   	ret    
c000ab65:	90                   	nop

c000ab66 <File::open(FileOpenMode)>:
c000ab66:	53                   	push   ebx
c000ab67:	b8 0b 00 00 00       	mov    eax,0xb
c000ab6c:	83 ec 08             	sub    esp,0x8
c000ab6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab73:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab7a:	80 fa 19             	cmp    dl,0x19
c000ab7d:	77 40                	ja     c000abbf <File::open(FileOpenMode)+0x59>
c000ab7f:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ab86:	85 d2                	test   edx,edx
c000ab88:	74 35                	je     c000abbf <File::open(FileOpenMode)+0x59>
c000ab8a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab90:	85 d2                	test   edx,edx
c000ab92:	74 2b                	je     c000abbf <File::open(FileOpenMode)+0x59>
c000ab94:	b8 06 00 00 00       	mov    eax,0x6
c000ab99:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab9d:	75 20                	jne    c000abbf <File::open(FileOpenMode)+0x59>
c000ab9f:	8b 02                	mov    eax,DWORD PTR [edx]
c000aba1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abab:	51                   	push   ecx
c000abac:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abaf:	51                   	push   ecx
c000abb0:	52                   	push   edx
c000abb1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	85 c0                	test   eax,eax
c000abb9:	75 04                	jne    c000abbf <File::open(FileOpenMode)+0x59>
c000abbb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000abbf:	83 c4 08             	add    esp,0x8
c000abc2:	5b                   	pop    ebx
c000abc3:	c3                   	ret    

c000abc4 <File::close()>:
c000abc4:	53                   	push   ebx
c000abc5:	b8 0b 00 00 00       	mov    eax,0xb
c000abca:	83 ec 08             	sub    esp,0x8
c000abcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abd1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abd8:	80 fa 19             	cmp    dl,0x19
c000abdb:	77 41                	ja     c000ac1e <File::close()+0x5a>
c000abdd:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abe4:	85 db                	test   ebx,ebx
c000abe6:	74 36                	je     c000ac1e <File::close()+0x5a>
c000abe8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000abef:	74 2d                	je     c000ac1e <File::close()+0x5a>
c000abf1:	b8 05 00 00 00       	mov    eax,0x5
c000abf6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abfa:	74 22                	je     c000ac1e <File::close()+0x5a>
c000abfc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac00:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac0d:	53                   	push   ebx
c000ac0e:	53                   	push   ebx
c000ac0f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac11:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac17:	50                   	push   eax
c000ac18:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac1b:	83 c4 10             	add    esp,0x10
c000ac1e:	83 c4 08             	add    esp,0x8
c000ac21:	5b                   	pop    ebx
c000ac22:	c3                   	ret    
c000ac23:	90                   	nop

c000ac24 <File::seek(unsigned long long)>:
c000ac24:	56                   	push   esi
c000ac25:	53                   	push   ebx
c000ac26:	b8 0b 00 00 00       	mov    eax,0xb
c000ac2b:	51                   	push   ecx
c000ac2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac34:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac3f:	80 fa 19             	cmp    dl,0x19
c000ac42:	77 31                	ja     c000ac75 <File::seek(unsigned long long)+0x51>
c000ac44:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac4b:	85 d2                	test   edx,edx
c000ac4d:	74 26                	je     c000ac75 <File::seek(unsigned long long)+0x51>
c000ac4f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac55:	85 d2                	test   edx,edx
c000ac57:	74 1c                	je     c000ac75 <File::seek(unsigned long long)+0x51>
c000ac59:	b8 05 00 00 00       	mov    eax,0x5
c000ac5e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac62:	74 11                	je     c000ac75 <File::seek(unsigned long long)+0x51>
c000ac64:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac66:	53                   	push   ebx
c000ac67:	51                   	push   ecx
c000ac68:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac6e:	52                   	push   edx
c000ac6f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	5a                   	pop    edx
c000ac76:	5b                   	pop    ebx
c000ac77:	5e                   	pop    esi
c000ac78:	c3                   	ret    
c000ac79:	90                   	nop

c000ac7a <File::tell(unsigned long long*)>:
c000ac7a:	83 ec 0c             	sub    esp,0xc
c000ac7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac86:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac8d:	80 fa 19             	cmp    dl,0x19
c000ac90:	77 34                	ja     c000acc6 <File::tell(unsigned long long*)+0x4c>
c000ac92:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac99:	85 d2                	test   edx,edx
c000ac9b:	74 29                	je     c000acc6 <File::tell(unsigned long long*)+0x4c>
c000ac9d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aca3:	85 d2                	test   edx,edx
c000aca5:	74 1f                	je     c000acc6 <File::tell(unsigned long long*)+0x4c>
c000aca7:	b8 05 00 00 00       	mov    eax,0x5
c000acac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acb0:	74 14                	je     c000acc6 <File::tell(unsigned long long*)+0x4c>
c000acb2:	50                   	push   eax
c000acb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000acb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acb9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acbf:	52                   	push   edx
c000acc0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000acc3:	83 c4 10             	add    esp,0x10
c000acc6:	83 c4 0c             	add    esp,0xc
c000acc9:	c3                   	ret    

c000acca <File::rewind()>:
c000acca:	83 ec 10             	sub    esp,0x10
c000accd:	6a 00                	push   0x0
c000accf:	6a 00                	push   0x0
c000acd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acd5:	e8 4a ff ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c000acda:	83 c4 1c             	add    esp,0x1c
c000acdd:	c3                   	ret    

c000acde <File::unlink()>:
c000acde:	83 ec 0c             	sub    esp,0xc
c000ace1:	b8 0b 00 00 00       	mov    eax,0xb
c000ace6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acf1:	80 f9 19             	cmp    cl,0x19
c000acf4:	77 2f                	ja     c000ad25 <File::unlink()+0x47>
c000acf6:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000acfd:	85 c9                	test   ecx,ecx
c000acff:	74 24                	je     c000ad25 <File::unlink()+0x47>
c000ad01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad07:	85 c9                	test   ecx,ecx
c000ad09:	74 1a                	je     c000ad25 <File::unlink()+0x47>
c000ad0b:	b8 06 00 00 00       	mov    eax,0x6
c000ad10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad14:	75 0f                	jne    c000ad25 <File::unlink()+0x47>
c000ad16:	83 c2 0d             	add    edx,0xd
c000ad19:	50                   	push   eax
c000ad1a:	50                   	push   eax
c000ad1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad1d:	52                   	push   edx
c000ad1e:	51                   	push   ecx
c000ad1f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad22:	83 c4 10             	add    esp,0x10
c000ad25:	83 c4 0c             	add    esp,0xc
c000ad28:	c3                   	ret    
c000ad29:	90                   	nop

c000ad2a <File::rename(char const*)>:
c000ad2a:	83 ec 0c             	sub    esp,0xc
c000ad2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ad32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad3d:	80 f9 19             	cmp    cl,0x19
c000ad40:	77 32                	ja     c000ad74 <File::rename(char const*)+0x4a>
c000ad42:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad49:	85 c9                	test   ecx,ecx
c000ad4b:	74 27                	je     c000ad74 <File::rename(char const*)+0x4a>
c000ad4d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad53:	85 c9                	test   ecx,ecx
c000ad55:	74 1d                	je     c000ad74 <File::rename(char const*)+0x4a>
c000ad57:	b8 06 00 00 00       	mov    eax,0x6
c000ad5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad60:	75 12                	jne    c000ad74 <File::rename(char const*)+0x4a>
c000ad62:	83 c2 0d             	add    edx,0xd
c000ad65:	50                   	push   eax
c000ad66:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad6c:	52                   	push   edx
c000ad6d:	51                   	push   ecx
c000ad6e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad71:	83 c4 10             	add    esp,0x10
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	c3                   	ret    

c000ad78 <File::chfatattr(unsigned char, unsigned char)>:
c000ad78:	57                   	push   edi
c000ad79:	b8 0b 00 00 00       	mov    eax,0xb
c000ad7e:	56                   	push   esi
c000ad7f:	53                   	push   ebx
c000ad80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad93:	80 f9 19             	cmp    cl,0x19
c000ad96:	77 37                	ja     c000adcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad98:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad9f:	85 c9                	test   ecx,ecx
c000ada1:	74 2c                	je     c000adcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ada3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada9:	85 c9                	test   ecx,ecx
c000adab:	74 22                	je     c000adcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adad:	b8 06 00 00 00       	mov    eax,0x6
c000adb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb6:	75 17                	jne    c000adcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adb8:	8b 39                	mov    edi,DWORD PTR [ecx]
c000adba:	89 f0                	mov    eax,esi
c000adbc:	83 c2 0d             	add    edx,0xd
c000adbf:	0f b6 f0             	movzx  esi,al
c000adc2:	0f b6 db             	movzx  ebx,bl
c000adc5:	56                   	push   esi
c000adc6:	53                   	push   ebx
c000adc7:	52                   	push   edx
c000adc8:	51                   	push   ecx
c000adc9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000adcc:	83 c4 10             	add    esp,0x10
c000adcf:	5b                   	pop    ebx
c000add0:	5e                   	pop    esi
c000add1:	5f                   	pop    edi
c000add2:	c3                   	ret    
c000add3:	90                   	nop

c000add4 <File::exists()>:
c000add4:	83 ec 0c             	sub    esp,0xc
c000add7:	31 c0                	xor    eax,eax
c000add9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000addd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ade4:	80 f9 19             	cmp    cl,0x19
c000ade7:	77 24                	ja     c000ae0d <File::exists()+0x39>
c000ade9:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adf0:	85 c9                	test   ecx,ecx
c000adf2:	74 19                	je     c000ae0d <File::exists()+0x39>
c000adf4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adfa:	85 c9                	test   ecx,ecx
c000adfc:	74 0f                	je     c000ae0d <File::exists()+0x39>
c000adfe:	83 c2 0d             	add    edx,0xd
c000ae01:	50                   	push   eax
c000ae02:	50                   	push   eax
c000ae03:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae05:	52                   	push   edx
c000ae06:	51                   	push   ecx
c000ae07:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae0a:	83 c4 10             	add    esp,0x10
c000ae0d:	83 c4 0c             	add    esp,0xc
c000ae10:	c3                   	ret    
c000ae11:	90                   	nop

c000ae12 <File::stat(unsigned long long*, bool*)>:
c000ae12:	56                   	push   esi
c000ae13:	53                   	push   ebx
c000ae14:	50                   	push   eax
c000ae15:	b8 0b 00 00 00       	mov    eax,0xb
c000ae1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae1e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae2d:	80 f9 19             	cmp    cl,0x19
c000ae30:	77 3d                	ja     c000ae6f <File::stat(unsigned long long*, bool*)+0x5d>
c000ae32:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae39:	85 c9                	test   ecx,ecx
c000ae3b:	74 32                	je     c000ae6f <File::stat(unsigned long long*, bool*)+0x5d>
c000ae3d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae43:	85 c9                	test   ecx,ecx
c000ae45:	74 28                	je     c000ae6f <File::stat(unsigned long long*, bool*)+0x5d>
c000ae47:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae49:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae4d:	74 13                	je     c000ae62 <File::stat(unsigned long long*, bool*)+0x50>
c000ae4f:	83 ec 04             	sub    esp,0x4
c000ae52:	56                   	push   esi
c000ae53:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae59:	51                   	push   ecx
c000ae5a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae5d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae60:	eb 0a                	jmp    c000ae6c <File::stat(unsigned long long*, bool*)+0x5a>
c000ae62:	53                   	push   ebx
c000ae63:	83 c2 0d             	add    edx,0xd
c000ae66:	56                   	push   esi
c000ae67:	52                   	push   edx
c000ae68:	51                   	push   ecx
c000ae69:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	5a                   	pop    edx
c000ae70:	5b                   	pop    ebx
c000ae71:	5e                   	pop    esi
c000ae72:	c3                   	ret    

c000ae73 <Fs::setcwd(Process*, char*)>:
c000ae73:	55                   	push   ebp
c000ae74:	57                   	push   edi
c000ae75:	56                   	push   esi
c000ae76:	53                   	push   ebx
c000ae77:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae7d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae84:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae8a:	57                   	push   edi
c000ae8b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae92:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae96:	56                   	push   esi
c000ae97:	e8 60 fa ff ff       	call   c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae9c:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae9f:	e8 9c 56 ff ff       	call   c0000540 <strlen>
c000aea4:	83 c4 10             	add    esp,0x10
c000aea7:	83 f8 02             	cmp    eax,0x2
c000aeaa:	77 15                	ja     c000aec1 <Fs::setcwd(Process*, char*)+0x4e>
c000aeac:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000aeb1:	83 eb 41             	sub    ebx,0x41
c000aeb4:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000aebb:	85 c0                	test   eax,eax
c000aebd:	75 1c                	jne    c000aedb <Fs::setcwd(Process*, char*)+0x68>
c000aebf:	eb 2f                	jmp    c000aef0 <Fs::setcwd(Process*, char*)+0x7d>
c000aec1:	83 ec 0c             	sub    esp,0xc
c000aec4:	56                   	push   esi
c000aec5:	e8 76 56 ff ff       	call   c0000540 <strlen>
c000aeca:	83 c4 10             	add    esp,0x10
c000aecd:	83 f8 03             	cmp    eax,0x3
c000aed0:	75 57                	jne    c000af29 <Fs::setcwd(Process*, char*)+0xb6>
c000aed2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aed7:	75 50                	jne    c000af29 <Fs::setcwd(Process*, char*)+0xb6>
c000aed9:	eb d1                	jmp    c000aeac <Fs::setcwd(Process*, char*)+0x39>
c000aedb:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000aee2:	75 0c                	jne    c000aef0 <Fs::setcwd(Process*, char*)+0x7d>
c000aee4:	83 ec 0c             	sub    esp,0xc
c000aee7:	50                   	push   eax
c000aee8:	e8 a9 1c 00 00       	call   c000cb96 <LogicalDisk::mount()>
c000aeed:	83 c4 10             	add    esp,0x10
c000aef0:	b8 03 00 00 00       	mov    eax,0x3
c000aef5:	83 fb 19             	cmp    ebx,0x19
c000aef8:	0f 87 c6 00 00 00    	ja     c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000aefe:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af05:	b8 05 00 00 00       	mov    eax,0x5
c000af0a:	85 d2                	test   edx,edx
c000af0c:	0f 84 b2 00 00 00    	je     c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000af12:	b8 06 00 00 00       	mov    eax,0x6
c000af17:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af1e:	0f 85 92 00 00 00    	jne    c000afb6 <Fs::setcwd(Process*, char*)+0x143>
c000af24:	e9 9b 00 00 00       	jmp    c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000af29:	83 ec 0c             	sub    esp,0xc
c000af2c:	68 14 01 00 00       	push   0x114
c000af31:	e8 83 c8 ff ff       	call   c00077b9 <malloc>
c000af36:	83 c4 0c             	add    esp,0xc
c000af39:	89 c3                	mov    ebx,eax
c000af3b:	55                   	push   ebp
c000af3c:	56                   	push   esi
c000af3d:	50                   	push   eax
c000af3e:	e8 63 fb ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c000af43:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af48:	83 c4 0c             	add    esp,0xc
c000af4b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af4f:	50                   	push   eax
c000af50:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af54:	50                   	push   eax
c000af55:	53                   	push   ebx
c000af56:	e8 b7 fe ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	83 f8 02             	cmp    eax,0x2
c000af61:	74 04                	je     c000af67 <Fs::setcwd(Process*, char*)+0xf4>
c000af63:	85 c0                	test   eax,eax
c000af65:	74 1c                	je     c000af83 <Fs::setcwd(Process*, char*)+0x110>
c000af67:	b8 01 00 00 00       	mov    eax,0x1
c000af6c:	85 db                	test   ebx,ebx
c000af6e:	74 54                	je     c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000af70:	83 ec 0c             	sub    esp,0xc
c000af73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af75:	53                   	push   ebx
c000af76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af79:	83 c4 10             	add    esp,0x10
c000af7c:	b8 01 00 00 00       	mov    eax,0x1
c000af81:	eb 41                	jmp    c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000af83:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af88:	75 1c                	jne    c000afa6 <Fs::setcwd(Process*, char*)+0x133>
c000af8a:	b8 02 00 00 00       	mov    eax,0x2
c000af8f:	85 db                	test   ebx,ebx
c000af91:	74 31                	je     c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000af93:	83 ec 0c             	sub    esp,0xc
c000af96:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af98:	53                   	push   ebx
c000af99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af9c:	83 c4 10             	add    esp,0x10
c000af9f:	b8 02 00 00 00       	mov    eax,0x2
c000afa4:	eb 1e                	jmp    c000afc4 <Fs::setcwd(Process*, char*)+0x151>
c000afa6:	85 db                	test   ebx,ebx
c000afa8:	74 0c                	je     c000afb6 <Fs::setcwd(Process*, char*)+0x143>
c000afaa:	83 ec 0c             	sub    esp,0xc
c000afad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afaf:	53                   	push   ebx
c000afb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	50                   	push   eax
c000afb7:	50                   	push   eax
c000afb8:	56                   	push   esi
c000afb9:	57                   	push   edi
c000afba:	e8 41 56 ff ff       	call   c0000600 <strcpy>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	31 c0                	xor    eax,eax
c000afc4:	81 c4 1c 02 00 00    	add    esp,0x21c
c000afca:	5b                   	pop    ebx
c000afcb:	5e                   	pop    esi
c000afcc:	5f                   	pop    edi
c000afcd:	5d                   	pop    ebp
c000afce:	c3                   	ret    
c000afcf:	90                   	nop

c000afd0 <Directory::Directory(char const*, Process*)>:
c000afd0:	83 ec 0c             	sub    esp,0xc
c000afd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd7:	83 ec 08             	sub    esp,0x8
c000afda:	6a 00                	push   0x0
c000afdc:	50                   	push   eax
c000afdd:	e8 60 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000afe2:	83 c4 10             	add    esp,0x10
c000afe5:	ba 00 de 01 c0       	mov    edx,0xc001de00
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	89 10                	mov    DWORD PTR [eax],edx
c000aff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aff4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000affa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affe:	83 c0 0d             	add    eax,0xd
c000b001:	83 ec 04             	sub    esp,0x4
c000b004:	52                   	push   edx
c000b005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b009:	50                   	push   eax
c000b00a:	e8 ed f8 ff ff       	call   c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)>
c000b00f:	83 c4 10             	add    esp,0x10
c000b012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b016:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b019:	8d 50 bf             	lea    edx,[eax-0x41]
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b032:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b038:	25 ff 00 00 00       	and    eax,0xff
c000b03d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b044:	85 c0                	test   eax,eax
c000b046:	74 42                	je     c000b08a <Directory::Directory(char const*, Process*)+0xba>
c000b048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b052:	25 ff 00 00 00       	and    eax,0xff
c000b057:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b05e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b064:	85 c0                	test   eax,eax
c000b066:	75 22                	jne    c000b08a <Directory::Directory(char const*, Process*)+0xba>
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b072:	25 ff 00 00 00       	and    eax,0xff
c000b077:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b07e:	83 ec 0c             	sub    esp,0xc
c000b081:	50                   	push   eax
c000b082:	e8 0f 1b 00 00       	call   c000cb96 <LogicalDisk::mount()>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	90                   	nop
c000b08b:	83 c4 0c             	add    esp,0xc
c000b08e:	c3                   	ret    
c000b08f:	90                   	nop

c000b090 <Directory::open()>:
c000b090:	53                   	push   ebx
c000b091:	b8 0b 00 00 00       	mov    eax,0xb
c000b096:	83 ec 08             	sub    esp,0x8
c000b099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b09d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0a4:	80 fa 19             	cmp    dl,0x19
c000b0a7:	77 3d                	ja     c000b0e6 <Directory::open()+0x56>
c000b0a9:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0b0:	85 d2                	test   edx,edx
c000b0b2:	74 32                	je     c000b0e6 <Directory::open()+0x56>
c000b0b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b0ba:	85 d2                	test   edx,edx
c000b0bc:	74 28                	je     c000b0e6 <Directory::open()+0x56>
c000b0be:	b8 06 00 00 00       	mov    eax,0x6
c000b0c3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0c7:	75 1d                	jne    c000b0e6 <Directory::open()+0x56>
c000b0c9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0cf:	50                   	push   eax
c000b0d0:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0d2:	51                   	push   ecx
c000b0d3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0d6:	51                   	push   ecx
c000b0d7:	52                   	push   edx
c000b0d8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	85 c0                	test   eax,eax
c000b0e0:	75 04                	jne    c000b0e6 <Directory::open()+0x56>
c000b0e2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b0e6:	83 c4 08             	add    esp,0x8
c000b0e9:	5b                   	pop    ebx
c000b0ea:	c3                   	ret    
c000b0eb:	90                   	nop

c000b0ec <Directory::close()>:
c000b0ec:	53                   	push   ebx
c000b0ed:	b8 0b 00 00 00       	mov    eax,0xb
c000b0f2:	83 ec 08             	sub    esp,0x8
c000b0f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0f9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b100:	80 fa 19             	cmp    dl,0x19
c000b103:	77 41                	ja     c000b146 <Directory::close()+0x5a>
c000b105:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b10c:	85 db                	test   ebx,ebx
c000b10e:	74 36                	je     c000b146 <Directory::close()+0x5a>
c000b110:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b117:	74 2d                	je     c000b146 <Directory::close()+0x5a>
c000b119:	b8 05 00 00 00       	mov    eax,0x5
c000b11e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b122:	74 22                	je     c000b146 <Directory::close()+0x5a>
c000b124:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b128:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b12f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b135:	53                   	push   ebx
c000b136:	53                   	push   ebx
c000b137:	8b 10                	mov    edx,DWORD PTR [eax]
c000b139:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b13f:	50                   	push   eax
c000b140:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	83 c4 08             	add    esp,0x8
c000b149:	5b                   	pop    ebx
c000b14a:	c3                   	ret    
c000b14b:	90                   	nop

c000b14c <Directory::unlink()>:
c000b14c:	83 ec 0c             	sub    esp,0xc
c000b14f:	b8 0b 00 00 00       	mov    eax,0xb
c000b154:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b158:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15f:	80 f9 19             	cmp    cl,0x19
c000b162:	77 2f                	ja     c000b193 <Directory::unlink()+0x47>
c000b164:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b16b:	85 c9                	test   ecx,ecx
c000b16d:	74 24                	je     c000b193 <Directory::unlink()+0x47>
c000b16f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b175:	85 c9                	test   ecx,ecx
c000b177:	74 1a                	je     c000b193 <Directory::unlink()+0x47>
c000b179:	b8 06 00 00 00       	mov    eax,0x6
c000b17e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b182:	75 0f                	jne    c000b193 <Directory::unlink()+0x47>
c000b184:	83 c2 0d             	add    edx,0xd
c000b187:	50                   	push   eax
c000b188:	50                   	push   eax
c000b189:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b18b:	52                   	push   edx
c000b18c:	51                   	push   ecx
c000b18d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	83 c4 0c             	add    esp,0xc
c000b196:	c3                   	ret    
c000b197:	90                   	nop

c000b198 <Directory::rename(char const*)>:
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ab:	80 f9 19             	cmp    cl,0x19
c000b1ae:	77 32                	ja     c000b1e2 <Directory::rename(char const*)+0x4a>
c000b1b0:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1b7:	85 c9                	test   ecx,ecx
c000b1b9:	74 27                	je     c000b1e2 <Directory::rename(char const*)+0x4a>
c000b1bb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1c1:	85 c9                	test   ecx,ecx
c000b1c3:	74 1d                	je     c000b1e2 <Directory::rename(char const*)+0x4a>
c000b1c5:	b8 06 00 00 00       	mov    eax,0x6
c000b1ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ce:	75 12                	jne    c000b1e2 <Directory::rename(char const*)+0x4a>
c000b1d0:	83 c2 0d             	add    edx,0xd
c000b1d3:	50                   	push   eax
c000b1d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1da:	52                   	push   edx
c000b1db:	51                   	push   ecx
c000b1dc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	83 c4 0c             	add    esp,0xc
c000b1e5:	c3                   	ret    

c000b1e6 <Directory::exists()>:
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	31 c0                	xor    eax,eax
c000b1eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1ef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1f6:	80 f9 19             	cmp    cl,0x19
c000b1f9:	77 24                	ja     c000b21f <Directory::exists()+0x39>
c000b1fb:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b202:	85 c9                	test   ecx,ecx
c000b204:	74 19                	je     c000b21f <Directory::exists()+0x39>
c000b206:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b20c:	85 c9                	test   ecx,ecx
c000b20e:	74 0f                	je     c000b21f <Directory::exists()+0x39>
c000b210:	83 c2 0d             	add    edx,0xd
c000b213:	50                   	push   eax
c000b214:	50                   	push   eax
c000b215:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b217:	52                   	push   edx
c000b218:	51                   	push   ecx
c000b219:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	83 c4 0c             	add    esp,0xc
c000b222:	c3                   	ret    
c000b223:	90                   	nop

c000b224 <Directory::read(dirent*)>:
c000b224:	83 ec 1c             	sub    esp,0x1c
c000b227:	b8 0b 00 00 00       	mov    eax,0xb
c000b22c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b230:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b237:	80 fa 19             	cmp    dl,0x19
c000b23a:	77 30                	ja     c000b26c <Directory::read(dirent*)+0x48>
c000b23c:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b243:	85 d2                	test   edx,edx
c000b245:	74 25                	je     c000b26c <Directory::read(dirent*)+0x48>
c000b247:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b24e:	74 1c                	je     c000b26c <Directory::read(dirent*)+0x48>
c000b250:	83 ec 0c             	sub    esp,0xc
c000b253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b255:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b259:	52                   	push   edx
c000b25a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25e:	6a 00                	push   0x0
c000b260:	68 10 01 00 00       	push   0x110
c000b265:	51                   	push   ecx
c000b266:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b269:	83 c4 20             	add    esp,0x20
c000b26c:	83 c4 1c             	add    esp,0x1c
c000b26f:	c3                   	ret    

c000b270 <Directory::create()>:
c000b270:	83 ec 0c             	sub    esp,0xc
c000b273:	b8 0b 00 00 00       	mov    eax,0xb
c000b278:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b283:	80 f9 19             	cmp    cl,0x19
c000b286:	77 2f                	ja     c000b2b7 <Directory::create()+0x47>
c000b288:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b28f:	85 c9                	test   ecx,ecx
c000b291:	74 24                	je     c000b2b7 <Directory::create()+0x47>
c000b293:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b299:	85 c9                	test   ecx,ecx
c000b29b:	74 1a                	je     c000b2b7 <Directory::create()+0x47>
c000b29d:	b8 06 00 00 00       	mov    eax,0x6
c000b2a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a6:	75 0f                	jne    c000b2b7 <Directory::create()+0x47>
c000b2a8:	83 c2 0d             	add    edx,0xd
c000b2ab:	50                   	push   eax
c000b2ac:	50                   	push   eax
c000b2ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2af:	52                   	push   edx
c000b2b0:	51                   	push   ecx
c000b2b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	83 c4 0c             	add    esp,0xc
c000b2ba:	c3                   	ret    
c000b2bb:	90                   	nop

c000b2bc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b2bc:	b8 0a 00 00 00       	mov    eax,0xa
c000b2c1:	c3                   	ret    
c000b2c2:	66 90                	xchg   ax,ax

c000b2c4 <Bus::Bus(char const*)>:
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2cb:	83 ec 08             	sub    esp,0x8
c000b2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d2:	50                   	push   eax
c000b2d3:	e8 30 08 00 00       	call   c000bb08 <Device::Device(char const*)>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000b2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e4:	89 10                	mov    DWORD PTR [eax],edx
c000b2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ea:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2f4:	90                   	nop
c000b2f5:	83 c4 0c             	add    esp,0xc
c000b2f8:	c3                   	ret    
c000b2f9:	90                   	nop
c000b2fa:	66 90                	xchg   ax,ax

c000b2fc <Bus::~Bus()>:
c000b2fc:	83 ec 0c             	sub    esp,0xc
c000b2ff:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b308:	89 10                	mov    DWORD PTR [eax],edx
c000b30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	50                   	push   eax
c000b312:	e8 5b 05 00 00       	call   c000b872 <Device::~Device()>
c000b317:	83 c4 10             	add    esp,0x10
c000b31a:	90                   	nop
c000b31b:	83 c4 0c             	add    esp,0xc
c000b31e:	c3                   	ret    
c000b31f:	90                   	nop

c000b320 <Bus::~Bus()>:
c000b320:	83 ec 0c             	sub    esp,0xc
c000b323:	83 ec 0c             	sub    esp,0xc
c000b326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b32a:	e8 cd ff ff ff       	call   c000b2fc <Bus::~Bus()>
c000b32f:	83 c4 10             	add    esp,0x10
c000b332:	83 ec 08             	sub    esp,0x8
c000b335:	68 58 01 00 00       	push   0x158
c000b33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b33e:	e8 f7 f0 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000b343:	83 c4 10             	add    esp,0x10
c000b346:	83 c4 0c             	add    esp,0xc
c000b349:	c3                   	ret    

c000b34a <beepThread(void*)>:
c000b34a:	83 ec 0c             	sub    esp,0xc
c000b34d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b356:	48                   	dec    eax
c000b357:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b35c:	75 01                	jne    c000b35f <beepThread(void*)+0x15>
c000b35e:	fb                   	sti    
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	6b c2 0a             	imul   eax,edx,0xa
c000b365:	50                   	push   eax
c000b366:	e8 3d 87 00 00       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c000b36b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b372:	e8 e3 a4 00 00       	call   c001585a <HalMakeBeep(int)>
c000b377:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b37f:	83 c4 1c             	add    esp,0x1c
c000b382:	e9 1d 86 00 00       	jmp    c00139a4 <blockTask(TaskState)>

c000b387 <Krnl::beep(int, int, bool)>:
c000b387:	56                   	push   esi
c000b388:	53                   	push   ebx
c000b389:	83 ec 10             	sub    esp,0x10
c000b38c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b398:	e8 bd a4 00 00       	call   c001585a <HalMakeBeep(int)>
c000b39d:	83 c4 10             	add    esp,0x10
c000b3a0:	89 f0                	mov    eax,esi
c000b3a2:	84 c0                	test   al,al
c000b3a4:	74 1e                	je     c000b3c4 <Krnl::beep(int, int, bool)+0x3d>
c000b3a6:	83 ec 0c             	sub    esp,0xc
c000b3a9:	6b db 0a             	imul   ebx,ebx,0xa
c000b3ac:	53                   	push   ebx
c000b3ad:	e8 f6 86 00 00       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c000b3b2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b3ba:	83 c4 14             	add    esp,0x14
c000b3bd:	5b                   	pop    ebx
c000b3be:	5e                   	pop    esi
c000b3bf:	e9 96 a4 00 00       	jmp    c001585a <HalMakeBeep(int)>
c000b3c4:	68 e6 00 00 00       	push   0xe6
c000b3c9:	53                   	push   ebx
c000b3ca:	68 4a b3 00 c0       	push   0xc000b34a
c000b3cf:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3d5:	e8 ae 81 00 00       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c000b3da:	83 c4 14             	add    esp,0x14
c000b3dd:	5b                   	pop    ebx
c000b3de:	5e                   	pop    esi
c000b3df:	c3                   	ret    

c000b3e0 <User::loadClockSettings(int)>:
c000b3e0:	53                   	push   ebx
c000b3e1:	83 ec 14             	sub    esp,0x14
c000b3e4:	68 14 01 00 00       	push   0x114
c000b3e9:	e8 cb c3 ff ff       	call   c00077b9 <malloc>
c000b3ee:	83 c4 0c             	add    esp,0xc
c000b3f1:	89 c3                	mov    ebx,eax
c000b3f3:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3f9:	68 40 de 01 c0       	push   0xc001de40
c000b3fe:	50                   	push   eax
c000b3ff:	e8 a2 f6 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c000b404:	58                   	pop    eax
c000b405:	5a                   	pop    edx
c000b406:	6a 01                	push   0x1
c000b408:	53                   	push   ebx
c000b409:	e8 58 f7 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c000b40e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b411:	e8 ae f7 ff ff       	call   c000abc4 <File::close()>
c000b416:	83 c4 10             	add    esp,0x10
c000b419:	85 db                	test   ebx,ebx
c000b41b:	74 0f                	je     c000b42c <User::loadClockSettings(int)+0x4c>
c000b41d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b423:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b426:	83 c4 08             	add    esp,0x8
c000b429:	5b                   	pop    ebx
c000b42a:	ff e0                	jmp    eax
c000b42c:	83 c4 08             	add    esp,0x8
c000b42f:	5b                   	pop    ebx
c000b430:	c3                   	ret    
c000b431:	90                   	nop

c000b432 <Clock::Clock(char const*)>:
c000b432:	83 ec 0c             	sub    esp,0xc
c000b435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b439:	83 ec 08             	sub    esp,0x8
c000b43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b440:	50                   	push   eax
c000b441:	e8 c2 06 00 00       	call   c000bb08 <Device::Device(char const*)>
c000b446:	83 c4 10             	add    esp,0x10
c000b449:	ba 68 de 01 c0       	mov    edx,0xc001de68
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	89 10                	mov    DWORD PTR [eax],edx
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b462:	90                   	nop
c000b463:	83 c4 0c             	add    esp,0xc
c000b466:	c3                   	ret    
c000b467:	90                   	nop

c000b468 <Clock::~Clock()>:
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	ba 68 de 01 c0       	mov    edx,0xc001de68
c000b470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b474:	89 10                	mov    DWORD PTR [eax],edx
c000b476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	50                   	push   eax
c000b47e:	e8 ef 03 00 00       	call   c000b872 <Device::~Device()>
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	90                   	nop
c000b487:	83 c4 0c             	add    esp,0xc
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <Clock::~Clock()>:
c000b48c:	83 ec 0c             	sub    esp,0xc
c000b48f:	83 ec 0c             	sub    esp,0xc
c000b492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b496:	e8 cd ff ff ff       	call   c000b468 <Clock::~Clock()>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	83 ec 08             	sub    esp,0x8
c000b4a1:	68 58 01 00 00       	push   0x158
c000b4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4aa:	e8 8b ef ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	83 c4 0c             	add    esp,0xc
c000b4b5:	c3                   	ret    

c000b4b6 <Clock::timeInSecondsLocal()>:
c000b4b6:	53                   	push   ebx
c000b4b7:	83 ec 14             	sub    esp,0x14
c000b4ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4be:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4c0:	50                   	push   eax
c000b4c1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b4c4:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b4cb:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b4d1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4d7:	89 cb                	mov    ebx,ecx
c000b4d9:	c1 fb 1f             	sar    ebx,0x1f
c000b4dc:	01 c8                	add    eax,ecx
c000b4de:	11 da                	adc    edx,ebx
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	31 c9                	xor    ecx,ecx
c000b4e5:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b4ec:	74 05                	je     c000b4f3 <Clock::timeInSecondsLocal()+0x3d>
c000b4ee:	b9 08 07 00 00       	mov    ecx,0x708
c000b4f3:	31 db                	xor    ebx,ebx
c000b4f5:	01 c8                	add    eax,ecx
c000b4f7:	11 da                	adc    edx,ebx
c000b4f9:	83 c4 08             	add    esp,0x8
c000b4fc:	5b                   	pop    ebx
c000b4fd:	c3                   	ret    

c000b4fe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4fe:	57                   	push   edi
c000b4ff:	56                   	push   esi
c000b500:	53                   	push   ebx
c000b501:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b505:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b509:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b50b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b50f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b512:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b519:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b51f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b525:	99                   	cdq    
c000b526:	29 c6                	sub    esi,eax
c000b528:	19 d7                	sbb    edi,edx
c000b52a:	89 f0                	mov    eax,esi
c000b52c:	89 fa                	mov    edx,edi
c000b52e:	31 f6                	xor    esi,esi
c000b530:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b537:	74 05                	je     c000b53e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b539:	be 08 07 00 00       	mov    esi,0x708
c000b53e:	31 ff                	xor    edi,edi
c000b540:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b544:	29 f0                	sub    eax,esi
c000b546:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b54a:	19 fa                	sbb    edx,edi
c000b54c:	89 d8                	mov    eax,ebx
c000b54e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b552:	5b                   	pop    ebx
c000b553:	5e                   	pop    esi
c000b554:	5f                   	pop    edi
c000b555:	ff e0                	jmp    eax

c000b557 <datetimeToSeconds(datetime_t)>:
c000b557:	55                   	push   ebp
c000b558:	57                   	push   edi
c000b559:	56                   	push   esi
c000b55a:	53                   	push   ebx
c000b55b:	83 ec 14             	sub    esp,0x14
c000b55e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b562:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b566:	89 d3                	mov    ebx,edx
c000b568:	0f b6 c6             	movzx  eax,dh
c000b56b:	c1 eb 10             	shr    ebx,0x10
c000b56e:	48                   	dec    eax
c000b56f:	66 81 eb 6c 07       	sub    bx,0x76c
c000b574:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b578:	0f b6 f5             	movzx  esi,ch
c000b57b:	89 cf                	mov    edi,ecx
c000b57d:	6b f6 3c             	imul   esi,esi,0x3c
c000b580:	c1 ef 10             	shr    edi,0x10
c000b583:	0f b6 c9             	movzx  ecx,cl
c000b586:	89 f8                	mov    eax,edi
c000b588:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b58e:	0f b6 f8             	movzx  edi,al
c000b591:	0f b6 d2             	movzx  edx,dl
c000b594:	01 fe                	add    esi,edi
c000b596:	01 f1                	add    ecx,esi
c000b598:	0f b7 f3             	movzx  esi,bx
c000b59b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b59f:	c1 f9 1f             	sar    ecx,0x1f
c000b5a2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5ab:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b5b0:	8b 0c 8d a0 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2160]
c000b5b7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b5bb:	76 29                	jbe    c000b5e6 <datetimeToSeconds(datetime_t)+0x8f>
c000b5bd:	f6 c3 03             	test   bl,0x3
c000b5c0:	75 24                	jne    c000b5e6 <datetimeToSeconds(datetime_t)+0x8f>
c000b5c2:	31 d2                	xor    edx,edx
c000b5c4:	bf 64 00 00 00       	mov    edi,0x64
c000b5c9:	89 d8                	mov    eax,ebx
c000b5cb:	66 f7 f7             	div    di
c000b5ce:	66 85 d2             	test   dx,dx
c000b5d1:	75 12                	jne    c000b5e5 <datetimeToSeconds(datetime_t)+0x8e>
c000b5d3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5d9:	bf 90 01 00 00       	mov    edi,0x190
c000b5de:	99                   	cdq    
c000b5df:	f7 ff                	idiv   edi
c000b5e1:	85 d2                	test   edx,edx
c000b5e3:	75 01                	jne    c000b5e6 <datetimeToSeconds(datetime_t)+0x8f>
c000b5e5:	41                   	inc    ecx
c000b5e6:	66 83 fb 46          	cmp    bx,0x46
c000b5ea:	76 45                	jbe    c000b631 <datetimeToSeconds(datetime_t)+0xda>
c000b5ec:	bb 46 00 00 00       	mov    ebx,0x46
c000b5f1:	bf 64 00 00 00       	mov    edi,0x64
c000b5f6:	bd 90 01 00 00       	mov    ebp,0x190
c000b5fb:	b8 6d 01 00 00       	mov    eax,0x16d
c000b600:	f6 c3 03             	test   bl,0x3
c000b603:	75 23                	jne    c000b628 <datetimeToSeconds(datetime_t)+0xd1>
c000b605:	89 d8                	mov    eax,ebx
c000b607:	99                   	cdq    
c000b608:	f7 ff                	idiv   edi
c000b60a:	b8 6e 01 00 00       	mov    eax,0x16e
c000b60f:	85 d2                	test   edx,edx
c000b611:	75 15                	jne    c000b628 <datetimeToSeconds(datetime_t)+0xd1>
c000b613:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b619:	99                   	cdq    
c000b61a:	f7 fd                	idiv   ebp
c000b61c:	31 c0                	xor    eax,eax
c000b61e:	85 d2                	test   edx,edx
c000b620:	0f 94 c0             	sete   al
c000b623:	05 6d 01 00 00       	add    eax,0x16d
c000b628:	01 c1                	add    ecx,eax
c000b62a:	43                   	inc    ebx
c000b62b:	39 f3                	cmp    ebx,esi
c000b62d:	7c cc                	jl     c000b5fb <datetimeToSeconds(datetime_t)+0xa4>
c000b62f:	eb 3b                	jmp    c000b66c <datetimeToSeconds(datetime_t)+0x115>
c000b631:	74 39                	je     c000b66c <datetimeToSeconds(datetime_t)+0x115>
c000b633:	b8 45 00 00 00       	mov    eax,0x45
c000b638:	89 c2                	mov    edx,eax
c000b63a:	83 e2 03             	and    edx,0x3
c000b63d:	39 f0                	cmp    eax,esi
c000b63f:	7e 13                	jle    c000b654 <datetimeToSeconds(datetime_t)+0xfd>
c000b641:	85 d2                	test   edx,edx
c000b643:	0f 94 c2             	sete   dl
c000b646:	48                   	dec    eax
c000b647:	0f b6 d2             	movzx  edx,dl
c000b64a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b650:	29 d1                	sub    ecx,edx
c000b652:	eb e4                	jmp    c000b638 <datetimeToSeconds(datetime_t)+0xe1>
c000b654:	b8 6d 01 00 00       	mov    eax,0x16d
c000b659:	85 d2                	test   edx,edx
c000b65b:	75 0d                	jne    c000b66a <datetimeToSeconds(datetime_t)+0x113>
c000b65d:	31 c0                	xor    eax,eax
c000b65f:	66 85 db             	test   bx,bx
c000b662:	0f 95 c0             	setne  al
c000b665:	05 6d 01 00 00       	add    eax,0x16d
c000b66a:	29 c1                	sub    ecx,eax
c000b66c:	b8 80 51 01 00       	mov    eax,0x15180
c000b671:	f7 e9                	imul   ecx
c000b673:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b677:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b67b:	83 c4 14             	add    esp,0x14
c000b67e:	5b                   	pop    ebx
c000b67f:	5e                   	pop    esi
c000b680:	5f                   	pop    edi
c000b681:	5d                   	pop    ebp
c000b682:	c3                   	ret    
c000b683:	90                   	nop

c000b684 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b684:	57                   	push   edi
c000b685:	56                   	push   esi
c000b686:	53                   	push   ebx
c000b687:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b68b:	8b 06                	mov    eax,DWORD PTR [esi]
c000b68d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b694:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b698:	e8 ba fe ff ff       	call   c000b557 <datetimeToSeconds(datetime_t)>
c000b69d:	59                   	pop    ecx
c000b69e:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b6a5:	5b                   	pop    ebx
c000b6a6:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b6ac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6b2:	89 cb                	mov    ebx,ecx
c000b6b4:	c1 fb 1f             	sar    ebx,0x1f
c000b6b7:	29 c8                	sub    eax,ecx
c000b6b9:	19 da                	sbb    edx,ebx
c000b6bb:	31 c9                	xor    ecx,ecx
c000b6bd:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b6c4:	74 05                	je     c000b6cb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b6c6:	b9 08 07 00 00       	mov    ecx,0x708
c000b6cb:	31 db                	xor    ebx,ebx
c000b6cd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b6d1:	29 c8                	sub    eax,ecx
c000b6d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6d7:	19 da                	sbb    edx,ebx
c000b6d9:	89 f8                	mov    eax,edi
c000b6db:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6df:	5b                   	pop    ebx
c000b6e0:	5e                   	pop    esi
c000b6e1:	5f                   	pop    edi
c000b6e2:	ff e0                	jmp    eax

c000b6e4 <secondsToDatetime(unsigned long long)>:
c000b6e4:	55                   	push   ebp
c000b6e5:	57                   	push   edi
c000b6e6:	56                   	push   esi
c000b6e7:	53                   	push   ebx
c000b6e8:	83 ec 1c             	sub    esp,0x1c
c000b6eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6f3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6f7:	6a 00                	push   0x0
c000b6f9:	68 80 51 01 00       	push   0x15180
c000b6fe:	55                   	push   ebp
c000b6ff:	57                   	push   edi
c000b700:	e8 fb 09 01 00       	call   c001c100 <__udivdi3>
c000b705:	83 c4 10             	add    esp,0x10
c000b708:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b70e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b712:	6a 00                	push   0x0
c000b714:	68 80 51 01 00       	push   0x15180
c000b719:	55                   	push   ebp
c000b71a:	57                   	push   edi
c000b71b:	bf 10 0e 00 00       	mov    edi,0xe10
c000b720:	e8 db 0a 01 00       	call   c001c200 <__umoddi3>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	99                   	cdq    
c000b729:	f7 ff                	idiv   edi
c000b72b:	bf 3c 00 00 00       	mov    edi,0x3c
c000b730:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b733:	89 d0                	mov    eax,edx
c000b735:	99                   	cdq    
c000b736:	f7 ff                	idiv   edi
c000b738:	85 db                	test   ebx,ebx
c000b73a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b73d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b740:	79 11                	jns    c000b753 <secondsToDatetime(unsigned long long)+0x6f>
c000b742:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b746:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b74c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b751:	eb 07                	jmp    c000b75a <secondsToDatetime(unsigned long long)+0x76>
c000b753:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b758:	89 d8                	mov    eax,ebx
c000b75a:	bf b4 05 00 00       	mov    edi,0x5b4
c000b75f:	99                   	cdq    
c000b760:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b765:	f7 f9                	idiv   ecx
c000b767:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b76c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b770:	31 d2                	xor    edx,edx
c000b772:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b77a:	01 c3                	add    ebx,eax
c000b77c:	89 d8                	mov    eax,ebx
c000b77e:	f7 f1                	div    ecx
c000b780:	31 d2                	xor    edx,edx
c000b782:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b785:	89 d8                	mov    eax,ebx
c000b787:	f7 f7                	div    edi
c000b789:	31 d2                	xor    edx,edx
c000b78b:	29 c1                	sub    ecx,eax
c000b78d:	89 d8                	mov    eax,ebx
c000b78f:	f7 f5                	div    ebp
c000b791:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b796:	29 c1                	sub    ecx,eax
c000b798:	31 d2                	xor    edx,edx
c000b79a:	89 c8                	mov    eax,ecx
c000b79c:	f7 f5                	div    ebp
c000b79e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b7a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7a7:	31 d2                	xor    edx,edx
c000b7a9:	89 c8                	mov    eax,ecx
c000b7ab:	f7 f5                	div    ebp
c000b7ad:	31 d2                	xor    edx,edx
c000b7af:	01 c3                	add    ebx,eax
c000b7b1:	89 c8                	mov    eax,ecx
c000b7b3:	f7 f7                	div    edi
c000b7b5:	bf 99 00 00 00       	mov    edi,0x99
c000b7ba:	29 c3                	sub    ebx,eax
c000b7bc:	31 d2                	xor    edx,edx
c000b7be:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b7c6:	29 c3                	sub    ebx,eax
c000b7c8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b7cb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b7ce:	bb 05 00 00 00       	mov    ebx,0x5
c000b7d3:	83 c1 02             	add    ecx,0x2
c000b7d6:	89 c8                	mov    eax,ecx
c000b7d8:	f7 f7                	div    edi
c000b7da:	31 d2                	xor    edx,edx
c000b7dc:	89 c7                	mov    edi,eax
c000b7de:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b7e4:	83 c0 02             	add    eax,0x2
c000b7e7:	f7 f3                	div    ebx
c000b7e9:	89 eb                	mov    ebx,ebp
c000b7eb:	29 c3                	sub    ebx,eax
c000b7ed:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7f3:	88 1e                	mov    BYTE PTR [esi],bl
c000b7f5:	19 c0                	sbb    eax,eax
c000b7f7:	31 d2                	xor    edx,edx
c000b7f9:	83 e0 0c             	and    eax,0xc
c000b7fc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b800:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b808:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b80c:	83 f9 01             	cmp    ecx,0x1
c000b80f:	0f 96 c2             	setbe  dl
c000b812:	41                   	inc    ecx
c000b813:	01 d0                	add    eax,edx
c000b815:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b818:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b81c:	83 c4 1c             	add    esp,0x1c
c000b81f:	89 f0                	mov    eax,esi
c000b821:	5b                   	pop    ebx
c000b822:	5e                   	pop    esi
c000b823:	5f                   	pop    edi
c000b824:	5d                   	pop    ebp
c000b825:	c2 04 00             	ret    0x4

c000b828 <Clock::timeInDatetimeLocal()>:
c000b828:	53                   	push   ebx
c000b829:	83 ec 14             	sub    esp,0x14
c000b82c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b834:	e8 7d fc ff ff       	call   c000b4b6 <Clock::timeInSecondsLocal()>
c000b839:	83 c4 0c             	add    esp,0xc
c000b83c:	52                   	push   edx
c000b83d:	50                   	push   eax
c000b83e:	53                   	push   ebx
c000b83f:	e8 a0 fe ff ff       	call   c000b6e4 <secondsToDatetime(unsigned long long)>
c000b844:	89 d8                	mov    eax,ebx
c000b846:	83 c4 14             	add    esp,0x14
c000b849:	5b                   	pop    ebx
c000b84a:	c2 04 00             	ret    0x4
c000b84d:	90                   	nop

c000b84e <Device::hibernate()>:
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Device::wake()>:
c000b850:	c3                   	ret    
c000b851:	90                   	nop

c000b852 <Device::detect()>:
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <Device::disableLegacy()>:
c000b854:	c3                   	ret    
c000b855:	90                   	nop

c000b856 <Device::powerSaving(PowerSavingLevel)>:
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <DriverlessDevice::close(int, int, void*)>:
c000b858:	31 c0                	xor    eax,eax
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <DriverlessDevice::detect()>:
c000b85c:	c3                   	ret    
c000b85d:	90                   	nop

c000b85e <DriverlessDevice::open(int, int, void*)>:
c000b85e:	83 ec 18             	sub    esp,0x18
c000b861:	68 d0 de 01 c0       	push   0xc001ded0
c000b866:	e8 48 49 00 00       	call   c00101b3 <KePanic(char const*)>
c000b86b:	83 c8 ff             	or     eax,0xffffffff
c000b86e:	83 c4 1c             	add    esp,0x1c
c000b871:	c3                   	ret    

c000b872 <Device::~Device()>:
c000b872:	ba 30 df 01 c0       	mov    edx,0xc001df30
c000b877:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b87b:	89 10                	mov    DWORD PTR [eax],edx
c000b87d:	90                   	nop
c000b87e:	c3                   	ret    
c000b87f:	90                   	nop

c000b880 <Device::~Device()>:
c000b880:	83 ec 0c             	sub    esp,0xc
c000b883:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b887:	e8 e6 ff ff ff       	call   c000b872 <Device::~Device()>
c000b88c:	83 c4 04             	add    esp,0x4
c000b88f:	83 ec 08             	sub    esp,0x8
c000b892:	68 58 01 00 00       	push   0x158
c000b897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89b:	e8 9a eb ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000b8a0:	83 c4 10             	add    esp,0x10
c000b8a3:	83 c4 0c             	add    esp,0xc
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <Device::findAndLoadDriver()>:
c000b8a8:	c7 44 24 04 ee de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001deee
c000b8b0:	e9 7b ec ff ff       	jmp    c000a530 <Dbg::kprintf(char const*, ...)>
c000b8b5:	90                   	nop

c000b8b6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b8b6:	57                   	push   edi
c000b8b7:	b9 09 00 00 00       	mov    ecx,0x9
c000b8bc:	56                   	push   esi
c000b8bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b8c1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b8c5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b8cf:	81 c7 18 01 00 00    	add    edi,0x118
c000b8d5:	fc                   	cld    
c000b8d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8d8:	5e                   	pop    esi
c000b8d9:	5f                   	pop    edi
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <Device::preOpenACPI(void*, char*, char*)>:
c000b8dc:	57                   	push   edi
c000b8dd:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b8e2:	56                   	push   esi
c000b8e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8eb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8f5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8fb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b901:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b905:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b907:	b9 0e 00 00 00       	mov    ecx,0xe
c000b90c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b912:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b918:	5e                   	pop    esi
c000b919:	5f                   	pop    edi
c000b91a:	c3                   	ret    
c000b91b:	90                   	nop

c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b91c:	53                   	push   ebx
c000b91d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b921:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b925:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b929:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b92d:	0f b6 c0             	movzx  eax,al
c000b930:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b934:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b938:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b93c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b940:	5b                   	pop    ebx
c000b941:	e9 a6 05 00 00       	jmp    c000beec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b946 <Device::getParent()>:
c000b946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b950:	c3                   	ret    
c000b951:	90                   	nop

c000b952 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b956:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b95a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b95f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b963:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b96b:	e9 e8 06 00 00       	jmp    c000c058 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b970 <Device::addChild(Device*)>:
c000b970:	53                   	push   ebx
c000b971:	83 ec 08             	sub    esp,0x8
c000b974:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b97c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b982:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b988:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b98a:	85 d2                	test   edx,edx
c000b98c:	74 04                	je     c000b992 <Device::addChild(Device*)+0x22>
c000b98e:	89 d3                	mov    ebx,edx
c000b990:	eb f6                	jmp    c000b988 <Device::addChild(Device*)+0x18>
c000b992:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b995:	83 ec 0c             	sub    esp,0xc
c000b998:	6a 08                	push   0x8
c000b99a:	e8 1a be ff ff       	call   c00077b9 <malloc>
c000b99f:	89 03                	mov    DWORD PTR [ebx],eax
c000b9a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9ae:	83 c4 18             	add    esp,0x18
c000b9b1:	5b                   	pop    ebx
c000b9b2:	c3                   	ret    
c000b9b3:	90                   	nop

c000b9b4 <Device::removeAllChildren()>:
c000b9b4:	56                   	push   esi
c000b9b5:	53                   	push   ebx
c000b9b6:	52                   	push   edx
c000b9b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9bb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b9c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9c4:	74 17                	je     c000b9dd <Device::removeAllChildren()+0x29>
c000b9c6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b9c9:	85 c0                	test   eax,eax
c000b9cb:	74 0c                	je     c000b9d9 <Device::removeAllChildren()+0x25>
c000b9cd:	83 ec 0c             	sub    esp,0xc
c000b9d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9d2:	50                   	push   eax
c000b9d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9db:	eb e4                	jmp    c000b9c1 <Device::removeAllChildren()+0xd>
c000b9dd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9e9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9f6:	58                   	pop    eax
c000b9f7:	5b                   	pop    ebx
c000b9f8:	5e                   	pop    esi
c000b9f9:	c3                   	ret    

c000b9fa <Device::hibernateAll()>:
c000b9fa:	53                   	push   ebx
c000b9fb:	83 ec 14             	sub    esp,0x14
c000b9fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba04:	53                   	push   ebx
c000ba05:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba0e:	83 c4 10             	add    esp,0x10
c000ba11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba14:	74 0f                	je     c000ba25 <Device::hibernateAll()+0x2b>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba1c:	e8 d9 ff ff ff       	call   c000b9fa <Device::hibernateAll()>
c000ba21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba23:	eb e9                	jmp    c000ba0e <Device::hibernateAll()+0x14>
c000ba25:	83 c4 08             	add    esp,0x8
c000ba28:	5b                   	pop    ebx
c000ba29:	c3                   	ret    

c000ba2a <Device::wakeAll()>:
c000ba2a:	53                   	push   ebx
c000ba2b:	83 ec 14             	sub    esp,0x14
c000ba2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba34:	53                   	push   ebx
c000ba35:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba3e:	83 c4 10             	add    esp,0x10
c000ba41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba44:	74 0f                	je     c000ba55 <Device::wakeAll()+0x2b>
c000ba46:	83 ec 0c             	sub    esp,0xc
c000ba49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba4c:	e8 d9 ff ff ff       	call   c000ba2a <Device::wakeAll()>
c000ba51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba53:	eb e9                	jmp    c000ba3e <Device::wakeAll()+0x14>
c000ba55:	83 c4 08             	add    esp,0x8
c000ba58:	5b                   	pop    ebx
c000ba59:	c3                   	ret    

c000ba5a <Device::detectAll()>:
c000ba5a:	53                   	push   ebx
c000ba5b:	83 ec 14             	sub    esp,0x14
c000ba5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba64:	53                   	push   ebx
c000ba65:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba6e:	83 c4 10             	add    esp,0x10
c000ba71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba74:	74 0f                	je     c000ba85 <Device::detectAll()+0x2b>
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba7c:	e8 d9 ff ff ff       	call   c000ba5a <Device::detectAll()>
c000ba81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba83:	eb e9                	jmp    c000ba6e <Device::detectAll()+0x14>
c000ba85:	83 c4 08             	add    esp,0x8
c000ba88:	5b                   	pop    ebx
c000ba89:	c3                   	ret    

c000ba8a <Device::disableLegacyAll()>:
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <Device::loadDriversForAll()>:
c000ba8c:	c3                   	ret    
c000ba8d:	90                   	nop

c000ba8e <Device::closeAll()>:
c000ba8e:	53                   	push   ebx
c000ba8f:	83 ec 08             	sub    esp,0x8
c000ba92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba96:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba98:	6a 00                	push   0x0
c000ba9a:	6a 00                	push   0x0
c000ba9c:	6a 00                	push   0x0
c000ba9e:	53                   	push   ebx
c000ba9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baa2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baa8:	83 c4 10             	add    esp,0x10
c000baab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baae:	74 0f                	je     c000babf <Device::closeAll()+0x31>
c000bab0:	83 ec 0c             	sub    esp,0xc
c000bab3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bab6:	e8 d3 ff ff ff       	call   c000ba8e <Device::closeAll()>
c000babb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000babd:	eb e9                	jmp    c000baa8 <Device::closeAll()+0x1a>
c000babf:	83 c4 08             	add    esp,0x8
c000bac2:	5b                   	pop    ebx
c000bac3:	c3                   	ret    

c000bac4 <Device::powerSavingAll(PowerSavingLevel)>:
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 0c             	sub    esp,0xc
c000bac9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bacd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad3:	56                   	push   esi
c000bad4:	53                   	push   ebx
c000bad5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bad8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bade:	83 c4 10             	add    esp,0x10
c000bae1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae4:	74 0f                	je     c000baf5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bae6:	52                   	push   edx
c000bae7:	52                   	push   edx
c000bae8:	56                   	push   esi
c000bae9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baec:	e8 d3 ff ff ff       	call   c000bac4 <Device::powerSavingAll(PowerSavingLevel)>
c000baf1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baf3:	eb e9                	jmp    c000bade <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000baf5:	58                   	pop    eax
c000baf6:	5b                   	pop    ebx
c000baf7:	5e                   	pop    esi
c000baf8:	c3                   	ret    
c000baf9:	90                   	nop

c000bafa <Device::setName(char const*)>:
c000bafa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb02:	e9 f9 4a ff ff       	jmp    c0000600 <strcpy>
c000bb07:	90                   	nop

c000bb08 <Device::Device(char const*)>:
c000bb08:	83 ec 1c             	sub    esp,0x1c
c000bb0b:	ba 30 df 01 c0       	mov    edx,0xc001df30
c000bb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb14:	89 10                	mov    DWORD PTR [eax],edx
c000bb16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb28:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb36:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb44:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb4e:	83 ec 08             	sub    esp,0x8
c000bb51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb59:	e8 9c ff ff ff       	call   c000bafa <Device::setName(char const*)>
c000bb5e:	83 c4 10             	add    esp,0x10
c000bb61:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb69:	83 ec 0c             	sub    esp,0xc
c000bb6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb70:	e8 44 bc ff ff       	call   c00077b9 <malloc>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb89:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb93:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bba9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bbbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbca:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbfe:	90                   	nop
c000bbff:	83 c4 1c             	add    esp,0x1c
c000bc02:	c3                   	ret    
c000bc03:	90                   	nop

c000bc04 <Device::getName()>:
c000bc04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc08:	05 d0 00 00 00       	add    eax,0xd0
c000bc0d:	c3                   	ret    

c000bc0e <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc0e:	83 ec 0c             	sub    esp,0xc
c000bc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc15:	83 ec 08             	sub    esp,0x8
c000bc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc1c:	50                   	push   eax
c000bc1d:	e8 e6 fe ff ff       	call   c000bb08 <Device::Device(char const*)>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	ba 5c df 01 c0       	mov    edx,0xc001df5c
c000bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc2e:	89 10                	mov    DWORD PTR [eax],edx
c000bc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc34:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc3e:	90                   	nop
c000bc3f:	83 c4 0c             	add    esp,0xc
c000bc42:	c3                   	ret    
c000bc43:	90                   	nop

c000bc44 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc44:	57                   	push   edi
c000bc45:	56                   	push   esi
c000bc46:	53                   	push   ebx
c000bc47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc53:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc59:	75 0c                	jne    c000bc67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc5b:	52                   	push   edx
c000bc5c:	52                   	push   edx
c000bc5d:	53                   	push   ebx
c000bc5e:	56                   	push   esi
c000bc5f:	e8 4e 09 01 00       	call   c001c5b2 <LinkedList<Device>::addElement(Device*)>
c000bc64:	83 c4 10             	add    esp,0x10
c000bc67:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc70:	74 12                	je     c000bc84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc72:	50                   	push   eax
c000bc73:	57                   	push   edi
c000bc74:	56                   	push   esi
c000bc75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc78:	e8 c7 ff ff ff       	call   c000bc44 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc7f:	83 c4 10             	add    esp,0x10
c000bc82:	eb e9                	jmp    c000bc6d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc84:	5b                   	pop    ebx
c000bc85:	5e                   	pop    esi
c000bc86:	5f                   	pop    edi
c000bc87:	c3                   	ret    

c000bc88 <getDevicesOfType(DeviceType)>:
c000bc88:	53                   	push   ebx
c000bc89:	83 ec 14             	sub    esp,0x14
c000bc8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc90:	53                   	push   ebx
c000bc91:	e8 f8 09 01 00       	call   c001c68e <LinkedList<Device>::LinkedList()>
c000bc96:	83 c4 0c             	add    esp,0xc
c000bc99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc9d:	53                   	push   ebx
c000bc9e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bca4:	e8 9b ff ff ff       	call   c000bc44 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bca9:	89 d8                	mov    eax,ebx
c000bcab:	83 c4 18             	add    esp,0x18
c000bcae:	5b                   	pop    ebx
c000bcaf:	c2 04 00             	ret    0x4
c000bcb2:	66 90                	xchg   ax,ax

c000bcb4 <HardDiskController::HardDiskController(char const*)>:
c000bcb4:	83 ec 0c             	sub    esp,0xc
c000bcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbb:	83 ec 08             	sub    esp,0x8
c000bcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc2:	50                   	push   eax
c000bcc3:	e8 40 fe ff ff       	call   c000bb08 <Device::Device(char const*)>
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	ba 88 df 01 c0       	mov    edx,0xc001df88
c000bcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd4:	89 10                	mov    DWORD PTR [eax],edx
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bce4:	90                   	nop
c000bce5:	83 c4 0c             	add    esp,0xc
c000bce8:	c3                   	ret    
c000bce9:	90                   	nop
c000bcea:	66 90                	xchg   ax,ax

c000bcec <HardDiskController::~HardDiskController()>:
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	ba 88 df 01 c0       	mov    edx,0xc001df88
c000bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf8:	89 10                	mov    DWORD PTR [eax],edx
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	83 ec 0c             	sub    esp,0xc
c000bd01:	50                   	push   eax
c000bd02:	e8 6b fb ff ff       	call   c000b872 <Device::~Device()>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	90                   	nop
c000bd0b:	83 c4 0c             	add    esp,0xc
c000bd0e:	c3                   	ret    
c000bd0f:	90                   	nop

c000bd10 <HardDiskController::~HardDiskController()>:
c000bd10:	83 ec 0c             	sub    esp,0xc
c000bd13:	83 ec 0c             	sub    esp,0xc
c000bd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd1a:	e8 cd ff ff ff       	call   c000bcec <HardDiskController::~HardDiskController()>
c000bd1f:	83 c4 10             	add    esp,0x10
c000bd22:	83 ec 08             	sub    esp,0x8
c000bd25:	68 58 01 00 00       	push   0x158
c000bd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2e:	e8 07 e7 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000bd33:	83 c4 10             	add    esp,0x10
c000bd36:	83 c4 0c             	add    esp,0xc
c000bd39:	c3                   	ret    

c000bd3a <PhysicalDisk::eject()>:
c000bd3a:	83 c8 ff             	or     eax,0xffffffff
c000bd3d:	c3                   	ret    

c000bd3e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd45:	83 ec 08             	sub    esp,0x8
c000bd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd4c:	50                   	push   eax
c000bd4d:	e8 b6 fd ff ff       	call   c000bb08 <Device::Device(char const*)>
c000bd52:	83 c4 10             	add    esp,0x10
c000bd55:	ba b4 df 01 c0       	mov    edx,0xc001dfb4
c000bd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5e:	89 10                	mov    DWORD PTR [eax],edx
c000bd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd64:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd96:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bda0:	90                   	nop
c000bda1:	83 c4 0c             	add    esp,0xc
c000bda4:	c3                   	ret    
c000bda5:	90                   	nop

c000bda6 <PhysicalDisk::startCache()>:
c000bda6:	56                   	push   esi
c000bda7:	53                   	push   ebx
c000bda8:	83 ec 10             	sub    esp,0x10
c000bdab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdaf:	6a 44                	push   0x44
c000bdb1:	e8 03 ba ff ff       	call   c00077b9 <malloc>
c000bdb6:	89 c6                	mov    esi,eax
c000bdb8:	58                   	pop    eax
c000bdb9:	5a                   	pop    edx
c000bdba:	53                   	push   ebx
c000bdbb:	56                   	push   esi
c000bdbc:	e8 eb 15 00 00       	call   c000d3ac <VCache::VCache(PhysicalDisk*)>
c000bdc1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bdc7:	83 c4 14             	add    esp,0x14
c000bdca:	5b                   	pop    ebx
c000bdcb:	5e                   	pop    esi
c000bdcc:	c3                   	ret    
c000bdcd:	90                   	nop

c000bdce <PhysicalDisk::~PhysicalDisk()>:
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	ba b4 df 01 c0       	mov    edx,0xc001dfb4
c000bdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdda:	89 10                	mov    DWORD PTR [eax],edx
c000bddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde0:	83 ec 0c             	sub    esp,0xc
c000bde3:	50                   	push   eax
c000bde4:	e8 89 fa ff ff       	call   c000b872 <Device::~Device()>
c000bde9:	83 c4 10             	add    esp,0x10
c000bdec:	90                   	nop
c000bded:	83 c4 0c             	add    esp,0xc
c000bdf0:	c3                   	ret    
c000bdf1:	90                   	nop

c000bdf2 <PhysicalDisk::~PhysicalDisk()>:
c000bdf2:	83 ec 0c             	sub    esp,0xc
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdfc:	e8 cd ff ff ff       	call   c000bdce <PhysicalDisk::~PhysicalDisk()>
c000be01:	83 c4 10             	add    esp,0x10
c000be04:	83 ec 08             	sub    esp,0x8
c000be07:	68 6c 01 00 00       	push   0x16c
c000be0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be10:	e8 25 e6 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000be15:	83 c4 10             	add    esp,0x10
c000be18:	83 c4 0c             	add    esp,0xc
c000be1b:	c3                   	ret    

c000be1c <int_handler>:
c000be1c:	55                   	push   ebp
c000be1d:	57                   	push   edi
c000be1e:	56                   	push   esi
c000be1f:	53                   	push   ebx
c000be20:	83 ec 0c             	sub    esp,0xc
c000be23:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be27:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be2e:	74 0b                	je     c000be3b <int_handler+0x1f>
c000be30:	fa                   	cli    
c000be31:	f4                   	hlt    
c000be32:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be39:	75 f5                	jne    c000be30 <int_handler+0x14>
c000be3b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be3e:	8d 46 e0             	lea    eax,[esi-0x20]
c000be41:	83 f8 17             	cmp    eax,0x17
c000be44:	76 3e                	jbe    c000be84 <int_handler+0x68>
c000be46:	c1 e6 04             	shl    esi,0x4
c000be49:	31 db                	xor    ebx,ebx
c000be4b:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000be51:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000be57:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be5b:	85 c0                	test   eax,eax
c000be5d:	74 13                	je     c000be72 <int_handler+0x56>
c000be5f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be62:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be66:	74 2a                	je     c000be92 <int_handler+0x76>
c000be68:	83 ec 08             	sub    esp,0x8
c000be6b:	52                   	push   edx
c000be6c:	57                   	push   edi
c000be6d:	ff d0                	call   eax
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	43                   	inc    ebx
c000be73:	83 fb 04             	cmp    ebx,0x4
c000be76:	75 df                	jne    c000be57 <int_handler+0x3b>
c000be78:	83 c4 0c             	add    esp,0xc
c000be7b:	31 c0                	xor    eax,eax
c000be7d:	5b                   	pop    ebx
c000be7e:	31 d2                	xor    edx,edx
c000be80:	5e                   	pop    esi
c000be81:	5f                   	pop    edi
c000be82:	5d                   	pop    ebp
c000be83:	c3                   	ret    
c000be84:	83 ec 0c             	sub    esp,0xc
c000be87:	50                   	push   eax
c000be88:	e8 0a 9a 00 00       	call   c0015897 <HalEndOfInterrupt(int)>
c000be8d:	83 c4 10             	add    esp,0x10
c000be90:	eb b4                	jmp    c000be46 <int_handler+0x2a>
c000be92:	83 ec 08             	sub    esp,0x8
c000be95:	52                   	push   edx
c000be96:	57                   	push   edi
c000be97:	ff d0                	call   eax
c000be99:	83 c4 10             	add    esp,0x10
c000be9c:	83 c4 0c             	add    esp,0xc
c000be9f:	5b                   	pop    ebx
c000bea0:	5e                   	pop    esi
c000bea1:	5f                   	pop    edi
c000bea2:	5d                   	pop    ebp
c000bea3:	c3                   	ret    

c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bea4:	56                   	push   esi
c000bea5:	31 c0                	xor    eax,eax
c000bea7:	53                   	push   ebx
c000bea8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000beac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000beb0:	89 ca                	mov    edx,ecx
c000beb2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000beb6:	c1 e2 04             	shl    edx,0x4
c000beb9:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bec1:	74 15                	je     c000bed8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bec3:	40                   	inc    eax
c000bec4:	83 f8 04             	cmp    eax,0x4
c000bec7:	75 f0                	jne    c000beb9 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bec9:	c7 44 24 0c e4 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dfe4
c000bed1:	5b                   	pop    ebx
c000bed2:	5e                   	pop    esi
c000bed3:	e9 db 42 00 00       	jmp    c00101b3 <KePanic(char const*)>
c000bed8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bedb:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bee2:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bee9:	5b                   	pop    ebx
c000beea:	5e                   	pop    esi
c000beeb:	c3                   	ret    

c000beec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000beec:	57                   	push   edi
c000beed:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bef3:	56                   	push   esi
c000bef4:	53                   	push   ebx
c000bef5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bef9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000befd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf04:	74 5b                	je     c000bf61 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf06:	89 c7                	mov    edi,eax
c000bf08:	84 c0                	test   al,al
c000bf0a:	74 24                	je     c000bf30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf0c:	83 fe 0f             	cmp    esi,0xf
c000bf0f:	0f 8f d9 00 00 00    	jg     c000bfee <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf15:	8a 86 20 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe07e0]
c000bf1b:	25 ff 00 00 00       	and    eax,0xff
c000bf20:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf28:	89 c6                	mov    esi,eax
c000bf2a:	66 d1 ef             	shr    di,1
c000bf2d:	83 e7 01             	and    edi,0x1
c000bf30:	83 ec 08             	sub    esp,0x8
c000bf33:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf38:	31 db                	xor    ebx,ebx
c000bf3a:	50                   	push   eax
c000bf3b:	68 f1 df 01 c0       	push   0xc001dff1
c000bf40:	e8 eb e5 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf4d:	85 c0                	test   eax,eax
c000bf4f:	7f 51                	jg     c000bfa2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf51:	83 ec 0c             	sub    esp,0xc
c000bf54:	68 08 e0 01 c0       	push   0xc001e008
c000bf59:	e8 55 42 00 00       	call   c00101b3 <KePanic(char const*)>
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf64:	31 d2                	xor    edx,edx
c000bf66:	89 c8                	mov    eax,ecx
c000bf68:	c1 e0 04             	shl    eax,0x4
c000bf6b:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bf72:	85 db                	test   ebx,ebx
c000bf74:	0f 84 8b 00 00 00    	je     c000c005 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf7a:	42                   	inc    edx
c000bf7b:	83 fa 04             	cmp    edx,0x4
c000bf7e:	75 eb                	jne    c000bf6b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf80:	83 ec 0c             	sub    esp,0xc
c000bf83:	68 5c e0 01 c0       	push   0xc001e05c
c000bf88:	e8 26 42 00 00       	call   c00101b3 <KePanic(char const*)>
c000bf8d:	83 c4 10             	add    esp,0x10
c000bf90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf95:	5b                   	pop    ebx
c000bf96:	5e                   	pop    esi
c000bf97:	5f                   	pop    edi
c000bf98:	c3                   	ret    
c000bf99:	43                   	inc    ebx
c000bf9a:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bfa0:	7e af                	jle    c000bf51 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bfa2:	83 ec 08             	sub    esp,0x8
c000bfa5:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bfac:	56                   	push   esi
c000bfad:	50                   	push   eax
c000bfae:	e8 d1 f5 00 00       	call   c001b584 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bfb3:	83 c4 10             	add    esp,0x10
c000bfb6:	84 c0                	test   al,al
c000bfb8:	74 df                	je     c000bf99 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bfba:	81 e7 ff 00 00 00    	and    edi,0xff
c000bfc0:	50                   	push   eax
c000bfc1:	8d 46 20             	lea    eax,[esi+0x20]
c000bfc4:	57                   	push   edi
c000bfc5:	25 ff 00 00 00       	and    eax,0xff
c000bfca:	6a 00                	push   0x0
c000bfcc:	50                   	push   eax
c000bfcd:	89 f0                	mov    eax,esi
c000bfcf:	6a 00                	push   0x0
c000bfd1:	25 ff 00 00 00       	and    eax,0xff
c000bfd6:	6a 00                	push   0x0
c000bfd8:	50                   	push   eax
c000bfd9:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bfe0:	50                   	push   eax
c000bfe1:	e8 18 f7 00 00       	call   c001b6fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bfe6:	83 c4 20             	add    esp,0x20
c000bfe9:	e9 73 ff ff ff       	jmp    c000bf61 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfee:	83 ec 0c             	sub    esp,0xc
c000bff1:	31 ff                	xor    edi,edi
c000bff3:	68 24 e0 01 c0       	push   0xc001e024
c000bff8:	e8 b6 41 00 00       	call   c00101b3 <KePanic(char const*)>
c000bffd:	83 c4 10             	add    esp,0x10
c000c000:	e9 2b ff ff ff       	jmp    c000bf30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c005:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c008:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c00c:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c013:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c017:	5b                   	pop    ebx
c000c018:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c01f:	89 f0                	mov    eax,esi
c000c021:	5e                   	pop    esi
c000c022:	5f                   	pop    edi
c000c023:	c3                   	ret    

c000c024 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c028:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c02c:	c1 e0 04             	shl    eax,0x4
c000c02f:	8d 50 10             	lea    edx,[eax+0x10]
c000c032:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c038:	74 08                	je     c000c042 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c03a:	83 c0 04             	add    eax,0x4
c000c03d:	39 d0                	cmp    eax,edx
c000c03f:	75 f1                	jne    c000c032 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c041:	c3                   	ret    
c000c042:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c04c:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c056:	eb e2                	jmp    c000c03a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c058 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c058:	53                   	push   ebx
c000c059:	83 ec 08             	sub    esp,0x8
c000c05c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c060:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c065:	74 0e                	je     c000c075 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c067:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c06c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c073:	75 37                	jne    c000c0ac <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c079:	83 c0 20             	add    eax,0x20
c000c07c:	c1 e0 04             	shl    eax,0x4
c000c07f:	8d 50 10             	lea    edx,[eax+0x10]
c000c082:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c088:	74 0c                	je     c000c096 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c08a:	83 c0 04             	add    eax,0x4
c000c08d:	39 d0                	cmp    eax,edx
c000c08f:	75 f1                	jne    c000c082 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c091:	83 c4 08             	add    esp,0x8
c000c094:	5b                   	pop    ebx
c000c095:	c3                   	ret    
c000c096:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0a0:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0aa:	eb de                	jmp    c000c08a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c0ac:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c0b1:	7f 12                	jg     c000c0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c0b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0b7:	31 c0                	xor    eax,eax
c000c0b9:	8a 81 20 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe07e0]
c000c0bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0c3:	eb b0                	jmp    c000c075 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0c5:	83 ec 0c             	sub    esp,0xc
c000c0c8:	68 15 e0 01 c0       	push   0xc001e015
c000c0cd:	e8 e1 40 00 00       	call   c00101b3 <KePanic(char const*)>
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	eb 9e                	jmp    c000c075 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c0d7 <setupINTS()>:
c000c0d7:	31 c0                	xor    eax,eax
c000c0d9:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0e3:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0ed:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c0f7:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c101:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c10b:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c115:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c11f:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c129:	83 c0 10             	add    eax,0x10
c000c12c:	3d 00 10 00 00       	cmp    eax,0x1000
c000c131:	75 a6                	jne    c000c0d9 <setupINTS()+0x2>
c000c133:	c3                   	ret    

c000c134 <convertLegacyIRQNumber(int)>:
c000c134:	83 ec 0c             	sub    esp,0xc
c000c137:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c141:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c148:	74 0f                	je     c000c159 <convertLegacyIRQNumber(int)+0x25>
c000c14a:	83 f8 0f             	cmp    eax,0xf
c000c14d:	7f 0e                	jg     c000c15d <convertLegacyIRQNumber(int)+0x29>
c000c14f:	31 c9                	xor    ecx,ecx
c000c151:	8a 88 20 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe07e0]
c000c157:	89 c8                	mov    eax,ecx
c000c159:	83 c4 0c             	add    esp,0xc
c000c15c:	c3                   	ret    
c000c15d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c161:	83 ec 0c             	sub    esp,0xc
c000c164:	68 24 e0 01 c0       	push   0xc001e024
c000c169:	e8 45 40 00 00       	call   c00101b3 <KePanic(char const*)>
c000c16e:	83 c4 10             	add    esp,0x10
c000c171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c175:	83 c4 0c             	add    esp,0xc
c000c178:	c3                   	ret    
c000c179:	90                   	nop

c000c17a <startGUI(void*)>:
c000c17a:	55                   	push   ebp
c000c17b:	89 e5                	mov    ebp,esp
c000c17d:	53                   	push   ebx
c000c17e:	83 ec 04             	sub    esp,0x4
c000c181:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c186:	48                   	dec    eax
c000c187:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c18c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c191:	85 c0                	test   eax,eax
c000c193:	75 01                	jne    c000c196 <startGUI(void*)+0x1c>
c000c195:	fb                   	sti    
c000c196:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c19c:	83 ec 08             	sub    esp,0x8
c000c19f:	6a 01                	push   0x1
c000c1a1:	68 81 e0 01 c0       	push   0xc001e081
c000c1a6:	e8 d2 6b 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	83 ec 08             	sub    esp,0x8
c000c1b1:	53                   	push   ebx
c000c1b2:	50                   	push   eax
c000c1b3:	e8 f6 6d 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000c1b8:	83 c4 10             	add    esp,0x10
c000c1bb:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1c1:	83 ec 08             	sub    esp,0x8
c000c1c4:	6a 01                	push   0x1
c000c1c6:	68 9b e0 01 c0       	push   0xc001e09b
c000c1cb:	e8 ad 6b 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	83 ec 08             	sub    esp,0x8
c000c1d6:	53                   	push   ebx
c000c1d7:	50                   	push   eax
c000c1d8:	e8 d1 6d 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000c1dd:	83 c4 10             	add    esp,0x10
c000c1e0:	90                   	nop
c000c1e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1e4:	c9                   	leave  
c000c1e5:	c3                   	ret    

c000c1e6 <startGUIVESA(void*)>:
c000c1e6:	55                   	push   ebp
c000c1e7:	89 e5                	mov    ebp,esp
c000c1e9:	53                   	push   ebx
c000c1ea:	83 ec 04             	sub    esp,0x4
c000c1ed:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1f2:	48                   	dec    eax
c000c1f3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1f8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1fd:	85 c0                	test   eax,eax
c000c1ff:	75 01                	jne    c000c202 <startGUIVESA(void*)+0x1c>
c000c201:	fb                   	sti    
c000c202:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c208:	83 ec 08             	sub    esp,0x8
c000c20b:	6a 01                	push   0x1
c000c20d:	68 b9 e0 01 c0       	push   0xc001e0b9
c000c212:	e8 66 6b 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	83 ec 08             	sub    esp,0x8
c000c21d:	53                   	push   ebx
c000c21e:	50                   	push   eax
c000c21f:	e8 8a 6d 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c22d:	83 ec 08             	sub    esp,0x8
c000c230:	6a 01                	push   0x1
c000c232:	68 9b e0 01 c0       	push   0xc001e09b
c000c237:	e8 41 6b 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	83 ec 08             	sub    esp,0x8
c000c242:	53                   	push   ebx
c000c243:	50                   	push   eax
c000c244:	e8 65 6d 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	90                   	nop
c000c24d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c250:	c9                   	leave  
c000c251:	c3                   	ret    

c000c252 <sendKeyToTerminal(unsigned char)>:
c000c252:	55                   	push   ebp
c000c253:	89 e5                	mov    ebp,esp
c000c255:	83 ec 28             	sub    esp,0x28
c000c258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c25b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c25e:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c264:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c267:	25 ff 00 00 00       	and    eax,0xff
c000c26c:	83 ec 08             	sub    esp,0x8
c000c26f:	50                   	push   eax
c000c270:	52                   	push   edx
c000c271:	e8 d0 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c27d:	74 0a                	je     c000c289 <sendKeyToTerminal(unsigned char)+0x37>
c000c27f:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c283:	0f 85 8f 00 00 00    	jne    c000c318 <sendKeyToTerminal(unsigned char)+0xc6>
c000c289:	fa                   	cli    
c000c28a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c28f:	40                   	inc    eax
c000c290:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c295:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c29a:	40                   	inc    eax
c000c29b:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2a0:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c2a5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2a8:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c2b2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c2b6:	74 1f                	je     c000c2d7 <sendKeyToTerminal(unsigned char)+0x85>
c000c2b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c2bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c2be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c2c1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c2c4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2c7:	83 ec 0c             	sub    esp,0xc
c000c2ca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c2cd:	e8 9a 79 00 00       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c000c2d2:	83 c4 10             	add    esp,0x10
c000c2d5:	eb db                	jmp    c000c2b2 <sendKeyToTerminal(unsigned char)+0x60>
c000c2d7:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2dc:	48                   	dec    eax
c000c2dd:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2e2:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2e7:	85 c0                	test   eax,eax
c000c2e9:	75 18                	jne    c000c303 <sendKeyToTerminal(unsigned char)+0xb1>
c000c2eb:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c2f0:	85 c0                	test   eax,eax
c000c2f2:	74 0f                	je     c000c303 <sendKeyToTerminal(unsigned char)+0xb1>
c000c2f4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c2fe:	e8 a5 74 00 00       	call   c00137a8 <schedule()>
c000c303:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c308:	48                   	dec    eax
c000c309:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c30e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c313:	85 c0                	test   eax,eax
c000c315:	75 01                	jne    c000c318 <sendKeyToTerminal(unsigned char)+0xc6>
c000c317:	fb                   	sti    
c000c318:	90                   	nop
c000c319:	c9                   	leave  
c000c31a:	c3                   	ret    

c000c31b <sendKeyboardToken(KeyboardToken)>:
c000c31b:	55                   	push   ebp
c000c31c:	89 e5                	mov    ebp,esp
c000c31e:	83 ec 18             	sub    esp,0x18
c000c321:	e8 dd 3e 00 00       	call   c0010203 <Krnl::userIOReceived()>
c000c326:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32c:	25 ff ff 00 00       	and    eax,0xffff
c000c331:	83 f2 01             	xor    edx,0x1
c000c334:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c33a:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c33f:	85 c0                	test   eax,eax
c000c341:	74 24                	je     c000c367 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c343:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c349:	83 ec 04             	sub    esp,0x4
c000c34c:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c351:	83 ec 08             	sub    esp,0x8
c000c354:	89 e2                	mov    edx,esp
c000c356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c359:	89 02                	mov    DWORD PTR [edx],eax
c000c35b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c35e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c362:	ff d1                	call   ecx
c000c364:	83 c4 10             	add    esp,0x10
c000c367:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c36b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c36e:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c373:	38 c2                	cmp    dl,al
c000c375:	74 1e                	je     c000c395 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c377:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c37a:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c37f:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c384:	25 ff 00 00 00       	and    eax,0xff
c000c389:	83 ec 0c             	sub    esp,0xc
c000c38c:	50                   	push   eax
c000c38d:	e8 06 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c392:	83 c4 10             	add    esp,0x10
c000c395:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c398:	84 c0                	test   al,al
c000c39a:	0f 84 ae 00 00 00    	je     c000c44e <sendKeyboardToken(KeyboardToken)+0x133>
c000c3a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a3:	66 3d 10 03          	cmp    ax,0x310
c000c3a7:	75 06                	jne    c000c3af <sendKeyboardToken(KeyboardToken)+0x94>
c000c3a9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c3af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b2:	66 3d 11 03          	cmp    ax,0x311
c000c3b6:	75 06                	jne    c000c3be <sendKeyboardToken(KeyboardToken)+0xa3>
c000c3b8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c3be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c1:	66 3d 12 03          	cmp    ax,0x312
c000c3c5:	75 06                	jne    c000c3cd <sendKeyboardToken(KeyboardToken)+0xb2>
c000c3c7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d0:	66 3d 13 03          	cmp    ax,0x313
c000c3d4:	75 06                	jne    c000c3dc <sendKeyboardToken(KeyboardToken)+0xc1>
c000c3d6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3df:	66 3d 14 03          	cmp    ax,0x314
c000c3e3:	75 06                	jne    c000c3eb <sendKeyboardToken(KeyboardToken)+0xd0>
c000c3e5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ee:	66 3d 15 03          	cmp    ax,0x315
c000c3f2:	75 06                	jne    c000c3fa <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3f4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3fd:	66 3d 16 03          	cmp    ax,0x316
c000c401:	75 06                	jne    c000c409 <sendKeyboardToken(KeyboardToken)+0xee>
c000c403:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40c:	66 3d 17 03          	cmp    ax,0x317
c000c410:	75 06                	jne    c000c418 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c412:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41b:	66 3d 18 03          	cmp    ax,0x318
c000c41f:	75 06                	jne    c000c427 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c421:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42a:	66 3d 19 03          	cmp    ax,0x319
c000c42e:	75 06                	jne    c000c436 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c430:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c439:	66 3d 1a 03          	cmp    ax,0x31a
c000c43d:	0f 85 c9 00 00 00    	jne    c000c50c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c443:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c449:	e9 be 00 00 00       	jmp    c000c50c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c451:	66 3d 10 03          	cmp    ax,0x310
c000c455:	75 0a                	jne    c000c461 <sendKeyboardToken(KeyboardToken)+0x146>
c000c457:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c45d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c464:	66 3d 11 03          	cmp    ax,0x311
c000c468:	75 0a                	jne    c000c474 <sendKeyboardToken(KeyboardToken)+0x159>
c000c46a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c470:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c477:	66 3d 12 03          	cmp    ax,0x312
c000c47b:	75 0a                	jne    c000c487 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c47d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c483:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48a:	66 3d 13 03          	cmp    ax,0x313
c000c48e:	75 0a                	jne    c000c49a <sendKeyboardToken(KeyboardToken)+0x17f>
c000c490:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c496:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49d:	66 3d 14 03          	cmp    ax,0x314
c000c4a1:	75 0a                	jne    c000c4ad <sendKeyboardToken(KeyboardToken)+0x192>
c000c4a3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b0:	66 3d 15 03          	cmp    ax,0x315
c000c4b4:	75 0a                	jne    c000c4c0 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c4b6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c3:	66 3d 16 03          	cmp    ax,0x316
c000c4c7:	75 0a                	jne    c000c4d3 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c4c9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c4cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d6:	66 3d 17 03          	cmp    ax,0x317
c000c4da:	75 0a                	jne    c000c4e6 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4dc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c4e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e9:	66 3d 18 03          	cmp    ax,0x318
c000c4ed:	75 0a                	jne    c000c4f9 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4ef:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fc:	66 3d 19 03          	cmp    ax,0x319
c000c500:	75 0a                	jne    c000c50c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c502:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c508:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50f:	66 3d 00 02          	cmp    ax,0x200
c000c513:	75 2c                	jne    c000c541 <sendKeyboardToken(KeyboardToken)+0x226>
c000c515:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c51a:	83 f0 01             	xor    eax,0x1
c000c51d:	84 c0                	test   al,al
c000c51f:	74 20                	je     c000c541 <sendKeyboardToken(KeyboardToken)+0x226>
c000c521:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c526:	6a 01                	push   0x1
c000c528:	6a 00                	push   0x0
c000c52a:	68 7a c1 00 c0       	push   0xc000c17a
c000c52f:	50                   	push   eax
c000c530:	e8 53 70 00 00       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c000c535:	83 c4 10             	add    esp,0x10
c000c538:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c53f:	eb 33                	jmp    c000c574 <sendKeyboardToken(KeyboardToken)+0x259>
c000c541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c544:	66 3d 01 02          	cmp    ax,0x201
c000c548:	75 2a                	jne    c000c574 <sendKeyboardToken(KeyboardToken)+0x259>
c000c54a:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c54f:	83 f0 01             	xor    eax,0x1
c000c552:	84 c0                	test   al,al
c000c554:	74 1e                	je     c000c574 <sendKeyboardToken(KeyboardToken)+0x259>
c000c556:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c55b:	6a 01                	push   0x1
c000c55d:	6a 00                	push   0x0
c000c55f:	68 e6 c1 00 c0       	push   0xc000c1e6
c000c564:	50                   	push   eax
c000c565:	e8 1e 70 00 00       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c000c56a:	83 c4 10             	add    esp,0x10
c000c56d:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c577:	66 3d 1d 03          	cmp    ax,0x31d
c000c57b:	75 06                	jne    c000c583 <sendKeyboardToken(KeyboardToken)+0x268>
c000c57d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c586:	66 3d 1c 03          	cmp    ax,0x31c
c000c58a:	75 06                	jne    c000c592 <sendKeyboardToken(KeyboardToken)+0x277>
c000c58c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c595:	66 3d 1b 03          	cmp    ax,0x31b
c000c599:	75 06                	jne    c000c5a1 <sendKeyboardToken(KeyboardToken)+0x286>
c000c59b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a4:	66 3d 1e 03          	cmp    ax,0x31e
c000c5a8:	75 06                	jne    c000c5b0 <sendKeyboardToken(KeyboardToken)+0x295>
c000c5aa:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b3:	66 3d 1f 03          	cmp    ax,0x31f
c000c5b7:	75 06                	jne    c000c5bf <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c5b9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c2:	66 3d 1a 03          	cmp    ax,0x31a
c000c5c6:	75 06                	jne    c000c5ce <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c5c8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c5ce:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c5d2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5d5:	83 f0 01             	xor    eax,0x1
c000c5d8:	84 c0                	test   al,al
c000c5da:	74 7b                	je     c000c657 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5dc:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c5e1:	84 c0                	test   al,al
c000c5e3:	74 43                	je     c000c628 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c5e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5e9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5ed:	74 2d                	je     c000c61c <sendKeyboardToken(KeyboardToken)+0x301>
c000c5ef:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c5f5:	89 d0                	mov    eax,edx
c000c5f7:	c1 e0 02             	shl    eax,0x2
c000c5fa:	01 d0                	add    eax,edx
c000c5fc:	01 c0                	add    eax,eax
c000c5fe:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c606:	25 ff ff 00 00       	and    eax,0xffff
c000c60b:	8d 50 d0             	lea    edx,[eax-0x30]
c000c60e:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c613:	01 d0                	add    eax,edx
c000c615:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c61a:	eb 71                	jmp    c000c68d <sendKeyboardToken(KeyboardToken)+0x372>
c000c61c:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c626:	eb 65                	jmp    c000c68d <sendKeyboardToken(KeyboardToken)+0x372>
c000c628:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c62d:	85 c0                	test   eax,eax
c000c62f:	74 1a                	je     c000c64b <sendKeyboardToken(KeyboardToken)+0x330>
c000c631:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c636:	25 ff 00 00 00       	and    eax,0xff
c000c63b:	83 ec 0c             	sub    esp,0xc
c000c63e:	50                   	push   eax
c000c63f:	e8 0e fc ff ff       	call   c000c252 <sendKeyToTerminal(unsigned char)>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c64b:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c655:	eb 36                	jmp    c000c68d <sendKeyboardToken(KeyboardToken)+0x372>
c000c657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65a:	66 3d 01 01          	cmp    ax,0x101
c000c65e:	75 2d                	jne    c000c68d <sendKeyboardToken(KeyboardToken)+0x372>
c000c660:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c665:	85 c0                	test   eax,eax
c000c667:	74 1a                	je     c000c683 <sendKeyboardToken(KeyboardToken)+0x368>
c000c669:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c66e:	25 ff 00 00 00       	and    eax,0xff
c000c673:	83 ec 0c             	sub    esp,0xc
c000c676:	50                   	push   eax
c000c677:	e8 d6 fb ff ff       	call   c000c252 <sendKeyToTerminal(unsigned char)>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c683:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c68d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c690:	83 f0 01             	xor    eax,0x1
c000c693:	84 c0                	test   al,al
c000c695:	74 4e                	je     c000c6e5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c697:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c69a:	83 f0 01             	xor    eax,0x1
c000c69d:	84 c0                	test   al,al
c000c69f:	74 44                	je     c000c6e5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6a1:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6a6:	83 f0 01             	xor    eax,0x1
c000c6a9:	84 c0                	test   al,al
c000c6ab:	74 38                	je     c000c6e5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b0:	66 83 f8 1f          	cmp    ax,0x1f
c000c6b4:	76 09                	jbe    c000c6bf <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c6b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b9:	66 83 f8 7e          	cmp    ax,0x7e
c000c6bd:	76 12                	jbe    c000c6d1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c2:	66 83 f8 0a          	cmp    ax,0xa
c000c6c6:	74 09                	je     c000c6d1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cb:	66 83 f8 08          	cmp    ax,0x8
c000c6cf:	75 14                	jne    c000c6e5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d4:	25 ff 00 00 00       	and    eax,0xff
c000c6d9:	83 ec 0c             	sub    esp,0xc
c000c6dc:	50                   	push   eax
c000c6dd:	e8 70 fb ff ff       	call   c000c252 <sendKeyToTerminal(unsigned char)>
c000c6e2:	83 c4 10             	add    esp,0x10
c000c6e5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6e8:	83 f0 01             	xor    eax,0x1
c000c6eb:	84 c0                	test   al,al
c000c6ed:	74 51                	je     c000c740 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6ef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6f2:	83 f0 01             	xor    eax,0x1
c000c6f5:	84 c0                	test   al,al
c000c6f7:	74 47                	je     c000c740 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6f9:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6fe:	84 c0                	test   al,al
c000c700:	74 3e                	je     c000c740 <sendKeyboardToken(KeyboardToken)+0x425>
c000c702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c705:	66 83 f8 3f          	cmp    ax,0x3f
c000c709:	76 35                	jbe    c000c740 <sendKeyboardToken(KeyboardToken)+0x425>
c000c70b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70e:	66 83 f8 7f          	cmp    ax,0x7f
c000c712:	77 2c                	ja     c000c740 <sendKeyboardToken(KeyboardToken)+0x425>
c000c714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c717:	88 c2                	mov    dl,al
c000c719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71c:	66 83 f8 5f          	cmp    ax,0x5f
c000c720:	76 04                	jbe    c000c726 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c722:	b0 20                	mov    al,0x20
c000c724:	eb 02                	jmp    c000c728 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c726:	b0 00                	mov    al,0x0
c000c728:	29 c2                	sub    edx,eax
c000c72a:	88 d0                	mov    al,dl
c000c72c:	83 e8 40             	sub    eax,0x40
c000c72f:	25 ff 00 00 00       	and    eax,0xff
c000c734:	83 ec 0c             	sub    esp,0xc
c000c737:	50                   	push   eax
c000c738:	e8 15 fb ff ff       	call   c000c252 <sendKeyToTerminal(unsigned char)>
c000c73d:	83 c4 10             	add    esp,0x10
c000c740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c743:	66 3d 00 03          	cmp    ax,0x300
c000c747:	75 0f                	jne    c000c758 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c749:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c74c:	83 f0 01             	xor    eax,0x1
c000c74f:	84 c0                	test   al,al
c000c751:	74 05                	je     c000c758 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c753:	e8 41 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c758:	90                   	nop
c000c759:	c9                   	leave  
c000c75a:	c3                   	ret    

c000c75b <clearInternalKeybuffer(VgaText*)>:
c000c75b:	55                   	push   ebp
c000c75c:	89 e5                	mov    ebp,esp
c000c75e:	83 ec 08             	sub    esp,0x8
c000c761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c764:	05 b2 00 00 00       	add    eax,0xb2
c000c769:	83 ec 0c             	sub    esp,0xc
c000c76c:	50                   	push   eax
c000c76d:	e8 ce 3d ff ff       	call   c0000540 <strlen>
c000c772:	83 c4 10             	add    esp,0x10
c000c775:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c778:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c77e:	83 ec 04             	sub    esp,0x4
c000c781:	50                   	push   eax
c000c782:	6a 00                	push   0x0
c000c784:	52                   	push   edx
c000c785:	e8 46 3d ff ff       	call   c00004d0 <memset>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	90                   	nop
c000c78e:	c9                   	leave  
c000c78f:	c3                   	ret    

c000c790 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c790:	55                   	push   ebp
c000c791:	89 e5                	mov    ebp,esp
c000c793:	83 ec 18             	sub    esp,0x18
c000c796:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c79b:	85 c0                	test   eax,eax
c000c79d:	74 2a                	je     c000c7c9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c79f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7a5:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c7ab:	83 ec 04             	sub    esp,0x4
c000c7ae:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c7b3:	83 ec 08             	sub    esp,0x8
c000c7b6:	89 e2                	mov    edx,esp
c000c7b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c7bb:	89 02                	mov    DWORD PTR [edx],eax
c000c7bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7c0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7c4:	ff d1                	call   ecx
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	fb                   	sti    
c000c7ca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c7d1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c7d5:	0f 84 db 00 00 00    	je     c000c8b6 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7de:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7e4:	84 c0                	test   al,al
c000c7e6:	75 28                	jne    c000c810 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7e8:	fa                   	cli    
c000c7e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7ee:	40                   	inc    eax
c000c7ef:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c7f4:	e8 af 6f 00 00       	call   c00137a8 <schedule()>
c000c7f9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c7fe:	48                   	dec    eax
c000c7ff:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c804:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c809:	85 c0                	test   eax,eax
c000c80b:	75 ce                	jne    c000c7db <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c80d:	fb                   	sti    
c000c80e:	eb cb                	jmp    c000c7db <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c813:	8d 50 01             	lea    edx,[eax+0x1]
c000c816:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c819:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c81c:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c822:	88 10                	mov    BYTE PTR [eax],dl
c000c824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c827:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c82d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c830:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c834:	75 2e                	jne    c000c864 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c836:	83 ec 0c             	sub    esp,0xc
c000c839:	68 d4 e0 01 c0       	push   0xc001e0d4
c000c83e:	e8 ed dc ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000c843:	83 c4 10             	add    esp,0x10
c000c846:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c84b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c84d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c850:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c856:	83 ec 08             	sub    esp,0x8
c000c859:	6a 02                	push   0x2
c000c85b:	50                   	push   eax
c000c85c:	e8 3e 3d 00 00       	call   c001059f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c861:	83 c4 10             	add    esp,0x10
c000c864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c867:	05 b2 00 00 00       	add    eax,0xb2
c000c86c:	83 ec 0c             	sub    esp,0xc
c000c86f:	50                   	push   eax
c000c870:	e8 cb 3c ff ff       	call   c0000540 <strlen>
c000c875:	83 c4 10             	add    esp,0x10
c000c878:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c87b:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c881:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c884:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c887:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c88d:	83 ec 04             	sub    esp,0x4
c000c890:	50                   	push   eax
c000c891:	51                   	push   ecx
c000c892:	52                   	push   edx
c000c893:	e8 48 3b ff ff       	call   c00003e0 <memmove>
c000c898:	83 c4 10             	add    esp,0x10
c000c89b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c89e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8a1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8a5:	74 0a                	je     c000c8b1 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c8a7:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8ab:	0f 85 20 ff ff ff    	jne    c000c7d1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c8b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8b4:	eb 03                	jmp    c000c8b9 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c8b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8b9:	c9                   	leave  
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <Keyboard::Keyboard(char const*)>:
c000c8bc:	83 ec 0c             	sub    esp,0xc
c000c8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c3:	83 ec 08             	sub    esp,0x8
c000c8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ca:	50                   	push   eax
c000c8cb:	e8 38 f2 ff ff       	call   c000bb08 <Device::Device(char const*)>
c000c8d0:	83 c4 10             	add    esp,0x10
c000c8d3:	ba ec e0 01 c0       	mov    edx,0xc001e0ec
c000c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8dc:	89 10                	mov    DWORD PTR [eax],edx
c000c8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c8ec:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c8f3:	90                   	nop
c000c8f4:	83 c4 0c             	add    esp,0xc
c000c8f7:	c3                   	ret    

c000c8f8 <Keyboard::~Keyboard()>:
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ba ec e0 01 c0       	mov    edx,0xc001e0ec
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	89 10                	mov    DWORD PTR [eax],edx
c000c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90a:	83 ec 0c             	sub    esp,0xc
c000c90d:	50                   	push   eax
c000c90e:	e8 5f ef ff ff       	call   c000b872 <Device::~Device()>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	90                   	nop
c000c917:	83 c4 0c             	add    esp,0xc
c000c91a:	c3                   	ret    
c000c91b:	90                   	nop

c000c91c <Keyboard::~Keyboard()>:
c000c91c:	83 ec 0c             	sub    esp,0xc
c000c91f:	83 ec 0c             	sub    esp,0xc
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	e8 cd ff ff ff       	call   c000c8f8 <Keyboard::~Keyboard()>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	83 ec 08             	sub    esp,0x8
c000c931:	68 5c 01 00 00       	push   0x15c
c000c936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93a:	e8 fb da ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	83 c4 0c             	add    esp,0xc
c000c945:	c3                   	ret    

c000c946 <LogicalDisk::close(int, int, void*)>:
c000c946:	83 c8 ff             	or     eax,0xffffffff
c000c949:	c3                   	ret    

c000c94a <LogicalDisk::~LogicalDisk()>:
c000c94a:	83 ec 0c             	sub    esp,0xc
c000c94d:	ba 64 e1 01 c0       	mov    edx,0xc001e164
c000c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c956:	89 10                	mov    DWORD PTR [eax],edx
c000c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95c:	83 ec 0c             	sub    esp,0xc
c000c95f:	50                   	push   eax
c000c960:	e8 0d ef ff ff       	call   c000b872 <Device::~Device()>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	90                   	nop
c000c969:	83 c4 0c             	add    esp,0xc
c000c96c:	c3                   	ret    
c000c96d:	90                   	nop

c000c96e <LogicalDisk::~LogicalDisk()>:
c000c96e:	83 ec 0c             	sub    esp,0xc
c000c971:	83 ec 0c             	sub    esp,0xc
c000c974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c978:	e8 cd ff ff ff       	call   c000c94a <LogicalDisk::~LogicalDisk()>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	83 ec 08             	sub    esp,0x8
c000c983:	68 74 01 00 00       	push   0x174
c000c988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98c:	e8 a9 da ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000c991:	83 c4 10             	add    esp,0x10
c000c994:	83 c4 0c             	add    esp,0xc
c000c997:	c3                   	ret    

c000c998 <LogicalDisk::open(int, int, void*)>:
c000c998:	83 ec 18             	sub    esp,0x18
c000c99b:	68 18 e1 01 c0       	push   0xc001e118
c000c9a0:	e8 0e 38 00 00       	call   c00101b3 <KePanic(char const*)>
c000c9a5:	83 c8 ff             	or     eax,0xffffffff
c000c9a8:	83 c4 1c             	add    esp,0x1c
c000c9ab:	c3                   	ret    

c000c9ac <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c9ac:	53                   	push   ebx
c000c9ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9b9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c9bf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c9c5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c9cb:	77 10                	ja     c000c9dd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c9cd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c9d3:	89 d3                	mov    ebx,edx
c000c9d5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c9db:	72 05                	jb     c000c9e2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c9dd:	83 c8 ff             	or     eax,0xffffffff
c000c9e0:	89 c2                	mov    edx,eax
c000c9e2:	5b                   	pop    ebx
c000c9e3:	c3                   	ret    

c000c9e4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c9e4:	56                   	push   esi
c000c9e5:	83 c8 ff             	or     eax,0xffffffff
c000c9e8:	53                   	push   ebx
c000c9e9:	89 c2                	mov    edx,eax
c000c9eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c9ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c9f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9fd:	77 27                	ja     c000ca26 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9ff:	89 d8                	mov    eax,ebx
c000ca01:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca07:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca12:	89 c2                	mov    edx,eax
c000ca14:	73 10                	jae    c000ca26 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca16:	89 c8                	mov    eax,ecx
c000ca18:	89 da                	mov    edx,ebx
c000ca1a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca20:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca26:	5b                   	pop    ebx
c000ca27:	5e                   	pop    esi
c000ca28:	c3                   	ret    
c000ca29:	90                   	nop

c000ca2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca2a:	83 ec 1c             	sub    esp,0x1c
c000ca2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca41:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca50:	83 ec 08             	sub    esp,0x8
c000ca53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca57:	50                   	push   eax
c000ca58:	e8 ab f0 ff ff       	call   c000bb08 <Device::Device(char const*)>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	ba 64 e1 01 c0       	mov    edx,0xc001e164
c000ca65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca69:	89 10                	mov    DWORD PTR [eax],edx
c000ca6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca6f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca7a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca85:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca8f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca9b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000caa1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000caa7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000caae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cab2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cab8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cac2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cac6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cad0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cada:	90                   	nop
c000cadb:	83 c4 1c             	add    esp,0x1c
c000cade:	c3                   	ret    
c000cadf:	90                   	nop

c000cae0 <LogicalDisk::assignDriveLetter()>:
c000cae0:	55                   	push   ebp
c000cae1:	57                   	push   edi
c000cae2:	56                   	push   esi
c000cae3:	53                   	push   ebx
c000cae4:	83 ec 14             	sub    esp,0x14
c000cae7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000caeb:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000caf1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000caf7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cafb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb01:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cb07:	3c 01                	cmp    al,0x1
c000cb09:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb11:	19 c0                	sbb    eax,eax
c000cb13:	83 e0 02             	and    eax,0x2
c000cb16:	83 c0 41             	add    eax,0x41
c000cb19:	0f be e8             	movsx  ebp,al
c000cb1c:	3c 43                	cmp    al,0x43
c000cb1e:	75 10                	jne    c000cb30 <LogicalDisk::assignDriveLetter()+0x50>
c000cb20:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb27:	75 5d                	jne    c000cb86 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb29:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb2e:	75 56                	jne    c000cb86 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb30:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb33:	ba 01 00 00 00       	mov    edx,0x1
c000cb38:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb3c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb40:	d3 e2                	shl    edx,cl
c000cb42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb46:	89 d7                	mov    edi,edx
c000cb48:	89 d6                	mov    esi,edx
c000cb4a:	c1 ff 1f             	sar    edi,0x1f
c000cb4d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb51:	21 f9                	and    ecx,edi
c000cb53:	09 d1                	or     ecx,edx
c000cb55:	75 2f                	jne    c000cb86 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb57:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb5f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb65:	09 f2                	or     edx,esi
c000cb67:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cb6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb71:	09 fa                	or     edx,edi
c000cb73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb77:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cb7d:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cb84:	eb 08                	jmp    c000cb8e <LogicalDisk::assignDriveLetter()+0xae>
c000cb86:	45                   	inc    ebp
c000cb87:	40                   	inc    eax
c000cb88:	3c 5b                	cmp    al,0x5b
c000cb8a:	75 90                	jne    c000cb1c <LogicalDisk::assignDriveLetter()+0x3c>
c000cb8c:	31 c0                	xor    eax,eax
c000cb8e:	83 c4 14             	add    esp,0x14
c000cb91:	5b                   	pop    ebx
c000cb92:	5e                   	pop    esi
c000cb93:	5f                   	pop    edi
c000cb94:	5d                   	pop    ebp
c000cb95:	c3                   	ret    

c000cb96 <LogicalDisk::mount()>:
c000cb96:	56                   	push   esi
c000cb97:	53                   	push   ebx
c000cb98:	53                   	push   ebx
c000cb99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb9d:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cba3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cbad:	85 db                	test   ebx,ebx
c000cbaf:	74 27                	je     c000cbd8 <LogicalDisk::mount()+0x42>
c000cbb1:	51                   	push   ecx
c000cbb2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cbb9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cbbb:	83 e8 41             	sub    eax,0x41
c000cbbe:	50                   	push   eax
c000cbbf:	56                   	push   esi
c000cbc0:	53                   	push   ebx
c000cbc1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cbc4:	83 c4 10             	add    esp,0x10
c000cbc7:	84 c0                	test   al,al
c000cbc9:	74 08                	je     c000cbd3 <LogicalDisk::mount()+0x3d>
c000cbcb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cbd1:	eb 07                	jmp    c000cbda <LogicalDisk::mount()+0x44>
c000cbd3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cbd6:	eb d5                	jmp    c000cbad <LogicalDisk::mount()+0x17>
c000cbd8:	31 c0                	xor    eax,eax
c000cbda:	5a                   	pop    edx
c000cbdb:	5b                   	pop    ebx
c000cbdc:	5e                   	pop    esi
c000cbdd:	c3                   	ret    

c000cbde <LogicalDisk::unmount()>:
c000cbde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cbec:	c3                   	ret    
c000cbed:	90                   	nop

c000cbee <LogicalDisk::eject()>:
c000cbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbf2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cbf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbfe:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc01:	90                   	nop

c000cc02 <LogicalDisk::unassignDriveLetter()>:
c000cc02:	57                   	push   edi
c000cc03:	56                   	push   esi
c000cc04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc08:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc0f:	84 c9                	test   cl,cl
c000cc11:	75 0f                	jne    c000cc22 <LogicalDisk::unassignDriveLetter()+0x20>
c000cc13:	c7 44 24 0c 3c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e13c
c000cc1b:	5e                   	pop    esi
c000cc1c:	5f                   	pop    edi
c000cc1d:	e9 91 35 00 00       	jmp    c00101b3 <KePanic(char const*)>
c000cc22:	83 e9 41             	sub    ecx,0x41
c000cc25:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc2c:	b8 01 00 00 00       	mov    eax,0x1
c000cc31:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc3c:	d3 e0                	shl    eax,cl
c000cc3e:	89 c7                	mov    edi,eax
c000cc40:	f7 d0                	not    eax
c000cc42:	c1 ff 1f             	sar    edi,0x1f
c000cc45:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc4b:	89 fe                	mov    esi,edi
c000cc4d:	f7 d6                	not    esi
c000cc4f:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cc55:	5e                   	pop    esi
c000cc56:	5f                   	pop    edi
c000cc57:	c3                   	ret    

c000cc58 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc58:	57                   	push   edi
c000cc59:	56                   	push   esi
c000cc5a:	53                   	push   ebx
c000cc5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc6b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc71:	77 41                	ja     c000ccb4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc73:	99                   	cdq    
c000cc74:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc7a:	01 c8                	add    eax,ecx
c000cc7c:	11 da                	adc    edx,ebx
c000cc7e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc84:	19 d7                	sbb    edi,edx
c000cc86:	72 33                	jb     c000ccbb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc88:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc8e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc98:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc9c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cca2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cca8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccac:	5b                   	pop    ebx
c000ccad:	5e                   	pop    esi
c000ccae:	5f                   	pop    edi
c000ccaf:	e9 4e 0a 00 00       	jmp    c000d702 <VCache::read(unsigned long long, int, void*)>
c000ccb4:	b8 05 00 00 00       	mov    eax,0x5
c000ccb9:	eb 05                	jmp    c000ccc0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ccbb:	b8 07 00 00 00       	mov    eax,0x7
c000ccc0:	5b                   	pop    ebx
c000ccc1:	5e                   	pop    esi
c000ccc2:	5f                   	pop    edi
c000ccc3:	c3                   	ret    

c000ccc4 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ccc4:	57                   	push   edi
c000ccc5:	56                   	push   esi
c000ccc6:	53                   	push   ebx
c000ccc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cccb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cccf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccd7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccdd:	77 41                	ja     c000cd20 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ccdf:	99                   	cdq    
c000cce0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cce6:	01 c8                	add    eax,ecx
c000cce8:	11 da                	adc    edx,ebx
c000ccea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ccf0:	19 d7                	sbb    edi,edx
c000ccf2:	72 33                	jb     c000cd27 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ccf4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccfa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd00:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd04:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd08:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd18:	5b                   	pop    ebx
c000cd19:	5e                   	pop    esi
c000cd1a:	5f                   	pop    edi
c000cd1b:	e9 cc 08 00 00       	jmp    c000d5ec <VCache::write(unsigned long long, int, void*)>
c000cd20:	b8 05 00 00 00       	mov    eax,0x5
c000cd25:	eb 05                	jmp    c000cd2c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd27:	b8 07 00 00 00       	mov    eax,0x7
c000cd2c:	5b                   	pop    ebx
c000cd2d:	5e                   	pop    esi
c000cd2e:	5f                   	pop    edi
c000cd2f:	c3                   	ret    

c000cd30 <Mouse::Mouse(char const*)>:
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd37:	83 ec 08             	sub    esp,0x8
c000cd3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3e:	50                   	push   eax
c000cd3f:	e8 c4 ed ff ff       	call   c000bb08 <Device::Device(char const*)>
c000cd44:	83 c4 10             	add    esp,0x10
c000cd47:	ba 90 e1 01 c0       	mov    edx,0xc001e190
c000cd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd50:	89 10                	mov    DWORD PTR [eax],edx
c000cd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd56:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd60:	90                   	nop
c000cd61:	83 c4 0c             	add    esp,0xc
c000cd64:	c3                   	ret    
c000cd65:	90                   	nop
c000cd66:	66 90                	xchg   ax,ax

c000cd68 <Mouse::~Mouse()>:
c000cd68:	83 ec 0c             	sub    esp,0xc
c000cd6b:	ba 90 e1 01 c0       	mov    edx,0xc001e190
c000cd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd74:	89 10                	mov    DWORD PTR [eax],edx
c000cd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7a:	83 ec 0c             	sub    esp,0xc
c000cd7d:	50                   	push   eax
c000cd7e:	e8 ef ea ff ff       	call   c000b872 <Device::~Device()>
c000cd83:	83 c4 10             	add    esp,0x10
c000cd86:	90                   	nop
c000cd87:	83 c4 0c             	add    esp,0xc
c000cd8a:	c3                   	ret    
c000cd8b:	90                   	nop

c000cd8c <Mouse::~Mouse()>:
c000cd8c:	83 ec 0c             	sub    esp,0xc
c000cd8f:	83 ec 0c             	sub    esp,0xc
c000cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd96:	e8 cd ff ff ff       	call   c000cd68 <Mouse::~Mouse()>
c000cd9b:	83 c4 10             	add    esp,0x10
c000cd9e:	83 ec 08             	sub    esp,0x8
c000cda1:	68 58 01 00 00       	push   0x158
c000cda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdaa:	e8 8b d6 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000cdaf:	83 c4 10             	add    esp,0x10
c000cdb2:	83 c4 0c             	add    esp,0xc
c000cdb5:	c3                   	ret    

c000cdb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cdb6:	55                   	push   ebp
c000cdb7:	57                   	push   edi
c000cdb8:	56                   	push   esi
c000cdb9:	53                   	push   ebx
c000cdba:	81 ec 28 01 00 00    	sub    esp,0x128
c000cdc0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cdc7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cdce:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cdd5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cde0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cde4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdeb:	e8 14 ee ff ff       	call   c000bc04 <Device::getName()>
c000cdf0:	5a                   	pop    edx
c000cdf1:	59                   	pop    ecx
c000cdf2:	50                   	push   eax
c000cdf3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cdf7:	55                   	push   ebp
c000cdf8:	e8 03 38 ff ff       	call   c0000600 <strcpy>
c000cdfd:	5b                   	pop    ebx
c000cdfe:	58                   	pop    eax
c000cdff:	68 b4 e1 01 c0       	push   0xc001e1b4
c000ce04:	55                   	push   ebp
c000ce05:	e8 b6 39 ff ff       	call   c00007c0 <strcat>
c000ce0a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce11:	e8 a3 a9 ff ff       	call   c00077b9 <malloc>
c000ce16:	83 c4 0c             	add    esp,0xc
c000ce19:	89 c3                	mov    ebx,eax
c000ce1b:	57                   	push   edi
c000ce1c:	56                   	push   esi
c000ce1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce25:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce2c:	55                   	push   ebp
c000ce2d:	50                   	push   eax
c000ce2e:	e8 f7 fb ff ff       	call   c000ca2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce33:	83 c4 14             	add    esp,0x14
c000ce36:	53                   	push   ebx
c000ce37:	e8 a4 fc ff ff       	call   c000cae0 <LogicalDisk::assignDriveLetter()>
c000ce3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce3f:	e8 52 fd ff ff       	call   c000cb96 <LogicalDisk::mount()>
c000ce44:	58                   	pop    eax
c000ce45:	5a                   	pop    edx
c000ce46:	53                   	push   ebx
c000ce47:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce4e:	e8 1d eb ff ff       	call   c000b970 <Device::addChild(Device*)>
c000ce53:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce59:	5b                   	pop    ebx
c000ce5a:	5e                   	pop    esi
c000ce5b:	5f                   	pop    edi
c000ce5c:	5d                   	pop    ebp
c000ce5d:	c3                   	ret    

c000ce5e <createPartitionsForDisk(PhysicalDisk*)>:
c000ce5e:	55                   	push   ebp
c000ce5f:	57                   	push   edi
c000ce60:	56                   	push   esi
c000ce61:	53                   	push   ebx
c000ce62:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce68:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce6f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce75:	3d 00 02 00 00       	cmp    eax,0x200
c000ce7a:	74 27                	je     c000cea3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce7c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce82:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce88:	83 ec 10             	sub    esp,0x10
c000ce8b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce8f:	99                   	cdq    
c000ce90:	c1 e6 0a             	shl    esi,0xa
c000ce93:	52                   	push   edx
c000ce94:	89 fd                	mov    ebp,edi
c000ce96:	50                   	push   eax
c000ce97:	55                   	push   ebp
c000ce98:	56                   	push   esi
c000ce99:	e8 62 f2 00 00       	call   c001c100 <__udivdi3>
c000ce9e:	e9 b1 00 00 00       	jmp    c000cf54 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cea8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ceac:	56                   	push   esi
c000cead:	6a 01                	push   0x1
c000ceaf:	6a 00                	push   0x0
c000ceb1:	6a 00                	push   0x0
c000ceb3:	53                   	push   ebx
c000ceb4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ceb7:	83 c4 20             	add    esp,0x20
c000ceba:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cec2:	75 0a                	jne    c000cece <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cec4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cecc:	74 2c                	je     c000cefa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cece:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ced4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ceda:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cee0:	83 ec 10             	sub    esp,0x10
c000cee3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cee7:	89 f7                	mov    edi,esi
c000cee9:	c1 e0 0a             	shl    eax,0xa
c000ceec:	c1 ff 1f             	sar    edi,0x1f
c000ceef:	57                   	push   edi
c000cef0:	56                   	push   esi
c000cef1:	52                   	push   edx
c000cef2:	50                   	push   eax
c000cef3:	e8 08 f2 00 00       	call   c001c100 <__udivdi3>
c000cef8:	eb 5a                	jmp    c000cf54 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cefa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf01:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf08:	83 e1 7f             	and    ecx,0x7f
c000cf0b:	83 e0 7f             	and    eax,0x7f
c000cf0e:	01 c1                	add    ecx,eax
c000cf10:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf17:	83 e0 7f             	and    eax,0x7f
c000cf1a:	01 c1                	add    ecx,eax
c000cf1c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf23:	83 e0 7f             	and    eax,0x7f
c000cf26:	00 c1                	add    cl,al
c000cf28:	74 41                	je     c000cf6b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf30:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf3c:	83 ec 10             	sub    esp,0x10
c000cf3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf43:	89 f7                	mov    edi,esi
c000cf45:	c1 e0 0a             	shl    eax,0xa
c000cf48:	c1 ff 1f             	sar    edi,0x1f
c000cf4b:	57                   	push   edi
c000cf4c:	56                   	push   esi
c000cf4d:	52                   	push   edx
c000cf4e:	50                   	push   eax
c000cf4f:	e8 ac f1 00 00       	call   c001c100 <__udivdi3>
c000cf54:	83 c4 14             	add    esp,0x14
c000cf57:	52                   	push   edx
c000cf58:	50                   	push   eax
c000cf59:	6a 00                	push   0x0
c000cf5b:	6a 00                	push   0x0
c000cf5d:	53                   	push   ebx
c000cf5e:	e8 53 fe ff ff       	call   c000cdb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf63:	83 c4 20             	add    esp,0x20
c000cf66:	e9 79 01 00 00       	jmp    c000d0e4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf6b:	89 f0                	mov    eax,esi
c000cf6d:	31 f6                	xor    esi,esi
c000cf6f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf76:	75 02                	jne    c000cf7a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf78:	89 f1                	mov    ecx,esi
c000cf7a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf81:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf88:	c1 e2 08             	shl    edx,0x8
c000cf8b:	c1 e7 10             	shl    edi,0x10
c000cf8e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf96:	09 fa                	or     edx,edi
c000cf98:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cfa0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cfa7:	83 c0 10             	add    eax,0x10
c000cfaa:	09 fa                	or     edx,edi
c000cfac:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cfb3:	c1 e7 18             	shl    edi,0x18
c000cfb6:	09 fa                	or     edx,edi
c000cfb8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cfbf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cfc3:	c1 e7 10             	shl    edi,0x10
c000cfc6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cfcd:	c1 e2 08             	shl    edx,0x8
c000cfd0:	09 fa                	or     edx,edi
c000cfd2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cfd9:	09 fa                	or     edx,edi
c000cfdb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cfe2:	c1 e7 18             	shl    edi,0x18
c000cfe5:	09 fa                	or     edx,edi
c000cfe7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cfeb:	46                   	inc    esi
c000cfec:	83 fe 04             	cmp    esi,0x4
c000cfef:	0f 85 7a ff ff ff    	jne    c000cf6f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff9:	83 f0 01             	xor    eax,0x1
c000cffc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d000:	75 57                	jne    c000d059 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d006:	83 f0 01             	xor    eax,0x1
c000d009:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d00d:	75 4a                	jne    c000d059 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d00f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d013:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d01b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d023:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d029:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d02f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d035:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d039:	89 f7                	mov    edi,esi
c000d03b:	c1 e0 0a             	shl    eax,0xa
c000d03e:	c1 ff 1f             	sar    edi,0x1f
c000d041:	57                   	push   edi
c000d042:	56                   	push   esi
c000d043:	52                   	push   edx
c000d044:	50                   	push   eax
c000d045:	e8 b6 f0 00 00       	call   c001c100 <__udivdi3>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d051:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d055:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d059:	84 c9                	test   cl,cl
c000d05b:	74 53                	je     c000d0b0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d05d:	0f b6 c9             	movzx  ecx,cl
c000d060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d064:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d068:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d06c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d074:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d078:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d07c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d080:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d084:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d08c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d090:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d094:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d098:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d09c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d0ac:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d0b0:	31 ed                	xor    ebp,ebp
c000d0b2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d0b6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d0ba:	89 f8                	mov    eax,edi
c000d0bc:	09 f0                	or     eax,esi
c000d0be:	74 1e                	je     c000d0de <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0c0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d0c4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d0c8:	89 d1                	mov    ecx,edx
c000d0ca:	09 c1                	or     ecx,eax
c000d0cc:	74 10                	je     c000d0de <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0ce:	83 ec 0c             	sub    esp,0xc
c000d0d1:	57                   	push   edi
c000d0d2:	56                   	push   esi
c000d0d3:	52                   	push   edx
c000d0d4:	50                   	push   eax
c000d0d5:	53                   	push   ebx
c000d0d6:	e8 db fc ff ff       	call   c000cdb6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0db:	83 c4 20             	add    esp,0x20
c000d0de:	45                   	inc    ebp
c000d0df:	83 fd 04             	cmp    ebp,0x4
c000d0e2:	75 ce                	jne    c000d0b2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d0e4:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d0ea:	5b                   	pop    ebx
c000d0eb:	5e                   	pop    esi
c000d0ec:	5f                   	pop    edi
c000d0ed:	5d                   	pop    ebp
c000d0ee:	c3                   	ret    
c000d0ef:	90                   	nop

c000d0f0 <Serial::Serial(char const*)>:
c000d0f0:	83 ec 0c             	sub    esp,0xc
c000d0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f7:	83 ec 08             	sub    esp,0x8
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	50                   	push   eax
c000d0ff:	e8 04 ea ff ff       	call   c000bb08 <Device::Device(char const*)>
c000d104:	83 c4 10             	add    esp,0x10
c000d107:	ba c8 e1 01 c0       	mov    edx,0xc001e1c8
c000d10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d110:	89 10                	mov    DWORD PTR [eax],edx
c000d112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d116:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d120:	90                   	nop
c000d121:	83 c4 0c             	add    esp,0xc
c000d124:	c3                   	ret    
c000d125:	90                   	nop
c000d126:	66 90                	xchg   ax,ax

c000d128 <Serial::~Serial()>:
c000d128:	83 ec 0c             	sub    esp,0xc
c000d12b:	ba c8 e1 01 c0       	mov    edx,0xc001e1c8
c000d130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d134:	89 10                	mov    DWORD PTR [eax],edx
c000d136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d13a:	83 ec 0c             	sub    esp,0xc
c000d13d:	50                   	push   eax
c000d13e:	e8 2f e7 ff ff       	call   c000b872 <Device::~Device()>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	90                   	nop
c000d147:	83 c4 0c             	add    esp,0xc
c000d14a:	c3                   	ret    
c000d14b:	90                   	nop

c000d14c <Serial::~Serial()>:
c000d14c:	83 ec 0c             	sub    esp,0xc
c000d14f:	83 ec 0c             	sub    esp,0xc
c000d152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d156:	e8 cd ff ff ff       	call   c000d128 <Serial::~Serial()>
c000d15b:	83 c4 10             	add    esp,0x10
c000d15e:	83 ec 08             	sub    esp,0x8
c000d161:	68 58 01 00 00       	push   0x158
c000d166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d16a:	e8 cb d2 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000d16f:	83 c4 10             	add    esp,0x10
c000d172:	83 c4 0c             	add    esp,0xc
c000d175:	c3                   	ret    
c000d176:	66 90                	xchg   ax,ax

c000d178 <Timer::Timer(char const*)>:
c000d178:	83 ec 0c             	sub    esp,0xc
c000d17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17f:	83 ec 08             	sub    esp,0x8
c000d182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d186:	50                   	push   eax
c000d187:	e8 7c e9 ff ff       	call   c000bb08 <Device::Device(char const*)>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	ba 0c e2 01 c0       	mov    edx,0xc001e20c
c000d194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d198:	89 10                	mov    DWORD PTR [eax],edx
c000d19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d19e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1a8:	90                   	nop
c000d1a9:	83 c4 0c             	add    esp,0xc
c000d1ac:	c3                   	ret    
c000d1ad:	90                   	nop
c000d1ae:	66 90                	xchg   ax,ax

c000d1b0 <Timer::~Timer()>:
c000d1b0:	83 ec 0c             	sub    esp,0xc
c000d1b3:	ba 0c e2 01 c0       	mov    edx,0xc001e20c
c000d1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1bc:	89 10                	mov    DWORD PTR [eax],edx
c000d1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c2:	83 ec 0c             	sub    esp,0xc
c000d1c5:	50                   	push   eax
c000d1c6:	e8 a7 e6 ff ff       	call   c000b872 <Device::~Device()>
c000d1cb:	83 c4 10             	add    esp,0x10
c000d1ce:	90                   	nop
c000d1cf:	83 c4 0c             	add    esp,0xc
c000d1d2:	c3                   	ret    
c000d1d3:	90                   	nop

c000d1d4 <Timer::~Timer()>:
c000d1d4:	83 ec 0c             	sub    esp,0xc
c000d1d7:	83 ec 0c             	sub    esp,0xc
c000d1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1de:	e8 cd ff ff ff       	call   c000d1b0 <Timer::~Timer()>
c000d1e3:	83 c4 10             	add    esp,0x10
c000d1e6:	83 ec 08             	sub    esp,0x8
c000d1e9:	68 5c 01 00 00       	push   0x15c
c000d1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1f2:	e8 43 d2 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000d1f7:	83 c4 10             	add    esp,0x10
c000d1fa:	83 c4 0c             	add    esp,0xc
c000d1fd:	c3                   	ret    

c000d1fe <Timer::read()>:
c000d1fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d202:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d208:	c3                   	ret    

c000d209 <setupTimer(int)>:
c000d209:	53                   	push   ebx
c000d20a:	83 ec 14             	sub    esp,0x14
c000d20d:	68 5c 01 00 00       	push   0x15c
c000d212:	e8 a2 a5 ff ff       	call   c00077b9 <malloc>
c000d217:	89 04 24             	mov    DWORD PTR [esp],eax
c000d21a:	89 c3                	mov    ebx,eax
c000d21c:	e8 fb e7 00 00       	call   c001ba1c <PIT::PIT()>
c000d221:	58                   	pop    eax
c000d222:	5a                   	pop    edx
c000d223:	53                   	push   ebx
c000d224:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d22a:	e8 41 e7 ff ff       	call   c000b970 <Device::addChild(Device*)>
c000d22f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d231:	6a 00                	push   0x0
c000d233:	6a 00                	push   0x0
c000d235:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d239:	53                   	push   ebx
c000d23a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d23d:	89 d8                	mov    eax,ebx
c000d23f:	83 c4 28             	add    esp,0x28
c000d242:	5b                   	pop    ebx
c000d243:	c3                   	ret    

c000d244 <timerHandler(unsigned int)>:
c000d244:	56                   	push   esi
c000d245:	53                   	push   ebx
c000d246:	51                   	push   ecx
c000d247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24b:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d251:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d258:	0f 84 4a 01 00 00    	je     c000d3a8 <timerHandler(unsigned int)+0x164>
c000d25e:	fa                   	cli    
c000d25f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d265:	83 ec 0c             	sub    esp,0xc
c000d268:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d26e:	68 78 51 02 c0       	push   0xc0025178
c000d273:	e8 58 f4 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	84 c0                	test   al,al
c000d27d:	0f 85 a1 00 00 00    	jne    c000d324 <timerHandler(unsigned int)+0xe0>
c000d283:	83 ec 0c             	sub    esp,0xc
c000d286:	68 78 51 02 c0       	push   0xc0025178
c000d28b:	e8 5c f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d290:	83 c4 10             	add    esp,0x10
c000d293:	89 c6                	mov    esi,eax
c000d295:	8d 76 00             	lea    esi,[esi+0x0]
c000d298:	83 ec 0c             	sub    esp,0xc
c000d29b:	68 78 51 02 c0       	push   0xc0025178
c000d2a0:	e8 47 f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a5:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d2ac:	89 c3                	mov    ebx,eax
c000d2ae:	e8 41 f4 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d2b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d2bf:	77 23                	ja     c000d2e4 <timerHandler(unsigned int)+0xa0>
c000d2c1:	83 ec 0c             	sub    esp,0xc
c000d2c4:	53                   	push   ebx
c000d2c5:	e8 a2 69 00 00       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c000d2ca:	83 c4 10             	add    esp,0x10
c000d2cd:	39 de                	cmp    esi,ebx
c000d2cf:	75 27                	jne    c000d2f8 <timerHandler(unsigned int)+0xb4>
c000d2d1:	83 ec 0c             	sub    esp,0xc
c000d2d4:	68 78 51 02 c0       	push   0xc0025178
c000d2d9:	e8 0e f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2de:	89 c6                	mov    esi,eax
c000d2e0:	eb 12                	jmp    c000d2f4 <timerHandler(unsigned int)+0xb0>
c000d2e2:	66 90                	xchg   ax,ax
c000d2e4:	52                   	push   edx
c000d2e5:	52                   	push   edx
c000d2e6:	53                   	push   ebx
c000d2e7:	68 78 51 02 c0       	push   0xc0025178
c000d2ec:	e8 bb f4 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	90                   	nop
c000d2f8:	83 ec 0c             	sub    esp,0xc
c000d2fb:	68 78 51 02 c0       	push   0xc0025178
c000d300:	e8 cb f3 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d305:	83 c4 10             	add    esp,0x10
c000d308:	84 c0                	test   al,al
c000d30a:	75 18                	jne    c000d324 <timerHandler(unsigned int)+0xe0>
c000d30c:	83 ec 0c             	sub    esp,0xc
c000d30f:	68 78 51 02 c0       	push   0xc0025178
c000d314:	e8 d3 f3 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	39 f0                	cmp    eax,esi
c000d31e:	0f 85 74 ff ff ff    	jne    c000d298 <timerHandler(unsigned int)+0x54>
c000d324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d329:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d32d:	74 41                	je     c000d370 <timerHandler(unsigned int)+0x12c>
c000d32f:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d336:	74 38                	je     c000d370 <timerHandler(unsigned int)+0x12c>
c000d338:	fa                   	cli    
c000d339:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d33f:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d344:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d34a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d34d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d353:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d356:	72 08                	jb     c000d360 <timerHandler(unsigned int)+0x11c>
c000d358:	e8 4b 64 00 00       	call   c00137a8 <schedule()>
c000d35d:	8d 76 00             	lea    esi,[esi+0x0]
c000d360:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d365:	48                   	dec    eax
c000d366:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d36b:	75 03                	jne    c000d370 <timerHandler(unsigned int)+0x12c>
c000d36d:	fb                   	sti    
c000d36e:	66 90                	xchg   ax,ax
c000d370:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d375:	48                   	dec    eax
c000d376:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d37b:	75 1b                	jne    c000d398 <timerHandler(unsigned int)+0x154>
c000d37d:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d384:	74 12                	je     c000d398 <timerHandler(unsigned int)+0x154>
c000d386:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d390:	e8 13 64 00 00       	call   c00137a8 <schedule()>
c000d395:	8d 76 00             	lea    esi,[esi+0x0]
c000d398:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d39d:	48                   	dec    eax
c000d39e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3a3:	75 03                	jne    c000d3a8 <timerHandler(unsigned int)+0x164>
c000d3a5:	fb                   	sti    
c000d3a6:	66 90                	xchg   ax,ax
c000d3a8:	58                   	pop    eax
c000d3a9:	5b                   	pop    ebx
c000d3aa:	5e                   	pop    esi
c000d3ab:	c3                   	ret    

c000d3ac <VCache::VCache(PhysicalDisk*)>:
c000d3ac:	53                   	push   ebx
c000d3ad:	83 ec 18             	sub    esp,0x18
c000d3b0:	ba 3c e2 01 c0       	mov    edx,0xc001e23c
c000d3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b9:	89 10                	mov    DWORD PTR [eax],edx
c000d3bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ca:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d3dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d3e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d3ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d404:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d413:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d426:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d42a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d42e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d436:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d43d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d445:	83 ec 0c             	sub    esp,0xc
c000d448:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d44c:	e8 68 a3 ff ff       	call   c00077b9 <malloc>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	89 c3                	mov    ebx,eax
c000d456:	83 ec 0c             	sub    esp,0xc
c000d459:	53                   	push   ebx
c000d45a:	e8 15 61 00 00       	call   c0013574 <Mutex::Mutex()>
c000d45f:	83 c4 10             	add    esp,0x10
c000d462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d466:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d46d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d471:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d478:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d47f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d483:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d490:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d494:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d49a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4a4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4a7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4bc:	05 00 01 00 00       	add    eax,0x100
c000d4c1:	c1 e0 04             	shl    eax,0x4
c000d4c4:	83 ec 0c             	sub    esp,0xc
c000d4c7:	50                   	push   eax
c000d4c8:	e8 ec a2 ff ff       	call   c00077b9 <malloc>
c000d4cd:	83 c4 10             	add    esp,0x10
c000d4d0:	89 c2                	mov    edx,eax
c000d4d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d4d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4dd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d4e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4f6:	c1 e0 06             	shl    eax,0x6
c000d4f9:	83 ec 0c             	sub    esp,0xc
c000d4fc:	50                   	push   eax
c000d4fd:	e8 b7 a2 ff ff       	call   c00077b9 <malloc>
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	89 c2                	mov    edx,eax
c000d507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d50e:	90                   	nop
c000d50f:	83 c4 18             	add    esp,0x18
c000d512:	5b                   	pop    ebx
c000d513:	c3                   	ret    

c000d514 <VCache::invalidateReadBuffer()>:
c000d514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d518:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d51e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d522:	c3                   	ret    
c000d523:	90                   	nop

c000d524 <VCache::writeWriteBuffer()>:
c000d524:	53                   	push   ebx
c000d525:	83 ec 08             	sub    esp,0x8
c000d528:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d52c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d530:	74 1e                	je     c000d550 <VCache::writeWriteBuffer()+0x2c>
c000d532:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d535:	83 ec 0c             	sub    esp,0xc
c000d538:	8b 10                	mov    edx,DWORD PTR [eax]
c000d53a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d53d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d540:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d543:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d546:	50                   	push   eax
c000d547:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d54a:	83 c4 20             	add    esp,0x20
c000d54d:	8d 76 00             	lea    esi,[esi+0x0]
c000d550:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d557:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d55e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d562:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d569:	83 c4 08             	add    esp,0x8
c000d56c:	5b                   	pop    ebx
c000d56d:	c3                   	ret    
c000d56e:	66 90                	xchg   ax,ax

c000d570 <VCache::~VCache()>:
c000d570:	83 ec 0c             	sub    esp,0xc
c000d573:	ba 3c e2 01 c0       	mov    edx,0xc001e23c
c000d578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57c:	89 10                	mov    DWORD PTR [eax],edx
c000d57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d582:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d585:	84 c0                	test   al,al
c000d587:	74 0f                	je     c000d598 <VCache::~VCache()+0x28>
c000d589:	83 ec 0c             	sub    esp,0xc
c000d58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d590:	e8 8f ff ff ff       	call   c000d524 <VCache::writeWriteBuffer()>
c000d595:	83 c4 10             	add    esp,0x10
c000d598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d59f:	83 ec 0c             	sub    esp,0xc
c000d5a2:	50                   	push   eax
c000d5a3:	e8 21 a2 ff ff       	call   c00077c9 <free>
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d5b2:	83 ec 0c             	sub    esp,0xc
c000d5b5:	50                   	push   eax
c000d5b6:	e8 0e a2 ff ff       	call   c00077c9 <free>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	90                   	nop
c000d5bf:	83 c4 0c             	add    esp,0xc
c000d5c2:	c3                   	ret    
c000d5c3:	90                   	nop

c000d5c4 <VCache::~VCache()>:
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	83 ec 0c             	sub    esp,0xc
c000d5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ce:	e8 9d ff ff ff       	call   c000d570 <VCache::~VCache()>
c000d5d3:	83 c4 10             	add    esp,0x10
c000d5d6:	83 ec 08             	sub    esp,0x8
c000d5d9:	6a 44                	push   0x44
c000d5db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5df:	e8 56 ce ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	83 c4 0c             	add    esp,0xc
c000d5ea:	c3                   	ret    
c000d5eb:	90                   	nop

c000d5ec <VCache::write(unsigned long long, int, void*)>:
c000d5ec:	55                   	push   ebp
c000d5ed:	57                   	push   edi
c000d5ee:	56                   	push   esi
c000d5ef:	53                   	push   ebx
c000d5f0:	83 ec 1c             	sub    esp,0x1c
c000d5f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d5f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5ff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d603:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d607:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d60b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d60f:	31 c0                	xor    eax,eax
c000d611:	8d 76 00             	lea    esi,[esi+0x0]
c000d614:	39 e8                	cmp    eax,ebp
c000d616:	7d 18                	jge    c000d630 <VCache::write(unsigned long long, int, void*)+0x44>
c000d618:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d61b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d621:	0f af c8             	imul   ecx,eax
c000d624:	89 ca                	mov    edx,ecx
c000d626:	01 f2                	add    edx,esi
c000d628:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d62a:	40                   	inc    eax
c000d62b:	eb e7                	jmp    c000d614 <VCache::write(unsigned long long, int, void*)+0x28>
c000d62d:	8d 76 00             	lea    esi,[esi+0x0]
c000d630:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d634:	74 0a                	je     c000d640 <VCache::write(unsigned long long, int, void*)+0x54>
c000d636:	53                   	push   ebx
c000d637:	e8 d8 fe ff ff       	call   c000d514 <VCache::invalidateReadBuffer()>
c000d63c:	58                   	pop    eax
c000d63d:	8d 76 00             	lea    esi,[esi+0x0]
c000d640:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d644:	74 5a                	je     c000d6a0 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d646:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d649:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d64d:	89 f8                	mov    eax,edi
c000d64f:	99                   	cdq    
c000d650:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d653:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d656:	31 c1                	xor    ecx,eax
c000d658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d65c:	31 d0                	xor    eax,edx
c000d65e:	09 c1                	or     ecx,eax
c000d660:	75 32                	jne    c000d694 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d662:	83 fd 01             	cmp    ebp,0x1
c000d665:	75 2d                	jne    c000d694 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d667:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d66a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d670:	0f af f9             	imul   edi,ecx
c000d673:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d676:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d678:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d67b:	40                   	inc    eax
c000d67c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d67f:	83 f8 40             	cmp    eax,0x40
c000d682:	75 74                	jne    c000d6f8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	53                   	push   ebx
c000d688:	e8 97 fe ff ff       	call   c000d524 <VCache::writeWriteBuffer()>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	eb 66                	jmp    c000d6f8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d692:	66 90                	xchg   ax,ax
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	53                   	push   ebx
c000d698:	e8 87 fe ff ff       	call   c000d524 <VCache::writeWriteBuffer()>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6a3:	83 fd 3f             	cmp    ebp,0x3f
c000d6a6:	7f 24                	jg     c000d6cc <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d6ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d6af:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d6b2:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d6b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6ba:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d6bd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d6c0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6c8:	eb 2e                	jmp    c000d6f8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6ca:	66 90                	xchg   ax,ax
c000d6cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d6d2:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d6d6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d6da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6de:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d6e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d6e6:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d6ea:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d6ed:	83 c4 1c             	add    esp,0x1c
c000d6f0:	5b                   	pop    ebx
c000d6f1:	5e                   	pop    esi
c000d6f2:	5f                   	pop    edi
c000d6f3:	5d                   	pop    ebp
c000d6f4:	ff e0                	jmp    eax
c000d6f6:	66 90                	xchg   ax,ax
c000d6f8:	83 c4 1c             	add    esp,0x1c
c000d6fb:	31 c0                	xor    eax,eax
c000d6fd:	5b                   	pop    ebx
c000d6fe:	5e                   	pop    esi
c000d6ff:	5f                   	pop    edi
c000d700:	5d                   	pop    ebp
c000d701:	c3                   	ret    

c000d702 <VCache::read(unsigned long long, int, void*)>:
c000d702:	55                   	push   ebp
c000d703:	57                   	push   edi
c000d704:	56                   	push   esi
c000d705:	53                   	push   ebx
c000d706:	83 ec 1c             	sub    esp,0x1c
c000d709:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d70d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d711:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d715:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d71d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d721:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d725:	74 0d                	je     c000d734 <VCache::read(unsigned long long, int, void*)+0x32>
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	55                   	push   ebp
c000d72b:	e8 f4 fd ff ff       	call   c000d524 <VCache::writeWriteBuffer()>
c000d730:	83 c4 10             	add    esp,0x10
c000d733:	90                   	nop
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	55                   	push   ebp
c000d738:	e8 d7 fd ff ff       	call   c000d514 <VCache::invalidateReadBuffer()>
c000d73d:	83 c4 0c             	add    esp,0xc
c000d740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d743:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d749:	6a 00                	push   0x0
c000d74b:	53                   	push   ebx
c000d74c:	e8 7f 2d ff ff       	call   c00004d0 <memset>
c000d751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d754:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d758:	8b 10                	mov    edx,DWORD PTR [eax]
c000d75a:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d75e:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d762:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d766:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d76a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d76e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d771:	83 c4 2c             	add    esp,0x2c
c000d774:	5b                   	pop    ebx
c000d775:	5e                   	pop    esi
c000d776:	5f                   	pop    edi
c000d777:	5d                   	pop    ebp
c000d778:	ff e0                	jmp    eax

c000d77a <Video::putrect(int, int, int, int, unsigned int)>:
c000d77a:	55                   	push   ebp
c000d77b:	57                   	push   edi
c000d77c:	56                   	push   esi
c000d77d:	53                   	push   ebx
c000d77e:	83 ec 1c             	sub    esp,0x1c
c000d781:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d785:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d789:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d78d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d791:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d799:	01 df                	add    edi,ebx
c000d79b:	39 fb                	cmp    ebx,edi
c000d79d:	7d 1f                	jge    c000d7be <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d79f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7a3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d7a7:	7d 12                	jge    c000d7bb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d7a9:	8b 16                	mov    edx,DWORD PTR [esi]
c000d7ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d7af:	53                   	push   ebx
c000d7b0:	55                   	push   ebp
c000d7b1:	45                   	inc    ebp
c000d7b2:	56                   	push   esi
c000d7b3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d7b6:	83 c4 10             	add    esp,0x10
c000d7b9:	eb e8                	jmp    c000d7a3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d7bb:	43                   	inc    ebx
c000d7bc:	eb dd                	jmp    c000d79b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d7be:	83 c4 1c             	add    esp,0x1c
c000d7c1:	5b                   	pop    ebx
c000d7c2:	5e                   	pop    esi
c000d7c3:	5f                   	pop    edi
c000d7c4:	5d                   	pop    ebp
c000d7c5:	c3                   	ret    

c000d7c6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d7c6:	55                   	push   ebp
c000d7c7:	57                   	push   edi
c000d7c8:	31 ff                	xor    edi,edi
c000d7ca:	56                   	push   esi
c000d7cb:	53                   	push   ebx
c000d7cc:	83 ec 1c             	sub    esp,0x1c
c000d7cf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d7d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7d7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d7de:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d7e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7e7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d7eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d7ef:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d7f2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7f6:	01 f9                	add    ecx,edi
c000d7f8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7fc:	7d 2f                	jge    c000d82d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7fe:	31 f6                	xor    esi,esi
c000d800:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d804:	01 f2                	add    edx,esi
c000d806:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d80a:	7d 1a                	jge    c000d826 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d80c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d80f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d812:	46                   	inc    esi
c000d813:	51                   	push   ecx
c000d814:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d818:	52                   	push   edx
c000d819:	55                   	push   ebp
c000d81a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d81d:	83 c4 10             	add    esp,0x10
c000d820:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d824:	eb da                	jmp    c000d800 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d826:	47                   	inc    edi
c000d827:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d82b:	eb c5                	jmp    c000d7f2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d82d:	83 c4 1c             	add    esp,0x1c
c000d830:	5b                   	pop    ebx
c000d831:	5e                   	pop    esi
c000d832:	5f                   	pop    edi
c000d833:	5d                   	pop    ebp
c000d834:	c3                   	ret    
c000d835:	90                   	nop

c000d836 <Video::blit(unsigned int*, int, int, int, int)>:
c000d836:	55                   	push   ebp
c000d837:	57                   	push   edi
c000d838:	56                   	push   esi
c000d839:	53                   	push   ebx
c000d83a:	83 ec 1c             	sub    esp,0x1c
c000d83d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d841:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d845:	85 c0                	test   eax,eax
c000d847:	79 02                	jns    c000d84b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d849:	31 c0                	xor    eax,eax
c000d84b:	c1 e0 02             	shl    eax,0x2
c000d84e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d852:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d856:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d85a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d85e:	39 d8                	cmp    eax,ebx
c000d860:	7e 49                	jle    c000d8ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d862:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d868:	7c 41                	jl     c000d8ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d86a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d86e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d872:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d876:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d87a:	39 f9                	cmp    ecx,edi
c000d87c:	7e 22                	jle    c000d8a0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d87e:	83 c5 04             	add    ebp,0x4
c000d881:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d887:	7c 14                	jl     c000d89d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d889:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d88b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d88e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d892:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d896:	56                   	push   esi
c000d897:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d89a:	83 c4 10             	add    esp,0x10
c000d89d:	47                   	inc    edi
c000d89e:	eb d2                	jmp    c000d872 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d8a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8a4:	43                   	inc    ebx
c000d8a5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d8a9:	eb ab                	jmp    c000d856 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d8ab:	83 c4 1c             	add    esp,0x1c
c000d8ae:	5b                   	pop    ebx
c000d8af:	5e                   	pop    esi
c000d8b0:	5f                   	pop    edi
c000d8b1:	5d                   	pop    ebp
c000d8b2:	c3                   	ret    
c000d8b3:	90                   	nop

c000d8b4 <Video::clearScreen(unsigned int)>:
c000d8b4:	57                   	push   edi
c000d8b5:	56                   	push   esi
c000d8b6:	53                   	push   ebx
c000d8b7:	31 db                	xor    ebx,ebx
c000d8b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8bd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d8c3:	7e 1f                	jle    c000d8e4 <Video::clearScreen(unsigned int)+0x30>
c000d8c5:	31 ff                	xor    edi,edi
c000d8c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8cd:	7e 12                	jle    c000d8e1 <Video::clearScreen(unsigned int)+0x2d>
c000d8cf:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8d5:	53                   	push   ebx
c000d8d6:	57                   	push   edi
c000d8d7:	47                   	inc    edi
c000d8d8:	56                   	push   esi
c000d8d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8dc:	83 c4 10             	add    esp,0x10
c000d8df:	eb e6                	jmp    c000d8c7 <Video::clearScreen(unsigned int)+0x13>
c000d8e1:	43                   	inc    ebx
c000d8e2:	eb d9                	jmp    c000d8bd <Video::clearScreen(unsigned int)+0x9>
c000d8e4:	5b                   	pop    ebx
c000d8e5:	5e                   	pop    esi
c000d8e6:	5f                   	pop    edi
c000d8e7:	c3                   	ret    

c000d8e8 <Video::putpixel(int, int, unsigned int)>:
c000d8e8:	c7 44 24 04 44 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e244
c000d8f0:	e9 be 28 00 00       	jmp    c00101b3 <KePanic(char const*)>
c000d8f5:	90                   	nop

c000d8f6 <Video::Video(char const*)>:
c000d8f6:	83 ec 0c             	sub    esp,0xc
c000d8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8fd:	83 ec 08             	sub    esp,0x8
c000d900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d904:	50                   	push   eax
c000d905:	e8 fe e1 ff ff       	call   c000bb08 <Device::Device(char const*)>
c000d90a:	83 c4 10             	add    esp,0x10
c000d90d:	ba b4 e2 01 c0       	mov    edx,0xc001e2b4
c000d912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d916:	89 10                	mov    DWORD PTR [eax],edx
c000d918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d926:	90                   	nop
c000d927:	83 c4 0c             	add    esp,0xc
c000d92a:	c3                   	ret    
c000d92b:	90                   	nop

c000d92c <Video::~Video()>:
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	ba b4 e2 01 c0       	mov    edx,0xc001e2b4
c000d934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d938:	89 10                	mov    DWORD PTR [eax],edx
c000d93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93e:	83 ec 0c             	sub    esp,0xc
c000d941:	50                   	push   eax
c000d942:	e8 2b df ff ff       	call   c000b872 <Device::~Device()>
c000d947:	83 c4 10             	add    esp,0x10
c000d94a:	90                   	nop
c000d94b:	83 c4 0c             	add    esp,0xc
c000d94e:	c3                   	ret    
c000d94f:	90                   	nop

c000d950 <Video::~Video()>:
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	83 ec 0c             	sub    esp,0xc
c000d956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d95a:	e8 cd ff ff ff       	call   c000d92c <Video::~Video()>
c000d95f:	83 c4 10             	add    esp,0x10
c000d962:	83 ec 08             	sub    esp,0x8
c000d965:	68 64 01 00 00       	push   0x164
c000d96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96e:	e8 c7 ca ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c000d973:	83 c4 10             	add    esp,0x10
c000d976:	83 c4 0c             	add    esp,0xc
c000d979:	c3                   	ret    

c000d97a <Video::isMonochrome()>:
c000d97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d97e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d984:	c3                   	ret    
c000d985:	90                   	nop

c000d986 <Video::getWidth()>:
c000d986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d98a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d990:	c3                   	ret    
c000d991:	90                   	nop

c000d992 <Video::getHeight()>:
c000d992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d996:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d99c:	c3                   	ret    
c000d99d:	90                   	nop

c000d99e <Video::drawCursor(int, int, unsigned char*, int)>:
c000d99e:	55                   	push   ebp
c000d99f:	57                   	push   edi
c000d9a0:	56                   	push   esi
c000d9a1:	53                   	push   ebx
c000d9a2:	83 ec 2c             	sub    esp,0x2c
c000d9a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9ad:	83 f8 01             	cmp    eax,0x1
c000d9b0:	19 c9                	sbb    ecx,ecx
c000d9b2:	31 db                	xor    ebx,ebx
c000d9b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d9b8:	89 cd                	mov    ebp,ecx
c000d9ba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d9c2:	f7 d5                	not    ebp
c000d9c4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d9ca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d9ce:	01 d8                	add    eax,ebx
c000d9d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9d4:	56                   	push   esi
c000d9d5:	e8 b8 ff ff ff       	call   c000d992 <Video::getHeight()>
c000d9da:	59                   	pop    ecx
c000d9db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d9df:	7e 70                	jle    c000da51 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d9e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9e5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d9e9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d9ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9f4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9ff:	89 f8                	mov    eax,edi
c000da01:	83 c0 20             	add    eax,0x20
c000da04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da08:	56                   	push   esi
c000da09:	e8 78 ff ff ff       	call   c000d986 <Video::getWidth()>
c000da0e:	5a                   	pop    edx
c000da0f:	39 c7                	cmp    edi,eax
c000da11:	7d 34                	jge    c000da47 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000da13:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000da18:	74 05                	je     c000da1f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000da1a:	8b 06                	mov    eax,DWORD PTR [esi]
c000da1c:	55                   	push   ebp
c000da1d:	eb 0d                	jmp    c000da2c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000da1f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da24:	74 12                	je     c000da38 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da26:	8b 06                	mov    eax,DWORD PTR [esi]
c000da28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da30:	57                   	push   edi
c000da31:	56                   	push   esi
c000da32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da3c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da40:	47                   	inc    edi
c000da41:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da45:	75 c1                	jne    c000da08 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da47:	43                   	inc    ebx
c000da48:	83 fb 20             	cmp    ebx,0x20
c000da4b:	0f 85 79 ff ff ff    	jne    c000d9ca <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da51:	83 c4 2c             	add    esp,0x2c
c000da54:	5b                   	pop    ebx
c000da55:	5e                   	pop    esi
c000da56:	5f                   	pop    edi
c000da57:	5d                   	pop    ebp
c000da58:	c3                   	ret    
c000da59:	90                   	nop

c000da5a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da5a:	55                   	push   ebp
c000da5b:	57                   	push   edi
c000da5c:	56                   	push   esi
c000da5d:	53                   	push   ebx
c000da5e:	83 ec 28             	sub    esp,0x28
c000da61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da65:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da69:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da6d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da71:	c1 e6 08             	shl    esi,0x8
c000da74:	01 c6                	add    esi,eax
c000da76:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da7a:	c1 e0 08             	shl    eax,0x8
c000da7d:	01 d0                	add    eax,edx
c000da7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da87:	0f af c6             	imul   eax,esi
c000da8a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da91:	50                   	push   eax
c000da92:	e8 22 9d ff ff       	call   c00077b9 <malloc>
c000da97:	83 c4 10             	add    esp,0x10
c000da9a:	89 c7                	mov    edi,eax
c000da9c:	85 c0                	test   eax,eax
c000da9e:	75 10                	jne    c000dab0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	68 65 e2 01 c0       	push   0xc001e265
c000daa8:	e8 06 27 00 00       	call   c00101b3 <KePanic(char const*)>
c000daad:	83 c4 10             	add    esp,0x10
c000dab0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dab3:	ba 12 00 00 00       	mov    edx,0x12
c000dab8:	84 c0                	test   al,al
c000daba:	74 11                	je     c000dacd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dabc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dac0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dac4:	c1 fa 03             	sar    edx,0x3
c000dac7:	0f af d1             	imul   edx,ecx
c000daca:	83 c2 12             	add    edx,0x12
c000dacd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dad1:	74 04                	je     c000dad7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dad3:	85 f6                	test   esi,esi
c000dad5:	75 12                	jne    c000dae9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dad7:	83 ec 0c             	sub    esp,0xc
c000dada:	68 75 e2 01 c0       	push   0xc001e275
c000dadf:	e8 4c ca ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000dae4:	e9 b8 00 00 00       	jmp    c000dba1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dae9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000daed:	80 f9 02             	cmp    cl,0x2
c000daf0:	0f 85 96 00 00 00    	jne    c000db8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000daf6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dafb:	75 0e                	jne    c000db0b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dafd:	84 c0                	test   al,al
c000daff:	75 0a                	jne    c000db0b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db01:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000db04:	83 e8 18             	sub    eax,0x18
c000db07:	a8 f7                	test   al,0xf7
c000db09:	74 0a                	je     c000db15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000db0b:	83 ec 0c             	sub    esp,0xc
c000db0e:	68 8a e2 01 c0       	push   0xc001e28a
c000db13:	eb 7f                	jmp    c000db94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000db15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db25:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db29:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db31:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db35:	75 0c                	jne    c000db43 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db37:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db3c:	c1 e0 18             	shl    eax,0x18
c000db3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db43:	45                   	inc    ebp
c000db44:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db49:	c1 e1 10             	shl    ecx,0x10
c000db4c:	89 c8                	mov    eax,ecx
c000db4e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db53:	c1 e1 08             	shl    ecx,0x8
c000db56:	09 c1                	or     ecx,eax
c000db58:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db5c:	09 c1                	or     ecx,eax
c000db5e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db62:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db66:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db6a:	c1 f8 03             	sar    eax,0x3
c000db6d:	01 c2                	add    edx,eax
c000db6f:	89 e8                	mov    eax,ebp
c000db71:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db75:	39 c6                	cmp    esi,eax
c000db77:	7f b0                	jg     c000db29 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db79:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db81:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db84:	7e 22                	jle    c000dba8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db86:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db8a:	eb 99                	jmp    c000db25 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db8c:	50                   	push   eax
c000db8d:	50                   	push   eax
c000db8e:	51                   	push   ecx
c000db8f:	68 98 e2 01 c0       	push   0xc001e298
c000db94:	e8 97 c9 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000db99:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db9c:	e8 28 9c ff ff       	call   c00077c9 <free>
c000dba1:	83 c4 10             	add    esp,0x10
c000dba4:	31 ff                	xor    edi,edi
c000dba6:	eb 0f                	jmp    c000dbb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dba8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbac:	89 30                	mov    DWORD PTR [eax],esi
c000dbae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbb2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dbb5:	89 30                	mov    DWORD PTR [eax],esi
c000dbb7:	83 c4 1c             	add    esp,0x1c
c000dbba:	89 f8                	mov    eax,edi
c000dbbc:	5b                   	pop    ebx
c000dbbd:	5e                   	pop    esi
c000dbbe:	5f                   	pop    edi
c000dbbf:	5d                   	pop    ebp
c000dbc0:	c3                   	ret    
c000dbc1:	90                   	nop

c000dbc2 <Video::putTGA(int, int, unsigned char*, int)>:
c000dbc2:	55                   	push   ebp
c000dbc3:	57                   	push   edi
c000dbc4:	56                   	push   esi
c000dbc5:	53                   	push   ebx
c000dbc6:	83 ec 28             	sub    esp,0x28
c000dbc9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dbcd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbd1:	50                   	push   eax
c000dbd2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbd6:	50                   	push   eax
c000dbd7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbdb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbdf:	56                   	push   esi
c000dbe0:	e8 75 fe ff ff       	call   c000da5a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dbe5:	83 c4 20             	add    esp,0x20
c000dbe8:	85 c0                	test   eax,eax
c000dbea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dbee:	74 35                	je     c000dc25 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbf0:	89 c7                	mov    edi,eax
c000dbf2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbf6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dbfa:	39 d8                	cmp    eax,ebx
c000dbfc:	7e 27                	jle    c000dc25 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbfe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dc02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc06:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc0a:	39 e8                	cmp    eax,ebp
c000dc0c:	7e 14                	jle    c000dc22 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dc0e:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc10:	83 c7 04             	add    edi,0x4
c000dc13:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dc16:	53                   	push   ebx
c000dc17:	55                   	push   ebp
c000dc18:	45                   	inc    ebp
c000dc19:	56                   	push   esi
c000dc1a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	eb e0                	jmp    c000dc02 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dc22:	43                   	inc    ebx
c000dc23:	eb cd                	jmp    c000dbf2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc25:	83 c4 1c             	add    esp,0x1c
c000dc28:	5b                   	pop    ebx
c000dc29:	5e                   	pop    esi
c000dc2a:	5f                   	pop    edi
c000dc2b:	5d                   	pop    ebp
c000dc2c:	c3                   	ret    
c000dc2d:	66 90                	xchg   ax,ax
c000dc2f:	90                   	nop

c000dc30 <ACPI::close(int, int, void*)>:
c000dc30:	83 ec 1c             	sub    esp,0x1c
c000dc33:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc3b:	74 0b                	je     c000dc48 <ACPI::close(int, int, void*)+0x18>
c000dc3d:	b8 00 00 00 00       	mov    eax,0x0
c000dc42:	e9 9d 00 00 00       	jmp    c000dce4 <ACPI::close(int, int, void*)+0xb4>
c000dc47:	90                   	nop
c000dc48:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc4d:	75 29                	jne    c000dc78 <ACPI::close(int, int, void*)+0x48>
c000dc4f:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc54:	85 c0                	test   eax,eax
c000dc56:	74 08                	je     c000dc60 <ACPI::close(int, int, void*)+0x30>
c000dc58:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc5d:	ff d0                	call   eax
c000dc5f:	90                   	nop
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	68 f4 e2 01 c0       	push   0xc001e2f4
c000dc68:	e8 46 25 00 00       	call   c00101b3 <KePanic(char const*)>
c000dc6d:	83 c4 10             	add    esp,0x10
c000dc70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc75:	eb 6d                	jmp    c000dce4 <ACPI::close(int, int, void*)+0xb4>
c000dc77:	90                   	nop
c000dc78:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc7d:	75 5d                	jne    c000dcdc <ACPI::close(int, int, void*)+0xac>
c000dc7f:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc84:	85 c0                	test   eax,eax
c000dc86:	74 08                	je     c000dc90 <ACPI::close(int, int, void*)+0x60>
c000dc88:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc8d:	ff d0                	call   eax
c000dc8f:	90                   	nop
c000dc90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc95:	8d 76 00             	lea    esi,[esi+0x0]
c000dc98:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc9c:	25 ff 00 00 00       	and    eax,0xff
c000dca1:	83 e0 02             	and    eax,0x2
c000dca4:	74 1e                	je     c000dcc4 <ACPI::close(int, int, void*)+0x94>
c000dca6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dcad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcb1:	89 c2                	mov    edx,eax
c000dcb3:	ec                   	in     al,dx
c000dcb4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dcb8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dcbc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dcc0:	eb d6                	jmp    c000dc98 <ACPI::close(int, int, void*)+0x68>
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dccb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dcd0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dcd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcd8:	ee                   	out    dx,al
c000dcd9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dce1:	8d 76 00             	lea    esi,[esi+0x0]
c000dce4:	83 c4 1c             	add    esp,0x1c
c000dce7:	c3                   	ret    

c000dce8 <findRSDP()>:
c000dce8:	83 ec 1c             	sub    esp,0x1c
c000dceb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dcf0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcf6:	83 e0 04             	and    eax,0x4
c000dcf9:	84 c0                	test   al,al
c000dcfb:	75 07                	jne    c000dd04 <findRSDP()+0x1c>
c000dcfd:	b8 00 00 00 00       	mov    eax,0x0
c000dd02:	eb 70                	jmp    c000dd74 <findRSDP()+0x8c>
c000dd04:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dd09:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dd0e:	7f 1c                	jg     c000dd2c <findRSDP()+0x44>
c000dd10:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd15:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dd1b:	83 e2 fb             	and    edx,0xfffffffb
c000dd1e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd24:	b8 00 00 00 00       	mov    eax,0x0
c000dd29:	eb 49                	jmp    c000dd74 <findRSDP()+0x8c>
c000dd2b:	90                   	nop
c000dd2c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd34:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd3c:	77 2e                	ja     c000dd6c <findRSDP()+0x84>
c000dd3e:	83 ec 04             	sub    esp,0x4
c000dd41:	6a 08                	push   0x8
c000dd43:	68 8f e3 01 c0       	push   0xc001e38f
c000dd48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd4c:	e8 3f 26 ff ff       	call   c0000390 <memcmp>
c000dd51:	83 c4 10             	add    esp,0x10
c000dd54:	85 c0                	test   eax,eax
c000dd56:	0f 94 c0             	sete   al
c000dd59:	84 c0                	test   al,al
c000dd5b:	74 07                	je     c000dd64 <findRSDP()+0x7c>
c000dd5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd61:	eb 11                	jmp    c000dd74 <findRSDP()+0x8c>
c000dd63:	90                   	nop
c000dd64:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd69:	eb c9                	jmp    c000dd34 <findRSDP()+0x4c>
c000dd6b:	90                   	nop
c000dd6c:	b8 00 00 00 00       	mov    eax,0x0
c000dd71:	8d 76 00             	lea    esi,[esi+0x0]
c000dd74:	83 c4 1c             	add    esp,0x1c
c000dd77:	c3                   	ret    

c000dd78 <loadACPITables(unsigned char*)>:
c000dd78:	57                   	push   edi
c000dd79:	56                   	push   esi
c000dd7a:	53                   	push   ebx
c000dd7b:	83 ec 60             	sub    esp,0x60
c000dd7e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd83:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd89:	83 e0 04             	and    eax,0x4
c000dd8c:	84 c0                	test   al,al
c000dd8e:	0f 84 3c 02 00 00    	je     c000dfd0 <loadACPITables(unsigned char*)+0x258>
c000dd94:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dd99:	84 c0                	test   al,al
c000dd9b:	74 77                	je     c000de14 <loadACPITables(unsigned char*)+0x9c>
c000dd9d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dda1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dda5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dda9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddac:	83 e8 24             	sub    eax,0x24
c000ddaf:	c1 e8 03             	shr    eax,0x3
c000ddb2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ddb6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ddbe:	66 90                	xchg   ax,ax
c000ddc0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ddc4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ddc8:	0f 8d b6 00 00 00    	jge    c000de84 <loadACPITables(unsigned char*)+0x10c>
c000ddce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddd2:	83 c0 24             	add    eax,0x24
c000ddd5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ddd9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dddd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dde1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dde5:	c1 e0 03             	shl    eax,0x3
c000dde8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ddec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ddf0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ddf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddf5:	89 c1                	mov    ecx,eax
c000ddf7:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000ddfc:	8d 50 01             	lea    edx,[eax+0x1]
c000ddff:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de05:	89 ca                	mov    edx,ecx
c000de07:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de0e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000de12:	eb ac                	jmp    c000ddc0 <loadACPITables(unsigned char*)+0x48>
c000de14:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de18:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de23:	83 e8 24             	sub    eax,0x24
c000de26:	c1 e8 02             	shr    eax,0x2
c000de29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de2d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de35:	8d 76 00             	lea    esi,[esi+0x0]
c000de38:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de3c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de40:	7d 42                	jge    c000de84 <loadACPITables(unsigned char*)+0x10c>
c000de42:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de46:	83 c0 24             	add    eax,0x24
c000de49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de51:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de55:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de59:	c1 e0 02             	shl    eax,0x2
c000de5c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de64:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de66:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de6b:	8d 50 01             	lea    edx,[eax+0x1]
c000de6e:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de74:	89 ca                	mov    edx,ecx
c000de76:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de7d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de81:	eb b5                	jmp    c000de38 <loadACPITables(unsigned char*)+0xc0>
c000de83:	90                   	nop
c000de84:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de8c:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de91:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de95:	0f 8d 39 01 00 00    	jge    c000dfd4 <loadACPITables(unsigned char*)+0x25c>
c000de9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de9f:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000dea6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000deaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000deb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb6:	25 ff 0f 00 00       	and    eax,0xfff
c000debb:	89 c6                	mov    esi,eax
c000debd:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dec3:	83 ec 0c             	sub    esp,0xc
c000dec6:	6a 01                	push   0x1
c000dec8:	e8 b8 b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ded4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000deda:	83 ec 0c             	sub    esp,0xc
c000dedd:	6a 01                	push   0x1
c000dedf:	6a 01                	push   0x1
c000dee1:	50                   	push   eax
c000dee2:	52                   	push   edx
c000dee3:	53                   	push   ebx
c000dee4:	e8 45 bd ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dee9:	83 c4 20             	add    esp,0x20
c000deec:	09 f0                	or     eax,esi
c000deee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000def2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000def6:	c1 e0 03             	shl    eax,0x3
c000def9:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000defe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df0a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000df12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df26:	89 c6                	mov    esi,eax
c000df28:	89 d7                	mov    edi,edx
c000df2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df2c:	89 c8                	mov    eax,ecx
c000df2e:	89 fa                	mov    edx,edi
c000df30:	89 f3                	mov    ebx,esi
c000df32:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df36:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df4d:	05 00 10 00 00       	add    eax,0x1000
c000df52:	c1 e8 0c             	shr    eax,0xc
c000df55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df65:	25 ff 0f 00 00       	and    eax,0xfff
c000df6a:	89 c6                	mov    esi,eax
c000df6c:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df72:	83 ec 0c             	sub    esp,0xc
c000df75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df79:	e8 07 b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df7e:	83 c4 10             	add    esp,0x10
c000df81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df85:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df8b:	83 ec 0c             	sub    esp,0xc
c000df8e:	6a 01                	push   0x1
c000df90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df94:	50                   	push   eax
c000df95:	52                   	push   edx
c000df96:	53                   	push   ebx
c000df97:	e8 92 bc ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df9c:	83 c4 20             	add    esp,0x20
c000df9f:	09 f0                	or     eax,esi
c000dfa1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa9:	83 ec 0c             	sub    esp,0xc
c000dfac:	50                   	push   eax
c000dfad:	e8 03 b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000dfb2:	83 c4 10             	add    esp,0x10
c000dfb5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dfbd:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dfc4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000dfc8:	e9 bf fe ff ff       	jmp    c000de8c <loadACPITables(unsigned char*)+0x114>
c000dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd0:	90                   	nop
c000dfd1:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd4:	83 c4 60             	add    esp,0x60
c000dfd7:	5b                   	pop    ebx
c000dfd8:	5e                   	pop    esi
c000dfd9:	5f                   	pop    edi
c000dfda:	c3                   	ret    
c000dfdb:	90                   	nop

c000dfdc <findRSDT(unsigned char*)>:
c000dfdc:	57                   	push   edi
c000dfdd:	56                   	push   esi
c000dfde:	53                   	push   ebx
c000dfdf:	83 ec 50             	sub    esp,0x50
c000dfe2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dfe7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfed:	83 e0 04             	and    eax,0x4
c000dff0:	84 c0                	test   al,al
c000dff2:	75 0c                	jne    c000e000 <findRSDT(unsigned char*)+0x24>
c000dff4:	b8 00 00 00 00       	mov    eax,0x0
c000dff9:	e9 26 01 00 00       	jmp    c000e124 <findRSDT(unsigned char*)+0x148>
c000dffe:	66 90                	xchg   ax,ax
c000e000:	89 e0                	mov    eax,esp
c000e002:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e006:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e00a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e00e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e016:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e01a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e01e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e022:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e026:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e02a:	89 c6                	mov    esi,eax
c000e02c:	89 d7                	mov    edi,edx
c000e02e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e030:	89 c8                	mov    eax,ecx
c000e032:	89 fa                	mov    edx,edi
c000e034:	89 f3                	mov    ebx,esi
c000e036:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e03a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e03e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e042:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e046:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e04a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e052:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e056:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e05a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e062:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e066:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e06a:	25 ff 0f 00 00       	and    eax,0xfff
c000e06f:	89 c6                	mov    esi,eax
c000e071:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e077:	83 ec 0c             	sub    esp,0xc
c000e07a:	6a 02                	push   0x2
c000e07c:	e8 04 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e088:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e08e:	83 ec 0c             	sub    esp,0xc
c000e091:	6a 01                	push   0x1
c000e093:	6a 02                	push   0x2
c000e095:	50                   	push   eax
c000e096:	52                   	push   edx
c000e097:	53                   	push   ebx
c000e098:	e8 91 bb ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e09d:	83 c4 20             	add    esp,0x20
c000e0a0:	09 f0                	or     eax,esi
c000e0a2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0aa:	25 ff 0f 00 00       	and    eax,0xfff
c000e0af:	89 c6                	mov    esi,eax
c000e0b1:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0b7:	83 ec 0c             	sub    esp,0xc
c000e0ba:	6a 02                	push   0x2
c000e0bc:	e8 c4 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e0c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0ce:	83 ec 0c             	sub    esp,0xc
c000e0d1:	6a 01                	push   0x1
c000e0d3:	6a 02                	push   0x2
c000e0d5:	50                   	push   eax
c000e0d6:	52                   	push   edx
c000e0d7:	53                   	push   ebx
c000e0d8:	e8 51 bb ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0dd:	83 c4 20             	add    esp,0x20
c000e0e0:	09 f0                	or     eax,esi
c000e0e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0e6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e0eb:	75 13                	jne    c000e100 <findRSDT(unsigned char*)+0x124>
c000e0ed:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0fc:	eb 22                	jmp    c000e120 <findRSDT(unsigned char*)+0x144>
c000e0fe:	66 90                	xchg   ax,ax
c000e100:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e105:	75 11                	jne    c000e118 <findRSDT(unsigned char*)+0x13c>
c000e107:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e10e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e112:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e116:	eb 08                	jmp    c000e120 <findRSDT(unsigned char*)+0x144>
c000e118:	b8 00 00 00 00       	mov    eax,0x0
c000e11d:	eb 05                	jmp    c000e124 <findRSDT(unsigned char*)+0x148>
c000e11f:	90                   	nop
c000e120:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e124:	83 c4 50             	add    esp,0x50
c000e127:	5b                   	pop    ebx
c000e128:	5e                   	pop    esi
c000e129:	5f                   	pop    edi
c000e12a:	c3                   	ret    
c000e12b:	90                   	nop

c000e12c <findDataTable(unsigned char*, char*)>:
c000e12c:	83 ec 1c             	sub    esp,0x1c
c000e12f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e134:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e13a:	83 e0 04             	and    eax,0x4
c000e13d:	84 c0                	test   al,al
c000e13f:	75 07                	jne    c000e148 <findDataTable(unsigned char*, char*)+0x1c>
c000e141:	b8 00 00 00 00       	mov    eax,0x0
c000e146:	eb 58                	jmp    c000e1a0 <findDataTable(unsigned char*, char*)+0x74>
c000e148:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e150:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e155:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e159:	7d 3d                	jge    c000e198 <findDataTable(unsigned char*, char*)+0x6c>
c000e15b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e15f:	c1 e0 03             	shl    eax,0x3
c000e162:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e167:	83 ec 04             	sub    esp,0x4
c000e16a:	6a 04                	push   0x4
c000e16c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e170:	50                   	push   eax
c000e171:	e8 1a 22 ff ff       	call   c0000390 <memcmp>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	85 c0                	test   eax,eax
c000e17b:	0f 94 c0             	sete   al
c000e17e:	84 c0                	test   al,al
c000e180:	74 0e                	je     c000e190 <findDataTable(unsigned char*, char*)+0x64>
c000e182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e186:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e18d:	eb 11                	jmp    c000e1a0 <findDataTable(unsigned char*, char*)+0x74>
c000e18f:	90                   	nop
c000e190:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e194:	eb ba                	jmp    c000e150 <findDataTable(unsigned char*, char*)+0x24>
c000e196:	66 90                	xchg   ax,ax
c000e198:	b8 00 00 00 00       	mov    eax,0x0
c000e19d:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a0:	83 c4 1c             	add    esp,0x1c
c000e1a3:	c3                   	ret    

c000e1a4 <scanMADT()>:
c000e1a4:	53                   	push   ebx
c000e1a5:	83 ec 38             	sub    esp,0x38
c000e1a8:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e1ad:	25 00 04 00 00       	and    eax,0x400
c000e1b2:	74 14                	je     c000e1c8 <scanMADT()+0x24>
c000e1b4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1b9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1bf:	83 e2 fb             	and    edx,0xfffffffb
c000e1c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1c8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1d3:	83 e0 04             	and    eax,0x4
c000e1d6:	84 c0                	test   al,al
c000e1d8:	0f 84 8a 04 00 00    	je     c000e668 <scanMADT()+0x4c4>
c000e1de:	e8 05 fb ff ff       	call   c000dce8 <findRSDP()>
c000e1e3:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e1e8:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e1ed:	85 c0                	test   eax,eax
c000e1ef:	75 1b                	jne    c000e20c <scanMADT()+0x68>
c000e1f1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1f6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1fc:	83 e2 fb             	and    edx,0xfffffffb
c000e1ff:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e205:	e9 66 04 00 00       	jmp    c000e670 <scanMADT()+0x4cc>
c000e20a:	66 90                	xchg   ax,ax
c000e20c:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e211:	83 ec 0c             	sub    esp,0xc
c000e214:	50                   	push   eax
c000e215:	e8 c2 fd ff ff       	call   c000dfdc <findRSDT(unsigned char*)>
c000e21a:	83 c4 10             	add    esp,0x10
c000e21d:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e222:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e227:	85 c0                	test   eax,eax
c000e229:	75 19                	jne    c000e244 <scanMADT()+0xa0>
c000e22b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e230:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e236:	83 e2 fb             	and    edx,0xfffffffb
c000e239:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e23f:	e9 2c 04 00 00       	jmp    c000e670 <scanMADT()+0x4cc>
c000e244:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e249:	83 ec 0c             	sub    esp,0xc
c000e24c:	50                   	push   eax
c000e24d:	e8 26 fb ff ff       	call   c000dd78 <loadACPITables(unsigned char*)>
c000e252:	83 c4 10             	add    esp,0x10
c000e255:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e25a:	83 ec 08             	sub    esp,0x8
c000e25d:	68 98 e3 01 c0       	push   0xc001e398
c000e262:	50                   	push   eax
c000e263:	e8 c4 fe ff ff       	call   c000e12c <findDataTable(unsigned char*, char*)>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e26f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e274:	75 1a                	jne    c000e290 <scanMADT()+0xec>
c000e276:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e27b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e281:	83 e2 fe             	and    edx,0xfffffffe
c000e284:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e28a:	e9 e1 03 00 00       	jmp    c000e670 <scanMADT()+0x4cc>
c000e28f:	90                   	nop
c000e290:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e298:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e29c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e29f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e2a3:	0f 87 c7 03 00 00    	ja     c000e670 <scanMADT()+0x4cc>
c000e2a9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e2b1:	0f 87 b9 03 00 00    	ja     c000e670 <scanMADT()+0x4cc>
c000e2b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e2bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2d2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e2d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2da:	8d 50 01             	lea    edx,[eax+0x1]
c000e2dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2e9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e2ed:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e2f2:	0f 86 74 03 00 00    	jbe    c000e66c <scanMADT()+0x4c8>
c000e2f8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2fd:	75 5d                	jne    c000e35c <scanMADT()+0x1b8>
c000e2ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e303:	8d 50 01             	lea    edx,[eax+0x1]
c000e306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e30a:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e310:	81 e2 ff 00 00 00    	and    edx,0xff
c000e316:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e31a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e31e:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e324:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e328:	8d 42 01             	lea    eax,[edx+0x1]
c000e32b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e32f:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e334:	8d 48 01             	lea    ecx,[eax+0x1]
c000e337:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e33d:	25 ff 00 00 00       	and    eax,0xff
c000e342:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e346:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e34a:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e350:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e355:	e9 f6 02 00 00       	jmp    c000e650 <scanMADT()+0x4ac>
c000e35a:	66 90                	xchg   ax,ax
c000e35c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e361:	0f 85 29 01 00 00    	jne    c000e490 <scanMADT()+0x2ec>
c000e367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36b:	8d 50 01             	lea    edx,[eax+0x1]
c000e36e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e372:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e378:	81 e2 ff 00 00 00    	and    edx,0xff
c000e37e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e382:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e386:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e38c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e390:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e398:	01 d0                	add    eax,edx
c000e39a:	83 c0 2c             	add    eax,0x2c
c000e39d:	8a 00                	mov    al,BYTE PTR [eax]
c000e39f:	31 d2                	xor    edx,edx
c000e3a1:	88 c2                	mov    dl,al
c000e3a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3b2:	25 ff 00 00 00       	and    eax,0xff
c000e3b7:	c1 e0 08             	shl    eax,0x8
c000e3ba:	89 d1                	mov    ecx,edx
c000e3bc:	09 c1                	or     ecx,eax
c000e3be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c2:	8d 50 02             	lea    edx,[eax+0x2]
c000e3c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3c9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3cd:	25 ff 00 00 00       	and    eax,0xff
c000e3d2:	c1 e0 10             	shl    eax,0x10
c000e3d5:	09 c1                	or     ecx,eax
c000e3d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3db:	8d 50 03             	lea    edx,[eax+0x3]
c000e3de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3e6:	25 ff 00 00 00       	and    eax,0xff
c000e3eb:	c1 e0 18             	shl    eax,0x18
c000e3ee:	09 c1                	or     ecx,eax
c000e3f0:	89 ca                	mov    edx,ecx
c000e3f2:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e3f7:	25 ff 00 00 00       	and    eax,0xff
c000e3fc:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e403:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e408:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e40c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e410:	01 d0                	add    eax,edx
c000e412:	83 c0 2c             	add    eax,0x2c
c000e415:	8a 00                	mov    al,BYTE PTR [eax]
c000e417:	31 d2                	xor    edx,edx
c000e419:	88 c2                	mov    dl,al
c000e41b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e41f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e426:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e42a:	25 ff 00 00 00       	and    eax,0xff
c000e42f:	c1 e0 08             	shl    eax,0x8
c000e432:	89 d1                	mov    ecx,edx
c000e434:	09 c1                	or     ecx,eax
c000e436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43a:	8d 50 02             	lea    edx,[eax+0x2]
c000e43d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e441:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e445:	25 ff 00 00 00       	and    eax,0xff
c000e44a:	c1 e0 10             	shl    eax,0x10
c000e44d:	09 c1                	or     ecx,eax
c000e44f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e453:	8d 50 03             	lea    edx,[eax+0x3]
c000e456:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e45a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e45e:	25 ff 00 00 00       	and    eax,0xff
c000e463:	c1 e0 18             	shl    eax,0x18
c000e466:	09 c1                	or     ecx,eax
c000e468:	89 ca                	mov    edx,ecx
c000e46a:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e46f:	25 ff 00 00 00       	and    eax,0xff
c000e474:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e47b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e480:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e485:	40                   	inc    eax
c000e486:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e48b:	e9 c0 01 00 00       	jmp    c000e650 <scanMADT()+0x4ac>
c000e490:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e495:	0f 85 fd 00 00 00    	jne    c000e598 <scanMADT()+0x3f4>
c000e49b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49f:	8d 50 01             	lea    edx,[eax+0x1]
c000e4a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4ae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e4b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e4b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4c5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e4c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d1:	01 d0                	add    eax,edx
c000e4d3:	83 c0 2c             	add    eax,0x2c
c000e4d6:	8a 00                	mov    al,BYTE PTR [eax]
c000e4d8:	31 d2                	xor    edx,edx
c000e4da:	88 c2                	mov    dl,al
c000e4dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4e7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4eb:	25 ff 00 00 00       	and    eax,0xff
c000e4f0:	c1 e0 08             	shl    eax,0x8
c000e4f3:	89 d1                	mov    ecx,edx
c000e4f5:	09 c1                	or     ecx,eax
c000e4f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4fb:	8d 50 02             	lea    edx,[eax+0x2]
c000e4fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e502:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e506:	25 ff 00 00 00       	and    eax,0xff
c000e50b:	c1 e0 10             	shl    eax,0x10
c000e50e:	09 c1                	or     ecx,eax
c000e510:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e514:	8d 50 03             	lea    edx,[eax+0x3]
c000e517:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e51b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e51f:	25 ff 00 00 00       	and    eax,0xff
c000e524:	c1 e0 18             	shl    eax,0x18
c000e527:	09 c8                	or     eax,ecx
c000e529:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e52d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e532:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e53a:	01 d0                	add    eax,edx
c000e53c:	83 c0 2c             	add    eax,0x2c
c000e53f:	8a 00                	mov    al,BYTE PTR [eax]
c000e541:	25 ff 00 00 00       	and    eax,0xff
c000e546:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e54a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e551:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e555:	81 e2 ff 00 00 00    	and    edx,0xff
c000e55b:	c1 e2 08             	shl    edx,0x8
c000e55e:	09 d0                	or     eax,edx
c000e560:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e565:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e56a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e56e:	25 ff 00 00 00       	and    eax,0xff
c000e573:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e577:	88 90 20 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe07e0],dl
c000e57d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e581:	31 d2                	xor    edx,edx
c000e583:	88 c2                	mov    dl,al
c000e585:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e58a:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e592:	e9 b9 00 00 00       	jmp    c000e650 <scanMADT()+0x4ac>
c000e597:	90                   	nop
c000e598:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e59d:	0f 85 a1 00 00 00    	jne    c000e644 <scanMADT()+0x4a0>
c000e5a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e5aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5b6:	25 ff 00 00 00       	and    eax,0xff
c000e5bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e5bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c7:	01 d0                	add    eax,edx
c000e5c9:	83 c0 2c             	add    eax,0x2c
c000e5cc:	8a 00                	mov    al,BYTE PTR [eax]
c000e5ce:	31 d2                	xor    edx,edx
c000e5d0:	88 c2                	mov    dl,al
c000e5d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5e1:	25 ff 00 00 00       	and    eax,0xff
c000e5e6:	c1 e0 08             	shl    eax,0x8
c000e5e9:	09 d0                	or     eax,edx
c000e5eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5ef:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e603:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e607:	25 ff 00 00 00       	and    eax,0xff
c000e60c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e614:	c1 e0 08             	shl    eax,0x8
c000e617:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e61b:	89 c1                	mov    ecx,eax
c000e61d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e621:	c1 e0 18             	shl    eax,0x18
c000e624:	89 c3                	mov    ebx,eax
c000e626:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e62b:	8d 50 01             	lea    edx,[eax+0x1]
c000e62e:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e634:	09 d9                	or     ecx,ebx
c000e636:	89 ca                	mov    edx,ecx
c000e638:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e63f:	eb 0f                	jmp    c000e650 <scanMADT()+0x4ac>
c000e641:	8d 76 00             	lea    esi,[esi+0x0]
c000e644:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e649:	75 05                	jne    c000e650 <scanMADT()+0x4ac>
c000e64b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e650:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e654:	31 d2                	xor    edx,edx
c000e656:	88 c2                	mov    dl,al
c000e658:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e65c:	01 d0                	add    eax,edx
c000e65e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e662:	e9 31 fc ff ff       	jmp    c000e298 <scanMADT()+0xf4>
c000e667:	90                   	nop
c000e668:	90                   	nop
c000e669:	eb 05                	jmp    c000e670 <scanMADT()+0x4cc>
c000e66b:	90                   	nop
c000e66c:	90                   	nop
c000e66d:	8d 76 00             	lea    esi,[esi+0x0]
c000e670:	83 c4 38             	add    esp,0x38
c000e673:	5b                   	pop    ebx
c000e674:	c3                   	ret    
c000e675:	90                   	nop
c000e676:	66 90                	xchg   ax,ax

c000e678 <ACPI::ACPI()>:
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67f:	83 ec 08             	sub    esp,0x8
c000e682:	68 9d e3 01 c0       	push   0xc001e39d
c000e687:	50                   	push   eax
c000e688:	e8 7b d4 ff ff       	call   c000bb08 <Device::Device(char const*)>
c000e68d:	83 c4 10             	add    esp,0x10
c000e690:	ba d4 e4 01 c0       	mov    edx,0xc001e4d4
c000e695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e699:	89 10                	mov    DWORD PTR [eax],edx
c000e69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6aa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e6c2:	e8 dd fa ff ff       	call   c000e1a4 <scanMADT()>
c000e6c7:	90                   	nop
c000e6c8:	83 c4 0c             	add    esp,0xc
c000e6cb:	c3                   	ret    

c000e6cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e6cc:	83 ec 2c             	sub    esp,0x2c
c000e6cf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6d7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e6db:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e6df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e6e4:	88 d0                	mov    al,dl
c000e6e6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e6ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6f7:	90                   	nop
c000e6f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6fc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e702:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e706:	0f 8d 9c 00 00 00    	jge    c000e7a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e70c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e710:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e714:	83 c2 2a             	add    edx,0x2a
c000e717:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e71b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e720:	75 7a                	jne    c000e79c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e722:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e726:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e72a:	83 c2 2a             	add    edx,0x2a
c000e72d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e731:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e735:	75 65                	jne    c000e79c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e737:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e73c:	74 3a                	je     c000e778 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e73e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e742:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e746:	83 c2 2a             	add    edx,0x2a
c000e749:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e74d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e751:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e754:	39 c2                	cmp    edx,eax
c000e756:	74 10                	je     c000e768 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	68 18 e3 01 c0       	push   0xc001e318
c000e760:	e8 4e 1a 00 00       	call   c00101b3 <KePanic(char const*)>
c000e765:	83 c4 10             	add    esp,0x10
c000e768:	83 ec 0c             	sub    esp,0xc
c000e76b:	68 a2 e3 01 c0       	push   0xc001e3a2
c000e770:	e8 3e 1a 00 00       	call   c00101b3 <KePanic(char const*)>
c000e775:	83 c4 10             	add    esp,0x10
c000e778:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e77c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e784:	83 c2 2a             	add    edx,0x2a
c000e787:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e78b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e78d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e790:	89 01                	mov    DWORD PTR [ecx],eax
c000e792:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e795:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e79a:	66 90                	xchg   ax,ax
c000e79c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7a0:	e9 53 ff ff ff       	jmp    c000e6f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7a8:	90                   	nop
c000e7a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ad:	83 c4 2c             	add    esp,0x2c
c000e7b0:	c2 04 00             	ret    0x4
c000e7b3:	90                   	nop

c000e7b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e7b4:	83 ec 1c             	sub    esp,0x1c
c000e7b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7bb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e7bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e7c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e7c8:	88 c8                	mov    al,cl
c000e7ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e7ce:	88 d0                	mov    al,dl
c000e7d0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7e5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e7e9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7fb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e802:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e80b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e811:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e815:	8d 48 01             	lea    ecx,[eax+0x1]
c000e818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e81c:	83 c2 2a             	add    edx,0x2a
c000e81f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e827:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e831:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e834:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e838:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e83c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e840:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e846:	8d 50 01             	lea    edx,[eax+0x1]
c000e849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e84d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e857:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e85d:	3d 00 02 00 00       	cmp    eax,0x200
c000e862:	75 10                	jne    c000e874 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e864:	83 ec 0c             	sub    esp,0xc
c000e867:	68 b1 e3 01 c0       	push   0xc001e3b1
c000e86c:	e8 42 19 00 00       	call   c00101b3 <KePanic(char const*)>
c000e871:	83 c4 10             	add    esp,0x10
c000e874:	90                   	nop
c000e875:	83 c4 1c             	add    esp,0x1c
c000e878:	c3                   	ret    
c000e879:	90                   	nop
c000e87a:	66 90                	xchg   ax,ax

c000e87c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e87c:	b8 00 00 00 00       	mov    eax,0x0
c000e881:	c3                   	ret    
c000e882:	66 90                	xchg   ax,ax

c000e884 <ACPI::detectPCI()>:
c000e884:	53                   	push   ebx
c000e885:	83 ec 28             	sub    esp,0x28
c000e888:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e88d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e892:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e897:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e89d:	83 e0 04             	and    eax,0x4
c000e8a0:	84 c0                	test   al,al
c000e8a2:	74 2c                	je     c000e8d0 <ACPI::detectPCI()+0x4c>
c000e8a4:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e8a9:	83 ec 08             	sub    esp,0x8
c000e8ac:	68 ce e3 01 c0       	push   0xc001e3ce
c000e8b1:	50                   	push   eax
c000e8b2:	e8 75 f8 ff ff       	call   c000e12c <findDataTable(unsigned char*, char*)>
c000e8b7:	83 c4 10             	add    esp,0x10
c000e8ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8be:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e8c3:	74 0b                	je     c000e8d0 <ACPI::detectPCI()+0x4c>
c000e8c5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8ca:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8cf:	90                   	nop
c000e8d0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e8d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8dc:	8a 00                	mov    al,BYTE PTR [eax]
c000e8de:	3c 01                	cmp    al,0x1
c000e8e0:	75 0e                	jne    c000e8f0 <ACPI::detectPCI()+0x6c>
c000e8e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8ec:	eb 2a                	jmp    c000e918 <ACPI::detectPCI()+0x94>
c000e8ee:	66 90                	xchg   ax,ax
c000e8f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8f4:	8a 00                	mov    al,BYTE PTR [eax]
c000e8f6:	3c 02                	cmp    al,0x2
c000e8f8:	75 1e                	jne    c000e918 <ACPI::detectPCI()+0x94>
c000e8fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8ff:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e904:	74 12                	je     c000e918 <ACPI::detectPCI()+0x94>
c000e906:	83 ec 0c             	sub    esp,0xc
c000e909:	68 48 e3 01 c0       	push   0xc001e348
c000e90e:	e8 a0 18 00 00       	call   c00101b3 <KePanic(char const*)>
c000e913:	83 c4 10             	add    esp,0x10
c000e916:	66 90                	xchg   ax,ax
c000e918:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e91c:	83 f0 01             	xor    eax,0x1
c000e91f:	84 c0                	test   al,al
c000e921:	74 41                	je     c000e964 <ACPI::detectPCI()+0xe0>
c000e923:	e8 08 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e92c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e931:	75 0d                	jne    c000e940 <ACPI::detectPCI()+0xbc>
c000e933:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e938:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e93d:	eb 25                	jmp    c000e964 <ACPI::detectPCI()+0xe0>
c000e93f:	90                   	nop
c000e940:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e945:	75 1d                	jne    c000e964 <ACPI::detectPCI()+0xe0>
c000e947:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e94c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e951:	74 11                	je     c000e964 <ACPI::detectPCI()+0xe0>
c000e953:	83 ec 0c             	sub    esp,0xc
c000e956:	68 48 e3 01 c0       	push   0xc001e348
c000e95b:	e8 53 18 00 00       	call   c00101b3 <KePanic(char const*)>
c000e960:	83 c4 10             	add    esp,0x10
c000e963:	90                   	nop
c000e964:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e969:	0f 84 85 00 00 00    	je     c000e9f4 <ACPI::detectPCI()+0x170>
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	68 d3 e3 01 c0       	push   0xc001e3d3
c000e977:	e8 bf 11 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000e97c:	83 c4 10             	add    esp,0x10
c000e97f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e987:	83 ec 0c             	sub    esp,0xc
c000e98a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e98e:	e8 26 8e ff ff       	call   c00077b9 <malloc>
c000e993:	83 c4 10             	add    esp,0x10
c000e996:	89 c3                	mov    ebx,eax
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	53                   	push   ebx
c000e99c:	e8 ad 9a 00 00       	call   c001844e <PCI::PCI()>
c000e9a1:	83 c4 10             	add    esp,0x10
c000e9a4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e9a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9b3:	50                   	push   eax
c000e9b4:	e8 b7 cf ff ff       	call   c000b970 <Device::addChild(Device*)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c2:	83 c0 08             	add    eax,0x8
c000e9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9cc:	74 0a                	je     c000e9d8 <ACPI::detectPCI()+0x154>
c000e9ce:	ba 01 00 00 00       	mov    edx,0x1
c000e9d3:	eb 0b                	jmp    c000e9e0 <ACPI::detectPCI()+0x15c>
c000e9d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9d8:	ba 02 00 00 00       	mov    edx,0x2
c000e9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e9e0:	6a 00                	push   0x0
c000e9e2:	6a 00                	push   0x0
c000e9e4:	52                   	push   edx
c000e9e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9e9:	ff d0                	call   eax
c000e9eb:	83 c4 10             	add    esp,0x10
c000e9ee:	e9 91 00 00 00       	jmp    c000ea84 <ACPI::detectPCI()+0x200>
c000e9f3:	90                   	nop
c000e9f4:	83 ec 0c             	sub    esp,0xc
c000e9f7:	68 eb e3 01 c0       	push   0xc001e3eb
c000e9fc:	e8 3a 11 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000ea01:	83 c4 10             	add    esp,0x10
c000ea04:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea12:	e8 a2 8d ff ff       	call   c00077b9 <malloc>
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	89 c3                	mov    ebx,eax
c000ea1c:	83 ec 0c             	sub    esp,0xc
c000ea1f:	53                   	push   ebx
c000ea20:	e8 55 a5 00 00       	call   c0018f7a <IDE::IDE()>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea30:	83 ec 08             	sub    esp,0x8
c000ea33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea37:	50                   	push   eax
c000ea38:	e8 33 cf ff ff       	call   c000b970 <Device::addChild(Device*)>
c000ea3d:	83 c4 10             	add    esp,0x10
c000ea40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea44:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea52:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea5f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea6e:	83 c0 08             	add    eax,0x8
c000ea71:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea73:	6a 00                	push   0x0
c000ea75:	6a 00                	push   0x0
c000ea77:	6a 00                	push   0x0
c000ea79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea7d:	ff d0                	call   eax
c000ea7f:	83 c4 10             	add    esp,0x10
c000ea82:	66 90                	xchg   ax,ax
c000ea84:	90                   	nop
c000ea85:	83 c4 28             	add    esp,0x28
c000ea88:	5b                   	pop    ebx
c000ea89:	c3                   	ret    
c000ea8a:	66 90                	xchg   ax,ax

c000ea8c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea8c:	83 ec 1c             	sub    esp,0x1c
c000ea8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea93:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea96:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea9a:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eaa0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaa4:	25 ff 00 00 00       	and    eax,0xff
c000eaa9:	83 ec 08             	sub    esp,0x8
c000eaac:	50                   	push   eax
c000eaad:	52                   	push   edx
c000eaae:	e8 f3 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eab3:	83 c4 10             	add    esp,0x10
c000eab6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eaba:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eac0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eac4:	25 ff 00 00 00       	and    eax,0xff
c000eac9:	83 ec 04             	sub    esp,0x4
c000eacc:	6a 01                	push   0x1
c000eace:	50                   	push   eax
c000eacf:	52                   	push   edx
c000ead0:	e8 e7 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ead5:	83 c4 10             	add    esp,0x10
c000ead8:	90                   	nop
c000ead9:	83 c4 1c             	add    esp,0x1c
c000eadc:	c3                   	ret    
c000eadd:	90                   	nop
c000eade:	66 90                	xchg   ax,ax

c000eae0 <ACPI::sleep()>:
c000eae0:	83 ec 0c             	sub    esp,0xc
c000eae3:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eae8:	85 c0                	test   eax,eax
c000eaea:	74 08                	je     c000eaf4 <ACPI::sleep()+0x14>
c000eaec:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eaf1:	ff d0                	call   eax
c000eaf3:	90                   	nop
c000eaf4:	90                   	nop
c000eaf5:	83 c4 0c             	add    esp,0xc
c000eaf8:	c3                   	ret    
c000eaf9:	90                   	nop
c000eafa:	66 90                	xchg   ax,ax

c000eafc <ACPI::open(int, int, void*)>:
c000eafc:	57                   	push   edi
c000eafd:	56                   	push   esi
c000eafe:	53                   	push   ebx
c000eaff:	81 ec 70 01 00 00    	sub    esp,0x170
c000eb05:	83 ec 0c             	sub    esp,0xc
c000eb08:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eb0f:	e8 70 fd ff ff       	call   c000e884 <ACPI::detectPCI()>
c000eb14:	83 c4 10             	add    esp,0x10
c000eb17:	83 ec 0c             	sub    esp,0xc
c000eb1a:	68 70 e3 01 c0       	push   0xc001e370
c000eb1f:	e8 17 10 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000eb24:	83 c4 10             	add    esp,0x10
c000eb27:	83 ec 0c             	sub    esp,0xc
c000eb2a:	68 00 e4 01 c0       	push   0xc001e400
c000eb2f:	e8 d2 37 00 00       	call   c0012306 <Thr::loadKernelSymbolTable(char const*)>
c000eb34:	83 c4 10             	add    esp,0x10
c000eb37:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb3f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb4a:	83 ec 0c             	sub    esp,0xc
c000eb4d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb54:	e8 60 8c ff ff       	call   c00077b9 <malloc>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	89 c3                	mov    ebx,eax
c000eb5e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000eb63:	83 ec 04             	sub    esp,0x4
c000eb66:	50                   	push   eax
c000eb67:	68 1e e4 01 c0       	push   0xc001e41e
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 34 bf ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c000eb72:	83 c4 10             	add    esp,0x10
c000eb75:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	6a 01                	push   0x1
c000eb81:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb88:	e8 d9 bf ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c000eb8d:	83 c4 10             	add    esp,0x10
c000eb90:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb97:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb9f:	75 17                	jne    c000ebb8 <ACPI::open(int, int, void*)+0xbc>
c000eba1:	83 ec 0c             	sub    esp,0xc
c000eba4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebab:	e8 14 c0 ff ff       	call   c000abc4 <File::close()>
c000ebb0:	83 c4 10             	add    esp,0x10
c000ebb3:	eb 0b                	jmp    c000ebc0 <ACPI::open(int, int, void*)+0xc4>
c000ebb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ebc0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ebc8:	74 1e                	je     c000ebe8 <ACPI::open(int, int, void*)+0xec>
c000ebca:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ebd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd3:	83 c0 08             	add    eax,0x8
c000ebd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebe2:	ff d0                	call   eax
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	90                   	nop
c000ebe8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ebef:	83 f0 01             	xor    eax,0x1
c000ebf2:	84 c0                	test   al,al
c000ebf4:	74 42                	je     c000ec38 <ACPI::open(int, int, void*)+0x13c>
c000ebf6:	83 ec 0c             	sub    esp,0xc
c000ebf9:	68 3c e4 01 c0       	push   0xc001e43c
c000ebfe:	e8 38 0f 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	83 ec 04             	sub    esp,0x4
c000ec09:	6a 0c                	push   0xc
c000ec0b:	68 57 e4 01 c0       	push   0xc001e457
c000ec10:	68 68 e4 01 c0       	push   0xc001e468
c000ec15:	e8 dc 2c 00 00       	call   c00118f6 <Reg::readIntWithDefault(char*, char*, int)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec2e:	e8 5c a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ec33:	83 c4 10             	add    esp,0x10
c000ec36:	66 90                	xchg   ax,ax
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	68 97 d4 01 c0       	push   0xc001d497
c000ec40:	e8 f6 0e 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec4f:	83 ec 08             	sub    esp,0x8
c000ec52:	6a 12                	push   0x12
c000ec54:	50                   	push   eax
c000ec55:	e8 2e d0 ff ff       	call   c000bc88 <getDevicesOfType(DeviceType)>
c000ec5a:	83 c4 0c             	add    esp,0xc
c000ec5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec60:	83 ec 0c             	sub    esp,0xc
c000ec63:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec6a:	50                   	push   eax
c000ec6b:	e8 6c dc 00 00       	call   c001c8dc <LinkedList<Device>::isEmpty()>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	83 f0 01             	xor    eax,0x1
c000ec76:	84 c0                	test   al,al
c000ec78:	0f 84 46 01 00 00    	je     c000edc4 <ACPI::open(int, int, void*)+0x2c8>
c000ec7e:	83 ec 0c             	sub    esp,0xc
c000ec81:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec88:	50                   	push   eax
c000ec89:	e8 6a dc 00 00       	call   c001c8f8 <LinkedList<Device>::getFirstElement()>
c000ec8e:	83 c4 10             	add    esp,0x10
c000ec91:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec98:	83 ec 0c             	sub    esp,0xc
c000ec9b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eca2:	50                   	push   eax
c000eca3:	e8 58 dc 00 00       	call   c001c900 <LinkedList<Device>::removeFirst()>
c000eca8:	83 c4 10             	add    esp,0x10
c000ecab:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ecb2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ecb9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ecc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ecc4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ecca:	ba 09 00 00 00       	mov    edx,0x9
c000eccf:	fc                   	cld    
c000ecd0:	89 c7                	mov    edi,eax
c000ecd2:	89 de                	mov    esi,ebx
c000ecd4:	89 d1                	mov    ecx,edx
c000ecd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecd8:	83 ec 08             	sub    esp,0x8
c000ecdb:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ecdf:	50                   	push   eax
c000ece0:	83 ec 24             	sub    esp,0x24
c000ece3:	89 e0                	mov    eax,esp
c000ece5:	89 c3                	mov    ebx,eax
c000ece7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eceb:	ba 09 00 00 00       	mov    edx,0x9
c000ecf0:	89 df                	mov    edi,ebx
c000ecf2:	89 c6                	mov    esi,eax
c000ecf4:	89 d1                	mov    ecx,edx
c000ecf6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecf8:	e8 33 9c 00 00       	call   c0018930 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ecfd:	83 c4 30             	add    esp,0x30
c000ed00:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ed07:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ed0f:	0f 84 4b ff ff ff    	je     c000ec60 <ACPI::open(int, int, void*)+0x164>
c000ed15:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed2a:	e8 8a 8a ff ff       	call   c00077b9 <malloc>
c000ed2f:	83 c4 10             	add    esp,0x10
c000ed32:	89 c3                	mov    ebx,eax
c000ed34:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed39:	83 ec 04             	sub    esp,0x4
c000ed3c:	50                   	push   eax
c000ed3d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed44:	53                   	push   ebx
c000ed45:	e8 5c bd ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c000ed4a:	83 c4 10             	add    esp,0x10
c000ed4d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed54:	83 ec 0c             	sub    esp,0xc
c000ed57:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed5e:	e8 71 c0 ff ff       	call   c000add4 <File::exists()>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	84 c0                	test   al,al
c000ed68:	74 2a                	je     c000ed94 <ACPI::open(int, int, void*)+0x298>
c000ed6a:	83 ec 08             	sub    esp,0x8
c000ed6d:	6a 01                	push   0x1
c000ed6f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed76:	e8 02 40 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	83 ec 08             	sub    esp,0x8
c000ed81:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed88:	50                   	push   eax
c000ed89:	e8 20 42 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000ed8e:	83 c4 10             	add    esp,0x10
c000ed91:	8d 76 00             	lea    esi,[esi+0x0]
c000ed94:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed9c:	0f 84 be fe ff ff    	je     c000ec60 <ACPI::open(int, int, void*)+0x164>
c000eda2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000eda9:	8b 00                	mov    eax,DWORD PTR [eax]
c000edab:	83 c0 08             	add    eax,0x8
c000edae:	8b 00                	mov    eax,DWORD PTR [eax]
c000edb0:	83 ec 0c             	sub    esp,0xc
c000edb3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000edba:	ff d0                	call   eax
c000edbc:	83 c4 10             	add    esp,0x10
c000edbf:	e9 9c fe ff ff       	jmp    c000ec60 <ACPI::open(int, int, void*)+0x164>
c000edc4:	83 ec 0c             	sub    esp,0xc
c000edc7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edce:	50                   	push   eax
c000edcf:	e8 04 db 00 00       	call   c001c8d8 <LinkedList<Device>::~LinkedList()>
c000edd4:	83 c4 10             	add    esp,0x10
c000edd7:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000eddd:	83 ec 08             	sub    esp,0x8
c000ede0:	6a 01                	push   0x1
c000ede2:	68 6f e4 01 c0       	push   0xc001e46f
c000ede7:	e8 91 3f 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000edec:	83 c4 10             	add    esp,0x10
c000edef:	83 ec 08             	sub    esp,0x8
c000edf2:	53                   	push   ebx
c000edf3:	50                   	push   eax
c000edf4:	e8 b5 41 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000edf9:	83 c4 10             	add    esp,0x10
c000edfc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ee01:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee07:	83 e0 04             	and    eax,0x4
c000ee0a:	84 c0                	test   al,al
c000ee0c:	0f 84 16 01 00 00    	je     c000ef28 <ACPI::open(int, int, void*)+0x42c>
c000ee12:	83 ec 0c             	sub    esp,0xc
c000ee15:	68 8c e4 01 c0       	push   0xc001e48c
c000ee1a:	e8 1c 0d 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000ee1f:	83 c4 10             	add    esp,0x10
c000ee22:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee2d:	83 ec 0c             	sub    esp,0xc
c000ee30:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee37:	e8 7d 89 ff ff       	call   c00077b9 <malloc>
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	89 c3                	mov    ebx,eax
c000ee41:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee46:	83 ec 04             	sub    esp,0x4
c000ee49:	50                   	push   eax
c000ee4a:	68 a9 e4 01 c0       	push   0xc001e4a9
c000ee4f:	53                   	push   ebx
c000ee50:	e8 51 bc ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee5f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee67:	74 1b                	je     c000ee84 <ACPI::open(int, int, void*)+0x388>
c000ee69:	83 ec 0c             	sub    esp,0xc
c000ee6c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee73:	e8 5c bf ff ff       	call   c000add4 <File::exists()>
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	84 c0                	test   al,al
c000ee7d:	74 05                	je     c000ee84 <ACPI::open(int, int, void*)+0x388>
c000ee7f:	b0 01                	mov    al,0x1
c000ee81:	eb 05                	jmp    c000ee88 <ACPI::open(int, int, void*)+0x38c>
c000ee83:	90                   	nop
c000ee84:	b0 00                	mov    al,0x0
c000ee86:	66 90                	xchg   ax,ax
c000ee88:	84 c0                	test   al,al
c000ee8a:	74 28                	je     c000eeb4 <ACPI::open(int, int, void*)+0x3b8>
c000ee8c:	83 ec 08             	sub    esp,0x8
c000ee8f:	6a 01                	push   0x1
c000ee91:	68 a9 e4 01 c0       	push   0xc001e4a9
c000ee96:	e8 e2 3e 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c000ee9b:	83 c4 10             	add    esp,0x10
c000ee9e:	83 ec 08             	sub    esp,0x8
c000eea1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000eea8:	50                   	push   eax
c000eea9:	e8 00 41 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c000eeae:	83 c4 10             	add    esp,0x10
c000eeb1:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eebc:	74 2a                	je     c000eee8 <ACPI::open(int, int, void*)+0x3ec>
c000eebe:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eec6:	74 20                	je     c000eee8 <ACPI::open(int, int, void*)+0x3ec>
c000eec8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000eecf:	8b 00                	mov    eax,DWORD PTR [eax]
c000eed1:	83 c0 08             	add    eax,0x8
c000eed4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eee0:	ff d0                	call   eax
c000eee2:	83 c4 10             	add    esp,0x10
c000eee5:	8d 76 00             	lea    esi,[esi+0x0]
c000eee8:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000eeed:	83 ec 08             	sub    esp,0x8
c000eef0:	68 c6 e4 01 c0       	push   0xc001e4c6
c000eef5:	50                   	push   eax
c000eef6:	e8 31 f2 ff ff       	call   c000e12c <findDataTable(unsigned char*, char*)>
c000eefb:	83 c4 10             	add    esp,0x10
c000eefe:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ef05:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ef0d:	74 19                	je     c000ef28 <ACPI::open(int, int, void*)+0x42c>
c000ef0f:	83 ec 08             	sub    esp,0x8
c000ef12:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef19:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ef20:	e8 67 fb ff ff       	call   c000ea8c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef25:	83 c4 10             	add    esp,0x10
c000ef28:	b8 00 00 00 00       	mov    eax,0x0
c000ef2d:	81 c4 70 01 00 00    	add    esp,0x170
c000ef33:	5b                   	pop    ebx
c000ef34:	5e                   	pop    esi
c000ef35:	5f                   	pop    edi
c000ef36:	c3                   	ret    
c000ef37:	90                   	nop

c000ef38 <CPU::close(int, int, void*)>:
c000ef38:	31 c0                	xor    eax,eax
c000ef3a:	c3                   	ret    
c000ef3b:	90                   	nop

c000ef3c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef3c:	60                   	pusha  
c000ef3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef49:	9c                   	pushf  
c000ef4a:	fa                   	cli    
c000ef4b:	0f 09                	wbinvd 
c000ef4d:	0f 30                	wrmsr  
c000ef4f:	9d                   	popf   
c000ef50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef54:	89 02                	mov    DWORD PTR [edx],eax
c000ef56:	61                   	popa   
c000ef57:	c3                   	ret    

c000ef58 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef58:	60                   	pusha  
c000ef59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef5d:	9c                   	pushf  
c000ef5e:	fa                   	cli    
c000ef5f:	0f 09                	wbinvd 
c000ef61:	31 c0                	xor    eax,eax
c000ef63:	31 d2                	xor    edx,edx
c000ef65:	0f 32                	rdmsr  
c000ef67:	9d                   	popf   
c000ef68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef6c:	89 02                	mov    DWORD PTR [edx],eax
c000ef6e:	61                   	popa   
c000ef6f:	c3                   	ret    

c000ef70 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef70:	56                   	push   esi
c000ef71:	53                   	push   ebx
c000ef72:	83 ec 10             	sub    esp,0x10
c000ef75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef79:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef7e:	75 5d                	jne    c000efdd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef80:	83 f8 08             	cmp    eax,0x8
c000ef83:	75 09                	jne    c000ef8e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef85:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef8a:	7e 13                	jle    c000ef9f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef8c:	eb 30                	jmp    c000efbe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef8e:	83 f8 06             	cmp    eax,0x6
c000ef91:	7c 4a                	jl     c000efdd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef93:	83 f8 07             	cmp    eax,0x7
c000ef96:	7e 07                	jle    c000ef9f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef98:	83 f8 09             	cmp    eax,0x9
c000ef9b:	74 21                	je     c000efbe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef9d:	eb 3e                	jmp    c000efdd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef9f:	89 e6                	mov    esi,esp
c000efa1:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000efa7:	56                   	push   esi
c000efa8:	c1 eb 15             	shr    ebx,0x15
c000efab:	68 82 00 00 c0       	push   0xc0000082
c000efb0:	83 e3 7e             	and    ebx,0x7e
c000efb3:	e8 a0 ff ff ff       	call   c000ef58 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efb8:	56                   	push   esi
c000efb9:	6a 00                	push   0x0
c000efbb:	53                   	push   ebx
c000efbc:	eb 12                	jmp    c000efd0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000efbe:	89 e3                	mov    ebx,esp
c000efc0:	53                   	push   ebx
c000efc1:	68 82 00 00 c0       	push   0xc0000082
c000efc6:	e8 8d ff ff ff       	call   c000ef58 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efcb:	53                   	push   ebx
c000efcc:	6a 00                	push   0x0
c000efce:	6a 00                	push   0x0
c000efd0:	68 82 00 00 c0       	push   0xc0000082
c000efd5:	e8 62 ff ff ff       	call   c000ef3c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000efda:	83 c4 18             	add    esp,0x18
c000efdd:	83 c4 10             	add    esp,0x10
c000efe0:	5b                   	pop    ebx
c000efe1:	5e                   	pop    esi
c000efe2:	c3                   	ret    
c000efe3:	90                   	nop

c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000efe4:	55                   	push   ebp
c000efe5:	57                   	push   edi
c000efe6:	56                   	push   esi
c000efe7:	53                   	push   ebx
c000efe8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eff0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eff4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000eff8:	39 05 30 f8 01 c0    	cmp    DWORD PTR ds:0xc001f830,eax
c000effe:	75 23                	jne    c000f023 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f000:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f005:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f009:	89 06                	mov    DWORD PTR [esi],eax
c000f00b:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f010:	89 07                	mov    DWORD PTR [edi],eax
c000f012:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f017:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f01a:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f01f:	89 02                	mov    DWORD PTR [edx],eax
c000f021:	eb 3f                	jmp    c000f062 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f023:	31 c9                	xor    ecx,ecx
c000f025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f029:	0f a2                	cpuid  
c000f02b:	89 06                	mov    DWORD PTR [esi],eax
c000f02d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f02f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f033:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f036:	89 10                	mov    DWORD PTR [eax],edx
c000f038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f03c:	a3 30 f8 01 c0       	mov    ds:0xc001f830,eax
c000f041:	8b 06                	mov    eax,DWORD PTR [esi]
c000f043:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f048:	8b 07                	mov    eax,DWORD PTR [edi]
c000f04a:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f04f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f052:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f057:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f05b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f05d:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f062:	5b                   	pop    ebx
c000f063:	5e                   	pop    esi
c000f064:	5f                   	pop    edi
c000f065:	5d                   	pop    ebp
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <CPU::cpuidCheckEDX(unsigned int)>:
c000f068:	83 ec 10             	sub    esp,0x10
c000f06b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f06f:	50                   	push   eax
c000f070:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f074:	50                   	push   eax
c000f075:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f079:	50                   	push   eax
c000f07a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07e:	50                   	push   eax
c000f07f:	6a 01                	push   0x1
c000f081:	e8 5e ff ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f086:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f08a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f08e:	0f 95 c0             	setne  al
c000f091:	83 c4 24             	add    esp,0x24
c000f094:	c3                   	ret    
c000f095:	90                   	nop

c000f096 <CPU::cpuidCheckECX(unsigned int)>:
c000f096:	83 ec 10             	sub    esp,0x10
c000f099:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f09d:	50                   	push   eax
c000f09e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a2:	50                   	push   eax
c000f0a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a7:	50                   	push   eax
c000f0a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ac:	50                   	push   eax
c000f0ad:	6a 01                	push   0x1
c000f0af:	e8 30 ff ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0b8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0bc:	0f 95 c0             	setne  al
c000f0bf:	83 c4 24             	add    esp,0x24
c000f0c2:	c3                   	ret    
c000f0c3:	90                   	nop

c000f0c4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f0c4:	83 ec 10             	sub    esp,0x10
c000f0c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0cb:	50                   	push   eax
c000f0cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d0:	50                   	push   eax
c000f0d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d5:	50                   	push   eax
c000f0d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0da:	50                   	push   eax
c000f0db:	6a 07                	push   0x7
c000f0dd:	e8 02 ff ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0e6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f0ea:	0f 95 c0             	setne  al
c000f0ed:	83 c4 24             	add    esp,0x24
c000f0f0:	c3                   	ret    
c000f0f1:	90                   	nop

c000f0f2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f0f2:	83 ec 10             	sub    esp,0x10
c000f0f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f9:	50                   	push   eax
c000f0fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0fe:	50                   	push   eax
c000f0ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f103:	50                   	push   eax
c000f104:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f108:	50                   	push   eax
c000f109:	6a 07                	push   0x7
c000f10b:	e8 d4 fe ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f110:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f114:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f118:	0f 95 c0             	setne  al
c000f11b:	83 c4 24             	add    esp,0x24
c000f11e:	c3                   	ret    
c000f11f:	90                   	nop

c000f120 <CPU::CPU()>:
c000f120:	83 ec 0c             	sub    esp,0xc
c000f123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f127:	83 ec 08             	sub    esp,0x8
c000f12a:	68 e9 e5 01 c0       	push   0xc001e5e9
c000f12f:	50                   	push   eax
c000f130:	e8 d3 c9 ff ff       	call   c000bb08 <Device::Device(char const*)>
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	ba 70 e6 01 c0       	mov    edx,0xc001e670
c000f13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f141:	89 10                	mov    DWORD PTR [eax],edx
c000f143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f147:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f155:	05 78 01 00 00       	add    eax,0x178
c000f15a:	83 ec 0c             	sub    esp,0xc
c000f15d:	50                   	push   eax
c000f15e:	e8 17 7f ff ff       	call   c000707a <GDT::GDT()>
c000f163:	83 c4 10             	add    esp,0x10
c000f166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f16a:	05 7c 09 00 00       	add    eax,0x97c
c000f16f:	83 ec 0c             	sub    esp,0xc
c000f172:	50                   	push   eax
c000f173:	e8 3c 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f178:	83 c4 10             	add    esp,0x10
c000f17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f17f:	05 7c 11 00 00       	add    eax,0x117c
c000f184:	83 ec 0c             	sub    esp,0xc
c000f187:	50                   	push   eax
c000f188:	e8 3b 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f18d:	83 c4 10             	add    esp,0x10
c000f190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f194:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f19f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f1a9:	90                   	nop
c000f1aa:	83 c4 0c             	add    esp,0xc
c000f1ad:	c3                   	ret    

c000f1ae <CPU::displayFeatures()>:
c000f1ae:	c3                   	ret    
c000f1af:	90                   	nop

c000f1b0 <CPU::detectFeatures()>:
c000f1b0:	55                   	push   ebp
c000f1b1:	57                   	push   edi
c000f1b2:	56                   	push   esi
c000f1b3:	53                   	push   ebx
c000f1b4:	83 ec 30             	sub    esp,0x30
c000f1b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f1bb:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f1c5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f1cc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f1d2:	6a 0d                	push   0xd
c000f1d4:	6a 00                	push   0x0
c000f1d6:	55                   	push   ebp
c000f1d7:	e8 f4 12 ff ff       	call   c00004d0 <memset>
c000f1dc:	83 c4 10             	add    esp,0x10
c000f1df:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f1e4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f1eb:	0f 84 d5 05 00 00    	je     c000f7c6 <CPU::detectFeatures()+0x616>
c000f1f1:	83 ec 0c             	sub    esp,0xc
c000f1f4:	89 ef                	mov    edi,ebp
c000f1f6:	6a 10                	push   0x10
c000f1f8:	e8 6b fe ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f1fd:	83 e0 01             	and    eax,0x1
c000f200:	8d 14 00             	lea    edx,[eax+eax*1]
c000f203:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f209:	83 e0 fd             	and    eax,0xfffffffd
c000f20c:	09 d0                	or     eax,edx
c000f20e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f214:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f21b:	e8 48 fe ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f220:	83 e0 01             	and    eax,0x1
c000f223:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f22a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f230:	83 e0 fb             	and    eax,0xfffffffb
c000f233:	09 d0                	or     eax,edx
c000f235:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f23b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f242:	e8 21 fe ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f247:	83 e0 01             	and    eax,0x1
c000f24a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f251:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f257:	83 e0 f7             	and    eax,0xfffffff7
c000f25a:	09 d0                	or     eax,edx
c000f25c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f262:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f269:	e8 fa fd ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f26e:	83 e0 01             	and    eax,0x1
c000f271:	c1 e0 04             	shl    eax,0x4
c000f274:	88 c2                	mov    dl,al
c000f276:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f27c:	83 e0 ef             	and    eax,0xffffffef
c000f27f:	09 d0                	or     eax,edx
c000f281:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f287:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f28e:	e8 d5 fd ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f293:	83 e0 01             	and    eax,0x1
c000f296:	c1 e0 05             	shl    eax,0x5
c000f299:	88 c2                	mov    dl,al
c000f29b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2a1:	83 e0 df             	and    eax,0xffffffdf
c000f2a4:	09 d0                	or     eax,edx
c000f2a6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f2b3:	e8 b0 fd ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f2b8:	83 e0 01             	and    eax,0x1
c000f2bb:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2be:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f2c4:	83 e0 fd             	and    eax,0xfffffffd
c000f2c7:	09 d0                	or     eax,edx
c000f2c9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f2cf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f2d6:	e8 8d fd ff ff       	call   c000f068 <CPU::cpuidCheckEDX(unsigned int)>
c000f2db:	83 e0 01             	and    eax,0x1
c000f2de:	c1 e0 06             	shl    eax,0x6
c000f2e1:	88 c2                	mov    dl,al
c000f2e3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f2e9:	83 e0 bf             	and    eax,0xffffffbf
c000f2ec:	09 d0                	or     eax,edx
c000f2ee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2f4:	58                   	pop    eax
c000f2f5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2f9:	50                   	push   eax
c000f2fa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2fe:	50                   	push   eax
c000f2ff:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f303:	56                   	push   esi
c000f304:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f308:	50                   	push   eax
c000f309:	6a 00                	push   0x0
c000f30b:	e8 d4 fc ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f310:	b8 04 00 00 00       	mov    eax,0x4
c000f315:	89 c1                	mov    ecx,eax
c000f317:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f319:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f31f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f323:	89 c1                	mov    ecx,eax
c000f325:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f327:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f32d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f331:	89 c1                	mov    ecx,eax
c000f333:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f335:	83 c4 18             	add    esp,0x18
c000f338:	68 f8 e4 01 c0       	push   0xc001e4f8
c000f33d:	55                   	push   ebp
c000f33e:	e8 9d 13 ff ff       	call   c00006e0 <strcmp>
c000f343:	83 c4 10             	add    esp,0x10
c000f346:	85 c0                	test   eax,eax
c000f348:	75 0f                	jne    c000f359 <CPU::detectFeatures()+0x1a9>
c000f34a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f354:	e9 22 02 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f359:	50                   	push   eax
c000f35a:	50                   	push   eax
c000f35b:	68 05 e5 01 c0       	push   0xc001e505
c000f360:	55                   	push   ebp
c000f361:	e8 7a 13 ff ff       	call   c00006e0 <strcmp>
c000f366:	83 c4 10             	add    esp,0x10
c000f369:	85 c0                	test   eax,eax
c000f36b:	74 dd                	je     c000f34a <CPU::detectFeatures()+0x19a>
c000f36d:	50                   	push   eax
c000f36e:	50                   	push   eax
c000f36f:	68 12 e5 01 c0       	push   0xc001e512
c000f374:	55                   	push   ebp
c000f375:	e8 66 13 ff ff       	call   c00006e0 <strcmp>
c000f37a:	83 c4 10             	add    esp,0x10
c000f37d:	85 c0                	test   eax,eax
c000f37f:	74 2a                	je     c000f3ab <CPU::detectFeatures()+0x1fb>
c000f381:	50                   	push   eax
c000f382:	50                   	push   eax
c000f383:	68 1f e5 01 c0       	push   0xc001e51f
c000f388:	55                   	push   ebp
c000f389:	e8 52 13 ff ff       	call   c00006e0 <strcmp>
c000f38e:	83 c4 10             	add    esp,0x10
c000f391:	85 c0                	test   eax,eax
c000f393:	74 16                	je     c000f3ab <CPU::detectFeatures()+0x1fb>
c000f395:	50                   	push   eax
c000f396:	50                   	push   eax
c000f397:	68 2c e5 01 c0       	push   0xc001e52c
c000f39c:	55                   	push   ebp
c000f39d:	e8 3e 13 ff ff       	call   c00006e0 <strcmp>
c000f3a2:	83 c4 10             	add    esp,0x10
c000f3a5:	85 c0                	test   eax,eax
c000f3a7:	74 48                	je     c000f3f1 <CPU::detectFeatures()+0x241>
c000f3a9:	eb 0f                	jmp    c000f3ba <CPU::detectFeatures()+0x20a>
c000f3ab:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f3b5:	e9 c1 01 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f3ba:	50                   	push   eax
c000f3bb:	50                   	push   eax
c000f3bc:	68 39 e5 01 c0       	push   0xc001e539
c000f3c1:	55                   	push   ebp
c000f3c2:	e8 19 13 ff ff       	call   c00006e0 <strcmp>
c000f3c7:	83 c4 10             	add    esp,0x10
c000f3ca:	85 c0                	test   eax,eax
c000f3cc:	74 23                	je     c000f3f1 <CPU::detectFeatures()+0x241>
c000f3ce:	57                   	push   edi
c000f3cf:	57                   	push   edi
c000f3d0:	68 46 e5 01 c0       	push   0xc001e546
c000f3d5:	55                   	push   ebp
c000f3d6:	e8 05 13 ff ff       	call   c00006e0 <strcmp>
c000f3db:	83 c4 10             	add    esp,0x10
c000f3de:	85 c0                	test   eax,eax
c000f3e0:	75 1e                	jne    c000f400 <CPU::detectFeatures()+0x250>
c000f3e2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f3ec:	e9 8a 01 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f3f1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3fb:	e9 7b 01 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f400:	56                   	push   esi
c000f401:	56                   	push   esi
c000f402:	68 53 e5 01 c0       	push   0xc001e553
c000f407:	55                   	push   ebp
c000f408:	e8 d3 12 ff ff       	call   c00006e0 <strcmp>
c000f40d:	83 c4 10             	add    esp,0x10
c000f410:	85 c0                	test   eax,eax
c000f412:	75 0f                	jne    c000f423 <CPU::detectFeatures()+0x273>
c000f414:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f41e:	e9 58 01 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f423:	51                   	push   ecx
c000f424:	51                   	push   ecx
c000f425:	68 12 e5 01 c0       	push   0xc001e512
c000f42a:	55                   	push   ebp
c000f42b:	e8 b0 12 ff ff       	call   c00006e0 <strcmp>
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	85 c0                	test   eax,eax
c000f435:	75 0f                	jne    c000f446 <CPU::detectFeatures()+0x296>
c000f437:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f441:	e9 35 01 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f446:	52                   	push   edx
c000f447:	52                   	push   edx
c000f448:	68 60 e5 01 c0       	push   0xc001e560
c000f44d:	55                   	push   ebp
c000f44e:	e8 8d 12 ff ff       	call   c00006e0 <strcmp>
c000f453:	83 c4 10             	add    esp,0x10
c000f456:	85 c0                	test   eax,eax
c000f458:	75 0f                	jne    c000f469 <CPU::detectFeatures()+0x2b9>
c000f45a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f464:	e9 12 01 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f469:	50                   	push   eax
c000f46a:	50                   	push   eax
c000f46b:	68 6d e5 01 c0       	push   0xc001e56d
c000f470:	55                   	push   ebp
c000f471:	e8 6a 12 ff ff       	call   c00006e0 <strcmp>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	85 c0                	test   eax,eax
c000f47b:	75 0f                	jne    c000f48c <CPU::detectFeatures()+0x2dc>
c000f47d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f487:	e9 ef 00 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f48c:	50                   	push   eax
c000f48d:	50                   	push   eax
c000f48e:	68 7a e5 01 c0       	push   0xc001e57a
c000f493:	55                   	push   ebp
c000f494:	e8 47 12 ff ff       	call   c00006e0 <strcmp>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	85 c0                	test   eax,eax
c000f49e:	75 0f                	jne    c000f4af <CPU::detectFeatures()+0x2ff>
c000f4a0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f4aa:	e9 cc 00 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f4af:	50                   	push   eax
c000f4b0:	50                   	push   eax
c000f4b1:	68 87 e5 01 c0       	push   0xc001e587
c000f4b6:	55                   	push   ebp
c000f4b7:	e8 24 12 ff ff       	call   c00006e0 <strcmp>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	85 c0                	test   eax,eax
c000f4c1:	75 0f                	jne    c000f4d2 <CPU::detectFeatures()+0x322>
c000f4c3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f4cd:	e9 a9 00 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f4d2:	50                   	push   eax
c000f4d3:	50                   	push   eax
c000f4d4:	68 94 e5 01 c0       	push   0xc001e594
c000f4d9:	55                   	push   ebp
c000f4da:	e8 01 12 ff ff       	call   c00006e0 <strcmp>
c000f4df:	83 c4 10             	add    esp,0x10
c000f4e2:	85 c0                	test   eax,eax
c000f4e4:	75 0f                	jne    c000f4f5 <CPU::detectFeatures()+0x345>
c000f4e6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f4f0:	e9 86 00 00 00       	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f4f5:	50                   	push   eax
c000f4f6:	50                   	push   eax
c000f4f7:	68 a1 e5 01 c0       	push   0xc001e5a1
c000f4fc:	55                   	push   ebp
c000f4fd:	e8 de 11 ff ff       	call   c00006e0 <strcmp>
c000f502:	83 c4 10             	add    esp,0x10
c000f505:	85 c0                	test   eax,eax
c000f507:	75 0c                	jne    c000f515 <CPU::detectFeatures()+0x365>
c000f509:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f513:	eb 66                	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f515:	50                   	push   eax
c000f516:	50                   	push   eax
c000f517:	68 ae e5 01 c0       	push   0xc001e5ae
c000f51c:	55                   	push   ebp
c000f51d:	e8 be 11 ff ff       	call   c00006e0 <strcmp>
c000f522:	83 c4 10             	add    esp,0x10
c000f525:	85 c0                	test   eax,eax
c000f527:	75 0c                	jne    c000f535 <CPU::detectFeatures()+0x385>
c000f529:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f533:	eb 46                	jmp    c000f57b <CPU::detectFeatures()+0x3cb>
c000f535:	57                   	push   edi
c000f536:	57                   	push   edi
c000f537:	68 bb e5 01 c0       	push   0xc001e5bb
c000f53c:	55                   	push   ebp
c000f53d:	e8 9e 11 ff ff       	call   c00006e0 <strcmp>
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	85 c0                	test   eax,eax
c000f547:	74 e0                	je     c000f529 <CPU::detectFeatures()+0x379>
c000f549:	56                   	push   esi
c000f54a:	56                   	push   esi
c000f54b:	68 c8 e5 01 c0       	push   0xc001e5c8
c000f550:	55                   	push   ebp
c000f551:	e8 8a 11 ff ff       	call   c00006e0 <strcmp>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	85 c0                	test   eax,eax
c000f55b:	74 cc                	je     c000f529 <CPU::detectFeatures()+0x379>
c000f55d:	51                   	push   ecx
c000f55e:	51                   	push   ecx
c000f55f:	68 d5 e5 01 c0       	push   0xc001e5d5
c000f564:	55                   	push   ebp
c000f565:	e8 76 11 ff ff       	call   c00006e0 <strcmp>
c000f56a:	83 c4 10             	add    esp,0x10
c000f56d:	85 c0                	test   eax,eax
c000f56f:	74 b8                	je     c000f529 <CPU::detectFeatures()+0x379>
c000f571:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f57b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f580:	0f 86 be 00 00 00    	jbe    c000f644 <CPU::detectFeatures()+0x494>
c000f586:	83 ec 0c             	sub    esp,0xc
c000f589:	68 80 00 00 00       	push   0x80
c000f58e:	e8 31 fb ff ff       	call   c000f0c4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f593:	83 e0 01             	and    eax,0x1
c000f596:	c1 e0 06             	shl    eax,0x6
c000f599:	88 c2                	mov    dl,al
c000f59b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5a1:	83 e0 bf             	and    eax,0xffffffbf
c000f5a4:	09 d0                	or     eax,edx
c000f5a6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5ac:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f5b3:	e8 0c fb ff ff       	call   c000f0c4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5b8:	83 e0 01             	and    eax,0x1
c000f5bb:	c1 e0 04             	shl    eax,0x4
c000f5be:	88 c2                	mov    dl,al
c000f5c0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5c6:	83 e0 ef             	and    eax,0xffffffef
c000f5c9:	09 d0                	or     eax,edx
c000f5cb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5d1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f5d8:	e8 e7 fa ff ff       	call   c000f0c4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5dd:	c1 e0 07             	shl    eax,0x7
c000f5e0:	88 c2                	mov    dl,al
c000f5e2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5e8:	83 e0 7f             	and    eax,0x7f
c000f5eb:	09 d0                	or     eax,edx
c000f5ed:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5f3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5fa:	e8 f3 fa ff ff       	call   c000f0f2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5ff:	83 e0 01             	and    eax,0x1
c000f602:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f609:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f60f:	83 e0 f7             	and    eax,0xfffffff7
c000f612:	09 d0                	or     eax,edx
c000f614:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f61a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f621:	e8 cc fa ff ff       	call   c000f0f2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f626:	83 c4 10             	add    esp,0x10
c000f629:	83 e0 01             	and    eax,0x1
c000f62c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f633:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f639:	83 e0 fb             	and    eax,0xfffffffb
c000f63c:	09 d0                	or     eax,edx
c000f63e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f644:	83 ec 0c             	sub    esp,0xc
c000f647:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f64b:	50                   	push   eax
c000f64c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f650:	50                   	push   eax
c000f651:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f655:	56                   	push   esi
c000f656:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f65a:	50                   	push   eax
c000f65b:	6a 01                	push   0x1
c000f65d:	e8 82 f9 ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f662:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f666:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f66c:	88 ca                	mov    dl,cl
c000f66e:	83 e0 f0             	and    eax,0xfffffff0
c000f671:	83 e2 0f             	and    edx,0xf
c000f674:	09 d0                	or     eax,edx
c000f676:	88 ca                	mov    dl,cl
c000f678:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f67e:	c0 ea 04             	shr    dl,0x4
c000f681:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f685:	0f b6 c2             	movzx  eax,dl
c000f688:	83 c4 20             	add    esp,0x20
c000f68b:	c1 e0 06             	shl    eax,0x6
c000f68e:	89 c7                	mov    edi,eax
c000f690:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f696:	66 25 3f c0          	and    ax,0xc03f
c000f69a:	09 f8                	or     eax,edi
c000f69c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f6a3:	89 c8                	mov    eax,ecx
c000f6a5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f6ac:	c1 e8 08             	shr    eax,0x8
c000f6af:	83 e5 3f             	and    ebp,0x3f
c000f6b2:	83 e0 0f             	and    eax,0xf
c000f6b5:	89 c7                	mov    edi,eax
c000f6b7:	c1 e7 06             	shl    edi,0x6
c000f6ba:	09 ef                	or     edi,ebp
c000f6bc:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f6c3:	89 fa                	mov    edx,edi
c000f6c5:	83 e5 c0             	and    ebp,0xffffffc0
c000f6c8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f6ce:	88 c2                	mov    dl,al
c000f6d0:	c0 ea 02             	shr    dl,0x2
c000f6d3:	89 d7                	mov    edi,edx
c000f6d5:	09 ef                	or     edi,ebp
c000f6d7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f6dd:	89 fa                	mov    edx,edi
c000f6df:	83 e5 cf             	and    ebp,0xffffffcf
c000f6e2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f6e8:	89 cf                	mov    edi,ecx
c000f6ea:	c1 ef 0c             	shr    edi,0xc
c000f6ed:	83 e7 03             	and    edi,0x3
c000f6f0:	c1 e7 04             	shl    edi,0x4
c000f6f3:	09 ef                	or     edi,ebp
c000f6f5:	3c 06                	cmp    al,0x6
c000f6f7:	89 fa                	mov    edx,edi
c000f6f9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6ff:	74 04                	je     c000f705 <CPU::detectFeatures()+0x555>
c000f701:	3c 0f                	cmp    al,0xf
c000f703:	75 5c                	jne    c000f761 <CPU::detectFeatures()+0x5b1>
c000f705:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f709:	89 cf                	mov    edi,ecx
c000f70b:	c1 ef 10             	shr    edi,0x10
c000f70e:	c1 e7 04             	shl    edi,0x4
c000f711:	09 fa                	or     edx,edi
c000f713:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f719:	0f b6 d2             	movzx  edx,dl
c000f71c:	66 81 e7 3f c0       	and    di,0xc03f
c000f721:	c1 e2 06             	shl    edx,0x6
c000f724:	09 fa                	or     edx,edi
c000f726:	3c 0f                	cmp    al,0xf
c000f728:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f72f:	75 30                	jne    c000f761 <CPU::detectFeatures()+0x5b1>
c000f731:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f737:	c1 e9 14             	shr    ecx,0x14
c000f73a:	83 e0 3f             	and    eax,0x3f
c000f73d:	83 c1 0f             	add    ecx,0xf
c000f740:	88 ca                	mov    dl,cl
c000f742:	c0 e9 02             	shr    cl,0x2
c000f745:	c1 e2 06             	shl    edx,0x6
c000f748:	09 d0                	or     eax,edx
c000f74a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f750:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f756:	83 e0 c0             	and    eax,0xffffffc0
c000f759:	09 c1                	or     ecx,eax
c000f75b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f761:	83 ec 0c             	sub    esp,0xc
c000f764:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f76b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f76f:	50                   	push   eax
c000f770:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f774:	55                   	push   ebp
c000f775:	56                   	push   esi
c000f776:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f77a:	57                   	push   edi
c000f77b:	68 00 00 00 80       	push   0x80000000
c000f780:	e8 5f f8 ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f785:	83 c4 20             	add    esp,0x20
c000f788:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f790:	76 22                	jbe    c000f7b4 <CPU::detectFeatures()+0x604>
c000f792:	83 ec 0c             	sub    esp,0xc
c000f795:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f799:	50                   	push   eax
c000f79a:	55                   	push   ebp
c000f79b:	56                   	push   esi
c000f79c:	57                   	push   edi
c000f79d:	68 01 00 00 80       	push   0x80000001
c000f7a2:	e8 3d f8 ff ff       	call   c000efe4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a7:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f7b1:	83 c4 20             	add    esp,0x20
c000f7b4:	52                   	push   edx
c000f7b5:	52                   	push   edx
c000f7b6:	68 e1 e5 01 c0       	push   0xc001e5e1
c000f7bb:	53                   	push   ebx
c000f7bc:	e8 39 c3 ff ff       	call   c000bafa <Device::setName(char const*)>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	eb 67                	jmp    c000f82d <CPU::detectFeatures()+0x67d>
c000f7c6:	50                   	push   eax
c000f7c7:	50                   	push   eax
c000f7c8:	68 46 e5 01 c0       	push   0xc001e546
c000f7cd:	55                   	push   ebp
c000f7ce:	e8 2d 0e ff ff       	call   c0000600 <strcpy>
c000f7d3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f7dd:	e8 e1 09 ff ff       	call   c00001c3 <is486>
c000f7e2:	83 c4 10             	add    esp,0x10
c000f7e5:	85 c0                	test   eax,eax
c000f7e7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7ed:	74 1d                	je     c000f80c <CPU::detectFeatures()+0x65c>
c000f7ef:	83 c8 07             	or     eax,0x7
c000f7f2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7f8:	0f 20 c0             	mov    eax,cr0
c000f7fb:	83 e0 14             	and    eax,0x14
c000f7fe:	83 f8 04             	cmp    eax,0x4
c000f801:	75 0e                	jne    c000f811 <CPU::detectFeatures()+0x661>
c000f803:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f80a:	eb 21                	jmp    c000f82d <CPU::detectFeatures()+0x67d>
c000f80c:	83 e0 f8             	and    eax,0xfffffff8
c000f80f:	eb e1                	jmp    c000f7f2 <CPU::detectFeatures()+0x642>
c000f811:	e8 88 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f816:	83 e0 01             	and    eax,0x1
c000f819:	8d 14 00             	lea    edx,[eax+eax*1]
c000f81c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f822:	83 e0 fd             	and    eax,0xfffffffd
c000f825:	09 d0                	or     eax,edx
c000f827:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f82d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f834:	74 0e                	je     c000f844 <CPU::detectFeatures()+0x694>
c000f836:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f83b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f842:	eb 20                	jmp    c000f864 <CPU::detectFeatures()+0x6b4>
c000f844:	e8 55 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f849:	83 e0 01             	and    eax,0x1
c000f84c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f84f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f855:	83 e0 fd             	and    eax,0xfffffffd
c000f858:	09 d0                	or     eax,edx
c000f85a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f860:	a8 02                	test   al,0x2
c000f862:	75 d2                	jne    c000f836 <CPU::detectFeatures()+0x686>
c000f864:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f86b:	83 c4 2c             	add    esp,0x2c
c000f86e:	5b                   	pop    ebx
c000f86f:	5e                   	pop    esi
c000f870:	5f                   	pop    edi
c000f871:	5d                   	pop    ebp
c000f872:	c3                   	ret    
c000f873:	90                   	nop

c000f874 <CPU::setupSMEP()>:
c000f874:	0f 20 e0             	mov    eax,cr4
c000f877:	0d 00 00 10 00       	or     eax,0x100000
c000f87c:	0f 22 e0             	mov    cr4,eax
c000f87f:	c3                   	ret    

c000f880 <CPU::setupUMIP()>:
c000f880:	0f 20 e0             	mov    eax,cr4
c000f883:	80 cc 08             	or     ah,0x8
c000f886:	0f 22 e0             	mov    cr4,eax
c000f889:	c3                   	ret    

c000f88a <CPU::setupTSC()>:
c000f88a:	0f 20 e0             	mov    eax,cr4
c000f88d:	83 c8 04             	or     eax,0x4
c000f890:	0f 22 e0             	mov    cr4,eax
c000f893:	c3                   	ret    

c000f894 <CPU::setupLargePages()>:
c000f894:	0f 20 e0             	mov    eax,cr4
c000f897:	83 c8 10             	or     eax,0x10
c000f89a:	0f 22 e0             	mov    cr4,eax
c000f89d:	c3                   	ret    

c000f89e <CPU::setupPAT()>:
c000f89e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f8a3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f8aa:	74 2c                	je     c000f8d8 <CPU::setupPAT()+0x3a>
c000f8ac:	53                   	push   ebx
c000f8ad:	83 ec 10             	sub    esp,0x10
c000f8b0:	68 77 02 00 00       	push   0x277
c000f8b5:	50                   	push   eax
c000f8b6:	e8 37 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f8bb:	83 e2 f8             	and    edx,0xfffffff8
c000f8be:	83 ca 01             	or     edx,0x1
c000f8c1:	52                   	push   edx
c000f8c2:	50                   	push   eax
c000f8c3:	68 77 02 00 00       	push   0x277
c000f8c8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f8ce:	e8 4b 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f8d3:	83 c4 28             	add    esp,0x28
c000f8d6:	5b                   	pop    ebx
c000f8d7:	c3                   	ret    
c000f8d8:	c3                   	ret    
c000f8d9:	90                   	nop

c000f8da <CPU::setupMTRR()>:
c000f8da:	c3                   	ret    
c000f8db:	90                   	nop

c000f8dc <CPU::setupGlobalPages()>:
c000f8dc:	0f 20 e0             	mov    eax,cr4
c000f8df:	0c 80                	or     al,0x80
c000f8e1:	0f 22 e0             	mov    cr4,eax
c000f8e4:	c3                   	ret    
c000f8e5:	90                   	nop

c000f8e6 <CPU::allowUsermodeDataAccess()>:
c000f8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8ea:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8f1:	74 03                	je     c000f8f6 <CPU::allowUsermodeDataAccess()+0x10>
c000f8f3:	0f 01 cb             	stac   
c000f8f6:	c3                   	ret    
c000f8f7:	90                   	nop

c000f8f8 <CPU::prohibitUsermodeDataAccess()>:
c000f8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8fc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f903:	74 03                	je     c000f908 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f905:	0f 01 ca             	clac   
c000f908:	c3                   	ret    
c000f909:	90                   	nop

c000f90a <CPU::setupSMAP()>:
c000f90a:	0f 20 e0             	mov    eax,cr4
c000f90d:	0d 00 00 20 00       	or     eax,0x200000
c000f912:	0f 22 e0             	mov    cr4,eax
c000f915:	eb e1                	jmp    c000f8f8 <CPU::prohibitUsermodeDataAccess()>
c000f917:	90                   	nop

c000f918 <CPU::setupFeatures()>:
c000f918:	53                   	push   ebx
c000f919:	83 ec 08             	sub    esp,0x8
c000f91c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f920:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f927:	74 18                	je     c000f941 <CPU::setupFeatures()+0x29>
c000f929:	83 ec 0c             	sub    esp,0xc
c000f92c:	68 ed e5 01 c0       	push   0xc001e5ed
c000f931:	e8 fa ab ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000f936:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f939:	e8 42 ff ff ff       	call   c000f880 <CPU::setupUMIP()>
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f948:	74 18                	je     c000f962 <CPU::setupFeatures()+0x4a>
c000f94a:	83 ec 0c             	sub    esp,0xc
c000f94d:	68 f7 e5 01 c0       	push   0xc001e5f7
c000f952:	e8 d9 ab ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000f957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f95a:	e8 2b ff ff ff       	call   c000f88a <CPU::setupTSC()>
c000f95f:	83 c4 10             	add    esp,0x10
c000f962:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f969:	74 18                	je     c000f983 <CPU::setupFeatures()+0x6b>
c000f96b:	83 ec 0c             	sub    esp,0xc
c000f96e:	68 00 e6 01 c0       	push   0xc001e600
c000f973:	e8 b8 ab ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000f978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f97b:	e8 14 ff ff ff       	call   c000f894 <CPU::setupLargePages()>
c000f980:	83 c4 10             	add    esp,0x10
c000f983:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f98a:	74 18                	je     c000f9a4 <CPU::setupFeatures()+0x8c>
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	68 09 e6 01 c0       	push   0xc001e609
c000f994:	e8 97 ab ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000f999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f99c:	e8 3b ff ff ff       	call   c000f8dc <CPU::setupGlobalPages()>
c000f9a1:	83 c4 10             	add    esp,0x10
c000f9a4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f9ab:	74 18                	je     c000f9c5 <CPU::setupFeatures()+0xad>
c000f9ad:	83 ec 0c             	sub    esp,0xc
c000f9b0:	68 1b e6 01 c0       	push   0xc001e61b
c000f9b5:	e8 76 ab ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c000f9ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9bd:	e8 dc fe ff ff       	call   c000f89e <CPU::setupPAT()>
c000f9c2:	83 c4 10             	add    esp,0x10
c000f9c5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f9cc:	74 11                	je     c000f9df <CPU::setupFeatures()+0xc7>
c000f9ce:	c7 44 24 10 24 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e624
c000f9d6:	83 c4 08             	add    esp,0x8
c000f9d9:	5b                   	pop    ebx
c000f9da:	e9 51 ab ff ff       	jmp    c000a530 <Dbg::kprintf(char const*, ...)>
c000f9df:	83 c4 08             	add    esp,0x8
c000f9e2:	5b                   	pop    ebx
c000f9e3:	c3                   	ret    

c000f9e4 <CPU::open(int, int, void*)>:
c000f9e4:	57                   	push   edi
c000f9e5:	56                   	push   esi
c000f9e6:	53                   	push   ebx
c000f9e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9ef:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9f5:	83 ec 0c             	sub    esp,0xc
c000f9f8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9fe:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fa04:	50                   	push   eax
c000fa05:	e8 d2 76 ff ff       	call   c00070dc <GDT::setup()>
c000fa0a:	83 c4 0c             	add    esp,0xc
c000fa0d:	6a 00                	push   0x0
c000fa0f:	68 ef be ad de       	push   0xdeadbeef
c000fa14:	57                   	push   edi
c000fa15:	e8 f2 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fa1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fa1d:	e8 ca 91 ff ff       	call   c0008bec <TSS::flush()>
c000fa22:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa28:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa2b:	e8 fa 78 ff ff       	call   c000732a <IDT::setup()>
c000fa30:	b8 00 04 00 00       	mov    eax,0x400
c000fa35:	0f 23 f8             	mov    db7,eax
c000fa38:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa42:	e8 4e 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa47:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa4d:	89 30                	mov    DWORD PTR [eax],esi
c000fa4f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa55:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa58:	58                   	pop    eax
c000fa59:	5a                   	pop    edx
c000fa5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa64:	e8 a7 a1 ff ff       	call   c0009c10 <VAS::setCPUSpecific(unsigned long)>
c000fa69:	c7 04 24 2e e6 01 c0 	mov    DWORD PTR [esp],0xc001e62e
c000fa70:	e8 c6 00 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000fa75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa78:	e8 33 f7 ff ff       	call   c000f1b0 <CPU::detectFeatures()>
c000fa7d:	c7 04 24 51 e6 01 c0 	mov    DWORD PTR [esp],0xc001e651
c000fa84:	e8 b2 00 00 00       	call   c000fb3b <KeSetBootMessage(char const*)>
c000fa89:	e8 26 5c 00 00       	call   c00156b4 <HalInitialise()>
c000fa8e:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fa93:	83 e0 10             	and    eax,0x10
c000fa96:	83 f8 01             	cmp    eax,0x1
c000fa99:	19 c0                	sbb    eax,eax
c000fa9b:	83 e0 46             	and    eax,0x46
c000fa9e:	83 c0 1e             	add    eax,0x1e
c000faa1:	89 04 24             	mov    DWORD PTR [esp],eax
c000faa4:	e8 60 d7 ff ff       	call   c000d209 <setupTimer(int)>
c000faa9:	83 c4 10             	add    esp,0x10
c000faac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fab2:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fab9:	74 0c                	je     c000fac7 <CPU::open(int, int, void*)+0xe3>
c000fabb:	83 ec 0c             	sub    esp,0xc
c000fabe:	53                   	push   ebx
c000fabf:	e8 54 fe ff ff       	call   c000f918 <CPU::setupFeatures()>
c000fac4:	83 c4 10             	add    esp,0x10
c000fac7:	5b                   	pop    ebx
c000fac8:	31 c0                	xor    eax,eax
c000faca:	5e                   	pop    esi
c000facb:	5f                   	pop    edi
c000facc:	c3                   	ret    

c000facd <KeDisplaySplashScreen()>:
c000facd:	55                   	push   ebp
c000face:	bd 05 00 00 00       	mov    ebp,0x5
c000fad3:	57                   	push   edi
c000fad4:	bf 40 f8 01 c0       	mov    edi,0xc001f840
c000fad9:	56                   	push   esi
c000fada:	be 0a 00 00 00       	mov    esi,0xa
c000fadf:	53                   	push   ebx
c000fae0:	31 db                	xor    ebx,ebx
c000fae2:	83 ec 0c             	sub    esp,0xc
c000fae5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fae8:	84 c0                	test   al,al
c000faea:	74 47                	je     c000fb33 <KeDisplaySplashScreen()+0x66>
c000faec:	80 bb 76 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe078a],0xdb
c000faf3:	75 13                	jne    c000fb08 <KeDisplaySplashScreen()+0x3b>
c000faf5:	0f b6 93 75 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe078b]
c000fafc:	83 e2 fe             	and    edx,0xfffffffe
c000faff:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb05:	75 01                	jne    c000fb08 <KeDisplaySplashScreen()+0x3b>
c000fb07:	46                   	inc    esi
c000fb08:	3c 0d                	cmp    al,0xd
c000fb0a:	74 24                	je     c000fb30 <KeDisplaySplashScreen()+0x63>
c000fb0c:	3c 0a                	cmp    al,0xa
c000fb0e:	75 0a                	jne    c000fb1a <KeDisplaySplashScreen()+0x4d>
c000fb10:	45                   	inc    ebp
c000fb11:	be 0a 00 00 00       	mov    esi,0xa
c000fb16:	31 db                	xor    ebx,ebx
c000fb18:	eb 16                	jmp    c000fb30 <KeDisplaySplashScreen()+0x63>
c000fb1a:	83 ec 0c             	sub    esp,0xc
c000fb1d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fb20:	55                   	push   ebp
c000fb21:	43                   	inc    ebx
c000fb22:	52                   	push   edx
c000fb23:	6a 00                	push   0x0
c000fb25:	6a 0e                	push   0xe
c000fb27:	50                   	push   eax
c000fb28:	e8 eb 67 00 00       	call   c0016318 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb2d:	83 c4 20             	add    esp,0x20
c000fb30:	47                   	inc    edi
c000fb31:	eb b2                	jmp    c000fae5 <KeDisplaySplashScreen()+0x18>
c000fb33:	83 c4 0c             	add    esp,0xc
c000fb36:	5b                   	pop    ebx
c000fb37:	5e                   	pop    esi
c000fb38:	5f                   	pop    edi
c000fb39:	5d                   	pop    ebp
c000fb3a:	c3                   	ret    

c000fb3b <KeSetBootMessage(char const*)>:
c000fb3b:	57                   	push   edi
c000fb3c:	56                   	push   esi
c000fb3d:	53                   	push   ebx
c000fb3e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb44:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb4b:	68 9e 00 00 00       	push   0x9e
c000fb50:	6a 00                	push   0x0
c000fb52:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb56:	56                   	push   esi
c000fb57:	e8 74 09 ff ff       	call   c00004d0 <memset>
c000fb5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb5f:	e8 dc 09 ff ff       	call   c0000540 <strlen>
c000fb64:	ba 50 00 00 00       	mov    edx,0x50
c000fb69:	83 c4 10             	add    esp,0x10
c000fb6c:	29 c2                	sub    edx,eax
c000fb6e:	31 c9                	xor    ecx,ecx
c000fb70:	83 e2 fe             	and    edx,0xfffffffe
c000fb73:	01 f2                	add    edx,esi
c000fb75:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb7a:	84 c0                	test   al,al
c000fb7c:	74 0a                	je     c000fb88 <KeSetBootMessage(char const*)+0x4d>
c000fb7e:	80 cc 0f             	or     ah,0xf
c000fb81:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb85:	41                   	inc    ecx
c000fb86:	eb ed                	jmp    c000fb75 <KeSetBootMessage(char const*)+0x3a>
c000fb88:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb8d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb94:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb9a:	5b                   	pop    ebx
c000fb9b:	5e                   	pop    esi
c000fb9c:	5f                   	pop    edi
c000fb9d:	c3                   	ret    

c000fb9e <EnvVarContainer::getEnv(char const*)>:
c000fb9e:	57                   	push   edi
c000fb9f:	56                   	push   esi
c000fba0:	53                   	push   ebx
c000fba1:	31 db                	xor    ebx,ebx
c000fba3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fba7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fba9:	7e 2b                	jle    c000fbd6 <EnvVarContainer::getEnv(char const*)+0x38>
c000fbab:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fbb2:	50                   	push   eax
c000fbb3:	50                   	push   eax
c000fbb4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fbb7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fbba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fbbe:	e8 1d 0b ff ff       	call   c00006e0 <strcmp>
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	85 c0                	test   eax,eax
c000fbc8:	75 09                	jne    c000fbd3 <EnvVarContainer::getEnv(char const*)+0x35>
c000fbca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fbcd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fbd1:	eb 05                	jmp    c000fbd8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fbd3:	43                   	inc    ebx
c000fbd4:	eb d1                	jmp    c000fba7 <EnvVarContainer::getEnv(char const*)+0x9>
c000fbd6:	31 c0                	xor    eax,eax
c000fbd8:	5b                   	pop    ebx
c000fbd9:	5e                   	pop    esi
c000fbda:	5f                   	pop    edi
c000fbdb:	c3                   	ret    

c000fbdc <EnvVarContainer::setEnv(char const*, char const*)>:
c000fbdc:	55                   	push   ebp
c000fbdd:	57                   	push   edi
c000fbde:	56                   	push   esi
c000fbdf:	53                   	push   ebx
c000fbe0:	83 ec 28             	sub    esp,0x28
c000fbe3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fbe7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fbeb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fbef:	56                   	push   esi
c000fbf0:	e8 4b 09 ff ff       	call   c0000540 <strlen>
c000fbf5:	40                   	inc    eax
c000fbf6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbf9:	e8 bb 7b ff ff       	call   c00077b9 <malloc>
c000fbfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc05:	e8 36 09 ff ff       	call   c0000540 <strlen>
c000fc0a:	40                   	inc    eax
c000fc0b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc0e:	e8 a6 7b ff ff       	call   c00077b9 <malloc>
c000fc13:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc1a:	e8 21 09 ff ff       	call   c0000540 <strlen>
c000fc1f:	83 c4 0c             	add    esp,0xc
c000fc22:	40                   	inc    eax
c000fc23:	50                   	push   eax
c000fc24:	6a 00                	push   0x0
c000fc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc2a:	e8 a1 08 ff ff       	call   c00004d0 <memset>
c000fc2f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc32:	e8 09 09 ff ff       	call   c0000540 <strlen>
c000fc37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc3b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc43:	89 de                	mov    esi,ebx
c000fc45:	e8 f6 08 ff ff       	call   c0000540 <strlen>
c000fc4a:	83 c4 0c             	add    esp,0xc
c000fc4d:	40                   	inc    eax
c000fc4e:	50                   	push   eax
c000fc4f:	6a 00                	push   0x0
c000fc51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc55:	e8 76 08 ff ff       	call   c00004d0 <memset>
c000fc5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc5d:	e8 de 08 ff ff       	call   c0000540 <strlen>
c000fc62:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc66:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc6e:	40                   	inc    eax
c000fc6f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc72:	c1 e0 03             	shl    eax,0x3
c000fc75:	5a                   	pop    edx
c000fc76:	59                   	pop    ecx
c000fc77:	50                   	push   eax
c000fc78:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc7b:	e8 25 7b ff ff       	call   c00077a5 <realloc>
c000fc80:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc84:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc87:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc8a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc8e:	b9 08 00 00 00       	mov    ecx,0x8
c000fc93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc95:	83 c4 2c             	add    esp,0x2c
c000fc98:	5b                   	pop    ebx
c000fc99:	5e                   	pop    esi
c000fc9a:	5f                   	pop    edi
c000fc9b:	5d                   	pop    ebp
c000fc9c:	c3                   	ret    
c000fc9d:	90                   	nop

c000fc9e <EnvVarContainer::deleteEnv(char const*)>:
c000fc9e:	c3                   	ret    
c000fc9f:	90                   	nop

c000fca0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fca0:	55                   	push   ebp
c000fca1:	57                   	push   edi
c000fca2:	56                   	push   esi
c000fca3:	53                   	push   ebx
c000fca4:	81 ec 38 01 00 00    	sub    esp,0x138
c000fcaa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fcb1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fcb8:	68 14 01 00 00       	push   0x114
c000fcbd:	e8 f7 7a ff ff       	call   c00077b9 <malloc>
c000fcc2:	83 c4 0c             	add    esp,0xc
c000fcc5:	89 c3                	mov    ebx,eax
c000fcc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fcca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fcd1:	50                   	push   eax
c000fcd2:	e8 cf ad ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c000fcd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcda:	e8 f5 b0 ff ff       	call   c000add4 <File::exists()>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	84 c0                	test   al,al
c000fce4:	75 31                	jne    c000fd17 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fce6:	50                   	push   eax
c000fce7:	50                   	push   eax
c000fce8:	6a 12                	push   0x12
c000fcea:	53                   	push   ebx
c000fceb:	e8 76 ae ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c000fcf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcf2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fcf5:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcf8:	e8 43 08 ff ff       	call   c0000540 <strlen>
c000fcfd:	5a                   	pop    edx
c000fcfe:	31 d2                	xor    edx,edx
c000fd00:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd04:	51                   	push   ecx
c000fd05:	56                   	push   esi
c000fd06:	52                   	push   edx
c000fd07:	50                   	push   eax
c000fd08:	53                   	push   ebx
c000fd09:	ff d7                	call   edi
c000fd0b:	83 c4 14             	add    esp,0x14
c000fd0e:	53                   	push   ebx
c000fd0f:	e8 b0 ae ff ff       	call   c000abc4 <File::close()>
c000fd14:	83 c4 10             	add    esp,0x10
c000fd17:	56                   	push   esi
c000fd18:	31 f6                	xor    esi,esi
c000fd1a:	68 00 01 00 00       	push   0x100
c000fd1f:	6a 00                	push   0x0
c000fd21:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd25:	50                   	push   eax
c000fd26:	e8 a5 07 ff ff       	call   c00004d0 <memset>
c000fd2b:	5f                   	pop    edi
c000fd2c:	58                   	pop    eax
c000fd2d:	6a 01                	push   0x1
c000fd2f:	53                   	push   ebx
c000fd30:	e8 31 ae ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c000fd35:	83 c4 10             	add    esp,0x10
c000fd38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd40:	83 ec 0c             	sub    esp,0xc
c000fd43:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd45:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd49:	51                   	push   ecx
c000fd4a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd4e:	52                   	push   edx
c000fd4f:	6a 00                	push   0x0
c000fd51:	6a 01                	push   0x1
c000fd53:	53                   	push   ebx
c000fd54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd57:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd5b:	83 c4 20             	add    esp,0x20
c000fd5e:	3c 0d                	cmp    al,0xd
c000fd60:	0f 84 09 01 00 00    	je     c000fe6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd66:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd6b:	0f 84 ef 00 00 00    	je     c000fe60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd71:	3c 0a                	cmp    al,0xa
c000fd73:	74 13                	je     c000fd88 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd7a:	74 0c                	je     c000fd88 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd7c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd82:	0f 8e d8 00 00 00    	jle    c000fe60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd8c:	83 ec 0c             	sub    esp,0xc
c000fd8f:	8d 78 01             	lea    edi,[eax+0x1]
c000fd92:	57                   	push   edi
c000fd93:	e8 21 7a ff ff       	call   c00077b9 <malloc>
c000fd98:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fda0:	8d 56 04             	lea    edx,[esi+0x4]
c000fda3:	89 14 24             	mov    DWORD PTR [esp],edx
c000fda6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdaa:	e8 0a 7a ff ff       	call   c00077b9 <malloc>
c000fdaf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fdb3:	83 c4 0c             	add    esp,0xc
c000fdb6:	57                   	push   edi
c000fdb7:	6a 00                	push   0x0
c000fdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdbd:	e8 0e 07 ff ff       	call   c00004d0 <memset>
c000fdc2:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fdc6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fdca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fdce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdd0:	83 c4 0c             	add    esp,0xc
c000fdd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdd7:	52                   	push   edx
c000fdd8:	6a 00                	push   0x0
c000fdda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fdde:	e8 ed 06 ff ff       	call   c00004d0 <memset>
c000fde3:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fde7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fdeb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdee:	e8 4d 07 ff ff       	call   c0000540 <strlen>
c000fdf3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fdf7:	89 c1                	mov    ecx,eax
c000fdf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdfb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdfe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fe01:	40                   	inc    eax
c000fe02:	83 c4 10             	add    esp,0x10
c000fe05:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe08:	85 d2                	test   edx,edx
c000fe0a:	75 0c                	jne    c000fe18 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	6a 08                	push   0x8
c000fe11:	e8 a3 79 ff ff       	call   c00077b9 <malloc>
c000fe16:	eb 0c                	jmp    c000fe24 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fe18:	c1 e0 03             	shl    eax,0x3
c000fe1b:	51                   	push   ecx
c000fe1c:	51                   	push   ecx
c000fe1d:	50                   	push   eax
c000fe1e:	52                   	push   edx
c000fe1f:	e8 81 79 ff ff       	call   c00077a5 <realloc>
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe2a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe2d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe30:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe34:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe38:	b9 08 00 00 00       	mov    ecx,0x8
c000fe3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3f:	31 f6                	xor    esi,esi
c000fe41:	50                   	push   eax
c000fe42:	68 00 01 00 00       	push   0x100
c000fe47:	6a 00                	push   0x0
c000fe49:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe4d:	50                   	push   eax
c000fe4e:	e8 7d 06 ff ff       	call   c00004d0 <memset>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe5e:	eb 0f                	jmp    c000fe6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe60:	3c 3d                	cmp    al,0x3d
c000fe62:	74 07                	je     c000fe6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe64:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe68:	46                   	inc    esi
c000fe69:	eb 04                	jmp    c000fe6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe6b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe74:	0f 85 c6 fe ff ff    	jne    c000fd40 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe7a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe80:	5b                   	pop    ebx
c000fe81:	5e                   	pop    esi
c000fe82:	5f                   	pop    edi
c000fe83:	5d                   	pop    ebp
c000fe84:	c3                   	ret    
c000fe85:	90                   	nop

c000fe86 <EnvVarContainer::__loadSystem()>:
c000fe86:	83 ec 10             	sub    esp,0x10
c000fe89:	68 a0 f9 01 c0       	push   0xc001f9a0
c000fe8e:	68 94 e6 01 c0       	push   0xc001e694
c000fe93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe97:	e8 04 fe ff ff       	call   c000fca0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe9c:	83 c4 1c             	add    esp,0x1c
c000fe9f:	c3                   	ret    

c000fea0 <EnvVarContainer::__loadUser()>:
c000fea0:	c3                   	ret    
c000fea1:	90                   	nop

c000fea2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000feac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000feb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000febb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fec2:	90                   	nop
c000fec3:	c3                   	ret    

c000fec4 <EnvVarContainer::~EnvVarContainer()>:
c000fec4:	83 ec 0c             	sub    esp,0xc
c000fec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fecb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fece:	85 c0                	test   eax,eax
c000fed0:	74 1d                	je     c000feef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fed8:	85 c0                	test   eax,eax
c000feda:	74 13                	je     c000feef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fee3:	83 ec 0c             	sub    esp,0xc
c000fee6:	50                   	push   eax
c000fee7:	e8 dd 78 ff ff       	call   c00077c9 <free>
c000feec:	83 c4 10             	add    esp,0x10
c000feef:	90                   	nop
c000fef0:	83 c4 0c             	add    esp,0xc
c000fef3:	c3                   	ret    

c000fef4 <Krnl::getEnv(Process*, char const*)>:
c000fef4:	53                   	push   ebx
c000fef5:	83 ec 08             	sub    esp,0x8
c000fef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fefc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff00:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ff06:	74 04                	je     c000ff0c <Krnl::getEnv(Process*, char const*)+0x18>
c000ff08:	85 c0                	test   eax,eax
c000ff0a:	75 0b                	jne    c000ff17 <Krnl::getEnv(Process*, char const*)+0x23>
c000ff0c:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff11:	85 c0                	test   eax,eax
c000ff13:	75 19                	jne    c000ff2e <Krnl::getEnv(Process*, char const*)+0x3a>
c000ff15:	eb 27                	jmp    c000ff3e <Krnl::getEnv(Process*, char const*)+0x4a>
c000ff17:	52                   	push   edx
c000ff18:	52                   	push   edx
c000ff19:	53                   	push   ebx
c000ff1a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ff20:	e8 79 fc ff ff       	call   c000fb9e <EnvVarContainer::getEnv(char const*)>
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	85 c0                	test   eax,eax
c000ff2a:	75 28                	jne    c000ff54 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff2c:	eb de                	jmp    c000ff0c <Krnl::getEnv(Process*, char const*)+0x18>
c000ff2e:	52                   	push   edx
c000ff2f:	52                   	push   edx
c000ff30:	53                   	push   ebx
c000ff31:	50                   	push   eax
c000ff32:	e8 67 fc ff ff       	call   c000fb9e <EnvVarContainer::getEnv(char const*)>
c000ff37:	83 c4 10             	add    esp,0x10
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 16                	jne    c000ff54 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff3e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff42:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff4b:	83 c4 08             	add    esp,0x8
c000ff4e:	5b                   	pop    ebx
c000ff4f:	e9 4a fc ff ff       	jmp    c000fb9e <EnvVarContainer::getEnv(char const*)>
c000ff54:	83 c4 08             	add    esp,0x8
c000ff57:	5b                   	pop    ebx
c000ff58:	c3                   	ret    

c000ff59 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff59:	83 ec 10             	sub    esp,0x10
c000ff5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff64:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ff6a:	e8 6d fc ff ff       	call   c000fbdc <EnvVarContainer::setEnv(char const*, char const*)>
c000ff6f:	83 c4 1c             	add    esp,0x1c
c000ff72:	c3                   	ret    

c000ff73 <Krnl::setEnvUser(char const*, char const*)>:
c000ff73:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff78:	85 c0                	test   eax,eax
c000ff7a:	74 15                	je     c000ff91 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff7c:	83 ec 10             	sub    esp,0x10
c000ff7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff87:	50                   	push   eax
c000ff88:	e8 4f fc ff ff       	call   c000fbdc <EnvVarContainer::setEnv(char const*, char const*)>
c000ff8d:	83 c4 1c             	add    esp,0x1c
c000ff90:	c3                   	ret    
c000ff91:	c3                   	ret    

c000ff92 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff96:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ffa0:	e9 37 fc ff ff       	jmp    c000fbdc <EnvVarContainer::setEnv(char const*, char const*)>

c000ffa5 <Krnl::deleteEnvSystem(char const*)>:
c000ffa5:	c3                   	ret    

c000ffa6 <Krnl::deleteEnvUser(char const*)>:
c000ffa6:	c3                   	ret    

c000ffa7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ffa7:	c3                   	ret    

c000ffa8 <Krnl::newProcessEnv(Process*)>:
c000ffa8:	83 ec 28             	sub    esp,0x28
c000ffab:	6a 0c                	push   0xc
c000ffad:	e8 07 78 ff ff       	call   c00077b9 <malloc>
c000ffb2:	5a                   	pop    edx
c000ffb3:	59                   	pop    ecx
c000ffb4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffb8:	50                   	push   eax
c000ffb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffbd:	e8 e0 fe ff ff       	call   c000fea2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffc6:	83 c4 2c             	add    esp,0x2c
c000ffc9:	c3                   	ret    

c000ffca <Krnl::copyProcessEnv(Process*, Process*)>:
c000ffca:	57                   	push   edi
c000ffcb:	56                   	push   esi
c000ffcc:	53                   	push   ebx
c000ffcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd1:	83 ec 0c             	sub    esp,0xc
c000ffd4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ffda:	6a 0c                	push   0xc
c000ffdc:	e8 d8 77 ff ff       	call   c00077b9 <malloc>
c000ffe1:	89 c3                	mov    ebx,eax
c000ffe3:	58                   	pop    eax
c000ffe4:	5a                   	pop    edx
c000ffe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe9:	53                   	push   ebx
c000ffea:	e8 b3 fe ff ff       	call   c000fea2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffef:	8b 07                	mov    eax,DWORD PTR [edi]
c000fff1:	89 03                	mov    DWORD PTR [ebx],eax
c000fff3:	c1 e0 03             	shl    eax,0x3
c000fff6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fff9:	e8 bb 77 ff ff       	call   c00077b9 <malloc>
c000fffe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010001:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010003:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010006:	c1 e1 03             	shl    ecx,0x3
c0010009:	89 c7                	mov    edi,eax
c001000b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	89 d8                	mov    eax,ebx
c0010012:	5b                   	pop    ebx
c0010013:	5e                   	pop    esi
c0010014:	5f                   	pop    edi
c0010015:	c3                   	ret    

c0010016 <Krnl::loadSystemEnv()>:
c0010016:	53                   	push   ebx
c0010017:	83 ec 14             	sub    esp,0x14
c001001a:	6a 0c                	push   0xc
c001001c:	e8 98 77 ff ff       	call   c00077b9 <malloc>
c0010021:	89 c3                	mov    ebx,eax
c0010023:	58                   	pop    eax
c0010024:	5a                   	pop    edx
c0010025:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001002b:	53                   	push   ebx
c001002c:	e8 71 fe ff ff       	call   c000fea2 <EnvVarContainer::EnvVarContainer(Process*)>
c0010031:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010034:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c001003a:	e8 47 fe ff ff       	call   c000fe86 <EnvVarContainer::__loadSystem()>
c001003f:	83 c4 18             	add    esp,0x18
c0010042:	5b                   	pop    ebx
c0010043:	c3                   	ret    

c0010044 <Krnl::loadUserEnv()>:
c0010044:	53                   	push   ebx
c0010045:	83 ec 14             	sub    esp,0x14
c0010048:	6a 0c                	push   0xc
c001004a:	e8 6a 77 ff ff       	call   c00077b9 <malloc>
c001004f:	89 c3                	mov    ebx,eax
c0010051:	58                   	pop    eax
c0010052:	5a                   	pop    edx
c0010053:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010059:	53                   	push   ebx
c001005a:	e8 43 fe ff ff       	call   c000fea2 <EnvVarContainer::EnvVarContainer(Process*)>
c001005f:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c0010065:	83 c4 18             	add    esp,0x18
c0010068:	5b                   	pop    ebx
c0010069:	c3                   	ret    

c001006a <Krnl::flushEnv()>:
c001006a:	c3                   	ret    

c001006b <Krnl::getProcessTotalEnvCount(Process*)>:
c001006b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001006f:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c0010075:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001007b:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010080:	8b 00                	mov    eax,DWORD PTR [eax]
c0010082:	03 01                	add    eax,DWORD PTR [ecx]
c0010084:	85 d2                	test   edx,edx
c0010086:	74 02                	je     c001008a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010088:	03 02                	add    eax,DWORD PTR [edx]
c001008a:	c3                   	ret    

c001008b <Krnl::getProcessEnvPair(Process*, int)>:
c001008b:	57                   	push   edi
c001008c:	56                   	push   esi
c001008d:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c0010093:	53                   	push   ebx
c0010094:	85 f6                	test   esi,esi
c0010096:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001009a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001009e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00100a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100aa:	75 16                	jne    c00100c2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00100ac:	39 c2                	cmp    edx,eax
c00100ae:	7c 16                	jl     c00100c6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100b0:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c00100b6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00100b8:	01 c6                	add    esi,eax
c00100ba:	39 d6                	cmp    esi,edx
c00100bc:	7e 3c                	jle    c00100fa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100be:	29 c2                	sub    edx,eax
c00100c0:	eb 04                	jmp    c00100c6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100c2:	39 c2                	cmp    edx,eax
c00100c4:	7d 05                	jge    c00100cb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00100c6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00100c9:	eb 20                	jmp    c00100eb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00100cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00100cd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00100d0:	39 d1                	cmp    ecx,edx
c00100d2:	7e 04                	jle    c00100d8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00100d4:	29 c2                	sub    edx,eax
c00100d6:	eb 10                	jmp    c00100e8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00100d8:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00100de:	03 0e                	add    ecx,DWORD PTR [esi]
c00100e0:	39 d1                	cmp    ecx,edx
c00100e2:	7e 16                	jle    c00100fa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100e4:	29 c2                	sub    edx,eax
c00100e6:	29 fa                	sub    edx,edi
c00100e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00100eb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00100ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00100f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00100f3:	89 03                	mov    DWORD PTR [ebx],eax
c00100f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100f8:	eb 1d                	jmp    c0010117 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	68 b6 e6 01 c0       	push   0xc001e6b6
c0010102:	e8 ac 00 00 00       	call   c00101b3 <KePanic(char const*)>
c0010107:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001010d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010114:	83 c4 10             	add    esp,0x10
c0010117:	89 d8                	mov    eax,ebx
c0010119:	5b                   	pop    ebx
c001011a:	5e                   	pop    esi
c001011b:	5f                   	pop    edi
c001011c:	c2 04 00             	ret    0x4

c001011f <CPU::current()>:
c001011f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010124:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001012a:	c3                   	ret    

c001012b <operator new(unsigned long)>:
c001012b:	e9 89 76 ff ff       	jmp    c00077b9 <malloc>

c0010130 <operator delete(void*)>:
c0010130:	e9 a4 76 ff ff       	jmp    c00077d9 <rfree>

c0010135 <disableIRQs()>:
c0010135:	fa                   	cli    
c0010136:	c3                   	ret    

c0010137 <enableIRQs()>:
c0010137:	fb                   	sti    
c0010138:	c3                   	ret    

c0010139 <lockScheduler()>:
c0010139:	fa                   	cli    
c001013a:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010140:	c3                   	ret    

c0010141 <unlockScheduler()>:
c0010141:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010146:	48                   	dec    eax
c0010147:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001014c:	75 01                	jne    c001014f <unlockScheduler()+0xe>
c001014e:	fb                   	sti    
c001014f:	c3                   	ret    

c0010150 <lockStuff()>:
c0010150:	fa                   	cli    
c0010151:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010157:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c001015d:	c3                   	ret    

c001015e <unlockStuff()>:
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0010166:	48                   	dec    eax
c0010167:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001016c:	75 18                	jne    c0010186 <unlockStuff()+0x28>
c001016e:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0010175:	74 0f                	je     c0010186 <unlockStuff()+0x28>
c0010177:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0010181:	e8 22 36 00 00       	call   c00137a8 <schedule()>
c0010186:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001018b:	48                   	dec    eax
c001018c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010191:	75 01                	jne    c0010194 <unlockStuff()+0x36>
c0010193:	fb                   	sti    
c0010194:	83 c4 0c             	add    esp,0xc
c0010197:	c3                   	ret    

c0010198 <Virt::getAKernelVAS()>:
c0010198:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c001019d:	c3                   	ret    

c001019e <__not_memcpy>:
c001019e:	57                   	push   edi
c001019f:	56                   	push   esi
c00101a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101ac:	89 c7                	mov    edi,eax
c00101ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101b0:	5e                   	pop    esi
c00101b1:	5f                   	pop    edi
c00101b2:	c3                   	ret    

c00101b3 <KePanic(char const*)>:
c00101b3:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c00101ba:	e9 e1 53 00 00       	jmp    c00155a0 <HalPanic(char const*)>

c00101bf <Krnl::powerThread(void*)>:
c00101bf:	83 ec 0c             	sub    esp,0xc
c00101c2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101c7:	48                   	dec    eax
c00101c8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101cd:	75 01                	jne    c00101d0 <Krnl::powerThread(void*)+0x11>
c00101cf:	fb                   	sti    
c00101d0:	83 ec 0c             	sub    esp,0xc
c00101d3:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00101da:	6a 0a                	push   0xa
c00101dc:	e8 d7 38 00 00       	call   c0013ab8 <sleep(unsigned int)>
c00101e1:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c00101e8:	83 c4 10             	add    esp,0x10
c00101eb:	eb e3                	jmp    c00101d0 <Krnl::powerThread(void*)+0x11>

c00101ed <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00101ed:	57                   	push   edi
c00101ee:	b9 09 00 00 00       	mov    ecx,0x9
c00101f3:	56                   	push   esi
c00101f4:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00101f9:	fc                   	cld    
c00101fa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010200:	5e                   	pop    esi
c0010201:	5f                   	pop    edi
c0010202:	c3                   	ret    

c0010203 <Krnl::userIOReceived()>:
c0010203:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c001020d:	c3                   	ret    

c001020e <Krnl::handlePowerButton()>:
c001020e:	83 ec 0c             	sub    esp,0xc
c0010211:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c0010216:	83 f8 02             	cmp    eax,0x2
c0010219:	75 10                	jne    c001022b <Krnl::handlePowerButton()+0x1d>
c001021b:	83 ec 0c             	sub    esp,0xc
c001021e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010224:	e8 2d 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010229:	eb 11                	jmp    c001023c <Krnl::handlePowerButton()+0x2e>
c001022b:	48                   	dec    eax
c001022c:	75 11                	jne    c001023f <Krnl::handlePowerButton()+0x31>
c001022e:	83 ec 0c             	sub    esp,0xc
c0010231:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010237:	e8 4a 6c ff ff       	call   c0006e86 <Computer::sleep()>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	83 c4 0c             	add    esp,0xc
c0010242:	c3                   	ret    

c0010243 <Krnl::handleSleepButton()>:
c0010243:	83 ec 0c             	sub    esp,0xc
c0010246:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c001024b:	83 f8 02             	cmp    eax,0x2
c001024e:	75 10                	jne    c0010260 <Krnl::handleSleepButton()+0x1d>
c0010250:	83 ec 0c             	sub    esp,0xc
c0010253:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010259:	e8 f8 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c001025e:	eb 11                	jmp    c0010271 <Krnl::handleSleepButton()+0x2e>
c0010260:	48                   	dec    eax
c0010261:	75 11                	jne    c0010274 <Krnl::handleSleepButton()+0x31>
c0010263:	83 ec 0c             	sub    esp,0xc
c0010266:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001026c:	e8 15 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	83 c4 0c             	add    esp,0xc
c0010277:	c3                   	ret    

c0010278 <Krnl::setupPowerManager()>:
c0010278:	83 ec 0c             	sub    esp,0xc
c001027b:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010285:	68 f0 00 00 00       	push   0xf0
c001028a:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010291:	6a 00                	push   0x0
c0010293:	68 bf 01 01 c0       	push   0xc00101bf
c0010298:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001029e:	e8 e5 32 00 00       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c00102a3:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c00102ad:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c00102b7:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c00102c1:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c00102cb:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c00102d5:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00102df:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c00102e9:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c00102f3:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00102fd:	83 c4 1c             	add    esp,0x1c
c0010300:	c3                   	ret    
c0010301:	66 90                	xchg   ax,ax
c0010303:	90                   	nop

c0010304 <KeResolveCompatibilitySymbol(char*)>:
c0010304:	83 ec 0c             	sub    esp,0xc
c0010307:	83 ec 08             	sub    esp,0x8
c001030a:	68 d0 e6 01 c0       	push   0xc001e6d0
c001030f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010313:	e8 c8 03 ff ff       	call   c00006e0 <strcmp>
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	85 c0                	test   eax,eax
c001031d:	0f 94 c0             	sete   al
c0010320:	84 c0                	test   al,al
c0010322:	74 0c                	je     c0010330 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010324:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010329:	e9 62 01 00 00       	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001032e:	66 90                	xchg   ax,ax
c0010330:	83 ec 08             	sub    esp,0x8
c0010333:	68 d9 e6 01 c0       	push   0xc001e6d9
c0010338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001033c:	e8 9f 03 ff ff       	call   c00006e0 <strcmp>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	85 c0                	test   eax,eax
c0010346:	0f 94 c0             	sete   al
c0010349:	84 c0                	test   al,al
c001034b:	74 0b                	je     c0010358 <KeResolveCompatibilitySymbol(char*)+0x54>
c001034d:	b8 00 c1 01 c0       	mov    eax,0xc001c100
c0010352:	e9 39 01 00 00       	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010357:	90                   	nop
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	68 e3 e6 01 c0       	push   0xc001e6e3
c0010360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010364:	e8 77 03 ff ff       	call   c00006e0 <strcmp>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	85 c0                	test   eax,eax
c001036e:	0f 94 c0             	sete   al
c0010371:	84 c0                	test   al,al
c0010373:	74 0b                	je     c0010380 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010375:	b8 34 be 01 c0       	mov    eax,0xc001be34
c001037a:	e9 11 01 00 00       	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037f:	90                   	nop
c0010380:	83 ec 08             	sub    esp,0x8
c0010383:	68 ec e6 01 c0       	push   0xc001e6ec
c0010388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038c:	e8 4f 03 ff ff       	call   c00006e0 <strcmp>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	85 c0                	test   eax,eax
c0010396:	0f 94 c0             	sete   al
c0010399:	84 c0                	test   al,al
c001039b:	74 0b                	je     c00103a8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001039d:	b8 b3 01 01 c0       	mov    eax,0xc00101b3
c00103a2:	e9 e9 00 00 00       	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a7:	90                   	nop
c00103a8:	83 ec 08             	sub    esp,0x8
c00103ab:	68 ff e6 01 c0       	push   0xc001e6ff
c00103b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b4:	e8 27 03 ff ff       	call   c00006e0 <strcmp>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	85 c0                	test   eax,eax
c00103be:	0f 94 c0             	sete   al
c00103c1:	84 c0                	test   al,al
c00103c3:	74 0b                	je     c00103d0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00103c5:	b8 3b fb 00 c0       	mov    eax,0xc000fb3b
c00103ca:	e9 c1 00 00 00       	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103cf:	90                   	nop
c00103d0:	83 ec 08             	sub    esp,0x8
c00103d3:	68 1c e7 01 c0       	push   0xc001e71c
c00103d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103dc:	e8 ff 02 ff ff       	call   c00006e0 <strcmp>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	85 c0                	test   eax,eax
c00103e6:	0f 94 c0             	sete   al
c00103e9:	84 c0                	test   al,al
c00103eb:	74 0b                	je     c00103f8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00103ed:	b8 00 c2 01 c0       	mov    eax,0xc001c200
c00103f2:	e9 99 00 00 00       	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f7:	90                   	nop
c00103f8:	83 ec 08             	sub    esp,0x8
c00103fb:	68 26 e7 01 c0       	push   0xc001e726
c0010400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010404:	e8 d7 02 ff ff       	call   c00006e0 <strcmp>
c0010409:	83 c4 10             	add    esp,0x10
c001040c:	85 c0                	test   eax,eax
c001040e:	0f 94 c0             	sete   al
c0010411:	84 c0                	test   al,al
c0010413:	74 07                	je     c001041c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010415:	b8 80 bf 01 c0       	mov    eax,0xc001bf80
c001041a:	eb 74                	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001041c:	83 ec 08             	sub    esp,0x8
c001041f:	68 2f e7 01 c0       	push   0xc001e72f
c0010424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010428:	e8 b3 02 ff ff       	call   c00006e0 <strcmp>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	85 c0                	test   eax,eax
c0010432:	0f 94 c0             	sete   al
c0010435:	84 c0                	test   al,al
c0010437:	74 07                	je     c0010440 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010439:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001043e:	eb 50                	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010440:	83 ec 08             	sub    esp,0x8
c0010443:	68 47 e7 01 c0       	push   0xc001e747
c0010448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044c:	e8 8f 02 ff ff       	call   c00006e0 <strcmp>
c0010451:	83 c4 10             	add    esp,0x10
c0010454:	85 c0                	test   eax,eax
c0010456:	0f 94 c0             	sete   al
c0010459:	84 c0                	test   al,al
c001045b:	74 07                	je     c0010464 <KeResolveCompatibilitySymbol(char*)+0x160>
c001045d:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010462:	eb 2c                	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010464:	83 ec 08             	sub    esp,0x8
c0010467:	68 54 e7 01 c0       	push   0xc001e754
c001046c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010470:	e8 6b 02 ff ff       	call   c00006e0 <strcmp>
c0010475:	83 c4 10             	add    esp,0x10
c0010478:	85 c0                	test   eax,eax
c001047a:	0f 94 c0             	sete   al
c001047d:	84 c0                	test   al,al
c001047f:	74 07                	je     c0010488 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010481:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c0010486:	eb 08                	jmp    c0010490 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010488:	b8 00 00 00 00       	mov    eax,0x0
c001048d:	8d 76 00             	lea    esi,[esi+0x0]
c0010490:	83 c4 0c             	add    esp,0xc
c0010493:	c3                   	ret    

c0010494 <KiSigKill(int)>:
c0010494:	57                   	push   edi
c0010495:	b9 0a 00 00 00       	mov    ecx,0xa
c001049a:	56                   	push   esi
c001049b:	be 9d e7 01 c0       	mov    esi,0xc001e79d
c00104a0:	83 ec 14             	sub    esp,0x14
c00104a3:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00104a7:	fc                   	cld    
c00104a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104aa:	8d 44 24 06          	lea    eax,[esp+0x6]
c00104ae:	50                   	push   eax
c00104af:	6a 00                	push   0x0
c00104b1:	6a 00                	push   0x0
c00104b3:	6a 27                	push   0x27
c00104b5:	e8 98 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104ba:	83 c4 24             	add    esp,0x24
c00104bd:	5e                   	pop    esi
c00104be:	5f                   	pop    edi
c00104bf:	c3                   	ret    

c00104c0 <KiDefaultSignalHandlerIgnore(int)>:
c00104c0:	c3                   	ret    

c00104c1 <KiDefaultSignalHandlerPause(int)>:
c00104c1:	57                   	push   edi
c00104c2:	b9 07 00 00 00       	mov    ecx,0x7
c00104c7:	56                   	push   esi
c00104c8:	be a7 e7 01 c0       	mov    esi,0xc001e7a7
c00104cd:	83 ec 24             	sub    esp,0x24
c00104d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00104d4:	fc                   	cld    
c00104d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00104d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00104db:	50                   	push   eax
c00104dc:	6a 00                	push   0x0
c00104de:	6a 00                	push   0x0
c00104e0:	6a 27                	push   0x27
c00104e2:	e8 6b fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104e7:	83 c4 34             	add    esp,0x34
c00104ea:	5e                   	pop    esi
c00104eb:	5f                   	pop    edi
c00104ec:	c3                   	ret    

c00104ed <KiDefaultSignalHandlerResume(int)>:
c00104ed:	57                   	push   edi
c00104ee:	b9 1d 00 00 00       	mov    ecx,0x1d
c00104f3:	56                   	push   esi
c00104f4:	be c3 e7 01 c0       	mov    esi,0xc001e7c3
c00104f9:	83 ec 24             	sub    esp,0x24
c00104fc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010500:	fc                   	cld    
c0010501:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010503:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010507:	50                   	push   eax
c0010508:	6a 00                	push   0x0
c001050a:	6a 00                	push   0x0
c001050c:	6a 27                	push   0x27
c001050e:	e8 3f fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010513:	83 c4 34             	add    esp,0x34
c0010516:	5e                   	pop    esi
c0010517:	5f                   	pop    edi
c0010518:	c3                   	ret    

c0010519 <KeDeinitSignals(SigHandlerBlock*)>:
c0010519:	e9 ab 72 ff ff       	jmp    c00077c9 <free>

c001051e <KeInitSignals()>:
c001051e:	53                   	push   ebx
c001051f:	83 ec 14             	sub    esp,0x14
c0010522:	68 c8 00 00 00       	push   0xc8
c0010527:	e8 8d 72 ff ff       	call   c00077b9 <malloc>
c001052c:	83 c4 0c             	add    esp,0xc
c001052f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010539:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010543:	89 c3                	mov    ebx,eax
c0010545:	6a 20                	push   0x20
c0010547:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001054d:	6a 00                	push   0x0
c001054f:	50                   	push   eax
c0010550:	e8 7b ff fe ff       	call   c00004d0 <memset>
c0010555:	83 c4 0c             	add    esp,0xc
c0010558:	6a 44                	push   0x44
c001055a:	6a 00                	push   0x0
c001055c:	53                   	push   ebx
c001055d:	e8 6e ff fe ff       	call   c00004d0 <memset>
c0010562:	89 d8                	mov    eax,ebx
c0010564:	83 c4 18             	add    esp,0x18
c0010567:	5b                   	pop    ebx
c0010568:	c3                   	ret    

c0010569 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010569:	53                   	push   ebx
c001056a:	b8 01 00 00 00       	mov    eax,0x1
c001056f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010573:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010577:	83 f9 10             	cmp    ecx,0x10
c001057a:	7f 21                	jg     c001059d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001057c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001057f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010583:	89 03                	mov    DWORD PTR [ebx],eax
c0010585:	b8 01 00 00 00       	mov    eax,0x1
c001058a:	d3 e0                	shl    eax,cl
c001058c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010590:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010593:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001059b:	31 c0                	xor    eax,eax
c001059d:	5b                   	pop    ebx
c001059e:	c3                   	ret    

c001059f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001059f:	55                   	push   ebp
c00105a0:	57                   	push   edi
c00105a1:	bf 08 00 00 00       	mov    edi,0x8
c00105a6:	56                   	push   esi
c00105a7:	53                   	push   ebx
c00105a8:	83 ec 18             	sub    esp,0x18
c00105ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105af:	68 e0 e7 01 c0       	push   0xc001e7e0
c00105b4:	e8 77 9f ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00105b9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00105c0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00105c6:	83 c4 10             	add    esp,0x10
c00105c9:	31 c9                	xor    ecx,ecx
c00105cb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00105cf:	99                   	cdq    
c00105d0:	f7 ff                	idiv   edi
c00105d2:	8d 42 24             	lea    eax,[edx+0x24]
c00105d5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00105d9:	85 f6                	test   esi,esi
c00105db:	75 1a                	jne    c00105f7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00105dd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00105e1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00105e5:	50                   	push   eax
c00105e6:	50                   	push   eax
c00105e7:	52                   	push   edx
c00105e8:	68 f1 e7 01 c0       	push   0xc001e7f1
c00105ed:	e8 3e 9f ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00105f2:	83 c4 10             	add    esp,0x10
c00105f5:	eb 1b                	jmp    c0010612 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00105f7:	41                   	inc    ecx
c00105f8:	83 f9 08             	cmp    ecx,0x8
c00105fb:	75 ce                	jne    c00105cb <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00105fd:	83 ec 0c             	sub    esp,0xc
c0010600:	be 01 00 00 00       	mov    esi,0x1
c0010605:	68 12 e8 01 c0       	push   0xc001e812
c001060a:	e8 21 9f ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001060f:	83 c4 10             	add    esp,0x10
c0010612:	83 c4 0c             	add    esp,0xc
c0010615:	89 f0                	mov    eax,esi
c0010617:	5b                   	pop    ebx
c0010618:	5e                   	pop    esi
c0010619:	5f                   	pop    edi
c001061a:	5d                   	pop    ebp
c001061b:	c3                   	ret    

c001061c <KeCheckSignal(SigHandlerBlock*)>:
c001061c:	55                   	push   ebp
c001061d:	57                   	push   edi
c001061e:	56                   	push   esi
c001061f:	53                   	push   ebx
c0010620:	51                   	push   ecx
c0010621:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010625:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001062c:	75 07                	jne    c0010635 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001062e:	31 c0                	xor    eax,eax
c0010630:	e9 cc 00 00 00       	jmp    c0010701 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010635:	31 c9                	xor    ecx,ecx
c0010637:	bf 08 00 00 00       	mov    edi,0x8
c001063c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010642:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010645:	99                   	cdq    
c0010646:	f7 ff                	idiv   edi
c0010648:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001064f:	85 d2                	test   edx,edx
c0010651:	0f 84 94 00 00 00    	je     c00106eb <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010657:	88 d1                	mov    cl,dl
c0010659:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001065f:	bf 01 00 00 00       	mov    edi,0x1
c0010664:	89 04 24             	mov    DWORD PTR [esp],eax
c0010667:	d3 e7                	shl    edi,cl
c0010669:	bd 01 00 00 00       	mov    ebp,0x1
c001066e:	31 c9                	xor    ecx,ecx
c0010670:	89 e8                	mov    eax,ebp
c0010672:	d3 e0                	shl    eax,cl
c0010674:	85 04 24             	test   DWORD PTR [esp],eax
c0010677:	74 06                	je     c001067f <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010679:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001067d:	75 af                	jne    c001062e <KeCheckSignal(SigHandlerBlock*)+0x12>
c001067f:	41                   	inc    ecx
c0010680:	83 f9 11             	cmp    ecx,0x11
c0010683:	75 eb                	jne    c0010670 <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010685:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001068b:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010691:	09 f8                	or     eax,edi
c0010693:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001069e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00106a4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00106ab:	31 c0                	xor    eax,eax
c00106ad:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00106b5:	74 09                	je     c00106c0 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00106b7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106be:	eb 06                	jmp    c00106c6 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00106c0:	40                   	inc    eax
c00106c1:	83 f8 08             	cmp    eax,0x8
c00106c4:	75 e7                	jne    c00106ad <KeCheckSignal(SigHandlerBlock*)+0x91>
c00106c6:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00106c9:	83 fa 09             	cmp    edx,0x9
c00106cc:	75 07                	jne    c00106d5 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00106ce:	b8 94 04 01 c0       	mov    eax,0xc0010494
c00106d3:	eb 2c                	jmp    c0010701 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106d5:	83 f8 01             	cmp    eax,0x1
c00106d8:	0f 84 50 ff ff ff    	je     c001062e <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106de:	85 c0                	test   eax,eax
c00106e0:	75 1f                	jne    c0010701 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106e2:	8b 04 95 00 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0600]
c00106e9:	eb 16                	jmp    c0010701 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106eb:	46                   	inc    esi
c00106ec:	41                   	inc    ecx
c00106ed:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106f3:	83 f9 08             	cmp    ecx,0x8
c00106f6:	0f 85 40 ff ff ff    	jne    c001063c <KeCheckSignal(SigHandlerBlock*)+0x20>
c00106fc:	e9 2d ff ff ff       	jmp    c001062e <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010701:	5a                   	pop    edx
c0010702:	5b                   	pop    ebx
c0010703:	5e                   	pop    esi
c0010704:	5f                   	pop    edi
c0010705:	5d                   	pop    ebp
c0010706:	c3                   	ret    

c0010707 <KiCheckSignalZ>:
c0010707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001070c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001070f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010715:	e8 02 ff ff ff       	call   c001061c <KeCheckSignal(SigHandlerBlock*)>
c001071a:	5a                   	pop    edx
c001071b:	c3                   	ret    

c001071c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001071c:	56                   	push   esi
c001071d:	53                   	push   ebx
c001071e:	bb 01 00 00 00       	mov    ebx,0x1
c0010723:	52                   	push   edx
c0010724:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010728:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001072c:	d3 e3                	shl    ebx,cl
c001072e:	83 f9 10             	cmp    ecx,0x10
c0010731:	7f 08                	jg     c001073b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010733:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010739:	75 10                	jne    c001074b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001073b:	83 ec 0c             	sub    esp,0xc
c001073e:	68 23 e8 01 c0       	push   0xc001e823
c0010743:	e8 6b fa ff ff       	call   c00101b3 <KePanic(char const*)>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	f7 d3                	not    ebx
c001074d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010753:	58                   	pop    eax
c0010754:	5b                   	pop    ebx
c0010755:	5e                   	pop    esi
c0010756:	c3                   	ret    

c0010757 <SysSeekDir(regs*)>:
c0010757:	31 c0                	xor    eax,eax
c0010759:	31 d2                	xor    edx,edx
c001075b:	c3                   	ret    

c001075c <SysTellDir(regs*)>:
c001075c:	31 c0                	xor    eax,eax
c001075e:	31 d2                	xor    edx,edx
c0010760:	c3                   	ret    

c0010761 <SysVerify(regs*)>:
c0010761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010765:	31 d2                	xor    edx,edx
c0010767:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001076a:	c3                   	ret    

c001076b <SysGetArgc(regs*)>:
c001076b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010770:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010773:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010779:	99                   	cdq    
c001077a:	c3                   	ret    

c001077b <SysTTYName(regs*)>:
c001077b:	b8 01 00 00 00       	mov    eax,0x1
c0010780:	31 d2                	xor    edx,edx
c0010782:	c3                   	ret    

c0010783 <SysFormatDisk(regs*)>:
c0010783:	56                   	push   esi
c0010784:	53                   	push   ebx
c0010785:	50                   	push   eax
c0010786:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001078a:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c0010790:	eb 28                	jmp    c00107ba <SysFormatDisk(regs*)+0x37>
c0010792:	83 ec 0c             	sub    esp,0xc
c0010795:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010798:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001079b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001079d:	51                   	push   ecx
c001079e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107a1:	51                   	push   ecx
c00107a2:	50                   	push   eax
c00107a3:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00107aa:	50                   	push   eax
c00107ab:	53                   	push   ebx
c00107ac:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107af:	83 c4 20             	add    esp,0x20
c00107b2:	83 f8 08             	cmp    eax,0x8
c00107b5:	75 12                	jne    c00107c9 <SysFormatDisk(regs*)+0x46>
c00107b7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107ba:	85 db                	test   ebx,ebx
c00107bc:	75 d4                	jne    c0010792 <SysFormatDisk(regs*)+0xf>
c00107be:	59                   	pop    ecx
c00107bf:	b8 03 00 00 00       	mov    eax,0x3
c00107c4:	31 d2                	xor    edx,edx
c00107c6:	5b                   	pop    ebx
c00107c7:	5e                   	pop    esi
c00107c8:	c3                   	ret    
c00107c9:	85 c0                	test   eax,eax
c00107cb:	74 1b                	je     c00107e8 <SysFormatDisk(regs*)+0x65>
c00107cd:	83 f8 09             	cmp    eax,0x9
c00107d0:	74 0b                	je     c00107dd <SysFormatDisk(regs*)+0x5a>
c00107d2:	59                   	pop    ecx
c00107d3:	b8 02 00 00 00       	mov    eax,0x2
c00107d8:	31 d2                	xor    edx,edx
c00107da:	5b                   	pop    ebx
c00107db:	5e                   	pop    esi
c00107dc:	c3                   	ret    
c00107dd:	59                   	pop    ecx
c00107de:	b8 01 00 00 00       	mov    eax,0x1
c00107e3:	31 d2                	xor    edx,edx
c00107e5:	5b                   	pop    ebx
c00107e6:	5e                   	pop    esi
c00107e7:	c3                   	ret    
c00107e8:	59                   	pop    ecx
c00107e9:	31 c0                	xor    eax,eax
c00107eb:	31 d2                	xor    edx,edx
c00107ed:	5b                   	pop    ebx
c00107ee:	5e                   	pop    esi
c00107ef:	c3                   	ret    

c00107f0 <SysSetDiskVolumeLabel(regs*)>:
c00107f0:	56                   	push   esi
c00107f1:	53                   	push   ebx
c00107f2:	53                   	push   ebx
c00107f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00107fa:	83 f8 19             	cmp    eax,0x19
c00107fd:	77 2d                	ja     c001082c <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107ff:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0010806:	85 c9                	test   ecx,ecx
c0010808:	74 22                	je     c001082c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001080a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001080d:	85 db                	test   ebx,ebx
c001080f:	74 1b                	je     c001082c <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010811:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010817:	85 d2                	test   edx,edx
c0010819:	74 11                	je     c001082c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001081b:	8b 32                	mov    esi,DWORD PTR [edx]
c001081d:	53                   	push   ebx
c001081e:	50                   	push   eax
c001081f:	51                   	push   ecx
c0010820:	52                   	push   edx
c0010821:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	99                   	cdq    
c0010828:	59                   	pop    ecx
c0010829:	5b                   	pop    ebx
c001082a:	5e                   	pop    esi
c001082b:	c3                   	ret    
c001082c:	59                   	pop    ecx
c001082d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010832:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010837:	5b                   	pop    ebx
c0010838:	5e                   	pop    esi
c0010839:	c3                   	ret    

c001083a <SysGetDiskVolumeLabel(regs*)>:
c001083a:	57                   	push   edi
c001083b:	56                   	push   esi
c001083c:	53                   	push   ebx
c001083d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010841:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010844:	83 fa 19             	cmp    edx,0x19
c0010847:	77 38                	ja     c0010881 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010849:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c0010850:	85 c9                	test   ecx,ecx
c0010852:	74 2d                	je     c0010881 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010854:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010857:	85 db                	test   ebx,ebx
c0010859:	74 26                	je     c0010881 <SysGetDiskVolumeLabel(regs*)+0x47>
c001085b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001085e:	85 f6                	test   esi,esi
c0010860:	74 1f                	je     c0010881 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010862:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010868:	85 c0                	test   eax,eax
c001086a:	74 15                	je     c0010881 <SysGetDiskVolumeLabel(regs*)+0x47>
c001086c:	83 ec 0c             	sub    esp,0xc
c001086f:	8b 38                	mov    edi,DWORD PTR [eax]
c0010871:	56                   	push   esi
c0010872:	53                   	push   ebx
c0010873:	52                   	push   edx
c0010874:	51                   	push   ecx
c0010875:	50                   	push   eax
c0010876:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010879:	83 c4 20             	add    esp,0x20
c001087c:	99                   	cdq    
c001087d:	5b                   	pop    ebx
c001087e:	5e                   	pop    esi
c001087f:	5f                   	pop    edi
c0010880:	c3                   	ret    
c0010881:	5b                   	pop    ebx
c0010882:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010887:	ba ff ff ff ff       	mov    edx,0xffffffff
c001088c:	5e                   	pop    esi
c001088d:	5f                   	pop    edi
c001088e:	c3                   	ret    

c001088f <SysShutdown(regs*)>:
c001088f:	83 ec 0c             	sub    esp,0xc
c0010892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010896:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010899:	85 c0                	test   eax,eax
c001089b:	74 18                	je     c00108b5 <SysShutdown(regs*)+0x26>
c001089d:	83 f8 01             	cmp    eax,0x1
c00108a0:	74 38                	je     c00108da <SysShutdown(regs*)+0x4b>
c00108a2:	83 f8 02             	cmp    eax,0x2
c00108a5:	74 24                	je     c00108cb <SysShutdown(regs*)+0x3c>
c00108a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108b1:	83 c4 0c             	add    esp,0xc
c00108b4:	c3                   	ret    
c00108b5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00108bc:	6a 00                	push   0x0
c00108be:	6a 00                	push   0x0
c00108c0:	6a 00                	push   0x0
c00108c2:	50                   	push   eax
c00108c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108c6:	83 c4 10             	add    esp,0x10
c00108c9:	eb dc                	jmp    c00108a7 <SysShutdown(regs*)+0x18>
c00108cb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00108d2:	6a 00                	push   0x0
c00108d4:	6a 00                	push   0x0
c00108d6:	6a 01                	push   0x1
c00108d8:	eb e8                	jmp    c00108c2 <SysShutdown(regs*)+0x33>
c00108da:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00108df:	85 c0                	test   eax,eax
c00108e1:	74 02                	je     c00108e5 <SysShutdown(regs*)+0x56>
c00108e3:	ff d0                	call   eax
c00108e5:	31 c0                	xor    eax,eax
c00108e7:	31 d2                	xor    edx,edx
c00108e9:	83 c4 0c             	add    esp,0xc
c00108ec:	c3                   	ret    

c00108ed <SysRealpath(regs*)>:
c00108ed:	83 ec 0c             	sub    esp,0xc
c00108f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00108f7:	85 d2                	test   edx,edx
c00108f9:	74 07                	je     c0010902 <SysRealpath(regs*)+0x15>
c00108fb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108fe:	85 c0                	test   eax,eax
c0010900:	75 0b                	jne    c001090d <SysRealpath(regs*)+0x20>
c0010902:	b8 01 00 00 00       	mov    eax,0x1
c0010907:	31 d2                	xor    edx,edx
c0010909:	83 c4 0c             	add    esp,0xc
c001090c:	c3                   	ret    
c001090d:	51                   	push   ecx
c001090e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010914:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010917:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001091d:	51                   	push   ecx
c001091e:	52                   	push   edx
c001091f:	50                   	push   eax
c0010920:	e8 d7 9f ff ff       	call   c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)>
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	31 c0                	xor    eax,eax
c001092a:	31 d2                	xor    edx,edx
c001092c:	83 c4 0c             	add    esp,0xc
c001092f:	c3                   	ret    

c0010930 <SysReadDir(regs*)>:
c0010930:	53                   	push   ebx
c0010931:	83 ec 18             	sub    esp,0x18
c0010934:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001093b:	83 f8 02             	cmp    eax,0x2
c001093e:	76 61                	jbe    c00109a1 <SysReadDir(regs*)+0x71>
c0010940:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010947:	77 49                	ja     c0010992 <SysReadDir(regs*)+0x62>
c0010949:	83 ec 0c             	sub    esp,0xc
c001094c:	50                   	push   eax
c001094d:	e8 dd 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010952:	83 c4 10             	add    esp,0x10
c0010955:	85 c0                	test   eax,eax
c0010957:	74 39                	je     c0010992 <SysReadDir(regs*)+0x62>
c0010959:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010961:	83 ec 0c             	sub    esp,0xc
c0010964:	8b 10                	mov    edx,DWORD PTR [eax]
c0010966:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001096a:	51                   	push   ecx
c001096b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001096e:	51                   	push   ecx
c001096f:	6a 00                	push   0x0
c0010971:	68 10 01 00 00       	push   0x110
c0010976:	50                   	push   eax
c0010977:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001097a:	83 c4 20             	add    esp,0x20
c001097d:	85 c0                	test   eax,eax
c001097f:	74 29                	je     c00109aa <SysReadDir(regs*)+0x7a>
c0010981:	83 f8 07             	cmp    eax,0x7
c0010984:	74 1b                	je     c00109a1 <SysReadDir(regs*)+0x71>
c0010986:	b8 02 00 00 00       	mov    eax,0x2
c001098b:	31 d2                	xor    edx,edx
c001098d:	83 c4 18             	add    esp,0x18
c0010990:	5b                   	pop    ebx
c0010991:	c3                   	ret    
c0010992:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010997:	ba ff ff ff ff       	mov    edx,0xffffffff
c001099c:	83 c4 18             	add    esp,0x18
c001099f:	5b                   	pop    ebx
c00109a0:	c3                   	ret    
c00109a1:	b8 01 00 00 00       	mov    eax,0x1
c00109a6:	31 d2                	xor    edx,edx
c00109a8:	eb e3                	jmp    c001098d <SysReadDir(regs*)+0x5d>
c00109aa:	31 c0                	xor    eax,eax
c00109ac:	31 d2                	xor    edx,edx
c00109ae:	eb dd                	jmp    c001098d <SysReadDir(regs*)+0x5d>

c00109b0 <SysIsATTY(regs*)>:
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109ba:	83 f8 02             	cmp    eax,0x2
c00109bd:	76 07                	jbe    c00109c6 <SysIsATTY(regs*)+0x16>
c00109bf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109c4:	75 28                	jne    c00109ee <SysIsATTY(regs*)+0x3e>
c00109c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109d4:	85 c0                	test   eax,eax
c00109d6:	74 26                	je     c00109fe <SysIsATTY(regs*)+0x4e>
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	8b 10                	mov    edx,DWORD PTR [eax]
c00109dd:	50                   	push   eax
c00109de:	ff 12                	call   DWORD PTR [edx]
c00109e0:	31 d2                	xor    edx,edx
c00109e2:	25 ff 00 00 00       	and    eax,0xff
c00109e7:	83 c4 10             	add    esp,0x10
c00109ea:	83 c4 0c             	add    esp,0xc
c00109ed:	c3                   	ret    
c00109ee:	83 ec 0c             	sub    esp,0xc
c00109f1:	50                   	push   eax
c00109f2:	e8 38 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	85 c0                	test   eax,eax
c00109fc:	75 da                	jne    c00109d8 <SysIsATTY(regs*)+0x28>
c00109fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a08:	83 c4 0c             	add    esp,0xc
c0010a0b:	c3                   	ret    

c0010a0c <SysSeek(regs*)>:
c0010a0c:	53                   	push   ebx
c0010a0d:	83 ec 08             	sub    esp,0x8
c0010a10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a17:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a1a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a20:	77 34                	ja     c0010a56 <SysSeek(regs*)+0x4a>
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	50                   	push   eax
c0010a26:	e8 04 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a2b:	83 c4 0c             	add    esp,0xc
c0010a2e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a31:	31 db                	xor    ebx,ebx
c0010a33:	53                   	push   ebx
c0010a34:	51                   	push   ecx
c0010a35:	50                   	push   eax
c0010a36:	e8 e9 a1 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	85 c0                	test   eax,eax
c0010a40:	0f 95 c0             	setne  al
c0010a43:	31 d2                	xor    edx,edx
c0010a45:	25 ff 00 00 00       	and    eax,0xff
c0010a4a:	f7 d8                	neg    eax
c0010a4c:	83 d2 00             	adc    edx,0x0
c0010a4f:	83 c4 08             	add    esp,0x8
c0010a52:	f7 da                	neg    edx
c0010a54:	5b                   	pop    ebx
c0010a55:	c3                   	ret    
c0010a56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a60:	83 c4 08             	add    esp,0x8
c0010a63:	5b                   	pop    ebx
c0010a64:	c3                   	ret    

c0010a65 <SysTell(regs*)>:
c0010a65:	53                   	push   ebx
c0010a66:	83 ec 08             	sub    esp,0x8
c0010a69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a70:	83 f8 02             	cmp    eax,0x2
c0010a73:	76 50                	jbe    c0010ac5 <SysTell(regs*)+0x60>
c0010a75:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a7a:	76 19                	jbe    c0010a95 <SysTell(regs*)+0x30>
c0010a7c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a7f:	31 d2                	xor    edx,edx
c0010a81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a8e:	31 c0                	xor    eax,eax
c0010a90:	83 c4 08             	add    esp,0x8
c0010a93:	5b                   	pop    ebx
c0010a94:	c3                   	ret    
c0010a95:	83 ec 0c             	sub    esp,0xc
c0010a98:	50                   	push   eax
c0010a99:	e8 91 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a9e:	5a                   	pop    edx
c0010a9f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010aa2:	59                   	pop    ecx
c0010aa3:	53                   	push   ebx
c0010aa4:	50                   	push   eax
c0010aa5:	e8 d0 a1 ff ff       	call   c000ac7a <File::tell(unsigned long long*)>
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	85 c0                	test   eax,eax
c0010aaf:	0f 95 c0             	setne  al
c0010ab2:	31 d2                	xor    edx,edx
c0010ab4:	25 ff 00 00 00       	and    eax,0xff
c0010ab9:	f7 d8                	neg    eax
c0010abb:	83 d2 00             	adc    edx,0x0
c0010abe:	83 c4 08             	add    esp,0x8
c0010ac1:	f7 da                	neg    edx
c0010ac3:	5b                   	pop    ebx
c0010ac4:	c3                   	ret    
c0010ac5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010acf:	83 c4 08             	add    esp,0x8
c0010ad2:	5b                   	pop    ebx
c0010ad3:	c3                   	ret    

c0010ad4 <SysSize(regs*)>:
c0010ad4:	53                   	push   ebx
c0010ad5:	83 ec 18             	sub    esp,0x18
c0010ad8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010adc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010adf:	83 f8 02             	cmp    eax,0x2
c0010ae2:	76 56                	jbe    c0010b3a <SysSize(regs*)+0x66>
c0010ae4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ae9:	76 19                	jbe    c0010b04 <SysSize(regs*)+0x30>
c0010aeb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010aee:	31 d2                	xor    edx,edx
c0010af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010af6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010afd:	31 c0                	xor    eax,eax
c0010aff:	83 c4 18             	add    esp,0x18
c0010b02:	5b                   	pop    ebx
c0010b03:	c3                   	ret    
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	50                   	push   eax
c0010b08:	e8 22 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b0d:	83 c4 0c             	add    esp,0xc
c0010b10:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b14:	52                   	push   edx
c0010b15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b18:	52                   	push   edx
c0010b19:	50                   	push   eax
c0010b1a:	e8 f3 a2 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	85 c0                	test   eax,eax
c0010b24:	0f 95 c0             	setne  al
c0010b27:	31 d2                	xor    edx,edx
c0010b29:	25 ff 00 00 00       	and    eax,0xff
c0010b2e:	f7 d8                	neg    eax
c0010b30:	83 d2 00             	adc    edx,0x0
c0010b33:	83 c4 18             	add    esp,0x18
c0010b36:	f7 da                	neg    edx
c0010b38:	5b                   	pop    ebx
c0010b39:	c3                   	ret    
c0010b3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b44:	83 c4 18             	add    esp,0x18
c0010b47:	5b                   	pop    ebx
c0010b48:	c3                   	ret    

c0010b49 <SysSizeFromFilename(regs*)>:
c0010b49:	57                   	push   edi
c0010b4a:	56                   	push   esi
c0010b4b:	53                   	push   ebx
c0010b4c:	83 ec 20             	sub    esp,0x20
c0010b4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b53:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b56:	83 fb 02             	cmp    ebx,0x2
c0010b59:	0f 86 8c 00 00 00    	jbe    c0010beb <SysSizeFromFilename(regs*)+0xa2>
c0010b5f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b65:	76 1b                	jbe    c0010b82 <SysSizeFromFilename(regs*)+0x39>
c0010b67:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b6a:	31 d2                	xor    edx,edx
c0010b6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b79:	83 c4 20             	add    esp,0x20
c0010b7c:	31 c0                	xor    eax,eax
c0010b7e:	5b                   	pop    ebx
c0010b7f:	5e                   	pop    esi
c0010b80:	5f                   	pop    edi
c0010b81:	c3                   	ret    
c0010b82:	83 ec 0c             	sub    esp,0xc
c0010b85:	68 14 01 00 00       	push   0x114
c0010b8a:	e8 2a 6c ff ff       	call   c00077b9 <malloc>
c0010b8f:	83 c4 0c             	add    esp,0xc
c0010b92:	89 c7                	mov    edi,eax
c0010b94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b9c:	50                   	push   eax
c0010b9d:	53                   	push   ebx
c0010b9e:	57                   	push   edi
c0010b9f:	e8 02 9f ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0010ba4:	83 c4 0c             	add    esp,0xc
c0010ba7:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bab:	50                   	push   eax
c0010bac:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010baf:	52                   	push   edx
c0010bb0:	57                   	push   edi
c0010bb1:	e8 5c a2 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	85 ff                	test   edi,edi
c0010bbb:	74 14                	je     c0010bd1 <SysSizeFromFilename(regs*)+0x88>
c0010bbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bc1:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bc3:	83 ec 0c             	sub    esp,0xc
c0010bc6:	57                   	push   edi
c0010bc7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bca:	83 c4 10             	add    esp,0x10
c0010bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd1:	85 c0                	test   eax,eax
c0010bd3:	0f 95 c0             	setne  al
c0010bd6:	31 d2                	xor    edx,edx
c0010bd8:	25 ff 00 00 00       	and    eax,0xff
c0010bdd:	f7 d8                	neg    eax
c0010bdf:	83 d2 00             	adc    edx,0x0
c0010be2:	83 c4 20             	add    esp,0x20
c0010be5:	f7 da                	neg    edx
c0010be7:	5b                   	pop    ebx
c0010be8:	5e                   	pop    esi
c0010be9:	5f                   	pop    edi
c0010bea:	c3                   	ret    
c0010beb:	83 c4 20             	add    esp,0x20
c0010bee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bf3:	5b                   	pop    ebx
c0010bf4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bf9:	5e                   	pop    esi
c0010bfa:	5f                   	pop    edi
c0010bfb:	c3                   	ret    

c0010bfc <SysClose(regs*)>:
c0010bfc:	53                   	push   ebx
c0010bfd:	83 ec 08             	sub    esp,0x8
c0010c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c07:	83 f8 02             	cmp    eax,0x2
c0010c0a:	76 41                	jbe    c0010c4d <SysClose(regs*)+0x51>
c0010c0c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c12:	83 fa 01             	cmp    edx,0x1
c0010c15:	76 2d                	jbe    c0010c44 <SysClose(regs*)+0x48>
c0010c17:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c1c:	77 2f                	ja     c0010c4d <SysClose(regs*)+0x51>
c0010c1e:	83 ec 0c             	sub    esp,0xc
c0010c21:	50                   	push   eax
c0010c22:	e8 08 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c27:	89 c3                	mov    ebx,eax
c0010c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c2c:	e8 93 9f ff ff       	call   c000abc4 <File::close()>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	85 db                	test   ebx,ebx
c0010c36:	74 0c                	je     c0010c44 <SysClose(regs*)+0x48>
c0010c38:	83 ec 0c             	sub    esp,0xc
c0010c3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c3d:	53                   	push   ebx
c0010c3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c41:	83 c4 10             	add    esp,0x10
c0010c44:	31 c0                	xor    eax,eax
c0010c46:	31 d2                	xor    edx,edx
c0010c48:	83 c4 08             	add    esp,0x8
c0010c4b:	5b                   	pop    ebx
c0010c4c:	c3                   	ret    
c0010c4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c57:	83 c4 08             	add    esp,0x8
c0010c5a:	5b                   	pop    ebx
c0010c5b:	c3                   	ret    

c0010c5c <SysOpenDir(regs*)>:
c0010c5c:	57                   	push   edi
c0010c5d:	56                   	push   esi
c0010c5e:	53                   	push   ebx
c0010c5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c66:	85 c0                	test   eax,eax
c0010c68:	0f 84 e7 00 00 00    	je     c0010d55 <SysOpenDir(regs*)+0xf9>
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c74:	56                   	push   esi
c0010c75:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c78:	57                   	push   edi
c0010c79:	50                   	push   eax
c0010c7a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c7d:	50                   	push   eax
c0010c7e:	68 34 e8 01 c0       	push   0xc001e834
c0010c83:	e8 a8 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010c88:	83 c4 18             	add    esp,0x18
c0010c8b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c8e:	50                   	push   eax
c0010c8f:	68 5a e8 01 c0       	push   0xc001e85a
c0010c94:	e8 97 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010c99:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010ca0:	e8 14 6b ff ff       	call   c00077b9 <malloc>
c0010ca5:	83 c4 0c             	add    esp,0xc
c0010ca8:	89 c6                	mov    esi,eax
c0010caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010caf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cb2:	50                   	push   eax
c0010cb3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cb6:	50                   	push   eax
c0010cb7:	56                   	push   esi
c0010cb8:	e8 13 a3 ff ff       	call   c000afd0 <Directory::Directory(char const*, Process*)>
c0010cbd:	c7 04 24 4e f6 01 c0 	mov    DWORD PTR [esp],0xc001f64e
c0010cc4:	e8 67 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010cc9:	83 c4 10             	add    esp,0x10
c0010ccc:	85 f6                	test   esi,esi
c0010cce:	0f 84 8f 00 00 00    	je     c0010d63 <SysOpenDir(regs*)+0x107>
c0010cd4:	83 ec 0c             	sub    esp,0xc
c0010cd7:	68 6f e8 01 c0       	push   0xc001e86f
c0010cdc:	e8 4f 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010ce1:	58                   	pop    eax
c0010ce2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ce5:	5a                   	pop    edx
c0010ce6:	51                   	push   ecx
c0010ce7:	68 73 e8 01 c0       	push   0xc001e873
c0010cec:	e8 3f 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010cf1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf4:	e8 97 a3 ff ff       	call   c000b090 <Directory::open()>
c0010cf9:	c7 04 24 6b d6 01 c0 	mov    DWORD PTR [esp],0xc001d66b
c0010d00:	89 c7                	mov    edi,eax
c0010d02:	e8 29 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	85 ff                	test   edi,edi
c0010d0c:	75 37                	jne    c0010d45 <SysOpenDir(regs*)+0xe9>
c0010d0e:	83 ec 0c             	sub    esp,0xc
c0010d11:	68 84 e8 01 c0       	push   0xc001e884
c0010d16:	e8 15 98 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010d1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d1e:	e8 17 81 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d23:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d26:	89 02                	mov    DWORD PTR [edx],eax
c0010d28:	c1 f8 1f             	sar    eax,0x1f
c0010d2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d2e:	c7 04 24 88 e8 01 c0 	mov    DWORD PTR [esp],0xc001e888
c0010d35:	e8 f6 97 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	31 c0                	xor    eax,eax
c0010d3f:	5b                   	pop    ebx
c0010d40:	31 d2                	xor    edx,edx
c0010d42:	5e                   	pop    esi
c0010d43:	5f                   	pop    edi
c0010d44:	c3                   	ret    
c0010d45:	83 ec 0c             	sub    esp,0xc
c0010d48:	68 80 e8 01 c0       	push   0xc001e880
c0010d4d:	e8 de 97 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0010d52:	83 c4 10             	add    esp,0x10
c0010d55:	5b                   	pop    ebx
c0010d56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d60:	5e                   	pop    esi
c0010d61:	5f                   	pop    edi
c0010d62:	c3                   	ret    
c0010d63:	83 ec 0c             	sub    esp,0xc
c0010d66:	68 6b e8 01 c0       	push   0xc001e86b
c0010d6b:	eb e0                	jmp    c0010d4d <SysOpenDir(regs*)+0xf1>

c0010d6d <SysCloseDir(regs*)>:
c0010d6d:	53                   	push   ebx
c0010d6e:	83 ec 08             	sub    esp,0x8
c0010d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d78:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d7b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d81:	77 2f                	ja     c0010db2 <SysCloseDir(regs*)+0x45>
c0010d83:	83 ec 0c             	sub    esp,0xc
c0010d86:	50                   	push   eax
c0010d87:	e8 a3 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d8c:	89 c3                	mov    ebx,eax
c0010d8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d91:	e8 56 a3 ff ff       	call   c000b0ec <Directory::close()>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	85 db                	test   ebx,ebx
c0010d9b:	74 0c                	je     c0010da9 <SysCloseDir(regs*)+0x3c>
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010da2:	53                   	push   ebx
c0010da3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	31 c0                	xor    eax,eax
c0010dab:	31 d2                	xor    edx,edx
c0010dad:	83 c4 08             	add    esp,0x8
c0010db0:	5b                   	pop    ebx
c0010db1:	c3                   	ret    
c0010db2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010db7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dbc:	83 c4 08             	add    esp,0x8
c0010dbf:	5b                   	pop    ebx
c0010dc0:	c3                   	ret    

c0010dc1 <SysMakeDir(regs*)>:
c0010dc1:	56                   	push   esi
c0010dc2:	53                   	push   ebx
c0010dc3:	83 ec 10             	sub    esp,0x10
c0010dc6:	68 14 01 00 00       	push   0x114
c0010dcb:	e8 e9 69 ff ff       	call   c00077b9 <malloc>
c0010dd0:	83 c4 0c             	add    esp,0xc
c0010dd3:	89 c3                	mov    ebx,eax
c0010dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dda:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010ddd:	56                   	push   esi
c0010dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010de2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010de5:	50                   	push   eax
c0010de6:	53                   	push   ebx
c0010de7:	e8 e4 a1 ff ff       	call   c000afd0 <Directory::Directory(char const*, Process*)>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	85 db                	test   ebx,ebx
c0010df1:	74 32                	je     c0010e25 <SysMakeDir(regs*)+0x64>
c0010df3:	83 ec 0c             	sub    esp,0xc
c0010df6:	53                   	push   ebx
c0010df7:	e8 74 a4 ff ff       	call   c000b270 <Directory::create()>
c0010dfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dff:	89 c6                	mov    esi,eax
c0010e01:	e8 e6 a2 ff ff       	call   c000b0ec <Directory::close()>
c0010e06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	31 c0                	xor    eax,eax
c0010e13:	59                   	pop    ecx
c0010e14:	85 f6                	test   esi,esi
c0010e16:	5b                   	pop    ebx
c0010e17:	0f 95 c0             	setne  al
c0010e1a:	5e                   	pop    esi
c0010e1b:	31 d2                	xor    edx,edx
c0010e1d:	f7 d8                	neg    eax
c0010e1f:	83 d2 00             	adc    edx,0x0
c0010e22:	f7 da                	neg    edx
c0010e24:	c3                   	ret    
c0010e25:	59                   	pop    ecx
c0010e26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e30:	5b                   	pop    ebx
c0010e31:	5e                   	pop    esi
c0010e32:	c3                   	ret    

c0010e33 <SysWait(regs*)>:
c0010e33:	83 ec 10             	sub    esp,0x10
c0010e36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e3a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e3d:	52                   	push   edx
c0010e3e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e41:	51                   	push   ecx
c0010e42:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e45:	50                   	push   eax
c0010e46:	e8 89 2b 00 00       	call   c00139d4 <waitTask(int, int*, int)>
c0010e4b:	83 c4 1c             	add    esp,0x1c
c0010e4e:	99                   	cdq    
c0010e4f:	c3                   	ret    

c0010e50 <SysNotImpl(regs*)>:
c0010e50:	83 ec 18             	sub    esp,0x18
c0010e53:	68 8c e8 01 c0       	push   0xc001e88c
c0010e58:	e8 56 f3 ff ff       	call   c00101b3 <KePanic(char const*)>
c0010e5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e62:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e67:	83 c4 1c             	add    esp,0x1c
c0010e6a:	c3                   	ret    

c0010e6b <SysPanic(regs*)>:
c0010e6b:	83 ec 18             	sub    esp,0x18
c0010e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e72:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e75:	50                   	push   eax
c0010e76:	e8 38 f3 ff ff       	call   c00101b3 <KePanic(char const*)>
c0010e7b:	b8 01 00 00 00       	mov    eax,0x1
c0010e80:	31 d2                	xor    edx,edx
c0010e82:	83 c4 1c             	add    esp,0x1c
c0010e85:	c3                   	ret    

c0010e86 <SysRmdir(regs*)>:
c0010e86:	56                   	push   esi
c0010e87:	53                   	push   ebx
c0010e88:	83 ec 20             	sub    esp,0x20
c0010e8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e8f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010e92:	68 14 01 00 00       	push   0x114
c0010e97:	e8 1d 69 ff ff       	call   c00077b9 <malloc>
c0010e9c:	83 c4 0c             	add    esp,0xc
c0010e9f:	89 c3                	mov    ebx,eax
c0010ea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ea6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ea9:	50                   	push   eax
c0010eaa:	56                   	push   esi
c0010eab:	53                   	push   ebx
c0010eac:	e8 f5 9b ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0010eb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010eb4:	e8 25 9e ff ff       	call   c000acde <File::unlink()>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	85 db                	test   ebx,ebx
c0010ebe:	74 14                	je     c0010ed4 <SysRmdir(regs*)+0x4e>
c0010ec0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ec4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	53                   	push   ebx
c0010eca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ecd:	83 c4 10             	add    esp,0x10
c0010ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ed4:	85 c0                	test   eax,eax
c0010ed6:	0f 95 c0             	setne  al
c0010ed9:	31 d2                	xor    edx,edx
c0010edb:	25 ff 00 00 00       	and    eax,0xff
c0010ee0:	f7 d8                	neg    eax
c0010ee2:	83 d2 00             	adc    edx,0x0
c0010ee5:	83 c4 14             	add    esp,0x14
c0010ee8:	f7 da                	neg    edx
c0010eea:	5b                   	pop    ebx
c0010eeb:	5e                   	pop    esi
c0010eec:	c3                   	ret    

c0010eed <SysUnlink(regs*)>:
c0010eed:	56                   	push   esi
c0010eee:	53                   	push   ebx
c0010eef:	83 ec 20             	sub    esp,0x20
c0010ef2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ef6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ef9:	68 14 01 00 00       	push   0x114
c0010efe:	e8 b6 68 ff ff       	call   c00077b9 <malloc>
c0010f03:	83 c4 0c             	add    esp,0xc
c0010f06:	89 c3                	mov    ebx,eax
c0010f08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f10:	50                   	push   eax
c0010f11:	56                   	push   esi
c0010f12:	53                   	push   ebx
c0010f13:	e8 8e 9b ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0010f18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f1b:	e8 be 9d ff ff       	call   c000acde <File::unlink()>
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	85 db                	test   ebx,ebx
c0010f25:	74 14                	je     c0010f3b <SysUnlink(regs*)+0x4e>
c0010f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f2d:	83 ec 0c             	sub    esp,0xc
c0010f30:	53                   	push   ebx
c0010f31:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f3b:	85 c0                	test   eax,eax
c0010f3d:	0f 95 c0             	setne  al
c0010f40:	31 d2                	xor    edx,edx
c0010f42:	25 ff 00 00 00       	and    eax,0xff
c0010f47:	f7 d8                	neg    eax
c0010f49:	83 d2 00             	adc    edx,0x0
c0010f4c:	83 c4 14             	add    esp,0x14
c0010f4f:	f7 da                	neg    edx
c0010f51:	5b                   	pop    ebx
c0010f52:	5e                   	pop    esi
c0010f53:	c3                   	ret    

c0010f54 <SysGetArgv(regs*)>:
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f5b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f5e:	85 c0                	test   eax,eax
c0010f60:	78 2c                	js     c0010f8e <SysGetArgv(regs*)+0x3a>
c0010f62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f68:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f6b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f71:	7d 1b                	jge    c0010f8e <SysGetArgv(regs*)+0x3a>
c0010f73:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f7a:	85 c0                	test   eax,eax
c0010f7c:	74 18                	je     c0010f96 <SysGetArgv(regs*)+0x42>
c0010f7e:	83 ec 08             	sub    esp,0x8
c0010f81:	50                   	push   eax
c0010f82:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f85:	50                   	push   eax
c0010f86:	e8 75 f6 fe ff       	call   c0000600 <strcpy>
c0010f8b:	83 c4 10             	add    esp,0x10
c0010f8e:	31 c0                	xor    eax,eax
c0010f90:	31 d2                	xor    edx,edx
c0010f92:	83 c4 0c             	add    esp,0xc
c0010f95:	c3                   	ret    
c0010f96:	b8 01 00 00 00       	mov    eax,0x1
c0010f9b:	31 d2                	xor    edx,edx
c0010f9d:	83 c4 0c             	add    esp,0xc
c0010fa0:	c3                   	ret    

c0010fa1 <SysUSleep(regs*)>:
c0010fa1:	83 ec 1c             	sub    esp,0x1c
c0010fa4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fa8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fab:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fae:	6a 00                	push   0x0
c0010fb0:	6a 64                	push   0x64
c0010fb2:	52                   	push   edx
c0010fb3:	50                   	push   eax
c0010fb4:	e8 47 b1 00 00       	call   c001c100 <__udivdi3>
c0010fb9:	83 c4 14             	add    esp,0x14
c0010fbc:	50                   	push   eax
c0010fbd:	e8 e6 2a 00 00       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c0010fc2:	31 c0                	xor    eax,eax
c0010fc4:	31 d2                	xor    edx,edx
c0010fc6:	83 c4 1c             	add    esp,0x1c
c0010fc9:	c3                   	ret    

c0010fca <SysSpawn(regs*)>:
c0010fca:	56                   	push   esi
c0010fcb:	53                   	push   ebx
c0010fcc:	50                   	push   eax
c0010fcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fd1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fd4:	85 c0                	test   eax,eax
c0010fd6:	75 08                	jne    c0010fe0 <SysSpawn(regs*)+0x16>
c0010fd8:	59                   	pop    ecx
c0010fd9:	31 c0                	xor    eax,eax
c0010fdb:	31 d2                	xor    edx,edx
c0010fdd:	5b                   	pop    ebx
c0010fde:	5e                   	pop    esi
c0010fdf:	c3                   	ret    
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	68 24 07 00 00       	push   0x724
c0010fe8:	e8 cc 67 ff ff       	call   c00077b9 <malloc>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	89 c6                	mov    esi,eax
c0010ff2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ff5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ff8:	85 c0                	test   eax,eax
c0010ffa:	75 33                	jne    c001102f <SysSpawn(regs*)+0x65>
c0010ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011001:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011004:	52                   	push   edx
c0011005:	50                   	push   eax
c0011006:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011009:	53                   	push   ebx
c001100a:	56                   	push   esi
c001100b:	e8 44 21 00 00       	call   c0013154 <Process::Process(char const*, Process*, char**)>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001101a:	75 bc                	jne    c0010fd8 <SysSpawn(regs*)+0xe>
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	56                   	push   esi
c0011020:	e8 5b 26 00 00       	call   c0013680 <Process::createUserThread()>
c0011025:	8b 06                	mov    eax,DWORD PTR [esi]
c0011027:	83 c4 10             	add    esp,0x10
c001102a:	99                   	cdq    
c001102b:	59                   	pop    ecx
c001102c:	5b                   	pop    ebx
c001102d:	5e                   	pop    esi
c001102e:	c3                   	ret    
c001102f:	31 c0                	xor    eax,eax
c0011031:	eb d1                	jmp    c0011004 <SysSpawn(regs*)+0x3a>

c0011033 <SysGetEnv(regs*)>:
c0011033:	57                   	push   edi
c0011034:	56                   	push   esi
c0011035:	53                   	push   ebx
c0011036:	83 ec 1c             	sub    esp,0x1c
c0011039:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001103d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011042:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011045:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011048:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001104b:	50                   	push   eax
c001104c:	e8 1a f0 ff ff       	call   c001006b <Krnl::getProcessTotalEnvCount(Process*)>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	39 c7                	cmp    edi,eax
c0011056:	7c 14                	jl     c001106c <SysGetEnv(regs*)+0x39>
c0011058:	85 f6                	test   esi,esi
c001105a:	75 0b                	jne    c0011067 <SysGetEnv(regs*)+0x34>
c001105c:	83 c4 10             	add    esp,0x10
c001105f:	31 c0                	xor    eax,eax
c0011061:	5b                   	pop    ebx
c0011062:	31 d2                	xor    edx,edx
c0011064:	5e                   	pop    esi
c0011065:	5f                   	pop    edi
c0011066:	c3                   	ret    
c0011067:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001106a:	eb f0                	jmp    c001105c <SysGetEnv(regs*)+0x29>
c001106c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011070:	52                   	push   edx
c0011071:	57                   	push   edi
c0011072:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011078:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001107b:	51                   	push   ecx
c001107c:	50                   	push   eax
c001107d:	e8 09 f0 ff ff       	call   c001008b <Krnl::getProcessEnvPair(Process*, int)>
c0011082:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011085:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011089:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001108d:	83 c4 0c             	add    esp,0xc
c0011090:	85 db                	test   ebx,ebx
c0011092:	75 23                	jne    c00110b7 <SysGetEnv(regs*)+0x84>
c0011094:	83 ec 0c             	sub    esp,0xc
c0011097:	50                   	push   eax
c0011098:	e8 a3 f4 fe ff       	call   c0000540 <strlen>
c001109d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110a0:	89 c3                	mov    ebx,eax
c00110a2:	e8 99 f4 fe ff       	call   c0000540 <strlen>
c00110a7:	31 d2                	xor    edx,edx
c00110a9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110ad:	83 c4 10             	add    esp,0x10
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	5b                   	pop    ebx
c00110b4:	5e                   	pop    esi
c00110b5:	5f                   	pop    edi
c00110b6:	c3                   	ret    
c00110b7:	83 ec 08             	sub    esp,0x8
c00110ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110bd:	50                   	push   eax
c00110be:	56                   	push   esi
c00110bf:	e8 3c f5 fe ff       	call   c0000600 <strcpy>
c00110c4:	58                   	pop    eax
c00110c5:	5a                   	pop    edx
c00110c6:	68 a6 e8 01 c0       	push   0xc001e8a6
c00110cb:	56                   	push   esi
c00110cc:	e8 ef f6 fe ff       	call   c00007c0 <strcat>
c00110d1:	59                   	pop    ecx
c00110d2:	5b                   	pop    ebx
c00110d3:	57                   	push   edi
c00110d4:	56                   	push   esi
c00110d5:	e8 e6 f6 fe ff       	call   c00007c0 <strcat>
c00110da:	83 c4 10             	add    esp,0x10
c00110dd:	e9 7a ff ff ff       	jmp    c001105c <SysGetEnv(regs*)+0x29>

c00110e2 <SysSetFatAttrib(regs*)>:
c00110e2:	57                   	push   edi
c00110e3:	56                   	push   esi
c00110e4:	53                   	push   ebx
c00110e5:	83 ec 1c             	sub    esp,0x1c
c00110e8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00110ec:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00110ef:	68 14 01 00 00       	push   0x114
c00110f4:	e8 c0 66 ff ff       	call   c00077b9 <malloc>
c00110f9:	83 c4 0c             	add    esp,0xc
c00110fc:	89 c3                	mov    ebx,eax
c00110fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011103:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011106:	50                   	push   eax
c0011107:	57                   	push   edi
c0011108:	53                   	push   ebx
c0011109:	e8 98 99 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c001110e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011111:	83 c4 0c             	add    esp,0xc
c0011114:	0f b6 d4             	movzx  edx,ah
c0011117:	25 ff 00 00 00       	and    eax,0xff
c001111c:	52                   	push   edx
c001111d:	50                   	push   eax
c001111e:	53                   	push   ebx
c001111f:	e8 54 9c ff ff       	call   c000ad78 <File::chfatattr(unsigned char, unsigned char)>
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	85 db                	test   ebx,ebx
c0011129:	74 14                	je     c001113f <SysSetFatAttrib(regs*)+0x5d>
c001112b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001112f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011131:	83 ec 0c             	sub    esp,0xc
c0011134:	53                   	push   ebx
c0011135:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001113f:	85 c0                	test   eax,eax
c0011141:	0f 95 c0             	setne  al
c0011144:	31 d2                	xor    edx,edx
c0011146:	25 ff 00 00 00       	and    eax,0xff
c001114b:	f7 d8                	neg    eax
c001114d:	83 d2 00             	adc    edx,0x0
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	f7 da                	neg    edx
c0011155:	5b                   	pop    ebx
c0011156:	5e                   	pop    esi
c0011157:	5f                   	pop    edi
c0011158:	c3                   	ret    

c0011159 <SysPipe(regs*)>:
c0011159:	57                   	push   edi
c001115a:	56                   	push   esi
c001115b:	53                   	push   ebx
c001115c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011160:	83 ec 0c             	sub    esp,0xc
c0011163:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011166:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011169:	6a 20                	push   0x20
c001116b:	e8 49 66 ff ff       	call   c00077b9 <malloc>
c0011170:	89 c3                	mov    ebx,eax
c0011172:	58                   	pop    eax
c0011173:	5a                   	pop    edx
c0011174:	68 00 50 00 00       	push   0x5000
c0011179:	53                   	push   ebx
c001117a:	e8 3f 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c001117f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011182:	e8 b3 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011187:	89 07                	mov    DWORD PTR [edi],eax
c0011189:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001118c:	e8 a9 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011191:	83 c4 10             	add    esp,0x10
c0011194:	89 06                	mov    DWORD PTR [esi],eax
c0011196:	31 d2                	xor    edx,edx
c0011198:	5b                   	pop    ebx
c0011199:	31 c0                	xor    eax,eax
c001119b:	5e                   	pop    esi
c001119c:	5f                   	pop    edi
c001119d:	c3                   	ret    

c001119e <SysGetUnixTime(regs*)>:
c001119e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00111a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111ad:	e9 04 a3 ff ff       	jmp    c000b4b6 <Clock::timeInSecondsLocal()>

c00111b2 <string_ends_with(char const*, char const*)>:
c00111b2:	57                   	push   edi
c00111b3:	56                   	push   esi
c00111b4:	53                   	push   ebx
c00111b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111bd:	83 ec 0c             	sub    esp,0xc
c00111c0:	53                   	push   ebx
c00111c1:	e8 7a f3 fe ff       	call   c0000540 <strlen>
c00111c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111c9:	89 c6                	mov    esi,eax
c00111cb:	e8 70 f3 fe ff       	call   c0000540 <strlen>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	39 c6                	cmp    esi,eax
c00111d5:	7d 06                	jge    c00111dd <string_ends_with(char const*, char const*)+0x2b>
c00111d7:	5b                   	pop    ebx
c00111d8:	31 c0                	xor    eax,eax
c00111da:	5e                   	pop    esi
c00111db:	5f                   	pop    edi
c00111dc:	c3                   	ret    
c00111dd:	83 ec 08             	sub    esp,0x8
c00111e0:	29 c6                	sub    esi,eax
c00111e2:	57                   	push   edi
c00111e3:	01 f3                	add    ebx,esi
c00111e5:	53                   	push   ebx
c00111e6:	e8 f5 f4 fe ff       	call   c00006e0 <strcmp>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	85 c0                	test   eax,eax
c00111f0:	5b                   	pop    ebx
c00111f1:	0f 94 c0             	sete   al
c00111f4:	5e                   	pop    esi
c00111f5:	25 ff 00 00 00       	and    eax,0xff
c00111fa:	5f                   	pop    edi
c00111fb:	c3                   	ret    

c00111fc <SysOpen(regs*)>:
c00111fc:	56                   	push   esi
c00111fd:	53                   	push   ebx
c00111fe:	81 ec 04 01 00 00    	sub    esp,0x104
c0011204:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001120b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001120e:	85 d2                	test   edx,edx
c0011210:	0f 84 cc 01 00 00    	je     c00113e2 <SysOpen(regs*)+0x1e6>
c0011216:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011219:	85 c0                	test   eax,eax
c001121b:	0f 84 c1 01 00 00    	je     c00113e2 <SysOpen(regs*)+0x1e6>
c0011221:	83 ec 08             	sub    esp,0x8
c0011224:	50                   	push   eax
c0011225:	68 a8 e8 01 c0       	push   0xc001e8a8
c001122a:	e8 01 93 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001122f:	83 c4 0c             	add    esp,0xc
c0011232:	68 b5 e8 01 c0       	push   0xc001e8b5
c0011237:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001123a:	50                   	push   eax
c001123b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001123f:	56                   	push   esi
c0011240:	e8 b7 96 ff ff       	call   c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)>
c0011245:	89 34 24             	mov    DWORD PTR [esp],esi
c0011248:	e8 f3 f2 fe ff       	call   c0000540 <strlen>
c001124d:	83 c4 10             	add    esp,0x10
c0011250:	48                   	dec    eax
c0011251:	74 1d                	je     c0011270 <SysOpen(regs*)+0x74>
c0011253:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011256:	eb 0f                	jmp    c0011267 <SysOpen(regs*)+0x6b>
c0011258:	80 fa 3a             	cmp    dl,0x3a
c001125b:	74 0f                	je     c001126c <SysOpen(regs*)+0x70>
c001125d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011261:	48                   	dec    eax
c0011262:	74 0c                	je     c0011270 <SysOpen(regs*)+0x74>
c0011264:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011267:	80 fa 2e             	cmp    dl,0x2e
c001126a:	75 ec                	jne    c0011258 <SysOpen(regs*)+0x5c>
c001126c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011270:	83 ec 08             	sub    esp,0x8
c0011273:	68 b9 e8 01 c0       	push   0xc001e8b9
c0011278:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001127b:	50                   	push   eax
c001127c:	e8 31 ff ff ff       	call   c00111b2 <string_ends_with(char const*, char const*)>
c0011281:	83 c4 10             	add    esp,0x10
c0011284:	85 c0                	test   eax,eax
c0011286:	74 1d                	je     c00112a5 <SysOpen(regs*)+0xa9>
c0011288:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001128b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011291:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011298:	81 c4 04 01 00 00    	add    esp,0x104
c001129e:	31 c0                	xor    eax,eax
c00112a0:	31 d2                	xor    edx,edx
c00112a2:	5b                   	pop    ebx
c00112a3:	5e                   	pop    esi
c00112a4:	c3                   	ret    
c00112a5:	83 ec 08             	sub    esp,0x8
c00112a8:	68 be e8 01 c0       	push   0xc001e8be
c00112ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112b0:	50                   	push   eax
c00112b1:	e8 fc fe ff ff       	call   c00111b2 <string_ends_with(char const*, char const*)>
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	85 c0                	test   eax,eax
c00112bb:	75 cb                	jne    c0011288 <SysOpen(regs*)+0x8c>
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	68 ba e8 01 c0       	push   0xc001e8ba
c00112c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112c8:	50                   	push   eax
c00112c9:	e8 12 f4 fe ff       	call   c00006e0 <strcmp>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	85 c0                	test   eax,eax
c00112d3:	74 b3                	je     c0011288 <SysOpen(regs*)+0x8c>
c00112d5:	83 ec 08             	sub    esp,0x8
c00112d8:	68 b9 e8 01 c0       	push   0xc001e8b9
c00112dd:	56                   	push   esi
c00112de:	e8 cf fe ff ff       	call   c00111b2 <string_ends_with(char const*, char const*)>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	85 c0                	test   eax,eax
c00112e8:	75 9e                	jne    c0011288 <SysOpen(regs*)+0x8c>
c00112ea:	83 ec 08             	sub    esp,0x8
c00112ed:	68 c3 e8 01 c0       	push   0xc001e8c3
c00112f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112f5:	50                   	push   eax
c00112f6:	e8 b7 fe ff ff       	call   c00111b2 <string_ends_with(char const*, char const*)>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	85 c0                	test   eax,eax
c0011300:	0f 85 ef 00 00 00    	jne    c00113f5 <SysOpen(regs*)+0x1f9>
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	68 c8 e8 01 c0       	push   0xc001e8c8
c001130e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011311:	50                   	push   eax
c0011312:	e8 9b fe ff ff       	call   c00111b2 <string_ends_with(char const*, char const*)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	85 c0                	test   eax,eax
c001131c:	0f 85 d3 00 00 00    	jne    c00113f5 <SysOpen(regs*)+0x1f9>
c0011322:	83 ec 08             	sub    esp,0x8
c0011325:	68 c4 e8 01 c0       	push   0xc001e8c4
c001132a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001132d:	51                   	push   ecx
c001132e:	e8 ad f3 fe ff       	call   c00006e0 <strcmp>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	85 c0                	test   eax,eax
c0011338:	0f 84 b7 00 00 00    	je     c00113f5 <SysOpen(regs*)+0x1f9>
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	68 c3 e8 01 c0       	push   0xc001e8c3
c0011346:	56                   	push   esi
c0011347:	e8 66 fe ff ff       	call   c00111b2 <string_ends_with(char const*, char const*)>
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	85 c0                	test   eax,eax
c0011351:	0f 85 9e 00 00 00    	jne    c00113f5 <SysOpen(regs*)+0x1f9>
c0011357:	83 ec 0c             	sub    esp,0xc
c001135a:	68 14 01 00 00       	push   0x114
c001135f:	e8 55 64 ff ff       	call   c00077b9 <malloc>
c0011364:	83 c4 0c             	add    esp,0xc
c0011367:	89 c6                	mov    esi,eax
c0011369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001136e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011371:	50                   	push   eax
c0011372:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011375:	52                   	push   edx
c0011376:	56                   	push   esi
c0011377:	e8 2a 97 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c001137c:	83 c4 10             	add    esp,0x10
c001137f:	85 f6                	test   esi,esi
c0011381:	74 5f                	je     c00113e2 <SysOpen(regs*)+0x1e6>
c0011383:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011386:	89 d0                	mov    eax,edx
c0011388:	25 ff 00 00 00       	and    eax,0xff
c001138d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011390:	89 d0                	mov    eax,edx
c0011392:	83 e0 01             	and    eax,0x1
c0011395:	f6 c2 02             	test   dl,0x2
c0011398:	74 03                	je     c001139d <SysOpen(regs*)+0x1a1>
c001139a:	83 c8 02             	or     eax,0x2
c001139d:	f6 c2 04             	test   dl,0x4
c00113a0:	74 03                	je     c00113a5 <SysOpen(regs*)+0x1a9>
c00113a2:	83 c8 04             	or     eax,0x4
c00113a5:	f6 c2 08             	test   dl,0x8
c00113a8:	74 03                	je     c00113ad <SysOpen(regs*)+0x1b1>
c00113aa:	83 c8 0a             	or     eax,0xa
c00113ad:	83 e2 10             	and    edx,0x10
c00113b0:	74 03                	je     c00113b5 <SysOpen(regs*)+0x1b9>
c00113b2:	83 c8 12             	or     eax,0x12
c00113b5:	83 ec 08             	sub    esp,0x8
c00113b8:	50                   	push   eax
c00113b9:	56                   	push   esi
c00113ba:	e8 a7 97 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	85 c0                	test   eax,eax
c00113c4:	75 1c                	jne    c00113e2 <SysOpen(regs*)+0x1e6>
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	56                   	push   esi
c00113ca:	e8 6b 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00113cf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	89 02                	mov    DWORD PTR [edx],eax
c00113d7:	c1 f8 1f             	sar    eax,0x1f
c00113da:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113dd:	e9 b6 fe ff ff       	jmp    c0011298 <SysOpen(regs*)+0x9c>
c00113e2:	81 c4 04 01 00 00    	add    esp,0x104
c00113e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113f2:	5b                   	pop    ebx
c00113f3:	5e                   	pop    esi
c00113f4:	c3                   	ret    
c00113f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113f8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00113fe:	e9 8e fe ff ff       	jmp    c0011291 <SysOpen(regs*)+0x95>

c0011403 <KeSystemCall(regs*, void*)>:
c0011403:	53                   	push   ebx
c0011404:	83 ec 10             	sub    esp,0x10
c0011407:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001140b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001140e:	68 cd e8 01 c0       	push   0xc001e8cd
c0011413:	e8 18 91 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0011418:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	83 f8 32             	cmp    eax,0x32
c0011421:	77 16                	ja     c0011439 <KeSystemCall(regs*, void*)+0x36>
c0011423:	8b 14 85 60 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05a0]
c001142a:	85 d2                	test   edx,edx
c001142c:	74 0b                	je     c0011439 <KeSystemCall(regs*, void*)+0x36>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	53                   	push   ebx
c0011432:	ff d2                	call   edx
c0011434:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011437:	eb 0d                	jmp    c0011446 <KeSystemCall(regs*, void*)+0x43>
c0011439:	52                   	push   edx
c001143a:	52                   	push   edx
c001143b:	50                   	push   eax
c001143c:	68 dd e8 01 c0       	push   0xc001e8dd
c0011441:	e8 ea 90 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0011446:	83 c4 10             	add    esp,0x10
c0011449:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001144e:	31 d2                	xor    edx,edx
c0011450:	83 c4 08             	add    esp,0x8
c0011453:	5b                   	pop    ebx
c0011454:	c3                   	ret    

c0011455 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011455:	55                   	push   ebp
c0011456:	57                   	push   edi
c0011457:	56                   	push   esi
c0011458:	53                   	push   ebx
c0011459:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001145f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011466:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011468:	8d 6e 01             	lea    ebp,[esi+0x1]
c001146b:	80 fb 40             	cmp    bl,0x40
c001146e:	75 1b                	jne    c001148b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011470:	8a 16                	mov    dl,BYTE PTR [esi]
c0011472:	84 d2                	test   dl,dl
c0011474:	0f 84 f1 00 00 00    	je     c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001147a:	8d 46 01             	lea    eax,[esi+0x1]
c001147d:	80 fa 3a             	cmp    dl,0x3a
c0011480:	74 04                	je     c0011486 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011482:	89 c6                	mov    esi,eax
c0011484:	eb ea                	jmp    c0011470 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011486:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011489:	89 c6                	mov    esi,eax
c001148b:	50                   	push   eax
c001148c:	6a 40                	push   0x40
c001148e:	6a 00                	push   0x0
c0011490:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011494:	50                   	push   eax
c0011495:	e8 36 f0 fe ff       	call   c00004d0 <memset>
c001149a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114a1:	31 c0                	xor    eax,eax
c00114a3:	83 c4 10             	add    esp,0x10
c00114a6:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114a8:	84 c9                	test   cl,cl
c00114aa:	0f 84 bb 00 00 00    	je     c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114b0:	3d c7 00 00 00       	cmp    eax,0xc7
c00114b5:	0f 8f b0 00 00 00    	jg     c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114bb:	80 f9 0a             	cmp    cl,0xa
c00114be:	0f 85 98 00 00 00    	jne    c001155c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114c4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114c9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114cd:	a8 df                	test   al,0xdf
c00114cf:	0f 94 c1             	sete   cl
c00114d2:	3c 23                	cmp    al,0x23
c00114d4:	0f 94 c2             	sete   dl
c00114d7:	08 d1                	or     cl,dl
c00114d9:	75 4a                	jne    c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114db:	8d 50 f7             	lea    edx,[eax-0x9]
c00114de:	80 fa 01             	cmp    dl,0x1
c00114e1:	76 42                	jbe    c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114e3:	3c 5b                	cmp    al,0x5b
c00114e5:	75 42                	jne    c0011529 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114e7:	80 fb 40             	cmp    bl,0x40
c00114ea:	75 39                	jne    c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114f3:	52                   	push   edx
c00114f4:	e8 47 f0 fe ff       	call   c0000540 <strlen>
c00114f9:	83 c4 10             	add    esp,0x10
c00114fc:	83 f8 3f             	cmp    eax,0x3f
c00114ff:	77 6a                	ja     c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011501:	50                   	push   eax
c0011502:	50                   	push   eax
c0011503:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011507:	52                   	push   edx
c0011508:	8d 54 24 24          	lea    edx,[esp+0x24]
c001150c:	52                   	push   edx
c001150d:	e8 ee f0 fe ff       	call   c0000600 <strcpy>
c0011512:	58                   	pop    eax
c0011513:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011517:	52                   	push   edx
c0011518:	e8 23 f0 fe ff       	call   c0000540 <strlen>
c001151d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011522:	83 c4 10             	add    esp,0x10
c0011525:	31 d2                	xor    edx,edx
c0011527:	eb 3a                	jmp    c0011563 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011529:	80 fb 40             	cmp    bl,0x40
c001152c:	74 06                	je     c0011534 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001152e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011532:	eb 20                	jmp    c0011554 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011534:	50                   	push   eax
c0011535:	50                   	push   eax
c0011536:	55                   	push   ebp
c0011537:	8d 44 24 24          	lea    eax,[esp+0x24]
c001153b:	50                   	push   eax
c001153c:	e8 9f f1 fe ff       	call   c00006e0 <strcmp>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	85 c0                	test   eax,eax
c0011546:	75 dd                	jne    c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011548:	eb e4                	jmp    c001152e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001154a:	8d 50 01             	lea    edx,[eax+0x1]
c001154d:	80 f9 3d             	cmp    cl,0x3d
c0011550:	74 1d                	je     c001156f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011552:	89 d0                	mov    eax,edx
c0011554:	8a 08                	mov    cl,BYTE PTR [eax]
c0011556:	84 c9                	test   cl,cl
c0011558:	75 f0                	jne    c001154a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001155a:	eb 0f                	jmp    c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001155c:	8d 50 01             	lea    edx,[eax+0x1]
c001155f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011563:	47                   	inc    edi
c0011564:	89 d0                	mov    eax,edx
c0011566:	e9 3b ff ff ff       	jmp    c00114a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001156b:	31 c0                	xor    eax,eax
c001156d:	eb 33                	jmp    c00115a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001156f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011573:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011576:	50                   	push   eax
c0011577:	50                   	push   eax
c0011578:	8d 44 24 60          	lea    eax,[esp+0x60]
c001157c:	50                   	push   eax
c001157d:	56                   	push   esi
c001157e:	e8 5d f1 fe ff       	call   c00006e0 <strcmp>
c0011583:	83 c4 10             	add    esp,0x10
c0011586:	85 c0                	test   eax,eax
c0011588:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001158c:	75 97                	jne    c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001158e:	51                   	push   ecx
c001158f:	51                   	push   ecx
c0011590:	52                   	push   edx
c0011591:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011598:	e8 63 f0 fe ff       	call   c0000600 <strcpy>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	b0 01                	mov    al,0x1
c00115a2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115a8:	5b                   	pop    ebx
c00115a9:	5e                   	pop    esi
c00115aa:	5f                   	pop    edi
c00115ab:	5d                   	pop    ebp
c00115ac:	c3                   	ret    

c00115ad <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115ad:	57                   	push   edi
c00115ae:	56                   	push   esi
c00115af:	53                   	push   ebx
c00115b0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115b6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115bd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115c4:	53                   	push   ebx
c00115c5:	e8 76 ef fe ff       	call   c0000540 <strlen>
c00115ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00115cd:	89 c7                	mov    edi,eax
c00115cf:	e8 6c ef fe ff       	call   c0000540 <strlen>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115db:	3d ff 00 00 00       	cmp    eax,0xff
c00115e0:	0f 87 d3 00 00 00    	ja     c00116b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115e6:	57                   	push   edi
c00115e7:	57                   	push   edi
c00115e8:	56                   	push   esi
c00115e9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115ed:	56                   	push   esi
c00115ee:	e8 0d f0 fe ff       	call   c0000600 <strcpy>
c00115f3:	58                   	pop    eax
c00115f4:	5a                   	pop    edx
c00115f5:	68 9a eb 01 c0       	push   0xc001eb9a
c00115fa:	56                   	push   esi
c00115fb:	e8 c0 f1 fe ff       	call   c00007c0 <strcat>
c0011600:	59                   	pop    ecx
c0011601:	5f                   	pop    edi
c0011602:	53                   	push   ebx
c0011603:	56                   	push   esi
c0011604:	e8 b7 f1 fe ff       	call   c00007c0 <strcat>
c0011609:	58                   	pop    eax
c001160a:	5a                   	pop    edx
c001160b:	68 f1 e8 01 c0       	push   0xc001e8f1
c0011610:	56                   	push   esi
c0011611:	e8 aa f1 fe ff       	call   c00007c0 <strcat>
c0011616:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001161d:	e8 97 61 ff ff       	call   c00077b9 <malloc>
c0011622:	83 c4 0c             	add    esp,0xc
c0011625:	89 c3                	mov    ebx,eax
c0011627:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001162d:	56                   	push   esi
c001162e:	50                   	push   eax
c001162f:	e8 72 94 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	85 db                	test   ebx,ebx
c0011639:	74 7e                	je     c00116b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001163b:	51                   	push   ecx
c001163c:	51                   	push   ecx
c001163d:	6a 01                	push   0x1
c001163f:	53                   	push   ebx
c0011640:	e8 21 95 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	85 c0                	test   eax,eax
c001164a:	74 08                	je     c0011654 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001164c:	83 ec 0c             	sub    esp,0xc
c001164f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011651:	53                   	push   ebx
c0011652:	eb 5f                	jmp    c00116b3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011654:	52                   	push   edx
c0011655:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011659:	50                   	push   eax
c001165a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001165e:	50                   	push   eax
c001165f:	53                   	push   ebx
c0011660:	e8 ad 97 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c0011665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	89 c1                	mov    ecx,eax
c001166e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011672:	74 31                	je     c00116a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011674:	83 ec 0c             	sub    esp,0xc
c0011677:	50                   	push   eax
c0011678:	e8 3c 61 ff ff       	call   c00077b9 <malloc>
c001167d:	89 c6                	mov    esi,eax
c001167f:	58                   	pop    eax
c0011680:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011682:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011686:	52                   	push   edx
c0011687:	56                   	push   esi
c0011688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001168c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011690:	53                   	push   ebx
c0011691:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011694:	83 c4 20             	add    esp,0x20
c0011697:	85 c0                	test   eax,eax
c0011699:	75 0a                	jne    c00116a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001169b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001169f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116a3:	74 18                	je     c00116bd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116a5:	83 ec 0c             	sub    esp,0xc
c00116a8:	53                   	push   ebx
c00116a9:	e8 16 95 ff ff       	call   c000abc4 <File::close()>
c00116ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	31 c0                	xor    eax,eax
c00116bb:	eb 3b                	jmp    c00116f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116bd:	83 ec 0c             	sub    esp,0xc
c00116c0:	53                   	push   ebx
c00116c1:	e8 fe 94 ff ff       	call   c000abc4 <File::close()>
c00116c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ce:	83 c4 0c             	add    esp,0xc
c00116d1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116d8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116df:	56                   	push   esi
c00116e0:	e8 70 fd ff ff       	call   c0011455 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00116e8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116ec:	e8 d8 60 ff ff       	call   c00077c9 <free>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116f8:	81 c4 20 01 00 00    	add    esp,0x120
c00116fe:	5b                   	pop    ebx
c00116ff:	5e                   	pop    esi
c0011700:	5f                   	pop    edi
c0011701:	c3                   	ret    

c0011702 <Reg::getLine(char*, char*, char*)>:
c0011702:	57                   	push   edi
c0011703:	56                   	push   esi
c0011704:	53                   	push   ebx
c0011705:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011709:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001170d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011711:	57                   	push   edi
c0011712:	56                   	push   esi
c0011713:	53                   	push   ebx
c0011714:	68 f6 e8 01 c0       	push   0xc001e8f6
c0011719:	e8 8f fe ff ff       	call   c00115ad <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	84 c0                	test   al,al
c0011723:	75 10                	jne    c0011735 <Reg::getLine(char*, char*, char*)+0x33>
c0011725:	57                   	push   edi
c0011726:	56                   	push   esi
c0011727:	53                   	push   ebx
c0011728:	68 1b e9 01 c0       	push   0xc001e91b
c001172d:	e8 7b fe ff ff       	call   c00115ad <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	5b                   	pop    ebx
c0011736:	5e                   	pop    esi
c0011737:	5f                   	pop    edi
c0011738:	c3                   	ret    

c0011739 <Reg::readInt(char*, char*, int*)>:
c0011739:	55                   	push   ebp
c001173a:	57                   	push   edi
c001173b:	56                   	push   esi
c001173c:	53                   	push   ebx
c001173d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011743:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011747:	57                   	push   edi
c0011748:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001174f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011756:	e8 a7 ff ff ff       	call   c0011702 <Reg::getLine(char*, char*, char*)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	84 c0                	test   al,al
c0011760:	0f 84 b3 00 00 00    	je     c0011819 <Reg::readInt(char*, char*, int*)+0xe0>
c0011766:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001176a:	80 fa 2b             	cmp    dl,0x2b
c001176d:	74 0c                	je     c001177b <Reg::readInt(char*, char*, int*)+0x42>
c001176f:	80 fa 2d             	cmp    dl,0x2d
c0011772:	75 0e                	jne    c0011782 <Reg::readInt(char*, char*, int*)+0x49>
c0011774:	ba 01 00 00 00       	mov    edx,0x1
c0011779:	eb 0b                	jmp    c0011786 <Reg::readInt(char*, char*, int*)+0x4d>
c001177b:	ba 01 00 00 00       	mov    edx,0x1
c0011780:	eb 02                	jmp    c0011784 <Reg::readInt(char*, char*, int*)+0x4b>
c0011782:	31 d2                	xor    edx,edx
c0011784:	31 c0                	xor    eax,eax
c0011786:	be 0a 00 00 00       	mov    esi,0xa
c001178b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011790:	75 20                	jne    c00117b2 <Reg::readInt(char*, char*, int*)+0x79>
c0011792:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011796:	80 f9 78             	cmp    cl,0x78
c0011799:	75 0a                	jne    c00117a5 <Reg::readInt(char*, char*, int*)+0x6c>
c001179b:	83 c2 02             	add    edx,0x2
c001179e:	be 10 00 00 00       	mov    esi,0x10
c00117a3:	eb 0d                	jmp    c00117b2 <Reg::readInt(char*, char*, int*)+0x79>
c00117a5:	80 f9 62             	cmp    cl,0x62
c00117a8:	75 08                	jne    c00117b2 <Reg::readInt(char*, char*, int*)+0x79>
c00117aa:	83 c2 02             	add    edx,0x2
c00117ad:	be 02 00 00 00       	mov    esi,0x2
c00117b2:	01 d7                	add    edi,edx
c00117b4:	31 d2                	xor    edx,edx
c00117b6:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117b8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117bc:	80 fb 0d             	cmp    bl,0xd
c00117bf:	0f 94 c3             	sete   bl
c00117c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117c7:	0f 94 c1             	sete   cl
c00117ca:	08 cb                	or     bl,cl
c00117cc:	75 3a                	jne    c0011808 <Reg::readInt(char*, char*, int*)+0xcf>
c00117ce:	0f af d6             	imul   edx,esi
c00117d1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117d6:	83 fe 10             	cmp    esi,0x10
c00117d9:	75 26                	jne    c0011801 <Reg::readInt(char*, char*, int*)+0xc8>
c00117db:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117df:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117e2:	89 e9                	mov    ecx,ebp
c00117e4:	80 f9 05             	cmp    cl,0x5
c00117e7:	77 06                	ja     c00117ef <Reg::readInt(char*, char*, int*)+0xb6>
c00117e9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117ed:	eb 16                	jmp    c0011805 <Reg::readInt(char*, char*, int*)+0xcc>
c00117ef:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117f3:	83 e9 61             	sub    ecx,0x61
c00117f6:	80 f9 05             	cmp    cl,0x5
c00117f9:	77 06                	ja     c0011801 <Reg::readInt(char*, char*, int*)+0xc8>
c00117fb:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00117ff:	eb 04                	jmp    c0011805 <Reg::readInt(char*, char*, int*)+0xcc>
c0011801:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011805:	47                   	inc    edi
c0011806:	eb ae                	jmp    c00117b6 <Reg::readInt(char*, char*, int*)+0x7d>
c0011808:	84 c0                	test   al,al
c001180a:	74 02                	je     c001180e <Reg::readInt(char*, char*, int*)+0xd5>
c001180c:	f7 da                	neg    edx
c001180e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011815:	89 10                	mov    DWORD PTR [eax],edx
c0011817:	88 d8                	mov    al,bl
c0011819:	81 c4 ec 00 00 00    	add    esp,0xec
c001181f:	5b                   	pop    ebx
c0011820:	5e                   	pop    esi
c0011821:	5f                   	pop    edi
c0011822:	5d                   	pop    ebp
c0011823:	c3                   	ret    

c0011824 <Reg::readString(char*, char*, char*, int)>:
c0011824:	57                   	push   edi
c0011825:	56                   	push   esi
c0011826:	53                   	push   ebx
c0011827:	81 ec d4 00 00 00    	sub    esp,0xd4
c001182d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011834:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011838:	57                   	push   edi
c0011839:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011840:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011847:	e8 b6 fe ff ff       	call   c0011702 <Reg::getLine(char*, char*, char*)>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	89 c6                	mov    esi,eax
c0011851:	84 c0                	test   al,al
c0011853:	74 44                	je     c0011899 <Reg::readString(char*, char*, char*, int)+0x75>
c0011855:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001185c:	31 c0                	xor    eax,eax
c001185e:	4a                   	dec    edx
c001185f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011862:	84 c9                	test   cl,cl
c0011864:	74 0f                	je     c0011875 <Reg::readString(char*, char*, char*, int)+0x51>
c0011866:	39 c2                	cmp    edx,eax
c0011868:	7e 0b                	jle    c0011875 <Reg::readString(char*, char*, char*, int)+0x51>
c001186a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001186d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011872:	40                   	inc    eax
c0011873:	eb ea                	jmp    c001185f <Reg::readString(char*, char*, char*, int)+0x3b>
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	53                   	push   ebx
c0011879:	e8 c2 ec fe ff       	call   c0000540 <strlen>
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011886:	75 11                	jne    c0011899 <Reg::readString(char*, char*, char*, int)+0x75>
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	53                   	push   ebx
c001188c:	e8 af ec fe ff       	call   c0000540 <strlen>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011899:	81 c4 d0 00 00 00    	add    esp,0xd0
c001189f:	89 f0                	mov    eax,esi
c00118a1:	5b                   	pop    ebx
c00118a2:	5e                   	pop    esi
c00118a3:	5f                   	pop    edi
c00118a4:	c3                   	ret    

c00118a5 <Reg::readBool(char*, char*, bool*)>:
c00118a5:	83 ec 20             	sub    esp,0x20
c00118a8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118ac:	50                   	push   eax
c00118ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b5:	e8 7f fe ff ff       	call   c0011739 <Reg::readInt(char*, char*, int*)>
c00118ba:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118c3:	0f 95 02             	setne  BYTE PTR [edx]
c00118c6:	83 c4 2c             	add    esp,0x2c
c00118c9:	c3                   	ret    

c00118ca <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118ca:	53                   	push   ebx
c00118cb:	83 ec 1c             	sub    esp,0x1c
c00118ce:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118d2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118d6:	50                   	push   eax
c00118d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118df:	e8 c1 ff ff ff       	call   c00118a5 <Reg::readBool(char*, char*, bool*)>
c00118e4:	83 c4 10             	add    esp,0x10
c00118e7:	84 c0                	test   al,al
c00118e9:	74 04                	je     c00118ef <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118eb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118ef:	88 d8                	mov    al,bl
c00118f1:	83 c4 18             	add    esp,0x18
c00118f4:	5b                   	pop    ebx
c00118f5:	c3                   	ret    

c00118f6 <Reg::readIntWithDefault(char*, char*, int)>:
c00118f6:	53                   	push   ebx
c00118f7:	83 ec 1c             	sub    esp,0x1c
c00118fa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00118fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011902:	50                   	push   eax
c0011903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001190b:	e8 29 fe ff ff       	call   c0011739 <Reg::readInt(char*, char*, int*)>
c0011910:	83 c4 10             	add    esp,0x10
c0011913:	84 c0                	test   al,al
c0011915:	74 04                	je     c001191b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011917:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001191b:	89 d8                	mov    eax,ebx
c001191d:	83 c4 18             	add    esp,0x18
c0011920:	5b                   	pop    ebx
c0011921:	c3                   	ret    

c0011922 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011922:	57                   	push   edi
c0011923:	56                   	push   esi
c0011924:	56                   	push   esi
c0011925:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011929:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001192d:	56                   	push   esi
c001192e:	57                   	push   edi
c001192f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011937:	e8 e8 fe ff ff       	call   c0011824 <Reg::readString(char*, char*, char*, int)>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	84 c0                	test   al,al
c0011941:	75 1a                	jne    c001195d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011943:	51                   	push   ecx
c0011944:	56                   	push   esi
c0011945:	6a 00                	push   0x0
c0011947:	57                   	push   edi
c0011948:	e8 83 eb fe ff       	call   c00004d0 <memset>
c001194d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011950:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011954:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011956:	83 c4 10             	add    esp,0x10
c0011959:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001195d:	89 f8                	mov    eax,edi
c001195f:	5a                   	pop    edx
c0011960:	5e                   	pop    esi
c0011961:	5f                   	pop    edi
c0011962:	c3                   	ret    

c0011963 <SysEject(regs*)>:
c0011963:	83 ec 0c             	sub    esp,0xc
c0011966:	83 ca ff             	or     edx,0xffffffff
c0011969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001196d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011970:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011975:	83 e9 41             	sub    ecx,0x41
c0011978:	83 f9 19             	cmp    ecx,0x19
c001197b:	77 18                	ja     c0011995 <SysEject(regs*)+0x32>
c001197d:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011984:	85 c9                	test   ecx,ecx
c0011986:	74 0d                	je     c0011995 <SysEject(regs*)+0x32>
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	51                   	push   ecx
c001198c:	e8 5d b2 ff ff       	call   c000cbee <LogicalDisk::eject()>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	99                   	cdq    
c0011995:	83 c4 0c             	add    esp,0xc
c0011998:	c3                   	ret    

c0011999 <SysExit(regs*)>:
c0011999:	83 ec 18             	sub    esp,0x18
c001199c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119a3:	e8 24 27 00 00       	call   c00140cc <terminateTask(int)>
c00119a8:	83 c8 ff             	or     eax,0xffffffff
c00119ab:	83 c4 1c             	add    esp,0x1c
c00119ae:	89 c2                	mov    edx,eax
c00119b0:	c3                   	ret    

c00119b1 <SysGetCwd(regs*)>:
c00119b1:	83 ec 10             	sub    esp,0x10
c00119b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119b8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119bb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119c6:	e8 dd 8e ff ff       	call   c000a8a8 <Fs::getcwd(Process*, char*, int)>
c00119cb:	83 c4 1c             	add    esp,0x1c
c00119ce:	99                   	cdq    
c00119cf:	c3                   	ret    

c00119d0 <SysGetPID(regs*)>:
c00119d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00119da:	99                   	cdq    
c00119db:	c3                   	ret    

c00119dc <SysGetRAMData(regs*)>:
c00119dc:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c00119e2:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c00119ec:	99                   	cdq    
c00119ed:	f7 f9                	idiv   ecx
c00119ef:	c1 e0 18             	shl    eax,0x18
c00119f2:	09 c8                	or     eax,ecx
c00119f4:	99                   	cdq    
c00119f5:	c3                   	ret    

c00119f6 <SysGetVGAPtr(regs*)>:
c00119f6:	55                   	push   ebp
c00119f7:	57                   	push   edi
c00119f8:	56                   	push   esi
c00119f9:	53                   	push   ebx
c00119fa:	83 ec 18             	sub    esp,0x18
c00119fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a01:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a04:	e8 c3 21 00 00       	call   c0013bcc <Thr::processFromPID(int)>
c0011a09:	83 c4 10             	add    esp,0x10
c0011a0c:	89 c1                	mov    ecx,eax
c0011a0e:	b8 01 00 00 00       	mov    eax,0x1
c0011a13:	85 c9                	test   ecx,ecx
c0011a15:	74 57                	je     c0011a6e <SysGetVGAPtr(regs*)+0x78>
c0011a17:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a1d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a21:	74 0c                	je     c0011a2f <SysGetVGAPtr(regs*)+0x39>
c0011a23:	83 ec 0c             	sub    esp,0xc
c0011a26:	55                   	push   ebp
c0011a27:	e8 cb 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a32:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a35:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a3c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a42:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a48:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a4b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a4e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a54:	50                   	push   eax
c0011a55:	50                   	push   eax
c0011a56:	68 36 e9 01 c0       	push   0xc001e936
c0011a5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a5e:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a63:	50                   	push   eax
c0011a64:	e8 97 eb fe ff       	call   c0000600 <strcpy>
c0011a69:	83 c4 10             	add    esp,0x10
c0011a6c:	31 c0                	xor    eax,eax
c0011a6e:	83 c4 0c             	add    esp,0xc
c0011a71:	31 d2                	xor    edx,edx
c0011a73:	5b                   	pop    ebx
c0011a74:	5e                   	pop    esi
c0011a75:	5f                   	pop    edi
c0011a76:	5d                   	pop    ebp
c0011a77:	c3                   	ret    

c0011a78 <SysLoadDLL(regs*)>:
c0011a78:	56                   	push   esi
c0011a79:	53                   	push   ebx
c0011a7a:	31 d2                	xor    edx,edx
c0011a7c:	51                   	push   ecx
c0011a7d:	b8 01 00 00 00       	mov    eax,0x1
c0011a82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a86:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a8a:	0f 84 8c 00 00 00    	je     c0011b1c <SysLoadDLL(regs*)+0xa4>
c0011a90:	83 ec 0c             	sub    esp,0xc
c0011a93:	68 14 01 00 00       	push   0x114
c0011a98:	e8 1c 5d ff ff       	call   c00077b9 <malloc>
c0011a9d:	83 c4 0c             	add    esp,0xc
c0011aa0:	89 c3                	mov    ebx,eax
c0011aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011aaa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011aad:	53                   	push   ebx
c0011aae:	e8 f3 8f ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	31 d2                	xor    edx,edx
c0011ab8:	b8 02 00 00 00       	mov    eax,0x2
c0011abd:	85 db                	test   ebx,ebx
c0011abf:	74 5b                	je     c0011b1c <SysLoadDLL(regs*)+0xa4>
c0011ac1:	83 ec 0c             	sub    esp,0xc
c0011ac4:	53                   	push   ebx
c0011ac5:	e8 0a 93 ff ff       	call   c000add4 <File::exists()>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	84 c0                	test   al,al
c0011acf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ad1:	75 11                	jne    c0011ae4 <SysLoadDLL(regs*)+0x6c>
c0011ad3:	83 ec 0c             	sub    esp,0xc
c0011ad6:	53                   	push   ebx
c0011ad7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	b8 03 00 00 00       	mov    eax,0x3
c0011ae2:	eb 36                	jmp    c0011b1a <SysLoadDLL(regs*)+0xa2>
c0011ae4:	83 ec 0c             	sub    esp,0xc
c0011ae7:	53                   	push   ebx
c0011ae8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aeb:	58                   	pop    eax
c0011aec:	5a                   	pop    edx
c0011aed:	6a 00                	push   0x0
c0011aef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011af2:	e8 86 12 00 00       	call   c0012d7d <Thr::loadDLL(char const*, bool)>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	89 c1                	mov    ecx,eax
c0011afc:	31 d2                	xor    edx,edx
c0011afe:	b8 04 00 00 00       	mov    eax,0x4
c0011b03:	85 c9                	test   ecx,ecx
c0011b05:	74 15                	je     c0011b1c <SysLoadDLL(regs*)+0xa4>
c0011b07:	53                   	push   ebx
c0011b08:	53                   	push   ebx
c0011b09:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011b0f:	51                   	push   ecx
c0011b10:	e8 99 14 00 00       	call   c0012fae <Thr::executeDLL(unsigned long, void*)>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	31 c0                	xor    eax,eax
c0011b1a:	31 d2                	xor    edx,edx
c0011b1c:	59                   	pop    ecx
c0011b1d:	5b                   	pop    ebx
c0011b1e:	5e                   	pop    esi
c0011b1f:	c3                   	ret    

c0011b20 <SysRead(regs*)>:
c0011b20:	57                   	push   edi
c0011b21:	56                   	push   esi
c0011b22:	53                   	push   ebx
c0011b23:	83 ec 10             	sub    esp,0x10
c0011b26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b2d:	83 f8 02             	cmp    eax,0x2
c0011b30:	77 10                	ja     c0011b42 <SysRead(regs*)+0x22>
c0011b32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b3a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b40:	eb 0e                	jmp    c0011b50 <SysRead(regs*)+0x30>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	50                   	push   eax
c0011b46:	e8 e4 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	89 c1                	mov    ecx,eax
c0011b50:	83 c8 ff             	or     eax,0xffffffff
c0011b53:	85 c9                	test   ecx,ecx
c0011b55:	89 c2                	mov    edx,eax
c0011b57:	74 28                	je     c0011b81 <SysRead(regs*)+0x61>
c0011b59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b61:	31 ff                	xor    edi,edi
c0011b63:	83 ec 0c             	sub    esp,0xc
c0011b66:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b68:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b6c:	52                   	push   edx
c0011b6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b70:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b73:	57                   	push   edi
c0011b74:	56                   	push   esi
c0011b75:	51                   	push   ecx
c0011b76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b7d:	83 c4 20             	add    esp,0x20
c0011b80:	99                   	cdq    
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	5b                   	pop    ebx
c0011b85:	5e                   	pop    esi
c0011b86:	5f                   	pop    edi
c0011b87:	c3                   	ret    

c0011b88 <SysRegisterSignal(regs*)>:
c0011b88:	83 ec 18             	sub    esp,0x18
c0011b8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b8f:	6a 00                	push   0x0
c0011b91:	6a 00                	push   0x0
c0011b93:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b96:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011ba7:	e8 bd e9 ff ff       	call   c0010569 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bac:	83 c4 2c             	add    esp,0x2c
c0011baf:	99                   	cdq    
c0011bb0:	c3                   	ret    

c0011bb1 <SysSbrk(regs*)>:
c0011bb1:	56                   	push   esi
c0011bb2:	53                   	push   ebx
c0011bb3:	83 ec 0c             	sub    esp,0xc
c0011bb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011bbd:	68 40 e9 01 c0       	push   0xc001e940
c0011bc2:	e8 69 89 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0011bc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bcc:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bdb:	85 db                	test   ebx,ebx
c0011bdd:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011be0:	74 02                	je     c0011be4 <SysSbrk(regs*)+0x33>
c0011be2:	79 06                	jns    c0011bea <SysSbrk(regs*)+0x39>
c0011be4:	89 f0                	mov    eax,esi
c0011be6:	31 d2                	xor    edx,edx
c0011be8:	eb 2a                	jmp    c0011c14 <SysSbrk(regs*)+0x63>
c0011bea:	83 c8 ff             	or     eax,0xffffffff
c0011bed:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011bf3:	89 c2                	mov    edx,eax
c0011bf5:	77 1d                	ja     c0011c14 <SysSbrk(regs*)+0x63>
c0011bf7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011bfd:	50                   	push   eax
c0011bfe:	c1 ea 0c             	shr    edx,0xc
c0011c01:	68 07 0c 00 00       	push   0xc07
c0011c06:	52                   	push   edx
c0011c07:	51                   	push   ecx
c0011c08:	e8 2b 7e ff ff       	call   c0009a38 <VAS::allocatePages(int, int)>
c0011c0d:	89 f0                	mov    eax,esi
c0011c0f:	31 d2                	xor    edx,edx
c0011c11:	83 c4 10             	add    esp,0x10
c0011c14:	59                   	pop    ecx
c0011c15:	5b                   	pop    ebx
c0011c16:	5e                   	pop    esi
c0011c17:	c3                   	ret    

c0011c18 <SysSetCwd(regs*)>:
c0011c18:	83 ec 14             	sub    esp,0x14
c0011c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c1f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c27:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c2a:	e8 44 92 ff ff       	call   c000ae73 <Fs::setcwd(Process*, char*)>
c0011c2f:	83 c4 1c             	add    esp,0x1c
c0011c32:	99                   	cdq    
c0011c33:	c3                   	ret    

c0011c34 <SysSetTime(regs*)>:
c0011c34:	55                   	push   ebp
c0011c35:	31 c9                	xor    ecx,ecx
c0011c37:	57                   	push   edi
c0011c38:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c3d:	56                   	push   esi
c0011c3e:	53                   	push   ebx
c0011c3f:	31 db                	xor    ebx,ebx
c0011c41:	83 ec 10             	sub    esp,0x10
c0011c44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c48:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c4b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c4e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c51:	89 c2                	mov    edx,eax
c0011c53:	66 81 ef 6c 07       	sub    di,0x76c
c0011c58:	83 e2 1f             	and    edx,0x1f
c0011c5b:	c1 e7 10             	shl    edi,0x10
c0011c5e:	42                   	inc    edx
c0011c5f:	c1 e8 05             	shr    eax,0x5
c0011c62:	88 d1                	mov    cl,dl
c0011c64:	31 d2                	xor    edx,edx
c0011c66:	f7 f5                	div    ebp
c0011c68:	89 dd                	mov    ebp,ebx
c0011c6a:	88 d5                	mov    ch,dl
c0011c6c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c72:	0f b7 c1             	movzx  eax,cx
c0011c75:	31 d2                	xor    edx,edx
c0011c77:	09 f8                	or     eax,edi
c0011c79:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c7e:	89 c1                	mov    ecx,eax
c0011c80:	89 f0                	mov    eax,esi
c0011c82:	f7 f7                	div    edi
c0011c84:	c1 e2 10             	shl    edx,0x10
c0011c87:	09 d5                	or     ebp,edx
c0011c89:	31 d2                	xor    edx,edx
c0011c8b:	89 eb                	mov    ebx,ebp
c0011c8d:	f7 f7                	div    edi
c0011c8f:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c94:	88 d7                	mov    bh,dl
c0011c96:	89 f0                	mov    eax,esi
c0011c98:	31 d2                	xor    edx,edx
c0011c9a:	f7 f7                	div    edi
c0011c9c:	bf 18 00 00 00       	mov    edi,0x18
c0011ca1:	31 d2                	xor    edx,edx
c0011ca3:	f7 f7                	div    edi
c0011ca5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011caa:	88 d3                	mov    bl,dl
c0011cac:	53                   	push   ebx
c0011cad:	51                   	push   ecx
c0011cae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011cb4:	e8 cb 99 ff ff       	call   c000b684 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cb9:	83 c4 1c             	add    esp,0x1c
c0011cbc:	83 f0 01             	xor    eax,0x1
c0011cbf:	5b                   	pop    ebx
c0011cc0:	0f b6 c0             	movzx  eax,al
c0011cc3:	5e                   	pop    esi
c0011cc4:	31 d2                	xor    edx,edx
c0011cc6:	5f                   	pop    edi
c0011cc7:	5d                   	pop    ebp
c0011cc8:	c3                   	ret    

c0011cc9 <SysTimezone(regs*)>:
c0011cc9:	53                   	push   ebx
c0011cca:	83 ec 08             	sub    esp,0x8
c0011ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cd1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cd5:	75 17                	jne    c0011cee <SysTimezone(regs*)+0x25>
c0011cd7:	83 ec 0c             	sub    esp,0xc
c0011cda:	68 4c e9 01 c0       	push   0xc001e94c
c0011cdf:	e8 4c 88 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0011ce4:	83 c8 ff             	or     eax,0xffffffff
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	89 c2                	mov    edx,eax
c0011cec:	eb 20                	jmp    c0011d0e <SysTimezone(regs*)+0x45>
c0011cee:	83 ec 0c             	sub    esp,0xc
c0011cf1:	68 61 e9 01 c0       	push   0xc001e961
c0011cf6:	e8 35 88 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0011cfb:	58                   	pop    eax
c0011cfc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011cff:	e8 dc 96 ff ff       	call   c000b3e0 <User::loadClockSettings(int)>
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	b8 01 00 00 00       	mov    eax,0x1
c0011d0c:	31 d2                	xor    edx,edx
c0011d0e:	83 c4 08             	add    esp,0x8
c0011d11:	5b                   	pop    ebx
c0011d12:	c3                   	ret    

c0011d13 <SysWrite(regs*)>:
c0011d13:	57                   	push   edi
c0011d14:	56                   	push   esi
c0011d15:	53                   	push   ebx
c0011d16:	83 ec 10             	sub    esp,0x10
c0011d19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d20:	83 f8 02             	cmp    eax,0x2
c0011d23:	77 10                	ja     c0011d35 <SysWrite(regs*)+0x22>
c0011d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d2d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d33:	eb 0e                	jmp    c0011d43 <SysWrite(regs*)+0x30>
c0011d35:	83 ec 0c             	sub    esp,0xc
c0011d38:	50                   	push   eax
c0011d39:	e8 f1 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	89 c1                	mov    ecx,eax
c0011d43:	83 c8 ff             	or     eax,0xffffffff
c0011d46:	85 c9                	test   ecx,ecx
c0011d48:	89 c2                	mov    edx,eax
c0011d4a:	74 28                	je     c0011d74 <SysWrite(regs*)+0x61>
c0011d4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d54:	31 ff                	xor    edi,edi
c0011d56:	83 ec 0c             	sub    esp,0xc
c0011d59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d5b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d5f:	52                   	push   edx
c0011d60:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d63:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d66:	57                   	push   edi
c0011d67:	56                   	push   esi
c0011d68:	51                   	push   ecx
c0011d69:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d70:	83 c4 20             	add    esp,0x20
c0011d73:	99                   	cdq    
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	5b                   	pop    ebx
c0011d78:	5e                   	pop    esi
c0011d79:	5f                   	pop    edi
c0011d7a:	c3                   	ret    

c0011d7b <SysWsbe(regs*)>:
c0011d7b:	57                   	push   edi
c0011d7c:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d81:	56                   	push   esi
c0011d82:	be a0 e9 01 c0       	mov    esi,0xc001e9a0
c0011d87:	53                   	push   ebx
c0011d88:	83 ec 30             	sub    esp,0x30
c0011d8b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d8f:	fc                   	cld    
c0011d90:	83 ec 0c             	sub    esp,0xc
c0011d93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d95:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011da1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011da7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011dac:	57                   	push   edi
c0011dad:	e8 8e e7 fe ff       	call   c0000540 <strlen>
c0011db2:	5a                   	pop    edx
c0011db3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011db7:	52                   	push   edx
c0011db8:	31 d2                	xor    edx,edx
c0011dba:	57                   	push   edi
c0011dbb:	52                   	push   edx
c0011dbc:	50                   	push   eax
c0011dbd:	56                   	push   esi
c0011dbe:	ff d3                	call   ebx
c0011dc0:	83 c4 14             	add    esp,0x14
c0011dc3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011dc7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011dca:	e8 fd 22 00 00       	call   c00140cc <terminateTask(int)>
c0011dcf:	83 c4 40             	add    esp,0x40
c0011dd2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dd7:	5b                   	pop    ebx
c0011dd8:	31 d2                	xor    edx,edx
c0011dda:	5e                   	pop    esi
c0011ddb:	5f                   	pop    edi
c0011ddc:	c3                   	ret    

c0011ddd <SysYield(regs*)>:
c0011ddd:	83 ec 0c             	sub    esp,0xc
c0011de0:	fa                   	cli    
c0011de1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011de7:	e8 bc 19 00 00       	call   c00137a8 <schedule()>
c0011dec:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011df1:	48                   	dec    eax
c0011df2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011df7:	75 01                	jne    c0011dfa <SysYield(regs*)+0x1d>
c0011df9:	fb                   	sti    
c0011dfa:	31 c0                	xor    eax,eax
c0011dfc:	31 d2                	xor    edx,edx
c0011dfe:	83 c4 0c             	add    esp,0xc
c0011e01:	c3                   	ret    

c0011e02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e02:	55                   	push   ebp
c0011e03:	57                   	push   edi
c0011e04:	56                   	push   esi
c0011e05:	53                   	push   ebx
c0011e06:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e0c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e14:	0f 95 c2             	setne  dl
c0011e17:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e1f:	0f 94 c0             	sete   al
c0011e22:	84 c2                	test   dl,al
c0011e24:	74 34                	je     c0011e5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e26:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e31:	74 27                	je     c0011e5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e33:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e3a:	05 00 10 00 00       	add    eax,0x1000
c0011e3f:	89 c1                	mov    ecx,eax
c0011e41:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e46:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e4c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e53:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e5a:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e61:	83 ec 0c             	sub    esp,0xc
c0011e64:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e6a:	6a 01                	push   0x1
c0011e6c:	e8 14 74 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	89 c3                	mov    ebx,eax
c0011e76:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e7c:	0f 86 25 01 00 00    	jbe    c0011fa7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e82:	c1 ee 0c             	shr    esi,0xc
c0011e85:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e8c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e98:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ea3:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011eaa:	29 ef                	sub    edi,ebp
c0011eac:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011eb0:	0f 83 f8 00 00 00    	jae    c0011fae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011eb6:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ebc:	76 05                	jbe    c0011ec3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011ebe:	bf 00 10 00 00       	mov    edi,0x1000
c0011ec3:	83 ec 0c             	sub    esp,0xc
c0011ec6:	31 d2                	xor    edx,edx
c0011ec8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ecf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ed1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ed5:	50                   	push   eax
c0011ed6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011eda:	56                   	push   esi
c0011edb:	52                   	push   edx
c0011edc:	57                   	push   edi
c0011edd:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ee4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ee7:	83 c4 20             	add    esp,0x20
c0011eea:	85 c0                	test   eax,eax
c0011eec:	75 06                	jne    c0011ef4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011eee:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011ef2:	74 13                	je     c0011f07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	53                   	push   ebx
c0011ef8:	e8 b8 76 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011efd:	83 c4 10             	add    esp,0x10
c0011f00:	31 c0                	xor    eax,eax
c0011f02:	e9 7c 01 00 00       	jmp    c0012083 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f07:	fa                   	cli    
c0011f08:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f0e:	e8 82 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f13:	6a 07                	push   0x7
c0011f15:	89 c7                	mov    edi,eax
c0011f17:	53                   	push   ebx
c0011f18:	50                   	push   eax
c0011f19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f21:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f27:	e8 08 7a ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f2c:	83 c4 0c             	add    esp,0xc
c0011f2f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f36:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f3c:	6a 00                	push   0x0
c0011f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f4c:	e8 55 78 ff ff       	call   c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011f51:	58                   	pop    eax
c0011f52:	5a                   	pop    edx
c0011f53:	68 07 0c 00 00       	push   0xc07
c0011f58:	55                   	push   ebp
c0011f59:	57                   	push   edi
c0011f5a:	89 df                	mov    edi,ebx
c0011f5c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f69:	6a 00                	push   0x0
c0011f6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f79:	e8 76 7d ff ff       	call   c0009cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f7e:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f85:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011f8a:	83 c4 20             	add    esp,0x20
c0011f8d:	48                   	dec    eax
c0011f8e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011f93:	85 c0                	test   eax,eax
c0011f95:	75 01                	jne    c0011f98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f97:	fb                   	sti    
c0011f98:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f9e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fa2:	e9 f1 fe ff ff       	jmp    c0011e98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fa7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fae:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fb5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fbb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fc1:	0f 86 ae 00 00 00    	jbe    c0012075 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fc7:	fa                   	cli    
c0011fc8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011fce:	c1 ee 0c             	shr    esi,0xc
c0011fd1:	51                   	push   ecx
c0011fd2:	31 ff                	xor    edi,edi
c0011fd4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fdb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fe1:	6a 00                	push   0x0
c0011fe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fe8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011feb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ff1:	e8 b0 77 ff ff       	call   c00097a6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	e8 97 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011ffe:	47                   	inc    edi
c0011fff:	6a 07                	push   0x7
c0012001:	53                   	push   ebx
c0012002:	50                   	push   eax
c0012003:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012007:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001200d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012010:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012016:	e8 19 79 ff ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c001201b:	58                   	pop    eax
c001201c:	5a                   	pop    edx
c001201d:	68 07 0c 00 00       	push   0xc07
c0012022:	55                   	push   ebp
c0012023:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012029:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001202d:	50                   	push   eax
c001202e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012035:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001203b:	6a 00                	push   0x0
c001203d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012042:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012045:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001204b:	e8 a4 7c ff ff       	call   c0009cf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012050:	83 c4 1c             	add    esp,0x1c
c0012053:	68 00 10 00 00       	push   0x1000
c0012058:	6a 00                	push   0x0
c001205a:	53                   	push   ebx
c001205b:	e8 70 e4 fe ff       	call   c00004d0 <memset>
c0012060:	83 c4 10             	add    esp,0x10
c0012063:	39 fe                	cmp    esi,edi
c0012065:	77 92                	ja     c0011ff9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012067:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001206c:	48                   	dec    eax
c001206d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012072:	75 01                	jne    c0012075 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012074:	fb                   	sti    
c0012075:	83 ec 0c             	sub    esp,0xc
c0012078:	53                   	push   ebx
c0012079:	e8 37 75 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	b0 01                	mov    al,0x1
c0012083:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012089:	5b                   	pop    ebx
c001208a:	5e                   	pop    esi
c001208b:	5f                   	pop    edi
c001208c:	5d                   	pop    ebp
c001208d:	c3                   	ret    

c001208e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001208e:	55                   	push   ebp
c001208f:	57                   	push   edi
c0012090:	56                   	push   esi
c0012091:	53                   	push   ebx
c0012092:	83 ec 48             	sub    esp,0x48
c0012095:	68 14 01 00 00       	push   0x114
c001209a:	e8 1a 57 ff ff       	call   c00077b9 <malloc>
c001209f:	83 c4 0c             	add    esp,0xc
c00120a2:	89 c6                	mov    esi,eax
c00120a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120a8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120ac:	50                   	push   eax
c00120ad:	e8 f4 89 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c00120b2:	58                   	pop    eax
c00120b3:	5a                   	pop    edx
c00120b4:	6a 01                	push   0x1
c00120b6:	56                   	push   esi
c00120b7:	e8 aa 8a ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c00120bc:	83 c4 10             	add    esp,0x10
c00120bf:	85 c0                	test   eax,eax
c00120c1:	0f 85 47 01 00 00    	jne    c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120c7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120cf:	83 ec 0c             	sub    esp,0xc
c00120d2:	6a 34                	push   0x34
c00120d4:	e8 e0 56 ff ff       	call   c00077b9 <malloc>
c00120d9:	89 c3                	mov    ebx,eax
c00120db:	58                   	pop    eax
c00120dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00120de:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120e2:	57                   	push   edi
c00120e3:	53                   	push   ebx
c00120e4:	6a 00                	push   0x0
c00120e6:	6a 34                	push   0x34
c00120e8:	56                   	push   esi
c00120e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120ec:	83 c4 20             	add    esp,0x20
c00120ef:	85 c0                	test   eax,eax
c00120f1:	0f 85 17 01 00 00    	jne    c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120f7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120fd:	0f 85 0b 01 00 00    	jne    c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012103:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012106:	85 c0                	test   eax,eax
c0012108:	0f 84 00 01 00 00    	je     c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001210e:	31 d2                	xor    edx,edx
c0012110:	55                   	push   ebp
c0012111:	52                   	push   edx
c0012112:	50                   	push   eax
c0012113:	56                   	push   esi
c0012114:	e8 0b 8b ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	85 c0                	test   eax,eax
c001211e:	0f 85 ea 00 00 00    	jne    c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012124:	83 ec 0c             	sub    esp,0xc
c0012127:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001212a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001212e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012132:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012136:	0f af c2             	imul   eax,edx
c0012139:	50                   	push   eax
c001213a:	e8 7a 56 ff ff       	call   c00077b9 <malloc>
c001213f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012141:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012145:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012148:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001214c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012150:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012154:	0f af c2             	imul   eax,edx
c0012157:	99                   	cdq    
c0012158:	52                   	push   edx
c0012159:	50                   	push   eax
c001215a:	56                   	push   esi
c001215b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001215e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012161:	83 c4 20             	add    esp,0x20
c0012164:	85 c0                	test   eax,eax
c0012166:	0f 84 a2 00 00 00    	je     c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001216c:	31 d2                	xor    edx,edx
c001216e:	51                   	push   ecx
c001216f:	52                   	push   edx
c0012170:	50                   	push   eax
c0012171:	56                   	push   esi
c0012172:	e8 ad 8a ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c0012177:	83 c4 10             	add    esp,0x10
c001217a:	85 c0                	test   eax,eax
c001217c:	0f 85 8c 00 00 00    	jne    c001220e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012182:	83 ec 0c             	sub    esp,0xc
c0012185:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012189:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001218d:	31 ed                	xor    ebp,ebp
c001218f:	0f af c2             	imul   eax,edx
c0012192:	50                   	push   eax
c0012193:	e8 21 56 ff ff       	call   c00077b9 <malloc>
c0012198:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001219a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001219e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121a5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121a9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121ad:	0f af c2             	imul   eax,edx
c00121b0:	99                   	cdq    
c00121b1:	52                   	push   edx
c00121b2:	50                   	push   eax
c00121b3:	56                   	push   esi
c00121b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121b7:	83 c4 20             	add    esp,0x20
c00121ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121c2:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121c6:	0f 86 80 00 00 00    	jbe    c001224c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121cc:	0f b7 fd             	movzx  edi,bp
c00121cf:	c1 e7 05             	shl    edi,0x5
c00121d2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121d6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121d9:	75 6b                	jne    c0012246 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121db:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121e2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121e9:	52                   	push   edx
c00121ea:	31 d2                	xor    edx,edx
c00121ec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121ef:	52                   	push   edx
c00121f0:	50                   	push   eax
c00121f1:	56                   	push   esi
c00121f2:	e8 2d 8a ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	85 c0                	test   eax,eax
c00121fc:	74 17                	je     c0012215 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121fe:	83 ec 0c             	sub    esp,0xc
c0012201:	68 cc e9 01 c0       	push   0xc001e9cc
c0012206:	e8 25 83 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001220b:	83 c4 10             	add    esp,0x10
c001220e:	31 c0                	xor    eax,eax
c0012210:	e9 87 00 00 00       	jmp    c001229c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001221b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001221e:	50                   	push   eax
c001221f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012227:	56                   	push   esi
c0012228:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001222c:	e8 d1 fb ff ff       	call   c0011e02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012231:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012235:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012239:	83 c4 20             	add    esp,0x20
c001223c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012240:	73 04                	jae    c0012246 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012242:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012246:	45                   	inc    ebp
c0012247:	e9 76 ff ff ff       	jmp    c00121c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001224c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012258:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001225e:	83 ec 0c             	sub    esp,0xc
c0012261:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012267:	25 00 f0 ff ff       	and    eax,0xfffff000
c001226c:	05 00 10 00 00       	add    eax,0x1000
c0012271:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012278:	e8 4c 55 ff ff       	call   c00077c9 <free>
c001227d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012280:	e8 44 55 ff ff       	call   c00077c9 <free>
c0012285:	58                   	pop    eax
c0012286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001228a:	e8 3a 55 ff ff       	call   c00077c9 <free>
c001228f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012292:	e8 2d 89 ff ff       	call   c000abc4 <File::close()>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	b0 01                	mov    al,0x1
c001229c:	83 c4 3c             	add    esp,0x3c
c001229f:	5b                   	pop    ebx
c00122a0:	5e                   	pop    esi
c00122a1:	5f                   	pop    edi
c00122a2:	5d                   	pop    ebp
c00122a3:	c3                   	ret    

c00122a4 <Thr::runtimeReferenceHelper()>:
c00122a4:	83 ec 18             	sub    esp,0x18
c00122a7:	68 d4 e9 01 c0       	push   0xc001e9d4
c00122ac:	e8 7f 82 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00122b1:	fa                   	cli    
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	eb fe                	jmp    c00122b5 <Thr::runtimeReferenceHelper()+0x11>

c00122b7 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122b7:	57                   	push   edi
c00122b8:	56                   	push   esi
c00122b9:	53                   	push   ebx
c00122ba:	31 db                	xor    ebx,ebx
c00122bc:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c00122c2:	7e 3c                	jle    c0012300 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122c4:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c00122cb:	31 ff                	xor    edi,edi
c00122cd:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00122d4:	7e 27                	jle    c00122fd <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122d6:	50                   	push   eax
c00122d7:	50                   	push   eax
c00122d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00122de:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00122e5:	50                   	push   eax
c00122e6:	e8 f5 e3 fe ff       	call   c00006e0 <strcmp>
c00122eb:	83 c4 10             	add    esp,0x10
c00122ee:	85 c0                	test   eax,eax
c00122f0:	75 05                	jne    c00122f7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122f5:	eb 0b                	jmp    c0012302 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122f7:	83 c6 10             	add    esi,0x10
c00122fa:	47                   	inc    edi
c00122fb:	eb d0                	jmp    c00122cd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122fd:	43                   	inc    ebx
c00122fe:	eb bc                	jmp    c00122bc <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012300:	31 c0                	xor    eax,eax
c0012302:	5b                   	pop    ebx
c0012303:	5e                   	pop    esi
c0012304:	5f                   	pop    edi
c0012305:	c3                   	ret    

c0012306 <Thr::loadKernelSymbolTable(char const*)>:
c0012306:	55                   	push   ebp
c0012307:	57                   	push   edi
c0012308:	56                   	push   esi
c0012309:	53                   	push   ebx
c001230a:	83 ec 68             	sub    esp,0x68
c001230d:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c0012313:	68 14 01 00 00       	push   0x114
c0012318:	e8 9c 54 ff ff       	call   c00077b9 <malloc>
c001231d:	83 c4 0c             	add    esp,0xc
c0012320:	89 c3                	mov    ebx,eax
c0012322:	56                   	push   esi
c0012323:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012327:	50                   	push   eax
c0012328:	e8 79 87 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c001232d:	5e                   	pop    esi
c001232e:	5f                   	pop    edi
c001232f:	6a 01                	push   0x1
c0012331:	53                   	push   ebx
c0012332:	e8 2f 88 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	85 c0                	test   eax,eax
c001233c:	74 0a                	je     c0012348 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001233e:	83 ec 0c             	sub    esp,0xc
c0012341:	68 f6 e9 01 c0       	push   0xc001e9f6
c0012346:	eb 34                	jmp    c001237c <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012348:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012350:	83 ec 0c             	sub    esp,0xc
c0012353:	6a 34                	push   0x34
c0012355:	e8 5f 54 ff ff       	call   c00077b9 <malloc>
c001235a:	59                   	pop    ecx
c001235b:	89 c7                	mov    edi,eax
c001235d:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012361:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012363:	56                   	push   esi
c0012364:	57                   	push   edi
c0012365:	6a 00                	push   0x0
c0012367:	6a 34                	push   0x34
c0012369:	53                   	push   ebx
c001236a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001236d:	83 c4 20             	add    esp,0x20
c0012370:	85 c0                	test   eax,eax
c0012372:	74 17                	je     c001238b <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012374:	83 ec 0c             	sub    esp,0xc
c0012377:	68 0d ea 01 c0       	push   0xc001ea0d
c001237c:	e8 32 de ff ff       	call   c00101b3 <KePanic(char const*)>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	31 c0                	xor    eax,eax
c0012386:	e9 31 02 00 00       	jmp    c00125bc <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001238b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012391:	75 e1                	jne    c0012374 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012393:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012396:	85 c0                	test   eax,eax
c0012398:	74 da                	je     c0012374 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001239a:	52                   	push   edx
c001239b:	31 d2                	xor    edx,edx
c001239d:	52                   	push   edx
c001239e:	50                   	push   eax
c001239f:	53                   	push   ebx
c00123a0:	e8 7f 88 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c00123a5:	83 c4 10             	add    esp,0x10
c00123a8:	85 c0                	test   eax,eax
c00123aa:	75 c8                	jne    c0012374 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123ac:	83 ec 0c             	sub    esp,0xc
c00123af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123b7:	31 ed                	xor    ebp,ebp
c00123b9:	0f af c2             	imul   eax,edx
c00123bc:	50                   	push   eax
c00123bd:	e8 f7 53 ff ff       	call   c00077b9 <malloc>
c00123c2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00123cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123cf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123d3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123d7:	0f af c2             	imul   eax,edx
c00123da:	99                   	cdq    
c00123db:	52                   	push   edx
c00123dc:	50                   	push   eax
c00123dd:	53                   	push   ebx
c00123de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123e1:	83 c4 20             	add    esp,0x20
c00123e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123ec:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123f4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012404:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012408:	0f 86 aa 00 00 00    	jbe    c00124b8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001240e:	0f b7 f5             	movzx  esi,bp
c0012411:	6b f6 28             	imul   esi,esi,0x28
c0012414:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012418:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001241b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001241f:	50                   	push   eax
c0012420:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012424:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012428:	8b 16                	mov    edx,DWORD PTR [esi]
c001242a:	6b c0 28             	imul   eax,eax,0x28
c001242d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012431:	89 d0                	mov    eax,edx
c0012433:	31 d2                	xor    edx,edx
c0012435:	52                   	push   edx
c0012436:	50                   	push   eax
c0012437:	53                   	push   ebx
c0012438:	e8 e7 87 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c001243d:	83 c4 0c             	add    esp,0xc
c0012440:	6a 20                	push   0x20
c0012442:	6a 00                	push   0x0
c0012444:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012448:	52                   	push   edx
c0012449:	e8 82 e0 fe ff       	call   c00004d0 <memset>
c001244e:	58                   	pop    eax
c001244f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012451:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012455:	51                   	push   ecx
c0012456:	8d 54 24 40          	lea    edx,[esp+0x40]
c001245a:	52                   	push   edx
c001245b:	6a 00                	push   0x0
c001245d:	6a 1f                	push   0x1f
c001245f:	53                   	push   ebx
c0012460:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012463:	83 c4 18             	add    esp,0x18
c0012466:	68 24 ea 01 c0       	push   0xc001ea24
c001246b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001246f:	52                   	push   edx
c0012470:	e8 6b e2 fe ff       	call   c00006e0 <strcmp>
c0012475:	83 c4 10             	add    esp,0x10
c0012478:	85 c0                	test   eax,eax
c001247a:	75 0f                	jne    c001248b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001247c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001247f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012483:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001248b:	50                   	push   eax
c001248c:	50                   	push   eax
c001248d:	68 2c ea 01 c0       	push   0xc001ea2c
c0012492:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012496:	50                   	push   eax
c0012497:	e8 44 e2 fe ff       	call   c00006e0 <strcmp>
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	85 c0                	test   eax,eax
c00124a1:	75 0f                	jne    c00124b2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124b2:	45                   	inc    ebp
c00124b3:	e9 4c ff ff ff       	jmp    c0012404 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124bd:	75 10                	jne    c00124cf <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124bf:	83 ec 0c             	sub    esp,0xc
c00124c2:	68 34 ea 01 c0       	push   0xc001ea34
c00124c7:	e8 e7 dc ff ff       	call   c00101b3 <KePanic(char const*)>
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124d4:	75 10                	jne    c00124e6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124d6:	83 ec 0c             	sub    esp,0xc
c00124d9:	68 34 ea 01 c0       	push   0xc001ea34
c00124de:	e8 d0 dc ff ff       	call   c00101b3 <KePanic(char const*)>
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	31 d2                	xor    edx,edx
c00124e8:	50                   	push   eax
c00124e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ed:	52                   	push   edx
c00124ee:	50                   	push   eax
c00124ef:	53                   	push   ebx
c00124f0:	e8 2f 87 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c00124f5:	5a                   	pop    edx
c00124f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124fa:	e8 ba 52 ff ff       	call   c00077b9 <malloc>
c00124ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012503:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012507:	31 c9                	xor    ecx,ecx
c0012509:	5e                   	pop    esi
c001250a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001250c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012510:	55                   	push   ebp
c0012511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012515:	51                   	push   ecx
c0012516:	52                   	push   edx
c0012517:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001251b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001251f:	53                   	push   ebx
c0012520:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012523:	83 c4 14             	add    esp,0x14
c0012526:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001252a:	e8 8a 52 ff ff       	call   c00077b9 <malloc>
c001252f:	89 c6                	mov    esi,eax
c0012531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012533:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012536:	56                   	push   esi
c0012537:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001253b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001253f:	51                   	push   ecx
c0012540:	52                   	push   edx
c0012541:	53                   	push   ebx
c0012542:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012545:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012549:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001254f:	83 c4 1c             	add    esp,0x1c
c0012552:	c1 e8 04             	shr    eax,0x4
c0012555:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c001255c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012560:	31 d2                	xor    edx,edx
c0012562:	52                   	push   edx
c0012563:	50                   	push   eax
c0012564:	53                   	push   ebx
c0012565:	e8 ba 86 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c001256a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001256c:	31 d2                	xor    edx,edx
c001256e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012571:	56                   	push   esi
c0012572:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012576:	52                   	push   edx
c0012577:	50                   	push   eax
c0012578:	53                   	push   ebx
c0012579:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001257c:	83 c4 14             	add    esp,0x14
c001257f:	53                   	push   ebx
c0012580:	e8 3f 86 ff ff       	call   c000abc4 <File::close()>
c0012585:	5d                   	pop    ebp
c0012586:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001258a:	e8 3a 52 ff ff       	call   c00077c9 <free>
c001258f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012592:	e8 32 52 ff ff       	call   c00077c9 <free>
c0012597:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c001259c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125a0:	8d 50 01             	lea    edx,[eax+0x1]
c00125a3:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00125aa:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c00125b1:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c00125b7:	83 c4 10             	add    esp,0x10
c00125ba:	b0 01                	mov    al,0x1
c00125bc:	83 c4 5c             	add    esp,0x5c
c00125bf:	5b                   	pop    ebx
c00125c0:	5e                   	pop    esi
c00125c1:	5f                   	pop    edi
c00125c2:	5d                   	pop    ebp
c00125c3:	c3                   	ret    

c00125c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125c4:	55                   	push   ebp
c00125c5:	57                   	push   edi
c00125c6:	56                   	push   esi
c00125c7:	53                   	push   ebx
c00125c8:	81 ec 68 03 00 00    	sub    esp,0x368
c00125ce:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125d5:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00125db:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125df:	68 14 01 00 00       	push   0x114
c00125e4:	e8 d0 51 ff ff       	call   c00077b9 <malloc>
c00125e9:	83 c4 0c             	add    esp,0xc
c00125ec:	89 c5                	mov    ebp,eax
c00125ee:	53                   	push   ebx
c00125ef:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125f6:	50                   	push   eax
c00125f7:	e8 aa 84 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c00125fc:	5e                   	pop    esi
c00125fd:	5f                   	pop    edi
c00125fe:	6a 01                	push   0x1
c0012600:	55                   	push   ebp
c0012601:	e8 60 85 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	85 c0                	test   eax,eax
c001260b:	0f 85 a7 06 00 00    	jne    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012611:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012619:	83 ec 0c             	sub    esp,0xc
c001261c:	6a 34                	push   0x34
c001261e:	e8 96 51 ff ff       	call   c00077b9 <malloc>
c0012623:	5b                   	pop    ebx
c0012624:	89 c7                	mov    edi,eax
c0012626:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001262a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001262d:	53                   	push   ebx
c001262e:	57                   	push   edi
c001262f:	6a 00                	push   0x0
c0012631:	6a 34                	push   0x34
c0012633:	55                   	push   ebp
c0012634:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012637:	83 c4 20             	add    esp,0x20
c001263a:	85 c0                	test   eax,eax
c001263c:	0f 85 76 06 00 00    	jne    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012642:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012648:	0f 85 6a 06 00 00    	jne    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001264e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012651:	85 c0                	test   eax,eax
c0012653:	0f 84 5f 06 00 00    	je     c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012659:	31 d2                	xor    edx,edx
c001265b:	51                   	push   ecx
c001265c:	52                   	push   edx
c001265d:	50                   	push   eax
c001265e:	55                   	push   ebp
c001265f:	e8 c0 85 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c0012664:	83 c4 10             	add    esp,0x10
c0012667:	85 c0                	test   eax,eax
c0012669:	0f 85 49 06 00 00    	jne    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012675:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012679:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001267d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012681:	0f af c2             	imul   eax,edx
c0012684:	50                   	push   eax
c0012685:	e8 2f 51 ff ff       	call   c00077b9 <malloc>
c001268a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001268d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012694:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012698:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001269c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126a0:	0f af c2             	imul   eax,edx
c00126a3:	99                   	cdq    
c00126a4:	52                   	push   edx
c00126a5:	50                   	push   eax
c00126a6:	55                   	push   ebp
c00126a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126aa:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126ad:	83 c4 20             	add    esp,0x20
c00126b0:	85 c0                	test   eax,eax
c00126b2:	0f 84 00 06 00 00    	je     c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126b8:	52                   	push   edx
c00126b9:	31 d2                	xor    edx,edx
c00126bb:	52                   	push   edx
c00126bc:	50                   	push   eax
c00126bd:	55                   	push   ebp
c00126be:	e8 61 85 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	85 c0                	test   eax,eax
c00126c8:	0f 85 ea 05 00 00    	jne    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126ce:	83 ec 0c             	sub    esp,0xc
c00126d1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126d5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126d9:	31 f6                	xor    esi,esi
c00126db:	0f af c2             	imul   eax,edx
c00126de:	50                   	push   eax
c00126df:	e8 d5 50 ff ff       	call   c00077b9 <malloc>
c00126e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126f2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126f6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126fa:	0f af c2             	imul   eax,edx
c00126fd:	99                   	cdq    
c00126fe:	52                   	push   edx
c00126ff:	50                   	push   eax
c0012700:	55                   	push   ebp
c0012701:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012704:	83 c4 20             	add    esp,0x20
c0012707:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001270b:	0f 86 8a 00 00 00    	jbe    c001279b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012711:	0f b7 de             	movzx  ebx,si
c0012714:	c1 e3 05             	shl    ebx,0x5
c0012717:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001271b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001271e:	75 75                	jne    c0012795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012720:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012723:	31 d2                	xor    edx,edx
c0012725:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012729:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001272c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012730:	50                   	push   eax
c0012731:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012734:	52                   	push   edx
c0012735:	50                   	push   eax
c0012736:	55                   	push   ebp
c0012737:	e8 e8 84 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	85 c0                	test   eax,eax
c0012741:	0f 85 71 05 00 00    	jne    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012747:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001274e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012751:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012755:	31 d2                	xor    edx,edx
c0012757:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012762:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012769:	50                   	push   eax
c001276a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001276e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012772:	52                   	push   edx
c0012773:	50                   	push   eax
c0012774:	55                   	push   ebp
c0012775:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012778:	83 c4 1c             	add    esp,0x1c
c001277b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001277e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012781:	50                   	push   eax
c0012782:	6a 00                	push   0x0
c0012784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012788:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001278c:	50                   	push   eax
c001278d:	e8 3e dd fe ff       	call   c00004d0 <memset>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	46                   	inc    esi
c0012796:	e9 6c ff ff ff       	jmp    c0012707 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001279b:	53                   	push   ebx
c001279c:	31 db                	xor    ebx,ebx
c001279e:	68 00 01 00 00       	push   0x100
c00127a3:	6a 00                	push   0x0
c00127a5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127a9:	50                   	push   eax
c00127aa:	e8 21 dd fe ff       	call   c00004d0 <memset>
c00127af:	83 c4 0c             	add    esp,0xc
c00127b2:	68 00 01 00 00       	push   0x100
c00127b7:	6a 00                	push   0x0
c00127b9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127c0:	50                   	push   eax
c00127c1:	e8 0a dd fe ff       	call   c00004d0 <memset>
c00127c6:	83 c4 10             	add    esp,0x10
c00127c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127d1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127e9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127f1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127f5:	0f 86 30 01 00 00    	jbe    c001292b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127fb:	0f b7 f3             	movzx  esi,bx
c00127fe:	6b f6 28             	imul   esi,esi,0x28
c0012801:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012805:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001280c:	52                   	push   edx
c001280d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012811:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012815:	8b 06                	mov    eax,DWORD PTR [esi]
c0012817:	6b d2 28             	imul   edx,edx,0x28
c001281a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001281e:	31 d2                	xor    edx,edx
c0012820:	52                   	push   edx
c0012821:	50                   	push   eax
c0012822:	55                   	push   ebp
c0012823:	e8 fc 83 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c0012828:	83 c4 0c             	add    esp,0xc
c001282b:	6a 20                	push   0x20
c001282d:	6a 00                	push   0x0
c001282f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012836:	51                   	push   ecx
c0012837:	e8 94 dc fe ff       	call   c00004d0 <memset>
c001283c:	59                   	pop    ecx
c001283d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012840:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012844:	52                   	push   edx
c0012845:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001284c:	51                   	push   ecx
c001284d:	6a 00                	push   0x0
c001284f:	6a 1f                	push   0x1f
c0012851:	55                   	push   ebp
c0012852:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012855:	83 c4 1c             	add    esp,0x1c
c0012858:	6a 09                	push   0x9
c001285a:	68 4e ea 01 c0       	push   0xc001ea4e
c001285f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012866:	51                   	push   ecx
c0012867:	e8 24 db fe ff       	call   c0000390 <memcmp>
c001286c:	83 c4 10             	add    esp,0x10
c001286f:	85 c0                	test   eax,eax
c0012871:	75 21                	jne    c0012894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012877:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001287b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001287f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012883:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012886:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001288d:	89 d0                	mov    eax,edx
c001288f:	40                   	inc    eax
c0012890:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012894:	50                   	push   eax
c0012895:	6a 09                	push   0x9
c0012897:	68 58 ea 01 c0       	push   0xc001ea58
c001289c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128a3:	50                   	push   eax
c00128a4:	e8 e7 da fe ff       	call   c0000390 <memcmp>
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	85 c0                	test   eax,eax
c00128ae:	75 21                	jne    c00128d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128b8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128c3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128ca:	89 d0                	mov    eax,edx
c00128cc:	40                   	inc    eax
c00128cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128d1:	50                   	push   eax
c00128d2:	50                   	push   eax
c00128d3:	68 24 ea 01 c0       	push   0xc001ea24
c00128d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128df:	50                   	push   eax
c00128e0:	e8 fb dd fe ff       	call   c00006e0 <strcmp>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	85 c0                	test   eax,eax
c00128ea:	75 0f                	jne    c00128fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128ec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128fb:	50                   	push   eax
c00128fc:	50                   	push   eax
c00128fd:	68 2c ea 01 c0       	push   0xc001ea2c
c0012902:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012909:	50                   	push   eax
c001290a:	e8 d1 dd fe ff       	call   c00006e0 <strcmp>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	85 c0                	test   eax,eax
c0012914:	75 0f                	jne    c0012925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012916:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012919:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001291d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012921:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012925:	43                   	inc    ebx
c0012926:	e9 c6 fe ff ff       	jmp    c00127f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001292b:	31 d2                	xor    edx,edx
c001292d:	50                   	push   eax
c001292e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012932:	52                   	push   edx
c0012933:	50                   	push   eax
c0012934:	55                   	push   ebp
c0012935:	e8 ea 82 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c001293a:	58                   	pop    eax
c001293b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001293f:	e8 75 4e ff ff       	call   c00077b9 <malloc>
c0012944:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012947:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001294b:	31 d2                	xor    edx,edx
c001294d:	58                   	pop    eax
c001294e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012952:	53                   	push   ebx
c0012953:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012957:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001295b:	52                   	push   edx
c001295c:	50                   	push   eax
c001295d:	55                   	push   ebp
c001295e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012961:	83 c4 14             	add    esp,0x14
c0012964:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012968:	e8 4c 4e ff ff       	call   c00077b9 <malloc>
c001296d:	31 d2                	xor    edx,edx
c001296f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012973:	83 c4 0c             	add    esp,0xc
c0012976:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001297a:	52                   	push   edx
c001297b:	50                   	push   eax
c001297c:	55                   	push   ebp
c001297d:	e8 a2 82 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c0012982:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012985:	31 d2                	xor    edx,edx
c0012987:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001298a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001298e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012992:	52                   	push   edx
c0012993:	50                   	push   eax
c0012994:	55                   	push   ebp
c0012995:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012998:	83 c4 20             	add    esp,0x20
c001299b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129a7:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129ab:	0f 84 0b 03 00 00    	je     c0012cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129b1:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129b8:	31 d2                	xor    edx,edx
c00129ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129be:	c1 e8 03             	shr    eax,0x3
c00129c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129c5:	51                   	push   ecx
c00129c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129ca:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129ce:	52                   	push   edx
c00129cf:	50                   	push   eax
c00129d0:	55                   	push   ebp
c00129d1:	e8 4e 82 ff ff       	call   c000ac24 <File::seek(unsigned long long)>
c00129d6:	5b                   	pop    ebx
c00129d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129db:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129e2:	e8 d2 4d ff ff       	call   c00077b9 <malloc>
c00129e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129ee:	31 d2                	xor    edx,edx
c00129f0:	5e                   	pop    esi
c00129f1:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129f5:	50                   	push   eax
c00129f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129fe:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a05:	52                   	push   edx
c0012a06:	50                   	push   eax
c0012a07:	55                   	push   ebp
c0012a08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a0b:	83 c4 20             	add    esp,0x20
c0012a0e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a16:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a1a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a1e:	0f 8d 7c 02 00 00    	jge    c0012ca0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a2c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a31:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a3c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a40:	89 d8                	mov    eax,ebx
c0012a42:	c1 e8 08             	shr    eax,0x8
c0012a45:	89 c6                	mov    esi,eax
c0012a47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a4b:	c1 e6 04             	shl    esi,0x4
c0012a4e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a52:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a55:	85 d2                	test   edx,edx
c0012a57:	0f 85 bf 00 00 00    	jne    c0012b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a5d:	83 ec 0c             	sub    esp,0xc
c0012a60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a64:	03 06                	add    eax,DWORD PTR [esi]
c0012a66:	50                   	push   eax
c0012a67:	e8 4b f8 ff ff       	call   c00122b7 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	89 c2                	mov    edx,eax
c0012a71:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a76:	85 c0                	test   eax,eax
c0012a78:	0f 85 9e 00 00 00    	jne    c0012b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a85:	03 06                	add    eax,DWORD PTR [esi]
c0012a87:	50                   	push   eax
c0012a88:	e8 77 d8 ff ff       	call   c0010304 <KeResolveCompatibilitySymbol(char*)>
c0012a8d:	83 c4 10             	add    esp,0x10
c0012a90:	89 c2                	mov    edx,eax
c0012a92:	85 c0                	test   eax,eax
c0012a94:	0f 85 82 00 00 00    	jne    c0012b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a9a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a9e:	50                   	push   eax
c0012a9f:	50                   	push   eax
c0012aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa4:	03 06                	add    eax,DWORD PTR [esi]
c0012aa6:	50                   	push   eax
c0012aa7:	68 62 ea 01 c0       	push   0xc001ea62
c0012aac:	e8 7f 7a ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0012ab1:	58                   	pop    eax
c0012ab2:	5a                   	pop    edx
c0012ab3:	68 7c ea 01 c0       	push   0xc001ea7c
c0012ab8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012abf:	50                   	push   eax
c0012ac0:	e8 3b db fe ff       	call   c0000600 <strcpy>
c0012ac5:	59                   	pop    ecx
c0012ac6:	58                   	pop    eax
c0012ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012acb:	03 06                	add    eax,DWORD PTR [esi]
c0012acd:	50                   	push   eax
c0012ace:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ad5:	50                   	push   eax
c0012ad6:	e8 e5 dc fe ff       	call   c00007c0 <strcat>
c0012adb:	58                   	pop    eax
c0012adc:	5a                   	pop    edx
c0012add:	68 12 eb 01 c0       	push   0xc001eb12
c0012ae2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ae9:	50                   	push   eax
c0012aea:	e8 d1 dc fe ff       	call   c00007c0 <strcat>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012af7:	0f 84 5d 01 00 00    	je     c0012c5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012afd:	83 ec 0c             	sub    esp,0xc
c0012b00:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b07:	50                   	push   eax
c0012b08:	e8 a6 d6 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b14:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b18:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b1c:	80 fb 01             	cmp    bl,0x1
c0012b1f:	0f 85 88 00 00 00    	jne    c0012bad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b25:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b2c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b30:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b34:	01 ce                	add    esi,ecx
c0012b36:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b3c:	0f 94 c0             	sete   al
c0012b3f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b45:	0f 94 c3             	sete   bl
c0012b48:	09 c3                	or     ebx,eax
c0012b4a:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b4c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b51:	74 41                	je     c0012b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b53:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b56:	84 db                	test   bl,bl
c0012b58:	75 15                	jne    c0012b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b5a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b5e:	66 83 f8 0c          	cmp    ax,0xc
c0012b62:	76 05                	jbe    c0012b69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b64:	b8 0c 00 00 00       	mov    eax,0xc
c0012b69:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b6d:	76 37                	jbe    c0012ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b6f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b73:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b78:	0f 84 dc 00 00 00    	je     c0012c5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b7e:	83 ec 0c             	sub    esp,0xc
c0012b81:	68 93 ea 01 c0       	push   0xc001ea93
c0012b86:	e8 28 d6 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b92:	eb 12                	jmp    c0012ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b94:	01 c1                	add    ecx,eax
c0012b96:	84 db                	test   bl,bl
c0012b98:	75 0c                	jne    c0012ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b9a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b9e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012ba2:	77 02                	ja     c0012ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ba4:	01 d1                	add    ecx,edx
c0012ba6:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ba8:	e9 ea 00 00 00       	jmp    c0012c97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bad:	80 fb 02             	cmp    bl,0x2
c0012bb0:	75 7c                	jne    c0012c2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bb2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bb9:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bbd:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bc1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bc7:	74 20                	je     c0012be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bc9:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bcf:	74 18                	je     c0012be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bd1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bd5:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bda:	66 83 f8 0e          	cmp    ax,0xe
c0012bde:	77 03                	ja     c0012be3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012be0:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012be3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012be7:	76 1f                	jbe    c0012c08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012be9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012bed:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bf2:	74 66                	je     c0012c5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bf4:	83 ec 0c             	sub    esp,0xc
c0012bf7:	68 af ea 01 c0       	push   0xc001eaaf
c0012bfc:	e8 b2 d5 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c08:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c0a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c0f:	74 13                	je     c0012c24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c11:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c15:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c1c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c20:	01 c8                	add    eax,ecx
c0012c22:	eb 04                	jmp    c0012c28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c24:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c28:	01 c2                	add    edx,eax
c0012c2a:	89 16                	mov    DWORD PTR [esi],edx
c0012c2c:	eb 69                	jmp    c0012c97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c2e:	0f b6 db             	movzx  ebx,bl
c0012c31:	50                   	push   eax
c0012c32:	50                   	push   eax
c0012c33:	53                   	push   ebx
c0012c34:	68 cb ea 01 c0       	push   0xc001eacb
c0012c39:	e8 f2 78 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c46:	74 12                	je     c0012c5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	68 d6 ea 01 c0       	push   0xc001ead6
c0012c50:	e8 5e d5 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	eb 3d                	jmp    c0012c97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c5a:	83 ec 0c             	sub    esp,0xc
c0012c5d:	55                   	push   ebp
c0012c5e:	e8 61 7f ff ff       	call   c000abc4 <File::close()>
c0012c63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c66:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c6c:	59                   	pop    ecx
c0012c6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c71:	e8 53 4b ff ff       	call   c00077c9 <free>
c0012c76:	5b                   	pop    ebx
c0012c77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c7b:	e8 49 4b ff ff       	call   c00077c9 <free>
c0012c80:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c83:	e8 41 4b ff ff       	call   c00077c9 <free>
c0012c88:	5e                   	pop    esi
c0012c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c8d:	e8 37 4b ff ff       	call   c00077c9 <free>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	eb 21                	jmp    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c97:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c9b:	e9 76 fd ff ff       	jmp    c0012a16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012ca0:	83 ec 0c             	sub    esp,0xc
c0012ca3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ca7:	e8 1d 4b ff ff       	call   c00077c9 <free>
c0012cac:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012cb0:	83 c4 10             	add    esp,0x10
c0012cb3:	e9 eb fc ff ff       	jmp    c00129a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cb8:	31 c0                	xor    eax,eax
c0012cba:	eb 33                	jmp    c0012cef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	55                   	push   ebp
c0012cc0:	e8 ff 7e ff ff       	call   c000abc4 <File::close()>
c0012cc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cc8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ccb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cce:	58                   	pop    eax
c0012ccf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cd3:	e8 f1 4a ff ff       	call   c00077c9 <free>
c0012cd8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cdb:	e8 e9 4a ff ff       	call   c00077c9 <free>
c0012ce0:	5a                   	pop    edx
c0012ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce5:	e8 df 4a ff ff       	call   c00077c9 <free>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	b0 01                	mov    al,0x1
c0012cef:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012cf5:	5b                   	pop    ebx
c0012cf6:	5e                   	pop    esi
c0012cf7:	5f                   	pop    edi
c0012cf8:	5d                   	pop    ebp
c0012cf9:	c3                   	ret    

c0012cfa <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012cfa:	56                   	push   esi
c0012cfb:	31 d2                	xor    edx,edx
c0012cfd:	53                   	push   ebx
c0012cfe:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d08:	39 d3                	cmp    ebx,edx
c0012d0a:	7e 1b                	jle    c0012d27 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d0c:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d13:	39 c8                	cmp    eax,ecx
c0012d15:	77 0d                	ja     c0012d24 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d17:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d1e:	01 c6                	add    esi,eax
c0012d20:	39 ce                	cmp    esi,ecx
c0012d22:	77 05                	ja     c0012d29 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d24:	42                   	inc    edx
c0012d25:	eb e1                	jmp    c0012d08 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d27:	31 c0                	xor    eax,eax
c0012d29:	5b                   	pop    ebx
c0012d2a:	5e                   	pop    esi
c0012d2b:	c3                   	ret    

c0012d2c <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d2c:	53                   	push   ebx
c0012d2d:	31 c0                	xor    eax,eax
c0012d2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d33:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d39:	39 c3                	cmp    ebx,eax
c0012d3b:	7e 22                	jle    c0012d5f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d3d:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d44:	39 ca                	cmp    edx,ecx
c0012d46:	77 14                	ja     c0012d5c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d48:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d4f:	39 ca                	cmp    edx,ecx
c0012d51:	76 09                	jbe    c0012d5c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d53:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012d5a:	eb 05                	jmp    c0012d61 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d5c:	40                   	inc    eax
c0012d5d:	eb da                	jmp    c0012d39 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d5f:	31 c0                	xor    eax,eax
c0012d61:	5b                   	pop    ebx
c0012d62:	c3                   	ret    

c0012d63 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d63:	53                   	push   ebx
c0012d64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d68:	53                   	push   ebx
c0012d69:	e8 8c ff ff ff       	call   c0012cfa <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d6e:	5a                   	pop    edx
c0012d6f:	31 d2                	xor    edx,edx
c0012d71:	85 c0                	test   eax,eax
c0012d73:	74 04                	je     c0012d79 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d75:	89 da                	mov    edx,ebx
c0012d77:	29 c2                	sub    edx,eax
c0012d79:	89 d0                	mov    eax,edx
c0012d7b:	5b                   	pop    ebx
c0012d7c:	c3                   	ret    

c0012d7d <Thr::loadDLL(char const*, bool)>:
c0012d7d:	55                   	push   ebp
c0012d7e:	57                   	push   edi
c0012d7f:	56                   	push   esi
c0012d80:	53                   	push   ebx
c0012d81:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d87:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d8e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d95:	56                   	push   esi
c0012d96:	68 ee ea 01 c0       	push   0xc001eaee
c0012d9b:	e8 90 77 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0012da0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012da7:	e8 0d 4a ff ff       	call   c00077b9 <malloc>
c0012dac:	83 c4 0c             	add    esp,0xc
c0012daf:	89 c3                	mov    ebx,eax
c0012db1:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012db7:	56                   	push   esi
c0012db8:	50                   	push   eax
c0012db9:	e8 e8 7c ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	85 db                	test   ebx,ebx
c0012dc3:	75 3c                	jne    c0012e01 <Thr::loadDLL(char const*, bool)+0x84>
c0012dc5:	89 f8                	mov    eax,edi
c0012dc7:	84 c0                	test   al,al
c0012dc9:	0f 84 d2 01 00 00    	je     c0012fa1 <Thr::loadDLL(char const*, bool)+0x224>
c0012dcf:	55                   	push   ebp
c0012dd0:	55                   	push   ebp
c0012dd1:	68 ff ea 01 c0       	push   0xc001eaff
c0012dd6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012dda:	55                   	push   ebp
c0012ddb:	e8 20 d8 fe ff       	call   c0000600 <strcpy>
c0012de0:	58                   	pop    eax
c0012de1:	5a                   	pop    edx
c0012de2:	56                   	push   esi
c0012de3:	55                   	push   ebp
c0012de4:	e8 d7 d9 fe ff       	call   c00007c0 <strcat>
c0012de9:	59                   	pop    ecx
c0012dea:	58                   	pop    eax
c0012deb:	68 12 eb 01 c0       	push   0xc001eb12
c0012df0:	55                   	push   ebp
c0012df1:	e8 ca d9 fe ff       	call   c00007c0 <strcat>
c0012df6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012df9:	e8 b5 d3 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	51                   	push   ecx
c0012e02:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e06:	50                   	push   eax
c0012e07:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e0b:	50                   	push   eax
c0012e0c:	53                   	push   ebx
c0012e0d:	e8 00 80 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	85 db                	test   ebx,ebx
c0012e17:	74 0c                	je     c0012e25 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e19:	83 ec 0c             	sub    esp,0xc
c0012e1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e1e:	53                   	push   ebx
c0012e1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e22:	83 c4 10             	add    esp,0x10
c0012e25:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e2a:	75 0a                	jne    c0012e36 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e30:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e34:	75 3c                	jne    c0012e72 <Thr::loadDLL(char const*, bool)+0xf5>
c0012e36:	89 f8                	mov    eax,edi
c0012e38:	84 c0                	test   al,al
c0012e3a:	0f 84 49 01 00 00    	je     c0012f89 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e40:	51                   	push   ecx
c0012e41:	51                   	push   ecx
c0012e42:	68 ff ea 01 c0       	push   0xc001eaff
c0012e47:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e4b:	53                   	push   ebx
c0012e4c:	e8 af d7 fe ff       	call   c0000600 <strcpy>
c0012e51:	5d                   	pop    ebp
c0012e52:	58                   	pop    eax
c0012e53:	56                   	push   esi
c0012e54:	53                   	push   ebx
c0012e55:	e8 66 d9 fe ff       	call   c00007c0 <strcat>
c0012e5a:	58                   	pop    eax
c0012e5b:	5a                   	pop    edx
c0012e5c:	68 12 eb 01 c0       	push   0xc001eb12
c0012e61:	53                   	push   ebx
c0012e62:	e8 59 d9 fe ff       	call   c00007c0 <strcat>
c0012e67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e6a:	e8 44 d3 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	52                   	push   edx
c0012e73:	6a 03                	push   0x3
c0012e75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e7d:	05 ff 0f 00 00       	add    eax,0xfff
c0012e82:	83 d2 00             	adc    edx,0x0
c0012e85:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e89:	50                   	push   eax
c0012e8a:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012e90:	e8 a3 6b ff ff       	call   c0009a38 <VAS::allocatePages(int, int)>
c0012e95:	59                   	pop    ecx
c0012e96:	89 c3                	mov    ebx,eax
c0012e98:	5d                   	pop    ebp
c0012e99:	50                   	push   eax
c0012e9a:	68 36 d7 01 c0       	push   0xc001d736
c0012e9f:	e8 8c 76 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0012ea4:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ea7:	e8 94 d6 fe ff       	call   c0000540 <strlen>
c0012eac:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012eb2:	40                   	inc    eax
c0012eb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eb6:	e8 fe 48 ff ff       	call   c00077b9 <malloc>
c0012ebb:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012ec2:	58                   	pop    eax
c0012ec3:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ec8:	5a                   	pop    edx
c0012ec9:	56                   	push   esi
c0012eca:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012ed1:	e8 2a d7 fe ff       	call   c0000600 <strcpy>
c0012ed6:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012edb:	8d 50 01             	lea    edx,[eax+0x1]
c0012ede:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012ee5:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012eeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012eef:	83 c4 0c             	add    esp,0xc
c0012ef2:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012ef9:	6a 01                	push   0x1
c0012efb:	53                   	push   ebx
c0012efc:	56                   	push   esi
c0012efd:	e8 c2 f6 ff ff       	call   c00125c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f02:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f0e:	0f 85 89 00 00 00    	jne    c0012f9d <Thr::loadDLL(char const*, bool)+0x220>
c0012f14:	89 f8                	mov    eax,edi
c0012f16:	84 c0                	test   al,al
c0012f18:	74 73                	je     c0012f8d <Thr::loadDLL(char const*, bool)+0x210>
c0012f1a:	83 ec 0c             	sub    esp,0xc
c0012f1d:	68 14 eb 01 c0       	push   0xc001eb14
c0012f22:	e8 8c d2 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	eb 61                	jmp    c0012f8d <Thr::loadDLL(char const*, bool)+0x210>
c0012f2c:	50                   	push   eax
c0012f2d:	50                   	push   eax
c0012f2e:	89 e8                	mov    eax,ebp
c0012f30:	c1 e0 0c             	shl    eax,0xc
c0012f33:	01 d8                	add    eax,ebx
c0012f35:	50                   	push   eax
c0012f36:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f3c:	e8 55 66 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f46:	a8 60                	test   al,0x60
c0012f48:	75 11                	jne    c0012f5b <Thr::loadDLL(char const*, bool)+0x1de>
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f52:	50                   	push   eax
c0012f53:	e8 db 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	45                   	inc    ebp
c0012f5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f64:	05 ff 0f 00 00       	add    eax,0xfff
c0012f69:	bf 00 00 00 00       	mov    edi,0x0
c0012f6e:	83 d2 00             	adc    edx,0x0
c0012f71:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f75:	c1 ea 0c             	shr    edx,0xc
c0012f78:	39 c5                	cmp    ebp,eax
c0012f7a:	89 d1                	mov    ecx,edx
c0012f7c:	89 f8                	mov    eax,edi
c0012f7e:	19 c8                	sbb    eax,ecx
c0012f80:	72 aa                	jb     c0012f2c <Thr::loadDLL(char const*, bool)+0x1af>
c0012f82:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f87:	75 18                	jne    c0012fa1 <Thr::loadDLL(char const*, bool)+0x224>
c0012f89:	31 db                	xor    ebx,ebx
c0012f8b:	eb 14                	jmp    c0012fa1 <Thr::loadDLL(char const*, bool)+0x224>
c0012f8d:	83 ec 0c             	sub    esp,0xc
c0012f90:	68 33 eb 01 c0       	push   0xc001eb33
c0012f95:	e8 19 d2 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	31 ed                	xor    ebp,ebp
c0012f9f:	eb bb                	jmp    c0012f5c <Thr::loadDLL(char const*, bool)+0x1df>
c0012fa1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fa7:	89 d8                	mov    eax,ebx
c0012fa9:	5b                   	pop    ebx
c0012faa:	5e                   	pop    esi
c0012fab:	5f                   	pop    edi
c0012fac:	5d                   	pop    ebp
c0012fad:	c3                   	ret    

c0012fae <Thr::executeDLL(unsigned long, void*)>:
c0012fae:	56                   	push   esi
c0012faf:	53                   	push   ebx
c0012fb0:	52                   	push   edx
c0012fb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fb9:	85 db                	test   ebx,ebx
c0012fbb:	75 10                	jne    c0012fcd <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fbd:	83 ec 0c             	sub    esp,0xc
c0012fc0:	68 4f eb 01 c0       	push   0xc001eb4f
c0012fc5:	e8 e9 d1 ff ff       	call   c00101b3 <KePanic(char const*)>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	50                   	push   eax
c0012fce:	50                   	push   eax
c0012fcf:	53                   	push   ebx
c0012fd0:	68 79 eb 01 c0       	push   0xc001eb79
c0012fd5:	e8 56 75 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0012fda:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fde:	89 d8                	mov    eax,ebx
c0012fe0:	83 c4 14             	add    esp,0x14
c0012fe3:	5b                   	pop    ebx
c0012fe4:	5e                   	pop    esi
c0012fe5:	ff e0                	jmp    eax
c0012fe7:	90                   	nop

c0012fe8 <userModeEntryPoint(void*)>:
c0012fe8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012fed:	48                   	dec    eax
c0012fee:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012ff3:	75 03                	jne    c0012ff8 <userModeEntryPoint(void*)+0x10>
c0012ff5:	fb                   	sti    
c0012ff6:	66 90                	xchg   ax,ax
c0012ff8:	fb                   	sti    
c0012ff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ffe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013001:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013007:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001300b:	e9 2f d2 fe ff       	jmp    c000023f <goToUsermode>

c0013010 <changeTSS>:
c0013010:	83 ec 14             	sub    esp,0x14
c0013013:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013018:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001301b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013020:	c1 e2 15             	shl    edx,0x15
c0013023:	29 d0                	sub    eax,edx
c0013025:	50                   	push   eax
c0013026:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001302b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013031:	05 7c 11 00 00       	add    eax,0x117c
c0013036:	50                   	push   eax
c0013037:	e8 9c 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c001303c:	83 c4 1c             	add    esp,0x1c
c001303f:	c3                   	ret    

c0013040 <switchToThread(ThreadControlBlock*)>:
c0013040:	57                   	push   edi
c0013041:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013046:	56                   	push   esi
c0013047:	85 c0                	test   eax,eax
c0013049:	53                   	push   ebx
c001304a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001304e:	0f 85 90 00 00 00    	jne    c00130e4 <switchToThread(ThreadControlBlock*)+0xa4>
c0013054:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013057:	80 fa ff             	cmp    dl,0xff
c001305a:	0f 84 80 00 00 00    	je     c00130e0 <switchToThread(ThreadControlBlock*)+0xa0>
c0013060:	81 e2 ff 00 00 00    	and    edx,0xff
c0013066:	b8 00 04 00 00       	mov    eax,0x400
c001306b:	29 d0                	sub    eax,edx
c001306d:	d1 f8                	sar    eax,1
c001306f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013072:	66 90                	xchg   ax,ax
c0013074:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013077:	e8 1d 26 00 00       	call   c0015699 <HalQueryPerformanceCounter()>
c001307c:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013081:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c0013087:	89 c6                	mov    esi,eax
c0013089:	89 d7                	mov    edi,edx
c001308b:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c0013091:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c0013096:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c001309c:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c00130a2:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00130a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130ae:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c00130b4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130b7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130ba:	01 c6                	add    esi,eax
c00130bc:	11 d7                	adc    edi,edx
c00130be:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130c1:	83 ec 0c             	sub    esp,0xc
c00130c4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130c7:	53                   	push   ebx
c00130c8:	e8 aa d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130cd:	0f 20 c0             	mov    eax,cr0
c00130d0:	83 c8 08             	or     eax,0x8
c00130d3:	0f 22 c0             	mov    cr0,eax
c00130d6:	83 c4 10             	add    esp,0x10
c00130d9:	5b                   	pop    ebx
c00130da:	5e                   	pop    esi
c00130db:	5f                   	pop    edi
c00130dc:	c3                   	ret    
c00130dd:	8d 76 00             	lea    esi,[esi+0x0]
c00130e0:	31 c0                	xor    eax,eax
c00130e2:	eb 90                	jmp    c0013074 <switchToThread(ThreadControlBlock*)+0x34>
c00130e4:	5b                   	pop    ebx
c00130e5:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00130ef:	5e                   	pop    esi
c00130f0:	5f                   	pop    edi
c00130f1:	c3                   	ret    
c00130f2:	66 90                	xchg   ax,ax

c00130f4 <Process::addArgs(char**)>:
c00130f4:	57                   	push   edi
c00130f5:	56                   	push   esi
c00130f6:	53                   	push   ebx
c00130f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130ff:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013109:	85 ff                	test   edi,edi
c001310b:	74 43                	je     c0013150 <Process::addArgs(char**)+0x5c>
c001310d:	8b 07                	mov    eax,DWORD PTR [edi]
c001310f:	85 c0                	test   eax,eax
c0013111:	74 3d                	je     c0013150 <Process::addArgs(char**)+0x5c>
c0013113:	31 db                	xor    ebx,ebx
c0013115:	8d 76 00             	lea    esi,[esi+0x0]
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	50                   	push   eax
c001311c:	e8 1f d4 fe ff       	call   c0000540 <strlen>
c0013121:	40                   	inc    eax
c0013122:	89 04 24             	mov    DWORD PTR [esp],eax
c0013125:	e8 8f 46 ff ff       	call   c00077b9 <malloc>
c001312a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013131:	5a                   	pop    edx
c0013132:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013135:	59                   	pop    ecx
c0013136:	43                   	inc    ebx
c0013137:	52                   	push   edx
c0013138:	50                   	push   eax
c0013139:	e8 c2 d4 fe ff       	call   c0000600 <strcpy>
c001313e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001314a:	85 c0                	test   eax,eax
c001314c:	75 ca                	jne    c0013118 <Process::addArgs(char**)+0x24>
c001314e:	66 90                	xchg   ax,ax
c0013150:	5b                   	pop    ebx
c0013151:	5e                   	pop    esi
c0013152:	5f                   	pop    edi
c0013153:	c3                   	ret    

c0013154 <Process::Process(char const*, Process*, char**)>:
c0013154:	56                   	push   esi
c0013155:	53                   	push   ebx
c0013156:	83 ec 14             	sub    esp,0x14
c0013159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001315d:	05 0c 02 00 00       	add    eax,0x20c
c0013162:	bb 07 00 00 00       	mov    ebx,0x7
c0013167:	89 c6                	mov    esi,eax
c0013169:	8d 76 00             	lea    esi,[esi+0x0]
c001316c:	85 db                	test   ebx,ebx
c001316e:	78 14                	js     c0013184 <Process::Process(char const*, Process*, char**)+0x30>
c0013170:	83 ec 0c             	sub    esp,0xc
c0013173:	56                   	push   esi
c0013174:	e8 93 98 00 00       	call   c001ca0c <ThreadControlBlock::ThreadControlBlock()>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	83 c6 5f             	add    esi,0x5f
c001317f:	4b                   	dec    ebx
c0013180:	eb ea                	jmp    c001316c <Process::Process(char const*, Process*, char**)+0x18>
c0013182:	66 90                	xchg   ax,ax
c0013184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013188:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001318f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013193:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131a1:	e8 02 ce ff ff       	call   c000ffa8 <Krnl::newProcessEnv(Process*)>
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	89 c2                	mov    edx,eax
c00131ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131af:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131b9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131c2:	a1 2c fb 01 c0       	mov    eax,ds:0xc001fb2c
c00131c7:	8d 50 01             	lea    edx,[eax+0x1]
c00131ca:	89 15 2c fb 01 c0    	mov    DWORD PTR ds:0xc001fb2c,edx
c00131d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131d4:	89 02                	mov    DWORD PTR [edx],eax
c00131d6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131e5:	e8 cf 45 ff ff       	call   c00077b9 <malloc>
c00131ea:	83 c4 10             	add    esp,0x10
c00131ed:	89 c3                	mov    ebx,eax
c00131ef:	83 ec 08             	sub    esp,0x8
c00131f2:	6a 00                	push   0x0
c00131f4:	53                   	push   ebx
c00131f5:	e8 e8 6b ff ff       	call   c0009de2 <VAS::VAS(bool)>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013201:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001320b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013219:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001321d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013223:	e8 f6 d2 ff ff       	call   c001051e <KeInitSignals()>
c0013228:	89 c2                	mov    edx,eax
c001322a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001322e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013238:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001323e:	85 c0                	test   eax,eax
c0013240:	74 42                	je     c0013284 <Process::Process(char const*, Process*, char**)+0x130>
c0013242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013246:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001324c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013256:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001325c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013260:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013266:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001326c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013270:	05 0c 01 00 00       	add    eax,0x10c
c0013275:	83 ec 08             	sub    esp,0x8
c0013278:	52                   	push   edx
c0013279:	50                   	push   eax
c001327a:	e8 81 d3 fe ff       	call   c0000600 <strcpy>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	eb 64                	jmp    c00132e8 <Process::Process(char const*, Process*, char**)+0x194>
c0013284:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001328c:	83 ec 0c             	sub    esp,0xc
c001328f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013293:	e8 21 45 ff ff       	call   c00077b9 <malloc>
c0013298:	83 c4 10             	add    esp,0x10
c001329b:	89 c3                	mov    ebx,eax
c001329d:	83 ec 08             	sub    esp,0x8
c00132a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a4:	53                   	push   ebx
c00132a5:	e8 50 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132aa:	83 c4 10             	add    esp,0x10
c00132ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132b1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132c1:	83 ec 0c             	sub    esp,0xc
c00132c4:	50                   	push   eax
c00132c5:	e8 d0 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132d1:	05 0c 01 00 00       	add    eax,0x10c
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	68 98 eb 01 c0       	push   0xc001eb98
c00132de:	50                   	push   eax
c00132df:	e8 1c d3 fe ff       	call   c0000600 <strcpy>
c00132e4:	83 c4 10             	add    esp,0x10
c00132e7:	90                   	nop
c00132e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ec:	83 c0 0c             	add    eax,0xc
c00132ef:	83 ec 08             	sub    esp,0x8
c00132f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f6:	50                   	push   eax
c00132f7:	e8 04 d3 fe ff       	call   c0000600 <strcpy>
c00132fc:	83 c4 10             	add    esp,0x10
c00132ff:	83 ec 08             	sub    esp,0x8
c0013302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013306:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001330a:	e8 e5 fd ff ff       	call   c00130f4 <Process::addArgs(char**)>
c001330f:	83 c4 10             	add    esp,0x10
c0013312:	83 ec 08             	sub    esp,0x8
c0013315:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013319:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001331d:	e8 6c ed ff ff       	call   c001208e <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013322:	83 c4 10             	add    esp,0x10
c0013325:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013329:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001332d:	83 f0 01             	xor    eax,0x1
c0013330:	88 c2                	mov    dl,al
c0013332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013336:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001333c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013340:	25 ff 00 00 00       	and    eax,0xff
c0013345:	83 ec 08             	sub    esp,0x8
c0013348:	50                   	push   eax
c0013349:	68 f0 eb 01 c0       	push   0xc001ebf0
c001334e:	e8 dd 71 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	90                   	nop
c0013357:	83 c4 14             	add    esp,0x14
c001335a:	5b                   	pop    ebx
c001335b:	5e                   	pop    esi
c001335c:	c3                   	ret    
c001335d:	90                   	nop
c001335e:	66 90                	xchg   ax,ax

c0013360 <Process::Process(bool, char const*, Process*, char**)>:
c0013360:	56                   	push   esi
c0013361:	53                   	push   ebx
c0013362:	83 ec 24             	sub    esp,0x24
c0013365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013369:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001336d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013371:	05 0c 02 00 00       	add    eax,0x20c
c0013376:	bb 07 00 00 00       	mov    ebx,0x7
c001337b:	89 c6                	mov    esi,eax
c001337d:	8d 76 00             	lea    esi,[esi+0x0]
c0013380:	85 db                	test   ebx,ebx
c0013382:	78 14                	js     c0013398 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	56                   	push   esi
c0013388:	e8 7f 96 00 00       	call   c001ca0c <ThreadControlBlock::ThreadControlBlock()>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	83 c6 5f             	add    esi,0x5f
c0013393:	4b                   	dec    ebx
c0013394:	eb ea                	jmp    c0013380 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013396:	66 90                	xchg   ax,ax
c0013398:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001339c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133a7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133b5:	e8 ee cb ff ff       	call   c000ffa8 <Krnl::newProcessEnv(Process*)>
c00133ba:	83 c4 10             	add    esp,0x10
c00133bd:	89 c2                	mov    edx,eax
c00133bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133c3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133cd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133d6:	a1 2c fb 01 c0       	mov    eax,ds:0xc001fb2c
c00133db:	8d 50 01             	lea    edx,[eax+0x1]
c00133de:	89 15 2c fb 01 c0    	mov    DWORD PTR ds:0xc001fb2c,edx
c00133e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133e8:	89 02                	mov    DWORD PTR [edx],eax
c00133ea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00133f9:	e8 bb 43 ff ff       	call   c00077b9 <malloc>
c00133fe:	83 c4 10             	add    esp,0x10
c0013401:	89 c3                	mov    ebx,eax
c0013403:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013407:	25 ff 00 00 00       	and    eax,0xff
c001340c:	83 ec 08             	sub    esp,0x8
c001340f:	50                   	push   eax
c0013410:	53                   	push   ebx
c0013411:	e8 cc 69 ff ff       	call   c0009de2 <VAS::VAS(bool)>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001341d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013427:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013431:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013435:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013439:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001343f:	e8 da d0 ff ff       	call   c001051e <KeInitSignals()>
c0013444:	89 c2                	mov    edx,eax
c0013446:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001344a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013450:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013454:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001345a:	85 c0                	test   eax,eax
c001345c:	74 42                	je     c00134a0 <Process::Process(bool, char const*, Process*, char**)+0x140>
c001345e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013462:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013468:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001346e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013472:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013478:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001347c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013482:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001348c:	05 0c 01 00 00       	add    eax,0x10c
c0013491:	83 ec 08             	sub    esp,0x8
c0013494:	52                   	push   edx
c0013495:	50                   	push   eax
c0013496:	e8 65 d1 fe ff       	call   c0000600 <strcpy>
c001349b:	83 c4 10             	add    esp,0x10
c001349e:	eb 64                	jmp    c0013504 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134a0:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134a8:	83 ec 0c             	sub    esp,0xc
c00134ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134af:	e8 05 43 ff ff       	call   c00077b9 <malloc>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	89 c3                	mov    ebx,eax
c00134b9:	83 ec 08             	sub    esp,0x8
c00134bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134c0:	53                   	push   ebx
c00134c1:	e8 34 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134c6:	83 c4 10             	add    esp,0x10
c00134c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134cd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134dd:	83 ec 0c             	sub    esp,0xc
c00134e0:	50                   	push   eax
c00134e1:	e8 b4 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00134e6:	83 c4 10             	add    esp,0x10
c00134e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ed:	05 0c 01 00 00       	add    eax,0x10c
c00134f2:	83 ec 08             	sub    esp,0x8
c00134f5:	68 98 eb 01 c0       	push   0xc001eb98
c00134fa:	50                   	push   eax
c00134fb:	e8 00 d1 fe ff       	call   c0000600 <strcpy>
c0013500:	83 c4 10             	add    esp,0x10
c0013503:	90                   	nop
c0013504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013508:	83 c0 0c             	add    eax,0xc
c001350b:	83 ec 08             	sub    esp,0x8
c001350e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013512:	50                   	push   eax
c0013513:	e8 e8 d0 fe ff       	call   c0000600 <strcpy>
c0013518:	83 c4 10             	add    esp,0x10
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013522:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013526:	e8 c9 fb ff ff       	call   c00130f4 <Process::addArgs(char**)>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	90                   	nop
c001352f:	83 c4 24             	add    esp,0x24
c0013532:	5b                   	pop    ebx
c0013533:	5e                   	pop    esi
c0013534:	c3                   	ret    
c0013535:	8d 76 00             	lea    esi,[esi+0x0]

c0013538 <taskStartupFunction>:
c0013538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001353d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013540:	c3                   	ret    
c0013541:	90                   	nop
c0013542:	66 90                	xchg   ax,ax

c0013544 <Semaphore::Semaphore(int)>:
c0013544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001354c:	89 10                	mov    DWORD PTR [eax],edx
c001354e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013552:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001355d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013568:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001356f:	90                   	nop
c0013570:	c3                   	ret    
c0013571:	90                   	nop
c0013572:	66 90                	xchg   ax,ax

c0013574 <Mutex::Mutex()>:
c0013574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013578:	6a 01                	push   0x1
c001357a:	50                   	push   eax
c001357b:	e8 c4 ff ff ff       	call   c0013544 <Semaphore::Semaphore(int)>
c0013580:	83 c4 08             	add    esp,0x8
c0013583:	90                   	nop
c0013584:	c3                   	ret    
c0013585:	90                   	nop
c0013586:	66 90                	xchg   ax,ax

c0013588 <Process::createThread(void (*)(void*), void*, int)>:
c0013588:	57                   	push   edi
c0013589:	31 c9                	xor    ecx,ecx
c001358b:	56                   	push   esi
c001358c:	53                   	push   ebx
c001358d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013591:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013598:	89 f2                	mov    edx,esi
c001359a:	66 90                	xchg   ax,ax
c001359c:	31 c0                	xor    eax,eax
c001359e:	66 89 d0             	mov    ax,dx
c00135a1:	83 e2 01             	and    edx,0x1
c00135a4:	74 12                	je     c00135b8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135a6:	d1 f8                	sar    eax,1
c00135a8:	41                   	inc    ecx
c00135a9:	89 c2                	mov    edx,eax
c00135ab:	83 f9 10             	cmp    ecx,0x10
c00135ae:	75 ec                	jne    c001359c <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135b0:	31 db                	xor    ebx,ebx
c00135b2:	89 d8                	mov    eax,ebx
c00135b4:	5b                   	pop    ebx
c00135b5:	5e                   	pop    esi
c00135b6:	5f                   	pop    edi
c00135b7:	c3                   	ret    
c00135b8:	b8 01 00 00 00       	mov    eax,0x1
c00135bd:	d3 e0                	shl    eax,cl
c00135bf:	09 c6                	or     esi,eax
c00135c1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135c4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135cb:	01 c0                	add    eax,eax
c00135cd:	01 c8                	add    eax,ecx
c00135cf:	8d 04 80             	lea    eax,[eax+eax*4]
c00135d2:	01 d8                	add    eax,ebx
c00135d4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135db:	75 0b                	jne    c00135e8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135dd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135e7:	90                   	nop
c00135e8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00135ee:	83 ec 08             	sub    esp,0x8
c00135f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135f4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135f7:	01 c0                	add    eax,eax
c00135f9:	01 c8                	add    eax,ecx
c00135fb:	8d 3c 80             	lea    edi,[eax+eax*4]
c00135fe:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013601:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013607:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001360d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013611:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013617:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001361d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013624:	89 ca                	mov    edx,ecx
c0013626:	f7 da                	neg    edx
c0013628:	c1 e2 15             	shl    edx,0x15
c001362b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013631:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013637:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001363b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013645:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001364b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001364f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013655:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001365f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013669:	53                   	push   ebx
c001366a:	68 84 51 02 c0       	push   0xc0025184
c001366f:	e8 38 91 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	89 d8                	mov    eax,ebx
c0013679:	5b                   	pop    ebx
c001367a:	5e                   	pop    esi
c001367b:	5f                   	pop    edi
c001367c:	c3                   	ret    
c001367d:	90                   	nop
c001367e:	66 90                	xchg   ax,ax

c0013680 <Process::createUserThread()>:
c0013680:	83 ec 0c             	sub    esp,0xc
c0013683:	68 80 00 00 00       	push   0x80
c0013688:	6a 00                	push   0x0
c001368a:	68 e8 2f 01 c0       	push   0xc0012fe8
c001368f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013693:	50                   	push   eax
c0013694:	e8 ef fe ff ff       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c0013699:	83 c4 1c             	add    esp,0x1c
c001369c:	c3                   	ret    
c001369d:	8d 76 00             	lea    esi,[esi+0x0]

c00136a0 <setupMultitasking(void (*)())>:
c00136a0:	56                   	push   esi
c00136a1:	53                   	push   ebx
c00136a2:	53                   	push   ebx
c00136a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a7:	eb 13                	jmp    c00136bc <setupMultitasking(void (*)())+0x1c>
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	68 84 51 02 c0       	push   0xc0025184
c00136b4:	e8 3b 90 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136b9:	83 c4 10             	add    esp,0x10
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	68 84 51 02 c0       	push   0xc0025184
c00136c4:	e8 07 90 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136c9:	83 c4 10             	add    esp,0x10
c00136cc:	84 c0                	test   al,al
c00136ce:	74 dc                	je     c00136ac <setupMultitasking(void (*)())+0xc>
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	68 24 07 00 00       	push   0x724
c00136d8:	e8 dc 40 ff ff       	call   c00077b9 <malloc>
c00136dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136e4:	89 c3                	mov    ebx,eax
c00136e6:	6a 00                	push   0x0
c00136e8:	68 9c eb 01 c0       	push   0xc001eb9c
c00136ed:	6a 01                	push   0x1
c00136ef:	50                   	push   eax
c00136f0:	e8 6b fc ff ff       	call   c0013360 <Process::Process(bool, char const*, Process*, char**)>
c00136f5:	83 c4 14             	add    esp,0x14
c00136f8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00136fe:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c0013704:	50                   	push   eax
c0013705:	e8 ed 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001370a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013712:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001371c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013722:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013725:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001372f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013735:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001373b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013745:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001374f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013759:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001375f:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013765:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001376f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013775:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001377f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013785:	5a                   	pop    edx
c0013786:	59                   	pop    ecx
c0013787:	68 98 eb 01 c0       	push   0xc001eb98
c001378c:	50                   	push   eax
c001378d:	e8 6e ce fe ff       	call   c0000600 <strcpy>
c0013792:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013799:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001379d:	83 c4 14             	add    esp,0x14
c00137a0:	5b                   	pop    ebx
c00137a1:	5e                   	pop    esi
c00137a2:	e9 c2 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137a7:	90                   	nop

c00137a8 <schedule()>:
c00137a8:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00137ae:	85 d2                	test   edx,edx
c00137b0:	74 0e                	je     c00137c0 <schedule()+0x18>
c00137b2:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00137bc:	c3                   	ret    
c00137bd:	8d 76 00             	lea    esi,[esi+0x0]
c00137c0:	53                   	push   ebx
c00137c1:	83 ec 14             	sub    esp,0x14
c00137c4:	68 84 51 02 c0       	push   0xc0025184
c00137c9:	e8 02 8f 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	84 c0                	test   al,al
c00137d3:	75 3b                	jne    c0013810 <schedule()+0x68>
c00137d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137dd:	4a                   	dec    edx
c00137de:	74 38                	je     c0013818 <schedule()+0x70>
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	68 84 51 02 c0       	push   0xc0025184
c00137e8:	e8 ff 8e 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137ed:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00137f4:	89 c3                	mov    ebx,eax
c00137f6:	e8 f9 8e 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137fb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013802:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013805:	e8 36 f8 ff ff       	call   c0013040 <switchToThread(ThreadControlBlock*)>
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	8d 76 00             	lea    esi,[esi+0x0]
c0013810:	83 c4 08             	add    esp,0x8
c0013813:	5b                   	pop    ebx
c0013814:	c3                   	ret    
c0013815:	8d 76 00             	lea    esi,[esi+0x0]
c0013818:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001381f:	83 ec 08             	sub    esp,0x8
c0013822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013827:	50                   	push   eax
c0013828:	68 84 51 02 c0       	push   0xc0025184
c001382d:	e8 7a 8f 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013832:	83 c4 10             	add    esp,0x10
c0013835:	eb a9                	jmp    c00137e0 <schedule()+0x38>
c0013837:	90                   	nop

c0013838 <Semaphore::tryAcquire()>:
c0013838:	53                   	push   ebx
c0013839:	83 ec 08             	sub    esp,0x8
c001383c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013840:	fa                   	cli    
c0013841:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013846:	8d 50 01             	lea    edx,[eax+0x1]
c0013849:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001384f:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013855:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013858:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c001385e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013861:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013863:	7c 33                	jl     c0013898 <Semaphore::tryAcquire()+0x60>
c0013865:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001386b:	85 d2                	test   edx,edx
c001386d:	75 0d                	jne    c001387c <Semaphore::tryAcquire()+0x44>
c001386f:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c0013875:	85 d2                	test   edx,edx
c0013877:	75 6b                	jne    c00138e4 <Semaphore::tryAcquire()+0xac>
c0013879:	8d 76 00             	lea    esi,[esi+0x0]
c001387c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013881:	85 c0                	test   eax,eax
c0013883:	74 0b                	je     c0013890 <Semaphore::tryAcquire()+0x58>
c0013885:	8d 76 00             	lea    esi,[esi+0x0]
c0013888:	31 c0                	xor    eax,eax
c001388a:	83 c4 08             	add    esp,0x8
c001388d:	5b                   	pop    ebx
c001388e:	c3                   	ret    
c001388f:	90                   	nop
c0013890:	fb                   	sti    
c0013891:	83 c4 08             	add    esp,0x8
c0013894:	5b                   	pop    ebx
c0013895:	c3                   	ret    
c0013896:	66 90                	xchg   ax,ax
c0013898:	43                   	inc    ebx
c0013899:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001389f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138a2:	85 d2                	test   edx,edx
c00138a4:	75 22                	jne    c00138c8 <Semaphore::tryAcquire()+0x90>
c00138a6:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c00138ac:	85 c9                	test   ecx,ecx
c00138ae:	74 18                	je     c00138c8 <Semaphore::tryAcquire()+0x90>
c00138b0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138ba:	e8 e9 fe ff ff       	call   c00137a8 <schedule()>
c00138bf:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138c4:	48                   	dec    eax
c00138c5:	8d 76 00             	lea    esi,[esi+0x0]
c00138c8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138cd:	85 c0                	test   eax,eax
c00138cf:	75 0b                	jne    c00138dc <Semaphore::tryAcquire()+0xa4>
c00138d1:	fb                   	sti    
c00138d2:	b0 01                	mov    al,0x1
c00138d4:	83 c4 08             	add    esp,0x8
c00138d7:	5b                   	pop    ebx
c00138d8:	c3                   	ret    
c00138d9:	8d 76 00             	lea    esi,[esi+0x0]
c00138dc:	b0 01                	mov    al,0x1
c00138de:	83 c4 08             	add    esp,0x8
c00138e1:	5b                   	pop    ebx
c00138e2:	c3                   	ret    
c00138e3:	90                   	nop
c00138e4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138ee:	e8 b5 fe ff ff       	call   c00137a8 <schedule()>
c00138f3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138f8:	48                   	dec    eax
c00138f9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138fe:	85 c0                	test   eax,eax
c0013900:	75 86                	jne    c0013888 <Semaphore::tryAcquire()+0x50>
c0013902:	eb 8c                	jmp    c0013890 <Semaphore::tryAcquire()+0x58>

c0013904 <Semaphore::assertLocked(char const*)>:
c0013904:	83 ec 0c             	sub    esp,0xc
c0013907:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001390b:	fa                   	cli    
c001390c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013912:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013917:	8d 48 01             	lea    ecx,[eax+0x1]
c001391a:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013920:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013922:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013925:	7c 29                	jl     c0013950 <Semaphore::assertLocked(char const*)+0x4c>
c0013927:	90                   	nop
c0013928:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001392d:	85 c0                	test   eax,eax
c001392f:	75 0b                	jne    c001393c <Semaphore::assertLocked(char const*)+0x38>
c0013931:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013936:	85 c0                	test   eax,eax
c0013938:	75 2e                	jne    c0013968 <Semaphore::assertLocked(char const*)+0x64>
c001393a:	66 90                	xchg   ax,ax
c001393c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013941:	48                   	dec    eax
c0013942:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013947:	75 03                	jne    c001394c <Semaphore::assertLocked(char const*)+0x48>
c0013949:	fb                   	sti    
c001394a:	66 90                	xchg   ax,ax
c001394c:	83 c4 0c             	add    esp,0xc
c001394f:	c3                   	ret    
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013957:	52                   	push   edx
c0013958:	e8 56 c8 ff ff       	call   c00101b3 <KePanic(char const*)>
c001395d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	48                   	dec    eax
c0013966:	eb c0                	jmp    c0013928 <Semaphore::assertLocked(char const*)+0x24>
c0013968:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013972:	e8 31 fe ff ff       	call   c00137a8 <schedule()>
c0013977:	eb c3                	jmp    c001393c <Semaphore::assertLocked(char const*)+0x38>
c0013979:	8d 76 00             	lea    esi,[esi+0x0]

c001397c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001397c:	83 ec 0c             	sub    esp,0xc
c001397f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013984:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013988:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001398b:	e8 18 fe ff ff       	call   c00137a8 <schedule()>
c0013990:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013995:	48                   	dec    eax
c0013996:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001399b:	75 03                	jne    c00139a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001399d:	fb                   	sti    
c001399e:	66 90                	xchg   ax,ax
c00139a0:	83 c4 0c             	add    esp,0xc
c00139a3:	c3                   	ret    

c00139a4 <blockTask(TaskState)>:
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	fa                   	cli    
c00139a8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139ba:	e8 e9 fd ff ff       	call   c00137a8 <schedule()>
c00139bf:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139c4:	48                   	dec    eax
c00139c5:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139ca:	75 04                	jne    c00139d0 <blockTask(TaskState)+0x2c>
c00139cc:	fb                   	sti    
c00139cd:	8d 76 00             	lea    esi,[esi+0x0]
c00139d0:	83 c4 0c             	add    esp,0xc
c00139d3:	c3                   	ret    

c00139d4 <waitTask(int, int*, int)>:
c00139d4:	83 ec 18             	sub    esp,0x18
c00139d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139e0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ec:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00139ef:	6a 07                	push   0x7
c00139f1:	e8 ae ff ff ff       	call   c00139a4 <blockTask(TaskState)>
c00139f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a01:	85 d2                	test   edx,edx
c0013a03:	74 0b                	je     c0013a10 <waitTask(int, int*, int)+0x3c>
c0013a05:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a08:	89 02                	mov    DWORD PTR [edx],eax
c0013a0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a0f:	90                   	nop
c0013a10:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a13:	83 c4 0c             	add    esp,0xc
c0013a16:	c3                   	ret    
c0013a17:	90                   	nop

c0013a18 <milliTenthSleepUntil(unsigned int)>:
c0013a18:	83 ec 0c             	sub    esp,0xc
c0013a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1f:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a25:	76 05                	jbe    c0013a2c <milliTenthSleepUntil(unsigned int)+0x14>
c0013a27:	90                   	nop
c0013a28:	83 c4 0c             	add    esp,0xc
c0013a2b:	c3                   	ret    
c0013a2c:	fa                   	cli    
c0013a2d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a33:	83 ec 08             	sub    esp,0x8
c0013a36:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a42:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a45:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a4b:	52                   	push   edx
c0013a4c:	68 78 51 02 c0       	push   0xc0025178
c0013a51:	e8 56 8d 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a56:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a5d:	e8 42 ff ff ff       	call   c00139a4 <blockTask(TaskState)>
c0013a62:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a67:	83 c4 10             	add    esp,0x10
c0013a6a:	48                   	dec    eax
c0013a6b:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a70:	85 c0                	test   eax,eax
c0013a72:	75 0c                	jne    c0013a80 <milliTenthSleepUntil(unsigned int)+0x68>
c0013a74:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a79:	85 c0                	test   eax,eax
c0013a7b:	75 17                	jne    c0013a94 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a80:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a85:	48                   	dec    eax
c0013a86:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a8b:	75 9b                	jne    c0013a28 <milliTenthSleepUntil(unsigned int)+0x10>
c0013a8d:	fb                   	sti    
c0013a8e:	83 c4 0c             	add    esp,0xc
c0013a91:	c3                   	ret    
c0013a92:	66 90                	xchg   ax,ax
c0013a94:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a9e:	e8 05 fd ff ff       	call   c00137a8 <schedule()>
c0013aa3:	eb db                	jmp    c0013a80 <milliTenthSleepUntil(unsigned int)+0x68>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]

c0013aa8 <milliTenthSleep(unsigned int)>:
c0013aa8:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013aad:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013ab1:	e9 62 ff ff ff       	jmp    c0013a18 <milliTenthSleepUntil(unsigned int)>
c0013ab6:	66 90                	xchg   ax,ax

c0013ab8 <sleep(unsigned int)>:
c0013ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013abc:	8d 04 80             	lea    eax,[eax+eax*4]
c0013abf:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ac2:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ac5:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ac8:	c1 e0 04             	shl    eax,0x4
c0013acb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013acf:	eb d7                	jmp    c0013aa8 <milliTenthSleep(unsigned int)>
c0013ad1:	90                   	nop
c0013ad2:	66 90                	xchg   ax,ax

c0013ad4 <Semaphore::acquire()>:
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013adb:	fa                   	cli    
c0013adc:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ae1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ae7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013aea:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013af0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013af3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013af5:	7d 2d                	jge    c0013b24 <Semaphore::acquire()+0x50>
c0013af7:	41                   	inc    ecx
c0013af8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013afb:	90                   	nop
c0013afc:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b01:	85 c0                	test   eax,eax
c0013b03:	75 0b                	jne    c0013b10 <Semaphore::acquire()+0x3c>
c0013b05:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b0a:	85 c0                	test   eax,eax
c0013b0c:	75 62                	jne    c0013b70 <Semaphore::acquire()+0x9c>
c0013b0e:	66 90                	xchg   ax,ax
c0013b10:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b15:	48                   	dec    eax
c0013b16:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b1b:	75 03                	jne    c0013b20 <Semaphore::acquire()+0x4c>
c0013b1d:	fb                   	sti    
c0013b1e:	66 90                	xchg   ax,ax
c0013b20:	83 c4 0c             	add    esp,0xc
c0013b23:	c3                   	ret    
c0013b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b30:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b33:	85 c9                	test   ecx,ecx
c0013b35:	74 4d                	je     c0013b84 <Semaphore::acquire()+0xb0>
c0013b37:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b3a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b40:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b43:	90                   	nop
c0013b44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b49:	83 ec 0c             	sub    esp,0xc
c0013b4c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b4f:	68 18 ec 01 c0       	push   0xc001ec18
c0013b54:	e8 d7 69 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0013b59:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b60:	e8 3f fe ff ff       	call   c00139a4 <blockTask(TaskState)>
c0013b65:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b6a:	83 c4 10             	add    esp,0x10
c0013b6d:	48                   	dec    eax
c0013b6e:	eb 8c                	jmp    c0013afc <Semaphore::acquire()+0x28>
c0013b70:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b7a:	e8 29 fc ff ff       	call   c00137a8 <schedule()>
c0013b7f:	eb 8f                	jmp    c0013b10 <Semaphore::acquire()+0x3c>
c0013b81:	8d 76 00             	lea    esi,[esi+0x0]
c0013b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b8c:	eb b6                	jmp    c0013b44 <Semaphore::acquire()+0x70>
c0013b8e:	66 90                	xchg   ax,ax

c0013b90 <taskReturned>:
c0013b90:	83 ec 18             	sub    esp,0x18
c0013b93:	68 38 ec 01 c0       	push   0xc001ec38
c0013b98:	e8 16 c6 ff ff       	call   c00101b3 <KePanic(char const*)>
c0013b9d:	83 c4 10             	add    esp,0x10
c0013ba0:	83 ec 0c             	sub    esp,0xc
c0013ba3:	6a 02                	push   0x2
c0013ba5:	e8 fa fd ff ff       	call   c00139a4 <blockTask(TaskState)>
c0013baa:	fa                   	cli    
c0013bab:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bb1:	e8 f2 fb ff ff       	call   c00137a8 <schedule()>
c0013bb6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	48                   	dec    eax
c0013bbf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013bc4:	85 c0                	test   eax,eax
c0013bc6:	75 d8                	jne    c0013ba0 <taskReturned+0x10>
c0013bc8:	fb                   	sti    
c0013bc9:	eb d5                	jmp    c0013ba0 <taskReturned+0x10>
c0013bcb:	90                   	nop

c0013bcc <Thr::processFromPID(int)>:
c0013bcc:	57                   	push   edi
c0013bcd:	56                   	push   esi
c0013bce:	53                   	push   ebx
c0013bcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bd3:	fa                   	cli    
c0013bd4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bda:	83 ec 0c             	sub    esp,0xc
c0013bdd:	68 84 51 02 c0       	push   0xc0025184
c0013be2:	e8 05 8b 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013be7:	83 c4 10             	add    esp,0x10
c0013bea:	89 c7                	mov    edi,eax
c0013bec:	eb 16                	jmp    c0013c04 <Thr::processFromPID(int)+0x38>
c0013bee:	66 90                	xchg   ax,ax
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	68 84 51 02 c0       	push   0xc0025184
c0013bf8:	e8 ef 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	39 f8                	cmp    eax,edi
c0013c02:	74 4c                	je     c0013c50 <Thr::processFromPID(int)+0x84>
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	68 84 51 02 c0       	push   0xc0025184
c0013c0c:	e8 db 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c11:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c18:	89 c3                	mov    ebx,eax
c0013c1a:	e8 d5 8a 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c1f:	58                   	pop    eax
c0013c20:	5a                   	pop    edx
c0013c21:	53                   	push   ebx
c0013c22:	68 84 51 02 c0       	push   0xc0025184
c0013c27:	e8 80 8b 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c2c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c2f:	83 c4 10             	add    esp,0x10
c0013c32:	39 30                	cmp    DWORD PTR [eax],esi
c0013c34:	75 ba                	jne    c0013bf0 <Thr::processFromPID(int)+0x24>
c0013c36:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c3b:	48                   	dec    eax
c0013c3c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c41:	74 09                	je     c0013c4c <Thr::processFromPID(int)+0x80>
c0013c43:	90                   	nop
c0013c44:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c47:	5b                   	pop    ebx
c0013c48:	5e                   	pop    esi
c0013c49:	5f                   	pop    edi
c0013c4a:	c3                   	ret    
c0013c4b:	90                   	nop
c0013c4c:	fb                   	sti    
c0013c4d:	eb f5                	jmp    c0013c44 <Thr::processFromPID(int)+0x78>
c0013c4f:	90                   	nop
c0013c50:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c55:	48                   	dec    eax
c0013c56:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c5b:	75 07                	jne    c0013c64 <Thr::processFromPID(int)+0x98>
c0013c5d:	fb                   	sti    
c0013c5e:	5b                   	pop    ebx
c0013c5f:	5e                   	pop    esi
c0013c60:	5f                   	pop    edi
c0013c61:	c3                   	ret    
c0013c62:	66 90                	xchg   ax,ax
c0013c64:	5b                   	pop    ebx
c0013c65:	31 c0                	xor    eax,eax
c0013c67:	5e                   	pop    esi
c0013c68:	5f                   	pop    edi
c0013c69:	c3                   	ret    
c0013c6a:	66 90                	xchg   ax,ax

c0013c6c <unblockTask(ThreadControlBlock*)>:
c0013c6c:	53                   	push   ebx
c0013c6d:	83 ec 08             	sub    esp,0x8
c0013c70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c74:	fa                   	cli    
c0013c75:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c7b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c7e:	85 c0                	test   eax,eax
c0013c80:	74 66                	je     c0013ce8 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c85:	48                   	dec    eax
c0013c86:	74 38                	je     c0013cc0 <unblockTask(ThreadControlBlock*)+0x54>
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	68 84 51 02 c0       	push   0xc0025184
c0013c90:	e8 57 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c95:	83 c4 10             	add    esp,0x10
c0013c98:	85 c0                	test   eax,eax
c0013c9a:	75 1c                	jne    c0013cb8 <unblockTask(ThreadControlBlock*)+0x4c>
c0013c9c:	eb 5e                	jmp    c0013cfc <unblockTask(ThreadControlBlock*)+0x90>
c0013c9e:	66 90                	xchg   ax,ax
c0013ca0:	83 ec 08             	sub    esp,0x8
c0013ca3:	50                   	push   eax
c0013ca4:	68 84 51 02 c0       	push   0xc0025184
c0013ca9:	e8 ee 8d 00 00       	call   c001ca9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	85 c0                	test   eax,eax
c0013cb3:	74 47                	je     c0013cfc <unblockTask(ThreadControlBlock*)+0x90>
c0013cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cb8:	39 c3                	cmp    ebx,eax
c0013cba:	75 e4                	jne    c0013ca0 <unblockTask(ThreadControlBlock*)+0x34>
c0013cbc:	eb 12                	jmp    c0013cd0 <unblockTask(ThreadControlBlock*)+0x64>
c0013cbe:	66 90                	xchg   ax,ax
c0013cc0:	83 ec 0c             	sub    esp,0xc
c0013cc3:	68 ba eb 01 c0       	push   0xc001ebba
c0013cc8:	e8 63 68 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0013ccd:	83 c4 10             	add    esp,0x10
c0013cd0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013cd5:	48                   	dec    eax
c0013cd6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013cdb:	75 03                	jne    c0013ce0 <unblockTask(ThreadControlBlock*)+0x74>
c0013cdd:	fb                   	sti    
c0013cde:	66 90                	xchg   ax,ax
c0013ce0:	83 c4 08             	add    esp,0x8
c0013ce3:	5b                   	pop    ebx
c0013ce4:	c3                   	ret    
c0013ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ce8:	83 ec 0c             	sub    esp,0xc
c0013ceb:	68 a3 eb 01 c0       	push   0xc001eba3
c0013cf0:	e8 3b 68 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	eb d6                	jmp    c0013cd0 <unblockTask(ThreadControlBlock*)+0x64>
c0013cfa:	66 90                	xchg   ax,ax
c0013cfc:	83 ec 08             	sub    esp,0x8
c0013cff:	53                   	push   ebx
c0013d00:	68 84 51 02 c0       	push   0xc0025184
c0013d05:	e8 a2 8a 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d0a:	83 c4 10             	add    esp,0x10
c0013d0d:	eb c1                	jmp    c0013cd0 <unblockTask(ThreadControlBlock*)+0x64>
c0013d0f:	90                   	nop

c0013d10 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d10:	55                   	push   ebp
c0013d11:	57                   	push   edi
c0013d12:	56                   	push   esi
c0013d13:	53                   	push   ebx
c0013d14:	83 ec 1c             	sub    esp,0x1c
c0013d17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d1e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d24:	85 ed                	test   ebp,ebp
c0013d26:	7e 24                	jle    c0013d4c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d28:	31 f6                	xor    esi,esi
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d36:	46                   	inc    esi
c0013d37:	57                   	push   edi
c0013d38:	e8 8c 3a ff ff       	call   c00077c9 <free>
c0013d3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d49:	7f e1                	jg     c0013d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d4b:	90                   	nop
c0013d4c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d56:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d5e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d61:	d3 c0                	rol    eax,cl
c0013d63:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d6a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d6d:	89 f7                	mov    edi,esi
c0013d6f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d77:	0f 85 77 01 00 00    	jne    c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d7d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d83:	85 ed                	test   ebp,ebp
c0013d85:	74 1d                	je     c0013da4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d87:	83 ec 0c             	sub    esp,0xc
c0013d8a:	55                   	push   ebp
c0013d8b:	e8 34 c1 ff ff       	call   c000fec4 <EnvVarContainer::~EnvVarContainer()>
c0013d90:	59                   	pop    ecx
c0013d91:	5e                   	pop    esi
c0013d92:	6a 0c                	push   0xc
c0013d94:	55                   	push   ebp
c0013d95:	e8 a0 66 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c0013d9a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	89 f7                	mov    edi,esi
c0013da2:	66 90                	xchg   ax,ax
c0013da4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013daa:	85 c0                	test   eax,eax
c0013dac:	0f 84 b6 00 00 00    	je     c0013e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013db2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013db5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013db9:	31 c9                	xor    ecx,ecx
c0013dbb:	eb 17                	jmp    c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013dc0:	41                   	inc    ecx
c0013dc1:	83 f9 10             	cmp    ecx,0x10
c0013dc4:	0f 84 9e 00 00 00    	je     c0013e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dca:	66 90                	xchg   ax,ax
c0013dcc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dd2:	66 90                	xchg   ax,ax
c0013dd4:	31 d2                	xor    edx,edx
c0013dd6:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013ddd:	d3 fa                	sar    edx,cl
c0013ddf:	83 e2 01             	and    edx,0x1
c0013de2:	74 dc                	je     c0013dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013de4:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013de7:	01 d2                	add    edx,edx
c0013de9:	01 ca                	add    edx,ecx
c0013deb:	8d 14 92             	lea    edx,[edx+edx*4]
c0013dee:	01 d0                	add    eax,edx
c0013df0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013df6:	83 fd 07             	cmp    ebp,0x7
c0013df9:	75 c5                	jne    c0013dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013dfb:	05 40 02 00 00       	add    eax,0x240
c0013e00:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e03:	83 fd ff             	cmp    ebp,0xffffffff
c0013e06:	0f 8c f0 00 00 00    	jl     c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e0c:	0f 84 ae 01 00 00    	je     c0013fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e12:	85 ed                	test   ebp,ebp
c0013e14:	0f 84 92 01 00 00    	je     c0013fac <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e1a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e1c:	75 a2                	jne    c0013dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e1e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e28:	01 d0                	add    eax,edx
c0013e2a:	66 90                	xchg   ax,ax
c0013e2c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e30:	83 ec 0c             	sub    esp,0xc
c0013e33:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e42:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e49:	50                   	push   eax
c0013e4a:	e8 1d fe ff ff       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c0013e4f:	83 c4 10             	add    esp,0x10
c0013e52:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e59:	89 f7                	mov    edi,esi
c0013e5b:	41                   	inc    ecx
c0013e5c:	83 f9 10             	cmp    ecx,0x10
c0013e5f:	0f 85 67 ff ff ff    	jne    c0013dcc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e65:	8d 76 00             	lea    esi,[esi+0x0]
c0013e68:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e6e:	85 c0                	test   eax,eax
c0013e70:	74 62                	je     c0013ed4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e72:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e78:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e7e:	74 54                	je     c0013ed4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e80:	83 ec 0c             	sub    esp,0xc
c0013e83:	68 84 51 02 c0       	push   0xc0025184
c0013e88:	e8 5f 88 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e8d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013e94:	89 c7                	mov    edi,eax
c0013e96:	e8 35 88 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	84 c0                	test   al,al
c0013ea0:	0f 84 ce 00 00 00    	je     c0013f74 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ea6:	66 90                	xchg   ax,ax
c0013ea8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eab:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013eb1:	85 d2                	test   edx,edx
c0013eb3:	74 0f                	je     c0013ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013eb5:	83 ec 0c             	sub    esp,0xc
c0013eb8:	8b 02                	mov    eax,DWORD PTR [edx]
c0013eba:	52                   	push   edx
c0013ebb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ebe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec1:	83 c4 10             	add    esp,0x10
c0013ec4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013ece:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ed4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013eda:	85 db                	test   ebx,ebx
c0013edc:	74 16                	je     c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ede:	83 ec 0c             	sub    esp,0xc
c0013ee1:	53                   	push   ebx
c0013ee2:	e8 e9 58 ff ff       	call   c00097d0 <VAS::~VAS()>
c0013ee7:	58                   	pop    eax
c0013ee8:	5a                   	pop    edx
c0013ee9:	6a 14                	push   0x14
c0013eeb:	53                   	push   ebx
c0013eec:	e8 49 65 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c0013ef1:	83 c4 10             	add    esp,0x10
c0013ef4:	83 c4 1c             	add    esp,0x1c
c0013ef7:	5b                   	pop    ebx
c0013ef8:	5e                   	pop    esi
c0013ef9:	5f                   	pop    edi
c0013efa:	5d                   	pop    ebp
c0013efb:	c3                   	ret    
c0013efc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	68 6c ec 01 c0       	push   0xc001ec6c
c0013f08:	e8 a6 c2 ff ff       	call   c00101b3 <KePanic(char const*)>
c0013f0d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f10:	83 c4 10             	add    esp,0x10
c0013f13:	89 f7                	mov    edi,esi
c0013f15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f19:	e9 a2 fe ff ff       	jmp    c0013dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f1e:	66 90                	xchg   ax,ax
c0013f20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f26:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f2c:	75 1e                	jne    c0013f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f2e:	83 ec 0c             	sub    esp,0xc
c0013f31:	68 d4 ec 01 c0       	push   0xc001ecd4
c0013f36:	e8 f5 65 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0013f3b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f42:	e8 5d fa ff ff       	call   c00139a4 <blockTask(TaskState)>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	66 90                	xchg   ax,ax
c0013f4c:	83 ec 08             	sub    esp,0x8
c0013f4f:	56                   	push   esi
c0013f50:	68 84 51 02 c0       	push   0xc0025184
c0013f55:	e8 52 88 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f5a:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f61:	e8 86 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	39 f8                	cmp    eax,edi
c0013f6b:	0f 84 37 ff ff ff    	je     c0013ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f71:	8d 76 00             	lea    esi,[esi+0x0]
c0013f74:	83 ec 0c             	sub    esp,0xc
c0013f77:	68 84 51 02 c0       	push   0xc0025184
c0013f7c:	e8 6b 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f81:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f88:	89 c6                	mov    esi,eax
c0013f8a:	e8 65 87 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f8f:	83 c4 10             	add    esp,0x10
c0013f92:	39 f3                	cmp    ebx,esi
c0013f94:	74 b6                	je     c0013f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f96:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013f99:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f9c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013fa2:	75 a8                	jne    c0013f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fa4:	e9 77 ff ff ff       	jmp    c0013f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fb0:	83 ec 0c             	sub    esp,0xc
c0013fb3:	68 a0 ec 01 c0       	push   0xc001eca0
c0013fb8:	e9 4b ff ff ff       	jmp    c0013f08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc0:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fc6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fc9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fcc:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fd2:	01 d7                	add    edi,edx
c0013fd4:	89 f8                	mov    eax,edi
c0013fd6:	e9 51 fe ff ff       	jmp    c0013e2c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fdb:	90                   	nop

c0013fdc <cleanerTaskFunction(void*)>:
c0013fdc:	53                   	push   ebx
c0013fdd:	83 ec 08             	sub    esp,0x8
c0013fe0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fe5:	48                   	dec    eax
c0013fe6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013feb:	75 03                	jne    c0013ff0 <cleanerTaskFunction(void*)+0x14>
c0013fed:	fb                   	sti    
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	fa                   	cli    
c0013ff1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ff6:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0013ffd:	8d 50 01             	lea    edx,[eax+0x1]
c0014000:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014006:	0f 84 ac 00 00 00    	je     c00140b8 <cleanerTaskFunction(void*)+0xdc>
c001400c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014011:	85 c0                	test   eax,eax
c0014013:	75 03                	jne    c0014018 <cleanerTaskFunction(void*)+0x3c>
c0014015:	fb                   	sti    
c0014016:	66 90                	xchg   ax,ax
c0014018:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c001401f:	fa                   	cli    
c0014020:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014026:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c001402c:	fa                   	cli    
c001402d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014033:	eb 2b                	jmp    c0014060 <cleanerTaskFunction(void*)+0x84>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	68 6c 51 02 c0       	push   0xc002516c
c0014040:	e8 a7 86 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014045:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c001404c:	89 c3                	mov    ebx,eax
c001404e:	e8 a1 86 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014053:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014056:	e8 b5 fc ff ff       	call   c0013d10 <cleanupTerminatedTask(ThreadControlBlock*)>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	66 90                	xchg   ax,ax
c0014060:	83 ec 0c             	sub    esp,0xc
c0014063:	68 6c 51 02 c0       	push   0xc002516c
c0014068:	e8 63 86 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001406d:	83 c4 10             	add    esp,0x10
c0014070:	84 c0                	test   al,al
c0014072:	74 c4                	je     c0014038 <cleanerTaskFunction(void*)+0x5c>
c0014074:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014079:	48                   	dec    eax
c001407a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001407f:	75 03                	jne    c0014084 <cleanerTaskFunction(void*)+0xa8>
c0014081:	fb                   	sti    
c0014082:	66 90                	xchg   ax,ax
c0014084:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014089:	48                   	dec    eax
c001408a:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001408f:	0f 85 4b ff ff ff    	jne    c0013fe0 <cleanerTaskFunction(void*)+0x4>
c0014095:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001409a:	85 c0                	test   eax,eax
c001409c:	0f 84 3e ff ff ff    	je     c0013fe0 <cleanerTaskFunction(void*)+0x4>
c00140a2:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00140ac:	e8 f7 f6 ff ff       	call   c00137a8 <schedule()>
c00140b1:	e9 2a ff ff ff       	jmp    c0013fe0 <cleanerTaskFunction(void*)+0x4>
c00140b6:	66 90                	xchg   ax,ax
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	6a 02                	push   0x2
c00140bd:	e8 ba f8 ff ff       	call   c001397c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140c2:	83 c4 10             	add    esp,0x10
c00140c5:	e9 4e ff ff ff       	jmp    c0014018 <cleanerTaskFunction(void*)+0x3c>
c00140ca:	66 90                	xchg   ax,ax

c00140cc <terminateTask(int)>:
c00140cc:	83 ec 14             	sub    esp,0x14
c00140cf:	fa                   	cli    
c00140d0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140d6:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140dc:	fa                   	cli    
c00140dd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ec:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00140ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00140f7:	50                   	push   eax
c00140f8:	68 6c 51 02 c0       	push   0xc002516c
c00140fd:	e8 aa 86 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014111:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c0014116:	85 c0                	test   eax,eax
c0014118:	74 5e                	je     c0014178 <terminateTask(int)+0xac>
c001411a:	83 ec 0c             	sub    esp,0xc
c001411d:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014124:	50                   	push   eax
c0014125:	e8 42 fb ff ff       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c001412a:	83 c4 10             	add    esp,0x10
c001412d:	8d 76 00             	lea    esi,[esi+0x0]
c0014130:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014135:	48                   	dec    eax
c0014136:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001413b:	75 03                	jne    c0014140 <terminateTask(int)+0x74>
c001413d:	fb                   	sti    
c001413e:	66 90                	xchg   ax,ax
c0014140:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014145:	48                   	dec    eax
c0014146:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001414b:	75 0b                	jne    c0014158 <terminateTask(int)+0x8c>
c001414d:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014154:	75 36                	jne    c001418c <terminateTask(int)+0xc0>
c0014156:	66 90                	xchg   ax,ax
c0014158:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001415d:	48                   	dec    eax
c001415e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014163:	75 03                	jne    c0014168 <terminateTask(int)+0x9c>
c0014165:	fb                   	sti    
c0014166:	66 90                	xchg   ax,ax
c0014168:	fa                   	cli    
c0014169:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001416f:	90                   	nop
c0014170:	e8 33 f6 ff ff       	call   c00137a8 <schedule()>
c0014175:	eb e1                	jmp    c0014158 <terminateTask(int)+0x8c>
c0014177:	90                   	nop
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	68 d1 eb 01 c0       	push   0xc001ebd1
c0014180:	e8 ab 63 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	eb a6                	jmp    c0014130 <terminateTask(int)+0x64>
c001418a:	66 90                	xchg   ax,ax
c001418c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014196:	eb d8                	jmp    c0014170 <terminateTask(int)+0xa4>

c0014198 <Thr::terminateFromIRQ(int)>:
c0014198:	83 ec 18             	sub    esp,0x18
c001419b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001419f:	50                   	push   eax
c00141a0:	e8 27 ff ff ff       	call   c00140cc <terminateTask(int)>
c00141a5:	90                   	nop
c00141a6:	66 90                	xchg   ax,ax

c00141a8 <Semaphore::release()>:
c00141a8:	83 ec 0c             	sub    esp,0xc
c00141ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141af:	fa                   	cli    
c00141b0:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141b5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00141be:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00141c4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141c7:	85 c9                	test   ecx,ecx
c00141c9:	74 41                	je     c001420c <Semaphore::release()+0x64>
c00141cb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141ce:	83 ec 0c             	sub    esp,0xc
c00141d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141d4:	51                   	push   ecx
c00141d5:	e8 92 fa ff ff       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c00141da:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	48                   	dec    eax
c00141e3:	90                   	nop
c00141e4:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00141e9:	85 c0                	test   eax,eax
c00141eb:	75 0b                	jne    c00141f8 <Semaphore::release()+0x50>
c00141ed:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00141f2:	85 c0                	test   eax,eax
c00141f4:	75 1e                	jne    c0014214 <Semaphore::release()+0x6c>
c00141f6:	66 90                	xchg   ax,ax
c00141f8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141fd:	48                   	dec    eax
c00141fe:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014203:	75 03                	jne    c0014208 <Semaphore::release()+0x60>
c0014205:	fb                   	sti    
c0014206:	66 90                	xchg   ax,ax
c0014208:	83 c4 0c             	add    esp,0xc
c001420b:	c3                   	ret    
c001420c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001420f:	eb d3                	jmp    c00141e4 <Semaphore::release()+0x3c>
c0014211:	8d 76 00             	lea    esi,[esi+0x0]
c0014214:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001421e:	e8 85 f5 ff ff       	call   c00137a8 <schedule()>
c0014223:	eb d3                	jmp    c00141f8 <Semaphore::release()+0x50>
c0014225:	8d 76 00             	lea    esi,[esi+0x0]

c0014228 <__static_initialization_and_destruction_0(int, int)>:
c0014228:	83 ec 0c             	sub    esp,0xc
c001422b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014230:	0f 85 8e 00 00 00    	jne    c00142c4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014236:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001423e:	0f 85 80 00 00 00    	jne    c00142c4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014244:	83 ec 0c             	sub    esp,0xc
c0014247:	68 84 51 02 c0       	push   0xc0025184
c001424c:	e8 07 88 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	83 ec 04             	sub    esp,0x4
c0014257:	68 84 f7 01 c0       	push   0xc001f784
c001425c:	68 84 51 02 c0       	push   0xc0025184
c0014261:	68 08 ca 01 c0       	push   0xc001ca08
c0014266:	e8 7f 61 ff ff       	call   c000a3ea <__cxa_atexit>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	68 78 51 02 c0       	push   0xc0025178
c0014276:	e8 dd 87 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	83 ec 04             	sub    esp,0x4
c0014281:	68 84 f7 01 c0       	push   0xc001f784
c0014286:	68 78 51 02 c0       	push   0xc0025178
c001428b:	68 08 ca 01 c0       	push   0xc001ca08
c0014290:	e8 55 61 ff ff       	call   c000a3ea <__cxa_atexit>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	68 6c 51 02 c0       	push   0xc002516c
c00142a0:	e8 b3 87 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142a5:	83 c4 10             	add    esp,0x10
c00142a8:	83 ec 04             	sub    esp,0x4
c00142ab:	68 84 f7 01 c0       	push   0xc001f784
c00142b0:	68 6c 51 02 c0       	push   0xc002516c
c00142b5:	68 08 ca 01 c0       	push   0xc001ca08
c00142ba:	e8 2b 61 ff ff       	call   c000a3ea <__cxa_atexit>
c00142bf:	83 c4 10             	add    esp,0x10
c00142c2:	66 90                	xchg   ax,ax
c00142c4:	90                   	nop
c00142c5:	83 c4 0c             	add    esp,0xc
c00142c8:	c3                   	ret    
c00142c9:	8d 76 00             	lea    esi,[esi+0x0]

c00142cc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	83 ec 08             	sub    esp,0x8
c00142d2:	68 ff ff 00 00       	push   0xffff
c00142d7:	6a 01                	push   0x1
c00142d9:	e8 4a ff ff ff       	call   c0014228 <__static_initialization_and_destruction_0(int, int)>
c00142de:	83 c4 10             	add    esp,0x10
c00142e1:	83 c4 0c             	add    esp,0xc
c00142e4:	c3                   	ret    

c00142e5 <Vm::inbv(unsigned short)>:
c00142e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142e9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142ee:	75 06                	jne    c00142f6 <Vm::inbv(unsigned short)+0x11>
c00142f0:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00142f5:	c3                   	ret    
c00142f6:	ec                   	in     al,dx
c00142f7:	c3                   	ret    

c00142f8 <Vm::outbv(unsigned short, unsigned char)>:
c00142f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014300:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014305:	75 25                	jne    c001432c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014307:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c001430d:	8d 51 01             	lea    edx,[ecx+0x1]
c0014310:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c0014316:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c001431c:	83 fa 20             	cmp    edx,0x20
c001431f:	75 0c                	jne    c001432d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014321:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c001432b:	c3                   	ret    
c001432c:	ee                   	out    dx,al
c001432d:	c3                   	ret    

c001432e <Vm::realToLinear(unsigned short, unsigned short)>:
c001432e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014333:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014338:	c1 e0 04             	shl    eax,0x4
c001433b:	01 d0                	add    eax,edx
c001433d:	c3                   	ret    

c001433e <Vm::getSegment(unsigned int)>:
c001433e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014342:	c1 e8 10             	shr    eax,0x10
c0014345:	c3                   	ret    

c0014346 <Vm::getOffset(unsigned int)>:
c0014346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434a:	c3                   	ret    

c001434b <Vm::mainloop2()>:
c001434b:	83 ec 18             	sub    esp,0x18
c001434e:	fa                   	cli    
c001434f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014355:	6a 02                	push   0x2
c0014357:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c001435e:	e8 19 f6 ff ff       	call   c001397c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014368:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001436c:	52                   	push   edx
c001436d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014371:	52                   	push   edx
c0014372:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014376:	52                   	push   edx
c0014377:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001437b:	50                   	push   eax
c001437c:	e8 8e be fe ff       	call   c000020f <goToVM86>
c0014381:	83 c4 2c             	add    esp,0x2c
c0014384:	c3                   	ret    

c0014385 <Vm::mainVm8086Loop(void*)>:
c0014385:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001438a:	48                   	dec    eax
c001438b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014390:	75 01                	jne    c0014393 <Vm::mainVm8086Loop(void*)+0xe>
c0014392:	fb                   	sti    
c0014393:	eb b6                	jmp    c001434b <Vm::mainloop2()>

c0014395 <Vm::mainloop3(unsigned long)>:
c0014395:	83 ec 18             	sub    esp,0x18
c0014398:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001439c:	fa                   	cli    
c001439d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143a3:	6a 02                	push   0x2
c00143a5:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c00143ac:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c00143b1:	e8 c6 f5 ff ff       	call   c001397c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143b6:	83 c4 1c             	add    esp,0x1c
c00143b9:	eb 90                	jmp    c001434b <Vm::mainloop2()>

c00143bb <Vm::initialise8086()>:
c00143bb:	83 ec 0c             	sub    esp,0xc
c00143be:	68 80 00 00 00       	push   0x80
c00143c3:	6a 00                	push   0x0
c00143c5:	68 85 43 01 c0       	push   0xc0014385
c00143ca:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00143d0:	e8 b3 f1 ff ff       	call   c0013588 <Process::createThread(void (*)(void*), void*, int)>
c00143d5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143dc:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00143e1:	68 00 01 00 00       	push   0x100
c00143e6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00143eb:	6a 00                	push   0x0
c00143ed:	6a 00                	push   0x0
c00143ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143f5:	e8 34 58 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00143fa:	83 c4 2c             	add    esp,0x2c
c00143fd:	c3                   	ret    

c00143fe <Vm::finish8086()>:
c00143fe:	53                   	push   ebx
c00143ff:	83 ec 08             	sub    esp,0x8
c0014402:	fa                   	cli    
c0014403:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014409:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c0014410:	75 15                	jne    c0014427 <Vm::finish8086()+0x29>
c0014412:	e8 91 f3 ff ff       	call   c00137a8 <schedule()>
c0014417:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001441c:	48                   	dec    eax
c001441d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014422:	75 de                	jne    c0014402 <Vm::finish8086()+0x4>
c0014424:	fb                   	sti    
c0014425:	eb db                	jmp    c0014402 <Vm::finish8086()+0x4>
c0014427:	83 ec 0c             	sub    esp,0xc
c001442a:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014430:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014436:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c001443d:	e8 2a f8 ff ff       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c0014442:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	8d 50 ff             	lea    edx,[eax-0x1]
c001444d:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014453:	85 d2                	test   edx,edx
c0014455:	75 01                	jne    c0014458 <Vm::finish8086()+0x5a>
c0014457:	fb                   	sti    
c0014458:	89 d8                	mov    eax,ebx
c001445a:	83 c4 08             	add    esp,0x8
c001445d:	5b                   	pop    ebx
c001445e:	c3                   	ret    

c001445f <Vm::getOutput8086(unsigned char*)>:
c001445f:	57                   	push   edi
c0014460:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014466:	56                   	push   esi
c0014467:	be e0 51 02 c0       	mov    esi,0xc00251e0
c001446c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014470:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014472:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c0014477:	5e                   	pop    esi
c0014478:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014482:	5f                   	pop    edi
c0014483:	c3                   	ret    

c0014484 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014484:	55                   	push   ebp
c0014485:	57                   	push   edi
c0014486:	56                   	push   esi
c0014487:	53                   	push   ebx
c0014488:	83 ec 0c             	sub    esp,0xc
c001448b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001448f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014493:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014497:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001449b:	fa                   	cli    
c001449c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144a2:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00144a9:	75 15                	jne    c00144c0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144ab:	e8 f8 f2 ff ff       	call   c00137a8 <schedule()>
c00144b0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144b5:	48                   	dec    eax
c00144b6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144bb:	75 de                	jne    c001449b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144bd:	fb                   	sti    
c00144be:	eb db                	jmp    c001449b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144c0:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00144c5:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144cf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144d3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144d7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144db:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144df:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144e3:	0f b7 ff             	movzx  edi,di
c00144e6:	0f b7 f6             	movzx  esi,si
c00144e9:	50                   	push   eax
c00144ea:	6a 20                	push   0x20
c00144ec:	6a 00                	push   0x0
c00144ee:	68 e0 51 02 c0       	push   0xc00251e0
c00144f3:	e8 d8 bf fe ff       	call   c00004d0 <memset>
c00144f8:	5a                   	pop    edx
c00144f9:	59                   	pop    ecx
c00144fa:	57                   	push   edi
c00144fb:	56                   	push   esi
c00144fc:	e8 2d fe ff ff       	call   c001432e <Vm::realToLinear(unsigned short, unsigned short)>
c0014501:	83 c4 10             	add    esp,0x10
c0014504:	89 c7                	mov    edi,eax
c0014506:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001450a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001450e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014510:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014515:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c001451c:	48                   	dec    eax
c001451d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014522:	75 01                	jne    c0014525 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014524:	fb                   	sti    
c0014525:	83 ec 0c             	sub    esp,0xc
c0014528:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001452e:	e8 39 f7 ff ff       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c0014533:	83 c4 1c             	add    esp,0x1c
c0014536:	b0 01                	mov    al,0x1
c0014538:	5b                   	pop    ebx
c0014539:	5e                   	pop    esi
c001453a:	5f                   	pop    edi
c001453b:	5d                   	pop    ebp
c001453c:	c3                   	ret    

c001453d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001453d:	55                   	push   ebp
c001453e:	57                   	push   edi
c001453f:	56                   	push   esi
c0014540:	53                   	push   ebx
c0014541:	83 ec 2c             	sub    esp,0x2c
c0014544:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014548:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001454c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014550:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014554:	fa                   	cli    
c0014555:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001455b:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c0014562:	89 f0                	mov    eax,esi
c0014564:	84 c0                	test   al,al
c0014566:	75 1d                	jne    c0014585 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001456c:	e8 37 f2 ff ff       	call   c00137a8 <schedule()>
c0014571:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014576:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001457a:	48                   	dec    eax
c001457b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014580:	75 d2                	jne    c0014554 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014582:	fb                   	sti    
c0014583:	eb cf                	jmp    c0014554 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014585:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c001458a:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014594:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014598:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001459c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145a0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145a4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145a8:	50                   	push   eax
c00145a9:	6a 20                	push   0x20
c00145ab:	6a 00                	push   0x0
c00145ad:	68 e0 51 02 c0       	push   0xc00251e0
c00145b2:	e8 19 bf fe ff       	call   c00004d0 <memset>
c00145b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145be:	e8 f6 31 ff ff       	call   c00077b9 <malloc>
c00145c3:	83 c4 0c             	add    esp,0xc
c00145c6:	89 c3                	mov    ebx,eax
c00145c8:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00145ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145d2:	50                   	push   eax
c00145d3:	e8 ce 64 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c00145d8:	83 c4 10             	add    esp,0x10
c00145db:	85 db                	test   ebx,ebx
c00145dd:	75 0a                	jne    c00145e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145df:	83 ec 0c             	sub    esp,0xc
c00145e2:	68 fc ec 01 c0       	push   0xc001ecfc
c00145e7:	eb 3e                	jmp    c0014627 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145e9:	50                   	push   eax
c00145ea:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145ee:	50                   	push   eax
c00145ef:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145f3:	50                   	push   eax
c00145f4:	53                   	push   ebx
c00145f5:	e8 18 68 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014602:	74 0a                	je     c001460e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	68 10 ed 01 c0       	push   0xc001ed10
c001460c:	eb 19                	jmp    c0014627 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001460e:	51                   	push   ecx
c001460f:	51                   	push   ecx
c0014610:	6a 01                	push   0x1
c0014612:	53                   	push   ebx
c0014613:	e8 4e 65 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0014618:	83 c4 10             	add    esp,0x10
c001461b:	85 c0                	test   eax,eax
c001461d:	74 24                	je     c0014643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001461f:	83 ec 0c             	sub    esp,0xc
c0014622:	68 29 ed 01 c0       	push   0xc001ed29
c0014627:	e8 87 bb ff ff       	call   c00101b3 <KePanic(char const*)>
c001462c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014631:	83 c4 10             	add    esp,0x10
c0014634:	48                   	dec    eax
c0014635:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001463a:	85 c0                	test   eax,eax
c001463c:	75 01                	jne    c001463f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001463e:	fb                   	sti    
c001463f:	31 f6                	xor    esi,esi
c0014641:	eb 58                	jmp    c001469b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014643:	0f b7 ed             	movzx  ebp,bp
c0014646:	50                   	push   eax
c0014647:	0f b7 ff             	movzx  edi,di
c001464a:	50                   	push   eax
c001464b:	55                   	push   ebp
c001464c:	57                   	push   edi
c001464d:	e8 dc fc ff ff       	call   c001432e <Vm::realToLinear(unsigned short, unsigned short)>
c0014652:	5a                   	pop    edx
c0014653:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014655:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014659:	51                   	push   ecx
c001465a:	50                   	push   eax
c001465b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001465f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014663:	53                   	push   ebx
c0014664:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014667:	83 c4 14             	add    esp,0x14
c001466a:	53                   	push   ebx
c001466b:	e8 54 65 ff ff       	call   c000abc4 <File::close()>
c0014670:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014675:	83 c4 10             	add    esp,0x10
c0014678:	48                   	dec    eax
c0014679:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014680:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014685:	85 c0                	test   eax,eax
c0014687:	75 01                	jne    c001468a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014689:	fb                   	sti    
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014693:	e8 d4 f5 ff ff       	call   c0013c6c <unblockTask(ThreadControlBlock*)>
c0014698:	83 c4 10             	add    esp,0x10
c001469b:	83 c4 2c             	add    esp,0x2c
c001469e:	89 f0                	mov    eax,esi
c00146a0:	5b                   	pop    ebx
c00146a1:	5e                   	pop    esi
c00146a2:	5f                   	pop    edi
c00146a3:	5d                   	pop    ebp
c00146a4:	c3                   	ret    

c00146a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146a5:	57                   	push   edi
c00146a6:	56                   	push   esi
c00146a7:	53                   	push   ebx
c00146a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146b4:	83 e8 06             	sub    eax,0x6
c00146b7:	0f b7 c0             	movzx  eax,ax
c00146ba:	50                   	push   eax
c00146bb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146c0:	50                   	push   eax
c00146c1:	e8 68 fc ff ff       	call   c001432e <Vm::realToLinear(unsigned short, unsigned short)>
c00146c6:	5a                   	pop    edx
c00146c7:	5e                   	pop    esi
c00146c8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146cb:	8d 56 fa             	lea    edx,[esi-0x6]
c00146ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146d4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146d7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146da:	83 c2 02             	add    edx,0x2
c00146dd:	66 89 10             	mov    WORD PTR [eax],dx
c00146e0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146e3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146e7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146ea:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00146ee:	89 d6                	mov    esi,edx
c00146f0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00146f6:	66 81 e6 ff fd       	and    si,0xfdff
c00146fb:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00146ff:	74 07                	je     c0014708 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014701:	89 d6                	mov    esi,edx
c0014703:	66 81 ce 00 02       	or     si,0x200
c0014708:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001470c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014711:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014715:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001471d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014720:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014728:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001472b:	5b                   	pop    ebx
c001472c:	5e                   	pop    esi
c001472d:	5f                   	pop    edi
c001472e:	c3                   	ret    

c001472f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001472f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014734:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014739:	c1 e0 04             	shl    eax,0x4
c001473c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001473f:	c3                   	ret    

c0014740 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014740:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014745:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001474a:	c1 e0 04             	shl    eax,0x4
c001474d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014751:	c3                   	ret    

c0014752 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014752:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014757:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001475c:	c1 e0 04             	shl    eax,0x4
c001475f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014762:	c3                   	ret    

c0014763 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014763:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014768:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001476d:	c1 e0 04             	shl    eax,0x4
c0014770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014774:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014777:	c3                   	ret    

c0014778 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014778:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001477d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014782:	c1 e0 04             	shl    eax,0x4
c0014785:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014789:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001478d:	c3                   	ret    

c001478e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001478e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014793:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014798:	c1 e0 04             	shl    eax,0x4
c001479b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001479f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147a2:	c3                   	ret    

c00147a3 <Vm::faultHandler(regs*)>:
c00147a3:	55                   	push   ebp
c00147a4:	57                   	push   edi
c00147a5:	56                   	push   esi
c00147a6:	53                   	push   ebx
c00147a7:	83 ec 1c             	sub    esp,0x1c
c00147aa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147ae:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147b1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147b5:	0f b7 f8             	movzx  edi,ax
c00147b8:	52                   	push   edx
c00147b9:	0f b7 c0             	movzx  eax,ax
c00147bc:	50                   	push   eax
c00147bd:	e8 6c fb ff ff       	call   c001432e <Vm::realToLinear(unsigned short, unsigned short)>
c00147c2:	5a                   	pop    edx
c00147c3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147c6:	59                   	pop    ecx
c00147c7:	89 c1                	mov    ecx,eax
c00147c9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d9:	0f b7 c5             	movzx  eax,bp
c00147dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147e8:	e8 41 fb ff ff       	call   c001432e <Vm::realToLinear(unsigned short, unsigned short)>
c00147ed:	5e                   	pop    esi
c00147ee:	be 06 00 00 00       	mov    esi,0x6
c00147f3:	5a                   	pop    edx
c00147f4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00147f9:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00147fe:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014801:	80 fa 9d             	cmp    dl,0x9d
c0014804:	0f 84 2c 02 00 00    	je     c0014a36 <Vm::faultHandler(regs*)+0x293>
c001480a:	0f 87 91 00 00 00    	ja     c00148a1 <Vm::faultHandler(regs*)+0xfe>
c0014810:	80 fa 66             	cmp    dl,0x66
c0014813:	0f 84 98 01 00 00    	je     c00149b1 <Vm::faultHandler(regs*)+0x20e>
c0014819:	77 47                	ja     c0014862 <Vm::faultHandler(regs*)+0xbf>
c001481b:	80 fa 36             	cmp    dl,0x36
c001481e:	0f 84 80 01 00 00    	je     c00149a4 <Vm::faultHandler(regs*)+0x201>
c0014824:	77 1a                	ja     c0014840 <Vm::faultHandler(regs*)+0x9d>
c0014826:	80 fa 26             	cmp    dl,0x26
c0014829:	0f 84 4e 01 00 00    	je     c001497d <Vm::faultHandler(regs*)+0x1da>
c001482f:	80 fa 2e             	cmp    dl,0x2e
c0014832:	0f 85 e2 05 00 00    	jne    c0014e1a <Vm::faultHandler(regs*)+0x677>
c0014838:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001483b:	31 f6                	xor    esi,esi
c001483d:	41                   	inc    ecx
c001483e:	eb be                	jmp    c00147fe <Vm::faultHandler(regs*)+0x5b>
c0014840:	80 fa 64             	cmp    dl,0x64
c0014843:	0f 84 41 01 00 00    	je     c001498a <Vm::faultHandler(regs*)+0x1e7>
c0014849:	0f 87 48 01 00 00    	ja     c0014997 <Vm::faultHandler(regs*)+0x1f4>
c001484f:	80 fa 3e             	cmp    dl,0x3e
c0014852:	0f 85 c2 05 00 00    	jne    c0014e1a <Vm::faultHandler(regs*)+0x677>
c0014858:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001485b:	be 01 00 00 00       	mov    esi,0x1
c0014860:	eb db                	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c0014862:	80 fa 6d             	cmp    dl,0x6d
c0014865:	0f 84 ec 02 00 00    	je     c0014b57 <Vm::faultHandler(regs*)+0x3b4>
c001486b:	77 17                	ja     c0014884 <Vm::faultHandler(regs*)+0xe1>
c001486d:	80 fa 67             	cmp    dl,0x67
c0014870:	0f 84 48 01 00 00    	je     c00149be <Vm::faultHandler(regs*)+0x21b>
c0014876:	80 fa 6c             	cmp    dl,0x6c
c0014879:	0f 84 69 02 00 00    	je     c0014ae8 <Vm::faultHandler(regs*)+0x345>
c001487f:	e9 96 05 00 00       	jmp    c0014e1a <Vm::faultHandler(regs*)+0x677>
c0014884:	80 fa 6f             	cmp    dl,0x6f
c0014887:	0f 84 f4 03 00 00    	je     c0014c81 <Vm::faultHandler(regs*)+0x4de>
c001488d:	0f 82 59 03 00 00    	jb     c0014bec <Vm::faultHandler(regs*)+0x449>
c0014893:	80 fa 9c             	cmp    dl,0x9c
c0014896:	0f 84 2f 01 00 00    	je     c00149cb <Vm::faultHandler(regs*)+0x228>
c001489c:	e9 79 05 00 00       	jmp    c0014e1a <Vm::faultHandler(regs*)+0x677>
c00148a1:	80 fa ec             	cmp    dl,0xec
c00148a4:	0f 84 14 05 00 00    	je     c0014dbe <Vm::faultHandler(regs*)+0x61b>
c00148aa:	77 7b                	ja     c0014927 <Vm::faultHandler(regs*)+0x184>
c00148ac:	80 fa e4             	cmp    dl,0xe4
c00148af:	0f 84 93 04 00 00    	je     c0014d48 <Vm::faultHandler(regs*)+0x5a5>
c00148b5:	77 53                	ja     c001490a <Vm::faultHandler(regs*)+0x167>
c00148b7:	80 fa cd             	cmp    dl,0xcd
c00148ba:	0f 84 d9 01 00 00    	je     c0014a99 <Vm::faultHandler(regs*)+0x2f6>
c00148c0:	80 fa cf             	cmp    dl,0xcf
c00148c3:	0f 85 51 05 00 00    	jne    c0014e1a <Vm::faultHandler(regs*)+0x677>
c00148c9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148cc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148cf:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148d3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148d6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148da:	81 ca 00 02 02 00    	or     edx,0x20200
c00148e0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148e3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148ed:	66 c1 e8 09          	shr    ax,0x9
c00148f1:	83 e0 01             	and    eax,0x1
c00148f4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148f7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148fa:	83 c0 06             	add    eax,0x6
c00148fd:	25 ff ff 00 00       	and    eax,0xffff
c0014902:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014905:	e9 0c 05 00 00       	jmp    c0014e16 <Vm::faultHandler(regs*)+0x673>
c001490a:	80 fa e6             	cmp    dl,0xe6
c001490d:	0f 84 7f 04 00 00    	je     c0014d92 <Vm::faultHandler(regs*)+0x5ef>
c0014913:	0f 82 4b 04 00 00    	jb     c0014d64 <Vm::faultHandler(regs*)+0x5c1>
c0014919:	80 fa e7             	cmp    dl,0xe7
c001491c:	0f 84 87 04 00 00    	je     c0014da9 <Vm::faultHandler(regs*)+0x606>
c0014922:	e9 f3 04 00 00       	jmp    c0014e1a <Vm::faultHandler(regs*)+0x677>
c0014927:	80 fa ef             	cmp    dl,0xef
c001492a:	0f 84 d1 04 00 00    	je     c0014e01 <Vm::faultHandler(regs*)+0x65e>
c0014930:	77 28                	ja     c001495a <Vm::faultHandler(regs*)+0x1b7>
c0014932:	80 fa ed             	cmp    dl,0xed
c0014935:	0f 84 9f 04 00 00    	je     c0014dda <Vm::faultHandler(regs*)+0x637>
c001493b:	80 fa ee             	cmp    dl,0xee
c001493e:	0f 85 d6 04 00 00    	jne    c0014e1a <Vm::faultHandler(regs*)+0x677>
c0014944:	50                   	push   eax
c0014945:	50                   	push   eax
c0014946:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001494a:	50                   	push   eax
c001494b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001494f:	50                   	push   eax
c0014950:	e8 a3 f9 ff ff       	call   c00142f8 <Vm::outbv(unsigned short, unsigned char)>
c0014955:	e9 9f 04 00 00       	jmp    c0014df9 <Vm::faultHandler(regs*)+0x656>
c001495a:	80 fa fa             	cmp    dl,0xfa
c001495d:	0f 84 69 01 00 00    	je     c0014acc <Vm::faultHandler(regs*)+0x329>
c0014963:	80 fa fb             	cmp    dl,0xfb
c0014966:	0f 84 6e 01 00 00    	je     c0014ada <Vm::faultHandler(regs*)+0x337>
c001496c:	80 fa f3             	cmp    dl,0xf3
c001496f:	0f 85 a5 04 00 00    	jne    c0014e1a <Vm::faultHandler(regs*)+0x677>
c0014975:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014978:	e9 c0 fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c001497d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014980:	be 02 00 00 00       	mov    esi,0x2
c0014985:	e9 b3 fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c001498a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001498d:	be 03 00 00 00       	mov    esi,0x3
c0014992:	e9 a6 fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c0014997:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001499a:	be 04 00 00 00       	mov    esi,0x4
c001499f:	e9 99 fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c00149a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a7:	be 05 00 00 00       	mov    esi,0x5
c00149ac:	e9 8c fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c00149b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149b9:	e9 7f fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c00149be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149c1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149c6:	e9 72 fe ff ff       	jmp    c001483d <Vm::faultHandler(regs*)+0x9a>
c00149cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149d7:	74 30                	je     c0014a09 <Vm::faultHandler(regs*)+0x266>
c00149d9:	83 e9 04             	sub    ecx,0x4
c00149dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149f4:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149f8:	0f 84 15 04 00 00    	je     c0014e13 <Vm::faultHandler(regs*)+0x670>
c00149fe:	80 ce 02             	or     dh,0x2
c0014a01:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a04:	e9 0a 04 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014a09:	83 e9 02             	sub    ecx,0x2
c0014a0c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a12:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a1f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a23:	74 05                	je     c0014a2a <Vm::faultHandler(regs*)+0x287>
c0014a25:	80 ce 02             	or     dh,0x2
c0014a28:	eb 03                	jmp    c0014a2d <Vm::faultHandler(regs*)+0x28a>
c0014a2a:	80 e6 fd             	and    dh,0xfd
c0014a2d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a31:	e9 dd 03 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014a36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a3b:	74 2a                	je     c0014a67 <Vm::faultHandler(regs*)+0x2c4>
c0014a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a3f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a45:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a56:	c1 e8 09             	shr    eax,0x9
c0014a59:	83 e0 01             	and    eax,0x1
c0014a5c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a5f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a62:	83 c0 04             	add    eax,0x4
c0014a65:	eb 25                	jmp    c0014a8c <Vm::faultHandler(regs*)+0x2e9>
c0014a67:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a6a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a70:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a73:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a7c:	66 c1 e8 09          	shr    ax,0x9
c0014a80:	83 e0 01             	and    eax,0x1
c0014a83:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a89:	83 c0 02             	add    eax,0x2
c0014a8c:	25 ff ff 00 00       	and    eax,0xffff
c0014a91:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a94:	e9 7a 03 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014a99:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a9d:	3c ee                	cmp    al,0xee
c0014a9f:	75 10                	jne    c0014ab1 <Vm::faultHandler(regs*)+0x30e>
c0014aa1:	83 ec 0c             	sub    esp,0xc
c0014aa4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014aa7:	e8 e9 f8 ff ff       	call   c0014395 <Vm::mainloop3(unsigned long)>
c0014aac:	e9 4b 03 00 00       	jmp    c0014dfc <Vm::faultHandler(regs*)+0x659>
c0014ab1:	83 ec 0c             	sub    esp,0xc
c0014ab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014abc:	51                   	push   ecx
c0014abd:	50                   	push   eax
c0014abe:	53                   	push   ebx
c0014abf:	e8 e1 fb ff ff       	call   c00146a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014ac4:	83 c4 20             	add    esp,0x20
c0014ac7:	e9 4a 03 00 00       	jmp    c0014e16 <Vm::faultHandler(regs*)+0x673>
c0014acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ad5:	e9 39 03 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014adf:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014ae3:	e9 2b 03 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014ae8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014aeb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014af0:	74 2b                	je     c0014b1d <Vm::faultHandler(regs*)+0x37a>
c0014af2:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014af9:	76 22                	jbe    c0014b1d <Vm::faultHandler(regs*)+0x37a>
c0014afb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014aff:	50                   	push   eax
c0014b00:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b04:	50                   	push   eax
c0014b05:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b09:	50                   	push   eax
c0014b0a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b0e:	50                   	push   eax
c0014b0f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b13:	50                   	push   eax
c0014b14:	6a 6c                	push   0x6c
c0014b16:	6a 6c                	push   0x6c
c0014b18:	e9 b9 01 00 00       	jmp    c0014cd6 <Vm::faultHandler(regs*)+0x533>
c0014b1d:	83 ec 0c             	sub    esp,0xc
c0014b20:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b24:	0f b7 f6             	movzx  esi,si
c0014b27:	50                   	push   eax
c0014b28:	e8 b8 f7 ff ff       	call   c00142e5 <Vm::inbv(unsigned short)>
c0014b2d:	83 c4 0c             	add    esp,0xc
c0014b30:	0f b6 c0             	movzx  eax,al
c0014b33:	50                   	push   eax
c0014b34:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b38:	50                   	push   eax
c0014b39:	56                   	push   esi
c0014b3a:	e8 24 fc ff ff       	call   c0014763 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b3f:	83 c4 10             	add    esp,0x10
c0014b42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b49:	74 03                	je     c0014b4e <Vm::faultHandler(regs*)+0x3ab>
c0014b4b:	48                   	dec    eax
c0014b4c:	eb 01                	jmp    c0014b4f <Vm::faultHandler(regs*)+0x3ac>
c0014b4e:	40                   	inc    eax
c0014b4f:	0f b7 c0             	movzx  eax,ax
c0014b52:	e9 8d 00 00 00       	jmp    c0014be4 <Vm::faultHandler(regs*)+0x441>
c0014b57:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b5d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b62:	74 29                	je     c0014b8d <Vm::faultHandler(regs*)+0x3ea>
c0014b64:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b69:	76 22                	jbe    c0014b8d <Vm::faultHandler(regs*)+0x3ea>
c0014b6b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b6f:	50                   	push   eax
c0014b70:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b74:	50                   	push   eax
c0014b75:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b79:	50                   	push   eax
c0014b7a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b7e:	50                   	push   eax
c0014b7f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b83:	50                   	push   eax
c0014b84:	6a 6d                	push   0x6d
c0014b86:	6a 6d                	push   0x6d
c0014b88:	e9 49 01 00 00       	jmp    c0014cd6 <Vm::faultHandler(regs*)+0x533>
c0014b8d:	0f b7 c8             	movzx  ecx,ax
c0014b90:	0f b7 f6             	movzx  esi,si
c0014b93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b9b:	74 20                	je     c0014bbd <Vm::faultHandler(regs*)+0x41a>
c0014b9d:	ed                   	in     eax,dx
c0014b9e:	55                   	push   ebp
c0014b9f:	50                   	push   eax
c0014ba0:	51                   	push   ecx
c0014ba1:	56                   	push   esi
c0014ba2:	e8 e7 fb ff ff       	call   c001478e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bb1:	74 05                	je     c0014bb8 <Vm::faultHandler(regs*)+0x415>
c0014bb3:	83 e8 04             	sub    eax,0x4
c0014bb6:	eb 27                	jmp    c0014bdf <Vm::faultHandler(regs*)+0x43c>
c0014bb8:	83 c0 04             	add    eax,0x4
c0014bbb:	eb 22                	jmp    c0014bdf <Vm::faultHandler(regs*)+0x43c>
c0014bbd:	66 ed                	in     ax,dx
c0014bbf:	0f b7 c0             	movzx  eax,ax
c0014bc2:	57                   	push   edi
c0014bc3:	50                   	push   eax
c0014bc4:	51                   	push   ecx
c0014bc5:	56                   	push   esi
c0014bc6:	e8 ad fb ff ff       	call   c0014778 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014bcb:	83 c4 10             	add    esp,0x10
c0014bce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bd1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bd5:	74 05                	je     c0014bdc <Vm::faultHandler(regs*)+0x439>
c0014bd7:	83 e8 02             	sub    eax,0x2
c0014bda:	eb 03                	jmp    c0014bdf <Vm::faultHandler(regs*)+0x43c>
c0014bdc:	83 c0 02             	add    eax,0x2
c0014bdf:	25 ff ff 00 00       	and    eax,0xffff
c0014be4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014be7:	e9 27 02 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014bec:	8d 46 ff             	lea    eax,[esi-0x1]
c0014bef:	3c 05                	cmp    al,0x5
c0014bf1:	77 24                	ja     c0014c17 <Vm::faultHandler(regs*)+0x474>
c0014bf3:	0f b6 c0             	movzx  eax,al
c0014bf6:	ff 24 85 9c ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1264]
c0014bfd:	0f b7 fd             	movzx  edi,bp
c0014c00:	eb 15                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x474>
c0014c02:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c06:	eb 0f                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x474>
c0014c08:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c0c:	eb 09                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x474>
c0014c0e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c12:	eb 03                	jmp    c0014c17 <Vm::faultHandler(regs*)+0x474>
c0014c14:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c1a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c1f:	74 29                	je     c0014c4a <Vm::faultHandler(regs*)+0x4a7>
c0014c21:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c26:	76 22                	jbe    c0014c4a <Vm::faultHandler(regs*)+0x4a7>
c0014c28:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c2c:	50                   	push   eax
c0014c2d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c31:	50                   	push   eax
c0014c32:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c36:	50                   	push   eax
c0014c37:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c3b:	50                   	push   eax
c0014c3c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c40:	50                   	push   eax
c0014c41:	6a 6e                	push   0x6e
c0014c43:	6a 6e                	push   0x6e
c0014c45:	e9 8c 00 00 00       	jmp    c0014cd6 <Vm::faultHandler(regs*)+0x533>
c0014c4a:	0f b7 c0             	movzx  eax,ax
c0014c4d:	52                   	push   edx
c0014c4e:	52                   	push   edx
c0014c4f:	50                   	push   eax
c0014c50:	57                   	push   edi
c0014c51:	e8 d9 fa ff ff       	call   c001472f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c56:	59                   	pop    ecx
c0014c57:	0f b6 c0             	movzx  eax,al
c0014c5a:	5e                   	pop    esi
c0014c5b:	50                   	push   eax
c0014c5c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c60:	50                   	push   eax
c0014c61:	e8 92 f6 ff ff       	call   c00142f8 <Vm::outbv(unsigned short, unsigned char)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c6c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c70:	74 03                	je     c0014c75 <Vm::faultHandler(regs*)+0x4d2>
c0014c72:	48                   	dec    eax
c0014c73:	eb 01                	jmp    c0014c76 <Vm::faultHandler(regs*)+0x4d3>
c0014c75:	40                   	inc    eax
c0014c76:	0f b7 c0             	movzx  eax,ax
c0014c79:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c7c:	e9 92 01 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014c81:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c84:	3c 05                	cmp    al,0x5
c0014c86:	77 1f                	ja     c0014ca7 <Vm::faultHandler(regs*)+0x504>
c0014c88:	0f b6 c0             	movzx  eax,al
c0014c8b:	ff 24 85 b4 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe124c]
c0014c92:	89 ef                	mov    edi,ebp
c0014c94:	eb 11                	jmp    c0014ca7 <Vm::faultHandler(regs*)+0x504>
c0014c96:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014c99:	eb 0c                	jmp    c0014ca7 <Vm::faultHandler(regs*)+0x504>
c0014c9b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014c9e:	eb 07                	jmp    c0014ca7 <Vm::faultHandler(regs*)+0x504>
c0014ca0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014ca3:	eb 02                	jmp    c0014ca7 <Vm::faultHandler(regs*)+0x504>
c0014ca5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014ca7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014caa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014caf:	74 37                	je     c0014ce8 <Vm::faultHandler(regs*)+0x545>
c0014cb1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014cb7:	76 2f                	jbe    c0014ce8 <Vm::faultHandler(regs*)+0x545>
c0014cb9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cbd:	50                   	push   eax
c0014cbe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cc2:	50                   	push   eax
c0014cc3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cc7:	50                   	push   eax
c0014cc8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ccc:	50                   	push   eax
c0014ccd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cd1:	50                   	push   eax
c0014cd2:	6a 6f                	push   0x6f
c0014cd4:	6a 6f                	push   0x6f
c0014cd6:	68 42 ed 01 c0       	push   0xc001ed42
c0014cdb:	e8 50 58 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014ce0:	83 c4 20             	add    esp,0x20
c0014ce3:	e9 86 01 00 00       	jmp    c0014e6e <Vm::faultHandler(regs*)+0x6cb>
c0014ce8:	0f b7 d7             	movzx  edx,di
c0014ceb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014cee:	0f b7 c6             	movzx  eax,si
c0014cf1:	81 e1 00 04 00 00    	and    ecx,0x400
c0014cf7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014cfa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cff:	74 1d                	je     c0014d1e <Vm::faultHandler(regs*)+0x57b>
c0014d01:	55                   	push   ebp
c0014d02:	55                   	push   ebp
c0014d03:	50                   	push   eax
c0014d04:	52                   	push   edx
c0014d05:	e8 48 fa ff ff       	call   c0014752 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	89 fa                	mov    edx,edi
c0014d0f:	ef                   	out    dx,eax
c0014d10:	85 c9                	test   ecx,ecx
c0014d12:	74 05                	je     c0014d19 <Vm::faultHandler(regs*)+0x576>
c0014d14:	83 ee 04             	sub    esi,0x4
c0014d17:	eb 21                	jmp    c0014d3a <Vm::faultHandler(regs*)+0x597>
c0014d19:	83 c6 04             	add    esi,0x4
c0014d1c:	eb 1c                	jmp    c0014d3a <Vm::faultHandler(regs*)+0x597>
c0014d1e:	55                   	push   ebp
c0014d1f:	55                   	push   ebp
c0014d20:	50                   	push   eax
c0014d21:	52                   	push   edx
c0014d22:	e8 19 fa ff ff       	call   c0014740 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d27:	83 c4 10             	add    esp,0x10
c0014d2a:	89 fa                	mov    edx,edi
c0014d2c:	66 ef                	out    dx,ax
c0014d2e:	85 c9                	test   ecx,ecx
c0014d30:	74 05                	je     c0014d37 <Vm::faultHandler(regs*)+0x594>
c0014d32:	83 ee 02             	sub    esi,0x2
c0014d35:	eb 03                	jmp    c0014d3a <Vm::faultHandler(regs*)+0x597>
c0014d37:	83 c6 02             	add    esi,0x2
c0014d3a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d43:	e9 cb 00 00 00       	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014d48:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d4f:	83 ec 0c             	sub    esp,0xc
c0014d52:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d56:	50                   	push   eax
c0014d57:	e8 89 f5 ff ff       	call   c00142e5 <Vm::inbv(unsigned short)>
c0014d5c:	0f b6 c0             	movzx  eax,al
c0014d5f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d62:	eb 3f                	jmp    c0014da3 <Vm::faultHandler(regs*)+0x600>
c0014d64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d69:	74 07                	je     c0014d72 <Vm::faultHandler(regs*)+0x5cf>
c0014d6b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d6f:	ed                   	in     eax,dx
c0014d70:	eb 14                	jmp    c0014d86 <Vm::faultHandler(regs*)+0x5e3>
c0014d72:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d75:	66 31 f6             	xor    si,si
c0014d78:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d7b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d7f:	66 ed                	in     ax,dx
c0014d81:	0f b7 c0             	movzx  eax,ax
c0014d84:	09 f0                	or     eax,esi
c0014d86:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d89:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d8d:	e9 84 00 00 00       	jmp    c0014e16 <Vm::faultHandler(regs*)+0x673>
c0014d92:	52                   	push   edx
c0014d93:	52                   	push   edx
c0014d94:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014d98:	50                   	push   eax
c0014d99:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d9d:	50                   	push   eax
c0014d9e:	e8 55 f5 ff ff       	call   c00142f8 <Vm::outbv(unsigned short, unsigned char)>
c0014da3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014da7:	eb 53                	jmp    c0014dfc <Vm::faultHandler(regs*)+0x659>
c0014da9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014dac:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014db0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014db5:	74 03                	je     c0014dba <Vm::faultHandler(regs*)+0x617>
c0014db7:	ef                   	out    dx,eax
c0014db8:	eb cf                	jmp    c0014d89 <Vm::faultHandler(regs*)+0x5e6>
c0014dba:	66 ef                	out    dx,ax
c0014dbc:	eb cb                	jmp    c0014d89 <Vm::faultHandler(regs*)+0x5e6>
c0014dbe:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dcc:	50                   	push   eax
c0014dcd:	e8 13 f5 ff ff       	call   c00142e5 <Vm::inbv(unsigned short)>
c0014dd2:	0f b6 c0             	movzx  eax,al
c0014dd5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dd8:	eb 1f                	jmp    c0014df9 <Vm::faultHandler(regs*)+0x656>
c0014dda:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014ddd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014de2:	74 03                	je     c0014de7 <Vm::faultHandler(regs*)+0x644>
c0014de4:	ed                   	in     eax,dx
c0014de5:	eb 0d                	jmp    c0014df4 <Vm::faultHandler(regs*)+0x651>
c0014de7:	66 ed                	in     ax,dx
c0014de9:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014dec:	0f b7 c0             	movzx  eax,ax
c0014def:	66 31 d2             	xor    dx,dx
c0014df2:	09 d0                	or     eax,edx
c0014df4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014df7:	eb 1a                	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014df9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	eb 15                	jmp    c0014e16 <Vm::faultHandler(regs*)+0x673>
c0014e01:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e04:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e07:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e0c:	74 03                	je     c0014e11 <Vm::faultHandler(regs*)+0x66e>
c0014e0e:	ef                   	out    dx,eax
c0014e0f:	eb 02                	jmp    c0014e13 <Vm::faultHandler(regs*)+0x670>
c0014e11:	66 ef                	out    dx,ax
c0014e13:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e16:	b0 01                	mov    al,0x1
c0014e18:	eb 56                	jmp    c0014e70 <Vm::faultHandler(regs*)+0x6cd>
c0014e1a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e1e:	50                   	push   eax
c0014e1f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e23:	50                   	push   eax
c0014e24:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e28:	50                   	push   eax
c0014e29:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e2d:	50                   	push   eax
c0014e2e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e32:	50                   	push   eax
c0014e33:	52                   	push   edx
c0014e34:	52                   	push   edx
c0014e35:	68 6f ed 01 c0       	push   0xc001ed6f
c0014e3a:	e8 f1 56 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014e3f:	83 c4 20             	add    esp,0x20
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	6a 60                	push   0x60
c0014e47:	e8 99 f4 ff ff       	call   c00142e5 <Vm::inbv(unsigned short)>
c0014e4c:	83 c4 10             	add    esp,0x10
c0014e4f:	3c 1c                	cmp    al,0x1c
c0014e51:	74 04                	je     c0014e57 <Vm::faultHandler(regs*)+0x6b4>
c0014e53:	3c 5a                	cmp    al,0x5a
c0014e55:	75 eb                	jne    c0014e42 <Vm::faultHandler(regs*)+0x69f>
c0014e57:	3c 5a                	cmp    al,0x5a
c0014e59:	74 04                	je     c0014e5f <Vm::faultHandler(regs*)+0x6bc>
c0014e5b:	3c 1c                	cmp    al,0x1c
c0014e5d:	75 0f                	jne    c0014e6e <Vm::faultHandler(regs*)+0x6cb>
c0014e5f:	83 ec 0c             	sub    esp,0xc
c0014e62:	6a 60                	push   0x60
c0014e64:	e8 7c f4 ff ff       	call   c00142e5 <Vm::inbv(unsigned short)>
c0014e69:	83 c4 10             	add    esp,0x10
c0014e6c:	eb e9                	jmp    c0014e57 <Vm::faultHandler(regs*)+0x6b4>
c0014e6e:	31 c0                	xor    eax,eax
c0014e70:	83 c4 1c             	add    esp,0x1c
c0014e73:	5b                   	pop    ebx
c0014e74:	5e                   	pop    esi
c0014e75:	5f                   	pop    edi
c0014e76:	5d                   	pop    ebp
c0014e77:	c3                   	ret    

c0014e78 <noCopro(unsigned long)>:
c0014e78:	c3                   	ret    

c0014e79 <nmiHandler(regs*, void*)>:
c0014e79:	83 ec 0c             	sub    esp,0xc
c0014e7c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014e81:	83 ec 0c             	sub    esp,0xc
c0014e84:	50                   	push   eax
c0014e85:	e8 50 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	90                   	nop
c0014e8e:	83 c4 0c             	add    esp,0xc
c0014e91:	c3                   	ret    

c0014e92 <doubleFault(regs*, void*)>:
c0014e92:	55                   	push   ebp
c0014e93:	89 e5                	mov    ebp,esp
c0014e95:	83 ec 08             	sub    esp,0x8
c0014e98:	83 ec 0c             	sub    esp,0xc
c0014e9b:	68 cc ed 01 c0       	push   0xc001edcc
c0014ea0:	e8 0e b3 ff ff       	call   c00101b3 <KePanic(char const*)>
c0014ea5:	83 c4 10             	add    esp,0x10
c0014ea8:	90                   	nop
c0014ea9:	c9                   	leave  
c0014eaa:	c3                   	ret    

c0014eab <displayDebugInfo(regs*)>:
c0014eab:	83 ec 1c             	sub    esp,0x1c
c0014eae:	0f 20 c0             	mov    eax,cr0
c0014eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014eb5:	0f 20 d0             	mov    eax,cr2
c0014eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ebc:	0f 20 d8             	mov    eax,cr3
c0014ebf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ec3:	0f 20 e0             	mov    eax,cr4
c0014ec6:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ecd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ed0:	83 ec 08             	sub    esp,0x8
c0014ed3:	50                   	push   eax
c0014ed4:	68 e8 ed 01 c0       	push   0xc001ede8
c0014ed9:	e8 52 56 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014ede:	83 c4 10             	add    esp,0x10
c0014ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ee8:	83 ec 08             	sub    esp,0x8
c0014eeb:	50                   	push   eax
c0014eec:	68 d9 ed 01 c0       	push   0xc001edd9
c0014ef1:	e8 3a 56 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f00:	83 ec 08             	sub    esp,0x8
c0014f03:	50                   	push   eax
c0014f04:	68 e4 ed 01 c0       	push   0xc001ede4
c0014f09:	e8 22 56 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f18:	83 ec 08             	sub    esp,0x8
c0014f1b:	50                   	push   eax
c0014f1c:	68 f3 ed 01 c0       	push   0xc001edf3
c0014f21:	e8 0a 56 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014f26:	83 c4 10             	add    esp,0x10
c0014f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f2d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f30:	83 ec 08             	sub    esp,0x8
c0014f33:	50                   	push   eax
c0014f34:	68 fe ed 01 c0       	push   0xc001edfe
c0014f39:	e8 f2 55 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	83 ec 08             	sub    esp,0x8
c0014f44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f48:	68 09 ee 01 c0       	push   0xc001ee09
c0014f4d:	e8 de 55 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	83 ec 08             	sub    esp,0x8
c0014f58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f5c:	68 14 ee 01 c0       	push   0xc001ee14
c0014f61:	e8 ca 55 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0014f66:	83 c4 10             	add    esp,0x10
c0014f69:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f74:	83 ec 0c             	sub    esp,0xc
c0014f77:	50                   	push   eax
c0014f78:	e8 7a 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f7d:	83 c4 10             	add    esp,0x10
c0014f80:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f8b:	83 ec 08             	sub    esp,0x8
c0014f8e:	68 1f ee 01 c0       	push   0xc001ee1f
c0014f93:	50                   	push   eax
c0014f94:	e8 9d 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fa1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fa7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014fac:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fae:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fb1:	83 c2 0c             	add    edx,0xc
c0014fb4:	83 ec 08             	sub    esp,0x8
c0014fb7:	52                   	push   edx
c0014fb8:	50                   	push   eax
c0014fb9:	e8 78 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fc6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fcc:	83 ec 08             	sub    esp,0x8
c0014fcf:	68 28 ee 01 c0       	push   0xc001ee28
c0014fd4:	50                   	push   eax
c0014fd5:	e8 5c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fda:	83 c4 10             	add    esp,0x10
c0014fdd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fe2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fe8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014fec:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014fef:	83 ec 08             	sub    esp,0x8
c0014ff2:	52                   	push   edx
c0014ff3:	50                   	push   eax
c0014ff4:	e8 f7 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ff9:	83 c4 10             	add    esp,0x10
c0014ffc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015001:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015007:	83 ec 08             	sub    esp,0x8
c001500a:	68 30 ee 01 c0       	push   0xc001ee30
c001500f:	50                   	push   eax
c0015010:	e8 21 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001501d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015023:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015027:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001502a:	83 ec 08             	sub    esp,0x8
c001502d:	52                   	push   edx
c001502e:	50                   	push   eax
c001502f:	e8 bc 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015034:	83 c4 10             	add    esp,0x10
c0015037:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001503c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015042:	83 ec 08             	sub    esp,0x8
c0015045:	68 38 ee 01 c0       	push   0xc001ee38
c001504a:	50                   	push   eax
c001504b:	e8 e6 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015058:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015062:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015065:	83 ec 08             	sub    esp,0x8
c0015068:	52                   	push   edx
c0015069:	50                   	push   eax
c001506a:	e8 81 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001506f:	83 c4 10             	add    esp,0x10
c0015072:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015077:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001507d:	83 ec 08             	sub    esp,0x8
c0015080:	68 40 ee 01 c0       	push   0xc001ee40
c0015085:	50                   	push   eax
c0015086:	e8 ab 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001508b:	83 c4 10             	add    esp,0x10
c001508e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015093:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015099:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001509d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150a0:	83 ec 08             	sub    esp,0x8
c00150a3:	52                   	push   edx
c00150a4:	50                   	push   eax
c00150a5:	e8 46 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b8:	83 ec 08             	sub    esp,0x8
c00150bb:	68 48 ee 01 c0       	push   0xc001ee48
c00150c0:	50                   	push   eax
c00150c1:	e8 70 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150d8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150db:	83 ec 08             	sub    esp,0x8
c00150de:	52                   	push   edx
c00150df:	50                   	push   eax
c00150e0:	e8 0b 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150e5:	83 c4 10             	add    esp,0x10
c00150e8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f3:	83 ec 08             	sub    esp,0x8
c00150f6:	68 50 ee 01 c0       	push   0xc001ee50
c00150fb:	50                   	push   eax
c00150fc:	e8 35 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015109:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015113:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015116:	83 ec 08             	sub    esp,0x8
c0015119:	52                   	push   edx
c001511a:	50                   	push   eax
c001511b:	e8 d0 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015128:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512e:	83 ec 08             	sub    esp,0x8
c0015131:	68 58 ee 01 c0       	push   0xc001ee58
c0015136:	50                   	push   eax
c0015137:	e8 fa 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015144:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001514a:	83 ec 08             	sub    esp,0x8
c001514d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015151:	50                   	push   eax
c0015152:	e8 99 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015157:	83 c4 10             	add    esp,0x10
c001515a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001515f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015165:	83 ec 08             	sub    esp,0x8
c0015168:	68 61 ee 01 c0       	push   0xc001ee61
c001516d:	50                   	push   eax
c001516e:	e8 c3 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001517b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015181:	83 ec 08             	sub    esp,0x8
c0015184:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015188:	50                   	push   eax
c0015189:	e8 62 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015196:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519c:	83 ec 08             	sub    esp,0x8
c001519f:	68 69 ee 01 c0       	push   0xc001ee69
c00151a4:	50                   	push   eax
c00151a5:	e8 8c 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b8:	83 ec 08             	sub    esp,0x8
c00151bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151bf:	50                   	push   eax
c00151c0:	e8 2b 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151c5:	83 c4 10             	add    esp,0x10
c00151c8:	fa                   	cli    
c00151c9:	f4                   	hlt    
c00151ca:	eb fe                	jmp    c00151ca <displayDebugInfo(regs*)+0x31f>

c00151cc <HalSystemIdle()>:
c00151cc:	56                   	push   esi
c00151cd:	53                   	push   ebx
c00151ce:	83 ec 14             	sub    esp,0x14
c00151d1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151dc:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151e2:	83 e0 04             	and    eax,0x4
c00151e5:	84 c0                	test   al,al
c00151e7:	0f 95 c0             	setne  al
c00151ea:	84 c0                	test   al,al
c00151ec:	74 4c                	je     c001523a <HalSystemIdle()+0x6e>
c00151ee:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151f3:	83 ec 08             	sub    esp,0x8
c00151f6:	68 e1 00 00 00       	push   0xe1
c00151fb:	50                   	push   eax
c00151fc:	e8 f1 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015201:	83 c4 10             	add    esp,0x10
c0015204:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015208:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001520c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015215:	83 e2 02             	and    edx,0x2
c0015218:	89 d3                	mov    ebx,edx
c001521a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001521e:	83 e2 00             	and    edx,0x0
c0015221:	89 d6                	mov    esi,edx
c0015223:	56                   	push   esi
c0015224:	53                   	push   ebx
c0015225:	68 e1 00 00 00       	push   0xe1
c001522a:	50                   	push   eax
c001522b:	e8 ee 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	e8 5c af fe ff       	call   c0000194 <doTPAUSE>
c0015238:	eb 01                	jmp    c001523b <HalSystemIdle()+0x6f>
c001523a:	f4                   	hlt    
c001523b:	90                   	nop
c001523c:	83 c4 14             	add    esp,0x14
c001523f:	5b                   	pop    ebx
c0015240:	5e                   	pop    esi
c0015241:	c3                   	ret    

c0015242 <displayProgramFault(char const*)>:
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	83 ec 0c             	sub    esp,0xc
c0015248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001524c:	e8 df 52 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015259:	8b 00                	mov    eax,DWORD PTR [eax]
c001525b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001525e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015264:	85 c0                	test   eax,eax
c0015266:	74 21                	je     c0015289 <displayProgramFault(char const*)+0x47>
c0015268:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001526d:	8b 00                	mov    eax,DWORD PTR [eax]
c001526f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015272:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015278:	6a 04                	push   0x4
c001527a:	6a 0f                	push   0xf
c001527c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015280:	50                   	push   eax
c0015281:	e8 22 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015286:	83 c4 10             	add    esp,0x10
c0015289:	90                   	nop
c001528a:	83 c4 0c             	add    esp,0xc
c001528d:	c3                   	ret    

c001528e <gpFault(regs*, void*)>:
c001528e:	83 ec 1c             	sub    esp,0x1c
c0015291:	c7 05 10 52 02 c0 a3 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00147a3
c001529b:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152a0:	85 c0                	test   eax,eax
c00152a2:	74 1c                	je     c00152c0 <gpFault(regs*, void*)+0x32>
c00152a4:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152a9:	83 ec 0c             	sub    esp,0xc
c00152ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152b0:	ff d0                	call   eax
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152be:	75 2e                	jne    c00152ee <gpFault(regs*, void*)+0x60>
c00152c0:	83 ec 0c             	sub    esp,0xc
c00152c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152c7:	e8 df fb ff ff       	call   c0014eab <displayDebugInfo(regs*)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	83 ec 0c             	sub    esp,0xc
c00152d2:	68 71 ee 01 c0       	push   0xc001ee71
c00152d7:	e8 66 ff ff ff       	call   c0015242 <displayProgramFault(char const*)>
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	83 ec 0c             	sub    esp,0xc
c00152e2:	6a 00                	push   0x0
c00152e4:	e8 af ee ff ff       	call   c0014198 <Thr::terminateFromIRQ(int)>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	eb 01                	jmp    c00152ef <gpFault(regs*, void*)+0x61>
c00152ee:	90                   	nop
c00152ef:	83 c4 1c             	add    esp,0x1c
c00152f2:	c3                   	ret    

c00152f3 <pgFault(regs*, void*)>:
c00152f3:	83 ec 1c             	sub    esp,0x1c
c00152f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152fa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152fd:	0f 20 d0             	mov    eax,cr2
c0015300:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015308:	83 ec 04             	sub    esp,0x4
c001530b:	52                   	push   edx
c001530c:	50                   	push   eax
c001530d:	68 50 ef 01 c0       	push   0xc001ef50
c0015312:	e8 19 52 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c0015317:	83 c4 10             	add    esp,0x10
c001531a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001531f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015321:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015324:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001532a:	0f 20 d2             	mov    edx,cr2
c001532d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015331:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015335:	83 ec 08             	sub    esp,0x8
c0015338:	52                   	push   edx
c0015339:	50                   	push   eax
c001533a:	e8 e5 4d ff ff       	call   c000a124 <VAS::tryLoadBackOffDisk(unsigned long)>
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	84 c0                	test   al,al
c0015344:	75 2e                	jne    c0015374 <pgFault(regs*, void*)+0x81>
c0015346:	83 ec 0c             	sub    esp,0xc
c0015349:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001534d:	e8 59 fb ff ff       	call   c0014eab <displayDebugInfo(regs*)>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	83 ec 0c             	sub    esp,0xc
c0015358:	68 8a ee 01 c0       	push   0xc001ee8a
c001535d:	e8 e0 fe ff ff       	call   c0015242 <displayProgramFault(char const*)>
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	83 ec 0c             	sub    esp,0xc
c0015368:	6a 00                	push   0x0
c001536a:	e8 29 ee ff ff       	call   c0014198 <Thr::terminateFromIRQ(int)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	eb 01                	jmp    c0015375 <pgFault(regs*, void*)+0x82>
c0015374:	90                   	nop
c0015375:	83 c4 1c             	add    esp,0x1c
c0015378:	c3                   	ret    

c0015379 <otherISRHandler(regs*, void*)>:
c0015379:	83 ec 0c             	sub    esp,0xc
c001537c:	83 ec 0c             	sub    esp,0xc
c001537f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015383:	e8 23 fb ff ff       	call   c0014eab <displayDebugInfo(regs*)>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	83 ec 0c             	sub    esp,0xc
c001538e:	68 78 ef 01 c0       	push   0xc001ef78
c0015393:	e8 aa fe ff ff       	call   c0015242 <displayProgramFault(char const*)>
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	83 ec 0c             	sub    esp,0xc
c001539e:	6a 00                	push   0x0
c00153a0:	e8 f3 ed ff ff       	call   c0014198 <Thr::terminateFromIRQ(int)>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	90                   	nop
c00153a9:	83 c4 0c             	add    esp,0xc
c00153ac:	c3                   	ret    

c00153ad <opcodeFault(regs*, void*)>:
c00153ad:	55                   	push   ebp
c00153ae:	89 e5                	mov    ebp,esp
c00153b0:	83 ec 08             	sub    esp,0x8
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b9:	83 ec 08             	sub    esp,0x8
c00153bc:	50                   	push   eax
c00153bd:	68 95 ee 01 c0       	push   0xc001ee95
c00153c2:	e8 69 51 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00153c7:	83 c4 10             	add    esp,0x10
c00153ca:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00153cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153d5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153db:	84 c0                	test   al,al
c00153dd:	74 21                	je     c0015400 <opcodeFault(regs*, void*)+0x53>
c00153df:	83 ec 0c             	sub    esp,0xc
c00153e2:	68 a0 ef 01 c0       	push   0xc001efa0
c00153e7:	e8 44 51 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f5:	8d 50 19             	lea    edx,[eax+0x19]
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153fe:	eb 2b                	jmp    c001542b <opcodeFault(regs*, void*)+0x7e>
c0015400:	83 ec 0c             	sub    esp,0xc
c0015403:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015406:	e8 a0 fa ff ff       	call   c0014eab <displayDebugInfo(regs*)>
c001540b:	83 c4 10             	add    esp,0x10
c001540e:	83 ec 0c             	sub    esp,0xc
c0015411:	68 a3 ee 01 c0       	push   0xc001eea3
c0015416:	e8 27 fe ff ff       	call   c0015242 <displayProgramFault(char const*)>
c001541b:	83 c4 10             	add    esp,0x10
c001541e:	83 ec 0c             	sub    esp,0xc
c0015421:	6a 00                	push   0x0
c0015423:	e8 70 ed ff ff       	call   c0014198 <Thr::terminateFromIRQ(int)>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	c9                   	leave  
c001542c:	c3                   	ret    

c001542d <i386SaveCoprocessor(void*)>:
c001542d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015431:	83 c0 3f             	add    eax,0x3f
c0015434:	83 e0 c0             	and    eax,0xffffffc0
c0015437:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001543b:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015441 <i386LoadCoprocessor(void*)>:
c0015441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015445:	83 c0 3f             	add    eax,0x3f
c0015448:	83 e0 c0             	and    eax,0xffffffc0
c001544b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001544f:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015455 <x87EmulHandler(regs*, void*)>:
c0015455:	53                   	push   ebx
c0015456:	83 ec 08             	sub    esp,0x8
c0015459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001545e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015462:	74 10                	je     c0015474 <x87EmulHandler(regs*, void*)+0x1f>
c0015464:	83 ec 0c             	sub    esp,0xc
c0015467:	68 b0 ee 01 c0       	push   0xc001eeb0
c001546c:	e8 42 ad ff ff       	call   c00101b3 <KePanic(char const*)>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	0f 20 c0             	mov    eax,cr0
c0015477:	a8 08                	test   al,0x8
c0015479:	74 59                	je     c00154d4 <x87EmulHandler(regs*, void*)+0x7f>
c001547b:	0f 06                	clts   
c001547d:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c0015482:	85 c0                	test   eax,eax
c0015484:	74 0e                	je     c0015494 <x87EmulHandler(regs*, void*)+0x3f>
c0015486:	83 ec 0c             	sub    esp,0xc
c0015489:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001548c:	e8 9c ff ff ff       	call   c001542d <i386SaveCoprocessor(void*)>
c0015491:	83 c4 10             	add    esp,0x10
c0015494:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001549a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001549e:	75 12                	jne    c00154b2 <x87EmulHandler(regs*, void*)+0x5d>
c00154a0:	83 ec 0c             	sub    esp,0xc
c00154a3:	68 40 02 00 00       	push   0x240
c00154a8:	e8 0c 23 ff ff       	call   c00077b9 <malloc>
c00154ad:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154b0:	eb 10                	jmp    c00154c2 <x87EmulHandler(regs*, void*)+0x6d>
c00154b2:	83 ec 0c             	sub    esp,0xc
c00154b5:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154ba:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154bd:	e8 7f ff ff ff       	call   c0015441 <i386LoadCoprocessor(void*)>
c00154c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c00154cf:	83 c4 08             	add    esp,0x8
c00154d2:	5b                   	pop    ebx
c00154d3:	c3                   	ret    
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	68 c4 ee 01 c0       	push   0xc001eec4
c00154dc:	e8 4f 50 ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00154e1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154e9:	83 c4 18             	add    esp,0x18
c00154ec:	5b                   	pop    ebx
c00154ed:	e9 a6 ec ff ff       	jmp    c0014198 <Thr::terminateFromIRQ(int)>

c00154f2 <HalInitialiseCoprocessor()>:
c00154f2:	83 ec 10             	sub    esp,0x10
c00154f5:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00154ff:	6a 00                	push   0x0
c0015501:	68 55 54 01 c0       	push   0xc0015455
c0015506:	6a 07                	push   0x7
c0015508:	e8 97 69 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001550d:	e8 8e 65 00 00       	call   c001baa0 <avxDetect>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	85 c0                	test   eax,eax
c0015517:	74 1c                	je     c0015535 <HalInitialiseCoprocessor()+0x43>
c0015519:	c7 05 0c 52 02 c0 ca ba 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001baca
c0015523:	c7 05 08 52 02 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001badb
c001552d:	83 c4 0c             	add    esp,0xc
c0015530:	e9 b7 65 00 00       	jmp    c001baec <avxInit>
c0015535:	e8 46 68 00 00       	call   c001bd80 <absolutelyNoChanceInHell>
c001553a:	85 c0                	test   eax,eax
c001553c:	74 1c                	je     c001555a <HalInitialiseCoprocessor()+0x68>
c001553e:	c7 05 0c 52 02 c0 98 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bd98
c0015548:	c7 05 08 52 02 c0 a0 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bda0
c0015552:	83 c4 0c             	add    esp,0xc
c0015555:	e9 4e 68 00 00       	jmp    c001bda8 <sseInit>
c001555a:	e8 67 68 00 00       	call   c001bdc6 <x87Detect>
c001555f:	85 c0                	test   eax,eax
c0015561:	74 1c                	je     c001557f <HalInitialiseCoprocessor()+0x8d>
c0015563:	c7 05 0c 52 02 c0 e1 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bde1
c001556d:	c7 05 08 52 02 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bde8
c0015577:	83 c4 0c             	add    esp,0xc
c001557a:	e9 70 68 00 00       	jmp    c001bdef <x87Init>
c001557f:	c7 05 0c 52 02 c0 78 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014e78
c0015589:	c7 05 08 52 02 c0 78 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014e78
c0015593:	0f 20 c0             	mov    eax,cr0
c0015596:	83 c8 04             	or     eax,0x4
c0015599:	0f 22 c0             	mov    cr0,eax
c001559c:	83 c4 0c             	add    esp,0xc
c001559f:	c3                   	ret    

c00155a0 <HalPanic(char const*)>:
c00155a0:	53                   	push   ebx
c00155a1:	83 ec 10             	sub    esp,0x10
c00155a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155a8:	fa                   	cli    
c00155a9:	53                   	push   ebx
c00155aa:	68 da ee 01 c0       	push   0xc001eeda
c00155af:	e8 7c 4f ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00155b4:	83 c4 0c             	add    esp,0xc
c00155b7:	6a 01                	push   0x1
c00155b9:	6a 0f                	push   0xf
c00155bb:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155c1:	e8 84 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155c6:	58                   	pop    eax
c00155c7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155cd:	e8 70 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155d2:	5a                   	pop    edx
c00155d3:	59                   	pop    ecx
c00155d4:	68 e8 d7 01 c0       	push   0xc001d7e8
c00155d9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155df:	e8 9e 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00155e4:	83 c4 0c             	add    esp,0xc
c00155e7:	6a 01                	push   0x1
c00155e9:	6a 0f                	push   0xf
c00155eb:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155f1:	e8 54 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155f6:	58                   	pop    eax
c00155f7:	5a                   	pop    edx
c00155f8:	68 f3 ee 01 c0       	push   0xc001eef3
c00155fd:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015603:	e8 2e 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015608:	83 c4 0c             	add    esp,0xc
c001560b:	6a 0f                	push   0xf
c001560d:	6a 01                	push   0x1
c001560f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015615:	e8 30 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001561a:	59                   	pop    ecx
c001561b:	58                   	pop    eax
c001561c:	68 fc ee 01 c0       	push   0xc001eefc
c0015621:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015627:	e8 0a 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001562c:	83 c4 0c             	add    esp,0xc
c001562f:	6a 01                	push   0x1
c0015631:	6a 0f                	push   0xf
c0015633:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015639:	e8 0c 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001563e:	58                   	pop    eax
c001563f:	5a                   	pop    edx
c0015640:	68 40 ef 01 c0       	push   0xc001ef40
c0015645:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001564b:	e8 e6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015650:	59                   	pop    ecx
c0015651:	58                   	pop    eax
c0015652:	68 09 ef 01 c0       	push   0xc001ef09
c0015657:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001565d:	e8 d4 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015662:	58                   	pop    eax
c0015663:	5a                   	pop    edx
c0015664:	68 43 ef 01 c0       	push   0xc001ef43
c0015669:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001566f:	e8 c2 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015674:	59                   	pop    ecx
c0015675:	58                   	pop    eax
c0015676:	53                   	push   ebx
c0015677:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001567d:	e8 b4 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015682:	58                   	pop    eax
c0015683:	5a                   	pop    edx
c0015684:	68 40 ef 01 c0       	push   0xc001ef40
c0015689:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001568f:	e8 a2 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015694:	83 c4 10             	add    esp,0x10
c0015697:	eb fe                	jmp    c0015697 <HalPanic(char const*)+0xf7>

c0015699 <HalQueryPerformanceCounter()>:
c0015699:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001569e:	31 d2                	xor    edx,edx
c00156a0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156a6:	31 c0                	xor    eax,eax
c00156a8:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156af:	74 02                	je     c00156b3 <HalQueryPerformanceCounter()+0x1a>
c00156b1:	0f 31                	rdtsc  
c00156b3:	c3                   	ret    

c00156b4 <HalInitialise()>:
c00156b4:	53                   	push   ebx
c00156b5:	83 ec 08             	sub    esp,0x8
c00156b8:	e8 1a 6a ff ff       	call   c000c0d7 <setupINTS()>
c00156bd:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c00156c4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156c9:	75 07                	jne    c00156d2 <HalInitialise()+0x1e>
c00156cb:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156d2:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00156d8:	83 e0 01             	and    eax,0x1
c00156db:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00156e0:	e8 a7 02 00 00       	call   c001598c <picOpen()>
c00156e5:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00156ec:	74 0a                	je     c00156f8 <HalInitialise()+0x44>
c00156ee:	e8 e1 01 00 00       	call   c00158d4 <picDisable()>
c00156f3:	e8 26 5d 00 00       	call   c001b41e <apicOpen()>
c00156f8:	bb 0f 00 00 00       	mov    ebx,0xf
c00156fd:	50                   	push   eax
c00156fe:	6a 00                	push   0x0
c0015700:	68 79 53 01 c0       	push   0xc0015379
c0015705:	6a 00                	push   0x0
c0015707:	e8 98 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001570c:	83 c4 0c             	add    esp,0xc
c001570f:	6a 00                	push   0x0
c0015711:	68 79 53 01 c0       	push   0xc0015379
c0015716:	6a 01                	push   0x1
c0015718:	e8 87 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001571d:	83 c4 0c             	add    esp,0xc
c0015720:	6a 00                	push   0x0
c0015722:	68 79 4e 01 c0       	push   0xc0014e79
c0015727:	6a 02                	push   0x2
c0015729:	e8 76 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001572e:	83 c4 0c             	add    esp,0xc
c0015731:	6a 00                	push   0x0
c0015733:	68 79 53 01 c0       	push   0xc0015379
c0015738:	6a 03                	push   0x3
c001573a:	e8 65 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001573f:	83 c4 0c             	add    esp,0xc
c0015742:	6a 00                	push   0x0
c0015744:	68 79 53 01 c0       	push   0xc0015379
c0015749:	6a 04                	push   0x4
c001574b:	e8 54 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015750:	83 c4 0c             	add    esp,0xc
c0015753:	6a 00                	push   0x0
c0015755:	68 79 53 01 c0       	push   0xc0015379
c001575a:	6a 05                	push   0x5
c001575c:	e8 43 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015761:	83 c4 0c             	add    esp,0xc
c0015764:	6a 00                	push   0x0
c0015766:	68 ad 53 01 c0       	push   0xc00153ad
c001576b:	6a 06                	push   0x6
c001576d:	e8 32 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015772:	83 c4 0c             	add    esp,0xc
c0015775:	6a 00                	push   0x0
c0015777:	68 92 4e 01 c0       	push   0xc0014e92
c001577c:	6a 08                	push   0x8
c001577e:	e8 21 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015783:	83 c4 0c             	add    esp,0xc
c0015786:	6a 00                	push   0x0
c0015788:	68 79 53 01 c0       	push   0xc0015379
c001578d:	6a 09                	push   0x9
c001578f:	e8 10 67 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015794:	83 c4 0c             	add    esp,0xc
c0015797:	6a 00                	push   0x0
c0015799:	68 79 53 01 c0       	push   0xc0015379
c001579e:	6a 0a                	push   0xa
c00157a0:	e8 ff 66 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a5:	83 c4 0c             	add    esp,0xc
c00157a8:	6a 00                	push   0x0
c00157aa:	68 79 53 01 c0       	push   0xc0015379
c00157af:	6a 0b                	push   0xb
c00157b1:	e8 ee 66 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b6:	83 c4 0c             	add    esp,0xc
c00157b9:	6a 00                	push   0x0
c00157bb:	68 8e 52 01 c0       	push   0xc001528e
c00157c0:	6a 0d                	push   0xd
c00157c2:	e8 dd 66 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c7:	83 c4 0c             	add    esp,0xc
c00157ca:	6a 00                	push   0x0
c00157cc:	68 f3 52 01 c0       	push   0xc00152f3
c00157d1:	6a 0e                	push   0xe
c00157d3:	e8 cc 66 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d8:	83 c4 10             	add    esp,0x10
c00157db:	50                   	push   eax
c00157dc:	6a 00                	push   0x0
c00157de:	68 79 53 01 c0       	push   0xc0015379
c00157e3:	53                   	push   ebx
c00157e4:	43                   	inc    ebx
c00157e5:	e8 ba 66 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	83 fb 1e             	cmp    ebx,0x1e
c00157f0:	75 e9                	jne    c00157db <HalInitialise()+0x127>
c00157f2:	50                   	push   eax
c00157f3:	6a 00                	push   0x0
c00157f5:	68 03 14 01 c0       	push   0xc0011403
c00157fa:	6a 60                	push   0x60
c00157fc:	e8 a3 66 ff ff       	call   c000bea4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015801:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015806:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015810:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015817:	e8 9d 1f ff ff       	call   c00077b9 <malloc>
c001581c:	89 04 24             	mov    DWORD PTR [esp],eax
c001581f:	89 c3                	mov    ebx,eax
c0015821:	e8 2e 09 00 00       	call   c0016154 <RTC::RTC()>
c0015826:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015830:	5a                   	pop    edx
c0015831:	59                   	pop    ecx
c0015832:	53                   	push   ebx
c0015833:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015839:	e8 32 61 ff ff       	call   c000b970 <Device::addChild(Device*)>
c001583e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015840:	6a 00                	push   0x0
c0015842:	6a 00                	push   0x0
c0015844:	6a 00                	push   0x0
c0015846:	53                   	push   ebx
c0015847:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001584a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001584f:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015855:	83 c4 28             	add    esp,0x28
c0015858:	5b                   	pop    ebx
c0015859:	c3                   	ret    

c001585a <HalMakeBeep(int)>:
c001585a:	53                   	push   ebx
c001585b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001585f:	85 db                	test   ebx,ebx
c0015861:	75 07                	jne    c001586a <HalMakeBeep(int)+0x10>
c0015863:	e4 61                	in     al,0x61
c0015865:	83 e0 fc             	and    eax,0xfffffffc
c0015868:	eb 26                	jmp    c0015890 <HalMakeBeep(int)+0x36>
c001586a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001586f:	99                   	cdq    
c0015870:	f7 fb                	idiv   ebx
c0015872:	89 c1                	mov    ecx,eax
c0015874:	b0 b6                	mov    al,0xb6
c0015876:	e6 43                	out    0x43,al
c0015878:	88 c8                	mov    al,cl
c001587a:	e6 42                	out    0x42,al
c001587c:	89 c8                	mov    eax,ecx
c001587e:	c1 e8 08             	shr    eax,0x8
c0015881:	e6 42                	out    0x42,al
c0015883:	e4 61                	in     al,0x61
c0015885:	88 c2                	mov    dl,al
c0015887:	83 ca 03             	or     edx,0x3
c001588a:	38 c2                	cmp    dl,al
c001588c:	74 04                	je     c0015892 <HalMakeBeep(int)+0x38>
c001588e:	88 d0                	mov    al,dl
c0015890:	e6 61                	out    0x61,al
c0015892:	5b                   	pop    ebx
c0015893:	c3                   	ret    

c0015894 <HalGetRand()>:
c0015894:	31 c0                	xor    eax,eax
c0015896:	c3                   	ret    

c0015897 <HalEndOfInterrupt(int)>:
c0015897:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c001589e:	74 23                	je     c00158c3 <HalEndOfInterrupt(int)+0x2c>
c00158a0:	83 ec 14             	sub    esp,0x14
c00158a3:	6a 1b                	push   0x1b
c00158a5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158ab:	e8 42 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00158b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158b5:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158bf:	83 c4 1c             	add    esp,0x1c
c00158c2:	c3                   	ret    
c00158c3:	e9 54 02 00 00       	jmp    c0015b1c <picEOI(int)>

c00158c8 <HalRestart()>:
c00158c8:	c3                   	ret    

c00158c9 <HalShutdown()>:
c00158c9:	c3                   	ret    

c00158ca <HalSleep()>:
c00158ca:	c3                   	ret    
c00158cb:	90                   	nop

c00158cc <picIoWait()>:
c00158cc:	eb 00                	jmp    c00158ce <picIoWait()+0x2>
c00158ce:	eb 00                	jmp    c00158d0 <picIoWait()+0x4>
c00158d0:	90                   	nop
c00158d1:	c3                   	ret    
c00158d2:	66 90                	xchg   ax,ax

c00158d4 <picDisable()>:
c00158d4:	83 ec 10             	sub    esp,0x10
c00158d7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158de:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158ec:	ee                   	out    dx,al
c00158ed:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158f4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158fd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015902:	ee                   	out    dx,al
c0015903:	90                   	nop
c0015904:	83 c4 10             	add    esp,0x10
c0015907:	c3                   	ret    

c0015908 <picGetIRQReg(int)>:
c0015908:	83 ec 10             	sub    esp,0x10
c001590b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001590f:	25 ff 00 00 00       	and    eax,0xff
c0015914:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001591b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001591f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015923:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015928:	ee                   	out    dx,al
c0015929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001592d:	25 ff 00 00 00       	and    eax,0xff
c0015932:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015939:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001593d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015941:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015946:	ee                   	out    dx,al
c0015947:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001594e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015953:	89 c2                	mov    edx,eax
c0015955:	ec                   	in     al,dx
c0015956:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001595a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001595e:	25 ff 00 00 00       	and    eax,0xff
c0015963:	c1 e0 08             	shl    eax,0x8
c0015966:	89 c1                	mov    ecx,eax
c0015968:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001596f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015974:	89 c2                	mov    edx,eax
c0015976:	ec                   	in     al,dx
c0015977:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001597b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001597f:	25 ff 00 00 00       	and    eax,0xff
c0015984:	09 c8                	or     eax,ecx
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	c3                   	ret    
c001598a:	66 90                	xchg   ax,ax

c001598c <picOpen()>:
c001598c:	83 ec 50             	sub    esp,0x50
c001598f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015996:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001599b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001599f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159a3:	ee                   	out    dx,al
c00159a4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159b0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159b8:	ee                   	out    dx,al
c00159b9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159c1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159c9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159d4:	89 c2                	mov    edx,eax
c00159d6:	ec                   	in     al,dx
c00159d7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159db:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159df:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159e3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159ee:	89 c2                	mov    edx,eax
c00159f0:	ec                   	in     al,dx
c00159f1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159f5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159f9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159fd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a04:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a09:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a11:	ee                   	out    dx,al
c0015a12:	e8 b5 fe ff ff       	call   c00158cc <picIoWait()>
c0015a17:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a1e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a23:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a2b:	ee                   	out    dx,al
c0015a2c:	e8 9b fe ff ff       	call   c00158cc <picIoWait()>
c0015a31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a35:	25 ff 00 00 00       	and    eax,0xff
c0015a3a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a41:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a45:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a4d:	ee                   	out    dx,al
c0015a4e:	e8 79 fe ff ff       	call   c00158cc <picIoWait()>
c0015a53:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a57:	25 ff 00 00 00       	and    eax,0xff
c0015a5c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a63:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a67:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a6b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a6f:	ee                   	out    dx,al
c0015a70:	e8 57 fe ff ff       	call   c00158cc <picIoWait()>
c0015a75:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a7c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a81:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a89:	ee                   	out    dx,al
c0015a8a:	e8 3d fe ff ff       	call   c00158cc <picIoWait()>
c0015a8f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a96:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a9b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a9f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015aa3:	ee                   	out    dx,al
c0015aa4:	e8 23 fe ff ff       	call   c00158cc <picIoWait()>
c0015aa9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015ab0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015ab5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015ab9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015abd:	ee                   	out    dx,al
c0015abe:	e8 09 fe ff ff       	call   c00158cc <picIoWait()>
c0015ac3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015aca:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015acf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015ad3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ad7:	ee                   	out    dx,al
c0015ad8:	e8 ef fd ff ff       	call   c00158cc <picIoWait()>
c0015add:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015ae1:	25 ff 00 00 00       	and    eax,0xff
c0015ae6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015aed:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015af1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015af5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015af9:	ee                   	out    dx,al
c0015afa:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015afe:	25 ff 00 00 00       	and    eax,0xff
c0015b03:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b0a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b0e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b12:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b16:	ee                   	out    dx,al
c0015b17:	90                   	nop
c0015b18:	83 c4 50             	add    esp,0x50
c0015b1b:	c3                   	ret    

c0015b1c <picEOI(int)>:
c0015b1c:	83 ec 10             	sub    esp,0x10
c0015b1f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b24:	75 22                	jne    c0015b48 <picEOI(int)+0x2c>
c0015b26:	6a 0b                	push   0xb
c0015b28:	e8 db fd ff ff       	call   c0015908 <picGetIRQReg(int)>
c0015b2d:	83 c4 04             	add    esp,0x4
c0015b30:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b35:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b3a:	25 ff ff 00 00       	and    eax,0xffff
c0015b3f:	25 80 00 00 00       	and    eax,0x80
c0015b44:	74 72                	je     c0015bb8 <picEOI(int)+0x9c>
c0015b46:	66 90                	xchg   ax,ax
c0015b48:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b4d:	75 31                	jne    c0015b80 <picEOI(int)+0x64>
c0015b4f:	6a 0b                	push   0xb
c0015b51:	e8 b2 fd ff ff       	call   c0015908 <picGetIRQReg(int)>
c0015b56:	83 c4 04             	add    esp,0x4
c0015b59:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b62:	66 85 c0             	test   ax,ax
c0015b65:	78 19                	js     c0015b80 <picEOI(int)+0x64>
c0015b67:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b6e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b7c:	ee                   	out    dx,al
c0015b7d:	eb 3d                	jmp    c0015bbc <picEOI(int)+0xa0>
c0015b7f:	90                   	nop
c0015b80:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b85:	7e 19                	jle    c0015ba0 <picEOI(int)+0x84>
c0015b87:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b8e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b93:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b97:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b9c:	ee                   	out    dx,al
c0015b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015ba7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015bac:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015bb0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015bb5:	ee                   	out    dx,al
c0015bb6:	eb 04                	jmp    c0015bbc <picEOI(int)+0xa0>
c0015bb8:	90                   	nop
c0015bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	c3                   	ret    

c0015bc0 <RTC::open(int, int, void*)>:
c0015bc0:	31 c0                	xor    eax,eax
c0015bc2:	c3                   	ret    
c0015bc3:	90                   	nop

c0015bc4 <RTC::close(int, int, void*)>:
c0015bc4:	31 c0                	xor    eax,eax
c0015bc6:	c3                   	ret    
c0015bc7:	90                   	nop

c0015bc8 <RTC::timeInSecondsUTC()>:
c0015bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bcc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bd2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bd8:	c3                   	ret    
c0015bd9:	90                   	nop

c0015bda <RTC::timeInDatetimeUTC()>:
c0015bda:	53                   	push   ebx
c0015bdb:	83 ec 14             	sub    esp,0x14
c0015bde:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be6:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be8:	50                   	push   eax
c0015be9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015bec:	83 c4 0c             	add    esp,0xc
c0015bef:	52                   	push   edx
c0015bf0:	50                   	push   eax
c0015bf1:	53                   	push   ebx
c0015bf2:	e8 ed 5a ff ff       	call   c000b6e4 <secondsToDatetime(unsigned long long)>
c0015bf7:	89 d8                	mov    eax,ebx
c0015bf9:	83 c4 14             	add    esp,0x14
c0015bfc:	5b                   	pop    ebx
c0015bfd:	c2 04 00             	ret    0x4

c0015c00 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c00:	56                   	push   esi
c0015c01:	53                   	push   ebx
c0015c02:	83 ec 14             	sub    esp,0x14
c0015c05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c0b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c0e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c12:	52                   	push   edx
c0015c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c1b:	50                   	push   eax
c0015c1c:	e8 c3 5a ff ff       	call   c000b6e4 <secondsToDatetime(unsigned long long)>
c0015c21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c2d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c31:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c35:	89 f0                	mov    eax,esi
c0015c37:	83 c4 20             	add    esp,0x20
c0015c3a:	5b                   	pop    ebx
c0015c3b:	5e                   	pop    esi
c0015c3c:	ff e0                	jmp    eax

c0015c3e <RTC::~RTC()>:
c0015c3e:	83 ec 0c             	sub    esp,0xc
c0015c41:	ba e0 ef 01 c0       	mov    edx,0xc001efe0
c0015c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c4a:	89 10                	mov    DWORD PTR [eax],edx
c0015c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c50:	83 ec 0c             	sub    esp,0xc
c0015c53:	50                   	push   eax
c0015c54:	e8 0f 58 ff ff       	call   c000b468 <Clock::~Clock()>
c0015c59:	83 c4 10             	add    esp,0x10
c0015c5c:	90                   	nop
c0015c5d:	83 c4 0c             	add    esp,0xc
c0015c60:	c3                   	ret    
c0015c61:	90                   	nop

c0015c62 <RTC::~RTC()>:
c0015c62:	83 ec 0c             	sub    esp,0xc
c0015c65:	83 ec 0c             	sub    esp,0xc
c0015c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c6c:	e8 cd ff ff ff       	call   c0015c3e <RTC::~RTC()>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 ec 08             	sub    esp,0x8
c0015c77:	68 60 01 00 00       	push   0x160
c0015c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c80:	e8 b5 47 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	83 c4 0c             	add    esp,0xc
c0015c8b:	c3                   	ret    

c0015c8c <RTC::get_update_in_progress_flag()>:
c0015c8c:	83 ec 14             	sub    esp,0x14
c0015c8f:	6a 0a                	push   0xa
c0015c91:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015c97:	e8 0a 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c9c:	83 c4 1c             	add    esp,0x1c
c0015c9f:	c0 e8 07             	shr    al,0x7
c0015ca2:	c3                   	ret    
c0015ca3:	90                   	nop

c0015ca4 <RTC::completeRTCRefresh()>:
c0015ca4:	55                   	push   ebp
c0015ca5:	57                   	push   edi
c0015ca6:	56                   	push   esi
c0015ca7:	53                   	push   ebx
c0015ca8:	83 ec 2c             	sub    esp,0x2c
c0015cab:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015cb1:	83 ec 0c             	sub    esp,0xc
c0015cb4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cb8:	e8 cf ff ff ff       	call   c0015c8c <RTC::get_update_in_progress_flag()>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	84 c0                	test   al,al
c0015cc2:	74 0e                	je     c0015cd2 <RTC::completeRTCRefresh()+0x2e>
c0015cc4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015cca:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015cd0:	73 df                	jae    c0015cb1 <RTC::completeRTCRefresh()+0xd>
c0015cd2:	55                   	push   ebp
c0015cd3:	55                   	push   ebp
c0015cd4:	6a 00                	push   0x0
c0015cd6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cdc:	e8 c5 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ce1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ce5:	58                   	pop    eax
c0015ce6:	5a                   	pop    edx
c0015ce7:	6a 02                	push   0x2
c0015ce9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cef:	e8 b2 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf4:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015cf8:	59                   	pop    ecx
c0015cf9:	5b                   	pop    ebx
c0015cfa:	6a 04                	push   0x4
c0015cfc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d02:	e8 9f 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d07:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d0b:	5e                   	pop    esi
c0015d0c:	5f                   	pop    edi
c0015d0d:	6a 07                	push   0x7
c0015d0f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d15:	e8 8c 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d1a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d1e:	5d                   	pop    ebp
c0015d1f:	58                   	pop    eax
c0015d20:	6a 08                	push   0x8
c0015d22:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d28:	e8 79 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d2d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d31:	58                   	pop    eax
c0015d32:	5a                   	pop    edx
c0015d33:	6a 09                	push   0x9
c0015d35:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d3b:	e8 66 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	0f b6 e8             	movzx  ebp,al
c0015d46:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d53:	e8 34 ff ff ff       	call   c0015c8c <RTC::get_update_in_progress_flag()>
c0015d58:	83 c4 10             	add    esp,0x10
c0015d5b:	84 c0                	test   al,al
c0015d5d:	74 0e                	je     c0015d6d <RTC::completeRTCRefresh()+0xc9>
c0015d5f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d65:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d6b:	73 df                	jae    c0015d4c <RTC::completeRTCRefresh()+0xa8>
c0015d6d:	50                   	push   eax
c0015d6e:	50                   	push   eax
c0015d6f:	6a 00                	push   0x0
c0015d71:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d77:	e8 2a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d7c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d80:	58                   	pop    eax
c0015d81:	5a                   	pop    edx
c0015d82:	6a 02                	push   0x2
c0015d84:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d8a:	e8 17 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d8f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d93:	59                   	pop    ecx
c0015d94:	5b                   	pop    ebx
c0015d95:	6a 04                	push   0x4
c0015d97:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d9d:	e8 04 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015da2:	5e                   	pop    esi
c0015da3:	88 c3                	mov    bl,al
c0015da5:	5f                   	pop    edi
c0015da6:	6a 07                	push   0x7
c0015da8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dae:	e8 f3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015db3:	89 c6                	mov    esi,eax
c0015db5:	58                   	pop    eax
c0015db6:	5a                   	pop    edx
c0015db7:	6a 08                	push   0x8
c0015db9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dbf:	e8 e2 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015dc8:	59                   	pop    ecx
c0015dc9:	5f                   	pop    edi
c0015dca:	6a 09                	push   0x9
c0015dcc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dd2:	e8 cf 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dd7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015ddb:	0f b6 f8             	movzx  edi,al
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015de5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015de9:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015ded:	89 f1                	mov    ecx,esi
c0015def:	0f 94 c0             	sete   al
c0015df2:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015df6:	0f 94 c2             	sete   dl
c0015df9:	21 d0                	and    eax,edx
c0015dfb:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015dff:	0f 94 c2             	sete   dl
c0015e02:	21 c2                	and    edx,eax
c0015e04:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e08:	0f 94 c0             	sete   al
c0015e0b:	21 d0                	and    eax,edx
c0015e0d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e11:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e15:	0f 94 c1             	sete   cl
c0015e18:	84 c8                	test   al,cl
c0015e1a:	75 29                	jne    c0015e45 <RTC::completeRTCRefresh()+0x1a1>
c0015e1c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e20:	89 fd                	mov    ebp,edi
c0015e22:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e26:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e2a:	89 f0                	mov    eax,esi
c0015e2c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e30:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e34:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e38:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e3c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e40:	e9 01 ff ff ff       	jmp    c0015d46 <RTC::completeRTCRefresh()+0xa2>
c0015e45:	39 fd                	cmp    ebp,edi
c0015e47:	75 d3                	jne    c0015e1c <RTC::completeRTCRefresh()+0x178>
c0015e49:	55                   	push   ebp
c0015e4a:	55                   	push   ebp
c0015e4b:	6a 0b                	push   0xb
c0015e4d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e53:	e8 4e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	89 c5                	mov    ebp,eax
c0015e5d:	a8 04                	test   al,0x4
c0015e5f:	75 78                	jne    c0015ed9 <RTC::completeRTCRefresh()+0x235>
c0015e61:	b1 0a                	mov    cl,0xa
c0015e63:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e67:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e6b:	83 e2 0f             	and    edx,0xf
c0015e6e:	c0 e8 04             	shr    al,0x4
c0015e71:	c1 ef 04             	shr    edi,0x4
c0015e74:	f6 e1                	mul    cl
c0015e76:	6b ff 0a             	imul   edi,edi,0xa
c0015e79:	01 d0                	add    eax,edx
c0015e7b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e7f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e83:	83 e2 0f             	and    edx,0xf
c0015e86:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e8a:	c0 e8 04             	shr    al,0x4
c0015e8d:	f6 e1                	mul    cl
c0015e8f:	01 d0                	add    eax,edx
c0015e91:	88 da                	mov    dl,bl
c0015e93:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e97:	83 e2 0f             	and    edx,0xf
c0015e9a:	88 d8                	mov    al,bl
c0015e9c:	83 e3 80             	and    ebx,0xffffff80
c0015e9f:	c0 e8 04             	shr    al,0x4
c0015ea2:	83 e0 07             	and    eax,0x7
c0015ea5:	f6 e1                	mul    cl
c0015ea7:	01 d0                	add    eax,edx
c0015ea9:	89 f2                	mov    edx,esi
c0015eab:	09 c3                	or     ebx,eax
c0015ead:	83 e2 0f             	and    edx,0xf
c0015eb0:	89 f0                	mov    eax,esi
c0015eb2:	c0 e8 04             	shr    al,0x4
c0015eb5:	f6 e1                	mul    cl
c0015eb7:	8d 34 02             	lea    esi,[edx+eax*1]
c0015eba:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ebe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ec2:	83 e2 0f             	and    edx,0xf
c0015ec5:	c0 e8 04             	shr    al,0x4
c0015ec8:	f6 e1                	mul    cl
c0015eca:	01 d0                	add    eax,edx
c0015ecc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ed0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ed4:	83 e0 0f             	and    eax,0xf
c0015ed7:	01 c7                	add    edi,eax
c0015ed9:	83 e5 02             	and    ebp,0x2
c0015edc:	75 14                	jne    c0015ef2 <RTC::completeRTCRefresh()+0x24e>
c0015ede:	84 db                	test   bl,bl
c0015ee0:	79 10                	jns    c0015ef2 <RTC::completeRTCRefresh()+0x24e>
c0015ee2:	83 e3 7f             	and    ebx,0x7f
c0015ee5:	b9 18 00 00 00       	mov    ecx,0x18
c0015eea:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015eed:	99                   	cdq    
c0015eee:	f7 f9                	idiv   ecx
c0015ef0:	88 d3                	mov    bl,dl
c0015ef2:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ef8:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015efe:	77 06                	ja     c0015f06 <RTC::completeRTCRefresh()+0x262>
c0015f00:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f06:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f0b:	31 d2                	xor    edx,edx
c0015f0d:	c1 e1 10             	shl    ecx,0x10
c0015f10:	89 d7                	mov    edi,edx
c0015f12:	c1 e5 10             	shl    ebp,0x10
c0015f15:	31 c0                	xor    eax,eax
c0015f17:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f1d:	09 cf                	or     edi,ecx
c0015f1f:	89 fa                	mov    edx,edi
c0015f21:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f25:	88 da                	mov    dl,bl
c0015f27:	89 f3                	mov    ebx,esi
c0015f29:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f2d:	88 d8                	mov    al,bl
c0015f2f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f33:	0f b7 c8             	movzx  ecx,ax
c0015f36:	09 e9                	or     ecx,ebp
c0015f38:	89 c8                	mov    eax,ecx
c0015f3a:	51                   	push   ecx
c0015f3b:	51                   	push   ecx
c0015f3c:	52                   	push   edx
c0015f3d:	50                   	push   eax
c0015f3e:	e8 14 56 ff ff       	call   c000b557 <datetimeToSeconds(datetime_t)>
c0015f43:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f47:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f4d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f53:	83 c4 3c             	add    esp,0x3c
c0015f56:	5b                   	pop    ebx
c0015f57:	5e                   	pop    esi
c0015f58:	5f                   	pop    edi
c0015f59:	5d                   	pop    ebp
c0015f5a:	c3                   	ret    
c0015f5b:	90                   	nop

c0015f5c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f5c:	55                   	push   ebp
c0015f5d:	57                   	push   edi
c0015f5e:	56                   	push   esi
c0015f5f:	53                   	push   ebx
c0015f60:	83 ec 30             	sub    esp,0x30
c0015f63:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f67:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f6b:	6a 00                	push   0x0
c0015f6d:	6a 00                	push   0x0
c0015f6f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f75:	e8 42 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f7a:	83 c4 0c             	add    esp,0xc
c0015f7d:	6a 00                	push   0x0
c0015f7f:	6a 02                	push   0x2
c0015f81:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f87:	e8 30 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f8c:	31 d2                	xor    edx,edx
c0015f8e:	89 f9                	mov    ecx,edi
c0015f90:	89 f8                	mov    eax,edi
c0015f92:	c1 e9 10             	shr    ecx,0x10
c0015f95:	0f b6 c4             	movzx  eax,ah
c0015f98:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f9c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015fa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fa4:	b9 64 00 00 00       	mov    ecx,0x64
c0015fa9:	89 f0                	mov    eax,esi
c0015fab:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015faf:	89 f0                	mov    eax,esi
c0015fb1:	0f b6 c4             	movzx  eax,ah
c0015fb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fb8:	89 f0                	mov    eax,esi
c0015fba:	c1 e8 10             	shr    eax,0x10
c0015fbd:	66 f7 f1             	div    cx
c0015fc0:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fc5:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fca:	59                   	pop    ecx
c0015fcb:	5b                   	pop    ebx
c0015fcc:	89 fb                	mov    ebx,edi
c0015fce:	6a 0b                	push   0xb
c0015fd0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fd6:	e8 cb 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fdb:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fdf:	83 c4 10             	add    esp,0x10
c0015fe2:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fe7:	75 74                	jne    c001605d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fe9:	b2 0a                	mov    dl,0xa
c0015feb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015fef:	0f b6 c1             	movzx  eax,cl
c0015ff2:	f6 f2                	div    dl
c0015ff4:	88 c3                	mov    bl,al
c0015ff6:	88 e0                	mov    al,ah
c0015ff8:	c1 e3 04             	shl    ebx,0x4
c0015ffb:	09 c3                	or     ebx,eax
c0015ffd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016002:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016006:	f6 f2                	div    dl
c0016008:	88 c1                	mov    cl,al
c001600a:	88 e0                	mov    al,ah
c001600c:	c1 e1 04             	shl    ecx,0x4
c001600f:	09 c1                	or     ecx,eax
c0016011:	89 f8                	mov    eax,edi
c0016013:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016017:	0f b6 c0             	movzx  eax,al
c001601a:	f6 f2                	div    dl
c001601c:	88 c3                	mov    bl,al
c001601e:	88 e0                	mov    al,ah
c0016020:	c1 e3 04             	shl    ebx,0x4
c0016023:	09 c3                	or     ebx,eax
c0016025:	89 f0                	mov    eax,esi
c0016027:	0f b6 c0             	movzx  eax,al
c001602a:	f6 f2                	div    dl
c001602c:	88 c1                	mov    cl,al
c001602e:	88 e0                	mov    al,ah
c0016030:	c1 e1 04             	shl    ecx,0x4
c0016033:	09 c1                	or     ecx,eax
c0016035:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001603a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001603e:	f6 f2                	div    dl
c0016040:	88 c1                	mov    cl,al
c0016042:	88 e0                	mov    al,ah
c0016044:	c1 e1 04             	shl    ecx,0x4
c0016047:	09 c1                	or     ecx,eax
c0016049:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001604e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016052:	f6 f2                	div    dl
c0016054:	89 c5                	mov    ebp,eax
c0016056:	88 e0                	mov    al,ah
c0016058:	c1 e5 04             	shl    ebp,0x4
c001605b:	09 c5                	or     ebp,eax
c001605d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016062:	75 17                	jne    c001607b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016064:	80 fb 0b             	cmp    bl,0xb
c0016067:	76 0c                	jbe    c0016075 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016069:	80 eb 0c             	sub    bl,0xc
c001606c:	75 02                	jne    c0016070 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001606e:	b3 0c                	mov    bl,0xc
c0016070:	83 cb 80             	or     ebx,0xffffff80
c0016073:	eb 06                	jmp    c001607b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016075:	84 db                	test   bl,bl
c0016077:	75 02                	jne    c001607b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016079:	b3 0c                	mov    bl,0xc
c001607b:	0f b6 db             	movzx  ebx,bl
c001607e:	50                   	push   eax
c001607f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016084:	50                   	push   eax
c0016085:	6a 00                	push   0x0
c0016087:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001608d:	e8 2a 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016092:	83 c4 0c             	add    esp,0xc
c0016095:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001609a:	50                   	push   eax
c001609b:	6a 02                	push   0x2
c001609d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160a3:	e8 14 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a8:	83 c4 0c             	add    esp,0xc
c00160ab:	53                   	push   ebx
c00160ac:	6a 04                	push   0x4
c00160ae:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160b4:	e8 03 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b9:	83 c4 0c             	add    esp,0xc
c00160bc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160c1:	50                   	push   eax
c00160c2:	6a 07                	push   0x7
c00160c4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160ca:	e8 ed 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160cf:	83 c4 0c             	add    esp,0xc
c00160d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160d7:	50                   	push   eax
c00160d8:	6a 08                	push   0x8
c00160da:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160e0:	e8 d7 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e5:	83 c4 0c             	add    esp,0xc
c00160e8:	89 e8                	mov    eax,ebp
c00160ea:	0f b6 e8             	movzx  ebp,al
c00160ed:	55                   	push   ebp
c00160ee:	6a 09                	push   0x9
c00160f0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160f6:	e8 c1 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160fb:	5a                   	pop    edx
c00160fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016100:	e8 9f fb ff ff       	call   c0015ca4 <RTC::completeRTCRefresh()>
c0016105:	83 c4 3c             	add    esp,0x3c
c0016108:	b0 01                	mov    al,0x1
c001610a:	5b                   	pop    ebx
c001610b:	5e                   	pop    esi
c001610c:	5f                   	pop    edi
c001610d:	5d                   	pop    ebp
c001610e:	c3                   	ret    

c001610f <rtcIRQHandler(regs*, void*)>:
c001610f:	53                   	push   ebx
c0016110:	83 ec 10             	sub    esp,0x10
c0016113:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016117:	6a 0c                	push   0xc
c0016119:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001611f:	e8 82 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016124:	83 c4 10             	add    esp,0x10
c0016127:	84 c0                	test   al,al
c0016129:	79 24                	jns    c001614f <rtcIRQHandler(regs*, void*)+0x40>
c001612b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016132:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016139:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016140:	75 0d                	jne    c001614f <rtcIRQHandler(regs*, void*)+0x40>
c0016142:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016146:	83 c4 08             	add    esp,0x8
c0016149:	5b                   	pop    ebx
c001614a:	e9 55 fb ff ff       	jmp    c0015ca4 <RTC::completeRTCRefresh()>
c001614f:	83 c4 08             	add    esp,0x8
c0016152:	5b                   	pop    ebx
c0016153:	c3                   	ret    

c0016154 <RTC::RTC()>:
c0016154:	83 ec 1c             	sub    esp,0x1c
c0016157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001615b:	83 ec 08             	sub    esp,0x8
c001615e:	68 c3 ef 01 c0       	push   0xc001efc3
c0016163:	50                   	push   eax
c0016164:	e8 c9 52 ff ff       	call   c000b432 <Clock::Clock(char const*)>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	ba e0 ef 01 c0       	mov    edx,0xc001efe0
c0016171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016175:	89 10                	mov    DWORD PTR [eax],edx
c0016177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001617b:	83 ec 0c             	sub    esp,0xc
c001617e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016182:	6a 01                	push   0x1
c0016184:	68 0f 61 01 c0       	push   0xc001610f
c0016189:	6a 08                	push   0x8
c001618b:	50                   	push   eax
c001618c:	e8 8b 57 ff ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016191:	83 c4 20             	add    esp,0x20
c0016194:	89 c2                	mov    edx,eax
c0016196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001619a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161a0:	fa                   	cli    
c00161a1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161a6:	40                   	inc    eax
c00161a7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161ac:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161b1:	83 ec 08             	sub    esp,0x8
c00161b4:	6a 0b                	push   0xb
c00161b6:	50                   	push   eax
c00161b7:	e8 ea 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161c3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161c8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161cc:	83 ca 10             	or     edx,0x10
c00161cf:	81 e2 ff 00 00 00    	and    edx,0xff
c00161d5:	83 ec 04             	sub    esp,0x4
c00161d8:	52                   	push   edx
c00161d9:	6a 0b                	push   0xb
c00161db:	50                   	push   eax
c00161dc:	e8 db 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e1:	83 c4 10             	add    esp,0x10
c00161e4:	83 ec 0c             	sub    esp,0xc
c00161e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161eb:	e8 b4 fa ff ff       	call   c0015ca4 <RTC::completeRTCRefresh()>
c00161f0:	83 c4 10             	add    esp,0x10
c00161f3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161f8:	48                   	dec    eax
c00161f9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161fe:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016203:	85 c0                	test   eax,eax
c0016205:	75 01                	jne    c0016208 <RTC::RTC()+0xb4>
c0016207:	fb                   	sti    
c0016208:	90                   	nop
c0016209:	83 c4 1c             	add    esp,0x1c
c001620c:	c3                   	ret    
c001620d:	66 90                	xchg   ax,ax
c001620f:	90                   	nop

c0016210 <HalConsoleScroll(int, int)>:
c0016210:	83 ec 10             	sub    esp,0x10
c0016213:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001621b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016223:	90                   	nop
c0016224:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016229:	0f 8f e1 00 00 00    	jg     c0016310 <HalConsoleScroll(int, int)+0x100>
c001622f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016237:	90                   	nop
c0016238:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016240:	0f 8f be 00 00 00    	jg     c0016304 <HalConsoleScroll(int, int)+0xf4>
c0016246:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001624a:	89 d0                	mov    eax,edx
c001624c:	c1 e0 02             	shl    eax,0x2
c001624f:	01 d0                	add    eax,edx
c0016251:	c1 e0 05             	shl    eax,0x5
c0016254:	89 c2                	mov    edx,eax
c0016256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001625a:	01 d0                	add    eax,edx
c001625c:	89 c2                	mov    edx,eax
c001625e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016262:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016265:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016269:	89 d0                	mov    eax,edx
c001626b:	c1 e0 02             	shl    eax,0x2
c001626e:	01 d0                	add    eax,edx
c0016270:	c1 e0 05             	shl    eax,0x5
c0016273:	89 c2                	mov    edx,eax
c0016275:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016279:	01 d0                	add    eax,edx
c001627b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016285:	01 c2                	add    edx,eax
c0016287:	8a 01                	mov    al,BYTE PTR [ecx]
c0016289:	88 02                	mov    BYTE PTR [edx],al
c001628b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016290:	75 66                	jne    c00162f8 <HalConsoleScroll(int, int)+0xe8>
c0016292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016296:	83 e0 01             	and    eax,0x1
c0016299:	74 39                	je     c00162d4 <HalConsoleScroll(int, int)+0xc4>
c001629b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001629f:	83 e0 0f             	and    eax,0xf
c00162a2:	88 c2                	mov    dl,al
c00162a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162a8:	c1 e0 04             	shl    eax,0x4
c00162ab:	88 d1                	mov    cl,dl
c00162ad:	09 c1                	or     ecx,eax
c00162af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162b3:	89 d0                	mov    eax,edx
c00162b5:	c1 e0 02             	shl    eax,0x2
c00162b8:	01 d0                	add    eax,edx
c00162ba:	c1 e0 05             	shl    eax,0x5
c00162bd:	89 c2                	mov    edx,eax
c00162bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162c3:	01 d0                	add    eax,edx
c00162c5:	89 c2                	mov    edx,eax
c00162c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162cb:	01 d0                	add    eax,edx
c00162cd:	88 ca                	mov    dl,cl
c00162cf:	88 10                	mov    BYTE PTR [eax],dl
c00162d1:	eb 25                	jmp    c00162f8 <HalConsoleScroll(int, int)+0xe8>
c00162d3:	90                   	nop
c00162d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162d8:	89 d0                	mov    eax,edx
c00162da:	c1 e0 02             	shl    eax,0x2
c00162dd:	01 d0                	add    eax,edx
c00162df:	c1 e0 05             	shl    eax,0x5
c00162e2:	89 c2                	mov    edx,eax
c00162e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162e8:	01 d0                	add    eax,edx
c00162ea:	89 c2                	mov    edx,eax
c00162ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162f0:	01 d0                	add    eax,edx
c00162f2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162f5:	8d 76 00             	lea    esi,[esi+0x0]
c00162f8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162fc:	e9 37 ff ff ff       	jmp    c0016238 <HalConsoleScroll(int, int)+0x28>
c0016301:	8d 76 00             	lea    esi,[esi+0x0]
c0016304:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016308:	e9 17 ff ff ff       	jmp    c0016224 <HalConsoleScroll(int, int)+0x14>
c001630d:	8d 76 00             	lea    esi,[esi+0x0]
c0016310:	90                   	nop
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	c3                   	ret    
c0016315:	8d 76 00             	lea    esi,[esi+0x0]

c0016318 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016318:	83 ec 14             	sub    esp,0x14
c001631b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001631f:	88 04 24             	mov    BYTE PTR [esp],al
c0016322:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016325:	25 ff 00 00 00       	and    eax,0xff
c001632a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001632e:	89 d1                	mov    ecx,edx
c0016330:	83 e1 0f             	and    ecx,0xf
c0016333:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016337:	c1 e2 04             	shl    edx,0x4
c001633a:	81 e2 ff 00 00 00    	and    edx,0xff
c0016340:	09 ca                	or     edx,ecx
c0016342:	c1 e2 08             	shl    edx,0x8
c0016345:	09 d0                	or     eax,edx
c0016347:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001634c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016354:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016358:	89 d0                	mov    eax,edx
c001635a:	c1 e0 02             	shl    eax,0x2
c001635d:	01 d0                	add    eax,edx
c001635f:	c1 e0 04             	shl    eax,0x4
c0016362:	89 c2                	mov    edx,eax
c0016364:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016368:	01 d0                	add    eax,edx
c001636a:	01 c0                	add    eax,eax
c001636c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016370:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016374:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016379:	66 89 02             	mov    WORD PTR [edx],ax
c001637c:	90                   	nop
c001637d:	83 c4 14             	add    esp,0x14
c0016380:	c3                   	ret    
c0016381:	8d 76 00             	lea    esi,[esi+0x0]

c0016384 <HalConsoleCursorUpdate(int, int)>:
c0016384:	83 ec 20             	sub    esp,0x20
c0016387:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001638b:	89 c2                	mov    edx,eax
c001638d:	89 d0                	mov    eax,edx
c001638f:	c1 e0 02             	shl    eax,0x2
c0016392:	01 d0                	add    eax,edx
c0016394:	c1 e0 04             	shl    eax,0x4
c0016397:	89 c2                	mov    edx,eax
c0016399:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001639d:	01 d0                	add    eax,edx
c001639f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163a4:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163ab:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163b8:	ee                   	out    dx,al
c00163b9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163be:	25 ff 00 00 00       	and    eax,0xff
c00163c3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163ca:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163ce:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163d6:	ee                   	out    dx,al
c00163d7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163de:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163e3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163eb:	ee                   	out    dx,al
c00163ec:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163f1:	66 c1 e8 08          	shr    ax,0x8
c00163f5:	25 ff 00 00 00       	and    eax,0xff
c00163fa:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016401:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016405:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016409:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001640d:	ee                   	out    dx,al
c001640e:	90                   	nop
c001640f:	83 c4 20             	add    esp,0x20
c0016412:	c3                   	ret    
c0016413:	90                   	nop

c0016414 <FAT::getName()>:
c0016414:	b8 14 f0 01 c0       	mov    eax,0xc001f014
c0016419:	c3                   	ret    
c001641a:	66 90                	xchg   ax,ax

c001641c <FAT::tell(void*, unsigned long long*)>:
c001641c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016421:	75 09                	jne    c001642c <FAT::tell(void*, unsigned long long*)+0x10>
c0016423:	b8 04 00 00 00       	mov    eax,0x4
c0016428:	c3                   	ret    
c0016429:	8d 76 00             	lea    esi,[esi+0x0]
c001642c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016431:	75 09                	jne    c001643c <FAT::tell(void*, unsigned long long*)+0x20>
c0016433:	b8 04 00 00 00       	mov    eax,0x4
c0016438:	c3                   	ret    
c0016439:	8d 76 00             	lea    esi,[esi+0x0]
c001643c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016440:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016443:	ba 00 00 00 00       	mov    edx,0x0
c0016448:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001644c:	89 01                	mov    DWORD PTR [ecx],eax
c001644e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016451:	b8 00 00 00 00       	mov    eax,0x0
c0016456:	c3                   	ret    
c0016457:	90                   	nop

c0016458 <FAT::stat(void*, unsigned long long*)>:
c0016458:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001645d:	75 09                	jne    c0016468 <FAT::stat(void*, unsigned long long*)+0x10>
c001645f:	b8 04 00 00 00       	mov    eax,0x4
c0016464:	c3                   	ret    
c0016465:	8d 76 00             	lea    esi,[esi+0x0]
c0016468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001646d:	75 09                	jne    c0016478 <FAT::stat(void*, unsigned long long*)+0x20>
c001646f:	b8 04 00 00 00       	mov    eax,0x4
c0016474:	c3                   	ret    
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001647c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001647f:	ba 00 00 00 00       	mov    edx,0x0
c0016484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016488:	89 01                	mov    DWORD PTR [ecx],eax
c001648a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001648d:	b8 00 00 00 00       	mov    eax,0x0
c0016492:	c3                   	ret    
c0016493:	90                   	nop

c0016494 <FAT::~FAT()>:
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	ba 60 f0 01 c0       	mov    edx,0xc001f060
c001649c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a0:	89 10                	mov    DWORD PTR [eax],edx
c00164a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	50                   	push   eax
c00164aa:	e8 c7 43 ff ff       	call   c000a876 <Filesystem::~Filesystem()>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	90                   	nop
c00164b3:	83 c4 0c             	add    esp,0xc
c00164b6:	c3                   	ret    
c00164b7:	90                   	nop

c00164b8 <FAT::~FAT()>:
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	83 ec 0c             	sub    esp,0xc
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	e8 cd ff ff ff       	call   c0016494 <FAT::~FAT()>
c00164c7:	83 c4 10             	add    esp,0x10
c00164ca:	83 ec 08             	sub    esp,0x8
c00164cd:	6a 08                	push   0x8
c00164cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d3:	e8 62 3f ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	83 c4 0c             	add    esp,0xc
c00164de:	c3                   	ret    
c00164df:	90                   	nop

c00164e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164e0:	83 ec 1c             	sub    esp,0x1c
c00164e3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164ea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164f3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00164fa:	83 f8 ff             	cmp    eax,0xffffffff
c00164fd:	75 35                	jne    c0016534 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016503:	88 c2                	mov    dl,al
c0016505:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001650a:	01 d0                	add    eax,edx
c001650c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016510:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016516:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001651a:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016521:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016526:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001652a:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016531:	eb 19                	jmp    c001654c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016533:	90                   	nop
c0016534:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016538:	88 c2                	mov    dl,al
c001653a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001653e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016545:	01 d0                	add    eax,edx
c0016547:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001654b:	90                   	nop
c001654c:	83 ec 04             	sub    esp,0x4
c001654f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016553:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016557:	8d 44 24 15          	lea    eax,[esp+0x15]
c001655b:	50                   	push   eax
c001655c:	e8 f3 e8 fe ff       	call   c0004e54 <f_getlabel>
c0016561:	83 c4 10             	add    esp,0x10
c0016564:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016568:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001656d:	75 09                	jne    c0016578 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001656f:	b8 00 00 00 00       	mov    eax,0x0
c0016574:	eb 0a                	jmp    c0016580 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016576:	66 90                	xchg   ax,ax
c0016578:	b8 01 00 00 00       	mov    eax,0x1
c001657d:	8d 76 00             	lea    esi,[esi+0x0]
c0016580:	83 c4 1c             	add    esp,0x1c
c0016583:	c3                   	ret    

c0016584 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016584:	57                   	push   edi
c0016585:	83 ec 58             	sub    esp,0x58
c0016588:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016590:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016594:	b8 00 00 00 00       	mov    eax,0x0
c0016599:	b9 0f 00 00 00       	mov    ecx,0xf
c001659e:	fc                   	cld    
c001659f:	89 d7                	mov    edi,edx
c00165a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165a3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165a7:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165ae:	83 f8 ff             	cmp    eax,0xffffffff
c00165b1:	75 35                	jne    c00165e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165b7:	88 c2                	mov    dl,al
c00165b9:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165be:	01 d0                	add    eax,edx
c00165c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165c4:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ce:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165d5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165da:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165de:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00165e5:	eb 19                	jmp    c0016600 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165e7:	90                   	nop
c00165e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165ec:	88 c2                	mov    dl,al
c00165ee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165f2:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165f9:	01 d0                	add    eax,edx
c00165fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165ff:	90                   	nop
c0016600:	83 ec 08             	sub    esp,0x8
c0016603:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016607:	8d 44 24 18          	lea    eax,[esp+0x18]
c001660b:	50                   	push   eax
c001660c:	e8 af a1 fe ff       	call   c00007c0 <strcat>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	8d 44 24 18          	lea    eax,[esp+0x18]
c001661b:	50                   	push   eax
c001661c:	e8 84 e9 fe ff       	call   c0004fa5 <f_setlabel>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016628:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001662d:	75 09                	jne    c0016638 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001662f:	b8 00 00 00 00       	mov    eax,0x0
c0016634:	eb 0a                	jmp    c0016640 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016636:	66 90                	xchg   ax,ax
c0016638:	b8 01 00 00 00       	mov    eax,0x1
c001663d:	8d 76 00             	lea    esi,[esi+0x0]
c0016640:	83 c4 58             	add    esp,0x58
c0016643:	5f                   	pop    edi
c0016644:	c3                   	ret    
c0016645:	90                   	nop
c0016646:	66 90                	xchg   ax,ax

c0016648 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016648:	83 ec 2c             	sub    esp,0x2c
c001664b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016653:	83 ec 08             	sub    esp,0x8
c0016656:	68 38 f0 01 c0       	push   0xc001f038
c001665b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001665f:	e8 7c a0 fe ff       	call   c00006e0 <strcmp>
c0016664:	83 c4 10             	add    esp,0x10
c0016667:	85 c0                	test   eax,eax
c0016669:	0f 94 c0             	sete   al
c001666c:	84 c0                	test   al,al
c001666e:	74 10                	je     c0016680 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016670:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016678:	e9 b3 00 00 00       	jmp    c0016730 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001667d:	8d 76 00             	lea    esi,[esi+0x0]
c0016680:	83 ec 08             	sub    esp,0x8
c0016683:	68 2a f0 01 c0       	push   0xc001f02a
c0016688:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001668c:	e8 4f a0 fe ff       	call   c00006e0 <strcmp>
c0016691:	83 c4 10             	add    esp,0x10
c0016694:	85 c0                	test   eax,eax
c0016696:	0f 94 c0             	sete   al
c0016699:	84 c0                	test   al,al
c001669b:	74 0f                	je     c00166ac <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001669d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166a5:	e9 86 00 00 00       	jmp    c0016730 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166aa:	66 90                	xchg   ax,ax
c00166ac:	83 ec 08             	sub    esp,0x8
c00166af:	68 30 f0 01 c0       	push   0xc001f030
c00166b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166b8:	e8 23 a0 fe ff       	call   c00006e0 <strcmp>
c00166bd:	83 c4 10             	add    esp,0x10
c00166c0:	85 c0                	test   eax,eax
c00166c2:	0f 94 c0             	sete   al
c00166c5:	84 c0                	test   al,al
c00166c7:	74 0b                	je     c00166d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166c9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166d1:	eb 5d                	jmp    c0016730 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166d3:	90                   	nop
c00166d4:	83 ec 08             	sub    esp,0x8
c00166d7:	68 fc ce 01 c0       	push   0xc001cefc
c00166dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166e0:	e8 fb 9f fe ff       	call   c00006e0 <strcmp>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	85 c0                	test   eax,eax
c00166ea:	0f 94 c0             	sete   al
c00166ed:	84 c0                	test   al,al
c00166ef:	74 0b                	je     c00166fc <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166f1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166f9:	eb 35                	jmp    c0016730 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166fb:	90                   	nop
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	68 36 f0 01 c0       	push   0xc001f036
c0016704:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016708:	e8 d3 9f fe ff       	call   c00006e0 <strcmp>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	85 c0                	test   eax,eax
c0016712:	0f 94 c0             	sete   al
c0016715:	84 c0                	test   al,al
c0016717:	74 0b                	je     c0016724 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016719:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016721:	eb 0d                	jmp    c0016730 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016723:	90                   	nop
c0016724:	b8 08 00 00 00       	mov    eax,0x8
c0016729:	e9 ea 00 00 00       	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001672e:	66 90                	xchg   ax,ax
c0016730:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016737:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001673c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016740:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016747:	83 f8 ff             	cmp    eax,0xffffffff
c001674a:	75 34                	jne    c0016780 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001674c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016750:	88 c2                	mov    dl,al
c0016752:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016757:	01 d0                	add    eax,edx
c0016759:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001675d:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016763:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016767:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001676e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016773:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016777:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001677e:	eb 18                	jmp    c0016798 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016780:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016784:	88 c2                	mov    dl,al
c0016786:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001678a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016791:	01 d0                	add    eax,edx
c0016793:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016797:	90                   	nop
c0016798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001679c:	88 04 24             	mov    BYTE PTR [esp],al
c001679f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167af:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	68 00 20 00 00       	push   0x2000
c00167c4:	e8 f0 0f ff ff       	call   c00077b9 <malloc>
c00167c9:	83 c4 10             	add    esp,0x10
c00167cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167d0:	68 00 20 00 00       	push   0x2000
c00167d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167dd:	50                   	push   eax
c00167de:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167e2:	50                   	push   eax
c00167e3:	e8 ad ea fe ff       	call   c0005295 <f_mkfs>
c00167e8:	83 c4 10             	add    esp,0x10
c00167eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167f4:	75 0a                	jne    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167f6:	b8 00 00 00 00       	mov    eax,0x0
c00167fb:	eb 1b                	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016800:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016805:	75 09                	jne    c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016807:	b8 09 00 00 00       	mov    eax,0x9
c001680c:	eb 0a                	jmp    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001680e:	66 90                	xchg   ax,ax
c0016810:	b8 01 00 00 00       	mov    eax,0x1
c0016815:	8d 76 00             	lea    esi,[esi+0x0]
c0016818:	83 c4 2c             	add    esp,0x2c
c001681b:	c3                   	ret    

c001681c <FAT::tryMount(LogicalDisk*, int)>:
c001681c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016822:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016827:	83 f8 14             	cmp    eax,0x14
c001682a:	75 18                	jne    c0016844 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	68 3c f0 01 c0       	push   0xc001f03c
c0016834:	e8 7a 99 ff ff       	call   c00101b3 <KePanic(char const*)>
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	b0 00                	mov    al,0x0
c001683e:	e9 e9 01 00 00       	jmp    c0016a2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016843:	90                   	nop
c0016844:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001684b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016851:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016857:	3d 00 02 00 00       	cmp    eax,0x200
c001685c:	74 0a                	je     c0016868 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001685e:	b0 00                	mov    al,0x0
c0016860:	e9 c7 01 00 00       	jmp    c0016a2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016865:	8d 76 00             	lea    esi,[esi+0x0]
c0016868:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016870:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016877:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001687e:	83 f8 ff             	cmp    eax,0xffffffff
c0016881:	74 09                	je     c001688c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016883:	b0 01                	mov    al,0x1
c0016885:	e9 a2 01 00 00       	jmp    c0016a2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001688a:	66 90                	xchg   ax,ax
c001688c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016896:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001689e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168a5:	88 c2                	mov    dl,al
c00168a7:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168ac:	01 d0                	add    eax,edx
c00168ae:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168b5:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00168bb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168c2:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00168c9:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168ce:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168d5:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00168dc:	83 ec 0c             	sub    esp,0xc
c00168df:	68 34 02 00 00       	push   0x234
c00168e4:	e8 d0 0e ff ff       	call   c00077b9 <malloc>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168f3:	83 ec 04             	sub    esp,0x4
c00168f6:	6a 00                	push   0x0
c00168f8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168ff:	50                   	push   eax
c0016900:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016907:	e8 af d1 fe ff       	call   c0003abb <f_mount>
c001690c:	83 c4 10             	add    esp,0x10
c001690f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016916:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001691e:	74 1c                	je     c001693c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001692a:	e8 aa 0e ff ff       	call   c00077d9 <rfree>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	b0 00                	mov    al,0x0
c0016934:	e9 f3 00 00 00       	jmp    c0016a2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	83 ec 04             	sub    esp,0x4
c001693f:	68 00 01 00 00       	push   0x100
c0016944:	6a 00                	push   0x0
c0016946:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001694d:	50                   	push   eax
c001694e:	e8 7d 9b fe ff       	call   c00004d0 <memset>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	83 ec 08             	sub    esp,0x8
c0016959:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016960:	50                   	push   eax
c0016961:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016968:	50                   	push   eax
c0016969:	e8 52 9e fe ff       	call   c00007c0 <strcat>
c001696e:	83 c4 10             	add    esp,0x10
c0016971:	83 ec 08             	sub    esp,0x8
c0016974:	68 4a f0 01 c0       	push   0xc001f04a
c0016979:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016980:	50                   	push   eax
c0016981:	e8 3a 9e fe ff       	call   c00007c0 <strcat>
c0016986:	83 c4 10             	add    esp,0x10
c0016989:	83 ec 04             	sub    esp,0x4
c001698c:	6a 01                	push   0x1
c001698e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016995:	50                   	push   eax
c0016996:	8d 44 24 14          	lea    eax,[esp+0x14]
c001699a:	50                   	push   eax
c001699b:	e8 7d d1 fe ff       	call   c0003b1d <f_open>
c00169a0:	83 c4 10             	add    esp,0x10
c00169a3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169aa:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169b1:	85 c0                	test   eax,eax
c00169b3:	74 0b                	je     c00169c0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169b5:	78 31                	js     c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169b7:	83 e8 04             	sub    eax,0x4
c00169ba:	83 f8 01             	cmp    eax,0x1
c00169bd:	77 29                	ja     c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169bf:	90                   	nop
c00169c0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169c8:	83 ec 0c             	sub    esp,0xc
c00169cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169cf:	50                   	push   eax
c00169d0:	e8 fb d8 fe ff       	call   c00042d0 <f_close>
c00169d5:	83 c4 10             	add    esp,0x10
c00169d8:	90                   	nop
c00169d9:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169e1:	74 41                	je     c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169e3:	eb 33                	jmp    c0016a18 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169e5:	8d 76 00             	lea    esi,[esi+0x0]
c00169e8:	83 ec 0c             	sub    esp,0xc
c00169eb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169f2:	e8 e2 0d ff ff       	call   c00077d9 <rfree>
c00169f7:	83 c4 10             	add    esp,0x10
c00169fa:	83 ec 04             	sub    esp,0x4
c00169fd:	6a 00                	push   0x0
c00169ff:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a06:	50                   	push   eax
c0016a07:	6a 00                	push   0x0
c0016a09:	e8 ad d0 fe ff       	call   c0003abb <f_mount>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	b0 00                	mov    al,0x0
c0016a13:	eb 17                	jmp    c0016a2c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a15:	8d 76 00             	lea    esi,[esi+0x0]
c0016a18:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a1d:	40                   	inc    eax
c0016a1e:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a23:	90                   	nop
c0016a24:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a2b:	90                   	nop
c0016a2c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a32:	c3                   	ret    
c0016a33:	90                   	nop

c0016a34 <FAT::allocateSwapfile(char const*, int)>:
c0016a34:	55                   	push   ebp
c0016a35:	57                   	push   edi
c0016a36:	56                   	push   esi
c0016a37:	53                   	push   ebx
c0016a38:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a3e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a49:	83 ec 0c             	sub    esp,0xc
c0016a4c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a53:	e8 61 0d ff ff       	call   c00077b9 <malloc>
c0016a58:	83 c4 10             	add    esp,0x10
c0016a5b:	89 c7                	mov    edi,eax
c0016a5d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016a62:	83 ec 04             	sub    esp,0x4
c0016a65:	50                   	push   eax
c0016a66:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a6d:	57                   	push   edi
c0016a6e:	e8 33 40 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a7d:	83 ec 04             	sub    esp,0x4
c0016a80:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a84:	50                   	push   eax
c0016a85:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a89:	50                   	push   eax
c0016a8a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a91:	e8 7c 43 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c0016a96:	83 c4 10             	add    esp,0x10
c0016a99:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016aa0:	c1 e0 14             	shl    eax,0x14
c0016aa3:	89 c7                	mov    edi,eax
c0016aa5:	89 c5                	mov    ebp,eax
c0016aa7:	c1 fd 1f             	sar    ebp,0x1f
c0016aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ab2:	89 f9                	mov    ecx,edi
c0016ab4:	31 c1                	xor    ecx,eax
c0016ab6:	89 cb                	mov    ebx,ecx
c0016ab8:	89 e9                	mov    ecx,ebp
c0016aba:	31 d1                	xor    ecx,edx
c0016abc:	89 ce                	mov    esi,ecx
c0016abe:	89 f0                	mov    eax,esi
c0016ac0:	09 d8                	or     eax,ebx
c0016ac2:	0f 84 9c 00 00 00    	je     c0016b64 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016ac8:	83 ec 0c             	sub    esp,0xc
c0016acb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ad2:	e8 07 42 ff ff       	call   c000acde <File::unlink()>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	83 ec 08             	sub    esp,0x8
c0016add:	6a 12                	push   0x12
c0016adf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ae6:	e8 7b 40 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016af5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016afb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b02:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b09:	c1 e0 14             	shl    eax,0x14
c0016b0c:	83 ec 04             	sub    esp,0x4
c0016b0f:	6a 01                	push   0x1
c0016b11:	50                   	push   eax
c0016b12:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b19:	e8 17 e6 fe ff       	call   c0005135 <f_expand>
c0016b1e:	83 c4 10             	add    esp,0x10
c0016b21:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b2a:	83 c0 10             	add    eax,0x10
c0016b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b2f:	83 ec 0c             	sub    esp,0xc
c0016b32:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b36:	52                   	push   edx
c0016b37:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b3b:	52                   	push   edx
c0016b3c:	6a 00                	push   0x0
c0016b3e:	68 00 04 00 00       	push   0x400
c0016b43:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b4a:	ff d0                	call   eax
c0016b4c:	83 c4 20             	add    esp,0x20
c0016b4f:	83 ec 0c             	sub    esp,0xc
c0016b52:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b59:	e8 66 40 ff ff       	call   c000abc4 <File::close()>
c0016b5e:	83 c4 10             	add    esp,0x10
c0016b61:	8d 76 00             	lea    esi,[esi+0x0]
c0016b64:	83 ec 08             	sub    esp,0x8
c0016b67:	6a 01                	push   0x1
c0016b69:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b70:	e8 f1 3f ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b81:	83 c0 0c             	add    eax,0xc
c0016b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b86:	83 ec 0c             	sub    esp,0xc
c0016b89:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b8d:	52                   	push   edx
c0016b8e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b92:	52                   	push   edx
c0016b93:	6a 00                	push   0x0
c0016b95:	6a 04                	push   0x4
c0016b97:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b9e:	ff d0                	call   eax
c0016ba0:	83 c4 20             	add    esp,0x20
c0016ba3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016baa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bb0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bb7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bbe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bc1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bd2:	e8 ed 3f ff ff       	call   c000abc4 <File::close()>
c0016bd7:	83 c4 10             	add    esp,0x10
c0016bda:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016be1:	ba 00 00 00 00       	mov    edx,0x0
c0016be6:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016bec:	5b                   	pop    ebx
c0016bed:	5e                   	pop    esi
c0016bee:	5f                   	pop    edi
c0016bef:	5d                   	pop    ebp
c0016bf0:	c3                   	ret    
c0016bf1:	90                   	nop
c0016bf2:	66 90                	xchg   ax,ax

c0016bf4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016bf4:	57                   	push   edi
c0016bf5:	56                   	push   esi
c0016bf6:	53                   	push   ebx
c0016bf7:	81 ec 50 02 00 00    	sub    esp,0x250
c0016bfd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c05:	74 0d                	je     c0016c14 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c07:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c0f:	75 0f                	jne    c0016c20 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c11:	8d 76 00             	lea    esi,[esi+0x0]
c0016c14:	b8 04 00 00 00       	mov    eax,0x4
c0016c19:	e9 36 01 00 00       	jmp    c0016d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c1e:	66 90                	xchg   ax,ax
c0016c20:	83 ec 08             	sub    esp,0x8
c0016c23:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c2a:	50                   	push   eax
c0016c2b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c32:	e8 5c d9 fe ff       	call   c0004593 <f_readdir>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c41:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c52:	83 c0 16             	add    eax,0x16
c0016c55:	50                   	push   eax
c0016c56:	e8 e5 98 fe ff       	call   c0000540 <strlen>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	ba 00 00 00 00       	mov    edx,0x0
c0016c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c6b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c72:	25 ff 00 00 00       	and    eax,0xff
c0016c77:	83 e0 10             	and    eax,0x10
c0016c7a:	74 08                	je     c0016c84 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c7c:	b8 02 00 00 00       	mov    eax,0x2
c0016c81:	eb 09                	jmp    c0016c8c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c83:	90                   	nop
c0016c84:	b8 01 00 00 00       	mov    eax,0x1
c0016c89:	8d 76 00             	lea    esi,[esi+0x0]
c0016c8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c90:	83 ec 08             	sub    esp,0x8
c0016c93:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c9a:	83 c0 16             	add    eax,0x16
c0016c9d:	50                   	push   eax
c0016c9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ca2:	83 c0 10             	add    eax,0x10
c0016ca5:	50                   	push   eax
c0016ca6:	e8 55 99 fe ff       	call   c0000600 <strcpy>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016cb5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cc0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cc7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016cce:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016cd5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cdc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016ce3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016cea:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016cf1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016cf8:	89 c6                	mov    esi,eax
c0016cfa:	89 d7                	mov    edi,edx
c0016cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cfe:	89 c8                	mov    eax,ecx
c0016d00:	89 fa                	mov    edx,edi
c0016d02:	89 f3                	mov    ebx,esi
c0016d04:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d0b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d12:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d19:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d20:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d26:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d2d:	84 c0                	test   al,al
c0016d2f:	75 07                	jne    c0016d38 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d31:	b8 07 00 00 00       	mov    eax,0x7
c0016d36:	eb 1c                	jmp    c0016d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d38:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d3f:	85 c0                	test   eax,eax
c0016d41:	75 09                	jne    c0016d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d43:	b8 00 00 00 00       	mov    eax,0x0
c0016d48:	eb 0a                	jmp    c0016d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d4a:	66 90                	xchg   ax,ax
c0016d4c:	b8 01 00 00 00       	mov    eax,0x1
c0016d51:	8d 76 00             	lea    esi,[esi+0x0]
c0016d54:	81 c4 50 02 00 00    	add    esp,0x250
c0016d5a:	5b                   	pop    ebx
c0016d5b:	5e                   	pop    esi
c0016d5c:	5f                   	pop    edi
c0016d5d:	c3                   	ret    
c0016d5e:	66 90                	xchg   ax,ax

c0016d60 <FAT::read(void*, unsigned long, void*, int*)>:
c0016d60:	83 ec 1c             	sub    esp,0x1c
c0016d63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d68:	74 0a                	je     c0016d74 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d6a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d6f:	75 0b                	jne    c0016d7c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d71:	8d 76 00             	lea    esi,[esi+0x0]
c0016d74:	b8 04 00 00 00       	mov    eax,0x4
c0016d79:	eb 41                	jmp    c0016dbc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d7b:	90                   	nop
c0016d7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d80:	50                   	push   eax
c0016d81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d8d:	e8 56 d0 fe ff       	call   c0003de8 <f_read>
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d9d:	89 c2                	mov    edx,eax
c0016d9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016da3:	89 10                	mov    DWORD PTR [eax],edx
c0016da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da9:	85 c0                	test   eax,eax
c0016dab:	75 07                	jne    c0016db4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016dad:	b8 00 00 00 00       	mov    eax,0x0
c0016db2:	eb 08                	jmp    c0016dbc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016db4:	b8 01 00 00 00       	mov    eax,0x1
c0016db9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dbc:	83 c4 1c             	add    esp,0x1c
c0016dbf:	c3                   	ret    

c0016dc0 <FAT::write(void*, unsigned long, void*, int*)>:
c0016dc0:	83 ec 1c             	sub    esp,0x1c
c0016dc3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016dc8:	74 0a                	je     c0016dd4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016dca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dcf:	75 0b                	jne    c0016ddc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd4:	b8 04 00 00 00       	mov    eax,0x4
c0016dd9:	eb 41                	jmp    c0016e1c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ddb:	90                   	nop
c0016ddc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016de0:	50                   	push   eax
c0016de1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016de5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016de9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ded:	e8 f5 d1 fe ff       	call   c0003fe7 <f_write>
c0016df2:	83 c4 10             	add    esp,0x10
c0016df5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dfd:	89 c2                	mov    edx,eax
c0016dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e03:	89 10                	mov    DWORD PTR [eax],edx
c0016e05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e09:	85 c0                	test   eax,eax
c0016e0b:	75 07                	jne    c0016e14 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e0d:	b8 00 00 00 00       	mov    eax,0x0
c0016e12:	eb 08                	jmp    c0016e1c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e14:	b8 01 00 00 00       	mov    eax,0x1
c0016e19:	8d 76 00             	lea    esi,[esi+0x0]
c0016e1c:	83 c4 1c             	add    esp,0x1c
c0016e1f:	c3                   	ret    

c0016e20 <FAT::close(void*)>:
c0016e20:	83 ec 1c             	sub    esp,0x1c
c0016e23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e28:	75 0a                	jne    c0016e34 <FAT::close(void*)+0x14>
c0016e2a:	b8 04 00 00 00       	mov    eax,0x4
c0016e2f:	eb 3f                	jmp    c0016e70 <FAT::close(void*)+0x50>
c0016e31:	8d 76 00             	lea    esi,[esi+0x0]
c0016e34:	83 ec 0c             	sub    esp,0xc
c0016e37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e3b:	e8 90 d4 fe ff       	call   c00042d0 <f_close>
c0016e40:	83 c4 10             	add    esp,0x10
c0016e43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e47:	83 ec 0c             	sub    esp,0xc
c0016e4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e4e:	e8 76 09 ff ff       	call   c00077c9 <free>
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e5a:	85 c0                	test   eax,eax
c0016e5c:	75 0a                	jne    c0016e68 <FAT::close(void*)+0x48>
c0016e5e:	b8 00 00 00 00       	mov    eax,0x0
c0016e63:	eb 0b                	jmp    c0016e70 <FAT::close(void*)+0x50>
c0016e65:	8d 76 00             	lea    esi,[esi+0x0]
c0016e68:	b8 01 00 00 00       	mov    eax,0x1
c0016e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e70:	83 c4 1c             	add    esp,0x1c
c0016e73:	c3                   	ret    

c0016e74 <FAT::closeDir(void*)>:
c0016e74:	83 ec 1c             	sub    esp,0x1c
c0016e77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e7c:	75 0a                	jne    c0016e88 <FAT::closeDir(void*)+0x14>
c0016e7e:	b8 04 00 00 00       	mov    eax,0x4
c0016e83:	eb 3f                	jmp    c0016ec4 <FAT::closeDir(void*)+0x50>
c0016e85:	8d 76 00             	lea    esi,[esi+0x0]
c0016e88:	83 ec 0c             	sub    esp,0xc
c0016e8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e8f:	e8 dd d6 fe ff       	call   c0004571 <f_closedir>
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e9b:	83 ec 0c             	sub    esp,0xc
c0016e9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ea2:	e8 22 09 ff ff       	call   c00077c9 <free>
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eae:	85 c0                	test   eax,eax
c0016eb0:	75 0a                	jne    c0016ebc <FAT::closeDir(void*)+0x48>
c0016eb2:	b8 00 00 00 00       	mov    eax,0x0
c0016eb7:	eb 0b                	jmp    c0016ec4 <FAT::closeDir(void*)+0x50>
c0016eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ebc:	b8 01 00 00 00       	mov    eax,0x1
c0016ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec4:	83 c4 1c             	add    esp,0x1c
c0016ec7:	c3                   	ret    

c0016ec8 <FAT::seek(void*, unsigned long long)>:
c0016ec8:	83 ec 2c             	sub    esp,0x2c
c0016ecb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ed3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016edb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ee0:	75 0a                	jne    c0016eec <FAT::seek(void*, unsigned long long)+0x24>
c0016ee2:	b8 04 00 00 00       	mov    eax,0x4
c0016ee7:	eb 33                	jmp    c0016f1c <FAT::seek(void*, unsigned long long)+0x54>
c0016ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0016eec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ef0:	83 ec 08             	sub    esp,0x8
c0016ef3:	50                   	push   eax
c0016ef4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ef8:	e8 02 d4 fe ff       	call   c00042ff <f_lseek>
c0016efd:	83 c4 10             	add    esp,0x10
c0016f00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f08:	85 c0                	test   eax,eax
c0016f0a:	75 08                	jne    c0016f14 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f0c:	b8 00 00 00 00       	mov    eax,0x0
c0016f11:	eb 09                	jmp    c0016f1c <FAT::seek(void*, unsigned long long)+0x54>
c0016f13:	90                   	nop
c0016f14:	b8 01 00 00 00       	mov    eax,0x1
c0016f19:	8d 76 00             	lea    esi,[esi+0x0]
c0016f1c:	83 c4 2c             	add    esp,0x2c
c0016f1f:	c3                   	ret    

c0016f20 <fatWrapperReadDisk>:
c0016f20:	53                   	push   ebx
c0016f21:	83 ec 18             	sub    esp,0x18
c0016f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f2c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f30:	25 ff 00 00 00       	and    eax,0xff
c0016f35:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f44:	ba 00 00 00 00       	mov    edx,0x0
c0016f49:	83 ec 0c             	sub    esp,0xc
c0016f4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f50:	53                   	push   ebx
c0016f51:	52                   	push   edx
c0016f52:	50                   	push   eax
c0016f53:	51                   	push   ecx
c0016f54:	e8 ff 5c ff ff       	call   c000cc58 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f59:	83 c4 20             	add    esp,0x20
c0016f5c:	83 c4 18             	add    esp,0x18
c0016f5f:	5b                   	pop    ebx
c0016f60:	c3                   	ret    
c0016f61:	8d 76 00             	lea    esi,[esi+0x0]

c0016f64 <fatWrapperWriteDisk>:
c0016f64:	53                   	push   ebx
c0016f65:	83 ec 18             	sub    esp,0x18
c0016f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f74:	25 ff 00 00 00       	and    eax,0xff
c0016f79:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f80:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f88:	ba 00 00 00 00       	mov    edx,0x0
c0016f8d:	83 ec 0c             	sub    esp,0xc
c0016f90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f94:	53                   	push   ebx
c0016f95:	52                   	push   edx
c0016f96:	50                   	push   eax
c0016f97:	51                   	push   ecx
c0016f98:	e8 27 5d ff ff       	call   c000ccc4 <LogicalDisk::write(unsigned long long, int, void*)>
c0016f9d:	83 c4 20             	add    esp,0x20
c0016fa0:	83 c4 18             	add    esp,0x18
c0016fa3:	5b                   	pop    ebx
c0016fa4:	c3                   	ret    
c0016fa5:	8d 76 00             	lea    esi,[esi+0x0]

c0016fa8 <fatWrapperIoctl>:
c0016fa8:	53                   	push   ebx
c0016fa9:	83 ec 28             	sub    esp,0x28
c0016fac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fb4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fbc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fc1:	75 35                	jne    c0016ff8 <fatWrapperIoctl+0x50>
c0016fc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fcb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fcf:	25 ff 00 00 00       	and    eax,0xff
c0016fd4:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fdb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fe1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016feb:	66 89 02             	mov    WORD PTR [edx],ax
c0016fee:	b8 00 00 00 00       	mov    eax,0x0
c0016ff3:	e9 c4 00 00 00       	jmp    c00170bc <fatWrapperIoctl+0x114>
c0016ff8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016ffd:	75 75                	jne    c0017074 <fatWrapperIoctl+0xcc>
c0016fff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017003:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017007:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001700b:	25 ff 00 00 00       	and    eax,0xff
c0017010:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017017:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001701d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017023:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017029:	89 c8                	mov    eax,ecx
c001702b:	89 da                	mov    edx,ebx
c001702d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017031:	c1 e0 0a             	shl    eax,0xa
c0017034:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017038:	81 e1 ff 00 00 00    	and    ecx,0xff
c001703e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017045:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001704b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017051:	89 cb                	mov    ebx,ecx
c0017053:	c1 fb 1f             	sar    ebx,0x1f
c0017056:	53                   	push   ebx
c0017057:	51                   	push   ecx
c0017058:	52                   	push   edx
c0017059:	50                   	push   eax
c001705a:	e8 a1 50 00 00       	call   c001c100 <__udivdi3>
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	89 c2                	mov    edx,eax
c0017064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017068:	89 10                	mov    DWORD PTR [eax],edx
c001706a:	b8 00 00 00 00       	mov    eax,0x0
c001706f:	eb 4b                	jmp    c00170bc <fatWrapperIoctl+0x114>
c0017071:	8d 76 00             	lea    esi,[esi+0x0]
c0017074:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017079:	75 09                	jne    c0017084 <fatWrapperIoctl+0xdc>
c001707b:	b8 00 00 00 00       	mov    eax,0x0
c0017080:	eb 3a                	jmp    c00170bc <fatWrapperIoctl+0x114>
c0017082:	66 90                	xchg   ax,ax
c0017084:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017089:	75 19                	jne    c00170a4 <fatWrapperIoctl+0xfc>
c001708b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001708f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017093:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017097:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001709d:	b8 00 00 00 00       	mov    eax,0x0
c00170a2:	eb 18                	jmp    c00170bc <fatWrapperIoctl+0x114>
c00170a4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170a9:	75 09                	jne    c00170b4 <fatWrapperIoctl+0x10c>
c00170ab:	b8 00 00 00 00       	mov    eax,0x0
c00170b0:	eb 0a                	jmp    c00170bc <fatWrapperIoctl+0x114>
c00170b2:	66 90                	xchg   ax,ax
c00170b4:	b8 04 00 00 00       	mov    eax,0x4
c00170b9:	8d 76 00             	lea    esi,[esi+0x0]
c00170bc:	83 c4 28             	add    esp,0x28
c00170bf:	5b                   	pop    ebx
c00170c0:	c3                   	ret    
c00170c1:	90                   	nop
c00170c2:	66 90                	xchg   ax,ax

c00170c4 <FAT::FAT()>:
c00170c4:	83 ec 1c             	sub    esp,0x1c
c00170c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cb:	83 ec 0c             	sub    esp,0xc
c00170ce:	50                   	push   eax
c00170cf:	e8 7e 37 ff ff       	call   c000a852 <Filesystem::Filesystem()>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	ba 60 f0 01 c0       	mov    edx,0xc001f060
c00170dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e0:	89 10                	mov    DWORD PTR [eax],edx
c00170e2:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00170ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170f4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00170f9:	7f 15                	jg     c0017110 <FAT::FAT()+0x4c>
c00170fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ff:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c001710a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001710e:	eb e4                	jmp    c00170f4 <FAT::FAT()+0x30>
c0017110:	90                   	nop
c0017111:	83 c4 1c             	add    esp,0x1c
c0017114:	c3                   	ret    
c0017115:	90                   	nop
c0017116:	66 90                	xchg   ax,ax

c0017118 <FAT::fixFilepath(char*)>:
c0017118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001711c:	8a 00                	mov    al,BYTE PTR [eax]
c001711e:	3c 40                	cmp    al,0x40
c0017120:	7e 2e                	jle    c0017150 <FAT::fixFilepath(char*)+0x38>
c0017122:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017126:	8a 00                	mov    al,BYTE PTR [eax]
c0017128:	83 e8 41             	sub    eax,0x41
c001712b:	88 c2                	mov    dl,al
c001712d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017131:	88 10                	mov    BYTE PTR [eax],dl
c0017133:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017137:	8a 00                	mov    al,BYTE PTR [eax]
c0017139:	0f be c0             	movsx  eax,al
c001713c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0017143:	83 c0 30             	add    eax,0x30
c0017146:	88 c2                	mov    dl,al
c0017148:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001714c:	88 10                	mov    BYTE PTR [eax],dl
c001714e:	66 90                	xchg   ax,ax
c0017150:	90                   	nop
c0017151:	c3                   	ret    
c0017152:	66 90                	xchg   ax,ax

c0017154 <FAT::open(char const*, void**, FileOpenMode)>:
c0017154:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001715a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017162:	74 0c                	je     c0017170 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017164:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001716c:	75 0e                	jne    c001717c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001716e:	66 90                	xchg   ax,ax
c0017170:	b8 04 00 00 00       	mov    eax,0x4
c0017175:	e9 0a 01 00 00       	jmp    c0017284 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001717a:	66 90                	xchg   ax,ax
c001717c:	83 ec 08             	sub    esp,0x8
c001717f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017186:	8d 44 24 14          	lea    eax,[esp+0x14]
c001718a:	50                   	push   eax
c001718b:	e8 70 94 fe ff       	call   c0000600 <strcpy>
c0017190:	83 c4 10             	add    esp,0x10
c0017193:	83 ec 08             	sub    esp,0x8
c0017196:	8d 44 24 10          	lea    eax,[esp+0x10]
c001719a:	50                   	push   eax
c001719b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171a2:	e8 71 ff ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171b9:	83 e0 01             	and    eax,0x1
c00171bc:	74 0a                	je     c00171c8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171be:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171c6:	66 90                	xchg   ax,ax
c00171c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171cf:	83 e0 04             	and    eax,0x4
c00171d2:	74 10                	je     c00171e4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171d4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171dc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171eb:	83 e0 02             	and    eax,0x2
c00171ee:	74 08                	je     c00171f8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00171f0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171ff:	83 e0 08             	and    eax,0x8
c0017202:	74 08                	je     c001720c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017204:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001720c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017213:	83 e0 10             	and    eax,0x10
c0017216:	74 08                	je     c0017220 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017218:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	68 28 02 00 00       	push   0x228
c0017228:	e8 8c 05 ff ff       	call   c00077b9 <malloc>
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	89 c2                	mov    edx,eax
c0017232:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017239:	89 10                	mov    DWORD PTR [eax],edx
c001723b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017242:	31 d2                	xor    edx,edx
c0017244:	88 c2                	mov    dl,al
c0017246:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001724d:	8b 00                	mov    eax,DWORD PTR [eax]
c001724f:	83 ec 04             	sub    esp,0x4
c0017252:	52                   	push   edx
c0017253:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017257:	52                   	push   edx
c0017258:	50                   	push   eax
c0017259:	e8 bf c8 fe ff       	call   c0003b1d <f_open>
c001725e:	83 c4 10             	add    esp,0x10
c0017261:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017268:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017270:	74 0a                	je     c001727c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017272:	b8 01 00 00 00       	mov    eax,0x1
c0017277:	eb 0b                	jmp    c0017284 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017279:	8d 76 00             	lea    esi,[esi+0x0]
c001727c:	b8 00 00 00 00       	mov    eax,0x0
c0017281:	8d 76 00             	lea    esi,[esi+0x0]
c0017284:	81 c4 1c 01 00 00    	add    esp,0x11c
c001728a:	c3                   	ret    
c001728b:	90                   	nop

c001728c <FAT::openDir(char const*, void**)>:
c001728c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017292:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001729a:	74 0c                	je     c00172a8 <FAT::openDir(char const*, void**)+0x1c>
c001729c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172a4:	75 0e                	jne    c00172b4 <FAT::openDir(char const*, void**)+0x28>
c00172a6:	66 90                	xchg   ax,ax
c00172a8:	b8 04 00 00 00       	mov    eax,0x4
c00172ad:	e9 82 00 00 00       	jmp    c0017334 <FAT::openDir(char const*, void**)+0xa8>
c00172b2:	66 90                	xchg   ax,ax
c00172b4:	83 ec 08             	sub    esp,0x8
c00172b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172c2:	50                   	push   eax
c00172c3:	e8 38 93 fe ff       	call   c0000600 <strcpy>
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	83 ec 08             	sub    esp,0x8
c00172ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172d2:	50                   	push   eax
c00172d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172da:	e8 39 fe ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c00172df:	83 c4 10             	add    esp,0x10
c00172e2:	83 ec 0c             	sub    esp,0xc
c00172e5:	6a 30                	push   0x30
c00172e7:	e8 cd 04 ff ff       	call   c00077b9 <malloc>
c00172ec:	83 c4 10             	add    esp,0x10
c00172ef:	89 c2                	mov    edx,eax
c00172f1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172f8:	89 10                	mov    DWORD PTR [eax],edx
c00172fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017301:	8b 00                	mov    eax,DWORD PTR [eax]
c0017303:	83 ec 08             	sub    esp,0x8
c0017306:	8d 54 24 14          	lea    edx,[esp+0x14]
c001730a:	52                   	push   edx
c001730b:	50                   	push   eax
c001730c:	e8 95 d1 fe ff       	call   c00044a6 <f_opendir>
c0017311:	83 c4 10             	add    esp,0x10
c0017314:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001731b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017323:	74 07                	je     c001732c <FAT::openDir(char const*, void**)+0xa0>
c0017325:	b8 01 00 00 00       	mov    eax,0x1
c001732a:	eb 08                	jmp    c0017334 <FAT::openDir(char const*, void**)+0xa8>
c001732c:	b8 00 00 00 00       	mov    eax,0x0
c0017331:	8d 76 00             	lea    esi,[esi+0x0]
c0017334:	81 c4 1c 01 00 00    	add    esp,0x11c
c001733a:	c3                   	ret    
c001733b:	90                   	nop

c001733c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001733c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017342:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001734a:	75 0c                	jne    c0017358 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001734c:	b8 04 00 00 00       	mov    eax,0x4
c0017351:	e9 d6 00 00 00       	jmp    c001742c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017356:	66 90                	xchg   ax,ax
c0017358:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017360:	75 0a                	jne    c001736c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017362:	b8 04 00 00 00       	mov    eax,0x4
c0017367:	e9 c0 00 00 00       	jmp    c001742c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001736c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017374:	75 0a                	jne    c0017380 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017376:	b8 04 00 00 00       	mov    eax,0x4
c001737b:	e9 ac 00 00 00       	jmp    c001742c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017380:	83 ec 08             	sub    esp,0x8
c0017383:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001738a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017391:	50                   	push   eax
c0017392:	e8 69 92 fe ff       	call   c0000600 <strcpy>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	83 ec 08             	sub    esp,0x8
c001739d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173a4:	50                   	push   eax
c00173a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173ac:	e8 67 fd ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c00173b1:	83 c4 10             	add    esp,0x10
c00173b4:	83 ec 08             	sub    esp,0x8
c00173b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173bb:	50                   	push   eax
c00173bc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173c3:	50                   	push   eax
c00173c4:	e8 5c d2 fe ff       	call   c0004625 <f_stat>
c00173c9:	83 c4 10             	add    esp,0x10
c00173cc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173d3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173da:	85 c0                	test   eax,eax
c00173dc:	74 0a                	je     c00173e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173de:	83 f8 04             	cmp    eax,0x4
c00173e1:	74 39                	je     c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173e3:	eb 3f                	jmp    c0017424 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173e5:	8d 76 00             	lea    esi,[esi+0x0]
c00173e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173ec:	25 ff 00 00 00       	and    eax,0xff
c00173f1:	83 e0 10             	and    eax,0x10
c00173f4:	0f 95 c2             	setne  dl
c00173f7:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00173fe:	88 10                	mov    BYTE PTR [eax],dl
c0017400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017404:	ba 00 00 00 00       	mov    edx,0x0
c0017409:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017410:	89 01                	mov    DWORD PTR [ecx],eax
c0017412:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017415:	b8 00 00 00 00       	mov    eax,0x0
c001741a:	eb 10                	jmp    c001742c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001741c:	b8 02 00 00 00       	mov    eax,0x2
c0017421:	eb 09                	jmp    c001742c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017423:	90                   	nop
c0017424:	b8 01 00 00 00       	mov    eax,0x1
c0017429:	8d 76 00             	lea    esi,[esi+0x0]
c001742c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017432:	c3                   	ret    
c0017433:	90                   	nop

c0017434 <FAT::unlink(char const*)>:
c0017434:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001743a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017442:	75 08                	jne    c001744c <FAT::unlink(char const*)+0x18>
c0017444:	b8 04 00 00 00       	mov    eax,0x4
c0017449:	eb 61                	jmp    c00174ac <FAT::unlink(char const*)+0x78>
c001744b:	90                   	nop
c001744c:	83 ec 08             	sub    esp,0x8
c001744f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017456:	8d 44 24 18          	lea    eax,[esp+0x18]
c001745a:	50                   	push   eax
c001745b:	e8 a0 91 fe ff       	call   c0000600 <strcpy>
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	83 ec 08             	sub    esp,0x8
c0017466:	8d 44 24 14          	lea    eax,[esp+0x14]
c001746a:	50                   	push   eax
c001746b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017472:	e8 a1 fc ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c0017477:	83 c4 10             	add    esp,0x10
c001747a:	83 ec 0c             	sub    esp,0xc
c001747d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017481:	50                   	push   eax
c0017482:	e8 03 d4 fe ff       	call   c000488a <f_unlink>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017491:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017498:	85 c0                	test   eax,eax
c001749a:	75 08                	jne    c00174a4 <FAT::unlink(char const*)+0x70>
c001749c:	b8 00 00 00 00       	mov    eax,0x0
c00174a1:	eb 09                	jmp    c00174ac <FAT::unlink(char const*)+0x78>
c00174a3:	90                   	nop
c00174a4:	b8 01 00 00 00       	mov    eax,0x1
c00174a9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174b2:	c3                   	ret    
c00174b3:	90                   	nop

c00174b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174ba:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174c1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174d0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174d8:	75 0a                	jne    c00174e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174da:	b8 04 00 00 00       	mov    eax,0x4
c00174df:	e9 54 01 00 00       	jmp    c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174e4:	83 ec 08             	sub    esp,0x8
c00174e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00174f2:	50                   	push   eax
c00174f3:	e8 08 91 fe ff       	call   c0000600 <strcpy>
c00174f8:	83 c4 10             	add    esp,0x10
c00174fb:	83 ec 08             	sub    esp,0x8
c00174fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017502:	50                   	push   eax
c0017503:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001750a:	e8 09 fc ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c001750f:	83 c4 10             	add    esp,0x10
c0017512:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001751a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017522:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017526:	25 ff 00 00 00       	and    eax,0xff
c001752b:	83 e0 01             	and    eax,0x1
c001752e:	74 08                	je     c0017538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017530:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017538:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001753c:	25 ff 00 00 00       	and    eax,0xff
c0017541:	83 e0 02             	and    eax,0x2
c0017544:	74 0a                	je     c0017550 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017546:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001754e:	66 90                	xchg   ax,ax
c0017550:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017554:	25 ff 00 00 00       	and    eax,0xff
c0017559:	83 e0 04             	and    eax,0x4
c001755c:	74 0a                	je     c0017568 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001755e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017566:	66 90                	xchg   ax,ax
c0017568:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001756c:	25 ff 00 00 00       	and    eax,0xff
c0017571:	83 e0 08             	and    eax,0x8
c0017574:	74 0a                	je     c0017580 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017576:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001757e:	66 90                	xchg   ax,ax
c0017580:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017584:	25 ff 00 00 00       	and    eax,0xff
c0017589:	83 e0 01             	and    eax,0x1
c001758c:	74 0a                	je     c0017598 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001758e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017596:	66 90                	xchg   ax,ax
c0017598:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001759c:	25 ff 00 00 00       	and    eax,0xff
c00175a1:	83 e0 02             	and    eax,0x2
c00175a4:	74 0a                	je     c00175b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175a6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175ae:	66 90                	xchg   ax,ax
c00175b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175b4:	25 ff 00 00 00       	and    eax,0xff
c00175b9:	83 e0 04             	and    eax,0x4
c00175bc:	74 0a                	je     c00175c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175be:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175c6:	66 90                	xchg   ax,ax
c00175c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175cc:	25 ff 00 00 00       	and    eax,0xff
c00175d1:	83 e0 08             	and    eax,0x8
c00175d4:	74 0a                	je     c00175e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175d6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175de:	66 90                	xchg   ax,ax
c00175e0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175e7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00175ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00175f5:	31 d2                	xor    edx,edx
c00175f7:	88 c2                	mov    dl,al
c00175f9:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017600:	25 ff 00 00 00       	and    eax,0xff
c0017605:	83 ec 04             	sub    esp,0x4
c0017608:	52                   	push   edx
c0017609:	50                   	push   eax
c001760a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001760e:	50                   	push   eax
c001760f:	e8 e9 d6 fe ff       	call   c0004cfd <f_chmod>
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001761e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017625:	85 c0                	test   eax,eax
c0017627:	75 07                	jne    c0017630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017629:	b8 00 00 00 00       	mov    eax,0x0
c001762e:	eb 08                	jmp    c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017630:	b8 01 00 00 00       	mov    eax,0x1
c0017635:	8d 76 00             	lea    esi,[esi+0x0]
c0017638:	81 c4 2c 01 00 00    	add    esp,0x12c
c001763e:	c3                   	ret    
c001763f:	90                   	nop

c0017640 <FAT::rename(char const*, char const*)>:
c0017640:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017646:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001764e:	74 0c                	je     c001765c <FAT::rename(char const*, char const*)+0x1c>
c0017650:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017658:	75 0e                	jne    c0017668 <FAT::rename(char const*, char const*)+0x28>
c001765a:	66 90                	xchg   ax,ax
c001765c:	b8 04 00 00 00       	mov    eax,0x4
c0017661:	e9 9e 00 00 00       	jmp    c0017704 <FAT::rename(char const*, char const*)+0xc4>
c0017666:	66 90                	xchg   ax,ax
c0017668:	83 ec 08             	sub    esp,0x8
c001766b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017672:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017679:	50                   	push   eax
c001767a:	e8 81 8f fe ff       	call   c0000600 <strcpy>
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	83 ec 08             	sub    esp,0x8
c0017685:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001768c:	50                   	push   eax
c001768d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017694:	e8 7f fa ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c0017699:	83 c4 10             	add    esp,0x10
c001769c:	83 ec 08             	sub    esp,0x8
c001769f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176aa:	50                   	push   eax
c00176ab:	e8 50 8f fe ff       	call   c0000600 <strcpy>
c00176b0:	83 c4 10             	add    esp,0x10
c00176b3:	83 ec 08             	sub    esp,0x8
c00176b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176ba:	50                   	push   eax
c00176bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176c2:	e8 51 fa ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c00176c7:	83 c4 10             	add    esp,0x10
c00176ca:	83 ec 08             	sub    esp,0x8
c00176cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176d1:	50                   	push   eax
c00176d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176d9:	50                   	push   eax
c00176da:	e8 68 d4 fe ff       	call   c0004b47 <f_rename>
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176e9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00176f0:	85 c0                	test   eax,eax
c00176f2:	75 08                	jne    c00176fc <FAT::rename(char const*, char const*)+0xbc>
c00176f4:	b8 00 00 00 00       	mov    eax,0x0
c00176f9:	eb 09                	jmp    c0017704 <FAT::rename(char const*, char const*)+0xc4>
c00176fb:	90                   	nop
c00176fc:	b8 01 00 00 00       	mov    eax,0x1
c0017701:	8d 76 00             	lea    esi,[esi+0x0]
c0017704:	81 c4 1c 02 00 00    	add    esp,0x21c
c001770a:	c3                   	ret    
c001770b:	90                   	nop

c001770c <FAT::mkdir(char const*)>:
c001770c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017712:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001771a:	75 08                	jne    c0017724 <FAT::mkdir(char const*)+0x18>
c001771c:	b8 04 00 00 00       	mov    eax,0x4
c0017721:	eb 61                	jmp    c0017784 <FAT::mkdir(char const*)+0x78>
c0017723:	90                   	nop
c0017724:	83 ec 08             	sub    esp,0x8
c0017727:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001772e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017732:	50                   	push   eax
c0017733:	e8 c8 8e fe ff       	call   c0000600 <strcpy>
c0017738:	83 c4 10             	add    esp,0x10
c001773b:	83 ec 08             	sub    esp,0x8
c001773e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017742:	50                   	push   eax
c0017743:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001774a:	e8 c9 f9 ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	83 ec 0c             	sub    esp,0xc
c0017755:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017759:	50                   	push   eax
c001775a:	e8 4d d2 fe ff       	call   c00049ac <f_mkdir>
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017769:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017770:	85 c0                	test   eax,eax
c0017772:	75 08                	jne    c001777c <FAT::mkdir(char const*)+0x70>
c0017774:	b8 00 00 00 00       	mov    eax,0x0
c0017779:	eb 09                	jmp    c0017784 <FAT::mkdir(char const*)+0x78>
c001777b:	90                   	nop
c001777c:	b8 01 00 00 00       	mov    eax,0x1
c0017781:	8d 76 00             	lea    esi,[esi+0x0]
c0017784:	81 c4 1c 01 00 00    	add    esp,0x11c
c001778a:	c3                   	ret    
c001778b:	90                   	nop

c001778c <FAT::exists(char const*)>:
c001778c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017792:	83 ec 08             	sub    esp,0x8
c0017795:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001779c:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177a0:	50                   	push   eax
c00177a1:	e8 5a 8e fe ff       	call   c0000600 <strcpy>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	83 ec 08             	sub    esp,0x8
c00177ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177b0:	50                   	push   eax
c00177b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177b8:	e8 5b f9 ff ff       	call   c0017118 <FAT::fixFilepath(char*)>
c00177bd:	83 c4 10             	add    esp,0x10
c00177c0:	83 ec 08             	sub    esp,0x8
c00177c3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177ca:	50                   	push   eax
c00177cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177cf:	50                   	push   eax
c00177d0:	e8 50 ce fe ff       	call   c0004625 <f_stat>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177e6:	85 c0                	test   eax,eax
c00177e8:	75 06                	jne    c00177f0 <FAT::exists(char const*)+0x64>
c00177ea:	b0 01                	mov    al,0x1
c00177ec:	eb 06                	jmp    c00177f4 <FAT::exists(char const*)+0x68>
c00177ee:	66 90                	xchg   ax,ax
c00177f0:	b0 00                	mov    al,0x0
c00177f2:	66 90                	xchg   ax,ax
c00177f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00177fa:	c3                   	ret    
c00177fb:	90                   	nop

c00177fc <isoReadDiscSectorHelper>:
c00177fc:	83 ec 2c             	sub    esp,0x2c
c00177ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017803:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017807:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001780c:	83 e8 41             	sub    eax,0x41
c001780f:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017816:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001781a:	ba 00 00 00 00       	mov    edx,0x0
c001781f:	83 ec 0c             	sub    esp,0xc
c0017822:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017826:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001782a:	52                   	push   edx
c001782b:	50                   	push   eax
c001782c:	51                   	push   ecx
c001782d:	e8 26 54 ff ff       	call   c000cc58 <LogicalDisk::read(unsigned long long, int, void*)>
c0017832:	83 c4 20             	add    esp,0x20
c0017835:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017839:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001783e:	74 0c                	je     c001784c <isoReadDiscSectorHelper+0x50>
c0017840:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017844:	c1 e0 0b             	shl    eax,0xb
c0017847:	eb 0b                	jmp    c0017854 <isoReadDiscSectorHelper+0x58>
c0017849:	8d 76 00             	lea    esi,[esi+0x0]
c001784c:	b8 00 00 00 00       	mov    eax,0x0
c0017851:	8d 76 00             	lea    esi,[esi+0x0]
c0017854:	83 c4 2c             	add    esp,0x2c
c0017857:	c3                   	ret    

c0017858 <iso_kprintf>:
c0017858:	83 ec 0c             	sub    esp,0xc
c001785b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017860:	83 ec 08             	sub    esp,0x8
c0017863:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017867:	50                   	push   eax
c0017868:	e8 c9 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001786d:	83 c4 10             	add    esp,0x10
c0017870:	90                   	nop
c0017871:	83 c4 0c             	add    esp,0xc
c0017874:	c3                   	ret    
c0017875:	8d 76 00             	lea    esi,[esi+0x0]

c0017878 <iso_kprintfd>:
c0017878:	83 ec 0c             	sub    esp,0xc
c001787b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017880:	83 ec 08             	sub    esp,0x8
c0017883:	68 c0 f0 01 c0       	push   0xc001f0c0
c0017888:	50                   	push   eax
c0017889:	e8 a8 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017896:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001789a:	83 ec 08             	sub    esp,0x8
c001789d:	52                   	push   edx
c001789e:	50                   	push   eax
c001789f:	e8 4c 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00178a4:	83 c4 10             	add    esp,0x10
c00178a7:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178ac:	83 ec 08             	sub    esp,0x8
c00178af:	68 41 ef 01 c0       	push   0xc001ef41
c00178b4:	50                   	push   eax
c00178b5:	e8 7c 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178ba:	83 c4 10             	add    esp,0x10
c00178bd:	90                   	nop
c00178be:	83 c4 0c             	add    esp,0xc
c00178c1:	c3                   	ret    

c00178c2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178c2:	b8 08 00 00 00       	mov    eax,0x8
c00178c7:	c3                   	ret    

c00178c8 <ISO9660::getName()>:
c00178c8:	b8 c3 f0 01 c0       	mov    eax,0xc001f0c3
c00178cd:	c3                   	ret    

c00178ce <ISO9660::closeDir(void*)>:
c00178ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00178d4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178d7:	90                   	nop

c00178d8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178d8:	b8 01 00 00 00       	mov    eax,0x1
c00178dd:	c3                   	ret    

c00178de <ISO9660::unlink(char const*)>:
c00178de:	b8 01 00 00 00       	mov    eax,0x1
c00178e3:	c3                   	ret    

c00178e4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178e4:	b8 03 00 00 00       	mov    eax,0x3
c00178e9:	c3                   	ret    

c00178ea <ISO9660::rename(char const*, char const*)>:
c00178ea:	b8 01 00 00 00       	mov    eax,0x1
c00178ef:	c3                   	ret    

c00178f0 <ISO9660::mkdir(char const*)>:
c00178f0:	b8 01 00 00 00       	mov    eax,0x1
c00178f5:	c3                   	ret    

c00178f6 <ISO9660::~ISO9660()>:
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	ba 14 f1 01 c0       	mov    edx,0xc001f114
c00178fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017902:	89 10                	mov    DWORD PTR [eax],edx
c0017904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017908:	83 ec 0c             	sub    esp,0xc
c001790b:	50                   	push   eax
c001790c:	e8 65 2f ff ff       	call   c000a876 <Filesystem::~Filesystem()>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	90                   	nop
c0017915:	83 c4 0c             	add    esp,0xc
c0017918:	c3                   	ret    
c0017919:	90                   	nop

c001791a <ISO9660::~ISO9660()>:
c001791a:	83 ec 0c             	sub    esp,0xc
c001791d:	83 ec 0c             	sub    esp,0xc
c0017920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017924:	e8 cd ff ff ff       	call   c00178f6 <ISO9660::~ISO9660()>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	83 ec 08             	sub    esp,0x8
c001792f:	6a 08                	push   0x8
c0017931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017935:	e8 00 2b ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001793a:	83 c4 10             	add    esp,0x10
c001793d:	83 c4 0c             	add    esp,0xc
c0017940:	c3                   	ret    
c0017941:	90                   	nop

c0017942 <ISO9660::exists(char const*)>:
c0017942:	83 ec 18             	sub    esp,0x18
c0017945:	68 de f0 01 c0       	push   0xc001f0de
c001794a:	e8 64 88 ff ff       	call   c00101b3 <KePanic(char const*)>
c001794f:	31 c0                	xor    eax,eax
c0017951:	83 c4 1c             	add    esp,0x1c
c0017954:	c3                   	ret    
c0017955:	90                   	nop

c0017956 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017956:	56                   	push   esi
c0017957:	53                   	push   ebx
c0017958:	50                   	push   eax
c0017959:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001795d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017961:	85 db                	test   ebx,ebx
c0017963:	0f 84 82 00 00 00    	je     c00179eb <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017969:	85 f6                	test   esi,esi
c001796b:	74 7e                	je     c00179eb <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001796d:	ba 03 00 00 00       	mov    edx,0x3
c0017972:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017977:	75 77                	jne    c00179f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017979:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001797c:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017982:	74 34                	je     c00179b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017984:	83 ec 0c             	sub    esp,0xc
c0017987:	50                   	push   eax
c0017988:	e8 32 ee fe ff       	call   c00067bf <init_percd>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	ba 0b 00 00 00       	mov    edx,0xb
c0017995:	40                   	inc    eax
c0017996:	74 58                	je     c00179f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017998:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c001799f:	74 10                	je     c00179b1 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00179a1:	83 ec 0c             	sub    esp,0xc
c00179a4:	68 fc f0 01 c0       	push   0xc001f0fc
c00179a9:	e8 05 88 ff ff       	call   c00101b3 <KePanic(char const*)>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	8a 03                	mov    al,BYTE PTR [ebx]
c00179b3:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c00179b8:	83 ec 0c             	sub    esp,0xc
c00179bb:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c00179c2:	83 c3 03             	add    ebx,0x3
c00179c5:	50                   	push   eax
c00179c6:	e8 f4 ed fe ff       	call   c00067bf <init_percd>
c00179cb:	59                   	pop    ecx
c00179cc:	58                   	pop    eax
c00179cd:	6a 00                	push   0x0
c00179cf:	53                   	push   ebx
c00179d0:	e8 28 e9 fe ff       	call   c00062fd <iso_open>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	ba 01 00 00 00       	mov    edx,0x1
c00179dd:	83 f8 ff             	cmp    eax,0xffffffff
c00179e0:	74 0e                	je     c00179f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179e2:	83 c0 64             	add    eax,0x64
c00179e5:	31 d2                	xor    edx,edx
c00179e7:	89 06                	mov    DWORD PTR [esi],eax
c00179e9:	eb 05                	jmp    c00179f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179eb:	ba 04 00 00 00       	mov    edx,0x4
c00179f0:	89 d0                	mov    eax,edx
c00179f2:	5a                   	pop    edx
c00179f3:	5b                   	pop    ebx
c00179f4:	5e                   	pop    esi
c00179f5:	c3                   	ret    

c00179f6 <ISO9660::openDir(char const*, void**)>:
c00179f6:	56                   	push   esi
c00179f7:	53                   	push   ebx
c00179f8:	50                   	push   eax
c00179f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a01:	85 db                	test   ebx,ebx
c0017a03:	74 76                	je     c0017a7b <ISO9660::openDir(char const*, void**)+0x85>
c0017a05:	85 f6                	test   esi,esi
c0017a07:	74 72                	je     c0017a7b <ISO9660::openDir(char const*, void**)+0x85>
c0017a09:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a0c:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a12:	74 34                	je     c0017a48 <ISO9660::openDir(char const*, void**)+0x52>
c0017a14:	83 ec 0c             	sub    esp,0xc
c0017a17:	50                   	push   eax
c0017a18:	e8 a2 ed fe ff       	call   c00067bf <init_percd>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	ba 0b 00 00 00       	mov    edx,0xb
c0017a25:	40                   	inc    eax
c0017a26:	74 58                	je     c0017a80 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a28:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a2f:	74 10                	je     c0017a41 <ISO9660::openDir(char const*, void**)+0x4b>
c0017a31:	83 ec 0c             	sub    esp,0xc
c0017a34:	68 fc f0 01 c0       	push   0xc001f0fc
c0017a39:	e8 75 87 ff ff       	call   c00101b3 <KePanic(char const*)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a43:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a48:	83 ec 0c             	sub    esp,0xc
c0017a4b:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a52:	83 c3 03             	add    ebx,0x3
c0017a55:	50                   	push   eax
c0017a56:	e8 64 ed fe ff       	call   c00067bf <init_percd>
c0017a5b:	59                   	pop    ecx
c0017a5c:	58                   	pop    eax
c0017a5d:	6a 01                	push   0x1
c0017a5f:	53                   	push   ebx
c0017a60:	e8 98 e8 fe ff       	call   c00062fd <iso_open>
c0017a65:	83 c4 10             	add    esp,0x10
c0017a68:	ba 01 00 00 00       	mov    edx,0x1
c0017a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0017a70:	74 0e                	je     c0017a80 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a72:	83 c0 64             	add    eax,0x64
c0017a75:	31 d2                	xor    edx,edx
c0017a77:	89 06                	mov    DWORD PTR [esi],eax
c0017a79:	eb 05                	jmp    c0017a80 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a7b:	ba 04 00 00 00       	mov    edx,0x4
c0017a80:	89 d0                	mov    eax,edx
c0017a82:	5a                   	pop    edx
c0017a83:	5b                   	pop    ebx
c0017a84:	5e                   	pop    esi
c0017a85:	c3                   	ret    

c0017a86 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a86:	53                   	push   ebx
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a92:	85 c0                	test   eax,eax
c0017a94:	74 25                	je     c0017abb <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a96:	85 db                	test   ebx,ebx
c0017a98:	74 21                	je     c0017abb <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a9a:	83 e8 64             	sub    eax,0x64
c0017a9d:	52                   	push   edx
c0017a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aa6:	50                   	push   eax
c0017aa7:	e8 f9 e8 fe ff       	call   c00063a5 <iso_read>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	89 03                	mov    DWORD PTR [ebx],eax
c0017ab1:	09 d0                	or     eax,edx
c0017ab3:	0f 94 c0             	sete   al
c0017ab6:	0f b6 c0             	movzx  eax,al
c0017ab9:	eb 05                	jmp    c0017ac0 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017abb:	b8 04 00 00 00       	mov    eax,0x4
c0017ac0:	83 c4 08             	add    esp,0x8
c0017ac3:	5b                   	pop    ebx
c0017ac4:	c3                   	ret    
c0017ac5:	90                   	nop

c0017ac6 <ISO9660::seek(void*, unsigned long long)>:
c0017ac6:	57                   	push   edi
c0017ac7:	56                   	push   esi
c0017ac8:	b8 04 00 00 00       	mov    eax,0x4
c0017acd:	51                   	push   ecx
c0017ace:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ad2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ad6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ada:	85 d2                	test   edx,edx
c0017adc:	74 1c                	je     c0017afa <ISO9660::seek(void*, unsigned long long)+0x34>
c0017ade:	6a 00                	push   0x0
c0017ae0:	83 ea 64             	sub    edx,0x64
c0017ae3:	57                   	push   edi
c0017ae4:	56                   	push   esi
c0017ae5:	52                   	push   edx
c0017ae6:	e8 d0 e9 fe ff       	call   c00064bb <iso_seek>
c0017aeb:	83 c4 10             	add    esp,0x10
c0017aee:	31 f0                	xor    eax,esi
c0017af0:	31 fa                	xor    edx,edi
c0017af2:	09 d0                	or     eax,edx
c0017af4:	0f 95 c0             	setne  al
c0017af7:	0f b6 c0             	movzx  eax,al
c0017afa:	5a                   	pop    edx
c0017afb:	5e                   	pop    esi
c0017afc:	5f                   	pop    edi
c0017afd:	c3                   	ret    

c0017afe <ISO9660::tell(void*, unsigned long long*)>:
c0017afe:	53                   	push   ebx
c0017aff:	83 ec 08             	sub    esp,0x8
c0017b02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b0a:	85 c0                	test   eax,eax
c0017b0c:	74 1c                	je     c0017b2a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b0e:	85 db                	test   ebx,ebx
c0017b10:	74 18                	je     c0017b2a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b12:	83 ec 0c             	sub    esp,0xc
c0017b15:	83 e8 64             	sub    eax,0x64
c0017b18:	50                   	push   eax
c0017b19:	e8 21 ea fe ff       	call   c000653f <iso_tell>
c0017b1e:	83 c4 10             	add    esp,0x10
c0017b21:	89 03                	mov    DWORD PTR [ebx],eax
c0017b23:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b26:	31 c0                	xor    eax,eax
c0017b28:	eb 05                	jmp    c0017b2f <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b2a:	b8 04 00 00 00       	mov    eax,0x4
c0017b2f:	83 c4 08             	add    esp,0x8
c0017b32:	5b                   	pop    ebx
c0017b33:	c3                   	ret    

c0017b34 <ISO9660::stat(void*, unsigned long long*)>:
c0017b34:	53                   	push   ebx
c0017b35:	83 ec 08             	sub    esp,0x8
c0017b38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b3c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b40:	85 c0                	test   eax,eax
c0017b42:	74 20                	je     c0017b64 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b44:	85 db                	test   ebx,ebx
c0017b46:	74 1c                	je     c0017b64 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	83 e8 64             	sub    eax,0x64
c0017b4e:	50                   	push   eax
c0017b4f:	e8 1c ea fe ff       	call   c0006570 <iso_total>
c0017b54:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b5b:	89 03                	mov    DWORD PTR [ebx],eax
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	31 c0                	xor    eax,eax
c0017b62:	eb 05                	jmp    c0017b69 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b64:	b8 04 00 00 00       	mov    eax,0x4
c0017b69:	83 c4 08             	add    esp,0x8
c0017b6c:	5b                   	pop    ebx
c0017b6d:	c3                   	ret    

c0017b6e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b6e:	55                   	push   ebp
c0017b6f:	57                   	push   edi
c0017b70:	56                   	push   esi
c0017b71:	53                   	push   ebx
c0017b72:	83 ec 0c             	sub    esp,0xc
c0017b75:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b79:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b7d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b81:	85 ff                	test   edi,edi
c0017b83:	0f 94 c2             	sete   dl
c0017b86:	85 f6                	test   esi,esi
c0017b88:	0f 94 c0             	sete   al
c0017b8b:	08 c2                	or     dl,al
c0017b8d:	0f 85 9e 00 00 00    	jne    c0017c31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b93:	85 db                	test   ebx,ebx
c0017b95:	0f 84 96 00 00 00    	je     c0017c31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b9b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017b9e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017ba4:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017bab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017bae:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017bb4:	74 34                	je     c0017bea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017bb6:	83 ec 0c             	sub    esp,0xc
c0017bb9:	50                   	push   eax
c0017bba:	e8 00 ec fe ff       	call   c00067bf <init_percd>
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	ba 0b 00 00 00       	mov    edx,0xb
c0017bc7:	40                   	inc    eax
c0017bc8:	74 6c                	je     c0017c36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017bca:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017bd1:	74 10                	je     c0017be3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017bd3:	83 ec 0c             	sub    esp,0xc
c0017bd6:	68 fc f0 01 c0       	push   0xc001f0fc
c0017bdb:	e8 d3 85 ff ff       	call   c00101b3 <KePanic(char const*)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	8a 03                	mov    al,BYTE PTR [ebx]
c0017be5:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017bea:	83 c3 03             	add    ebx,0x3
c0017bed:	52                   	push   edx
c0017bee:	52                   	push   edx
c0017bef:	6a 00                	push   0x0
c0017bf1:	53                   	push   ebx
c0017bf2:	e8 06 e7 fe ff       	call   c00062fd <iso_open>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	89 c5                	mov    ebp,eax
c0017bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0017bff:	75 0f                	jne    c0017c10 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017c01:	50                   	push   eax
c0017c02:	50                   	push   eax
c0017c03:	6a 01                	push   0x1
c0017c05:	53                   	push   ebx
c0017c06:	e8 f2 e6 fe ff       	call   c00062fd <iso_open>
c0017c0b:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c0e:	eb 1a                	jmp    c0017c2a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	50                   	push   eax
c0017c14:	e8 57 e9 fe ff       	call   c0006570 <iso_total>
c0017c19:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c20:	89 06                	mov    DWORD PTR [esi],eax
c0017c22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c25:	e8 5d e7 fe ff       	call   c0006387 <iso_close>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	31 d2                	xor    edx,edx
c0017c2f:	eb 05                	jmp    c0017c36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c31:	ba 04 00 00 00       	mov    edx,0x4
c0017c36:	83 c4 0c             	add    esp,0xc
c0017c39:	89 d0                	mov    eax,edx
c0017c3b:	5b                   	pop    ebx
c0017c3c:	5e                   	pop    esi
c0017c3d:	5f                   	pop    edi
c0017c3e:	5d                   	pop    ebp
c0017c3f:	c3                   	ret    

c0017c40 <ISO9660::close(void*)>:
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	b8 04 00 00 00       	mov    eax,0x4
c0017c48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c4c:	85 d2                	test   edx,edx
c0017c4e:	74 11                	je     c0017c61 <ISO9660::close(void*)+0x21>
c0017c50:	83 ec 0c             	sub    esp,0xc
c0017c53:	83 ea 64             	sub    edx,0x64
c0017c56:	52                   	push   edx
c0017c57:	e8 2b e7 fe ff       	call   c0006387 <iso_close>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	31 c0                	xor    eax,eax
c0017c61:	83 c4 0c             	add    esp,0xc
c0017c64:	c3                   	ret    
c0017c65:	90                   	nop

c0017c66 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c66:	55                   	push   ebp
c0017c67:	57                   	push   edi
c0017c68:	56                   	push   esi
c0017c69:	53                   	push   ebx
c0017c6a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c70:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c77:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c7e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c85:	85 c0                	test   eax,eax
c0017c87:	0f 84 96 00 00 00    	je     c0017d23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c8d:	85 db                	test   ebx,ebx
c0017c8f:	0f 84 8e 00 00 00    	je     c0017d23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c95:	83 ec 0c             	sub    esp,0xc
c0017c98:	83 e8 64             	sub    eax,0x64
c0017c9b:	50                   	push   eax
c0017c9c:	e8 20 e9 fe ff       	call   c00065c1 <iso_readdir>
c0017ca1:	83 c4 10             	add    esp,0x10
c0017ca4:	89 c6                	mov    esi,eax
c0017ca6:	85 c0                	test   eax,eax
c0017ca8:	75 18                	jne    c0017cc2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017caa:	52                   	push   edx
c0017cab:	68 10 01 00 00       	push   0x110
c0017cb0:	6a 00                	push   0x0
c0017cb2:	57                   	push   edi
c0017cb3:	e8 18 88 fe ff       	call   c00004d0 <memset>
c0017cb8:	83 c4 10             	add    esp,0x10
c0017cbb:	b8 01 00 00 00       	mov    eax,0x1
c0017cc0:	eb 66                	jmp    c0017d28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cc2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017cc8:	8d 68 08             	lea    ebp,[eax+0x8]
c0017ccb:	83 ec 0c             	sub    esp,0xc
c0017cce:	55                   	push   ebp
c0017ccf:	e8 6c 88 fe ff       	call   c0000540 <strlen>
c0017cd4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017ce7:	75 0a                	jne    c0017cf3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017ce9:	b8 02 00 00 00       	mov    eax,0x2
c0017cee:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017cf1:	74 05                	je     c0017cf8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017cf3:	b8 01 00 00 00       	mov    eax,0x1
c0017cf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cfc:	50                   	push   eax
c0017cfd:	50                   	push   eax
c0017cfe:	55                   	push   ebp
c0017cff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d03:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d07:	50                   	push   eax
c0017d08:	e8 f3 88 fe ff       	call   c0000600 <strcpy>
c0017d0d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d16:	31 c0                	xor    eax,eax
c0017d18:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d1e:	83 c4 10             	add    esp,0x10
c0017d21:	eb 05                	jmp    c0017d28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d23:	b8 04 00 00 00       	mov    eax,0x4
c0017d28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d2e:	5b                   	pop    ebx
c0017d2f:	5e                   	pop    esi
c0017d30:	5f                   	pop    edi
c0017d31:	5d                   	pop    ebp
c0017d32:	c3                   	ret    

c0017d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d33:	57                   	push   edi
c0017d34:	56                   	push   esi
c0017d35:	53                   	push   ebx
c0017d36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d42:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d48:	75 08                	jne    c0017d52 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d4a:	38 1d 30 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb30,bl
c0017d50:	74 4a                	je     c0017d9c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d52:	83 ec 0c             	sub    esp,0xc
c0017d55:	31 d2                	xor    edx,edx
c0017d57:	68 40 53 02 c0       	push   0xc0025340
c0017d5c:	0f be c3             	movsx  eax,bl
c0017d5f:	6a 01                	push   0x1
c0017d61:	52                   	push   edx
c0017d62:	56                   	push   esi
c0017d63:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017d6a:	e8 e9 4e ff ff       	call   c000cc58 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d6f:	83 c4 20             	add    esp,0x20
c0017d72:	85 c0                	test   eax,eax
c0017d74:	75 0e                	jne    c0017d84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d76:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017d7c:	88 1d 30 fb 01 c0    	mov    BYTE PTR ds:0xc001fb30,bl
c0017d82:	eb 18                	jmp    c0017d9c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d84:	50                   	push   eax
c0017d85:	68 00 08 00 00       	push   0x800
c0017d8a:	6a 00                	push   0x0
c0017d8c:	57                   	push   edi
c0017d8d:	e8 3e 87 fe ff       	call   c00004d0 <memset>
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	b8 01 00 00 00       	mov    eax,0x1
c0017d9a:	eb 0e                	jmp    c0017daa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017d9c:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017da1:	b9 00 08 00 00       	mov    ecx,0x800
c0017da6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017da8:	31 c0                	xor    eax,eax
c0017daa:	5b                   	pop    ebx
c0017dab:	5e                   	pop    esi
c0017dac:	5f                   	pop    edi
c0017dad:	c3                   	ret    

c0017dae <ISO9660::tryMount(LogicalDisk*, int)>:
c0017dae:	53                   	push   ebx
c0017daf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017db5:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017dbf:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017dc6:	8d 58 41             	lea    ebx,[eax+0x41]
c0017dc9:	0f be db             	movsx  ebx,bl
c0017dcc:	53                   	push   ebx
c0017dcd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dd1:	50                   	push   eax
c0017dd2:	6a 10                	push   0x10
c0017dd4:	e8 5a ff ff ff       	call   c0017d33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017dd9:	83 c4 10             	add    esp,0x10
c0017ddc:	31 d2                	xor    edx,edx
c0017dde:	85 c0                	test   eax,eax
c0017de0:	75 33                	jne    c0017e15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017de7:	75 2c                	jne    c0017e15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017dee:	75 25                	jne    c0017e15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017df5:	75 1e                	jne    c0017e15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017dfc:	75 17                	jne    c0017e15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dfe:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e03:	75 10                	jne    c0017e15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e05:	83 ec 0c             	sub    esp,0xc
c0017e08:	53                   	push   ebx
c0017e09:	e8 b1 e9 fe ff       	call   c00067bf <init_percd>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	40                   	inc    eax
c0017e12:	0f 95 c2             	setne  dl
c0017e15:	88 d0                	mov    al,dl
c0017e17:	81 c4 08 08 00 00    	add    esp,0x808
c0017e1d:	5b                   	pop    ebx
c0017e1e:	c3                   	ret    
c0017e1f:	90                   	nop

c0017e20 <ISO9660::ISO9660()>:
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e27:	83 ec 0c             	sub    esp,0xc
c0017e2a:	50                   	push   eax
c0017e2b:	e8 22 2a ff ff       	call   c000a852 <Filesystem::Filesystem()>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	ba 14 f1 01 c0       	mov    edx,0xc001f114
c0017e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e3c:	89 10                	mov    DWORD PTR [eax],edx
c0017e3e:	e8 7e ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e43:	90                   	nop
c0017e44:	83 c4 0c             	add    esp,0xc
c0017e47:	c3                   	ret    

c0017e48 <SoundCard::beginPlayback()>:
c0017e48:	c7 44 24 04 74 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f174
c0017e50:	e9 5e 83 ff ff       	jmp    c00101b3 <KePanic(char const*)>
c0017e55:	90                   	nop

c0017e56 <SoundCard::stopPlayback()>:
c0017e56:	c7 44 24 04 74 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f174
c0017e5e:	e9 50 83 ff ff       	jmp    c00101b3 <KePanic(char const*)>
c0017e63:	90                   	nop

c0017e64 <SoundCard::SoundCard(char const*)>:
c0017e64:	83 ec 1c             	sub    esp,0x1c
c0017e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6b:	83 ec 08             	sub    esp,0x8
c0017e6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e72:	50                   	push   eax
c0017e73:	e8 90 3c ff ff       	call   c000bb08 <Device::Device(char const*)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c0017e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e84:	89 10                	mov    DWORD PTR [eax],edx
c0017e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e95:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017ec9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ed1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ed6:	7f 19                	jg     c0017ef1 <SoundCard::SoundCard(char const*)+0x8d>
c0017ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017edc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ee0:	83 c2 54             	add    edx,0x54
c0017ee3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017eeb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017eef:	eb e0                	jmp    c0017ed1 <SoundCard::SoundCard(char const*)+0x6d>
c0017ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017efc:	90                   	nop
c0017efd:	83 c4 1c             	add    esp,0x1c
c0017f00:	c3                   	ret    
c0017f01:	90                   	nop

c0017f02 <SoundCard::~SoundCard()>:
c0017f02:	83 ec 0c             	sub    esp,0xc
c0017f05:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c0017f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f0e:	89 10                	mov    DWORD PTR [eax],edx
c0017f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	50                   	push   eax
c0017f18:	e8 55 39 ff ff       	call   c000b872 <Device::~Device()>
c0017f1d:	83 c4 10             	add    esp,0x10
c0017f20:	90                   	nop
c0017f21:	83 c4 0c             	add    esp,0xc
c0017f24:	c3                   	ret    
c0017f25:	90                   	nop

c0017f26 <SoundCard::~SoundCard()>:
c0017f26:	83 ec 0c             	sub    esp,0xc
c0017f29:	83 ec 0c             	sub    esp,0xc
c0017f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f30:	e8 cd ff ff ff       	call   c0017f02 <SoundCard::~SoundCard()>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	83 ec 08             	sub    esp,0x8
c0017f3b:	68 e8 01 00 00       	push   0x1e8
c0017f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f44:	e8 f1 24 ff ff       	call   c000a43a <operator delete(void*, unsigned long)>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	83 c4 0c             	add    esp,0xc
c0017f4f:	c3                   	ret    

c0017f50 <SoundCard::configureRates(int, int, int)>:
c0017f50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f54:	31 c0                	xor    eax,eax
c0017f56:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f5d:	75 20                	jne    c0017f7f <SoundCard::configureRates(int, int, int)+0x2f>
c0017f5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f63:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f6d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f77:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f7d:	b0 01                	mov    al,0x1
c0017f7f:	c3                   	ret    

c0017f80 <SoundCard::getSamples16(int, short*)>:
c0017f80:	55                   	push   ebp
c0017f81:	57                   	push   edi
c0017f82:	31 ff                	xor    edi,edi
c0017f84:	56                   	push   esi
c0017f85:	53                   	push   ebx
c0017f86:	31 db                	xor    ebx,ebx
c0017f88:	83 ec 10             	sub    esp,0x10
c0017f8b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f8f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f93:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f96:	50                   	push   eax
c0017f97:	6a 00                	push   0x0
c0017f99:	55                   	push   ebp
c0017f9a:	e8 31 85 fe ff       	call   c00004d0 <memset>
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017fad:	85 c0                	test   eax,eax
c0017faf:	74 1b                	je     c0017fcc <SoundCard::getSamples16(int, short*)+0x4c>
c0017fb1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fb5:	75 15                	jne    c0017fcc <SoundCard::getSamples16(int, short*)+0x4c>
c0017fb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fbb:	55                   	push   ebp
c0017fbc:	56                   	push   esi
c0017fbd:	50                   	push   eax
c0017fbe:	e8 ed 02 00 00       	call   c00182b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017fc3:	83 c4 10             	add    esp,0x10
c0017fc6:	39 c7                	cmp    edi,eax
c0017fc8:	7d 02                	jge    c0017fcc <SoundCard::getSamples16(int, short*)+0x4c>
c0017fca:	89 c7                	mov    edi,eax
c0017fcc:	43                   	inc    ebx
c0017fcd:	83 fb 20             	cmp    ebx,0x20
c0017fd0:	75 d0                	jne    c0017fa2 <SoundCard::getSamples16(int, short*)+0x22>
c0017fd2:	83 c4 0c             	add    esp,0xc
c0017fd5:	89 f8                	mov    eax,edi
c0017fd7:	5b                   	pop    ebx
c0017fd8:	5e                   	pop    esi
c0017fd9:	5f                   	pop    edi
c0017fda:	5d                   	pop    ebp
c0017fdb:	c3                   	ret    

c0017fdc <SoundCard::getSamples32(int, int*)>:
c0017fdc:	55                   	push   ebp
c0017fdd:	57                   	push   edi
c0017fde:	31 ff                	xor    edi,edi
c0017fe0:	56                   	push   esi
c0017fe1:	31 f6                	xor    esi,esi
c0017fe3:	53                   	push   ebx
c0017fe4:	83 ec 10             	sub    esp,0x10
c0017fe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017feb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017fef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017ff3:	c1 e0 02             	shl    eax,0x2
c0017ff6:	50                   	push   eax
c0017ff7:	6a 00                	push   0x0
c0017ff9:	55                   	push   ebp
c0017ffa:	e8 d1 84 fe ff       	call   c00004d0 <memset>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018009:	85 c0                	test   eax,eax
c001800b:	74 1b                	je     c0018028 <SoundCard::getSamples32(int, int*)+0x4c>
c001800d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018011:	75 15                	jne    c0018028 <SoundCard::getSamples32(int, int*)+0x4c>
c0018013:	53                   	push   ebx
c0018014:	55                   	push   ebp
c0018015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018019:	50                   	push   eax
c001801a:	e8 55 03 00 00       	call   c0018374 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001801f:	83 c4 10             	add    esp,0x10
c0018022:	39 c6                	cmp    esi,eax
c0018024:	7d 02                	jge    c0018028 <SoundCard::getSamples32(int, int*)+0x4c>
c0018026:	89 c6                	mov    esi,eax
c0018028:	47                   	inc    edi
c0018029:	83 ff 20             	cmp    edi,0x20
c001802c:	75 d4                	jne    c0018002 <SoundCard::getSamples32(int, int*)+0x26>
c001802e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018034:	85 f6                	test   esi,esi
c0018036:	75 0f                	jne    c0018047 <SoundCard::getSamples32(int, int*)+0x6b>
c0018038:	84 c0                	test   al,al
c001803a:	74 1b                	je     c0018057 <SoundCard::getSamples32(int, int*)+0x7b>
c001803c:	83 ec 0c             	sub    esp,0xc
c001803f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018041:	53                   	push   ebx
c0018042:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018045:	eb 0d                	jmp    c0018054 <SoundCard::getSamples32(int, int*)+0x78>
c0018047:	84 c0                	test   al,al
c0018049:	75 0c                	jne    c0018057 <SoundCard::getSamples32(int, int*)+0x7b>
c001804b:	83 ec 0c             	sub    esp,0xc
c001804e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018050:	53                   	push   ebx
c0018051:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018054:	83 c4 10             	add    esp,0x10
c0018057:	83 c4 0c             	add    esp,0xc
c001805a:	89 f0                	mov    eax,esi
c001805c:	5b                   	pop    ebx
c001805d:	5e                   	pop    esi
c001805e:	5f                   	pop    edi
c001805f:	5d                   	pop    ebp
c0018060:	c3                   	ret    
c0018061:	90                   	nop

c0018062 <SoundCard::addChannel(SoundPort*)>:
c0018062:	83 ec 0c             	sub    esp,0xc
c0018065:	31 c0                	xor    eax,eax
c0018067:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001806b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018073:	74 1b                	je     c0018090 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018075:	40                   	inc    eax
c0018076:	83 f8 20             	cmp    eax,0x20
c0018079:	75 f0                	jne    c001806b <SoundCard::addChannel(SoundPort*)+0x9>
c001807b:	83 ec 0c             	sub    esp,0xc
c001807e:	68 99 f1 01 c0       	push   0xc001f199
c0018083:	e8 2b 81 ff ff       	call   c00101b3 <KePanic(char const*)>
c0018088:	83 c4 10             	add    esp,0x10
c001808b:	83 c8 ff             	or     eax,0xffffffff
c001808e:	eb 0b                	jmp    c001809b <SoundCard::addChannel(SoundPort*)+0x39>
c0018090:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018094:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001809b:	83 c4 0c             	add    esp,0xc
c001809e:	c3                   	ret    
c001809f:	90                   	nop

c00180a0 <SoundCard::removeChannel(int)>:
c00180a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180a8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00180b3:	c3                   	ret    

c00180b4 <SoundPort::SoundPort(int, int, int, int)>:
c00180b4:	83 ec 0c             	sub    esp,0xc
c00180b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180bb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180d2:	89 10                	mov    DWORD PTR [eax],edx
c00180d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180ea:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00180ef:	75 13                	jne    c0018104 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f7:	05 a0 0f 00 00       	add    eax,0xfa0
c00180fc:	01 c0                	add    eax,eax
c00180fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018102:	66 90                	xchg   ax,ax
c0018104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018108:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001810c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001810f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018113:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018121:	c1 e0 02             	shl    eax,0x2
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	50                   	push   eax
c0018128:	e8 8c f6 fe ff       	call   c00077b9 <malloc>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	89 c2                	mov    edx,eax
c0018132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018136:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018139:	90                   	nop
c001813a:	83 c4 0c             	add    esp,0xc
c001813d:	c3                   	ret    
c001813e:	66 90                	xchg   ax,ax

c0018140 <SoundPort::~SoundPort()>:
c0018140:	83 ec 0c             	sub    esp,0xc
c0018143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018147:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001814a:	85 c0                	test   eax,eax
c001814c:	74 1e                	je     c001816c <SoundPort::~SoundPort()+0x2c>
c001814e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018152:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	50                   	push   eax
c0018159:	e8 6b f6 fe ff       	call   c00077c9 <free>
c001815e:	83 c4 10             	add    esp,0x10
c0018161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018165:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001816c:	90                   	nop
c001816d:	83 c4 0c             	add    esp,0xc
c0018170:	c3                   	ret    
c0018171:	90                   	nop
c0018172:	66 90                	xchg   ax,ax

c0018174 <SoundPort::unpause()>:
c0018174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018178:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001817c:	c3                   	ret    
c001817d:	90                   	nop
c001817e:	66 90                	xchg   ax,ax

c0018180 <SoundPort::pause()>:
c0018180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018184:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018188:	c3                   	ret    
c0018189:	90                   	nop
c001818a:	66 90                	xchg   ax,ax

c001818c <SoundPort::getBufferUsed()>:
c001818c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018190:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018193:	c3                   	ret    

c0018194 <SoundPort::getBufferSize()>:
c0018194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001819b:	c3                   	ret    

c001819c <SoundPort::buffer16(short*, int)>:
c001819c:	55                   	push   ebp
c001819d:	57                   	push   edi
c001819e:	56                   	push   esi
c001819f:	53                   	push   ebx
c00181a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181a4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181a8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181ab:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00181ae:	74 68                	je     c0018218 <SoundPort::buffer16(short*, int)+0x7c>
c00181b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181b4:	85 c9                	test   ecx,ecx
c00181b6:	7e 60                	jle    c0018218 <SoundPort::buffer16(short*, int)+0x7c>
c00181b8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00181bc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181bf:	c1 e1 0f             	shl    ecx,0xf
c00181c2:	8d 70 01             	lea    esi,[eax+0x1]
c00181c5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181c8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181ce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181d1:	74 4d                	je     c0018220 <SoundPort::buffer16(short*, int)+0x84>
c00181d3:	31 f6                	xor    esi,esi
c00181d5:	eb 21                	jmp    c00181f8 <SoundPort::buffer16(short*, int)+0x5c>
c00181d7:	90                   	nop
c00181d8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181dd:	8d 79 01             	lea    edi,[ecx+0x1]
c00181e0:	c1 e3 0f             	shl    ebx,0xf
c00181e3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181e6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181e9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00181ec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181f2:	74 1c                	je     c0018210 <SoundPort::buffer16(short*, int)+0x74>
c00181f4:	89 c6                	mov    esi,eax
c00181f6:	66 90                	xchg   ax,ax
c00181f8:	8d 46 01             	lea    eax,[esi+0x1]
c00181fb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181ff:	75 d7                	jne    c00181d8 <SoundPort::buffer16(short*, int)+0x3c>
c0018201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018205:	8d 76 00             	lea    esi,[esi+0x0]
c0018208:	5b                   	pop    ebx
c0018209:	5e                   	pop    esi
c001820a:	5f                   	pop    edi
c001820b:	5d                   	pop    ebp
c001820c:	c3                   	ret    
c001820d:	8d 76 00             	lea    esi,[esi+0x0]
c0018210:	5b                   	pop    ebx
c0018211:	8d 46 02             	lea    eax,[esi+0x2]
c0018214:	5e                   	pop    esi
c0018215:	5f                   	pop    edi
c0018216:	5d                   	pop    ebp
c0018217:	c3                   	ret    
c0018218:	5b                   	pop    ebx
c0018219:	31 c0                	xor    eax,eax
c001821b:	5e                   	pop    esi
c001821c:	5f                   	pop    edi
c001821d:	5d                   	pop    ebp
c001821e:	c3                   	ret    
c001821f:	90                   	nop
c0018220:	b8 01 00 00 00       	mov    eax,0x1
c0018225:	eb e1                	jmp    c0018208 <SoundPort::buffer16(short*, int)+0x6c>
c0018227:	90                   	nop

c0018228 <SoundPort::buffer32(int*, int)>:
c0018228:	55                   	push   ebp
c0018229:	57                   	push   edi
c001822a:	56                   	push   esi
c001822b:	53                   	push   ebx
c001822c:	51                   	push   ecx
c001822d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018235:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018238:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001823c:	89 04 24             	mov    DWORD PTR [esp],eax
c001823f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018242:	74 5c                	je     c00182a0 <SoundPort::buffer32(int*, int)+0x78>
c0018244:	85 c0                	test   eax,eax
c0018246:	7e 58                	jle    c00182a0 <SoundPort::buffer32(int*, int)+0x78>
c0018248:	8d 71 01             	lea    esi,[ecx+0x1]
c001824b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001824e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018251:	8b 37                	mov    esi,DWORD PTR [edi]
c0018253:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018256:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018259:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001825c:	74 4a                	je     c00182a8 <SoundPort::buffer32(int*, int)+0x80>
c001825e:	31 f6                	xor    esi,esi
c0018260:	eb 1e                	jmp    c0018280 <SoundPort::buffer32(int*, int)+0x58>
c0018262:	66 90                	xchg   ax,ax
c0018264:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018267:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001826a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001826d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018270:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018274:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018277:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001827a:	74 18                	je     c0018294 <SoundPort::buffer32(int*, int)+0x6c>
c001827c:	89 de                	mov    esi,ebx
c001827e:	66 90                	xchg   ax,ax
c0018280:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018283:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018286:	75 dc                	jne    c0018264 <SoundPort::buffer32(int*, int)+0x3c>
c0018288:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001828b:	90                   	nop
c001828c:	5a                   	pop    edx
c001828d:	5b                   	pop    ebx
c001828e:	5e                   	pop    esi
c001828f:	5f                   	pop    edi
c0018290:	5d                   	pop    ebp
c0018291:	c3                   	ret    
c0018292:	66 90                	xchg   ax,ax
c0018294:	5a                   	pop    edx
c0018295:	8d 46 02             	lea    eax,[esi+0x2]
c0018298:	5b                   	pop    ebx
c0018299:	5e                   	pop    esi
c001829a:	5f                   	pop    edi
c001829b:	5d                   	pop    ebp
c001829c:	c3                   	ret    
c001829d:	8d 76 00             	lea    esi,[esi+0x0]
c00182a0:	5a                   	pop    edx
c00182a1:	31 c0                	xor    eax,eax
c00182a3:	5b                   	pop    ebx
c00182a4:	5e                   	pop    esi
c00182a5:	5f                   	pop    edi
c00182a6:	5d                   	pop    ebp
c00182a7:	c3                   	ret    
c00182a8:	b8 01 00 00 00       	mov    eax,0x1
c00182ad:	eb dd                	jmp    c001828c <SoundPort::buffer32(int*, int)+0x64>
c00182af:	90                   	nop

c00182b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00182b0:	57                   	push   edi
c00182b1:	56                   	push   esi
c00182b2:	53                   	push   ebx
c00182b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00182b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00182bb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00182c1:	39 03                	cmp    DWORD PTR [ebx],eax
c00182c3:	74 13                	je     c00182d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182c5:	83 ec 0c             	sub    esp,0xc
c00182c8:	68 ec f1 01 c0       	push   0xc001f1ec
c00182cd:	e8 e1 7e ff ff       	call   c00101b3 <KePanic(char const*)>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	8d 76 00             	lea    esi,[esi+0x0]
c00182d8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182de:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182e1:	74 11                	je     c00182f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182e3:	83 ec 0c             	sub    esp,0xc
c00182e6:	68 2b f2 01 c0       	push   0xc001f22b
c00182eb:	e8 c3 7e ff ff       	call   c00101b3 <KePanic(char const*)>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	90                   	nop
c00182f4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182fa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182fd:	74 11                	je     c0018310 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182ff:	83 ec 0c             	sub    esp,0xc
c0018302:	68 2b f2 01 c0       	push   0xc001f22b
c0018307:	e8 a7 7e ff ff       	call   c00101b3 <KePanic(char const*)>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	90                   	nop
c0018310:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018313:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018317:	7e 07                	jle    c0018320 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018319:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001831d:	8d 76 00             	lea    esi,[esi+0x0]
c0018320:	85 f6                	test   esi,esi
c0018322:	7e 2c                	jle    c0018350 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018324:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018328:	8d 3c 36             	lea    edi,[esi+esi*1]
c001832b:	31 c9                	xor    ecx,ecx
c001832d:	01 d7                	add    edi,edx
c001832f:	90                   	nop
c0018330:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018333:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018336:	85 c0                	test   eax,eax
c0018338:	79 06                	jns    c0018340 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001833a:	05 ff 7f 00 00       	add    eax,0x7fff
c001833f:	90                   	nop
c0018340:	c1 f8 0f             	sar    eax,0xf
c0018343:	83 c1 04             	add    ecx,0x4
c0018346:	66 01 02             	add    WORD PTR [edx],ax
c0018349:	83 c2 02             	add    edx,0x2
c001834c:	39 d7                	cmp    edi,edx
c001834e:	75 e0                	jne    c0018330 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018350:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018353:	50                   	push   eax
c0018354:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018357:	29 f0                	sub    eax,esi
c0018359:	c1 e0 02             	shl    eax,0x2
c001835c:	50                   	push   eax
c001835d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018360:	50                   	push   eax
c0018361:	52                   	push   edx
c0018362:	e8 79 80 fe ff       	call   c00003e0 <memmove>
c0018367:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	89 f0                	mov    eax,esi
c001836f:	5b                   	pop    ebx
c0018370:	5e                   	pop    esi
c0018371:	5f                   	pop    edi
c0018372:	c3                   	ret    
c0018373:	90                   	nop

c0018374 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018374:	57                   	push   edi
c0018375:	56                   	push   esi
c0018376:	53                   	push   ebx
c0018377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001837b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001837f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018383:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018389:	39 06                	cmp    DWORD PTR [esi],eax
c001838b:	74 13                	je     c00183a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001838d:	83 ec 0c             	sub    esp,0xc
c0018390:	68 0c f2 01 c0       	push   0xc001f20c
c0018395:	e8 19 7e ff ff       	call   c00101b3 <KePanic(char const*)>
c001839a:	83 c4 10             	add    esp,0x10
c001839d:	8d 76 00             	lea    esi,[esi+0x0]
c00183a0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00183a6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183a9:	74 11                	je     c00183bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183ab:	83 ec 0c             	sub    esp,0xc
c00183ae:	68 47 f2 01 c0       	push   0xc001f247
c00183b3:	e8 fb 7d ff ff       	call   c00101b3 <KePanic(char const*)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	90                   	nop
c00183bc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00183c2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183c5:	74 11                	je     c00183d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183c7:	83 ec 0c             	sub    esp,0xc
c00183ca:	68 47 f2 01 c0       	push   0xc001f247
c00183cf:	e8 df 7d ff ff       	call   c00101b3 <KePanic(char const*)>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	90                   	nop
c00183d8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183db:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183df:	7e 07                	jle    c00183e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]
c00183e8:	85 ff                	test   edi,edi
c00183ea:	7e 1c                	jle    c0018408 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00183ec:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183f3:	31 c0                	xor    eax,eax
c00183f5:	8d 76 00             	lea    esi,[esi+0x0]
c00183f8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183fb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183fe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018401:	83 c0 04             	add    eax,0x4
c0018404:	39 c1                	cmp    ecx,eax
c0018406:	75 f0                	jne    c00183f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018408:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001840b:	50                   	push   eax
c001840c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001840f:	29 f8                	sub    eax,edi
c0018411:	c1 e0 02             	shl    eax,0x2
c0018414:	50                   	push   eax
c0018415:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018418:	50                   	push   eax
c0018419:	52                   	push   edx
c001841a:	e8 c1 7f fe ff       	call   c00003e0 <memmove>
c001841f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018422:	83 c4 10             	add    esp,0x10
c0018425:	89 f8                	mov    eax,edi
c0018427:	5b                   	pop    ebx
c0018428:	5e                   	pop    esi
c0018429:	5f                   	pop    edi
c001842a:	c3                   	ret    
c001842b:	90                   	nop

c001842c <PCI::open(int, int, void*)>:
c001842c:	83 ec 18             	sub    esp,0x18
c001842f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018433:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018437:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001843d:	8b 10                	mov    edx,DWORD PTR [eax]
c001843f:	50                   	push   eax
c0018440:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018443:	31 c0                	xor    eax,eax
c0018445:	83 c4 1c             	add    esp,0x1c
c0018448:	c3                   	ret    
c0018449:	90                   	nop

c001844a <PCI::close(int, int, void*)>:
c001844a:	31 c0                	xor    eax,eax
c001844c:	c3                   	ret    
c001844d:	90                   	nop

c001844e <PCI::PCI()>:
c001844e:	83 ec 0c             	sub    esp,0xc
c0018451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018455:	83 ec 08             	sub    esp,0x8
c0018458:	68 63 f2 01 c0       	push   0xc001f263
c001845d:	50                   	push   eax
c001845e:	e8 61 2e ff ff       	call   c000b2c4 <Bus::Bus(char const*)>
c0018463:	83 c4 10             	add    esp,0x10
c0018466:	ba 0c f3 01 c0       	mov    edx,0xc001f30c
c001846b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846f:	89 10                	mov    DWORD PTR [eax],edx
c0018471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018475:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001847f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018483:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001848c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018492:	31 d2                	xor    edx,edx
c0018494:	88 c2                	mov    dl,al
c0018496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00184a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184ab:	31 d2                	xor    edx,edx
c00184ad:	88 c2                	mov    dl,al
c00184af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00184b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184c2:	8d 50 01             	lea    edx,[eax+0x1]
c00184c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184c9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184cf:	31 d2                	xor    edx,edx
c00184d1:	88 c2                	mov    dl,al
c00184d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184db:	83 c9 c0             	or     ecx,0xffffffc0
c00184de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184e2:	90                   	nop
c00184e3:	83 c4 0c             	add    esp,0xc
c00184e6:	c3                   	ret    
c00184e7:	90                   	nop

c00184e8 <PCI::readBAR8(unsigned int, int)>:
c00184e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184f0:	f6 c2 01             	test   dl,0x1
c00184f3:	74 07                	je     c00184fc <PCI::readBAR8(unsigned int, int)+0x14>
c00184f5:	83 e2 fc             	and    edx,0xfffffffc
c00184f8:	01 c2                	add    edx,eax
c00184fa:	ec                   	in     al,dx
c00184fb:	c3                   	ret    
c00184fc:	83 e2 f0             	and    edx,0xfffffff0
c00184ff:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018502:	c3                   	ret    
c0018503:	90                   	nop

c0018504 <PCI::readBAR16(unsigned int, int)>:
c0018504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001850c:	f6 c2 01             	test   dl,0x1
c001850f:	74 08                	je     c0018519 <PCI::readBAR16(unsigned int, int)+0x15>
c0018511:	83 e2 fc             	and    edx,0xfffffffc
c0018514:	01 c2                	add    edx,eax
c0018516:	66 ed                	in     ax,dx
c0018518:	c3                   	ret    
c0018519:	83 e2 f0             	and    edx,0xfffffff0
c001851c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018520:	c3                   	ret    
c0018521:	90                   	nop

c0018522 <PCI::readBAR32(unsigned int, int)>:
c0018522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001852a:	f6 c2 01             	test   dl,0x1
c001852d:	74 07                	je     c0018536 <PCI::readBAR32(unsigned int, int)+0x14>
c001852f:	83 e2 fc             	and    edx,0xfffffffc
c0018532:	01 c2                	add    edx,eax
c0018534:	ed                   	in     eax,dx
c0018535:	c3                   	ret    
c0018536:	83 e2 f0             	and    edx,0xfffffff0
c0018539:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001853c:	c3                   	ret    
c001853d:	90                   	nop

c001853e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001853e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018546:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001854a:	f6 c2 01             	test   dl,0x1
c001854d:	74 07                	je     c0018556 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001854f:	83 e2 fc             	and    edx,0xfffffffc
c0018552:	01 ca                	add    edx,ecx
c0018554:	ee                   	out    dx,al
c0018555:	c3                   	ret    
c0018556:	83 e2 f0             	and    edx,0xfffffff0
c0018559:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001855c:	c3                   	ret    
c001855d:	90                   	nop

c001855e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001855e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018566:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001856a:	f6 c2 01             	test   dl,0x1
c001856d:	74 08                	je     c0018577 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001856f:	83 e2 fc             	and    edx,0xfffffffc
c0018572:	01 ca                	add    edx,ecx
c0018574:	66 ef                	out    dx,ax
c0018576:	c3                   	ret    
c0018577:	83 e2 f0             	and    edx,0xfffffff0
c001857a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001857e:	c3                   	ret    
c001857f:	90                   	nop

c0018580 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018580:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018588:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001858c:	f6 c2 01             	test   dl,0x1
c001858f:	74 07                	je     c0018598 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018591:	83 e2 fc             	and    edx,0xfffffffc
c0018594:	01 ca                	add    edx,ecx
c0018596:	ef                   	out    dx,eax
c0018597:	c3                   	ret    
c0018598:	83 e2 f0             	and    edx,0xfffffff0
c001859b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001859e:	c3                   	ret    
c001859f:	90                   	nop

c00185a0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185a0:	55                   	push   ebp
c00185a1:	57                   	push   edi
c00185a2:	56                   	push   esi
c00185a3:	53                   	push   ebx
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185ab:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00185af:	89 f0                	mov    eax,esi
c00185b1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00185b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185b9:	3c 07                	cmp    al,0x7
c00185bb:	76 10                	jbe    c00185cd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	68 6b f2 01 c0       	push   0xc001f26b
c00185c5:	e8 e9 7b ff ff       	call   c00101b3 <KePanic(char const*)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	80 fb 0f             	cmp    bl,0xf
c00185d0:	76 10                	jbe    c00185e2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185d2:	83 ec 0c             	sub    esp,0xc
c00185d5:	68 9b f2 01 c0       	push   0xc001f29b
c00185da:	e8 d4 7b ff ff       	call   c00101b3 <KePanic(char const*)>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	8d 04 36             	lea    eax,[esi+esi*1]
c00185e5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185ea:	83 c8 f0             	or     eax,0xfffffff0
c00185ed:	ee                   	out    dx,al
c00185ee:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185f3:	89 e8                	mov    eax,ebp
c00185f5:	ee                   	out    dx,al
c00185f6:	83 c4 0c             	add    esp,0xc
c00185f9:	89 d8                	mov    eax,ebx
c00185fb:	66 81 e7 fc 00       	and    di,0xfc
c0018600:	5b                   	pop    ebx
c0018601:	c1 e0 08             	shl    eax,0x8
c0018604:	5e                   	pop    esi
c0018605:	09 f8                	or     eax,edi
c0018607:	5f                   	pop    edi
c0018608:	66 0d 00 c0          	or     ax,0xc000
c001860c:	5d                   	pop    ebp
c001860d:	c3                   	ret    

c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001860e:	57                   	push   edi
c001860f:	56                   	push   esi
c0018610:	53                   	push   ebx
c0018611:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018619:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001861f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018623:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018627:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001862b:	83 ff 01             	cmp    edi,0x1
c001862e:	75 3e                	jne    c001866e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018630:	89 de                	mov    esi,ebx
c0018632:	0f b6 c0             	movzx  eax,al
c0018635:	81 e6 fc 00 00 00    	and    esi,0xfc
c001863b:	c1 e0 10             	shl    eax,0x10
c001863e:	0f b6 c9             	movzx  ecx,cl
c0018641:	09 f0                	or     eax,esi
c0018643:	c1 e1 08             	shl    ecx,0x8
c0018646:	0f b6 d2             	movzx  edx,dl
c0018649:	09 c8                	or     eax,ecx
c001864b:	c1 e2 0b             	shl    edx,0xb
c001864e:	09 d0                	or     eax,edx
c0018650:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018655:	0d 00 00 00 80       	or     eax,0x80000000
c001865a:	ef                   	out    dx,eax
c001865b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018660:	ed                   	in     eax,dx
c0018661:	83 e3 02             	and    ebx,0x2
c0018664:	0f b6 cb             	movzx  ecx,bl
c0018667:	c1 e1 03             	shl    ecx,0x3
c001866a:	d3 e8                	shr    eax,cl
c001866c:	eb 43                	jmp    c00186b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001866e:	83 ff 02             	cmp    edi,0x2
c0018671:	75 2c                	jne    c001869f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018673:	83 ec 0c             	sub    esp,0xc
c0018676:	0f b6 c9             	movzx  ecx,cl
c0018679:	0f b6 d2             	movzx  edx,dl
c001867c:	0f b6 fb             	movzx  edi,bl
c001867f:	0f b6 c0             	movzx  eax,al
c0018682:	57                   	push   edi
c0018683:	51                   	push   ecx
c0018684:	52                   	push   edx
c0018685:	50                   	push   eax
c0018686:	56                   	push   esi
c0018687:	e8 14 ff ff ff       	call   c00185a0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001868c:	89 c2                	mov    edx,eax
c001868e:	ed                   	in     eax,dx
c001868f:	83 e3 02             	and    ebx,0x2
c0018692:	83 c4 20             	add    esp,0x20
c0018695:	0f b6 cb             	movzx  ecx,bl
c0018698:	c1 e1 03             	shl    ecx,0x3
c001869b:	d3 e8                	shr    eax,cl
c001869d:	eb 12                	jmp    c00186b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001869f:	83 ec 0c             	sub    esp,0xc
c00186a2:	68 cb f2 01 c0       	push   0xc001f2cb
c00186a7:	e8 07 7b ff ff       	call   c00101b3 <KePanic(char const*)>
c00186ac:	83 c4 10             	add    esp,0x10
c00186af:	31 c0                	xor    eax,eax
c00186b1:	5b                   	pop    ebx
c00186b2:	5e                   	pop    esi
c00186b3:	5f                   	pop    edi
c00186b4:	c3                   	ret    
c00186b5:	90                   	nop

c00186b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00186b6:	83 ec 18             	sub    esp,0x18
c00186b9:	6a 00                	push   0x0
c00186bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c0:	50                   	push   eax
c00186c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c6:	50                   	push   eax
c00186c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186cc:	50                   	push   eax
c00186cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186d1:	e8 38 ff ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186d6:	83 c4 2c             	add    esp,0x2c
c00186d9:	c3                   	ret    

c00186da <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186da:	83 ec 18             	sub    esp,0x18
c00186dd:	6a 0e                	push   0xe
c00186df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e4:	50                   	push   eax
c00186e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186ea:	50                   	push   eax
c00186eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186f0:	50                   	push   eax
c00186f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f5:	e8 14 ff ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186fa:	83 c4 2c             	add    esp,0x2c
c00186fd:	0f b6 c0             	movzx  eax,al
c0018700:	c3                   	ret    
c0018701:	90                   	nop

c0018702 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018702:	55                   	push   ebp
c0018703:	57                   	push   edi
c0018704:	56                   	push   esi
c0018705:	53                   	push   ebx
c0018706:	83 ec 18             	sub    esp,0x18
c0018709:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001870e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018713:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018718:	6a 0a                	push   0xa
c001871a:	56                   	push   esi
c001871b:	55                   	push   ebp
c001871c:	57                   	push   edi
c001871d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018721:	e8 e8 fe ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018726:	83 c4 14             	add    esp,0x14
c0018729:	89 c3                	mov    ebx,eax
c001872b:	6a 0a                	push   0xa
c001872d:	0f b6 db             	movzx  ebx,bl
c0018730:	56                   	push   esi
c0018731:	55                   	push   ebp
c0018732:	57                   	push   edi
c0018733:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018737:	e8 d2 fe ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001873c:	83 c4 2c             	add    esp,0x2c
c001873f:	25 00 ff 00 00       	and    eax,0xff00
c0018744:	09 d8                	or     eax,ebx
c0018746:	5b                   	pop    ebx
c0018747:	5e                   	pop    esi
c0018748:	5f                   	pop    edi
c0018749:	5d                   	pop    ebp
c001874a:	c3                   	ret    
c001874b:	90                   	nop

c001874c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001874c:	83 ec 18             	sub    esp,0x18
c001874f:	6a 08                	push   0x8
c0018751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018756:	50                   	push   eax
c0018757:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875c:	50                   	push   eax
c001875d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018762:	50                   	push   eax
c0018763:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018767:	e8 a2 fe ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001876c:	83 c4 2c             	add    esp,0x2c
c001876f:	0f b6 c4             	movzx  eax,ah
c0018772:	c3                   	ret    
c0018773:	90                   	nop

c0018774 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018774:	83 ec 18             	sub    esp,0x18
c0018777:	6a 08                	push   0x8
c0018779:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877e:	50                   	push   eax
c001877f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018784:	50                   	push   eax
c0018785:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001878a:	50                   	push   eax
c001878b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878f:	e8 7a fe ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018794:	83 c4 2c             	add    esp,0x2c
c0018797:	c3                   	ret    

c0018798 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018798:	83 ec 18             	sub    esp,0x18
c001879b:	6a 3c                	push   0x3c
c001879d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a2:	50                   	push   eax
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ae:	50                   	push   eax
c00187af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b3:	e8 56 fe ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b8:	83 c4 2c             	add    esp,0x2c
c00187bb:	c3                   	ret    

c00187bc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00187bc:	83 ec 18             	sub    esp,0x18
c00187bf:	6a 18                	push   0x18
c00187c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c6:	50                   	push   eax
c00187c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187cc:	50                   	push   eax
c00187cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d2:	50                   	push   eax
c00187d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d7:	e8 32 fe ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187dc:	83 c4 2c             	add    esp,0x2c
c00187df:	0f b6 c4             	movzx  eax,ah
c00187e2:	c3                   	ret    
c00187e3:	90                   	nop

c00187e4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187e4:	55                   	push   ebp
c00187e5:	57                   	push   edi
c00187e6:	56                   	push   esi
c00187e7:	53                   	push   ebx
c00187e8:	83 ec 28             	sub    esp,0x28
c00187eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00187ef:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187f4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187f9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187fe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018805:	8d 43 12             	lea    eax,[ebx+0x12]
c0018808:	83 c3 10             	add    ebx,0x10
c001880b:	0f b6 c0             	movzx  eax,al
c001880e:	0f b6 db             	movzx  ebx,bl
c0018811:	50                   	push   eax
c0018812:	51                   	push   ecx
c0018813:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018817:	57                   	push   edi
c0018818:	55                   	push   ebp
c0018819:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001881d:	e8 ec fd ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018822:	83 c4 14             	add    esp,0x14
c0018825:	89 c6                	mov    esi,eax
c0018827:	53                   	push   ebx
c0018828:	c1 e6 10             	shl    esi,0x10
c001882b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001882f:	51                   	push   ecx
c0018830:	57                   	push   edi
c0018831:	55                   	push   ebp
c0018832:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018836:	e8 d3 fd ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001883b:	83 c4 3c             	add    esp,0x3c
c001883e:	0f b7 c0             	movzx  eax,ax
c0018841:	5b                   	pop    ebx
c0018842:	09 f0                	or     eax,esi
c0018844:	5e                   	pop    esi
c0018845:	5f                   	pop    edi
c0018846:	5d                   	pop    ebp
c0018847:	c3                   	ret    

c0018848 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018848:	55                   	push   ebp
c0018849:	57                   	push   edi
c001884a:	56                   	push   esi
c001884b:	53                   	push   ebx
c001884c:	83 ec 0c             	sub    esp,0xc
c001884f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018853:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018857:	89 f5                	mov    ebp,esi
c0018859:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001885f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018863:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018867:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001886b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001886f:	83 f9 01             	cmp    ecx,0x1
c0018872:	75 5d                	jne    c00188d1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018874:	0f b6 c8             	movzx  ecx,al
c0018877:	0f b6 d2             	movzx  edx,dl
c001887a:	c1 e1 10             	shl    ecx,0x10
c001887d:	c1 e2 0b             	shl    edx,0xb
c0018880:	89 f0                	mov    eax,esi
c0018882:	25 fc 00 00 00       	and    eax,0xfc
c0018887:	09 c1                	or     ecx,eax
c0018889:	89 e8                	mov    eax,ebp
c001888b:	0f b6 c0             	movzx  eax,al
c001888e:	c1 e0 08             	shl    eax,0x8
c0018891:	09 c1                	or     ecx,eax
c0018893:	09 d1                	or     ecx,edx
c0018895:	ba f8 0c 00 00       	mov    edx,0xcf8
c001889a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00188a0:	89 c8                	mov    eax,ecx
c00188a2:	ef                   	out    dx,eax
c00188a3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188a8:	ed                   	in     eax,dx
c00188a9:	0f b7 db             	movzx  ebx,bx
c00188ac:	83 e6 02             	and    esi,0x2
c00188af:	74 0a                	je     c00188bb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00188b1:	0f b7 d0             	movzx  edx,ax
c00188b4:	c1 e3 10             	shl    ebx,0x10
c00188b7:	09 d3                	or     ebx,edx
c00188b9:	eb 05                	jmp    c00188c0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00188bb:	66 31 c0             	xor    ax,ax
c00188be:	09 c3                	or     ebx,eax
c00188c0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188c5:	89 c8                	mov    eax,ecx
c00188c7:	ef                   	out    dx,eax
c00188c8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188cd:	89 d8                	mov    eax,ebx
c00188cf:	eb 41                	jmp    c0018912 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188d1:	83 f9 02             	cmp    ecx,0x2
c00188d4:	75 45                	jne    c001891b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188d6:	83 ec 0c             	sub    esp,0xc
c00188d9:	0f b6 d2             	movzx  edx,dl
c00188dc:	89 f1                	mov    ecx,esi
c00188de:	0f b6 c0             	movzx  eax,al
c00188e1:	0f b6 f1             	movzx  esi,cl
c00188e4:	89 e9                	mov    ecx,ebp
c00188e6:	56                   	push   esi
c00188e7:	0f b6 c9             	movzx  ecx,cl
c00188ea:	51                   	push   ecx
c00188eb:	52                   	push   edx
c00188ec:	50                   	push   eax
c00188ed:	57                   	push   edi
c00188ee:	e8 ad fc ff ff       	call   c00185a0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f3:	89 c2                	mov    edx,eax
c00188f5:	ed                   	in     eax,dx
c00188f6:	83 c4 20             	add    esp,0x20
c00188f9:	0f b7 db             	movzx  ebx,bx
c00188fc:	f6 c2 02             	test   dl,0x2
c00188ff:	74 0c                	je     c001890d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018901:	0f b7 c8             	movzx  ecx,ax
c0018904:	89 d8                	mov    eax,ebx
c0018906:	c1 e0 10             	shl    eax,0x10
c0018909:	09 c8                	or     eax,ecx
c001890b:	eb 05                	jmp    c0018912 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001890d:	66 31 c0             	xor    ax,ax
c0018910:	09 d8                	or     eax,ebx
c0018912:	ef                   	out    dx,eax
c0018913:	83 c4 0c             	add    esp,0xc
c0018916:	5b                   	pop    ebx
c0018917:	5e                   	pop    esi
c0018918:	5f                   	pop    edi
c0018919:	5d                   	pop    ebp
c001891a:	c3                   	ret    
c001891b:	c7 44 24 20 cb f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f2cb
c0018923:	83 c4 0c             	add    esp,0xc
c0018926:	5b                   	pop    ebx
c0018927:	5e                   	pop    esi
c0018928:	5f                   	pop    edi
c0018929:	5d                   	pop    ebp
c001892a:	e9 84 78 ff ff       	jmp    c00101b3 <KePanic(char const*)>
c001892f:	90                   	nop

c0018930 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018930:	55                   	push   ebp
c0018931:	57                   	push   edi
c0018932:	56                   	push   esi
c0018933:	53                   	push   ebx
c0018934:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001893a:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018941:	0f 85 84 00 00 00    	jne    c00189cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018947:	83 ec 0c             	sub    esp,0xc
c001894a:	68 14 01 00 00       	push   0x114
c001894f:	e8 65 ee fe ff       	call   c00077b9 <malloc>
c0018954:	83 c4 0c             	add    esp,0xc
c0018957:	89 c3                	mov    ebx,eax
c0018959:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001895f:	68 d1 f2 01 c0       	push   0xc001f2d1
c0018964:	50                   	push   eax
c0018965:	e8 3c 21 ff ff       	call   c000aaa6 <File::File(char const*, Process*)>
c001896a:	5a                   	pop    edx
c001896b:	59                   	pop    ecx
c001896c:	6a 01                	push   0x1
c001896e:	53                   	push   ebx
c001896f:	e8 f2 21 ff ff       	call   c000ab66 <File::open(FileOpenMode)>
c0018974:	83 c4 0c             	add    esp,0xc
c0018977:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001897b:	50                   	push   eax
c001897c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018980:	50                   	push   eax
c0018981:	53                   	push   ebx
c0018982:	e8 8b 24 ff ff       	call   c000ae12 <File::stat(unsigned long long*, bool*)>
c0018987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001898b:	40                   	inc    eax
c001898c:	89 04 24             	mov    DWORD PTR [esp],eax
c001898f:	e8 25 ee fe ff       	call   c00077b9 <malloc>
c0018994:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018998:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c001899d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00189a1:	5e                   	pop    esi
c00189a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00189a4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189a8:	51                   	push   ecx
c00189a9:	50                   	push   eax
c00189aa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189ae:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189b2:	53                   	push   ebx
c00189b3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00189b6:	83 c4 14             	add    esp,0x14
c00189b9:	53                   	push   ebx
c00189ba:	e8 05 22 ff ff       	call   c000abc4 <File::close()>
c00189bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c00189cb:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c00189d0:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c00189d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00189d9:	31 ff                	xor    edi,edi
c00189db:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189e3:	31 f6                	xor    esi,esi
c00189e5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189ea:	31 db                	xor    ebx,ebx
c00189ec:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189f4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189f9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a00:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a04:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a0f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a12:	0f 8e 6b 01 00 00    	jle    c0018b83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a18:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a1b:	d4 40                	aam    0x40
c0018a1d:	d5 39                	aad    0x39
c0018a1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a23:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a27:	d4 40                	aam    0x40
c0018a29:	d5 39                	aad    0x39
c0018a2b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a2f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a33:	d4 40                	aam    0x40
c0018a35:	d5 39                	aad    0x39
c0018a37:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a3b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a3f:	d4 40                	aam    0x40
c0018a41:	d5 39                	aad    0x39
c0018a43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a47:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a4b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a4f:	3c 56                	cmp    al,0x56
c0018a51:	74 45                	je     c0018a98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a53:	d4 40                	aam    0x40
c0018a55:	d5 39                	aad    0x39
c0018a57:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a5a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a5e:	0f b6 c9             	movzx  ecx,cl
c0018a61:	c1 e1 04             	shl    ecx,0x4
c0018a64:	d4 40                	aam    0x40
c0018a66:	d5 39                	aad    0x39
c0018a68:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a6b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a6f:	0f b6 db             	movzx  ebx,bl
c0018a72:	09 cb                	or     ebx,ecx
c0018a74:	c1 e3 04             	shl    ebx,0x4
c0018a77:	d4 40                	aam    0x40
c0018a79:	d5 39                	aad    0x39
c0018a7b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a7e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a82:	0f b6 c9             	movzx  ecx,cl
c0018a85:	09 cb                	or     ebx,ecx
c0018a87:	c1 e3 04             	shl    ebx,0x4
c0018a8a:	89 d9                	mov    ecx,ebx
c0018a8c:	d4 40                	aam    0x40
c0018a8e:	d5 39                	aad    0x39
c0018a90:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a93:	0f b6 db             	movzx  ebx,bl
c0018a96:	09 cb                	or     ebx,ecx
c0018a98:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a9c:	80 f9 44             	cmp    cl,0x44
c0018a9f:	74 47                	je     c0018ae8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018aa1:	88 c8                	mov    al,cl
c0018aa3:	d4 40                	aam    0x40
c0018aa5:	d5 39                	aad    0x39
c0018aa7:	83 e8 30             	sub    eax,0x30
c0018aaa:	0f b6 e8             	movzx  ebp,al
c0018aad:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018ab1:	c1 e5 04             	shl    ebp,0x4
c0018ab4:	d4 40                	aam    0x40
c0018ab6:	d5 39                	aad    0x39
c0018ab8:	83 e8 30             	sub    eax,0x30
c0018abb:	0f b6 f0             	movzx  esi,al
c0018abe:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018ac2:	09 ee                	or     esi,ebp
c0018ac4:	c1 e6 04             	shl    esi,0x4
c0018ac7:	d4 40                	aam    0x40
c0018ac9:	d5 39                	aad    0x39
c0018acb:	83 e8 30             	sub    eax,0x30
c0018ace:	0f b6 e8             	movzx  ebp,al
c0018ad1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ad5:	09 ee                	or     esi,ebp
c0018ad7:	c1 e6 04             	shl    esi,0x4
c0018ada:	89 f5                	mov    ebp,esi
c0018adc:	d4 40                	aam    0x40
c0018ade:	d5 39                	aad    0x39
c0018ae0:	83 e8 30             	sub    eax,0x30
c0018ae3:	0f b6 f0             	movzx  esi,al
c0018ae6:	09 ee                	or     esi,ebp
c0018ae8:	83 c7 10             	add    edi,0x10
c0018aeb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018aef:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018af2:	3c 0a                	cmp    al,0xa
c0018af4:	74 09                	je     c0018aff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018af6:	45                   	inc    ebp
c0018af7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018afa:	75 16                	jne    c0018b12 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018afc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018aff:	3c 0a                	cmp    al,0xa
c0018b01:	0f 94 c0             	sete   al
c0018b04:	0f b6 c0             	movzx  eax,al
c0018b07:	01 c7                	add    edi,eax
c0018b09:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b0e:	75 0c                	jne    c0018b1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b10:	eb 15                	jmp    c0018b27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b12:	47                   	inc    edi
c0018b13:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b16:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b1a:	eb d3                	jmp    c0018aef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b1c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b21:	0f 85 e8 fe ff ff    	jne    c0018a0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b27:	80 f9 44             	cmp    cl,0x44
c0018b2a:	74 0b                	je     c0018b37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b2c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b31:	0f 85 d8 fe ff ff    	jne    c0018a0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b37:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b3b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b3f:	c1 e1 04             	shl    ecx,0x4
c0018b42:	83 e8 30             	sub    eax,0x30
c0018b45:	09 c8                	or     eax,ecx
c0018b47:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b4b:	0f 85 be fe ff ff    	jne    c0018a0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b51:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b59:	c1 e1 04             	shl    ecx,0x4
c0018b5c:	83 e8 30             	sub    eax,0x30
c0018b5f:	09 c8                	or     eax,ecx
c0018b61:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b65:	0f 85 a4 fe ff ff    	jne    c0018a0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b6b:	50                   	push   eax
c0018b6c:	50                   	push   eax
c0018b6d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b71:	50                   	push   eax
c0018b72:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b79:	e8 82 7a fe ff       	call   c0000600 <strcpy>
c0018b7e:	83 c4 10             	add    esp,0x10
c0018b81:	eb 15                	jmp    c0018b98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b83:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b8a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b95:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b98:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b9f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ba5:	5b                   	pop    ebx
c0018ba6:	5e                   	pop    esi
c0018ba7:	5f                   	pop    edi
c0018ba8:	5d                   	pop    ebp
c0018ba9:	c3                   	ret    

c0018baa <PCI::checkBus(unsigned char)>:
c0018baa:	56                   	push   esi
c0018bab:	53                   	push   ebx
c0018bac:	31 f6                	xor    esi,esi
c0018bae:	51                   	push   ecx
c0018baf:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018bb3:	0f b6 c3             	movzx  eax,bl
c0018bb6:	52                   	push   edx
c0018bb7:	56                   	push   esi
c0018bb8:	46                   	inc    esi
c0018bb9:	50                   	push   eax
c0018bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bbe:	e8 f3 02 00 00       	call   c0018eb6 <PCI::checkDevice(unsigned char, unsigned char)>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	83 fe 20             	cmp    esi,0x20
c0018bc9:	75 e8                	jne    c0018bb3 <PCI::checkBus(unsigned char)+0x9>
c0018bcb:	58                   	pop    eax
c0018bcc:	5b                   	pop    ebx
c0018bcd:	5e                   	pop    esi
c0018bce:	c3                   	ret    
c0018bcf:	90                   	nop

c0018bd0 <PCI::foundDevice(PCIDeviceInfo)>:
c0018bd0:	55                   	push   ebp
c0018bd1:	57                   	push   edi
c0018bd2:	56                   	push   esi
c0018bd3:	53                   	push   ebx
c0018bd4:	83 ec 1c             	sub    esp,0x1c
c0018bd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bdb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018be1:	0f 84 52 01 00 00    	je     c0018d39 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018be7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018beb:	66 81 f9 06 04       	cmp    cx,0x406
c0018bf0:	75 2c                	jne    c0018c1e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018bf2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018bf7:	50                   	push   eax
c0018bf8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018bfd:	50                   	push   eax
c0018bfe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c03:	50                   	push   eax
c0018c04:	56                   	push   esi
c0018c05:	e8 b2 fb ff ff       	call   c00187bc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c0e:	0f b6 c0             	movzx  eax,al
c0018c11:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c15:	83 c4 2c             	add    esp,0x2c
c0018c18:	5b                   	pop    ebx
c0018c19:	5e                   	pop    esi
c0018c1a:	5f                   	pop    edi
c0018c1b:	5d                   	pop    ebp
c0018c1c:	eb 8c                	jmp    c0018baa <PCI::checkBus(unsigned char)>
c0018c1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c22:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c2c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c30:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c34:	88 d3                	mov    bl,dl
c0018c36:	85 c0                	test   eax,eax
c0018c38:	74 33                	je     c0018c6d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c3a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c3d:	85 d2                	test   edx,edx
c0018c3f:	74 28                	je     c0018c69 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c41:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c47:	31 ef                	xor    edi,ebp
c0018c49:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c4f:	75 18                	jne    c0018c69 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c55:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c5b:	75 0c                	jne    c0018c69 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c5d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c63:	0f 84 d0 00 00 00    	je     c0018d39 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c6b:	eb c9                	jmp    c0018c36 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c6d:	66 81 f9 01 06       	cmp    cx,0x601
c0018c72:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c76:	75 19                	jne    c0018c91 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c78:	83 ec 0c             	sub    esp,0xc
c0018c7b:	68 64 01 00 00       	push   0x164
c0018c80:	e8 34 eb fe ff       	call   c00077b9 <malloc>
c0018c85:	89 c5                	mov    ebp,eax
c0018c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c8a:	e8 47 0e 00 00       	call   c0019ad6 <SATABus::SATABus()>
c0018c8f:	eb 1e                	jmp    c0018caf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c91:	66 81 f9 01 01       	cmp    cx,0x101
c0018c96:	75 60                	jne    c0018cf8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	68 70 02 00 00       	push   0x270
c0018ca0:	e8 14 eb fe ff       	call   c00077b9 <malloc>
c0018ca5:	89 c5                	mov    ebp,eax
c0018ca7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018caa:	e8 cb 02 00 00       	call   c0018f7a <IDE::IDE()>
c0018caf:	58                   	pop    eax
c0018cb0:	5a                   	pop    edx
c0018cb1:	55                   	push   ebp
c0018cb2:	56                   	push   esi
c0018cb3:	e8 b8 2c ff ff       	call   c000b970 <Device::addChild(Device*)>
c0018cb8:	83 ec 1c             	sub    esp,0x1c
c0018cbb:	b9 09 00 00 00       	mov    ecx,0x9
c0018cc0:	fc                   	cld    
c0018cc1:	89 e7                	mov    edi,esp
c0018cc3:	89 de                	mov    esi,ebx
c0018cc5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cc7:	55                   	push   ebp
c0018cc8:	e8 e9 2b ff ff       	call   c000b8b6 <Device::preOpenPCI(PCIDeviceInfo)>
c0018ccd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cd0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018cd4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018cdc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018ce4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018cec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018cef:	83 c4 4c             	add    esp,0x4c
c0018cf2:	5b                   	pop    ebx
c0018cf3:	5e                   	pop    esi
c0018cf4:	5f                   	pop    edi
c0018cf5:	5d                   	pop    ebp
c0018cf6:	ff e0                	jmp    eax
c0018cf8:	83 ec 0c             	sub    esp,0xc
c0018cfb:	68 58 01 00 00       	push   0x158
c0018d00:	e8 b4 ea fe ff       	call   c00077b9 <malloc>
c0018d05:	89 c5                	mov    ebp,eax
c0018d07:	58                   	pop    eax
c0018d08:	5a                   	pop    edx
c0018d09:	68 ea f2 01 c0       	push   0xc001f2ea
c0018d0e:	55                   	push   ebp
c0018d0f:	e8 fa 2e ff ff       	call   c000bc0e <DriverlessDevice::DriverlessDevice(char const*)>
c0018d14:	59                   	pop    ecx
c0018d15:	5f                   	pop    edi
c0018d16:	55                   	push   ebp
c0018d17:	56                   	push   esi
c0018d18:	e8 53 2c ff ff       	call   c000b970 <Device::addChild(Device*)>
c0018d1d:	b9 09 00 00 00       	mov    ecx,0x9
c0018d22:	fc                   	cld    
c0018d23:	89 df                	mov    edi,ebx
c0018d25:	89 de                	mov    esi,ebx
c0018d27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d29:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d2d:	83 c4 2c             	add    esp,0x2c
c0018d30:	5b                   	pop    ebx
c0018d31:	5e                   	pop    esi
c0018d32:	5f                   	pop    edi
c0018d33:	5d                   	pop    ebp
c0018d34:	e9 7d 2b ff ff       	jmp    c000b8b6 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d39:	83 c4 1c             	add    esp,0x1c
c0018d3c:	5b                   	pop    ebx
c0018d3d:	5e                   	pop    esi
c0018d3e:	5f                   	pop    edi
c0018d3f:	5d                   	pop    ebp
c0018d40:	c3                   	ret    
c0018d41:	90                   	nop

c0018d42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d42:	55                   	push   ebp
c0018d43:	57                   	push   edi
c0018d44:	56                   	push   esi
c0018d45:	53                   	push   ebx
c0018d46:	83 ec 68             	sub    esp,0x68
c0018d49:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d5f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d68:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d6f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d78:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d7d:	6a 0c                	push   0xc
c0018d7f:	57                   	push   edi
c0018d80:	53                   	push   ebx
c0018d81:	56                   	push   esi
c0018d82:	55                   	push   ebp
c0018d83:	e8 86 f8 ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d88:	83 c4 20             	add    esp,0x20
c0018d8b:	57                   	push   edi
c0018d8c:	53                   	push   ebx
c0018d8d:	56                   	push   esi
c0018d8e:	55                   	push   ebp
c0018d8f:	e8 6e f9 ff ff       	call   c0018702 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d94:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d99:	57                   	push   edi
c0018d9a:	53                   	push   ebx
c0018d9b:	56                   	push   esi
c0018d9c:	55                   	push   ebp
c0018d9d:	e8 f6 f9 ff ff       	call   c0018798 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018da2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018da6:	83 c4 14             	add    esp,0x14
c0018da9:	6a 3c                	push   0x3c
c0018dab:	57                   	push   edi
c0018dac:	53                   	push   ebx
c0018dad:	56                   	push   esi
c0018dae:	55                   	push   ebp
c0018daf:	e8 5a f8 ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018db4:	0f b6 c4             	movzx  eax,ah
c0018db7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018dbb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018dbf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018dc3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018dc8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018dce:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018dd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018dd8:	83 c4 20             	add    esp,0x20
c0018ddb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018de0:	74 30                	je     c0018e12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018de2:	31 c0                	xor    eax,eax
c0018de4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018de8:	7e 28                	jle    c0018e12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dea:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018df2:	39 cb                	cmp    ebx,ecx
c0018df4:	75 19                	jne    c0018e0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018df6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018dfe:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e02:	75 0b                	jne    c0018e0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e04:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e0b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e0f:	40                   	inc    eax
c0018e10:	eb d2                	jmp    c0018de4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e12:	31 d2                	xor    edx,edx
c0018e14:	83 ec 0c             	sub    esp,0xc
c0018e17:	57                   	push   edi
c0018e18:	53                   	push   ebx
c0018e19:	56                   	push   esi
c0018e1a:	52                   	push   edx
c0018e1b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e1f:	55                   	push   ebp
c0018e20:	e8 bf f9 ff ff       	call   c00187e4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e29:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e2d:	42                   	inc    edx
c0018e2e:	83 c4 20             	add    esp,0x20
c0018e31:	83 fa 06             	cmp    edx,0x6
c0018e34:	75 de                	jne    c0018e14 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e36:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e3b:	83 ec 0c             	sub    esp,0xc
c0018e3e:	86 e0                	xchg   al,ah
c0018e40:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e45:	6a 02                	push   0x2
c0018e47:	57                   	push   edi
c0018e48:	53                   	push   ebx
c0018e49:	56                   	push   esi
c0018e4a:	55                   	push   ebp
c0018e4b:	e8 be f7 ff ff       	call   c001860e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e50:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e55:	83 c4 20             	add    esp,0x20
c0018e58:	57                   	push   edi
c0018e59:	53                   	push   ebx
c0018e5a:	56                   	push   esi
c0018e5b:	55                   	push   ebp
c0018e5c:	e8 eb f8 ff ff       	call   c001874c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e61:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e65:	57                   	push   edi
c0018e66:	53                   	push   ebx
c0018e67:	56                   	push   esi
c0018e68:	55                   	push   ebp
c0018e69:	e8 48 f8 ff ff       	call   c00186b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e6e:	b9 09 00 00 00       	mov    ecx,0x9
c0018e73:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e78:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e7c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e80:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e84:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e88:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e8c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e90:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e94:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e98:	83 ec 0c             	sub    esp,0xc
c0018e9b:	fc                   	cld    
c0018e9c:	89 e7                	mov    edi,esp
c0018e9e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018ea2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ea4:	55                   	push   ebp
c0018ea5:	e8 26 fd ff ff       	call   c0018bd0 <PCI::foundDevice(PCIDeviceInfo)>
c0018eaa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018eb0:	5b                   	pop    ebx
c0018eb1:	5e                   	pop    esi
c0018eb2:	5f                   	pop    edi
c0018eb3:	5d                   	pop    ebp
c0018eb4:	c3                   	ret    
c0018eb5:	90                   	nop

c0018eb6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018eb6:	55                   	push   ebp
c0018eb7:	57                   	push   edi
c0018eb8:	56                   	push   esi
c0018eb9:	53                   	push   ebx
c0018eba:	83 ec 0c             	sub    esp,0xc
c0018ebd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ec1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018ec6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ecb:	6a 00                	push   0x0
c0018ecd:	56                   	push   esi
c0018ece:	57                   	push   edi
c0018ecf:	55                   	push   ebp
c0018ed0:	e8 e1 f7 ff ff       	call   c00186b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ed5:	6a 00                	push   0x0
c0018ed7:	56                   	push   esi
c0018ed8:	57                   	push   edi
c0018ed9:	55                   	push   ebp
c0018eda:	e8 63 fe ff ff       	call   c0018d42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018edf:	83 c4 20             	add    esp,0x20
c0018ee2:	6a 00                	push   0x0
c0018ee4:	56                   	push   esi
c0018ee5:	57                   	push   edi
c0018ee6:	55                   	push   ebp
c0018ee7:	e8 ee f7 ff ff       	call   c00186da <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018eec:	83 c4 10             	add    esp,0x10
c0018eef:	84 c0                	test   al,al
c0018ef1:	79 27                	jns    c0018f1a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018ef3:	bb 01 00 00 00       	mov    ebx,0x1
c0018ef8:	53                   	push   ebx
c0018ef9:	56                   	push   esi
c0018efa:	57                   	push   edi
c0018efb:	55                   	push   ebp
c0018efc:	e8 b5 f7 ff ff       	call   c00186b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	66 40                	inc    ax
c0018f06:	74 0c                	je     c0018f14 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f08:	53                   	push   ebx
c0018f09:	56                   	push   esi
c0018f0a:	57                   	push   edi
c0018f0b:	55                   	push   ebp
c0018f0c:	e8 31 fe ff ff       	call   c0018d42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	43                   	inc    ebx
c0018f15:	83 fb 08             	cmp    ebx,0x8
c0018f18:	75 de                	jne    c0018ef8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f1a:	83 c4 0c             	add    esp,0xc
c0018f1d:	5b                   	pop    ebx
c0018f1e:	5e                   	pop    esi
c0018f1f:	5f                   	pop    edi
c0018f20:	5d                   	pop    ebp
c0018f21:	c3                   	ret    

c0018f22 <PCI::detect()>:
c0018f22:	56                   	push   esi
c0018f23:	53                   	push   ebx
c0018f24:	53                   	push   ebx
c0018f25:	31 db                	xor    ebx,ebx
c0018f27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f2b:	6a 00                	push   0x0
c0018f2d:	6a 00                	push   0x0
c0018f2f:	6a 00                	push   0x0
c0018f31:	56                   	push   esi
c0018f32:	e8 a3 f7 ff ff       	call   c00186da <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	a8 80                	test   al,0x80
c0018f3c:	75 21                	jne    c0018f5f <PCI::detect()+0x3d>
c0018f3e:	51                   	push   ecx
c0018f3f:	51                   	push   ecx
c0018f40:	6a 00                	push   0x0
c0018f42:	56                   	push   esi
c0018f43:	e8 62 fc ff ff       	call   c0018baa <PCI::checkBus(unsigned char)>
c0018f48:	83 c4 10             	add    esp,0x10
c0018f4b:	eb 24                	jmp    c0018f71 <PCI::detect()+0x4f>
c0018f4d:	52                   	push   edx
c0018f4e:	52                   	push   edx
c0018f4f:	53                   	push   ebx
c0018f50:	43                   	inc    ebx
c0018f51:	56                   	push   esi
c0018f52:	e8 53 fc ff ff       	call   c0018baa <PCI::checkBus(unsigned char)>
c0018f57:	83 c4 10             	add    esp,0x10
c0018f5a:	83 fb 08             	cmp    ebx,0x8
c0018f5d:	74 12                	je     c0018f71 <PCI::detect()+0x4f>
c0018f5f:	53                   	push   ebx
c0018f60:	6a 00                	push   0x0
c0018f62:	6a 00                	push   0x0
c0018f64:	56                   	push   esi
c0018f65:	e8 4c f7 ff ff       	call   c00186b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	66 40                	inc    ax
c0018f6f:	74 dc                	je     c0018f4d <PCI::detect()+0x2b>
c0018f71:	58                   	pop    eax
c0018f72:	5b                   	pop    ebx
c0018f73:	5e                   	pop    esi
c0018f74:	c3                   	ret    
c0018f75:	90                   	nop

c0018f76 <IDE::close(int, int, void*)>:
c0018f76:	83 c8 ff             	or     eax,0xffffffff
c0018f79:	c3                   	ret    

c0018f7a <IDE::IDE()>:
c0018f7a:	83 ec 0c             	sub    esp,0xc
c0018f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f81:	83 ec 08             	sub    esp,0x8
c0018f84:	68 30 f3 01 c0       	push   0xc001f330
c0018f89:	50                   	push   eax
c0018f8a:	e8 25 2d ff ff       	call   c000bcb4 <HardDiskController::HardDiskController(char const*)>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0018f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f9b:	89 10                	mov    DWORD PTR [eax],edx
c0018f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018fa8:	90                   	nop
c0018fa9:	83 c4 0c             	add    esp,0xc
c0018fac:	c3                   	ret    
c0018fad:	90                   	nop

c0018fae <IDE::prepareInterrupt(unsigned char)>:
c0018fae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fb3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fb7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018fbf:	c3                   	ret    

c0018fc0 <selectDrive(unsigned char, unsigned char)>:
c0018fc0:	c3                   	ret    
c0018fc1:	90                   	nop

c0018fc2 <IDE::getBase(unsigned char)>:
c0018fc2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fcb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018fd3:	c3                   	ret    

c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fd4:	55                   	push   ebp
c0018fd5:	57                   	push   edi
c0018fd6:	56                   	push   esi
c0018fd7:	53                   	push   ebx
c0018fd8:	83 ec 1c             	sub    esp,0x1c
c0018fdb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018fdf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018fe3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018fe6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018fea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018fee:	80 f9 03             	cmp    cl,0x3
c0018ff1:	77 51                	ja     c0019044 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018ff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ff7:	0f b6 f2             	movzx  esi,dl
c0018ffa:	0f b6 db             	movzx  ebx,bl
c0018ffd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019000:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019004:	83 ca 80             	or     edx,0xffffff80
c0019007:	0f b6 d2             	movzx  edx,dl
c001900a:	52                   	push   edx
c001900b:	6a 0c                	push   0xc
c001900d:	56                   	push   esi
c001900e:	57                   	push   edi
c001900f:	e8 c0 ff ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019014:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019019:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001901d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019021:	ee                   	out    dx,al
c0019022:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019027:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001902b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001902f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019033:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001903b:	83 c4 2c             	add    esp,0x2c
c001903e:	5b                   	pop    ebx
c001903f:	5e                   	pop    esi
c0019040:	5f                   	pop    edi
c0019041:	5d                   	pop    ebp
c0019042:	eb 90                	jmp    c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019044:	80 fb 07             	cmp    bl,0x7
c0019047:	77 12                	ja     c001905b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019049:	0f b6 d2             	movzx  edx,dl
c001904c:	0f b6 db             	movzx  ebx,bl
c001904f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019057:	89 da                	mov    edx,ebx
c0019059:	eb 2f                	jmp    c001908a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001905b:	80 fb 0d             	cmp    bl,0xd
c001905e:	77 13                	ja     c0019073 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019060:	0f b6 d2             	movzx  edx,dl
c0019063:	0f b6 db             	movzx  ebx,bl
c0019066:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001906d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019071:	eb 17                	jmp    c001908a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019073:	80 fb 15             	cmp    bl,0x15
c0019076:	77 13                	ja     c001908b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019078:	0f b6 d2             	movzx  edx,dl
c001907b:	0f b6 db             	movzx  ebx,bl
c001907e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019086:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001908a:	ee                   	out    dx,al
c001908b:	83 c4 1c             	add    esp,0x1c
c001908e:	5b                   	pop    ebx
c001908f:	5e                   	pop    esi
c0019090:	5f                   	pop    edi
c0019091:	5d                   	pop    ebp
c0019092:	c3                   	ret    
c0019093:	90                   	nop

c0019094 <IDE::read(unsigned char, unsigned char)>:
c0019094:	55                   	push   ebp
c0019095:	57                   	push   edi
c0019096:	56                   	push   esi
c0019097:	53                   	push   ebx
c0019098:	83 ec 1c             	sub    esp,0x1c
c001909b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001909f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190a3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00190a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190aa:	3c 03                	cmp    al,0x3
c00190ac:	77 43                	ja     c00190f1 <IDE::read(unsigned char, unsigned char)+0x5d>
c00190ae:	0f b6 f2             	movzx  esi,dl
c00190b1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190b4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00190b8:	83 c8 80             	or     eax,0xffffff80
c00190bb:	0f b6 c0             	movzx  eax,al
c00190be:	50                   	push   eax
c00190bf:	6a 0c                	push   0xc
c00190c1:	56                   	push   esi
c00190c2:	57                   	push   edi
c00190c3:	e8 0c ff ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190c8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190cd:	0f b6 c3             	movzx  eax,bl
c00190d0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190d4:	ec                   	in     al,dx
c00190d5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190d9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190de:	52                   	push   edx
c00190df:	6a 0c                	push   0xc
c00190e1:	56                   	push   esi
c00190e2:	57                   	push   edi
c00190e3:	e8 ec fe ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190e8:	83 c4 20             	add    esp,0x20
c00190eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190ef:	eb 49                	jmp    c001913a <IDE::read(unsigned char, unsigned char)+0xa6>
c00190f1:	80 fb 07             	cmp    bl,0x7
c00190f4:	77 12                	ja     c0019108 <IDE::read(unsigned char, unsigned char)+0x74>
c00190f6:	0f b6 d2             	movzx  edx,dl
c00190f9:	0f b6 c3             	movzx  eax,bl
c00190fc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019104:	89 c2                	mov    edx,eax
c0019106:	eb 31                	jmp    c0019139 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019108:	80 fb 0d             	cmp    bl,0xd
c001910b:	77 13                	ja     c0019120 <IDE::read(unsigned char, unsigned char)+0x8c>
c001910d:	0f b6 d2             	movzx  edx,dl
c0019110:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019117:	0f b6 d3             	movzx  edx,bl
c001911a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001911e:	eb 19                	jmp    c0019139 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019120:	31 c0                	xor    eax,eax
c0019122:	80 fb 15             	cmp    bl,0x15
c0019125:	77 13                	ja     c001913a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019127:	0f b6 d2             	movzx  edx,dl
c001912a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019132:	0f b6 d3             	movzx  edx,bl
c0019135:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019139:	ec                   	in     al,dx
c001913a:	83 c4 1c             	add    esp,0x1c
c001913d:	5b                   	pop    ebx
c001913e:	5e                   	pop    esi
c001913f:	5f                   	pop    edi
c0019140:	5d                   	pop    ebp
c0019141:	c3                   	ret    

c0019142 <IDE::waitInterrupt(unsigned char)>:
c0019142:	57                   	push   edi
c0019143:	56                   	push   esi
c0019144:	31 f6                	xor    esi,esi
c0019146:	53                   	push   ebx
c0019147:	83 ec 10             	sub    esp,0x10
c001914a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001914e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019152:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019156:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001915b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019162:	84 db                	test   bl,bl
c0019164:	75 33                	jne    c0019199 <IDE::waitInterrupt(unsigned char)+0x57>
c0019166:	52                   	push   edx
c0019167:	6a 0c                	push   0xc
c0019169:	50                   	push   eax
c001916a:	57                   	push   edi
c001916b:	e8 24 ff ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019170:	83 c4 10             	add    esp,0x10
c0019173:	a8 01                	test   al,0x1
c0019175:	75 2a                	jne    c00191a1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019177:	f7 c6 04 00 00 00    	test   esi,0x4
c001917d:	75 12                	jne    c0019191 <IDE::waitInterrupt(unsigned char)+0x4f>
c001917f:	83 fe 32             	cmp    esi,0x32
c0019182:	7e 0d                	jle    c0019191 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019184:	83 ec 0c             	sub    esp,0xc
c0019187:	6a 64                	push   0x64
c0019189:	e8 1a a9 ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	83 fe 3c             	cmp    esi,0x3c
c0019194:	74 0b                	je     c00191a1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019196:	46                   	inc    esi
c0019197:	eb bd                	jmp    c0019156 <IDE::waitInterrupt(unsigned char)+0x14>
c0019199:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	88 d8                	mov    al,bl
c00191a6:	5b                   	pop    ebx
c00191a7:	5e                   	pop    esi
c00191a8:	5f                   	pop    edi
c00191a9:	c3                   	ret    

c00191aa <ideChannel0IRQHandler(regs*, void*)>:
c00191aa:	83 ec 10             	sub    esp,0x10
c00191ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00191b8:	6a 07                	push   0x7
c00191ba:	6a 00                	push   0x0
c00191bc:	50                   	push   eax
c00191bd:	e8 d2 fe ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00191c2:	83 c4 1c             	add    esp,0x1c
c00191c5:	c3                   	ret    

c00191c6 <ideChannel1IRQHandler(regs*, void*)>:
c00191c6:	83 ec 10             	sub    esp,0x10
c00191c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191d4:	6a 07                	push   0x7
c00191d6:	6a 01                	push   0x1
c00191d8:	50                   	push   eax
c00191d9:	e8 b6 fe ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00191de:	83 c4 1c             	add    esp,0x1c
c00191e1:	c3                   	ret    

c00191e2 <IDE::enableIRQs(unsigned char, bool)>:
c00191e2:	57                   	push   edi
c00191e3:	56                   	push   esi
c00191e4:	be 04 00 00 00       	mov    esi,0x4
c00191e9:	53                   	push   ebx
c00191ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00191ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191f8:	0f 94 c0             	sete   al
c00191fb:	01 c0                	add    eax,eax
c00191fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019204:	0f b6 c0             	movzx  eax,al
c0019207:	50                   	push   eax
c0019208:	6a 0c                	push   0xc
c001920a:	57                   	push   edi
c001920b:	53                   	push   ebx
c001920c:	e8 c3 fd ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	50                   	push   eax
c0019215:	6a 0c                	push   0xc
c0019217:	57                   	push   edi
c0019218:	53                   	push   ebx
c0019219:	e8 76 fe ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001921e:	83 c4 10             	add    esp,0x10
c0019221:	4e                   	dec    esi
c0019222:	75 f0                	jne    c0019214 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019224:	5b                   	pop    ebx
c0019225:	5e                   	pop    esi
c0019226:	5f                   	pop    edi
c0019227:	c3                   	ret    

c0019228 <IDE::open(int, int, void*)>:
c0019228:	55                   	push   ebp
c0019229:	57                   	push   edi
c001922a:	56                   	push   esi
c001922b:	53                   	push   ebx
c001922c:	83 ec 1c             	sub    esp,0x1c
c001922f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019233:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001923c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019245:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001924c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019253:	0f 85 b0 02 00 00    	jne    c0019509 <IDE::open(int, int, void*)+0x2e1>
c0019259:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001925f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019263:	83 e0 7f             	and    eax,0x7f
c0019266:	3c 05                	cmp    al,0x5
c0019268:	74 04                	je     c001926e <IDE::open(int, int, void*)+0x46>
c001926a:	3c 0f                	cmp    al,0xf
c001926c:	75 32                	jne    c00192a0 <IDE::open(int, int, void*)+0x78>
c001926e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019274:	83 e0 fc             	and    eax,0xfffffffc
c0019277:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001927e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019284:	83 e0 fc             	and    eax,0xfffffffc
c0019287:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001928e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019294:	83 e0 fc             	and    eax,0xfffffffc
c0019297:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001929e:	eb 14                	jmp    c00192b4 <IDE::open(int, int, void*)+0x8c>
c00192a0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192aa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00192b4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00192bb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00192c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192c6:	89 c6                	mov    esi,eax
c00192c8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192cd:	c1 e6 10             	shl    esi,0x10
c00192d0:	89 e8                	mov    eax,ebp
c00192d2:	89 fa                	mov    edx,edi
c00192d4:	c1 e0 0b             	shl    eax,0xb
c00192d7:	09 f0                	or     eax,esi
c00192d9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192e0:	c1 e6 08             	shl    esi,0x8
c00192e3:	09 c6                	or     esi,eax
c00192e5:	89 f0                	mov    eax,esi
c00192e7:	0d 08 00 00 80       	or     eax,0x80000008
c00192ec:	ef                   	out    dx,eax
c00192ed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192f2:	89 ca                	mov    edx,ecx
c00192f4:	ed                   	in     eax,dx
c00192f5:	c1 e8 10             	shr    eax,0x10
c00192f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00192fd:	0f 84 f5 00 00 00    	je     c00193f8 <IDE::open(int, int, void*)+0x1d0>
c0019303:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019309:	89 fa                	mov    edx,edi
c001930b:	89 f0                	mov    eax,esi
c001930d:	ef                   	out    dx,eax
c001930e:	b0 fe                	mov    al,0xfe
c0019310:	89 ca                	mov    edx,ecx
c0019312:	ee                   	out    dx,al
c0019313:	89 f0                	mov    eax,esi
c0019315:	89 fa                	mov    edx,edi
c0019317:	ef                   	out    dx,eax
c0019318:	89 ca                	mov    edx,ecx
c001931a:	ed                   	in     eax,dx
c001931b:	3c fe                	cmp    al,0xfe
c001931d:	0f 85 a9 00 00 00    	jne    c00193cc <IDE::open(int, int, void*)+0x1a4>
c0019323:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019329:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019330:	74 33                	je     c0019365 <IDE::open(int, int, void*)+0x13d>
c0019332:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019338:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001933c:	40                   	inc    eax
c001933d:	83 ec 0c             	sub    esp,0xc
c0019340:	0f b6 c0             	movzx  eax,al
c0019343:	50                   	push   eax
c0019344:	55                   	push   ebp
c0019345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019349:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001934f:	51                   	push   ecx
c0019350:	e8 77 53 ff ff       	call   c000e6cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019355:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001935a:	83 c4 1c             	add    esp,0x1c
c001935d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019363:	eb 0a                	jmp    c001936f <IDE::open(int, int, void*)+0x147>
c0019365:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001936f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019376:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001937d:	c1 e1 10             	shl    ecx,0x10
c0019380:	c1 e0 08             	shl    eax,0x8
c0019383:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019388:	09 c1                	or     ecx,eax
c001938a:	89 fa                	mov    edx,edi
c001938c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019393:	c1 e0 0b             	shl    eax,0xb
c0019396:	09 c1                	or     ecx,eax
c0019398:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001939e:	89 c8                	mov    eax,ecx
c00193a0:	ef                   	out    dx,eax
c00193a1:	be fc 0c 00 00       	mov    esi,0xcfc
c00193a6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00193ac:	89 f2                	mov    edx,esi
c00193ae:	ee                   	out    dx,al
c00193af:	89 c8                	mov    eax,ecx
c00193b1:	89 fa                	mov    edx,edi
c00193b3:	ef                   	out    dx,eax
c00193b4:	89 f2                	mov    edx,esi
c00193b6:	ed                   	in     eax,dx
c00193b7:	0f b6 c0             	movzx  eax,al
c00193ba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00193c0:	74 46                	je     c0019408 <IDE::open(int, int, void*)+0x1e0>
c00193c2:	83 ec 0c             	sub    esp,0xc
c00193c5:	68 48 f3 01 c0       	push   0xc001f348
c00193ca:	eb 34                	jmp    c0019400 <IDE::open(int, int, void*)+0x1d8>
c00193cc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193d5:	75 17                	jne    c00193ee <IDE::open(int, int, void*)+0x1c6>
c00193d7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193dc:	74 07                	je     c00193e5 <IDE::open(int, int, void*)+0x1bd>
c00193de:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193e3:	75 09                	jne    c00193ee <IDE::open(int, int, void*)+0x1c6>
c00193e5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00193ec:	eb 1a                	jmp    c0019408 <IDE::open(int, int, void*)+0x1e0>
c00193ee:	83 ec 0c             	sub    esp,0xc
c00193f1:	68 50 f3 01 c0       	push   0xc001f350
c00193f6:	eb 08                	jmp    c0019400 <IDE::open(int, int, void*)+0x1d8>
c00193f8:	83 ec 0c             	sub    esp,0xc
c00193fb:	68 81 f3 01 c0       	push   0xc001f381
c0019400:	e8 ae 6d ff ff       	call   c00101b3 <KePanic(char const*)>
c0019405:	83 c4 10             	add    esp,0x10
c0019408:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001940f:	79 1a                	jns    c001942b <IDE::open(int, int, void*)+0x203>
c0019411:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019417:	83 e0 fc             	and    eax,0xfffffffc
c001941a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019421:	83 c0 08             	add    eax,0x8
c0019424:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001942b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019431:	89 c2                	mov    edx,eax
c0019433:	83 e2 0f             	and    edx,0xf
c0019436:	66 83 fa 08          	cmp    dx,0x8
c001943a:	75 0a                	jne    c0019446 <IDE::open(int, int, void*)+0x21e>
c001943c:	83 e8 02             	sub    eax,0x2
c001943f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019446:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001944c:	89 c2                	mov    edx,eax
c001944e:	83 e2 0f             	and    edx,0xf
c0019451:	66 83 fa 08          	cmp    dx,0x8
c0019455:	75 0a                	jne    c0019461 <IDE::open(int, int, void*)+0x239>
c0019457:	83 e8 02             	sub    eax,0x2
c001945a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019461:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019468:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001946f:	89 d0                	mov    eax,edx
c0019471:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019474:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019478:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001947c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001947f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019484:	0f b6 c9             	movzx  ecx,cl
c0019487:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001948e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019491:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019495:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019499:	8d 50 02             	lea    edx,[eax+0x2]
c001949c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194a1:	0f b6 d2             	movzx  edx,dl
c00194a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194aa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194ad:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194b1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00194b5:	8d 48 03             	lea    ecx,[eax+0x3]
c00194b8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194bd:	0f b6 c9             	movzx  ecx,cl
c00194c0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194c6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194c9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194cd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194d1:	8d 50 04             	lea    edx,[eax+0x4]
c00194d4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194da:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194df:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194e6:	66 85 f6             	test   si,si
c00194e9:	74 5b                	je     c0019546 <IDE::open(int, int, void*)+0x31e>
c00194eb:	0f b6 d2             	movzx  edx,dl
c00194ee:	83 c0 05             	add    eax,0x5
c00194f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194f8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019502:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019507:	eb 3d                	jmp    c0019546 <IDE::open(int, int, void*)+0x31e>
c0019509:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001950f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019516:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001951d:	66 05 06 02          	add    ax,0x206
c0019521:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019528:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001952f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019536:	66 05 06 02          	add    ax,0x206
c001953a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019541:	e9 e5 fe ff ff       	jmp    c001942b <IDE::open(int, int, void*)+0x203>
c0019546:	50                   	push   eax
c0019547:	50                   	push   eax
c0019548:	6a 00                	push   0x0
c001954a:	53                   	push   ebx
c001954b:	e8 5e fa ff ff       	call   c0018fae <IDE::prepareInterrupt(unsigned char)>
c0019550:	5a                   	pop    edx
c0019551:	59                   	pop    ecx
c0019552:	6a 01                	push   0x1
c0019554:	53                   	push   ebx
c0019555:	e8 54 fa ff ff       	call   c0018fae <IDE::prepareInterrupt(unsigned char)>
c001955a:	83 c4 0c             	add    esp,0xc
c001955d:	6a 00                	push   0x0
c001955f:	6a 00                	push   0x0
c0019561:	53                   	push   ebx
c0019562:	e8 7b fc ff ff       	call   c00191e2 <IDE::enableIRQs(unsigned char, bool)>
c0019567:	83 c4 0c             	add    esp,0xc
c001956a:	6a 00                	push   0x0
c001956c:	6a 01                	push   0x1
c001956e:	53                   	push   ebx
c001956f:	e8 6e fc ff ff       	call   c00191e2 <IDE::enableIRQs(unsigned char, bool)>
c0019574:	83 c4 10             	add    esp,0x10
c0019577:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001957e:	74 34                	je     c00195b4 <IDE::open(int, int, void*)+0x38c>
c0019580:	83 ec 0c             	sub    esp,0xc
c0019583:	53                   	push   ebx
c0019584:	6a 01                	push   0x1
c0019586:	68 aa 91 01 c0       	push   0xc00191aa
c001958b:	6a 0e                	push   0xe
c001958d:	53                   	push   ebx
c001958e:	e8 89 23 ff ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019593:	83 c4 14             	add    esp,0x14
c0019596:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001959c:	53                   	push   ebx
c001959d:	6a 01                	push   0x1
c001959f:	68 c6 91 01 c0       	push   0xc00191c6
c00195a4:	6a 0f                	push   0xf
c00195a6:	53                   	push   ebx
c00195a7:	e8 70 23 ff ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195ac:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00195b2:	eb 38                	jmp    c00195ec <IDE::open(int, int, void*)+0x3c4>
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00195c1:	53                   	push   ebx
c00195c2:	6a 00                	push   0x0
c00195c4:	68 aa 91 01 c0       	push   0xc00191aa
c00195c9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195cf:	53                   	push   ebx
c00195d0:	e8 47 23 ff ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195d5:	83 c4 14             	add    esp,0x14
c00195d8:	53                   	push   ebx
c00195d9:	6a 00                	push   0x0
c00195db:	68 c6 91 01 c0       	push   0xc00191c6
c00195e0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195e6:	53                   	push   ebx
c00195e7:	e8 30 23 ff ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195ee:	83 c4 20             	add    esp,0x20
c00195f1:	83 ec 0c             	sub    esp,0xc
c00195f4:	53                   	push   ebx
c00195f5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195f8:	83 c4 0c             	add    esp,0xc
c00195fb:	6a 07                	push   0x7
c00195fd:	6a 00                	push   0x0
c00195ff:	53                   	push   ebx
c0019600:	e8 8f fa ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019605:	83 c4 0c             	add    esp,0xc
c0019608:	6a 07                	push   0x7
c001960a:	6a 01                	push   0x1
c001960c:	53                   	push   ebx
c001960d:	e8 82 fa ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019612:	83 c4 0c             	add    esp,0xc
c0019615:	6a 01                	push   0x1
c0019617:	6a 00                	push   0x0
c0019619:	53                   	push   ebx
c001961a:	e8 c3 fb ff ff       	call   c00191e2 <IDE::enableIRQs(unsigned char, bool)>
c001961f:	83 c4 0c             	add    esp,0xc
c0019622:	6a 01                	push   0x1
c0019624:	6a 01                	push   0x1
c0019626:	53                   	push   ebx
c0019627:	e8 b6 fb ff ff       	call   c00191e2 <IDE::enableIRQs(unsigned char, bool)>
c001962c:	83 c4 2c             	add    esp,0x2c
c001962f:	31 c0                	xor    eax,eax
c0019631:	5b                   	pop    ebx
c0019632:	5e                   	pop    esi
c0019633:	5f                   	pop    edi
c0019634:	5d                   	pop    ebp
c0019635:	c3                   	ret    

c0019636 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019636:	55                   	push   ebp
c0019637:	57                   	push   edi
c0019638:	56                   	push   esi
c0019639:	53                   	push   ebx
c001963a:	83 ec 1c             	sub    esp,0x1c
c001963d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019641:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019645:	8d 50 f8             	lea    edx,[eax-0x8]
c0019648:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001964c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019650:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019654:	80 fa 03             	cmp    dl,0x3
c0019657:	77 5d                	ja     c00196b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019659:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001965d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019661:	0f b6 db             	movzx  ebx,bl
c0019664:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019667:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001966b:	83 ca 80             	or     edx,0xffffff80
c001966e:	0f b6 d2             	movzx  edx,dl
c0019671:	52                   	push   edx
c0019672:	6a 0c                	push   0xc
c0019674:	53                   	push   ebx
c0019675:	56                   	push   esi
c0019676:	e8 59 f9 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001967b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019684:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019688:	0f b6 c0             	movzx  eax,al
c001968b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001968f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019691:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019696:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001969a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001969e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00196a2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196aa:	83 c4 2c             	add    esp,0x2c
c00196ad:	5b                   	pop    ebx
c00196ae:	5e                   	pop    esi
c00196af:	5f                   	pop    edi
c00196b0:	5d                   	pop    ebp
c00196b1:	e9 1e f9 ff ff       	jmp    c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196b6:	3c 07                	cmp    al,0x7
c00196b8:	77 10                	ja     c00196ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00196ba:	0f b6 db             	movzx  ebx,bl
c00196bd:	0f b6 d0             	movzx  edx,al
c00196c0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196c8:	eb 2d                	jmp    c00196f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196ca:	3c 0d                	cmp    al,0xd
c00196cc:	77 13                	ja     c00196e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196ce:	0f b6 db             	movzx  ebx,bl
c00196d1:	0f b6 c0             	movzx  eax,al
c00196d4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196db:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196df:	eb 16                	jmp    c00196f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196e1:	3c 15                	cmp    al,0x15
c00196e3:	77 14                	ja     c00196f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196e5:	0f b6 db             	movzx  ebx,bl
c00196e8:	0f b6 c0             	movzx  eax,al
c00196eb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196f3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196f9:	83 c4 1c             	add    esp,0x1c
c00196fc:	5b                   	pop    ebx
c00196fd:	5e                   	pop    esi
c00196fe:	5f                   	pop    edi
c00196ff:	5d                   	pop    ebp
c0019700:	c3                   	ret    
c0019701:	90                   	nop

c0019702 <IDE::detect()>:
c0019702:	55                   	push   ebp
c0019703:	57                   	push   edi
c0019704:	56                   	push   esi
c0019705:	53                   	push   ebx
c0019706:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001970c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019713:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001971a:	0f 85 97 02 00 00    	jne    c00199b7 <IDE::detect()+0x2b5>
c0019720:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019727:	31 f6                	xor    esi,esi
c0019729:	31 ed                	xor    ebp,ebp
c001972b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019733:	89 e8                	mov    eax,ebp
c0019735:	c1 e0 06             	shl    eax,0x6
c0019738:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019740:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019744:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019748:	c1 e0 04             	shl    eax,0x4
c001974b:	83 c8 a0             	or     eax,0xffffffa0
c001974e:	0f b6 c0             	movzx  eax,al
c0019751:	50                   	push   eax
c0019752:	6a 06                	push   0x6
c0019754:	56                   	push   esi
c0019755:	53                   	push   ebx
c0019756:	e8 79 f8 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001975b:	83 c4 0c             	add    esp,0xc
c001975e:	6a 0c                	push   0xc
c0019760:	56                   	push   esi
c0019761:	53                   	push   ebx
c0019762:	e8 2d f9 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019767:	83 c4 0c             	add    esp,0xc
c001976a:	6a 0c                	push   0xc
c001976c:	56                   	push   esi
c001976d:	53                   	push   ebx
c001976e:	e8 21 f9 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019773:	83 c4 0c             	add    esp,0xc
c0019776:	6a 0c                	push   0xc
c0019778:	56                   	push   esi
c0019779:	53                   	push   ebx
c001977a:	e8 15 f9 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001977f:	83 c4 0c             	add    esp,0xc
c0019782:	6a 0c                	push   0xc
c0019784:	56                   	push   esi
c0019785:	53                   	push   ebx
c0019786:	e8 09 f9 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001978b:	68 ec 00 00 00       	push   0xec
c0019790:	6a 07                	push   0x7
c0019792:	56                   	push   esi
c0019793:	53                   	push   ebx
c0019794:	e8 3b f8 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019799:	83 c4 1c             	add    esp,0x1c
c001979c:	6a 0c                	push   0xc
c001979e:	56                   	push   esi
c001979f:	53                   	push   ebx
c00197a0:	e8 ef f8 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00197a5:	83 c4 0c             	add    esp,0xc
c00197a8:	6a 0c                	push   0xc
c00197aa:	56                   	push   esi
c00197ab:	53                   	push   ebx
c00197ac:	e8 e3 f8 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00197b1:	83 c4 0c             	add    esp,0xc
c00197b4:	6a 0c                	push   0xc
c00197b6:	56                   	push   esi
c00197b7:	53                   	push   ebx
c00197b8:	e8 d7 f8 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00197bd:	83 c4 0c             	add    esp,0xc
c00197c0:	6a 0c                	push   0xc
c00197c2:	56                   	push   esi
c00197c3:	53                   	push   ebx
c00197c4:	e8 cb f8 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00197c9:	83 c4 0c             	add    esp,0xc
c00197cc:	6a 0c                	push   0xc
c00197ce:	56                   	push   esi
c00197cf:	53                   	push   ebx
c00197d0:	e8 bf f8 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00197d5:	83 c4 10             	add    esp,0x10
c00197d8:	84 c0                	test   al,al
c00197da:	0f 84 5f 01 00 00    	je     c001993f <IDE::detect()+0x23d>
c00197e0:	31 ff                	xor    edi,edi
c00197e2:	50                   	push   eax
c00197e3:	6a 0c                	push   0xc
c00197e5:	56                   	push   esi
c00197e6:	53                   	push   ebx
c00197e7:	e8 a8 f8 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c00197ec:	83 c4 10             	add    esp,0x10
c00197ef:	a8 01                	test   al,0x1
c00197f1:	0f 85 69 01 00 00    	jne    c0019960 <IDE::detect()+0x25e>
c00197f7:	84 c0                	test   al,al
c00197f9:	78 04                	js     c00197ff <IDE::detect()+0xfd>
c00197fb:	a8 08                	test   al,0x8
c00197fd:	75 23                	jne    c0019822 <IDE::detect()+0x120>
c00197ff:	47                   	inc    edi
c0019800:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019806:	7e da                	jle    c00197e2 <IDE::detect()+0xe0>
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	6a 32                	push   0x32
c001980d:	e8 96 a2 ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c0019812:	83 c4 10             	add    esp,0x10
c0019815:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001981b:	75 c5                	jne    c00197e2 <IDE::detect()+0xe0>
c001981d:	e9 3e 01 00 00       	jmp    c0019960 <IDE::detect()+0x25e>
c0019822:	31 c9                	xor    ecx,ecx
c0019824:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019828:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001982c:	83 ec 0c             	sub    esp,0xc
c001982f:	68 80 00 00 00       	push   0x80
c0019834:	57                   	push   edi
c0019835:	6a 00                	push   0x0
c0019837:	56                   	push   esi
c0019838:	53                   	push   ebx
c0019839:	e8 f8 fd ff ff       	call   c0019636 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001983e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019843:	89 e8                	mov    eax,ebp
c0019845:	89 d1                	mov    ecx,edx
c0019847:	c1 e0 06             	shl    eax,0x6
c001984a:	01 d8                	add    eax,ebx
c001984c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019853:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001985a:	89 f2                	mov    edx,esi
c001985c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019862:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019866:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001986c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019870:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019877:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001987f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019886:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001988e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019894:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001989b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00198a1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00198a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198a9:	83 c4 20             	add    esp,0x20
c00198ac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00198af:	83 c0 02             	add    eax,0x2
c00198b2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00198b8:	83 c7 02             	add    edi,0x2
c00198bb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00198be:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198c4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198c8:	75 e2                	jne    c00198ac <IDE::detect()+0x1aa>
c00198ca:	89 e8                	mov    eax,ebp
c00198cc:	c1 e0 06             	shl    eax,0x6
c00198cf:	01 d8                	add    eax,ebx
c00198d1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198d7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198de:	66 c1 ea 09          	shr    dx,0x9
c00198e2:	83 e2 01             	and    edx,0x1
c00198e5:	84 c9                	test   cl,cl
c00198e7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00198ed:	75 22                	jne    c0019911 <IDE::detect()+0x20f>
c00198ef:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198f6:	74 46                	je     c001993e <IDE::detect()+0x23c>
c00198f8:	83 ec 0c             	sub    esp,0xc
c00198fb:	68 7c 01 00 00       	push   0x17c
c0019900:	e8 b4 de fe ff       	call   c00077b9 <malloc>
c0019905:	89 c7                	mov    edi,eax
c0019907:	89 04 24             	mov    DWORD PTR [esp],eax
c001990a:	e8 11 05 00 00       	call   c0019e20 <ATA::ATA()>
c001990f:	eb 17                	jmp    c0019928 <IDE::detect()+0x226>
c0019911:	83 ec 0c             	sub    esp,0xc
c0019914:	68 84 01 00 00       	push   0x184
c0019919:	e8 9b de fe ff       	call   c00077b9 <malloc>
c001991e:	89 c7                	mov    edi,eax
c0019920:	89 04 24             	mov    DWORD PTR [esp],eax
c0019923:	e8 f0 0a 00 00       	call   c001a418 <ATAPI::ATAPI()>
c0019928:	5a                   	pop    edx
c0019929:	59                   	pop    ecx
c001992a:	57                   	push   edi
c001992b:	53                   	push   ebx
c001992c:	e8 3f 20 ff ff       	call   c000b970 <Device::addChild(Device*)>
c0019931:	8b 07                	mov    eax,DWORD PTR [edi]
c0019933:	53                   	push   ebx
c0019934:	55                   	push   ebp
c0019935:	6a 00                	push   0x0
c0019937:	57                   	push   edi
c0019938:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001993b:	83 c4 20             	add    esp,0x20
c001993e:	45                   	inc    ebp
c001993f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019944:	74 0d                	je     c0019953 <IDE::detect()+0x251>
c0019946:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001994e:	e9 e0 fd ff ff       	jmp    c0019733 <IDE::detect()+0x31>
c0019953:	4e                   	dec    esi
c0019954:	74 61                	je     c00199b7 <IDE::detect()+0x2b5>
c0019956:	be 01 00 00 00       	mov    esi,0x1
c001995b:	e9 cb fd ff ff       	jmp    c001972b <IDE::detect()+0x29>
c0019960:	50                   	push   eax
c0019961:	6a 04                	push   0x4
c0019963:	56                   	push   esi
c0019964:	53                   	push   ebx
c0019965:	e8 2a f7 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001996a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001996e:	83 c4 0c             	add    esp,0xc
c0019971:	6a 05                	push   0x5
c0019973:	56                   	push   esi
c0019974:	53                   	push   ebx
c0019975:	e8 1a f7 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001997a:	83 c4 10             	add    esp,0x10
c001997d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019981:	80 fa 14             	cmp    dl,0x14
c0019984:	75 04                	jne    c001998a <IDE::detect()+0x288>
c0019986:	3c eb                	cmp    al,0xeb
c0019988:	eb 07                	jmp    c0019991 <IDE::detect()+0x28f>
c001998a:	3c 96                	cmp    al,0x96
c001998c:	75 b1                	jne    c001993f <IDE::detect()+0x23d>
c001998e:	80 fa 69             	cmp    dl,0x69
c0019991:	75 ac                	jne    c001993f <IDE::detect()+0x23d>
c0019993:	68 a1 00 00 00       	push   0xa1
c0019998:	6a 07                	push   0x7
c001999a:	56                   	push   esi
c001999b:	53                   	push   ebx
c001999c:	e8 33 f6 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199a1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199a8:	e8 fb a0 ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c00199ad:	83 c4 10             	add    esp,0x10
c00199b0:	b1 01                	mov    cl,0x1
c00199b2:	e9 6d fe ff ff       	jmp    c0019824 <IDE::detect()+0x122>
c00199b7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199bd:	5b                   	pop    ebx
c00199be:	5e                   	pop    esi
c00199bf:	5f                   	pop    edi
c00199c0:	5d                   	pop    ebp
c00199c1:	c3                   	ret    

c00199c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00199c2:	55                   	push   ebp
c00199c3:	57                   	push   edi
c00199c4:	56                   	push   esi
c00199c5:	53                   	push   ebx
c00199c6:	83 ec 1c             	sub    esp,0x1c
c00199c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199d5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199d9:	88 c3                	mov    bl,al
c00199db:	84 c0                	test   al,al
c00199dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199e1:	0f 84 81 00 00 00    	je     c0019a68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199e7:	83 ec 0c             	sub    esp,0xc
c00199ea:	68 ab f3 01 c0       	push   0xc001f3ab
c00199ef:	e8 3c 0b ff ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c00199f4:	83 c4 10             	add    esp,0x10
c00199f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199fb:	3c 01                	cmp    al,0x1
c00199fd:	74 63                	je     c0019a62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199ff:	3c 02                	cmp    al,0x2
c0019a01:	75 53                	jne    c0019a56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a03:	01 f6                	add    esi,esi
c0019a05:	09 ee                	or     esi,ebp
c0019a07:	50                   	push   eax
c0019a08:	89 f0                	mov    eax,esi
c0019a0a:	6a 01                	push   0x1
c0019a0c:	0f b6 f0             	movzx  esi,al
c0019a0f:	c1 e6 06             	shl    esi,0x6
c0019a12:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a1a:	50                   	push   eax
c0019a1b:	57                   	push   edi
c0019a1c:	e8 73 f6 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	a8 01                	test   al,0x1
c0019a26:	74 02                	je     c0019a2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a28:	b3 07                	mov    bl,0x7
c0019a2a:	a8 02                	test   al,0x2
c0019a2c:	74 02                	je     c0019a30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a2e:	b3 03                	mov    bl,0x3
c0019a30:	a8 04                	test   al,0x4
c0019a32:	74 02                	je     c0019a36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a34:	b3 14                	mov    bl,0x14
c0019a36:	a8 08                	test   al,0x8
c0019a38:	74 02                	je     c0019a3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a3a:	b3 03                	mov    bl,0x3
c0019a3c:	a8 10                	test   al,0x10
c0019a3e:	74 02                	je     c0019a42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a40:	b3 15                	mov    bl,0x15
c0019a42:	a8 20                	test   al,0x20
c0019a44:	74 02                	je     c0019a48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a46:	b3 03                	mov    bl,0x3
c0019a48:	a8 40                	test   al,0x40
c0019a4a:	74 02                	je     c0019a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a4c:	b3 16                	mov    bl,0x16
c0019a4e:	84 c0                	test   al,al
c0019a50:	79 16                	jns    c0019a68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a52:	b3 0d                	mov    bl,0xd
c0019a54:	eb 12                	jmp    c0019a68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a56:	3c 03                	cmp    al,0x3
c0019a58:	74 0c                	je     c0019a66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a5a:	3c 04                	cmp    al,0x4
c0019a5c:	75 0a                	jne    c0019a68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a5e:	b3 08                	mov    bl,0x8
c0019a60:	eb 06                	jmp    c0019a68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a62:	b3 13                	mov    bl,0x13
c0019a64:	eb 02                	jmp    c0019a68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a66:	b3 17                	mov    bl,0x17
c0019a68:	83 c4 1c             	add    esp,0x1c
c0019a6b:	88 d8                	mov    al,bl
c0019a6d:	5b                   	pop    ebx
c0019a6e:	5e                   	pop    esi
c0019a6f:	5f                   	pop    edi
c0019a70:	5d                   	pop    ebp
c0019a71:	c3                   	ret    

c0019a72 <IDE::polling(unsigned char, unsigned int)>:
c0019a72:	55                   	push   ebp
c0019a73:	bd 04 00 00 00       	mov    ebp,0x4
c0019a78:	57                   	push   edi
c0019a79:	56                   	push   esi
c0019a7a:	53                   	push   ebx
c0019a7b:	83 ec 0c             	sub    esp,0xc
c0019a7e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a82:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a86:	0f b6 f3             	movzx  esi,bl
c0019a89:	52                   	push   edx
c0019a8a:	6a 0c                	push   0xc
c0019a8c:	56                   	push   esi
c0019a8d:	57                   	push   edi
c0019a8e:	e8 01 f6 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	4d                   	dec    ebp
c0019a97:	75 ed                	jne    c0019a86 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a99:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a9e:	50                   	push   eax
c0019a9f:	6a 0c                	push   0xc
c0019aa1:	56                   	push   esi
c0019aa2:	57                   	push   edi
c0019aa3:	e8 ec f5 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019aa8:	83 c4 10             	add    esp,0x10
c0019aab:	a8 01                	test   al,0x1
c0019aad:	75 17                	jne    c0019ac6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aaf:	a8 20                	test   al,0x20
c0019ab1:	75 0f                	jne    c0019ac2 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019ab3:	4b                   	dec    ebx
c0019ab4:	74 10                	je     c0019ac6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019ab6:	84 c0                	test   al,al
c0019ab8:	78 e4                	js     c0019a9e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019aba:	a8 08                	test   al,0x8
c0019abc:	74 e0                	je     c0019a9e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019abe:	31 c0                	xor    eax,eax
c0019ac0:	eb 06                	jmp    c0019ac8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ac2:	b0 01                	mov    al,0x1
c0019ac4:	eb 02                	jmp    c0019ac8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ac6:	b0 02                	mov    al,0x2
c0019ac8:	83 c4 0c             	add    esp,0xc
c0019acb:	5b                   	pop    ebx
c0019acc:	5e                   	pop    esi
c0019acd:	5f                   	pop    edi
c0019ace:	5d                   	pop    ebp
c0019acf:	c3                   	ret    

c0019ad0 <SATABus::close(int, int, void*)>:
c0019ad0:	31 c0                	xor    eax,eax
c0019ad2:	c3                   	ret    
c0019ad3:	90                   	nop

c0019ad4 <SATABus::detect()>:
c0019ad4:	c3                   	ret    
c0019ad5:	90                   	nop

c0019ad6 <SATABus::SATABus()>:
c0019ad6:	83 ec 0c             	sub    esp,0xc
c0019ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019add:	83 ec 08             	sub    esp,0x8
c0019ae0:	68 e4 f3 01 c0       	push   0xc001f3e4
c0019ae5:	50                   	push   eax
c0019ae6:	e8 c9 21 ff ff       	call   c000bcb4 <HardDiskController::HardDiskController(char const*)>
c0019aeb:	83 c4 10             	add    esp,0x10
c0019aee:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c0019af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af7:	89 10                	mov    DWORD PTR [eax],edx
c0019af9:	83 ec 0c             	sub    esp,0xc
c0019afc:	6a 50                	push   0x50
c0019afe:	e8 50 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019b03:	83 c4 10             	add    esp,0x10
c0019b06:	89 c2                	mov    edx,eax
c0019b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b0c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b12:	83 ec 0c             	sub    esp,0xc
c0019b15:	6a 50                	push   0x50
c0019b17:	e8 69 f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	89 c2                	mov    edx,eax
c0019b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b25:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b2b:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b34:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b3e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b44:	83 ec 0c             	sub    esp,0xc
c0019b47:	6a 03                	push   0x3
c0019b49:	6a 50                	push   0x50
c0019b4b:	51                   	push   ecx
c0019b4c:	52                   	push   edx
c0019b4d:	50                   	push   eax
c0019b4e:	e8 db 00 ff ff       	call   c0009c2e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b53:	83 c4 20             	add    esp,0x20
c0019b56:	90                   	nop
c0019b57:	83 c4 0c             	add    esp,0xc
c0019b5a:	c3                   	ret    
c0019b5b:	90                   	nop

c0019b5c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b60:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b66:	09 c2                	or     edx,eax
c0019b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b72:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b74:	31 c0                	xor    eax,eax
c0019b76:	c1 e9 08             	shr    ecx,0x8
c0019b79:	83 e1 0f             	and    ecx,0xf
c0019b7c:	39 c8                	cmp    eax,ecx
c0019b7e:	74 0a                	je     c0019b8a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b80:	f6 c2 01             	test   dl,0x1
c0019b83:	74 08                	je     c0019b8d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b85:	d1 ea                	shr    edx,1
c0019b87:	40                   	inc    eax
c0019b88:	eb f2                	jmp    c0019b7c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b8a:	83 c8 ff             	or     eax,0xffffffff
c0019b8d:	c3                   	ret    

c0019b8e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b8e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b92:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b95:	89 c2                	mov    edx,eax
c0019b97:	c1 ea 08             	shr    edx,0x8
c0019b9a:	83 e2 0f             	and    edx,0xf
c0019b9d:	fe ca                	dec    dl
c0019b9f:	75 31                	jne    c0019bd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ba1:	83 e0 0f             	and    eax,0xf
c0019ba4:	3c 03                	cmp    al,0x3
c0019ba6:	75 2a                	jne    c0019bd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ba8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019bab:	b8 02 00 00 00       	mov    eax,0x2
c0019bb0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019bb6:	74 1c                	je     c0019bd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bb8:	b8 04 00 00 00       	mov    eax,0x4
c0019bbd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019bc3:	74 0f                	je     c0019bd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bc5:	31 c0                	xor    eax,eax
c0019bc7:	83 fa 03             	cmp    edx,0x3
c0019bca:	0f 94 c0             	sete   al
c0019bcd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019bd1:	c3                   	ret    
c0019bd2:	31 c0                	xor    eax,eax
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bda:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bdd:	0f ba e2 0f          	bt     edx,0xf
c0019be1:	72 f7                	jb     c0019bda <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019be3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019be6:	83 ca 10             	or     edx,0x10
c0019be9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bef:	83 ca 01             	or     edx,0x1
c0019bf2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bf5:	c3                   	ret    

c0019bf6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bfd:	83 e2 fe             	and    edx,0xfffffffe
c0019c00:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c06:	83 e2 ef             	and    edx,0xffffffef
c0019c09:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c0f:	0f ba e2 0e          	bt     edx,0xe
c0019c13:	72 f7                	jb     c0019c0c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c15:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c18:	0f ba e2 0f          	bt     edx,0xf
c0019c1c:	72 ee                	jb     c0019c0c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c20:	55                   	push   ebp
c0019c21:	57                   	push   edi
c0019c22:	56                   	push   esi
c0019c23:	53                   	push   ebx
c0019c24:	83 ec 1c             	sub    esp,0x1c
c0019c27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c2f:	53                   	push   ebx
c0019c30:	56                   	push   esi
c0019c31:	e8 c0 ff ff ff       	call   c0019bf6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c36:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c3a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c40:	83 ec 0c             	sub    esp,0xc
c0019c43:	c1 e5 0a             	shl    ebp,0xa
c0019c46:	01 e8                	add    eax,ebp
c0019c48:	89 03                	mov    DWORD PTR [ebx],eax
c0019c4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c4c:	68 00 04 00 00       	push   0x400
c0019c51:	6a 00                	push   0x0
c0019c53:	50                   	push   eax
c0019c54:	e8 77 68 fe ff       	call   c00004d0 <memset>
c0019c59:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c5f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c63:	01 e8                	add    eax,ebp
c0019c65:	83 c4 1c             	add    esp,0x1c
c0019c68:	89 03                	mov    DWORD PTR [ebx],eax
c0019c6a:	c1 e2 08             	shl    edx,0x8
c0019c6d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c74:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c7a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c80:	01 f8                	add    eax,edi
c0019c82:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c85:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c88:	68 00 01 00 00       	push   0x100
c0019c8d:	6a 00                	push   0x0
c0019c8f:	50                   	push   eax
c0019c90:	e8 3b 68 fe ff       	call   c00004d0 <memset>
c0019c95:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c9b:	01 fa                	add    edx,edi
c0019c9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ca1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019ca4:	c1 e7 0d             	shl    edi,0xd
c0019ca7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019cae:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019cb4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019cba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cbe:	31 ff                	xor    edi,edi
c0019cc0:	83 c4 10             	add    esp,0x10
c0019cc3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019cc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ccd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019cd3:	83 c5 20             	add    ebp,0x20
c0019cd6:	01 f8                	add    eax,edi
c0019cd8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cdb:	52                   	push   edx
c0019cdc:	68 00 01 00 00       	push   0x100
c0019ce1:	6a 00                	push   0x0
c0019ce3:	50                   	push   eax
c0019ce4:	e8 e7 67 fe ff       	call   c00004d0 <memset>
c0019ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019cf6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019cfd:	01 f8                	add    eax,edi
c0019cff:	81 c7 00 01 00 00    	add    edi,0x100
c0019d05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d08:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d0e:	75 b3                	jne    c0019cc3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d10:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d17:	50                   	push   eax
c0019d18:	50                   	push   eax
c0019d19:	53                   	push   ebx
c0019d1a:	56                   	push   esi
c0019d1b:	e8 b6 fe ff ff       	call   c0019bd6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d20:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d27:	83 c4 2c             	add    esp,0x2c
c0019d2a:	5b                   	pop    ebx
c0019d2b:	5e                   	pop    esi
c0019d2c:	5f                   	pop    edi
c0019d2d:	5d                   	pop    ebp
c0019d2e:	c3                   	ret    
c0019d2f:	90                   	nop

c0019d30 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d30:	55                   	push   ebp
c0019d31:	57                   	push   edi
c0019d32:	56                   	push   esi
c0019d33:	53                   	push   ebx
c0019d34:	31 db                	xor    ebx,ebx
c0019d36:	83 ec 0c             	sub    esp,0xc
c0019d39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d3d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d41:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d44:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d4a:	74 7a                	je     c0019dc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d4c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d50:	89 d8                	mov    eax,ebx
c0019d52:	c1 e0 07             	shl    eax,0x7
c0019d55:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d5c:	55                   	push   ebp
c0019d5d:	56                   	push   esi
c0019d5e:	e8 2b fe ff ff       	call   c0019b8e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d63:	5a                   	pop    edx
c0019d64:	83 f8 01             	cmp    eax,0x1
c0019d67:	59                   	pop    ecx
c0019d68:	75 21                	jne    c0019d8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d6a:	50                   	push   eax
c0019d6b:	53                   	push   ebx
c0019d6c:	55                   	push   ebp
c0019d6d:	56                   	push   esi
c0019d6e:	e8 ad fe ff ff       	call   c0019c20 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d73:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d7a:	e8 3a da fe ff       	call   c00077b9 <malloc>
c0019d7f:	89 c5                	mov    ebp,eax
c0019d81:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d84:	e8 43 0d 00 00       	call   c001aacc <SATA::SATA()>
c0019d89:	eb 24                	jmp    c0019daf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d8b:	83 f8 04             	cmp    eax,0x4
c0019d8e:	75 36                	jne    c0019dc6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d90:	51                   	push   ecx
c0019d91:	53                   	push   ebx
c0019d92:	55                   	push   ebp
c0019d93:	56                   	push   esi
c0019d94:	e8 87 fe ff ff       	call   c0019c20 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d99:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019da0:	e8 14 da fe ff       	call   c00077b9 <malloc>
c0019da5:	89 c5                	mov    ebp,eax
c0019da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019daa:	e8 79 10 00 00       	call   c001ae28 <SATAPI::SATAPI()>
c0019daf:	58                   	pop    eax
c0019db0:	5a                   	pop    edx
c0019db1:	55                   	push   ebp
c0019db2:	56                   	push   esi
c0019db3:	e8 b8 1b ff ff       	call   c000b970 <Device::addChild(Device*)>
c0019db8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019dbb:	56                   	push   esi
c0019dbc:	6a 00                	push   0x0
c0019dbe:	53                   	push   ebx
c0019dbf:	55                   	push   ebp
c0019dc0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019dc3:	83 c4 20             	add    esp,0x20
c0019dc6:	d1 ef                	shr    edi,1
c0019dc8:	43                   	inc    ebx
c0019dc9:	83 fb 20             	cmp    ebx,0x20
c0019dcc:	0f 85 72 ff ff ff    	jne    c0019d44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019dd2:	83 c4 0c             	add    esp,0xc
c0019dd5:	5b                   	pop    ebx
c0019dd6:	5e                   	pop    esi
c0019dd7:	5f                   	pop    edi
c0019dd8:	5d                   	pop    ebp
c0019dd9:	c3                   	ret    

c0019dda <SATABus::open(int, int, void*)>:
c0019dda:	83 ec 14             	sub    esp,0x14
c0019ddd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019de1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019de7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ded:	52                   	push   edx
c0019dee:	50                   	push   eax
c0019def:	e8 3c ff ff ff       	call   c0019d30 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019df4:	31 c0                	xor    eax,eax
c0019df6:	83 c4 1c             	add    esp,0x1c
c0019df9:	c3                   	ret    

c0019dfa <ATA::close(int, int, void*)>:
c0019dfa:	83 ec 0c             	sub    esp,0xc
c0019dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e01:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e07:	85 c0                	test   eax,eax
c0019e09:	74 0c                	je     c0019e17 <ATA::close(int, int, void*)+0x1d>
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e10:	50                   	push   eax
c0019e11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	31 c0                	xor    eax,eax
c0019e19:	83 c4 0c             	add    esp,0xc
c0019e1c:	c3                   	ret    
c0019e1d:	90                   	nop

c0019e1e <ATA::powerSaving(PowerSavingLevel)>:
c0019e1e:	c3                   	ret    
c0019e1f:	90                   	nop

c0019e20 <ATA::ATA()>:
c0019e20:	83 ec 0c             	sub    esp,0xc
c0019e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e27:	83 ec 04             	sub    esp,0x4
c0019e2a:	68 00 02 00 00       	push   0x200
c0019e2f:	68 dd f4 01 c0       	push   0xc001f4dd
c0019e34:	50                   	push   eax
c0019e35:	e8 04 1f ff ff       	call   c000bd3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e3a:	83 c4 10             	add    esp,0x10
c0019e3d:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c0019e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e46:	89 10                	mov    DWORD PTR [eax],edx
c0019e48:	90                   	nop
c0019e49:	83 c4 0c             	add    esp,0xc
c0019e4c:	c3                   	ret    
c0019e4d:	90                   	nop

c0019e4e <ATA::flush(bool)>:
c0019e4e:	53                   	push   ebx
c0019e4f:	83 ec 08             	sub    esp,0x8
c0019e52:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e5b:	19 c0                	sbb    eax,eax
c0019e5d:	83 e0 fd             	and    eax,0xfffffffd
c0019e60:	05 ea 00 00 00       	add    eax,0xea
c0019e65:	50                   	push   eax
c0019e66:	6a 07                	push   0x7
c0019e68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e6f:	50                   	push   eax
c0019e70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e76:	e8 59 f1 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e7b:	83 c4 0c             	add    esp,0xc
c0019e7e:	6a 00                	push   0x0
c0019e80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e87:	50                   	push   eax
c0019e88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e8e:	e8 df fb ff ff       	call   c0019a72 <IDE::polling(unsigned char, unsigned int)>
c0019e93:	83 c4 18             	add    esp,0x18
c0019e96:	5b                   	pop    ebx
c0019e97:	c3                   	ret    

c0019e98 <ATA::readyForCommand()>:
c0019e98:	56                   	push   esi
c0019e99:	53                   	push   ebx
c0019e9a:	53                   	push   ebx
c0019e9b:	31 db                	xor    ebx,ebx
c0019e9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ea1:	51                   	push   ecx
c0019ea2:	6a 0c                	push   0xc
c0019ea4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019eab:	50                   	push   eax
c0019eac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019eb2:	e8 dd f1 ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c0019eb7:	83 c4 10             	add    esp,0x10
c0019eba:	a8 88                	test   al,0x88
c0019ebc:	74 1f                	je     c0019edd <ATA::readyForCommand()+0x45>
c0019ebe:	43                   	inc    ebx
c0019ebf:	83 fb 63             	cmp    ebx,0x63
c0019ec2:	7e dd                	jle    c0019ea1 <ATA::readyForCommand()+0x9>
c0019ec4:	83 ec 0c             	sub    esp,0xc
c0019ec7:	6a 0a                	push   0xa
c0019ec9:	e8 da 9b ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c0019ece:	83 c4 10             	add    esp,0x10
c0019ed1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ed7:	75 c8                	jne    c0019ea1 <ATA::readyForCommand()+0x9>
c0019ed9:	31 c0                	xor    eax,eax
c0019edb:	eb 02                	jmp    c0019edf <ATA::readyForCommand()+0x47>
c0019edd:	b0 01                	mov    al,0x1
c0019edf:	5a                   	pop    edx
c0019ee0:	5b                   	pop    ebx
c0019ee1:	5e                   	pop    esi
c0019ee2:	c3                   	ret    
c0019ee3:	90                   	nop

c0019ee4 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ee4:	55                   	push   ebp
c0019ee5:	57                   	push   edi
c0019ee6:	56                   	push   esi
c0019ee7:	53                   	push   ebx
c0019ee8:	83 ec 2c             	sub    esp,0x2c
c0019eeb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019eef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019ef3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019efb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019eff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f07:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f11:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f1b:	c1 e0 06             	shl    eax,0x6
c0019f1e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f26:	74 5d                	je     c0019f85 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f28:	89 fa                	mov    edx,edi
c0019f2a:	89 f0                	mov    eax,esi
c0019f2c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f30:	c1 ea 1c             	shr    edx,0x1c
c0019f33:	89 d1                	mov    ecx,edx
c0019f35:	09 c1                	or     ecx,eax
c0019f37:	74 25                	je     c0019f5e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f39:	31 ed                	xor    ebp,ebp
c0019f3b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f42:	89 fa                	mov    edx,edi
c0019f44:	89 f0                	mov    eax,esi
c0019f46:	0f ad d0             	shrd   eax,edx,cl
c0019f49:	d3 ea                	shr    edx,cl
c0019f4b:	f6 c1 20             	test   cl,0x20
c0019f4e:	74 02                	je     c0019f52 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f50:	89 d0                	mov    eax,edx
c0019f52:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f56:	45                   	inc    ebp
c0019f57:	83 fd 06             	cmp    ebp,0x6
c0019f5a:	75 df                	jne    c0019f3b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f5c:	eb 76                	jmp    c0019fd4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f5e:	89 f0                	mov    eax,esi
c0019f60:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f65:	89 fa                	mov    edx,edi
c0019f67:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f6e:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f7b:	c1 ee 18             	shr    esi,0x18
c0019f7e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f83:	eb 56                	jmp    c0019fdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f85:	6a 00                	push   0x0
c0019f87:	6a 3f                	push   0x3f
c0019f89:	57                   	push   edi
c0019f8a:	56                   	push   esi
c0019f8b:	e8 70 22 00 00       	call   c001c200 <__umoddi3>
c0019f90:	83 c4 10             	add    esp,0x10
c0019f93:	40                   	inc    eax
c0019f94:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f98:	6a 00                	push   0x0
c0019f9a:	68 f0 03 00 00       	push   0x3f0
c0019f9f:	57                   	push   edi
c0019fa0:	56                   	push   esi
c0019fa1:	e8 5a 21 00 00       	call   c001c100 <__udivdi3>
c0019fa6:	83 c4 10             	add    esp,0x10
c0019fa9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019fae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fb5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fba:	6a 00                	push   0x0
c0019fbc:	6a 3f                	push   0x3f
c0019fbe:	57                   	push   edi
c0019fbf:	56                   	push   esi
c0019fc0:	e8 3b 21 00 00       	call   c001c100 <__udivdi3>
c0019fc5:	83 c4 10             	add    esp,0x10
c0019fc8:	89 c6                	mov    esi,eax
c0019fca:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fcf:	83 e6 0f             	and    esi,0xf
c0019fd2:	eb 07                	jmp    c0019fdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fd4:	31 f6                	xor    esi,esi
c0019fd6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fdb:	bf 01 00 00 00       	mov    edi,0x1
c0019fe0:	50                   	push   eax
c0019fe1:	6a 00                	push   0x0
c0019fe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fea:	50                   	push   eax
c0019feb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fef:	e8 ee f1 ff ff       	call   c00191e2 <IDE::enableIRQs(unsigned char, bool)>
c0019ff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ff7:	e8 9c fe ff ff       	call   c0019e98 <ATA::readyForCommand()>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	84 c0                	test   al,al
c001a001:	0f 84 4e 02 00 00    	je     c001a255 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a007:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a00d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a013:	c1 e0 04             	shl    eax,0x4
c001a016:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a01d:	09 c6                	or     esi,eax
c001a01f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a024:	75 05                	jne    c001a02b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a026:	83 ce a0             	or     esi,0xffffffa0
c001a029:	eb 03                	jmp    c001a02e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a02b:	83 ce e0             	or     esi,0xffffffe0
c001a02e:	89 f0                	mov    eax,esi
c001a030:	0f b6 f0             	movzx  esi,al
c001a033:	56                   	push   esi
c001a034:	6a 06                	push   0x6
c001a036:	51                   	push   ecx
c001a037:	52                   	push   edx
c001a038:	e8 97 ef ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a03d:	83 c4 10             	add    esp,0x10
c001a040:	6a 00                	push   0x0
c001a042:	6a 01                	push   0x1
c001a044:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a04b:	50                   	push   eax
c001a04c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a052:	e8 7d ef ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a05f:	75 6e                	jne    c001a0cf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a061:	6a 00                	push   0x0
c001a063:	6a 08                	push   0x8
c001a065:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a06c:	50                   	push   eax
c001a06d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a073:	e8 5c ef ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a078:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a07d:	50                   	push   eax
c001a07e:	6a 09                	push   0x9
c001a080:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a087:	50                   	push   eax
c001a088:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a08e:	e8 41 ef ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a093:	83 c4 20             	add    esp,0x20
c001a096:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a09b:	50                   	push   eax
c001a09c:	6a 0a                	push   0xa
c001a09e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0a5:	50                   	push   eax
c001a0a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0ac:	e8 23 ef ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a0b6:	50                   	push   eax
c001a0b7:	6a 0b                	push   0xb
c001a0b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0c0:	50                   	push   eax
c001a0c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c7:	e8 08 ef ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0cc:	83 c4 20             	add    esp,0x20
c001a0cf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0d4:	50                   	push   eax
c001a0d5:	6a 02                	push   0x2
c001a0d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0de:	50                   	push   eax
c001a0df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0e5:	e8 ea ee ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ea:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a0ef:	50                   	push   eax
c001a0f0:	6a 03                	push   0x3
c001a0f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f9:	50                   	push   eax
c001a0fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a100:	e8 cf ee ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a105:	83 c4 20             	add    esp,0x20
c001a108:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a10d:	50                   	push   eax
c001a10e:	6a 04                	push   0x4
c001a110:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a117:	50                   	push   eax
c001a118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a11e:	e8 b1 ee ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a123:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a128:	50                   	push   eax
c001a129:	6a 05                	push   0x5
c001a12b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a132:	50                   	push   eax
c001a133:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a139:	e8 96 ee ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13e:	83 c4 20             	add    esp,0x20
c001a141:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a146:	0f 94 c0             	sete   al
c001a149:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a14e:	74 09                	je     c001a159 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a150:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a157:	eb 07                	jmp    c001a160 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a159:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a160:	0f b6 c0             	movzx  eax,al
c001a163:	50                   	push   eax
c001a164:	6a 07                	push   0x7
c001a166:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16d:	50                   	push   eax
c001a16e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a174:	e8 5b ee ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a179:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	85 f6                	test   esi,esi
c001a182:	0f 84 ae 00 00 00    	je     c001a236 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a188:	50                   	push   eax
c001a189:	6a 01                	push   0x1
c001a18b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a192:	50                   	push   eax
c001a193:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a199:	e8 d4 f8 ff ff       	call   c0019a72 <IDE::polling(unsigned char, unsigned int)>
c001a19e:	83 c4 10             	add    esp,0x10
c001a1a1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a1a7:	84 c0                	test   al,al
c001a1a9:	74 20                	je     c001a1cb <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1ab:	0f b6 f8             	movzx  edi,al
c001a1ae:	0f b6 d2             	movzx  edx,dl
c001a1b1:	57                   	push   edi
c001a1b2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a1b9:	50                   	push   eax
c001a1ba:	52                   	push   edx
c001a1bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c1:	e8 fc f7 ff ff       	call   c00199c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1c6:	e9 87 00 00 00       	jmp    c001a252 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1cb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1d0:	74 33                	je     c001a205 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1d2:	31 ed                	xor    ebp,ebp
c001a1d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1d8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1dc:	50                   	push   eax
c001a1dd:	50                   	push   eax
c001a1de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e5:	50                   	push   eax
c001a1e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ec:	e8 d1 ed ff ff       	call   c0018fc2 <IDE::getBase(unsigned char)>
c001a1f1:	89 c2                	mov    edx,eax
c001a1f3:	89 f8                	mov    eax,edi
c001a1f5:	66 ef                	out    dx,ax
c001a1f7:	45                   	inc    ebp
c001a1f8:	83 c4 10             	add    esp,0x10
c001a1fb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a201:	75 d1                	jne    c001a1d4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a203:	eb 23                	jmp    c001a228 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a205:	0f b6 d2             	movzx  edx,dl
c001a208:	51                   	push   ecx
c001a209:	51                   	push   ecx
c001a20a:	52                   	push   edx
c001a20b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a211:	e8 ac ed ff ff       	call   c0018fc2 <IDE::getBase(unsigned char)>
c001a216:	b9 00 01 00 00       	mov    ecx,0x100
c001a21b:	89 c2                	mov    edx,eax
c001a21d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a221:	fc                   	cld    
c001a222:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a225:	83 c4 10             	add    esp,0x10
c001a228:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a230:	4e                   	dec    esi
c001a231:	e9 4a ff ff ff       	jmp    c001a180 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a236:	31 ff                	xor    edi,edi
c001a238:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a23d:	74 16                	je     c001a255 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a23f:	50                   	push   eax
c001a240:	50                   	push   eax
c001a241:	31 c0                	xor    eax,eax
c001a243:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a248:	0f 94 c0             	sete   al
c001a24b:	50                   	push   eax
c001a24c:	53                   	push   ebx
c001a24d:	e8 fc fb ff ff       	call   c0019e4e <ATA::flush(bool)>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	83 c4 2c             	add    esp,0x2c
c001a258:	89 f8                	mov    eax,edi
c001a25a:	5b                   	pop    ebx
c001a25b:	5e                   	pop    esi
c001a25c:	5f                   	pop    edi
c001a25d:	5d                   	pop    ebp
c001a25e:	c3                   	ret    
c001a25f:	90                   	nop

c001a260 <ATA::read(unsigned long long, int, void*)>:
c001a260:	57                   	push   edi
c001a261:	b8 04 00 00 00       	mov    eax,0x4
c001a266:	56                   	push   esi
c001a267:	53                   	push   ebx
c001a268:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a26c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a270:	8d 7a ff             	lea    edi,[edx-0x1]
c001a273:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a277:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a27b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a281:	77 25                	ja     c001a2a8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a283:	b8 06 00 00 00       	mov    eax,0x6
c001a288:	85 f6                	test   esi,esi
c001a28a:	74 1c                	je     c001a2a8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a28c:	50                   	push   eax
c001a28d:	50                   	push   eax
c001a28e:	6a 00                	push   0x0
c001a290:	56                   	push   esi
c001a291:	52                   	push   edx
c001a292:	53                   	push   ebx
c001a293:	51                   	push   ecx
c001a294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a298:	e8 47 fc ff ff       	call   c0019ee4 <ATA::access(unsigned long long, int, void*, bool)>
c001a29d:	83 c4 20             	add    esp,0x20
c001a2a0:	85 c0                	test   eax,eax
c001a2a2:	0f 95 c0             	setne  al
c001a2a5:	0f b6 c0             	movzx  eax,al
c001a2a8:	5b                   	pop    ebx
c001a2a9:	5e                   	pop    esi
c001a2aa:	5f                   	pop    edi
c001a2ab:	c3                   	ret    

c001a2ac <ATA::write(unsigned long long, int, void*)>:
c001a2ac:	57                   	push   edi
c001a2ad:	b8 04 00 00 00       	mov    eax,0x4
c001a2b2:	56                   	push   esi
c001a2b3:	53                   	push   ebx
c001a2b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2bc:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2c3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2c7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2cd:	77 25                	ja     c001a2f4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2cf:	b8 06 00 00 00       	mov    eax,0x6
c001a2d4:	85 f6                	test   esi,esi
c001a2d6:	74 1c                	je     c001a2f4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2d8:	50                   	push   eax
c001a2d9:	50                   	push   eax
c001a2da:	6a 01                	push   0x1
c001a2dc:	56                   	push   esi
c001a2dd:	52                   	push   edx
c001a2de:	53                   	push   ebx
c001a2df:	51                   	push   ecx
c001a2e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e4:	e8 fb fb ff ff       	call   c0019ee4 <ATA::access(unsigned long long, int, void*, bool)>
c001a2e9:	83 c4 20             	add    esp,0x20
c001a2ec:	85 c0                	test   eax,eax
c001a2ee:	0f 95 c0             	setne  al
c001a2f1:	0f b6 c0             	movzx  eax,al
c001a2f4:	5b                   	pop    ebx
c001a2f5:	5e                   	pop    esi
c001a2f6:	5f                   	pop    edi
c001a2f7:	c3                   	ret    

c001a2f8 <ATA::detectCHS()>:
c001a2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2fc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a302:	c1 e0 06             	shl    eax,0x6
c001a305:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a30b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a315:	c7 44 24 04 34 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f434
c001a31d:	e9 91 5e ff ff       	jmp    c00101b3 <KePanic(char const*)>

c001a322 <ATA::open(int, int, void*)>:
c001a322:	53                   	push   ebx
c001a323:	83 ec 08             	sub    esp,0x8
c001a326:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a32a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a32e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a332:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a338:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a33e:	c1 e0 06             	shl    eax,0x6
c001a341:	01 d0                	add    eax,edx
c001a343:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a34a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a350:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a357:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a361:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a367:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a36e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a375:	75 0c                	jne    c001a383 <ATA::open(int, int, void*)+0x61>
c001a377:	83 ec 0c             	sub    esp,0xc
c001a37a:	53                   	push   ebx
c001a37b:	e8 78 ff ff ff       	call   c001a2f8 <ATA::detectCHS()>
c001a380:	83 c4 10             	add    esp,0x10
c001a383:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a389:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a38f:	c1 e0 06             	shl    eax,0x6
c001a392:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a399:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3a3:	d1 e8                	shr    eax,1
c001a3a5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3ab:	6a 04                	push   0x4
c001a3ad:	6a 0c                	push   0xc
c001a3af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3b6:	50                   	push   eax
c001a3b7:	52                   	push   edx
c001a3b8:	e8 17 ec ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3bd:	90                   	nop
c001a3be:	90                   	nop
c001a3bf:	6a 00                	push   0x0
c001a3c1:	6a 0c                	push   0xc
c001a3c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3ca:	50                   	push   eax
c001a3cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3d1:	e8 fe eb ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3d6:	83 c4 14             	add    esp,0x14
c001a3d9:	53                   	push   ebx
c001a3da:	e8 c7 19 ff ff       	call   c000bda6 <PhysicalDisk::startCache()>
c001a3df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3e2:	e8 77 2a ff ff       	call   c000ce5e <createPartitionsForDisk(PhysicalDisk*)>
c001a3e7:	31 c0                	xor    eax,eax
c001a3e9:	83 c4 18             	add    esp,0x18
c001a3ec:	5b                   	pop    ebx
c001a3ed:	c3                   	ret    

c001a3ee <ATAPI::write(unsigned long long, int, void*)>:
c001a3ee:	b8 03 00 00 00       	mov    eax,0x3
c001a3f3:	c3                   	ret    

c001a3f4 <ATAPI::close(int, int, void*)>:
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a401:	85 c0                	test   eax,eax
c001a403:	74 0c                	je     c001a411 <ATAPI::close(int, int, void*)+0x1d>
c001a405:	83 ec 0c             	sub    esp,0xc
c001a408:	8b 10                	mov    edx,DWORD PTR [eax]
c001a40a:	50                   	push   eax
c001a40b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a40e:	83 c4 10             	add    esp,0x10
c001a411:	31 c0                	xor    eax,eax
c001a413:	83 c4 0c             	add    esp,0xc
c001a416:	c3                   	ret    
c001a417:	90                   	nop

c001a418 <ATAPI::ATAPI()>:
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41f:	83 ec 04             	sub    esp,0x4
c001a422:	68 00 08 00 00       	push   0x800
c001a427:	68 7d f5 01 c0       	push   0xc001f57d
c001a42c:	50                   	push   eax
c001a42d:	e8 0c 19 ff ff       	call   c000bd3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a432:	83 c4 10             	add    esp,0x10
c001a435:	ba 98 f4 01 c0       	mov    edx,0xc001f498
c001a43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43e:	89 10                	mov    DWORD PTR [eax],edx
c001a440:	90                   	nop
c001a441:	83 c4 0c             	add    esp,0xc
c001a444:	c3                   	ret    
c001a445:	90                   	nop

c001a446 <ATAPI::readyForCommand()>:
c001a446:	56                   	push   esi
c001a447:	53                   	push   ebx
c001a448:	53                   	push   ebx
c001a449:	31 db                	xor    ebx,ebx
c001a44b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a44f:	51                   	push   ecx
c001a450:	6a 0c                	push   0xc
c001a452:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a459:	50                   	push   eax
c001a45a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a460:	e8 2f ec ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001a465:	83 c4 10             	add    esp,0x10
c001a468:	a8 88                	test   al,0x88
c001a46a:	74 25                	je     c001a491 <ATAPI::readyForCommand()+0x4b>
c001a46c:	43                   	inc    ebx
c001a46d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a473:	7e da                	jle    c001a44f <ATAPI::readyForCommand()+0x9>
c001a475:	83 ec 0c             	sub    esp,0xc
c001a478:	68 5e 01 00 00       	push   0x15e
c001a47d:	e8 26 96 ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c001a482:	83 c4 10             	add    esp,0x10
c001a485:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a48b:	75 c2                	jne    c001a44f <ATAPI::readyForCommand()+0x9>
c001a48d:	31 c0                	xor    eax,eax
c001a48f:	eb 02                	jmp    c001a493 <ATAPI::readyForCommand()+0x4d>
c001a491:	b0 01                	mov    al,0x1
c001a493:	5a                   	pop    edx
c001a494:	5b                   	pop    ebx
c001a495:	5e                   	pop    esi
c001a496:	c3                   	ret    
c001a497:	90                   	nop

c001a498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a498:	55                   	push   ebp
c001a499:	57                   	push   edi
c001a49a:	56                   	push   esi
c001a49b:	53                   	push   ebx
c001a49c:	83 ec 20             	sub    esp,0x20
c001a49f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a4a3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a4a7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4af:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a4b3:	6a 01                	push   0x1
c001a4b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4bc:	50                   	push   eax
c001a4bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4c3:	e8 1a ed ff ff       	call   c00191e2 <IDE::enableIRQs(unsigned char, bool)>
c001a4c8:	5e                   	pop    esi
c001a4c9:	58                   	pop    eax
c001a4ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4d1:	50                   	push   eax
c001a4d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4d8:	e8 d1 ea ff ff       	call   c0018fae <IDE::prepareInterrupt(unsigned char)>
c001a4dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a4e0:	e8 61 ff ff ff       	call   c001a446 <ATAPI::readyForCommand()>
c001a4e5:	83 c4 10             	add    esp,0x10
c001a4e8:	84 c0                	test   al,al
c001a4ea:	75 0a                	jne    c001a4f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a4ec:	bb 01 00 00 00       	mov    ebx,0x1
c001a4f1:	e9 57 02 00 00       	jmp    c001a74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a4f6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a4fc:	c1 e0 04             	shl    eax,0x4
c001a4ff:	0f b6 c0             	movzx  eax,al
c001a502:	50                   	push   eax
c001a503:	6a 06                	push   0x6
c001a505:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a50c:	50                   	push   eax
c001a50d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a513:	e8 bc ea ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a518:	6a 00                	push   0x0
c001a51a:	6a 01                	push   0x1
c001a51c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a523:	50                   	push   eax
c001a524:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a52a:	e8 a5 ea ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a52f:	83 c4 20             	add    esp,0x20
c001a532:	0f b6 c3             	movzx  eax,bl
c001a535:	0f b6 df             	movzx  ebx,bh
c001a538:	50                   	push   eax
c001a539:	6a 04                	push   0x4
c001a53b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a542:	50                   	push   eax
c001a543:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a549:	e8 86 ea ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a54e:	53                   	push   ebx
c001a54f:	6a 05                	push   0x5
c001a551:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a558:	50                   	push   eax
c001a559:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a55f:	e8 70 ea ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a564:	83 c4 20             	add    esp,0x20
c001a567:	68 a0 00 00 00       	push   0xa0
c001a56c:	6a 07                	push   0x7
c001a56e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a575:	50                   	push   eax
c001a576:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a57c:	e8 53 ea ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a581:	83 c4 0c             	add    esp,0xc
c001a584:	6a 01                	push   0x1
c001a586:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a58d:	50                   	push   eax
c001a58e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a594:	e8 d9 f4 ff ff       	call   c0019a72 <IDE::polling(unsigned char, unsigned int)>
c001a599:	83 c4 10             	add    esp,0x10
c001a59c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a5a2:	84 c0                	test   al,al
c001a5a4:	74 23                	je     c001a5c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a5a6:	0f b6 d8             	movzx  ebx,al
c001a5a9:	0f b6 d2             	movzx  edx,dl
c001a5ac:	53                   	push   ebx
c001a5ad:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a5b4:	50                   	push   eax
c001a5b5:	52                   	push   edx
c001a5b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5bc:	e8 01 f4 ff ff       	call   c00199c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a5c1:	83 c4 10             	add    esp,0x10
c001a5c4:	e9 84 01 00 00       	jmp    c001a74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5c9:	0f b6 d2             	movzx  edx,dl
c001a5cc:	53                   	push   ebx
c001a5cd:	53                   	push   ebx
c001a5ce:	52                   	push   edx
c001a5cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d5:	e8 e8 e9 ff ff       	call   c0018fc2 <IDE::getBase(unsigned char)>
c001a5da:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a5de:	b9 06 00 00 00       	mov    ecx,0x6
c001a5e3:	89 c2                	mov    edx,eax
c001a5e5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a5e8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a5ec:	83 c4 10             	add    esp,0x10
c001a5ef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a5f5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a5fc:	85 db                	test   ebx,ebx
c001a5fe:	0f 84 ec 00 00 00    	je     c001a6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a604:	51                   	push   ecx
c001a605:	51                   	push   ecx
c001a606:	52                   	push   edx
c001a607:	50                   	push   eax
c001a608:	e8 35 eb ff ff       	call   c0019142 <IDE::waitInterrupt(unsigned char)>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	84 c0                	test   al,al
c001a612:	0f 84 d4 fe ff ff    	je     c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a618:	56                   	push   esi
c001a619:	56                   	push   esi
c001a61a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a621:	50                   	push   eax
c001a622:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a628:	e8 81 e9 ff ff       	call   c0018fae <IDE::prepareInterrupt(unsigned char)>
c001a62d:	83 c4 0c             	add    esp,0xc
c001a630:	6a 04                	push   0x4
c001a632:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a639:	50                   	push   eax
c001a63a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a640:	e8 4f ea ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001a645:	83 c4 0c             	add    esp,0xc
c001a648:	89 c6                	mov    esi,eax
c001a64a:	6a 05                	push   0x5
c001a64c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a653:	50                   	push   eax
c001a654:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a65a:	e8 35 ea ff ff       	call   c0019094 <IDE::read(unsigned char, unsigned char)>
c001a65f:	89 f1                	mov    ecx,esi
c001a661:	0f b6 c0             	movzx  eax,al
c001a664:	0f b6 f1             	movzx  esi,cl
c001a667:	c1 e0 08             	shl    eax,0x8
c001a66a:	09 c6                	or     esi,eax
c001a66c:	d1 fe                	sar    esi,1
c001a66e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a672:	83 c4 10             	add    esp,0x10
c001a675:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a67a:	74 41                	je     c001a6bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a67c:	31 c9                	xor    ecx,ecx
c001a67e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a684:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a68b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a68f:	75 0a                	jne    c001a69b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a691:	01 c9                	add    ecx,ecx
c001a693:	01 cd                	add    ebp,ecx
c001a695:	4b                   	dec    ebx
c001a696:	e9 54 ff ff ff       	jmp    c001a5ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a69b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a6a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a6a4:	51                   	push   ecx
c001a6a5:	51                   	push   ecx
c001a6a6:	52                   	push   edx
c001a6a7:	50                   	push   eax
c001a6a8:	e8 15 e9 ff ff       	call   c0018fc2 <IDE::getBase(unsigned char)>
c001a6ad:	89 c2                	mov    edx,eax
c001a6af:	89 f0                	mov    eax,esi
c001a6b1:	66 ef                	out    dx,ax
c001a6b3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a6b7:	83 c4 10             	add    esp,0x10
c001a6ba:	41                   	inc    ecx
c001a6bb:	eb c1                	jmp    c001a67e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a6bd:	31 f6                	xor    esi,esi
c001a6bf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6c5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6cc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a6d0:	75 06                	jne    c001a6d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a6d2:	01 f6                	add    esi,esi
c001a6d4:	01 f5                	add    ebp,esi
c001a6d6:	eb bd                	jmp    c001a695 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a6d8:	51                   	push   ecx
c001a6d9:	51                   	push   ecx
c001a6da:	52                   	push   edx
c001a6db:	50                   	push   eax
c001a6dc:	e8 e1 e8 ff ff       	call   c0018fc2 <IDE::getBase(unsigned char)>
c001a6e1:	89 c2                	mov    edx,eax
c001a6e3:	66 ed                	in     ax,dx
c001a6e5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a6ea:	83 c4 10             	add    esp,0x10
c001a6ed:	46                   	inc    esi
c001a6ee:	eb cf                	jmp    c001a6bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a6f0:	51                   	push   ecx
c001a6f1:	51                   	push   ecx
c001a6f2:	52                   	push   edx
c001a6f3:	50                   	push   eax
c001a6f4:	e8 49 ea ff ff       	call   c0019142 <IDE::waitInterrupt(unsigned char)>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	84 c0                	test   al,al
c001a6fe:	0f 84 e8 fd ff ff    	je     c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a704:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a709:	52                   	push   edx
c001a70a:	52                   	push   edx
c001a70b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a712:	50                   	push   eax
c001a713:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a719:	e8 90 e8 ff ff       	call   c0018fae <IDE::prepareInterrupt(unsigned char)>
c001a71e:	83 c4 10             	add    esp,0x10
c001a721:	50                   	push   eax
c001a722:	50                   	push   eax
c001a723:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a72a:	50                   	push   eax
c001a72b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a731:	e8 8c e8 ff ff       	call   c0018fc2 <IDE::getBase(unsigned char)>
c001a736:	8d 50 07             	lea    edx,[eax+0x7]
c001a739:	ec                   	in     al,dx
c001a73a:	83 c4 10             	add    esp,0x10
c001a73d:	a8 88                	test   al,0x88
c001a73f:	74 0a                	je     c001a74b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a741:	4b                   	dec    ebx
c001a742:	75 dd                	jne    c001a721 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a744:	bb 02 00 00 00       	mov    ebx,0x2
c001a749:	eb 02                	jmp    c001a74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a74b:	31 db                	xor    ebx,ebx
c001a74d:	83 c4 1c             	add    esp,0x1c
c001a750:	89 d8                	mov    eax,ebx
c001a752:	5b                   	pop    ebx
c001a753:	5e                   	pop    esi
c001a754:	5f                   	pop    edi
c001a755:	5d                   	pop    ebp
c001a756:	c3                   	ret    
c001a757:	90                   	nop

c001a758 <ATAPI::diskRemoved()>:
c001a758:	53                   	push   ebx
c001a759:	83 ec 14             	sub    esp,0x14
c001a75c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a760:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a767:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a76d:	e8 6c 24 ff ff       	call   c000cbde <LogicalDisk::unmount()>
c001a772:	58                   	pop    eax
c001a773:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a779:	e8 a6 2d ff ff       	call   c000d524 <VCache::writeWriteBuffer()>
c001a77e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a784:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a788:	83 c4 18             	add    esp,0x18
c001a78b:	5b                   	pop    ebx
c001a78c:	e9 83 2d ff ff       	jmp    c000d514 <VCache::invalidateReadBuffer()>
c001a791:	90                   	nop

c001a792 <ATAPI::eject()>:
c001a792:	57                   	push   edi
c001a793:	b9 03 00 00 00       	mov    ecx,0x3
c001a798:	53                   	push   ebx
c001a799:	83 ec 14             	sub    esp,0x14
c001a79c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7a0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7a4:	fc                   	cld    
c001a7a5:	31 c0                	xor    eax,eax
c001a7a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7a9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7ae:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7b3:	50                   	push   eax
c001a7b4:	50                   	push   eax
c001a7b5:	6a 00                	push   0x0
c001a7b7:	6a 00                	push   0x0
c001a7b9:	6a 00                	push   0x0
c001a7bb:	6a 02                	push   0x2
c001a7bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7c1:	50                   	push   eax
c001a7c2:	53                   	push   ebx
c001a7c3:	e8 d0 fc ff ff       	call   c001a498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7c8:	83 c4 14             	add    esp,0x14
c001a7cb:	53                   	push   ebx
c001a7cc:	e8 87 ff ff ff       	call   c001a758 <ATAPI::diskRemoved()>
c001a7d1:	83 c4 24             	add    esp,0x24
c001a7d4:	31 c0                	xor    eax,eax
c001a7d6:	5b                   	pop    ebx
c001a7d7:	5f                   	pop    edi
c001a7d8:	c3                   	ret    
c001a7d9:	90                   	nop

c001a7da <ATAPI::diskInserted()>:
c001a7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7de:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a7e5:	c3                   	ret    

c001a7e6 <ATAPI::detectMedia()>:
c001a7e6:	56                   	push   esi
c001a7e7:	53                   	push   ebx
c001a7e8:	83 ec 28             	sub    esp,0x28
c001a7eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7ef:	6a 0c                	push   0xc
c001a7f1:	6a 00                	push   0x0
c001a7f3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7f7:	56                   	push   esi
c001a7f8:	e8 d3 5c fe ff       	call   c00004d0 <memset>
c001a7fd:	58                   	pop    eax
c001a7fe:	5a                   	pop    edx
c001a7ff:	6a 00                	push   0x0
c001a801:	6a 00                	push   0x0
c001a803:	6a 00                	push   0x0
c001a805:	6a 00                	push   0x0
c001a807:	56                   	push   esi
c001a808:	53                   	push   ebx
c001a809:	e8 8a fc ff ff       	call   c001a498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a80e:	83 c4 1c             	add    esp,0x1c
c001a811:	6a 0c                	push   0xc
c001a813:	6a 00                	push   0x0
c001a815:	56                   	push   esi
c001a816:	e8 b5 5c fe ff       	call   c00004d0 <memset>
c001a81b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a820:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a825:	59                   	pop    ecx
c001a826:	58                   	pop    eax
c001a827:	6a 01                	push   0x1
c001a829:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a82d:	50                   	push   eax
c001a82e:	6a 00                	push   0x0
c001a830:	6a 12                	push   0x12
c001a832:	56                   	push   esi
c001a833:	53                   	push   ebx
c001a834:	e8 5f fc ff ff       	call   c001a498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a839:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a83d:	83 c4 20             	add    esp,0x20
c001a840:	83 e0 7f             	and    eax,0x7f
c001a843:	3c 70                	cmp    al,0x70
c001a845:	74 15                	je     c001a85c <ATAPI::detectMedia()+0x76>
c001a847:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a84e:	75 0c                	jne    c001a85c <ATAPI::detectMedia()+0x76>
c001a850:	83 ec 0c             	sub    esp,0xc
c001a853:	53                   	push   ebx
c001a854:	e8 81 ff ff ff       	call   c001a7da <ATAPI::diskInserted()>
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a860:	83 e0 0f             	and    eax,0xf
c001a863:	3c 02                	cmp    al,0x2
c001a865:	75 1b                	jne    c001a882 <ATAPI::detectMedia()+0x9c>
c001a867:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a86c:	75 2d                	jne    c001a89b <ATAPI::detectMedia()+0xb5>
c001a86e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a875:	74 24                	je     c001a89b <ATAPI::detectMedia()+0xb5>
c001a877:	83 ec 0c             	sub    esp,0xc
c001a87a:	53                   	push   ebx
c001a87b:	e8 d8 fe ff ff       	call   c001a758 <ATAPI::diskRemoved()>
c001a880:	eb 16                	jmp    c001a898 <ATAPI::detectMedia()+0xb2>
c001a882:	84 c0                	test   al,al
c001a884:	75 15                	jne    c001a89b <ATAPI::detectMedia()+0xb5>
c001a886:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a88d:	75 0c                	jne    c001a89b <ATAPI::detectMedia()+0xb5>
c001a88f:	83 ec 0c             	sub    esp,0xc
c001a892:	53                   	push   ebx
c001a893:	e8 42 ff ff ff       	call   c001a7da <ATAPI::diskInserted()>
c001a898:	83 c4 10             	add    esp,0x10
c001a89b:	83 c4 24             	add    esp,0x24
c001a89e:	5b                   	pop    ebx
c001a89f:	5e                   	pop    esi
c001a8a0:	c3                   	ret    
c001a8a1:	90                   	nop

c001a8a2 <ATAPI::open(int, int, void*)>:
c001a8a2:	56                   	push   esi
c001a8a3:	53                   	push   ebx
c001a8a4:	50                   	push   eax
c001a8a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8b1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a8b7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a8bd:	c1 e0 06             	shl    eax,0x6
c001a8c0:	01 d0                	add    eax,edx
c001a8c2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a8c9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a8cf:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a8d6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a8e0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a8e6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a8ed:	6a 04                	push   0x4
c001a8ef:	6a 0c                	push   0xc
c001a8f1:	51                   	push   ecx
c001a8f2:	52                   	push   edx
c001a8f3:	e8 dc e6 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8f8:	90                   	nop
c001a8f9:	90                   	nop
c001a8fa:	6a 00                	push   0x0
c001a8fc:	6a 0c                	push   0xc
c001a8fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a905:	50                   	push   eax
c001a906:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a90c:	e8 c3 e6 ff ff       	call   c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a911:	83 c4 14             	add    esp,0x14
c001a914:	68 74 01 00 00       	push   0x174
c001a919:	e8 9b ce fe ff       	call   c00077b9 <malloc>
c001a91e:	83 c4 0c             	add    esp,0xc
c001a921:	89 c6                	mov    esi,eax
c001a923:	6a 00                	push   0x0
c001a925:	68 ff ff ff 7f       	push   0x7fffffff
c001a92a:	6a 00                	push   0x0
c001a92c:	6a 00                	push   0x0
c001a92e:	53                   	push   ebx
c001a92f:	68 34 f6 01 c0       	push   0xc001f634
c001a934:	50                   	push   eax
c001a935:	e8 f0 20 ff ff       	call   c000ca2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a93a:	83 c4 14             	add    esp,0x14
c001a93d:	56                   	push   esi
c001a93e:	e8 9d 21 ff ff       	call   c000cae0 <LogicalDisk::assignDriveLetter()>
c001a943:	5a                   	pop    edx
c001a944:	0f be c0             	movsx  eax,al
c001a947:	59                   	pop    ecx
c001a948:	50                   	push   eax
c001a949:	68 80 f4 01 c0       	push   0xc001f480
c001a94e:	e8 dd fb fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001a953:	58                   	pop    eax
c001a954:	5a                   	pop    edx
c001a955:	56                   	push   esi
c001a956:	53                   	push   ebx
c001a957:	e8 14 10 ff ff       	call   c000b970 <Device::addChild(Device*)>
c001a95c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a962:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a965:	e8 3c 14 ff ff       	call   c000bda6 <PhysicalDisk::startCache()>
c001a96a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a974:	e8 6d fe ff ff       	call   c001a7e6 <ATAPI::detectMedia()>
c001a979:	83 c4 14             	add    esp,0x14
c001a97c:	31 c0                	xor    eax,eax
c001a97e:	5b                   	pop    ebx
c001a97f:	5e                   	pop    esi
c001a980:	c3                   	ret    
c001a981:	90                   	nop

c001a982 <ATAPI::read(unsigned long long, int, void*)>:
c001a982:	55                   	push   ebp
c001a983:	57                   	push   edi
c001a984:	56                   	push   esi
c001a985:	53                   	push   ebx
c001a986:	83 ec 1c             	sub    esp,0x1c
c001a989:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a98d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a991:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a995:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a99c:	74 3c                	je     c001a9da <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a99e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a9a2:	b9 03 00 00 00       	mov    ecx,0x3
c001a9a7:	fc                   	cld    
c001a9a8:	31 c0                	xor    eax,eax
c001a9aa:	0f ce                	bswap  esi
c001a9ac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9ae:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a9b3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a9b7:	89 e8                	mov    eax,ebp
c001a9b9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a9bd:	50                   	push   eax
c001a9be:	50                   	push   eax
c001a9bf:	55                   	push   ebp
c001a9c0:	c1 e5 0b             	shl    ebp,0xb
c001a9c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a9c7:	6a 00                	push   0x0
c001a9c9:	55                   	push   ebp
c001a9ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9ce:	50                   	push   eax
c001a9cf:	53                   	push   ebx
c001a9d0:	e8 c3 fa ff ff       	call   c001a498 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9d5:	83 c4 20             	add    esp,0x20
c001a9d8:	eb 1a                	jmp    c001a9f4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a9da:	83 ec 0c             	sub    esp,0xc
c001a9dd:	53                   	push   ebx
c001a9de:	e8 03 fe ff ff       	call   c001a7e6 <ATAPI::detectMedia()>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9ed:	75 af                	jne    c001a99e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a9ef:	b8 02 00 00 00       	mov    eax,0x2
c001a9f4:	83 c4 1c             	add    esp,0x1c
c001a9f7:	5b                   	pop    ebx
c001a9f8:	5e                   	pop    esi
c001a9f9:	5f                   	pop    edi
c001a9fa:	5d                   	pop    ebp
c001a9fb:	c3                   	ret    

c001a9fc <SATA::close(int, int, void*)>:
c001a9fc:	83 ec 0c             	sub    esp,0xc
c001a9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa09:	85 c0                	test   eax,eax
c001aa0b:	74 0c                	je     c001aa19 <SATA::close(int, int, void*)+0x1d>
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa12:	50                   	push   eax
c001aa13:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	31 c0                	xor    eax,eax
c001aa1b:	83 c4 0c             	add    esp,0xc
c001aa1e:	c3                   	ret    
c001aa1f:	90                   	nop

c001aa20 <SATA::powerSaving(PowerSavingLevel)>:
c001aa20:	c3                   	ret    
c001aa21:	90                   	nop

c001aa22 <SATA::open(int, int, void*)>:
c001aa22:	56                   	push   esi
c001aa23:	53                   	push   ebx
c001aa24:	50                   	push   eax
c001aa25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa2d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa37:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa3d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa4b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa55:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa5b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa62:	e8 2e d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa67:	89 c6                	mov    esi,eax
c001aa69:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa6f:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa75:	e8 1b d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa7a:	39 c6                	cmp    esi,eax
c001aa7c:	74 10                	je     c001aa8e <SATA::open(int, int, void*)+0x6c>
c001aa7e:	83 ec 0c             	sub    esp,0xc
c001aa81:	68 c8 f4 01 c0       	push   0xc001f4c8
c001aa86:	e8 28 57 ff ff       	call   c00101b3 <KePanic(char const*)>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	83 ec 0c             	sub    esp,0xc
c001aa91:	6a 02                	push   0x2
c001aa93:	e8 ed e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aa98:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa9e:	6a 03                	push   0x3
c001aaa0:	50                   	push   eax
c001aaa1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aaa7:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aaad:	e8 82 ee fe ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aab2:	83 c4 14             	add    esp,0x14
c001aab5:	53                   	push   ebx
c001aab6:	e8 eb 12 ff ff       	call   c000bda6 <PhysicalDisk::startCache()>
c001aabb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aabe:	e8 9b 23 ff ff       	call   c000ce5e <createPartitionsForDisk(PhysicalDisk*)>
c001aac3:	83 c4 14             	add    esp,0x14
c001aac6:	31 c0                	xor    eax,eax
c001aac8:	5b                   	pop    ebx
c001aac9:	5e                   	pop    esi
c001aaca:	c3                   	ret    
c001aacb:	90                   	nop

c001aacc <SATA::SATA()>:
c001aacc:	83 ec 0c             	sub    esp,0xc
c001aacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad3:	83 ec 04             	sub    esp,0x4
c001aad6:	68 00 02 00 00       	push   0x200
c001aadb:	68 dc f4 01 c0       	push   0xc001f4dc
c001aae0:	50                   	push   eax
c001aae1:	e8 58 12 ff ff       	call   c000bd3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	ba 4c f5 01 c0       	mov    edx,0xc001f54c
c001aaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf2:	89 10                	mov    DWORD PTR [eax],edx
c001aaf4:	90                   	nop
c001aaf5:	83 c4 0c             	add    esp,0xc
c001aaf8:	c3                   	ret    
c001aaf9:	90                   	nop

c001aafa <SATA::access(unsigned long long, int, void*, bool)>:
c001aafa:	55                   	push   ebp
c001aafb:	57                   	push   edi
c001aafc:	56                   	push   esi
c001aafd:	53                   	push   ebx
c001aafe:	83 ec 2c             	sub    esp,0x2c
c001ab01:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab05:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab0d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab15:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab1e:	7e 10                	jle    c001ab30 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	68 ec f4 01 c0       	push   0xc001f4ec
c001ab28:	e8 86 56 ff ff       	call   c00101b3 <KePanic(char const*)>
c001ab2d:	83 c4 10             	add    esp,0x10
c001ab30:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab36:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab46:	89 d0                	mov    eax,edx
c001ab48:	c1 e0 07             	shl    eax,0x7
c001ab4b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab4f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab59:	51                   	push   ecx
c001ab5a:	8d 42 02             	lea    eax,[edx+0x2]
c001ab5d:	51                   	push   ecx
c001ab5e:	c1 e0 07             	shl    eax,0x7
c001ab61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab65:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab69:	50                   	push   eax
c001ab6a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab70:	e8 e7 ef ff ff       	call   c0019b5c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab79:	83 c4 10             	add    esp,0x10
c001ab7c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab85:	0f 84 4f 01 00 00    	je     c001acda <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab8b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab8f:	c1 e0 09             	shl    eax,0x9
c001ab92:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab9b:	74 0e                	je     c001abab <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab9d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001aba3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001aba7:	89 c1                	mov    ecx,eax
c001aba9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abaf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abb5:	8d 42 02             	lea    eax,[edx+0x2]
c001abb8:	c1 e0 07             	shl    eax,0x7
c001abbb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abbf:	8b 00                	mov    eax,DWORD PTR [eax]
c001abc1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001abc7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001abcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abd1:	c1 e1 05             	shl    ecx,0x5
c001abd4:	01 c8                	add    eax,ecx
c001abd6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001abda:	83 e1 01             	and    ecx,0x1
c001abdd:	89 ce                	mov    esi,ecx
c001abdf:	8a 08                	mov    cl,BYTE PTR [eax]
c001abe1:	c1 e6 06             	shl    esi,0x6
c001abe4:	83 e1 bf             	and    ecx,0xffffffbf
c001abe7:	09 f1                	or     ecx,esi
c001abe9:	88 08                	mov    BYTE PTR [eax],cl
c001abeb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001abed:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001abf3:	81 c9 05 00 01 00    	or     ecx,0x10005
c001abf9:	89 08                	mov    DWORD PTR [eax],ecx
c001abfb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac01:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac07:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac0d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac10:	50                   	push   eax
c001ac11:	68 90 00 00 00       	push   0x90
c001ac16:	6a 00                	push   0x0
c001ac18:	56                   	push   esi
c001ac19:	e8 b2 58 fe ff       	call   c00004d0 <memset>
c001ac1e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac24:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac28:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac2e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac36:	83 c4 10             	add    esp,0x10
c001ac39:	48                   	dec    eax
c001ac3a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac3f:	89 c1                	mov    ecx,eax
c001ac41:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac47:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac4c:	09 c8                	or     eax,ecx
c001ac4e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac54:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac57:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac5e:	66 25 00 7f          	and    ax,0x7f00
c001ac62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac66:	66 0d 27 80          	or     ax,0x8027
c001ac6a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac6f:	66 89 06             	mov    WORD PTR [esi],ax
c001ac72:	19 c0                	sbb    eax,eax
c001ac74:	83 e0 f0             	and    eax,0xfffffff0
c001ac77:	83 c0 35             	add    eax,0x35
c001ac7a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac7d:	89 e8                	mov    eax,ebp
c001ac7f:	c1 e8 10             	shr    eax,0x10
c001ac82:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac85:	89 e8                	mov    eax,ebp
c001ac87:	c1 e8 18             	shr    eax,0x18
c001ac8a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac8d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac91:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac98:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac9f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001aca3:	89 d6                	mov    esi,edx
c001aca5:	31 c0                	xor    eax,eax
c001aca7:	c1 e6 07             	shl    esi,0x7
c001acaa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001acae:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001acb4:	80 e1 88             	and    cl,0x88
c001acb7:	74 0a                	je     c001acc3 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001acb9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acbe:	74 0a                	je     c001acca <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001acc0:	40                   	inc    eax
c001acc1:	eb eb                	jmp    c001acae <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001acc3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acc8:	75 17                	jne    c001ace1 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	68 25 f5 01 c0       	push   0xc001f525
c001acd2:	e8 59 f8 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	b8 01 00 00 00       	mov    eax,0x1
c001acdf:	eb 5d                	jmp    c001ad3e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ace1:	b8 01 00 00 00       	mov    eax,0x1
c001ace6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001acea:	c1 e2 07             	shl    edx,0x7
c001aced:	d3 e0                	shl    eax,cl
c001acef:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001acf3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001acf9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001acff:	85 c8                	test   eax,ecx
c001ad01:	74 16                	je     c001ad19 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad03:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad09:	0f ba e1 1e          	bt     ecx,0x1e
c001ad0d:	73 ea                	jae    c001acf9 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad0f:	83 ec 0c             	sub    esp,0xc
c001ad12:	68 33 f5 01 c0       	push   0xc001f533
c001ad17:	eb b9                	jmp    c001acd2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad19:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad1f:	0f ba e0 1e          	bt     eax,0x1e
c001ad23:	72 b5                	jb     c001acda <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad25:	31 c0                	xor    eax,eax
c001ad27:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad2c:	75 10                	jne    c001ad3e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad2e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad34:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad3e:	83 c4 2c             	add    esp,0x2c
c001ad41:	5b                   	pop    ebx
c001ad42:	5e                   	pop    esi
c001ad43:	5f                   	pop    edi
c001ad44:	5d                   	pop    ebp
c001ad45:	c3                   	ret    

c001ad46 <SATA::read(unsigned long long, int, void*)>:
c001ad46:	57                   	push   edi
c001ad47:	b8 04 00 00 00       	mov    eax,0x4
c001ad4c:	56                   	push   esi
c001ad4d:	53                   	push   ebx
c001ad4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad56:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad61:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad67:	77 25                	ja     c001ad8e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad69:	b8 06 00 00 00       	mov    eax,0x6
c001ad6e:	85 f6                	test   esi,esi
c001ad70:	74 1c                	je     c001ad8e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad72:	50                   	push   eax
c001ad73:	50                   	push   eax
c001ad74:	6a 00                	push   0x0
c001ad76:	56                   	push   esi
c001ad77:	52                   	push   edx
c001ad78:	53                   	push   ebx
c001ad79:	51                   	push   ecx
c001ad7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad7e:	e8 77 fd ff ff       	call   c001aafa <SATA::access(unsigned long long, int, void*, bool)>
c001ad83:	83 c4 20             	add    esp,0x20
c001ad86:	85 c0                	test   eax,eax
c001ad88:	0f 95 c0             	setne  al
c001ad8b:	0f b6 c0             	movzx  eax,al
c001ad8e:	5b                   	pop    ebx
c001ad8f:	5e                   	pop    esi
c001ad90:	5f                   	pop    edi
c001ad91:	c3                   	ret    

c001ad92 <SATA::write(unsigned long long, int, void*)>:
c001ad92:	55                   	push   ebp
c001ad93:	b8 04 00 00 00       	mov    eax,0x4
c001ad98:	57                   	push   edi
c001ad99:	56                   	push   esi
c001ad9a:	53                   	push   ebx
c001ad9b:	83 ec 0c             	sub    esp,0xc
c001ad9e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ada2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ada6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ada9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001adad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001adb1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001adb7:	77 3d                	ja     c001adf6 <SATA::write(unsigned long long, int, void*)+0x64>
c001adb9:	b8 06 00 00 00       	mov    eax,0x6
c001adbe:	85 ed                	test   ebp,ebp
c001adc0:	74 34                	je     c001adf6 <SATA::write(unsigned long long, int, void*)+0x64>
c001adc2:	c1 e3 09             	shl    ebx,0x9
c001adc5:	01 eb                	add    ebx,ebp
c001adc7:	89 d6                	mov    esi,edx
c001adc9:	89 cf                	mov    edi,ecx
c001adcb:	83 c6 01             	add    esi,0x1
c001adce:	83 d7 00             	adc    edi,0x0
c001add1:	50                   	push   eax
c001add2:	50                   	push   eax
c001add3:	6a 01                	push   0x1
c001add5:	55                   	push   ebp
c001add6:	81 c5 00 02 00 00    	add    ebp,0x200
c001addc:	6a 01                	push   0x1
c001adde:	51                   	push   ecx
c001addf:	52                   	push   edx
c001ade0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ade4:	e8 11 fd ff ff       	call   c001aafa <SATA::access(unsigned long long, int, void*, bool)>
c001ade9:	83 c4 20             	add    esp,0x20
c001adec:	89 f2                	mov    edx,esi
c001adee:	89 f9                	mov    ecx,edi
c001adf0:	39 dd                	cmp    ebp,ebx
c001adf2:	75 d3                	jne    c001adc7 <SATA::write(unsigned long long, int, void*)+0x35>
c001adf4:	31 c0                	xor    eax,eax
c001adf6:	83 c4 0c             	add    esp,0xc
c001adf9:	5b                   	pop    ebx
c001adfa:	5e                   	pop    esi
c001adfb:	5f                   	pop    edi
c001adfc:	5d                   	pop    ebp
c001adfd:	c3                   	ret    

c001adfe <SATAPI::write(unsigned long long, int, void*)>:
c001adfe:	b8 03 00 00 00       	mov    eax,0x3
c001ae03:	c3                   	ret    

c001ae04 <SATAPI::close(int, int, void*)>:
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae11:	85 c0                	test   eax,eax
c001ae13:	74 0c                	je     c001ae21 <SATAPI::close(int, int, void*)+0x1d>
c001ae15:	83 ec 0c             	sub    esp,0xc
c001ae18:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae1a:	50                   	push   eax
c001ae1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	31 c0                	xor    eax,eax
c001ae23:	83 c4 0c             	add    esp,0xc
c001ae26:	c3                   	ret    
c001ae27:	90                   	nop

c001ae28 <SATAPI::SATAPI()>:
c001ae28:	83 ec 0c             	sub    esp,0xc
c001ae2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2f:	83 ec 04             	sub    esp,0x4
c001ae32:	68 00 08 00 00       	push   0x800
c001ae37:	68 7c f5 01 c0       	push   0xc001f57c
c001ae3c:	50                   	push   eax
c001ae3d:	e8 fc 0e ff ff       	call   c000bd3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae42:	83 c4 10             	add    esp,0x10
c001ae45:	ba 84 f6 01 c0       	mov    edx,0xc001f684
c001ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4e:	89 10                	mov    DWORD PTR [eax],edx
c001ae50:	90                   	nop
c001ae51:	83 c4 0c             	add    esp,0xc
c001ae54:	c3                   	ret    
c001ae55:	90                   	nop

c001ae56 <SATAPI::diskRemoved()>:
c001ae56:	c3                   	ret    
c001ae57:	90                   	nop

c001ae58 <SATAPI::diskInserted()>:
c001ae58:	83 ec 18             	sub    esp,0x18
c001ae5b:	68 88 f5 01 c0       	push   0xc001f588
c001ae60:	e8 cb f6 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001ae65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae69:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ae70:	83 c4 1c             	add    esp,0x1c
c001ae73:	c3                   	ret    

c001ae74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ae74:	55                   	push   ebp
c001ae75:	57                   	push   edi
c001ae76:	56                   	push   esi
c001ae77:	53                   	push   ebx
c001ae78:	83 ec 38             	sub    esp,0x38
c001ae7b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ae7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ae83:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae87:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae8b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae8f:	68 a0 f5 01 c0       	push   0xc001f5a0
c001ae94:	e8 97 f6 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001ae99:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ae9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aea5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aea9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aeaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeb3:	83 c0 02             	add    eax,0x2
c001aeb6:	c1 e0 07             	shl    eax,0x7
c001aeb9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aebd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aec5:	c1 e0 07             	shl    eax,0x7
c001aec8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aecc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aed0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aeda:	58                   	pop    eax
c001aedb:	5a                   	pop    edx
c001aedc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aee0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aee6:	e8 71 ec ff ff       	call   c0019b5c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aeeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	b8 01 00 00 00       	mov    eax,0x1
c001aef7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aefc:	0f 84 49 02 00 00    	je     c001b14b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001af02:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001af0e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af14:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af1e:	c1 e1 05             	shl    ecx,0x5
c001af21:	01 c8                	add    eax,ecx
c001af23:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af25:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af2b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af31:	89 08                	mov    DWORD PTR [eax],ecx
c001af33:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af39:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af3f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af45:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af48:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af4b:	50                   	push   eax
c001af4c:	68 90 00 00 00       	push   0x90
c001af51:	6a 00                	push   0x0
c001af53:	53                   	push   ebx
c001af54:	e8 77 55 fe ff       	call   c00004d0 <memset>
c001af59:	b9 0c 00 00 00       	mov    ecx,0xc
c001af5e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001af62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af64:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001af6a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001af6e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001af74:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001af78:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af7c:	48                   	dec    eax
c001af7d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af82:	89 c1                	mov    ecx,eax
c001af84:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001af8a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af8f:	09 c8                	or     eax,ecx
c001af91:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001af97:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001af9a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001afa1:	66 25 00 7f          	and    ax,0x7f00
c001afa5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001afa9:	66 0d 27 80          	or     ax,0x8027
c001afad:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001afb1:	66 89 03             	mov    WORD PTR [ebx],ax
c001afb4:	89 d0                	mov    eax,edx
c001afb6:	c1 ea 18             	shr    edx,0x18
c001afb9:	c1 e8 10             	shr    eax,0x10
c001afbc:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001afbf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001afc2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001afc6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001afc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afcd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001afd0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afd4:	83 c4 10             	add    esp,0x10
c001afd7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001afdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afdf:	31 c0                	xor    eax,eax
c001afe1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001afe7:	80 e1 88             	and    cl,0x88
c001afea:	74 0a                	je     c001aff6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001afec:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001aff1:	74 0a                	je     c001affd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001aff3:	40                   	inc    eax
c001aff4:	eb eb                	jmp    c001afe1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001aff6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001affb:	75 43                	jne    c001b040 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001affd:	83 ec 0c             	sub    esp,0xc
c001b000:	68 ba f5 01 c0       	push   0xc001f5ba
c001b005:	e8 26 f5 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001b00a:	58                   	pop    eax
c001b00b:	5a                   	pop    edx
c001b00c:	68 cf f5 01 c0       	push   0xc001f5cf
c001b011:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b017:	e8 1a d7 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b01c:	59                   	pop    ecx
c001b01d:	5b                   	pop    ebx
c001b01e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b022:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b028:	e8 c9 eb ff ff       	call   c0019bf6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b02d:	5e                   	pop    esi
c001b02e:	5f                   	pop    edi
c001b02f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b033:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b039:	e8 98 eb ff ff       	call   c0019bd6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b03e:	eb 48                	jmp    c001b088 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b040:	be 01 00 00 00       	mov    esi,0x1
c001b045:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b049:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b04d:	d3 e6                	shl    esi,cl
c001b04f:	c1 e7 07             	shl    edi,0x7
c001b052:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b058:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b05d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b061:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b067:	85 c6                	test   esi,eax
c001b069:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b06f:	0f 84 a3 00 00 00    	je     c001b118 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b075:	0f ba e0 1e          	bt     eax,0x1e
c001b079:	73 1a                	jae    c001b095 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b07b:	83 ec 0c             	sub    esp,0xc
c001b07e:	68 e1 f5 01 c0       	push   0xc001f5e1
c001b083:	e8 a8 f4 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001b088:	83 c4 10             	add    esp,0x10
c001b08b:	b8 01 00 00 00       	mov    eax,0x1
c001b090:	e9 b6 00 00 00       	jmp    c001b14b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b095:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b09b:	83 f8 0d             	cmp    eax,0xd
c001b09e:	77 0a                	ja     c001b0aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b0a0:	83 ec 0c             	sub    esp,0xc
c001b0a3:	68 c8 00 00 00       	push   0xc8
c001b0a8:	eb 28                	jmp    c001b0d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0aa:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b0b0:	83 f8 0d             	cmp    eax,0xd
c001b0b3:	77 0a                	ja     c001b0bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b0b5:	83 ec 0c             	sub    esp,0xc
c001b0b8:	68 58 02 00 00       	push   0x258
c001b0bd:	eb 13                	jmp    c001b0d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0bf:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b0c5:	83 f8 06             	cmp    eax,0x6
c001b0c8:	77 10                	ja     c001b0da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b0ca:	83 ec 0c             	sub    esp,0xc
c001b0cd:	68 dc 05 00 00       	push   0x5dc
c001b0d2:	e8 d1 89 ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b0de:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b0e1:	75 06                	jne    c001b0e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b0e3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b0e7:	74 15                	je     c001b0fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0e9:	83 fb 06             	cmp    ebx,0x6
c001b0ec:	77 10                	ja     c001b0fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0ee:	83 ec 0c             	sub    esp,0xc
c001b0f1:	68 c4 09 00 00       	push   0x9c4
c001b0f6:	e8 ad 89 ff ff       	call   c0013aa8 <milliTenthSleep(unsigned int)>
c001b0fb:	83 c4 10             	add    esp,0x10
c001b0fe:	43                   	inc    ebx
c001b0ff:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b105:	0f 85 56 ff ff ff    	jne    c001b061 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b10b:	83 ec 0c             	sub    esp,0xc
c001b10e:	68 f4 f5 01 c0       	push   0xc001f5f4
c001b113:	e9 6b ff ff ff       	jmp    c001b083 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b118:	0f ba e0 1e          	bt     eax,0x1e
c001b11c:	73 0d                	jae    c001b12b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b11e:	83 ec 0c             	sub    esp,0xc
c001b121:	68 08 f6 01 c0       	push   0xc001f608
c001b126:	e9 58 ff ff ff       	jmp    c001b083 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b12b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b130:	74 17                	je     c001b149 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b132:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b137:	74 10                	je     c001b149 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b139:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b13f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b143:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b147:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b149:	31 c0                	xor    eax,eax
c001b14b:	83 c4 2c             	add    esp,0x2c
c001b14e:	5b                   	pop    ebx
c001b14f:	5e                   	pop    esi
c001b150:	5f                   	pop    edi
c001b151:	5d                   	pop    ebp
c001b152:	c3                   	ret    
c001b153:	90                   	nop

c001b154 <SATAPI::eject()>:
c001b154:	57                   	push   edi
c001b155:	b9 03 00 00 00       	mov    ecx,0x3
c001b15a:	83 ec 18             	sub    esp,0x18
c001b15d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b161:	fc                   	cld    
c001b162:	31 c0                	xor    eax,eax
c001b164:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b166:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b16b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b170:	50                   	push   eax
c001b171:	6a 00                	push   0x0
c001b173:	6a 00                	push   0x0
c001b175:	6a 00                	push   0x0
c001b177:	6a 00                	push   0x0
c001b179:	6a 02                	push   0x2
c001b17b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b17f:	50                   	push   eax
c001b180:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b184:	e8 eb fc ff ff       	call   c001ae74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b189:	31 c0                	xor    eax,eax
c001b18b:	83 c4 38             	add    esp,0x38
c001b18e:	5f                   	pop    edi
c001b18f:	c3                   	ret    

c001b190 <SATAPI::detectMedia()>:
c001b190:	53                   	push   ebx
c001b191:	83 ec 14             	sub    esp,0x14
c001b194:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b198:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b19e:	e8 81 23 ff ff       	call   c000d524 <VCache::writeWriteBuffer()>
c001b1a3:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1ad:	83 c4 18             	add    esp,0x18
c001b1b0:	5b                   	pop    ebx
c001b1b1:	e9 5e 23 ff ff       	jmp    c000d514 <VCache::invalidateReadBuffer()>

c001b1b6 <SATAPI::open(int, int, void*)>:
c001b1b6:	56                   	push   esi
c001b1b7:	53                   	push   ebx
c001b1b8:	51                   	push   ecx
c001b1b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1c1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b1cb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b1d1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b1db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1df:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b1e9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b1ef:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b1f6:	e8 9a c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1fb:	89 c6                	mov    esi,eax
c001b1fd:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b203:	81 c6 00 10 00 00    	add    esi,0x1000
c001b209:	e8 87 c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b20e:	39 c6                	cmp    esi,eax
c001b210:	74 10                	je     c001b222 <SATAPI::open(int, int, void*)+0x6c>
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	68 1d f6 01 c0       	push   0xc001f61d
c001b21a:	e8 94 4f ff ff       	call   c00101b3 <KePanic(char const*)>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	83 ec 0c             	sub    esp,0xc
c001b225:	6a 02                	push   0x2
c001b227:	e8 59 e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b22c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b232:	6a 03                	push   0x3
c001b234:	50                   	push   eax
c001b235:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b23b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b241:	e8 ee e6 fe ff       	call   c0009934 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b246:	83 c4 14             	add    esp,0x14
c001b249:	68 74 01 00 00       	push   0x174
c001b24e:	e8 66 c5 fe ff       	call   c00077b9 <malloc>
c001b253:	83 c4 0c             	add    esp,0xc
c001b256:	89 c6                	mov    esi,eax
c001b258:	6a 00                	push   0x0
c001b25a:	68 ff ff ff 7f       	push   0x7fffffff
c001b25f:	6a 00                	push   0x0
c001b261:	6a 00                	push   0x0
c001b263:	53                   	push   ebx
c001b264:	68 33 f6 01 c0       	push   0xc001f633
c001b269:	50                   	push   eax
c001b26a:	e8 bb 17 ff ff       	call   c000ca2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b26f:	83 c4 14             	add    esp,0x14
c001b272:	56                   	push   esi
c001b273:	e8 68 18 ff ff       	call   c000cae0 <LogicalDisk::assignDriveLetter()>
c001b278:	5a                   	pop    edx
c001b279:	0f be c0             	movsx  eax,al
c001b27c:	59                   	pop    ecx
c001b27d:	50                   	push   eax
c001b27e:	68 80 f4 01 c0       	push   0xc001f480
c001b283:	e8 a8 f2 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001b288:	58                   	pop    eax
c001b289:	5a                   	pop    edx
c001b28a:	56                   	push   esi
c001b28b:	53                   	push   ebx
c001b28c:	e8 df 06 ff ff       	call   c000b970 <Device::addChild(Device*)>
c001b291:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b297:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b29a:	e8 07 0b ff ff       	call   c000bda6 <PhysicalDisk::startCache()>
c001b29f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b2a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2a9:	e8 e2 fe ff ff       	call   c001b190 <SATAPI::detectMedia()>
c001b2ae:	83 c4 14             	add    esp,0x14
c001b2b1:	31 c0                	xor    eax,eax
c001b2b3:	5b                   	pop    ebx
c001b2b4:	5e                   	pop    esi
c001b2b5:	c3                   	ret    

c001b2b6 <SATAPI::read(unsigned long long, int, void*)>:
c001b2b6:	57                   	push   edi
c001b2b7:	56                   	push   esi
c001b2b8:	53                   	push   ebx
c001b2b9:	83 ec 3c             	sub    esp,0x3c
c001b2bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2c0:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b2c4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b2c8:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b2cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2d4:	68 41 f6 01 c0       	push   0xc001f641
c001b2d9:	e8 52 f2 fe ff       	call   c000a530 <Dbg::kprintf(char const*, ...)>
c001b2de:	83 c4 10             	add    esp,0x10
c001b2e1:	83 fe 04             	cmp    esi,0x4
c001b2e4:	7e 10                	jle    c001b2f6 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b2e6:	83 ec 0c             	sub    esp,0xc
c001b2e9:	68 52 f6 01 c0       	push   0xc001f652
c001b2ee:	e8 c0 4e ff ff       	call   c00101b3 <KePanic(char const*)>
c001b2f3:	83 c4 10             	add    esp,0x10
c001b2f6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b2fc:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b302:	51                   	push   ecx
c001b303:	50                   	push   eax
c001b304:	83 c0 02             	add    eax,0x2
c001b307:	c1 e0 07             	shl    eax,0x7
c001b30a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b310:	50                   	push   eax
c001b311:	52                   	push   edx
c001b312:	e8 09 e9 ff ff       	call   c0019c20 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b317:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b31b:	b9 03 00 00 00       	mov    ecx,0x3
c001b320:	fc                   	cld    
c001b321:	31 c0                	xor    eax,eax
c001b323:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b325:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b32a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b32f:	83 c4 0c             	add    esp,0xc
c001b332:	6a 00                	push   0x0
c001b334:	6a 00                	push   0x0
c001b336:	6a 00                	push   0x0
c001b338:	6a 00                	push   0x0
c001b33a:	6a 02                	push   0x2
c001b33c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b340:	50                   	push   eax
c001b341:	53                   	push   ebx
c001b342:	e8 2d fb ff ff       	call   c001ae74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b347:	83 c4 20             	add    esp,0x20
c001b34a:	85 c0                	test   eax,eax
c001b34c:	75 44                	jne    c001b392 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b34e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b352:	b9 03 00 00 00       	mov    ecx,0x3
c001b357:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b35d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b362:	0f c8                	bswap  eax
c001b364:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b368:	89 f0                	mov    eax,esi
c001b36a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b36e:	50                   	push   eax
c001b36f:	56                   	push   esi
c001b370:	c1 e6 0b             	shl    esi,0xb
c001b373:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b377:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b37b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b37f:	56                   	push   esi
c001b380:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b384:	50                   	push   eax
c001b385:	53                   	push   ebx
c001b386:	e8 e9 fa ff ff       	call   c001ae74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b38b:	83 c4 20             	add    esp,0x20
c001b38e:	85 c0                	test   eax,eax
c001b390:	74 14                	je     c001b3a6 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b392:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b396:	83 ec 0c             	sub    esp,0xc
c001b399:	53                   	push   ebx
c001b39a:	e8 f1 fd ff ff       	call   c001b190 <SATAPI::detectMedia()>
c001b39f:	83 c4 10             	add    esp,0x10
c001b3a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3a6:	83 c4 30             	add    esp,0x30
c001b3a9:	5b                   	pop    ebx
c001b3aa:	5e                   	pop    esi
c001b3ab:	5f                   	pop    edi
c001b3ac:	c3                   	ret    
c001b3ad:	90                   	nop

c001b3ae <IOAPIC::close(int, int, void*)>:
c001b3ae:	b8 00 00 00 00       	mov    eax,0x0
c001b3b3:	c3                   	ret    

c001b3b4 <apicGetBase()>:
c001b3b4:	55                   	push   ebp
c001b3b5:	89 e5                	mov    ebp,esp
c001b3b7:	83 ec 18             	sub    esp,0x18
c001b3ba:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3bf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b3c5:	83 e0 08             	and    eax,0x8
c001b3c8:	84 c0                	test   al,al
c001b3ca:	75 07                	jne    c001b3d3 <apicGetBase()+0x1f>
c001b3cc:	b8 00 00 00 00       	mov    eax,0x0
c001b3d1:	eb 21                	jmp    c001b3f4 <apicGetBase()+0x40>
c001b3d3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3d8:	83 ec 08             	sub    esp,0x8
c001b3db:	6a 1b                	push   0x1b
c001b3dd:	50                   	push   eax
c001b3de:	e8 0f ba fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3e9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b3ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3ef:	25 00 00 ff ff       	and    eax,0xffff0000
c001b3f4:	c9                   	leave  
c001b3f5:	c3                   	ret    

c001b3f6 <IOAPIC::IOAPIC()>:
c001b3f6:	83 ec 0c             	sub    esp,0xc
c001b3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3fd:	83 ec 08             	sub    esp,0x8
c001b400:	68 b4 f6 01 c0       	push   0xc001f6b4
c001b405:	50                   	push   eax
c001b406:	e8 fd 06 ff ff       	call   c000bb08 <Device::Device(char const*)>
c001b40b:	83 c4 10             	add    esp,0x10
c001b40e:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001b413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b417:	89 10                	mov    DWORD PTR [eax],edx
c001b419:	90                   	nop
c001b41a:	83 c4 0c             	add    esp,0xc
c001b41d:	c3                   	ret    

c001b41e <apicOpen()>:
c001b41e:	55                   	push   ebp
c001b41f:	89 e5                	mov    ebp,esp
c001b421:	53                   	push   ebx
c001b422:	83 ec 34             	sub    esp,0x34
c001b425:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b42a:	83 f0 01             	xor    eax,0x1
c001b42d:	84 c0                	test   al,al
c001b42f:	0f 84 9d 00 00 00    	je     c001b4d2 <apicOpen()+0xb4>
c001b435:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b439:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b43e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b441:	0f 83 84 00 00 00    	jae    c001b4cb <apicOpen()+0xad>
c001b447:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b454:	e8 60 c3 fe ff       	call   c00077b9 <malloc>
c001b459:	83 c4 10             	add    esp,0x10
c001b45c:	89 c3                	mov    ebx,eax
c001b45e:	83 ec 0c             	sub    esp,0xc
c001b461:	53                   	push   ebx
c001b462:	e8 8f ff ff ff       	call   c001b3f6 <IOAPIC::IOAPIC()>
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b46d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b470:	25 ff 00 00 00       	and    eax,0xff
c001b475:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b478:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b47f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b484:	40                   	inc    eax
c001b485:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b48a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b48f:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b495:	83 ec 08             	sub    esp,0x8
c001b498:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b49b:	50                   	push   eax
c001b49c:	e8 cf 04 ff ff       	call   c000b970 <Device::addChild(Device*)>
c001b4a1:	83 c4 10             	add    esp,0x10
c001b4a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4a9:	83 c0 08             	add    eax,0x8
c001b4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4ae:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4b1:	25 ff 00 00 00       	and    eax,0xff
c001b4b6:	6a 00                	push   0x0
c001b4b8:	6a 00                	push   0x0
c001b4ba:	50                   	push   eax
c001b4bb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4be:	ff d2                	call   edx
c001b4c0:	83 c4 10             	add    esp,0x10
c001b4c3:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b4c6:	e9 6e ff ff ff       	jmp    c001b439 <apicOpen()+0x1b>
c001b4cb:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b4d2:	e8 dd fe ff ff       	call   c001b3b4 <apicGetBase()>
c001b4d7:	05 f0 00 00 00       	add    eax,0xf0
c001b4dc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4df:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4e4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4e7:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b4ee:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b4f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4f8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b4fb:	89 10                	mov    DWORD PTR [eax],edx
c001b4fd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b504:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b509:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b50c:	7d 70                	jge    c001b57e <apicOpen()+0x160>
c001b50e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b511:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b518:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b51b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b51e:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b525:	c1 e8 08             	shr    eax,0x8
c001b528:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b52c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b52f:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b536:	c1 e8 18             	shr    eax,0x18
c001b539:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b53c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b540:	75 37                	jne    c001b579 <apicOpen()+0x15b>
c001b542:	e8 6d fe ff ff       	call   c001b3b4 <apicGetBase()>
c001b547:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b54b:	75 07                	jne    c001b554 <apicOpen()+0x136>
c001b54d:	ba 60 03 00 00       	mov    edx,0x360
c001b552:	eb 05                	jmp    c001b559 <apicOpen()+0x13b>
c001b554:	ba 50 03 00 00       	mov    edx,0x350
c001b559:	01 d0                	add    eax,edx
c001b55b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b55e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b561:	8b 00                	mov    eax,DWORD PTR [eax]
c001b563:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b566:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b56d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b571:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b574:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b577:	89 10                	mov    DWORD PTR [eax],edx
c001b579:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b57c:	eb 86                	jmp    c001b504 <apicOpen()+0xe6>
c001b57e:	90                   	nop
c001b57f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b582:	c9                   	leave  
c001b583:	c3                   	ret    

c001b584 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b584:	55                   	push   ebp
c001b585:	89 e5                	mov    ebp,esp
c001b587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b58a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b590:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b593:	72 1d                	jb     c001b5b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b598:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b59e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5a1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b5a7:	01 d0                	add    eax,edx
c001b5a9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5ac:	73 04                	jae    c001b5b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5ae:	b0 01                	mov    al,0x1
c001b5b0:	eb 02                	jmp    c001b5b4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b5b2:	b0 00                	mov    al,0x0
c001b5b4:	5d                   	pop    ebp
c001b5b5:	c3                   	ret    

c001b5b6 <IOAPIC::read(int)>:
c001b5b6:	55                   	push   ebp
c001b5b7:	89 e5                	mov    ebp,esp
c001b5b9:	83 ec 10             	sub    esp,0x10
c001b5bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b5c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b5cb:	31 d2                	xor    edx,edx
c001b5cd:	88 c2                	mov    dl,al
c001b5cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5d2:	89 10                	mov    DWORD PTR [eax],edx
c001b5d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5d7:	83 c0 10             	add    eax,0x10
c001b5da:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5dc:	c9                   	leave  
c001b5dd:	c3                   	ret    

c001b5de <IOAPIC::open(int, int, void*)>:
c001b5de:	55                   	push   ebp
c001b5df:	89 e5                	mov    ebp,esp
c001b5e1:	57                   	push   edi
c001b5e2:	56                   	push   esi
c001b5e3:	53                   	push   ebx
c001b5e4:	83 ec 04             	sub    esp,0x4
c001b5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b5ed:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5fc:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b606:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b615:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b61f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b628:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b62e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b631:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b637:	89 c6                	mov    esi,eax
c001b639:	81 e6 ff 00 00 00    	and    esi,0xff
c001b63f:	89 d0                	mov    eax,edx
c001b641:	ba 00 00 00 00       	mov    edx,0x0
c001b646:	89 c7                	mov    edi,eax
c001b648:	83 e7 ff             	and    edi,0xffffffff
c001b64b:	89 f9                	mov    ecx,edi
c001b64d:	89 d0                	mov    eax,edx
c001b64f:	25 ff 00 00 00       	and    eax,0xff
c001b654:	89 c3                	mov    ebx,eax
c001b656:	89 c8                	mov    eax,ecx
c001b658:	89 da                	mov    edx,ebx
c001b65a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b65d:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b660:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b664:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b668:	83 e0 00             	and    eax,0x0
c001b66b:	09 d0                	or     eax,edx
c001b66d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b674:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b67a:	8d 50 01             	lea    edx,[eax+0x1]
c001b67d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b680:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b686:	31 d2                	xor    edx,edx
c001b688:	88 c2                	mov    dl,al
c001b68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b68d:	83 c2 08             	add    edx,0x8
c001b690:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b694:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b69a:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b6a0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b6a4:	6a 01                	push   0x1
c001b6a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6a9:	e8 08 ff ff ff       	call   c001b5b6 <IOAPIC::read(int)>
c001b6ae:	83 c4 08             	add    esp,0x8
c001b6b1:	c1 f8 10             	sar    eax,0x10
c001b6b4:	25 ff 00 00 00       	and    eax,0xff
c001b6b9:	8d 50 01             	lea    edx,[eax+0x1]
c001b6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b6c5:	b8 00 00 00 00       	mov    eax,0x0
c001b6ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b6cd:	5b                   	pop    ebx
c001b6ce:	5e                   	pop    esi
c001b6cf:	5f                   	pop    edi
c001b6d0:	5d                   	pop    ebp
c001b6d1:	c3                   	ret    

c001b6d2 <IOAPIC::write(int, int)>:
c001b6d2:	55                   	push   ebp
c001b6d3:	89 e5                	mov    ebp,esp
c001b6d5:	83 ec 10             	sub    esp,0x10
c001b6d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6e7:	31 d2                	xor    edx,edx
c001b6e9:	88 c2                	mov    dl,al
c001b6eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6ee:	89 10                	mov    DWORD PTR [eax],edx
c001b6f0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6f3:	8d 50 10             	lea    edx,[eax+0x10]
c001b6f6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6f9:	89 02                	mov    DWORD PTR [edx],eax
c001b6fb:	90                   	nop
c001b6fc:	c9                   	leave  
c001b6fd:	c3                   	ret    

c001b6fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b6fe:	55                   	push   ebp
c001b6ff:	89 e5                	mov    ebp,esp
c001b701:	53                   	push   ebx
c001b702:	83 ec 2c             	sub    esp,0x2c
c001b705:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b708:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b70b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b70e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b711:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b714:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b717:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b71a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b71d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b720:	88 d8                	mov    al,bl
c001b722:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b725:	88 c8                	mov    al,cl
c001b727:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b72a:	88 d0                	mov    al,dl
c001b72c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b72f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b732:	25 ff 00 00 00       	and    eax,0xff
c001b737:	83 c0 08             	add    eax,0x8
c001b73a:	01 c0                	add    eax,eax
c001b73c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b73f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b742:	25 ff 00 00 00       	and    eax,0xff
c001b747:	83 c0 08             	add    eax,0x8
c001b74a:	01 c0                	add    eax,eax
c001b74c:	40                   	inc    eax
c001b74d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b750:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b753:	50                   	push   eax
c001b754:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b757:	e8 5a fe ff ff       	call   c001b5b6 <IOAPIC::read(int)>
c001b75c:	83 c4 08             	add    esp,0x8
c001b75f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b762:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b769:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b76c:	c1 e0 18             	shl    eax,0x18
c001b76f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b772:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b775:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b778:	52                   	push   edx
c001b779:	50                   	push   eax
c001b77a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b77d:	e8 50 ff ff ff       	call   c001b6d2 <IOAPIC::write(int, int)>
c001b782:	83 c4 0c             	add    esp,0xc
c001b785:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b788:	50                   	push   eax
c001b789:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b78c:	e8 25 fe ff ff       	call   c001b5b6 <IOAPIC::read(int)>
c001b791:	83 c4 08             	add    esp,0x8
c001b794:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b797:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b79e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b7a5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b7ac:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b7b0:	74 09                	je     c001b7bb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b7b2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b7b9:	eb 07                	jmp    c001b7c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b7bb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b7c2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b7c6:	74 09                	je     c001b7d1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b7c8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b7cf:	eb 07                	jmp    c001b7d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b7d1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b7d8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b7df:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b7e2:	25 ff 00 00 00       	and    eax,0xff
c001b7e7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b7ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7f0:	52                   	push   edx
c001b7f1:	50                   	push   eax
c001b7f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7f5:	e8 d8 fe ff ff       	call   c001b6d2 <IOAPIC::write(int, int)>
c001b7fa:	83 c4 0c             	add    esp,0xc
c001b7fd:	90                   	nop
c001b7fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b801:	c9                   	leave  
c001b802:	c3                   	ret    
c001b803:	90                   	nop

c001b804 <APICTimer::close(int, int, void*)>:
c001b804:	b8 00 00 00 00       	mov    eax,0x0
c001b809:	c3                   	ret    
c001b80a:	66 90                	xchg   ax,ax

c001b80c <apicTimerHandler(regs*, void*)>:
c001b80c:	83 ec 0c             	sub    esp,0xc
c001b80f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b813:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b815:	b8 10 27 00 00       	mov    eax,0x2710
c001b81a:	ba 00 00 00 00       	mov    edx,0x0
c001b81f:	f7 f1                	div    ecx
c001b821:	83 ec 0c             	sub    esp,0xc
c001b824:	50                   	push   eax
c001b825:	e8 1a 1a ff ff       	call   c000d244 <timerHandler(unsigned int)>
c001b82a:	83 c4 10             	add    esp,0x10
c001b82d:	90                   	nop
c001b82e:	83 c4 0c             	add    esp,0xc
c001b831:	c3                   	ret    
c001b832:	66 90                	xchg   ax,ax

c001b834 <APICTimer::open(int, int, void*)>:
c001b834:	83 ec 0c             	sub    esp,0xc
c001b837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b83b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b83d:	83 c0 24             	add    eax,0x24
c001b840:	8b 00                	mov    eax,DWORD PTR [eax]
c001b842:	83 ec 08             	sub    esp,0x8
c001b845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b84d:	ff d0                	call   eax
c001b84f:	83 c4 10             	add    esp,0x10
c001b852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b856:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b85a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b864:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b868:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b86e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b872:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b878:	83 ec 0c             	sub    esp,0xc
c001b87b:	51                   	push   ecx
c001b87c:	6a 01                	push   0x1
c001b87e:	68 0c b8 01 c0       	push   0xc001b80c
c001b883:	52                   	push   edx
c001b884:	50                   	push   eax
c001b885:	e8 92 00 ff ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b88a:	83 c4 20             	add    esp,0x20
c001b88d:	89 c2                	mov    edx,eax
c001b88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b893:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b899:	b8 00 00 00 00       	mov    eax,0x0
c001b89e:	83 c4 0c             	add    esp,0xc
c001b8a1:	c3                   	ret    
c001b8a2:	66 90                	xchg   ax,ax

c001b8a4 <APICTimer::write(int)>:
c001b8a4:	83 ec 0c             	sub    esp,0xc
c001b8a7:	83 ec 0c             	sub    esp,0xc
c001b8aa:	68 e8 f6 01 c0       	push   0xc001f6e8
c001b8af:	e8 ff 48 ff ff       	call   c00101b3 <KePanic(char const*)>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8c5:	90                   	nop
c001b8c6:	83 c4 0c             	add    esp,0xc
c001b8c9:	c3                   	ret    
c001b8ca:	66 90                	xchg   ax,ax

c001b8cc <APICTimer::APICTimer()>:
c001b8cc:	83 ec 0c             	sub    esp,0xc
c001b8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d3:	83 ec 08             	sub    esp,0x8
c001b8d6:	68 f8 f6 01 c0       	push   0xc001f6f8
c001b8db:	50                   	push   eax
c001b8dc:	e8 97 18 ff ff       	call   c000d178 <Timer::Timer(char const*)>
c001b8e1:	83 c4 10             	add    esp,0x10
c001b8e4:	ba 0c f7 01 c0       	mov    edx,0xc001f70c
c001b8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ed:	89 10                	mov    DWORD PTR [eax],edx
c001b8ef:	90                   	nop
c001b8f0:	83 c4 0c             	add    esp,0xc
c001b8f3:	c3                   	ret    

c001b8f4 <PIT::write(int)>:
c001b8f4:	83 ec 10             	sub    esp,0x10
c001b8f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b905:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b909:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b90e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b913:	99                   	cdq    
c001b914:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b91c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b923:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b928:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b92c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b931:	ee                   	out    dx,al
c001b932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b936:	25 ff 00 00 00       	and    eax,0xff
c001b93b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b942:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b946:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b94a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b94f:	ee                   	out    dx,al
c001b950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b954:	c1 f8 08             	sar    eax,0x8
c001b957:	25 ff 00 00 00       	and    eax,0xff
c001b95c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b963:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b967:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b96b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b970:	ee                   	out    dx,al
c001b971:	90                   	nop
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	c3                   	ret    
c001b976:	66 90                	xchg   ax,ax

c001b978 <pitHandler(regs*, void*)>:
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b981:	b8 10 27 00 00       	mov    eax,0x2710
c001b986:	99                   	cdq    
c001b987:	f7 f9                	idiv   ecx
c001b989:	83 ec 0c             	sub    esp,0xc
c001b98c:	50                   	push   eax
c001b98d:	e8 b2 18 ff ff       	call   c000d244 <timerHandler(unsigned int)>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	90                   	nop
c001b996:	83 c4 0c             	add    esp,0xc
c001b999:	c3                   	ret    
c001b99a:	66 90                	xchg   ax,ax

c001b99c <PIT::open(int, int, void*)>:
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a5:	83 c0 24             	add    eax,0x24
c001b9a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9aa:	83 ec 08             	sub    esp,0x8
c001b9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b5:	ff d0                	call   eax
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9be:	83 ec 0c             	sub    esp,0xc
c001b9c1:	6a 00                	push   0x0
c001b9c3:	6a 01                	push   0x1
c001b9c5:	68 78 b9 01 c0       	push   0xc001b978
c001b9ca:	6a 00                	push   0x0
c001b9cc:	50                   	push   eax
c001b9cd:	e8 4a ff fe ff       	call   c000b91c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9d2:	83 c4 20             	add    esp,0x20
c001b9d5:	89 c2                	mov    edx,eax
c001b9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9e1:	b8 00 00 00 00       	mov    eax,0x0
c001b9e6:	83 c4 0c             	add    esp,0xc
c001b9e9:	c3                   	ret    
c001b9ea:	66 90                	xchg   ax,ax

c001b9ec <PIT::close(int, int, void*)>:
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba01:	6a 01                	push   0x1
c001ba03:	68 78 b9 01 c0       	push   0xc001b978
c001ba08:	6a 00                	push   0x0
c001ba0a:	50                   	push   eax
c001ba0b:	e8 42 ff fe ff       	call   c000b952 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	b8 00 00 00 00       	mov    eax,0x0
c001ba18:	83 c4 0c             	add    esp,0xc
c001ba1b:	c3                   	ret    

c001ba1c <PIT::PIT()>:
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba23:	83 ec 08             	sub    esp,0x8
c001ba26:	68 34 f7 01 c0       	push   0xc001f734
c001ba2b:	50                   	push   eax
c001ba2c:	e8 47 17 ff ff       	call   c000d178 <Timer::Timer(char const*)>
c001ba31:	83 c4 10             	add    esp,0x10
c001ba34:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c001ba39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3d:	89 10                	mov    DWORD PTR [eax],edx
c001ba3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba49:	31 d2                	xor    edx,edx
c001ba4b:	88 c2                	mov    dl,al
c001ba4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba51:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba62:	31 d2                	xor    edx,edx
c001ba64:	88 c2                	mov    dl,al
c001ba66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba79:	8d 50 01             	lea    edx,[eax+0x1]
c001ba7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba80:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba86:	31 d2                	xor    edx,edx
c001ba88:	88 c2                	mov    dl,al
c001ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba92:	83 e1 3f             	and    ecx,0x3f
c001ba95:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba99:	90                   	nop
c001ba9a:	83 c4 0c             	add    esp,0xc
c001ba9d:	c3                   	ret    
c001ba9e:	66 90                	xchg   ax,ax

c001baa0 <avxDetect>:
c001baa0:	b8 01 00 00 00       	mov    eax,0x1
c001baa5:	0f a2                	cpuid  
c001baa7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001baad:	74 15                	je     c001bac4 <avxDetect.noAVX>
c001baaf:	b8 01 00 00 00       	mov    eax,0x1
c001bab4:	0f a2                	cpuid  
c001bab6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001babc:	74 06                	je     c001bac4 <avxDetect.noAVX>
c001babe:	b8 01 00 00 00       	mov    eax,0x1
c001bac3:	c3                   	ret    

c001bac4 <avxDetect.noAVX>:
c001bac4:	b8 00 00 00 00       	mov    eax,0x0
c001bac9:	c3                   	ret    

c001baca <avxSave>:
c001baca:	53                   	push   ebx
c001bacb:	52                   	push   edx
c001bacc:	31 c0                	xor    eax,eax
c001bace:	48                   	dec    eax
c001bacf:	89 c2                	mov    edx,eax
c001bad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bad5:	0f ae 23             	xsave  [ebx]
c001bad8:	5a                   	pop    edx
c001bad9:	5b                   	pop    ebx
c001bada:	c3                   	ret    

c001badb <avxLoad>:
c001badb:	53                   	push   ebx
c001badc:	52                   	push   edx
c001badd:	31 c0                	xor    eax,eax
c001badf:	48                   	dec    eax
c001bae0:	89 c2                	mov    edx,eax
c001bae2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bae6:	0f ae 2b             	xrstor [ebx]
c001bae9:	5a                   	pop    edx
c001baea:	5b                   	pop    ebx
c001baeb:	c3                   	ret    

c001baec <avxInit>:
c001baec:	e8 b7 02 00 00       	call   c001bda8 <sseInit>
c001baf1:	50                   	push   eax
c001baf2:	51                   	push   ecx
c001baf3:	0f 20 e0             	mov    eax,cr4
c001baf6:	0d 00 00 04 00       	or     eax,0x40000
c001bafb:	0f 22 e0             	mov    cr4,eax
c001bafe:	31 c9                	xor    ecx,ecx
c001bb00:	0f 01 d0             	xgetbv 
c001bb03:	0d 07 00 00 00       	or     eax,0x7
c001bb08:	0f 01 d1             	xsetbv 
c001bb0b:	59                   	pop    ecx
c001bb0c:	58                   	pop    eax
c001bb0d:	c3                   	ret    

c001bb0e <avxClose>:
c001bb0e:	c3                   	ret    

c001bb0f <wouldSheSayYes>:
c001bb0f:	c3                   	ret    
c001bb10:	49                   	dec    ecx
c001bb11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb19:	75 20                	jne    c001bb3b <isr0+0xb>
c001bb1b:	4e                   	dec    esi
c001bb1c:	79 61                	jns    c001bb7f <isr7+0x3>
c001bb1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb23:	66 90                	xchg   ax,ax
c001bb25:	66 90                	xchg   ax,ax
c001bb27:	66 90                	xchg   ax,ax
c001bb29:	66 90                	xchg   ax,ax
c001bb2b:	66 90                	xchg   ax,ax
c001bb2d:	66 90                	xchg   ax,ax
c001bb2f:	90                   	nop

c001bb30 <isr0>:
c001bb30:	fa                   	cli    
c001bb31:	68 00 00 00 00       	push   0x0
c001bb36:	68 00 00 00 00       	push   0x0
c001bb3b:	e9 44 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb40 <isr1>:
c001bb40:	fa                   	cli    
c001bb41:	6a 00                	push   0x0
c001bb43:	6a 01                	push   0x1
c001bb45:	e9 3a 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb4a <isr2>:
c001bb4a:	fa                   	cli    
c001bb4b:	6a 00                	push   0x0
c001bb4d:	6a 02                	push   0x2
c001bb4f:	e9 30 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb54 <isr3>:
c001bb54:	fa                   	cli    
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 03                	push   0x3
c001bb59:	e9 26 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb5e <isr4>:
c001bb5e:	fa                   	cli    
c001bb5f:	6a 00                	push   0x0
c001bb61:	6a 04                	push   0x4
c001bb63:	e9 1c 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb68 <isr5>:
c001bb68:	fa                   	cli    
c001bb69:	6a 00                	push   0x0
c001bb6b:	6a 05                	push   0x5
c001bb6d:	e9 12 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb72 <isr6>:
c001bb72:	fa                   	cli    
c001bb73:	6a 00                	push   0x0
c001bb75:	6a 06                	push   0x6
c001bb77:	e9 08 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb7c <isr7>:
c001bb7c:	fa                   	cli    
c001bb7d:	6a 00                	push   0x0
c001bb7f:	6a 07                	push   0x7
c001bb81:	e9 fe 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb86 <isr8>:
c001bb86:	fa                   	cli    
c001bb87:	6a 08                	push   0x8
c001bb89:	e9 f6 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb8e <isr9>:
c001bb8e:	fa                   	cli    
c001bb8f:	6a 00                	push   0x0
c001bb91:	6a 09                	push   0x9
c001bb93:	e9 ec 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb98 <isr10>:
c001bb98:	fa                   	cli    
c001bb99:	6a 0a                	push   0xa
c001bb9b:	e9 e4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bba0 <isr11>:
c001bba0:	fa                   	cli    
c001bba1:	6a 0b                	push   0xb
c001bba3:	e9 dc 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bba8 <isr12>:
c001bba8:	fa                   	cli    
c001bba9:	6a 0c                	push   0xc
c001bbab:	e9 d4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbb0 <isr13>:
c001bbb0:	fa                   	cli    
c001bbb1:	6a 0d                	push   0xd
c001bbb3:	e9 cc 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbb8 <isr14>:
c001bbb8:	fa                   	cli    
c001bbb9:	6a 0e                	push   0xe
c001bbbb:	e9 c4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbc0 <isr15>:
c001bbc0:	fa                   	cli    
c001bbc1:	6a 00                	push   0x0
c001bbc3:	6a 0f                	push   0xf
c001bbc5:	e9 ba 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbca <isr16>:
c001bbca:	fa                   	cli    
c001bbcb:	6a 00                	push   0x0
c001bbcd:	6a 10                	push   0x10
c001bbcf:	e9 b0 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbd4 <isr17>:
c001bbd4:	fa                   	cli    
c001bbd5:	6a 00                	push   0x0
c001bbd7:	6a 11                	push   0x11
c001bbd9:	e9 a6 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbde <isr18>:
c001bbde:	fa                   	cli    
c001bbdf:	6a 00                	push   0x0
c001bbe1:	6a 12                	push   0x12
c001bbe3:	e9 9c 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbe8 <irq3>:
c001bbe8:	fa                   	cli    
c001bbe9:	6a 00                	push   0x0
c001bbeb:	6a 23                	push   0x23
c001bbed:	e9 92 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbf2 <irq4>:
c001bbf2:	fa                   	cli    
c001bbf3:	6a 00                	push   0x0
c001bbf5:	6a 24                	push   0x24
c001bbf7:	e9 88 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbfc <irq5>:
c001bbfc:	fa                   	cli    
c001bbfd:	6a 00                	push   0x0
c001bbff:	6a 25                	push   0x25
c001bc01:	e9 7e 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc06 <irq6>:
c001bc06:	fa                   	cli    
c001bc07:	6a 00                	push   0x0
c001bc09:	6a 26                	push   0x26
c001bc0b:	e9 74 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc10 <irq7>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 27                	push   0x27
c001bc15:	e9 6a 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc1a <irq8>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 28                	push   0x28
c001bc1f:	e9 60 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc24 <irq9>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 29                	push   0x29
c001bc29:	e9 56 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc2e <irq10>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 2a                	push   0x2a
c001bc33:	e9 4c 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc38 <irq11>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 2b                	push   0x2b
c001bc3d:	e9 42 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc42 <irq12>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 2c                	push   0x2c
c001bc47:	e9 38 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc4c <irq13>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 2d                	push   0x2d
c001bc51:	e9 2e 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc56 <irq14>:
c001bc56:	fa                   	cli    
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 2e                	push   0x2e
c001bc5b:	e9 24 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc60 <irq15>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 2f                	push   0x2f
c001bc65:	e9 1a 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc6a <irq1>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 21                	push   0x21
c001bc6f:	eb 13                	jmp    c001bc84 <int_common_stub>

c001bc71 <irq2>:
c001bc71:	fa                   	cli    
c001bc72:	6a 00                	push   0x0
c001bc74:	6a 22                	push   0x22
c001bc76:	eb 0c                	jmp    c001bc84 <int_common_stub>

c001bc78 <isr96>:
c001bc78:	6a 00                	push   0x0
c001bc7a:	6a 60                	push   0x60
c001bc7c:	fb                   	sti    
c001bc7d:	eb 37                	jmp    c001bcb6 <syscall_common_stub>

c001bc7f <irq0>:
c001bc7f:	fa                   	cli    
c001bc80:	6a 00                	push   0x0
c001bc82:	6a 20                	push   0x20

c001bc84 <int_common_stub>:
c001bc84:	60                   	pusha  
c001bc85:	1e                   	push   ds
c001bc86:	06                   	push   es
c001bc87:	0f a0                	push   fs
c001bc89:	0f a8                	push   gs
c001bc8b:	66 b8 10 00          	mov    ax,0x10
c001bc8f:	66 8e d8             	mov    ds,ax
c001bc92:	66 8e c0             	mov    es,ax
c001bc95:	66 8e e0             	mov    fs,ax
c001bc98:	66 8e e8             	mov    gs,ax
c001bc9b:	54                   	push   esp
c001bc9c:	fc                   	cld    
c001bc9d:	e8 7a 01 ff ff       	call   c000be1c <int_handler>
c001bca2:	81 c4 04 00 00 00    	add    esp,0x4
c001bca8:	0f a9                	pop    gs
c001bcaa:	0f a1                	pop    fs
c001bcac:	07                   	pop    es
c001bcad:	1f                   	pop    ds
c001bcae:	61                   	popa   
c001bcaf:	81 c4 08 00 00 00    	add    esp,0x8
c001bcb5:	cf                   	iret   

c001bcb6 <syscall_common_stub>:
c001bcb6:	60                   	pusha  
c001bcb7:	1e                   	push   ds
c001bcb8:	06                   	push   es
c001bcb9:	0f a0                	push   fs
c001bcbb:	0f a8                	push   gs
c001bcbd:	66 b8 10 00          	mov    ax,0x10
c001bcc1:	66 8e d8             	mov    ds,ax
c001bcc4:	66 8e c0             	mov    es,ax
c001bcc7:	66 8e e0             	mov    fs,ax
c001bcca:	66 8e e8             	mov    gs,ax
c001bccd:	54                   	push   esp
c001bcce:	fc                   	cld    
c001bccf:	e8 48 01 ff ff       	call   c000be1c <int_handler>
c001bcd4:	81 c4 04 00 00 00    	add    esp,0x4
c001bcda:	0f a9                	pop    gs
c001bcdc:	0f a1                	pop    fs
c001bcde:	07                   	pop    es
c001bcdf:	1f                   	pop    ds
c001bce0:	e8 22 4a ff ff       	call   c0010707 <KiCheckSignalZ>
c001bce5:	3d 00 00 00 00       	cmp    eax,0x0
c001bcea:	74 1d                	je     c001bd09 <syscall_common_stub.skipSignals>
c001bcec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bcf0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bcf4:	89 e3                	mov    ebx,esp
c001bcf6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bcf9:	51                   	push   ecx
c001bcfa:	68 11 bd 01 c0       	push   0xc001bd11
c001bcff:	89 dc                	mov    esp,ebx
c001bd01:	61                   	popa   
c001bd02:	81 c4 08 00 00 00    	add    esp,0x8
c001bd08:	cf                   	iret   

c001bd09 <syscall_common_stub.skipSignals>:
c001bd09:	61                   	popa   
c001bd0a:	81 c4 08 00 00 00    	add    esp,0x8
c001bd10:	cf                   	iret   

c001bd11 <irq16>:
c001bd11:	fa                   	cli    
c001bd12:	6a 00                	push   0x0
c001bd14:	6a 30                	push   0x30
c001bd16:	e9 69 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd1b <irq17>:
c001bd1b:	fa                   	cli    
c001bd1c:	6a 00                	push   0x0
c001bd1e:	6a 31                	push   0x31
c001bd20:	e9 5f ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd25 <irq18>:
c001bd25:	fa                   	cli    
c001bd26:	6a 00                	push   0x0
c001bd28:	6a 32                	push   0x32
c001bd2a:	e9 55 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd2f <irq19>:
c001bd2f:	fa                   	cli    
c001bd30:	6a 00                	push   0x0
c001bd32:	6a 33                	push   0x33
c001bd34:	e9 4b ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd39 <irq20>:
c001bd39:	fa                   	cli    
c001bd3a:	6a 00                	push   0x0
c001bd3c:	6a 34                	push   0x34
c001bd3e:	e9 41 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd43 <irq21>:
c001bd43:	fa                   	cli    
c001bd44:	6a 00                	push   0x0
c001bd46:	6a 35                	push   0x35
c001bd48:	e9 37 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd4d <irq22>:
c001bd4d:	fa                   	cli    
c001bd4e:	6a 00                	push   0x0
c001bd50:	6a 36                	push   0x36
c001bd52:	e9 2d ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd57 <irq23>:
c001bd57:	fa                   	cli    
c001bd58:	6a 00                	push   0x0
c001bd5a:	6a 37                	push   0x37
c001bd5c:	e9 23 ff ff ff       	jmp    c001bc84 <int_common_stub>
c001bd61:	66 90                	xchg   ax,ax
c001bd63:	66 90                	xchg   ax,ax
c001bd65:	66 90                	xchg   ax,ax
c001bd67:	66 90                	xchg   ax,ax
c001bd69:	66 90                	xchg   ax,ax
c001bd6b:	66 90                	xchg   ax,ax
c001bd6d:	66 90                	xchg   ax,ax
c001bd6f:	90                   	nop

c001bd70 <i386GetRDRAND>:
c001bd70:	b9 64 00 00 00       	mov    ecx,0x64

c001bd75 <retry>:
c001bd75:	0f c7 f0             	rdrand eax
c001bd78:	72 05                	jb     c001bd7f <retry.done>
c001bd7a:	e2 f9                	loop   c001bd75 <retry>

c001bd7c <retry.fail>:
c001bd7c:	31 c0                	xor    eax,eax
c001bd7e:	c3                   	ret    

c001bd7f <retry.done>:
c001bd7f:	c3                   	ret    

c001bd80 <absolutelyNoChanceInHell>:
c001bd80:	b8 01 00 00 00       	mov    eax,0x1
c001bd85:	0f a2                	cpuid  
c001bd87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bd8d:	74 06                	je     c001bd95 <sseDetect.noSSE>
c001bd8f:	b8 01 00 00 00       	mov    eax,0x1
c001bd94:	c3                   	ret    

c001bd95 <sseDetect.noSSE>:
c001bd95:	31 c0                	xor    eax,eax
c001bd97:	c3                   	ret    

c001bd98 <sseSave>:
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	0f ae 00             	fxsave [eax]
c001bd9f:	c3                   	ret    

c001bda0 <sseLoad>:
c001bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda4:	0f ae 08             	fxrstor [eax]
c001bda7:	c3                   	ret    

c001bda8 <sseInit>:
c001bda8:	e8 42 00 00 00       	call   c001bdef <x87Init>
c001bdad:	0f 20 e0             	mov    eax,cr4
c001bdb0:	66 0d 00 06          	or     ax,0x600
c001bdb4:	0f 22 e0             	mov    cr4,eax
c001bdb7:	c3                   	ret    

c001bdb8 <sseClose>:
c001bdb8:	c3                   	ret    
c001bdb9:	66 90                	xchg   ax,ax
c001bdbb:	66 90                	xchg   ax,ax
c001bdbd:	66 90                	xchg   ax,ax
c001bdbf:	90                   	nop

c001bdc0 <value_37F>:
c001bdc0:	7f 03                	jg     c001bdc5 <value_37A+0x1>

c001bdc2 <value_37E>:
c001bdc2:	7e 03                	jle    c001bdc7 <x87Detect+0x1>

c001bdc4 <value_37A>:
c001bdc4:	7a 03                	jp     c001bdc9 <x87Detect+0x3>

c001bdc6 <x87Detect>:
c001bdc6:	b8 01 00 00 00       	mov    eax,0x1
c001bdcb:	0f a2                	cpuid  
c001bdcd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bdd3:	74 06                	je     c001bddb <x87Detect.nox87>
c001bdd5:	b8 01 00 00 00       	mov    eax,0x1
c001bdda:	c3                   	ret    

c001bddb <x87Detect.nox87>:
c001bddb:	b8 00 00 00 00       	mov    eax,0x0
c001bde0:	c3                   	ret    

c001bde1 <x87Save>:
c001bde1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bde5:	dd 30                	fnsave [eax]
c001bde7:	c3                   	ret    

c001bde8 <x87Load>:
c001bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdec:	dd 20                	frstor [eax]
c001bdee:	c3                   	ret    

c001bdef <x87Init>:
c001bdef:	0f 20 c0             	mov    eax,cr0
c001bdf2:	66 25 fb ff          	and    ax,0xfffb
c001bdf6:	66 0d 22 00          	or     ax,0x22
c001bdfa:	0f 22 c0             	mov    cr0,eax
c001bdfd:	db e3                	fninit 
c001bdff:	0f 06                	clts   
c001be01:	d9 2d c4 bd 01 c0    	fldcw  WORD PTR ds:0xc001bdc4
c001be07:	c3                   	ret    

c001be08 <x87Close>:
c001be08:	c3                   	ret    
c001be09:	66 90                	xchg   ax,ax
c001be0b:	90                   	nop

c001be0c <__do_global_ctors_aux>:
c001be0c:	a1 bc cd 01 c0       	mov    eax,ds:0xc001cdbc
c001be11:	83 f8 ff             	cmp    eax,0xffffffff
c001be14:	74 1a                	je     c001be30 <__do_global_ctors_aux+0x24>
c001be16:	55                   	push   ebp
c001be17:	89 e5                	mov    ebp,esp
c001be19:	53                   	push   ebx
c001be1a:	52                   	push   edx
c001be1b:	bb bc cd 01 c0       	mov    ebx,0xc001cdbc
c001be20:	ff d0                	call   eax
c001be22:	83 eb 04             	sub    ebx,0x4
c001be25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be27:	83 f8 ff             	cmp    eax,0xffffffff
c001be2a:	75 f4                	jne    c001be20 <__do_global_ctors_aux+0x14>
c001be2c:	58                   	pop    eax
c001be2d:	5b                   	pop    ebx
c001be2e:	5d                   	pop    ebp
c001be2f:	c3                   	ret    
c001be30:	c3                   	ret    
c001be31:	66 90                	xchg   ax,ax
c001be33:	90                   	nop

c001be34 <__divdi3>:
c001be34:	55                   	push   ebp
c001be35:	57                   	push   edi
c001be36:	56                   	push   esi
c001be37:	53                   	push   ebx
c001be38:	83 ec 1c             	sub    esp,0x1c
c001be3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be52:	85 db                	test   ebx,ebx
c001be54:	0f 88 8e 00 00 00    	js     c001bee8 <__divdi3+0xb4>
c001be5a:	89 dd                	mov    ebp,ebx
c001be5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be64:	89 d3                	mov    ebx,edx
c001be66:	85 d2                	test   edx,edx
c001be68:	79 0d                	jns    c001be77 <__divdi3+0x43>
c001be6a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be6e:	f7 d8                	neg    eax
c001be70:	83 d2 00             	adc    edx,0x0
c001be73:	f7 da                	neg    edx
c001be75:	89 d3                	mov    ebx,edx
c001be77:	89 c7                	mov    edi,eax
c001be79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be7c:	85 db                	test   ebx,ebx
c001be7e:	75 48                	jne    c001bec8 <__divdi3+0x94>
c001be80:	39 ef                	cmp    edi,ebp
c001be82:	76 24                	jbe    c001bea8 <__divdi3+0x74>
c001be84:	89 ea                	mov    edx,ebp
c001be86:	f7 f7                	div    edi
c001be88:	89 c1                	mov    ecx,eax
c001be8a:	31 f6                	xor    esi,esi
c001be8c:	89 c8                	mov    eax,ecx
c001be8e:	89 f2                	mov    edx,esi
c001be90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be94:	85 c9                	test   ecx,ecx
c001be96:	74 07                	je     c001be9f <__divdi3+0x6b>
c001be98:	f7 d8                	neg    eax
c001be9a:	83 d2 00             	adc    edx,0x0
c001be9d:	f7 da                	neg    edx
c001be9f:	83 c4 1c             	add    esp,0x1c
c001bea2:	5b                   	pop    ebx
c001bea3:	5e                   	pop    esi
c001bea4:	5f                   	pop    edi
c001bea5:	5d                   	pop    ebp
c001bea6:	c3                   	ret    
c001bea7:	90                   	nop
c001bea8:	85 ff                	test   edi,edi
c001beaa:	75 0b                	jne    c001beb7 <__divdi3+0x83>
c001beac:	b8 01 00 00 00       	mov    eax,0x1
c001beb1:	31 d2                	xor    edx,edx
c001beb3:	f7 f3                	div    ebx
c001beb5:	89 c7                	mov    edi,eax
c001beb7:	31 d2                	xor    edx,edx
c001beb9:	89 e8                	mov    eax,ebp
c001bebb:	f7 f7                	div    edi
c001bebd:	89 c6                	mov    esi,eax
c001bebf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bec2:	f7 f7                	div    edi
c001bec4:	89 c1                	mov    ecx,eax
c001bec6:	eb c4                	jmp    c001be8c <__divdi3+0x58>
c001bec8:	39 eb                	cmp    ebx,ebp
c001beca:	77 3c                	ja     c001bf08 <__divdi3+0xd4>
c001becc:	0f bd f3             	bsr    esi,ebx
c001becf:	83 f6 1f             	xor    esi,0x1f
c001bed2:	75 40                	jne    c001bf14 <__divdi3+0xe0>
c001bed4:	39 eb                	cmp    ebx,ebp
c001bed6:	72 09                	jb     c001bee1 <__divdi3+0xad>
c001bed8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bedb:	0f 87 97 00 00 00    	ja     c001bf78 <__divdi3+0x144>
c001bee1:	b9 01 00 00 00       	mov    ecx,0x1
c001bee6:	eb a4                	jmp    c001be8c <__divdi3+0x58>
c001bee8:	f7 d9                	neg    ecx
c001beea:	83 d3 00             	adc    ebx,0x0
c001beed:	f7 db                	neg    ebx
c001beef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bef2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bef6:	89 dd                	mov    ebp,ebx
c001bef8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf00:	e9 5f ff ff ff       	jmp    c001be64 <__divdi3+0x30>
c001bf05:	8d 76 00             	lea    esi,[esi+0x0]
c001bf08:	31 f6                	xor    esi,esi
c001bf0a:	31 c9                	xor    ecx,ecx
c001bf0c:	e9 7b ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf11:	8d 76 00             	lea    esi,[esi+0x0]
c001bf14:	b8 20 00 00 00       	mov    eax,0x20
c001bf19:	29 f0                	sub    eax,esi
c001bf1b:	89 f1                	mov    ecx,esi
c001bf1d:	d3 e3                	shl    ebx,cl
c001bf1f:	89 fa                	mov    edx,edi
c001bf21:	88 c1                	mov    cl,al
c001bf23:	d3 ea                	shr    edx,cl
c001bf25:	09 da                	or     edx,ebx
c001bf27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf2b:	89 f1                	mov    ecx,esi
c001bf2d:	d3 e7                	shl    edi,cl
c001bf2f:	89 eb                	mov    ebx,ebp
c001bf31:	88 c1                	mov    cl,al
c001bf33:	d3 eb                	shr    ebx,cl
c001bf35:	89 f1                	mov    ecx,esi
c001bf37:	d3 e5                	shl    ebp,cl
c001bf39:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf3c:	88 c1                	mov    cl,al
c001bf3e:	d3 ea                	shr    edx,cl
c001bf40:	09 d5                	or     ebp,edx
c001bf42:	89 e8                	mov    eax,ebp
c001bf44:	89 da                	mov    edx,ebx
c001bf46:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf4a:	89 d3                	mov    ebx,edx
c001bf4c:	89 c5                	mov    ebp,eax
c001bf4e:	f7 e7                	mul    edi
c001bf50:	39 d3                	cmp    ebx,edx
c001bf52:	72 18                	jb     c001bf6c <__divdi3+0x138>
c001bf54:	74 0a                	je     c001bf60 <__divdi3+0x12c>
c001bf56:	89 e9                	mov    ecx,ebp
c001bf58:	31 f6                	xor    esi,esi
c001bf5a:	e9 2d ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf5f:	90                   	nop
c001bf60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf63:	89 f1                	mov    ecx,esi
c001bf65:	d3 e7                	shl    edi,cl
c001bf67:	39 c7                	cmp    edi,eax
c001bf69:	73 eb                	jae    c001bf56 <__divdi3+0x122>
c001bf6b:	90                   	nop
c001bf6c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf6f:	31 f6                	xor    esi,esi
c001bf71:	e9 16 ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf76:	66 90                	xchg   ax,ax
c001bf78:	31 c9                	xor    ecx,ecx
c001bf7a:	e9 0d ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf7f:	90                   	nop

c001bf80 <__moddi3>:
c001bf80:	55                   	push   ebp
c001bf81:	57                   	push   edi
c001bf82:	56                   	push   esi
c001bf83:	53                   	push   ebx
c001bf84:	83 ec 2c             	sub    esp,0x2c
c001bf87:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf8b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bf8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf93:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bf97:	85 db                	test   ebx,ebx
c001bf99:	0f 88 85 00 00 00    	js     c001c024 <__moddi3+0xa4>
c001bf9f:	89 de                	mov    esi,ebx
c001bfa1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfa9:	89 d7                	mov    edi,edx
c001bfab:	85 d2                	test   edx,edx
c001bfad:	79 09                	jns    c001bfb8 <__moddi3+0x38>
c001bfaf:	f7 d8                	neg    eax
c001bfb1:	83 d2 00             	adc    edx,0x0
c001bfb4:	f7 da                	neg    edx
c001bfb6:	89 d7                	mov    edi,edx
c001bfb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfbc:	89 cd                	mov    ebp,ecx
c001bfbe:	85 ff                	test   edi,edi
c001bfc0:	75 52                	jne    c001c014 <__moddi3+0x94>
c001bfc2:	89 c3                	mov    ebx,eax
c001bfc4:	39 f0                	cmp    eax,esi
c001bfc6:	76 24                	jbe    c001bfec <__moddi3+0x6c>
c001bfc8:	89 c8                	mov    eax,ecx
c001bfca:	89 f2                	mov    edx,esi
c001bfcc:	f7 f3                	div    ebx
c001bfce:	89 d6                	mov    esi,edx
c001bfd0:	89 f0                	mov    eax,esi
c001bfd2:	31 d2                	xor    edx,edx
c001bfd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfd8:	85 c9                	test   ecx,ecx
c001bfda:	74 07                	je     c001bfe3 <__moddi3+0x63>
c001bfdc:	f7 d8                	neg    eax
c001bfde:	83 d2 00             	adc    edx,0x0
c001bfe1:	f7 da                	neg    edx
c001bfe3:	83 c4 2c             	add    esp,0x2c
c001bfe6:	5b                   	pop    ebx
c001bfe7:	5e                   	pop    esi
c001bfe8:	5f                   	pop    edi
c001bfe9:	5d                   	pop    ebp
c001bfea:	c3                   	ret    
c001bfeb:	90                   	nop
c001bfec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bff0:	85 db                	test   ebx,ebx
c001bff2:	75 0d                	jne    c001c001 <__moddi3+0x81>
c001bff4:	b8 01 00 00 00       	mov    eax,0x1
c001bff9:	31 d2                	xor    edx,edx
c001bffb:	f7 f7                	div    edi
c001bffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c001:	89 f0                	mov    eax,esi
c001c003:	31 d2                	xor    edx,edx
c001c005:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c009:	f7 f7                	div    edi
c001c00b:	89 e8                	mov    eax,ebp
c001c00d:	f7 f7                	div    edi
c001c00f:	89 d6                	mov    esi,edx
c001c011:	eb bd                	jmp    c001bfd0 <__moddi3+0x50>
c001c013:	90                   	nop
c001c014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c018:	39 f7                	cmp    edi,esi
c001c01a:	76 20                	jbe    c001c03c <__moddi3+0xbc>
c001c01c:	89 c8                	mov    eax,ecx
c001c01e:	89 f2                	mov    edx,esi
c001c020:	eb b2                	jmp    c001bfd4 <__moddi3+0x54>
c001c022:	66 90                	xchg   ax,ax
c001c024:	f7 d9                	neg    ecx
c001c026:	83 d3 00             	adc    ebx,0x0
c001c029:	f7 db                	neg    ebx
c001c02b:	89 de                	mov    esi,ebx
c001c02d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c035:	e9 6f ff ff ff       	jmp    c001bfa9 <__moddi3+0x29>
c001c03a:	66 90                	xchg   ax,ax
c001c03c:	0f bd c7             	bsr    eax,edi
c001c03f:	83 f0 1f             	xor    eax,0x1f
c001c042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c046:	75 24                	jne    c001c06c <__moddi3+0xec>
c001c048:	39 f7                	cmp    edi,esi
c001c04a:	72 06                	jb     c001c052 <__moddi3+0xd2>
c001c04c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c050:	77 0c                	ja     c001c05e <__moddi3+0xde>
c001c052:	89 e9                	mov    ecx,ebp
c001c054:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c058:	19 fe                	sbb    esi,edi
c001c05a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c062:	89 f2                	mov    edx,esi
c001c064:	e9 6b ff ff ff       	jmp    c001bfd4 <__moddi3+0x54>
c001c069:	8d 76 00             	lea    esi,[esi+0x0]
c001c06c:	b8 20 00 00 00       	mov    eax,0x20
c001c071:	89 c2                	mov    edx,eax
c001c073:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c077:	29 da                	sub    edx,ebx
c001c079:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c07d:	88 d9                	mov    cl,bl
c001c07f:	d3 e7                	shl    edi,cl
c001c081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c085:	88 d1                	mov    cl,dl
c001c087:	d3 e8                	shr    eax,cl
c001c089:	09 c7                	or     edi,eax
c001c08b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c08f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c093:	89 d8                	mov    eax,ebx
c001c095:	88 d9                	mov    cl,bl
c001c097:	d3 e7                	shl    edi,cl
c001c099:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c09d:	89 f3                	mov    ebx,esi
c001c09f:	88 d1                	mov    cl,dl
c001c0a1:	d3 eb                	shr    ebx,cl
c001c0a3:	89 c7                	mov    edi,eax
c001c0a5:	88 c1                	mov    cl,al
c001c0a7:	d3 e6                	shl    esi,cl
c001c0a9:	89 e8                	mov    eax,ebp
c001c0ab:	88 d1                	mov    cl,dl
c001c0ad:	d3 e8                	shr    eax,cl
c001c0af:	09 f0                	or     eax,esi
c001c0b1:	89 f9                	mov    ecx,edi
c001c0b3:	d3 e5                	shl    ebp,cl
c001c0b5:	89 da                	mov    edx,ebx
c001c0b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c0bb:	89 d3                	mov    ebx,edx
c001c0bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c0c1:	89 c6                	mov    esi,eax
c001c0c3:	89 d1                	mov    ecx,edx
c001c0c5:	39 d3                	cmp    ebx,edx
c001c0c7:	72 27                	jb     c001c0f0 <__moddi3+0x170>
c001c0c9:	74 21                	je     c001c0ec <__moddi3+0x16c>
c001c0cb:	29 f5                	sub    ebp,esi
c001c0cd:	19 cb                	sbb    ebx,ecx
c001c0cf:	89 de                	mov    esi,ebx
c001c0d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c0d5:	d3 e6                	shl    esi,cl
c001c0d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0db:	89 f9                	mov    ecx,edi
c001c0dd:	d3 ed                	shr    ebp,cl
c001c0df:	09 ee                	or     esi,ebp
c001c0e1:	89 f0                	mov    eax,esi
c001c0e3:	d3 eb                	shr    ebx,cl
c001c0e5:	89 da                	mov    edx,ebx
c001c0e7:	e9 e8 fe ff ff       	jmp    c001bfd4 <__moddi3+0x54>
c001c0ec:	39 c5                	cmp    ebp,eax
c001c0ee:	73 db                	jae    c001c0cb <__moddi3+0x14b>
c001c0f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c0f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c0f8:	89 d1                	mov    ecx,edx
c001c0fa:	89 c6                	mov    esi,eax
c001c0fc:	eb cd                	jmp    c001c0cb <__moddi3+0x14b>
c001c0fe:	66 90                	xchg   ax,ax

c001c100 <__udivdi3>:
c001c100:	55                   	push   ebp
c001c101:	57                   	push   edi
c001c102:	56                   	push   esi
c001c103:	53                   	push   ebx
c001c104:	83 ec 1c             	sub    esp,0x1c
c001c107:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c10b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c10f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c113:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c117:	85 d2                	test   edx,edx
c001c119:	75 41                	jne    c001c15c <__udivdi3+0x5c>
c001c11b:	39 f7                	cmp    edi,esi
c001c11d:	76 15                	jbe    c001c134 <__udivdi3+0x34>
c001c11f:	89 e8                	mov    eax,ebp
c001c121:	89 f2                	mov    edx,esi
c001c123:	f7 f7                	div    edi
c001c125:	31 db                	xor    ebx,ebx
c001c127:	89 da                	mov    edx,ebx
c001c129:	83 c4 1c             	add    esp,0x1c
c001c12c:	5b                   	pop    ebx
c001c12d:	5e                   	pop    esi
c001c12e:	5f                   	pop    edi
c001c12f:	5d                   	pop    ebp
c001c130:	c3                   	ret    
c001c131:	8d 76 00             	lea    esi,[esi+0x0]
c001c134:	89 f9                	mov    ecx,edi
c001c136:	85 ff                	test   edi,edi
c001c138:	75 0b                	jne    c001c145 <__udivdi3+0x45>
c001c13a:	b8 01 00 00 00       	mov    eax,0x1
c001c13f:	31 d2                	xor    edx,edx
c001c141:	f7 f7                	div    edi
c001c143:	89 c1                	mov    ecx,eax
c001c145:	31 d2                	xor    edx,edx
c001c147:	89 f0                	mov    eax,esi
c001c149:	f7 f1                	div    ecx
c001c14b:	89 c3                	mov    ebx,eax
c001c14d:	89 e8                	mov    eax,ebp
c001c14f:	f7 f1                	div    ecx
c001c151:	89 da                	mov    edx,ebx
c001c153:	83 c4 1c             	add    esp,0x1c
c001c156:	5b                   	pop    ebx
c001c157:	5e                   	pop    esi
c001c158:	5f                   	pop    edi
c001c159:	5d                   	pop    ebp
c001c15a:	c3                   	ret    
c001c15b:	90                   	nop
c001c15c:	39 f2                	cmp    edx,esi
c001c15e:	77 1c                	ja     c001c17c <__udivdi3+0x7c>
c001c160:	0f bd da             	bsr    ebx,edx
c001c163:	83 f3 1f             	xor    ebx,0x1f
c001c166:	75 24                	jne    c001c18c <__udivdi3+0x8c>
c001c168:	39 f2                	cmp    edx,esi
c001c16a:	72 08                	jb     c001c174 <__udivdi3+0x74>
c001c16c:	39 ef                	cmp    edi,ebp
c001c16e:	0f 87 84 00 00 00    	ja     c001c1f8 <__udivdi3+0xf8>
c001c174:	b8 01 00 00 00       	mov    eax,0x1
c001c179:	eb ac                	jmp    c001c127 <__udivdi3+0x27>
c001c17b:	90                   	nop
c001c17c:	31 db                	xor    ebx,ebx
c001c17e:	31 c0                	xor    eax,eax
c001c180:	89 da                	mov    edx,ebx
c001c182:	83 c4 1c             	add    esp,0x1c
c001c185:	5b                   	pop    ebx
c001c186:	5e                   	pop    esi
c001c187:	5f                   	pop    edi
c001c188:	5d                   	pop    ebp
c001c189:	c3                   	ret    
c001c18a:	66 90                	xchg   ax,ax
c001c18c:	b8 20 00 00 00       	mov    eax,0x20
c001c191:	29 d8                	sub    eax,ebx
c001c193:	88 d9                	mov    cl,bl
c001c195:	d3 e2                	shl    edx,cl
c001c197:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c19b:	89 fa                	mov    edx,edi
c001c19d:	88 c1                	mov    cl,al
c001c19f:	d3 ea                	shr    edx,cl
c001c1a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1a5:	09 d1                	or     ecx,edx
c001c1a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1ab:	88 d9                	mov    cl,bl
c001c1ad:	d3 e7                	shl    edi,cl
c001c1af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1b3:	89 f7                	mov    edi,esi
c001c1b5:	88 c1                	mov    cl,al
c001c1b7:	d3 ef                	shr    edi,cl
c001c1b9:	88 d9                	mov    cl,bl
c001c1bb:	d3 e6                	shl    esi,cl
c001c1bd:	89 ea                	mov    edx,ebp
c001c1bf:	88 c1                	mov    cl,al
c001c1c1:	d3 ea                	shr    edx,cl
c001c1c3:	09 d6                	or     esi,edx
c001c1c5:	89 f0                	mov    eax,esi
c001c1c7:	89 fa                	mov    edx,edi
c001c1c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c1cd:	89 d7                	mov    edi,edx
c001c1cf:	89 c6                	mov    esi,eax
c001c1d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1d5:	39 d7                	cmp    edi,edx
c001c1d7:	72 13                	jb     c001c1ec <__udivdi3+0xec>
c001c1d9:	74 09                	je     c001c1e4 <__udivdi3+0xe4>
c001c1db:	89 f0                	mov    eax,esi
c001c1dd:	31 db                	xor    ebx,ebx
c001c1df:	e9 43 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1e4:	88 d9                	mov    cl,bl
c001c1e6:	d3 e5                	shl    ebp,cl
c001c1e8:	39 c5                	cmp    ebp,eax
c001c1ea:	73 ef                	jae    c001c1db <__udivdi3+0xdb>
c001c1ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001c1ef:	31 db                	xor    ebx,ebx
c001c1f1:	e9 31 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1f6:	66 90                	xchg   ax,ax
c001c1f8:	31 c0                	xor    eax,eax
c001c1fa:	e9 28 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1ff:	90                   	nop

c001c200 <__umoddi3>:
c001c200:	55                   	push   ebp
c001c201:	57                   	push   edi
c001c202:	56                   	push   esi
c001c203:	53                   	push   ebx
c001c204:	83 ec 1c             	sub    esp,0x1c
c001c207:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c20b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c20f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c213:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c217:	89 da                	mov    edx,ebx
c001c219:	85 c0                	test   eax,eax
c001c21b:	75 37                	jne    c001c254 <__umoddi3+0x54>
c001c21d:	39 df                	cmp    edi,ebx
c001c21f:	76 13                	jbe    c001c234 <__umoddi3+0x34>
c001c221:	89 f0                	mov    eax,esi
c001c223:	f7 f7                	div    edi
c001c225:	89 d0                	mov    eax,edx
c001c227:	31 d2                	xor    edx,edx
c001c229:	83 c4 1c             	add    esp,0x1c
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	8d 76 00             	lea    esi,[esi+0x0]
c001c234:	89 fd                	mov    ebp,edi
c001c236:	85 ff                	test   edi,edi
c001c238:	75 0b                	jne    c001c245 <__umoddi3+0x45>
c001c23a:	b8 01 00 00 00       	mov    eax,0x1
c001c23f:	31 d2                	xor    edx,edx
c001c241:	f7 f7                	div    edi
c001c243:	89 c5                	mov    ebp,eax
c001c245:	89 d8                	mov    eax,ebx
c001c247:	31 d2                	xor    edx,edx
c001c249:	f7 f5                	div    ebp
c001c24b:	89 f0                	mov    eax,esi
c001c24d:	f7 f5                	div    ebp
c001c24f:	89 d0                	mov    eax,edx
c001c251:	eb d4                	jmp    c001c227 <__umoddi3+0x27>
c001c253:	90                   	nop
c001c254:	89 f1                	mov    ecx,esi
c001c256:	39 d8                	cmp    eax,ebx
c001c258:	76 0a                	jbe    c001c264 <__umoddi3+0x64>
c001c25a:	89 f0                	mov    eax,esi
c001c25c:	83 c4 1c             	add    esp,0x1c
c001c25f:	5b                   	pop    ebx
c001c260:	5e                   	pop    esi
c001c261:	5f                   	pop    edi
c001c262:	5d                   	pop    ebp
c001c263:	c3                   	ret    
c001c264:	0f bd e8             	bsr    ebp,eax
c001c267:	83 f5 1f             	xor    ebp,0x1f
c001c26a:	75 1c                	jne    c001c288 <__umoddi3+0x88>
c001c26c:	39 d8                	cmp    eax,ebx
c001c26e:	72 04                	jb     c001c274 <__umoddi3+0x74>
c001c270:	39 f7                	cmp    edi,esi
c001c272:	77 08                	ja     c001c27c <__umoddi3+0x7c>
c001c274:	89 da                	mov    edx,ebx
c001c276:	29 fe                	sub    esi,edi
c001c278:	19 c2                	sbb    edx,eax
c001c27a:	89 f1                	mov    ecx,esi
c001c27c:	89 c8                	mov    eax,ecx
c001c27e:	83 c4 1c             	add    esp,0x1c
c001c281:	5b                   	pop    ebx
c001c282:	5e                   	pop    esi
c001c283:	5f                   	pop    edi
c001c284:	5d                   	pop    ebp
c001c285:	c3                   	ret    
c001c286:	66 90                	xchg   ax,ax
c001c288:	ba 20 00 00 00       	mov    edx,0x20
c001c28d:	29 ea                	sub    edx,ebp
c001c28f:	89 e9                	mov    ecx,ebp
c001c291:	d3 e0                	shl    eax,cl
c001c293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c297:	89 f8                	mov    eax,edi
c001c299:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c29d:	88 d1                	mov    cl,dl
c001c29f:	d3 e8                	shr    eax,cl
c001c2a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2a5:	09 c1                	or     ecx,eax
c001c2a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2ab:	89 e9                	mov    ecx,ebp
c001c2ad:	d3 e7                	shl    edi,cl
c001c2af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2b3:	89 d8                	mov    eax,ebx
c001c2b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2b9:	88 d1                	mov    cl,dl
c001c2bb:	d3 e8                	shr    eax,cl
c001c2bd:	89 c7                	mov    edi,eax
c001c2bf:	89 e9                	mov    ecx,ebp
c001c2c1:	d3 e3                	shl    ebx,cl
c001c2c3:	89 f0                	mov    eax,esi
c001c2c5:	88 d1                	mov    cl,dl
c001c2c7:	d3 e8                	shr    eax,cl
c001c2c9:	09 d8                	or     eax,ebx
c001c2cb:	89 e9                	mov    ecx,ebp
c001c2cd:	d3 e6                	shl    esi,cl
c001c2cf:	89 f3                	mov    ebx,esi
c001c2d1:	89 fa                	mov    edx,edi
c001c2d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2d7:	89 d1                	mov    ecx,edx
c001c2d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2dd:	89 c6                	mov    esi,eax
c001c2df:	89 d7                	mov    edi,edx
c001c2e1:	39 d1                	cmp    ecx,edx
c001c2e3:	72 27                	jb     c001c30c <__umoddi3+0x10c>
c001c2e5:	74 21                	je     c001c308 <__umoddi3+0x108>
c001c2e7:	89 ca                	mov    edx,ecx
c001c2e9:	29 f3                	sub    ebx,esi
c001c2eb:	19 fa                	sbb    edx,edi
c001c2ed:	89 d0                	mov    eax,edx
c001c2ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c2f3:	d3 e0                	shl    eax,cl
c001c2f5:	89 e9                	mov    ecx,ebp
c001c2f7:	d3 eb                	shr    ebx,cl
c001c2f9:	09 d8                	or     eax,ebx
c001c2fb:	d3 ea                	shr    edx,cl
c001c2fd:	83 c4 1c             	add    esp,0x1c
c001c300:	5b                   	pop    ebx
c001c301:	5e                   	pop    esi
c001c302:	5f                   	pop    edi
c001c303:	5d                   	pop    ebp
c001c304:	c3                   	ret    
c001c305:	8d 76 00             	lea    esi,[esi+0x0]
c001c308:	39 c3                	cmp    ebx,eax
c001c30a:	73 db                	jae    c001c2e7 <__umoddi3+0xe7>
c001c30c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c310:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c314:	89 d7                	mov    edi,edx
c001c316:	89 c6                	mov    esi,eax
c001c318:	eb cd                	jmp    c001c2e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c31a <_init>:
c001c31a:	55                   	push   ebp
c001c31b:	89 e5                	mov    ebp,esp
c001c31d:	e8 d2 3d fe ff       	call   c00000f4 <frame_dummy>
c001c322:	e8 e5 fa ff ff       	call   c001be0c <__do_global_ctors_aux>
c001c327:	5d                   	pop    ebp
c001c328:	c3                   	ret    

Disassembly of section .fini:

c001c329 <_fini>:
c001c329:	55                   	push   ebp
c001c32a:	89 e5                	mov    ebp,esp
c001c32c:	e8 53 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c331:	5d                   	pop    ebp
c001c332:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c334 <Computer::~Computer()>:
c001c334:	83 ec 0c             	sub    esp,0xc
c001c337:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c001c33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c340:	89 10                	mov    DWORD PTR [eax],edx
c001c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	50                   	push   eax
c001c34a:	e8 23 f5 fe ff       	call   c000b872 <Device::~Device()>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	90                   	nop
c001c353:	83 c4 0c             	add    esp,0xc
c001c356:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c358 <Computer::~Computer()>:
c001c358:	83 ec 0c             	sub    esp,0xc
c001c35b:	83 ec 0c             	sub    esp,0xc
c001c35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c362:	e8 cd ff ff ff       	call   c001c334 <Computer::~Computer()>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	83 ec 08             	sub    esp,0x8
c001c36d:	68 70 01 00 00       	push   0x170
c001c372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c376:	e8 bf e0 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	83 c4 0c             	add    esp,0xc
c001c381:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c382 <idleCommon()>:
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	fa                   	cli    
c001c386:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c38c:	e8 17 74 ff ff       	call   c00137a8 <schedule()>
c001c391:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c396:	48                   	dec    eax
c001c397:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c39c:	75 01                	jne    c001c39f <idleCommon()+0x1d>
c001c39e:	fb                   	sti    
c001c39f:	83 c4 0c             	add    esp,0xc
c001c3a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3a4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3a4:	90                   	nop
c001c3a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3a6 <LinkedList<UnixFile>::LinkedList()>:
c001c3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3e6:	90                   	nop
c001c3e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c3e8:	83 ec 0c             	sub    esp,0xc
c001c3eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c3f0:	75 10                	jne    c001c402 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	68 58 d8 01 c0       	push   0xc001d858
c001c3fa:	e8 b4 3d ff ff       	call   c00101b3 <KePanic(char const*)>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	8b 00                	mov    eax,DWORD PTR [eax]
c001c408:	85 c0                	test   eax,eax
c001c40a:	74 34                	je     c001c440 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c410:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c413:	85 c0                	test   eax,eax
c001c415:	74 29                	je     c001c440 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c41e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c422:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c429:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c42d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c437:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c43e:	eb 65                	jmp    c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	8b 00                	mov    eax,DWORD PTR [eax]
c001c446:	85 c0                	test   eax,eax
c001c448:	75 4b                	jne    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c451:	85 c0                	test   eax,eax
c001c453:	75 40                	jne    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c45d:	89 10                	mov    DWORD PTR [eax],edx
c001c45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c463:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c467:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c471:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c47f:	85 c0                	test   eax,eax
c001c481:	74 22                	je     c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c483:	83 ec 0c             	sub    esp,0xc
c001c486:	68 7a d8 01 c0       	push   0xc001d87a
c001c48b:	e8 23 3d ff ff       	call   c00101b3 <KePanic(char const*)>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	eb 10                	jmp    c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c495:	83 ec 0c             	sub    esp,0xc
c001c498:	68 84 d8 01 c0       	push   0xc001d884
c001c49d:	e8 11 3d ff ff       	call   c00101b3 <KePanic(char const*)>
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ac:	8d 50 01             	lea    edx,[eax+0x1]
c001c4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4b6:	90                   	nop
c001c4b7:	83 c4 0c             	add    esp,0xc
c001c4ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c4bc <LinkedList<UnixFile>::getFirstElement()>:
c001c4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c4c4 <LinkedList<UnixFile>::removeFirst()>:
c001c4c4:	83 ec 0c             	sub    esp,0xc
c001c4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4cd:	85 c0                	test   eax,eax
c001c4cf:	75 12                	jne    c001c4e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	68 90 d8 01 c0       	push   0xc001d890
c001c4d9:	e8 d5 3c ff ff       	call   c00101b3 <KePanic(char const*)>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	eb 7e                	jmp    c001c561 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ed:	85 c0                	test   eax,eax
c001c4ef:	74 10                	je     c001c501 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c4f1:	83 ec 0c             	sub    esp,0xc
c001c4f4:	68 db d8 01 c0       	push   0xc001d8db
c001c4f9:	e8 b5 3c ff ff       	call   c00101b3 <KePanic(char const*)>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c505:	8b 00                	mov    eax,DWORD PTR [eax]
c001c507:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c50a:	85 c0                	test   eax,eax
c001c50c:	75 33                	jne    c001c541 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c512:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52a:	83 f8 01             	cmp    eax,0x1
c001c52d:	74 21                	je     c001c550 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c537:	e8 77 3c ff ff       	call   c00101b3 <KePanic(char const*)>
c001c53c:	83 c4 10             	add    esp,0x10
c001c53f:	eb 0f                	jmp    c001c550 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c545:	8b 00                	mov    eax,DWORD PTR [eax]
c001c547:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54e:	89 10                	mov    DWORD PTR [eax],edx
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c557:	8d 50 ff             	lea    edx,[eax-0x1]
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c561:	83 c4 0c             	add    esp,0xc
c001c564:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c566 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c56a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c56e <DriverlessDevice::~DriverlessDevice()>:
c001c56e:	ba 5c df 01 c0       	mov    edx,0xc001df5c
c001c573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c577:	89 10                	mov    DWORD PTR [eax],edx
c001c579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57d:	50                   	push   eax
c001c57e:	e8 ef f2 fe ff       	call   c000b872 <Device::~Device()>
c001c583:	83 c4 04             	add    esp,0x4
c001c586:	90                   	nop
c001c587:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c588 <DriverlessDevice::~DriverlessDevice()>:
c001c588:	83 ec 0c             	sub    esp,0xc
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c592:	e8 d7 ff ff ff       	call   c001c56e <DriverlessDevice::~DriverlessDevice()>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	83 ec 08             	sub    esp,0x8
c001c59d:	68 58 01 00 00       	push   0x158
c001c5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5a6:	e8 8f de fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	83 c4 0c             	add    esp,0xc
c001c5b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c5b2 <LinkedList<Device>::addElement(Device*)>:
c001c5b2:	83 ec 0c             	sub    esp,0xc
c001c5b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c5ba:	75 10                	jne    c001c5cc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c5bc:	83 ec 0c             	sub    esp,0xc
c001c5bf:	68 58 d8 01 c0       	push   0xc001d858
c001c5c4:	e8 ea 3b ff ff       	call   c00101b3 <KePanic(char const*)>
c001c5c9:	83 c4 10             	add    esp,0x10
c001c5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d2:	85 c0                	test   eax,eax
c001c5d4:	74 3a                	je     c001c610 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	74 2f                	je     c001c610 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c601:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c604:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c60e:	eb 68                	jmp    c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c614:	8b 00                	mov    eax,DWORD PTR [eax]
c001c616:	85 c0                	test   eax,eax
c001c618:	75 4e                	jne    c001c668 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c621:	85 c0                	test   eax,eax
c001c623:	75 43                	jne    c001c668 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c62d:	89 10                	mov    DWORD PTR [eax],edx
c001c62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c637:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c641:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c652:	85 c0                	test   eax,eax
c001c654:	74 22                	je     c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	68 7a d8 01 c0       	push   0xc001d87a
c001c65e:	e8 50 3b ff ff       	call   c00101b3 <KePanic(char const*)>
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	eb 10                	jmp    c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	68 84 d8 01 c0       	push   0xc001d884
c001c670:	e8 3e 3b ff ff       	call   c00101b3 <KePanic(char const*)>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c67f:	8d 50 01             	lea    edx,[eax+0x1]
c001c682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c686:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c689:	90                   	nop
c001c68a:	83 c4 0c             	add    esp,0xc
c001c68d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c68e <LinkedList<Device>::LinkedList()>:
c001c68e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c692:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ce:	90                   	nop
c001c6cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d6:	85 c0                	test   eax,eax
c001c6d8:	75 0e                	jne    c001c6e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e1:	85 c0                	test   eax,eax
c001c6e3:	75 03                	jne    c001c6e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6e5:	b0 01                	mov    al,0x1
c001c6e7:	c3                   	ret    
c001c6e8:	b0 00                	mov    al,0x0
c001c6ea:	90                   	nop
c001c6eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6fd:	85 c0                	test   eax,eax
c001c6ff:	75 17                	jne    c001c718 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c701:	83 ec 0c             	sub    esp,0xc
c001c704:	68 90 d8 01 c0       	push   0xc001d890
c001c709:	e8 a5 3a ff ff       	call   c00101b3 <KePanic(char const*)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	e9 92 00 00 00       	jmp    c001c7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c716:	66 90                	xchg   ax,ax
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c71f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c722:	85 c0                	test   eax,eax
c001c724:	0f 95 c0             	setne  al
c001c727:	84 c0                	test   al,al
c001c729:	74 11                	je     c001c73c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c72b:	83 ec 0c             	sub    esp,0xc
c001c72e:	68 db d8 01 c0       	push   0xc001d8db
c001c733:	e8 7b 3a ff ff       	call   c00101b3 <KePanic(char const*)>
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	90                   	nop
c001c73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c740:	8b 00                	mov    eax,DWORD PTR [eax]
c001c742:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c745:	85 c0                	test   eax,eax
c001c747:	0f 94 c0             	sete   al
c001c74a:	84 c0                	test   al,al
c001c74c:	74 36                	je     c001c784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c767:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c76a:	83 f8 01             	cmp    eax,0x1
c001c76d:	74 25                	je     c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c76f:	83 ec 0c             	sub    esp,0xc
c001c772:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c777:	e8 37 3a ff ff       	call   c00101b3 <KePanic(char const*)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	eb 13                	jmp    c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c781:	8d 76 00             	lea    esi,[esi+0x0]
c001c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c788:	8b 00                	mov    eax,DWORD PTR [eax]
c001c78a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c791:	89 10                	mov    DWORD PTR [eax],edx
c001c793:	90                   	nop
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c79b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a8:	83 c4 0c             	add    esp,0xc
c001c7ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7b4:	75 12                	jne    c001c7c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c7b6:	83 ec 0c             	sub    esp,0xc
c001c7b9:	68 58 d8 01 c0       	push   0xc001d858
c001c7be:	e8 f0 39 ff ff       	call   c00101b3 <KePanic(char const*)>
c001c7c3:	83 c4 10             	add    esp,0x10
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ce:	85 c0                	test   eax,eax
c001c7d0:	74 36                	je     c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d9:	85 c0                	test   eax,eax
c001c7db:	74 2b                	je     c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c804:	eb 6a                	jmp    c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c806:	66 90                	xchg   ax,ax
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c80e:	85 c0                	test   eax,eax
c001c810:	75 4e                	jne    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c819:	85 c0                	test   eax,eax
c001c81b:	75 43                	jne    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c821:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c825:	89 10                	mov    DWORD PTR [eax],edx
c001c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c82f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c839:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c847:	85 c0                	test   eax,eax
c001c849:	74 25                	je     c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	68 7a d8 01 c0       	push   0xc001d87a
c001c853:	e8 5b 39 ff ff       	call   c00101b3 <KePanic(char const*)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	eb 13                	jmp    c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c85d:	8d 76 00             	lea    esi,[esi+0x0]
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	68 84 d8 01 c0       	push   0xc001d884
c001c868:	e8 46 39 ff ff       	call   c00101b3 <KePanic(char const*)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c877:	8d 50 01             	lea    edx,[eax+0x1]
c001c87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c881:	90                   	nop
c001c882:	83 c4 0c             	add    esp,0xc
c001c885:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c888 <ACPI::~ACPI()>:
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	ba d4 e4 01 c0       	mov    edx,0xc001e4d4
c001c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c894:	89 10                	mov    DWORD PTR [eax],edx
c001c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89a:	83 ec 0c             	sub    esp,0xc
c001c89d:	50                   	push   eax
c001c89e:	e8 cf ef fe ff       	call   c000b872 <Device::~Device()>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	90                   	nop
c001c8a7:	83 c4 0c             	add    esp,0xc
c001c8aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8ac <ACPI::~ACPI()>:
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b6:	e8 cd ff ff ff       	call   c001c888 <ACPI::~ACPI()>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	83 ec 08             	sub    esp,0x8
c001c8c1:	68 64 12 00 00       	push   0x1264
c001c8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ca:	e8 6b db fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	83 c4 0c             	add    esp,0xc
c001c8d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c8d8 <LinkedList<Device>::~LinkedList()>:
c001c8d8:	90                   	nop
c001c8d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c8dc <LinkedList<Device>::isEmpty()>:
c001c8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8e2:	85 c0                	test   eax,eax
c001c8e4:	75 0e                	jne    c001c8f4 <LinkedList<Device>::isEmpty()+0x18>
c001c8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ed:	85 c0                	test   eax,eax
c001c8ef:	75 03                	jne    c001c8f4 <LinkedList<Device>::isEmpty()+0x18>
c001c8f1:	b0 01                	mov    al,0x1
c001c8f3:	c3                   	ret    
c001c8f4:	b0 00                	mov    al,0x0
c001c8f6:	90                   	nop
c001c8f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c8f8 <LinkedList<Device>::getFirstElement()>:
c001c8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c900 <LinkedList<Device>::removeFirst()>:
c001c900:	83 ec 0c             	sub    esp,0xc
c001c903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c907:	8b 00                	mov    eax,DWORD PTR [eax]
c001c909:	85 c0                	test   eax,eax
c001c90b:	75 17                	jne    c001c924 <LinkedList<Device>::removeFirst()+0x24>
c001c90d:	83 ec 0c             	sub    esp,0xc
c001c910:	68 90 d8 01 c0       	push   0xc001d890
c001c915:	e8 99 38 ff ff       	call   c00101b3 <KePanic(char const*)>
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	e9 92 00 00 00       	jmp    c001c9b4 <LinkedList<Device>::removeFirst()+0xb4>
c001c922:	66 90                	xchg   ax,ax
c001c924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c92b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c931:	85 c0                	test   eax,eax
c001c933:	74 13                	je     c001c948 <LinkedList<Device>::removeFirst()+0x48>
c001c935:	83 ec 0c             	sub    esp,0xc
c001c938:	68 db d8 01 c0       	push   0xc001d8db
c001c93d:	e8 71 38 ff ff       	call   c00101b3 <KePanic(char const*)>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	8d 76 00             	lea    esi,[esi+0x0]
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c954:	85 c0                	test   eax,eax
c001c956:	75 34                	jne    c001c98c <LinkedList<Device>::removeFirst()+0x8c>
c001c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c966:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c971:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c974:	83 f8 01             	cmp    eax,0x1
c001c977:	74 27                	je     c001c9a0 <LinkedList<Device>::removeFirst()+0xa0>
c001c979:	83 ec 0c             	sub    esp,0xc
c001c97c:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c981:	e8 2d 38 ff ff       	call   c00101b3 <KePanic(char const*)>
c001c986:	83 c4 10             	add    esp,0x10
c001c989:	eb 15                	jmp    c001c9a0 <LinkedList<Device>::removeFirst()+0xa0>
c001c98b:	90                   	nop
c001c98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c990:	8b 00                	mov    eax,DWORD PTR [eax]
c001c992:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99c:	89 10                	mov    DWORD PTR [eax],edx
c001c99e:	66 90                	xchg   ax,ax
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b4:	83 c4 0c             	add    esp,0xc
c001c9b7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c9b8 <CPU::~CPU()>:
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	ba 70 e6 01 c0       	mov    edx,0xc001e670
c001c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c4:	89 10                	mov    DWORD PTR [eax],edx
c001c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	50                   	push   eax
c001c9ce:	e8 9f ee fe ff       	call   c000b872 <Device::~Device()>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	90                   	nop
c001c9d7:	83 c4 0c             	add    esp,0xc
c001c9da:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c9dc <CPU::~CPU()>:
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	83 ec 0c             	sub    esp,0xc
c001c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9e6:	e8 cd ff ff ff       	call   c001c9b8 <CPU::~CPU()>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	83 ec 08             	sub    esp,0x8
c001c9f1:	68 94 11 00 00       	push   0x1194
c001c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9fa:	e8 3b da fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	83 c4 0c             	add    esp,0xc
c001ca05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca08 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca08:	90                   	nop
c001ca09:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca0c <ThreadControlBlock::ThreadControlBlock()>:
c001ca0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca26:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca31:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca47:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca53:	90                   	nop
c001ca54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca98:	90                   	nop
c001ca99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ca9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ca9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caa0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001caa3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001caa4 <PCI::~PCI()>:
c001caa4:	83 ec 0c             	sub    esp,0xc
c001caa7:	ba 0c f3 01 c0       	mov    edx,0xc001f30c
c001caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab0:	89 10                	mov    DWORD PTR [eax],edx
c001cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	50                   	push   eax
c001caba:	e8 3d e8 fe ff       	call   c000b2fc <Bus::~Bus()>
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	90                   	nop
c001cac3:	83 c4 0c             	add    esp,0xc
c001cac6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cac8 <PCI::~PCI()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	83 ec 0c             	sub    esp,0xc
c001cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad2:	e8 cd ff ff ff       	call   c001caa4 <PCI::~PCI()>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	83 ec 08             	sub    esp,0x8
c001cadd:	68 5c 01 00 00       	push   0x15c
c001cae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae6:	e8 4f d9 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 c4 0c             	add    esp,0xc
c001caf1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001caf2 <IDE::~IDE()>:
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c001cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafe:	89 10                	mov    DWORD PTR [eax],edx
c001cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	50                   	push   eax
c001cb08:	e8 df f1 fe ff       	call   c000bcec <HardDiskController::~HardDiskController()>
c001cb0d:	83 c4 10             	add    esp,0x10
c001cb10:	90                   	nop
c001cb11:	83 c4 0c             	add    esp,0xc
c001cb14:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb16 <IDE::~IDE()>:
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	83 ec 0c             	sub    esp,0xc
c001cb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb20:	e8 cd ff ff ff       	call   c001caf2 <IDE::~IDE()>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	83 ec 08             	sub    esp,0x8
c001cb2b:	68 70 02 00 00       	push   0x270
c001cb30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb34:	e8 01 d9 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cb39:	83 c4 10             	add    esp,0x10
c001cb3c:	83 c4 0c             	add    esp,0xc
c001cb3f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb40 <SATABus::~SATABus()>:
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c001cb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4c:	89 10                	mov    DWORD PTR [eax],edx
c001cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb52:	83 ec 0c             	sub    esp,0xc
c001cb55:	50                   	push   eax
c001cb56:	e8 91 f1 fe ff       	call   c000bcec <HardDiskController::~HardDiskController()>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	90                   	nop
c001cb5f:	83 c4 0c             	add    esp,0xc
c001cb62:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb64 <SATABus::~SATABus()>:
c001cb64:	83 ec 0c             	sub    esp,0xc
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb6e:	e8 cd ff ff ff       	call   c001cb40 <SATABus::~SATABus()>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	83 ec 08             	sub    esp,0x8
c001cb79:	68 64 01 00 00       	push   0x164
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	e8 b3 d8 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 c4 0c             	add    esp,0xc
c001cb8d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cb8e <ATA::~ATA()>:
c001cb8e:	83 ec 0c             	sub    esp,0xc
c001cb91:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c001cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9a:	89 10                	mov    DWORD PTR [eax],edx
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	50                   	push   eax
c001cba4:	e8 25 f2 fe ff       	call   c000bdce <PhysicalDisk::~PhysicalDisk()>
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	90                   	nop
c001cbad:	83 c4 0c             	add    esp,0xc
c001cbb0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cbb2 <ATA::~ATA()>:
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	83 ec 0c             	sub    esp,0xc
c001cbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbc:	e8 cd ff ff ff       	call   c001cb8e <ATA::~ATA()>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	83 ec 08             	sub    esp,0x8
c001cbc7:	68 7c 01 00 00       	push   0x17c
c001cbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd0:	e8 65 d8 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	83 c4 0c             	add    esp,0xc
c001cbdb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cbdc <ATAPI::~ATAPI()>:
c001cbdc:	83 ec 0c             	sub    esp,0xc
c001cbdf:	ba 98 f4 01 c0       	mov    edx,0xc001f498
c001cbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe8:	89 10                	mov    DWORD PTR [eax],edx
c001cbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbee:	83 ec 0c             	sub    esp,0xc
c001cbf1:	50                   	push   eax
c001cbf2:	e8 d7 f1 fe ff       	call   c000bdce <PhysicalDisk::~PhysicalDisk()>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	90                   	nop
c001cbfb:	83 c4 0c             	add    esp,0xc
c001cbfe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc00 <ATAPI::~ATAPI()>:
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	83 ec 0c             	sub    esp,0xc
c001cc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0a:	e8 cd ff ff ff       	call   c001cbdc <ATAPI::~ATAPI()>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	83 ec 08             	sub    esp,0x8
c001cc15:	68 84 01 00 00       	push   0x184
c001cc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1e:	e8 17 d8 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cc23:	83 c4 10             	add    esp,0x10
c001cc26:	83 c4 0c             	add    esp,0xc
c001cc29:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc2a <SATA::~SATA()>:
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	ba 4c f5 01 c0       	mov    edx,0xc001f54c
c001cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc36:	89 10                	mov    DWORD PTR [eax],edx
c001cc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3c:	83 ec 0c             	sub    esp,0xc
c001cc3f:	50                   	push   eax
c001cc40:	e8 89 f1 fe ff       	call   c000bdce <PhysicalDisk::~PhysicalDisk()>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	90                   	nop
c001cc49:	83 c4 0c             	add    esp,0xc
c001cc4c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc4e <SATA::~SATA()>:
c001cc4e:	83 ec 0c             	sub    esp,0xc
c001cc51:	83 ec 0c             	sub    esp,0xc
c001cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc58:	e8 cd ff ff ff       	call   c001cc2a <SATA::~SATA()>
c001cc5d:	83 c4 10             	add    esp,0x10
c001cc60:	83 ec 08             	sub    esp,0x8
c001cc63:	68 7c 01 00 00       	push   0x17c
c001cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6c:	e8 c9 d7 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	83 c4 0c             	add    esp,0xc
c001cc77:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc78 <SATAPI::~SATAPI()>:
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	ba 84 f6 01 c0       	mov    edx,0xc001f684
c001cc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc84:	89 10                	mov    DWORD PTR [eax],edx
c001cc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8a:	83 ec 0c             	sub    esp,0xc
c001cc8d:	50                   	push   eax
c001cc8e:	e8 3b f1 fe ff       	call   c000bdce <PhysicalDisk::~PhysicalDisk()>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	90                   	nop
c001cc97:	83 c4 0c             	add    esp,0xc
c001cc9a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cc9c <SATAPI::~SATAPI()>:
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	83 ec 0c             	sub    esp,0xc
c001cca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca6:	e8 cd ff ff ff       	call   c001cc78 <SATAPI::~SATAPI()>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	83 ec 08             	sub    esp,0x8
c001ccb1:	68 84 01 00 00       	push   0x184
c001ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccba:	e8 7b d7 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 c4 0c             	add    esp,0xc
c001ccc5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ccc6 <IOAPIC::~IOAPIC()>:
c001ccc6:	83 ec 0c             	sub    esp,0xc
c001ccc9:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd2:	89 10                	mov    DWORD PTR [eax],edx
c001ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	50                   	push   eax
c001ccdc:	e8 91 eb fe ff       	call   c000b872 <Device::~Device()>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	90                   	nop
c001cce5:	83 c4 0c             	add    esp,0xc
c001cce8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ccea <IOAPIC::~IOAPIC()>:
c001ccea:	83 ec 0c             	sub    esp,0xc
c001cced:	83 ec 0c             	sub    esp,0xc
c001ccf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf4:	e8 cd ff ff ff       	call   c001ccc6 <IOAPIC::~IOAPIC()>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	83 ec 08             	sub    esp,0x8
c001ccff:	68 68 01 00 00       	push   0x168
c001cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd08:	e8 2d d7 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	83 c4 0c             	add    esp,0xc
c001cd13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd14 <APICTimer::~APICTimer()>:
c001cd14:	83 ec 0c             	sub    esp,0xc
c001cd17:	ba 0c f7 01 c0       	mov    edx,0xc001f70c
c001cd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd20:	89 10                	mov    DWORD PTR [eax],edx
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	83 ec 0c             	sub    esp,0xc
c001cd29:	50                   	push   eax
c001cd2a:	e8 81 04 ff ff       	call   c000d1b0 <Timer::~Timer()>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	90                   	nop
c001cd33:	83 c4 0c             	add    esp,0xc
c001cd36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd38 <APICTimer::~APICTimer()>:
c001cd38:	83 ec 0c             	sub    esp,0xc
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd42:	e8 cd ff ff ff       	call   c001cd14 <APICTimer::~APICTimer()>
c001cd47:	83 c4 10             	add    esp,0x10
c001cd4a:	83 ec 08             	sub    esp,0x8
c001cd4d:	68 60 01 00 00       	push   0x160
c001cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd56:	e8 df d6 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	83 c4 0c             	add    esp,0xc
c001cd61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd64 <PIT::~PIT()>:
c001cd64:	83 ec 0c             	sub    esp,0xc
c001cd67:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c001cd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd70:	89 10                	mov    DWORD PTR [eax],edx
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	50                   	push   eax
c001cd7a:	e8 31 04 ff ff       	call   c000d1b0 <Timer::~Timer()>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	90                   	nop
c001cd83:	83 c4 0c             	add    esp,0xc
c001cd86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cd88 <PIT::~PIT()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd92:	e8 cd ff ff ff       	call   c001cd64 <PIT::~PIT()>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	83 ec 08             	sub    esp,0x8
c001cd9d:	68 5c 01 00 00       	push   0x15c
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 8f d6 fe ff       	call   c000a43a <operator delete(void*, unsigned long)>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 61 e7 01 c0       	mov    esi,0xc001e761
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 7d e7 01 c0       	mov    esi,0xc001e77d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
