
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 19 11 02 00       	call   c002113e <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 1d 02 c0       	mov    ebx,0xc0021dc2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 1d 02 c0    	cmp    ebx,0xc0021dd0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 5d 02 c0       	mov    eax,0xc0025df8
c0000049:	3d f8 5d 02 c0       	cmp    eax,0xc0025df8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 5d 02 c0       	push   0xc0025df8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 5d 02 c0       	mov    eax,0xc0025df8
c0000075:	2d f8 5d 02 c0       	sub    eax,0xc0025df8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 5d 02 c0       	push   0xc0025df8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 80 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025f80,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 1d 02 c0       	mov    ebx,0xc0021dd8
c00000bb:	81 eb d4 1d 02 c0    	sub    ebx,0xc0021dd4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 1d 02 c0       	mov    esi,0xc0021dd4
c00000ca:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 84 5f 02 c0       	mov    ds:0xc0025f84,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 5d 02 c0       	push   0xc0025df8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 80 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f80,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 88 5f 02 c0       	push   0xc0025f88
c000012c:	68 f8 5d 02 c0       	push   0xc0025df8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 d0 74 01 00       	call   c00177a8 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 e4 c4 00 00       	call   c000c7d4 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 ae 74 01 00       	call   c00177a8 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 77 79 01 00       	call   c0017c90 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 ba 7f 01 00       	call   c00182dc <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 d0 63 02 c0 	lgdtd  ds:0xc00263d0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 72 e2 00 00       	call   c000e789 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 a0 5f 02 c0       	mov    ds:0xc0025fa0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 a0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d a0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fa0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 e0 1d 02 c0 02 	test   BYTE PTR [edx-0x3ffde220],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 e0 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde220],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 e0 1d 02 c0 08 	test   BYTE PTR [edx-0x3ffde220],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 e0 1d 02 c0 04 	test   BYTE PTR [ebx-0x3ffde220],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 e0 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde220],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d c0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d c0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fc0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 c4 5f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda03c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 c4 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda03c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d c0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fc0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 ec 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fec,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d fc 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ffc
c0000d6c:	c7 42 0c f4 5f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025ff4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 fc 5f 02 c0    	mov    DWORD PTR ds:0xc0025ffc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 ec 5f 02 c0    	mov    DWORD PTR ds:0xc0025fec,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 c0 5f 02 c0 02 	test   BYTE PTR ds:0xc0025fc0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d c0 5f 02 c0    	mov    edi,DWORD PTR ds:0xc0025fc0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 c4 5f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda03c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 c4 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda03c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 f4 5f 02 c0 	lea    edx,[eax*8-0x3ffda00c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 00 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026000
c00010ee:	81 fb f4 5f 02 c0    	cmp    ebx,0xc0025ff4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d f4 5f 02 c0       	cmp    eax,0xc0025ff4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d f0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025ff0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 fc 5f 02 c0       	mov    ds:0xc0025ffc,eax
c000112a:	a3 00 60 02 c0       	mov    ds:0xc0026000,eax
c000112f:	a3 f0 5f 02 c0       	mov    ds:0xc0025ff0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 f4 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ff4
c000113d:	c7 40 0c f4 5f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025ff4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 00 60 02 c0       	mov    ds:0xc0026000,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 f4 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ff4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 b8 5f 02 c0 	lea    ebp,[edx*4-0x3ffda048]
c000118e:	8b 14 95 c0 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda040]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 c0 5f 02 c0 	lea    ecx,[edx*4-0x3ffda040]
c00011a9:	8b 14 95 c0 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda040]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd f4 62 02 c0 	or     DWORD PTR [edi*4-0x3ffd9d0c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 f4 5f 02 c0 	lea    eax,[eax*8-0x3ffda00c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d fc 5f 02 c0    	mov    DWORD PTR ds:0xc0025ffc,ecx
c0001263:	89 0d 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,ecx
c0001269:	c7 41 08 f4 5f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025ff4
c0001270:	c7 41 0c f4 5f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025ff4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd ec 5f 02 c0 	lea    edx,[ecx*8-0x3ffda014]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d f4 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9d0c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d f4 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9d0c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 ec 5f 02 c0 	lea    edx,[eax*4-0x3ffda014]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d f4 62 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9d0c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d fc 5f 02 c0    	mov    DWORD PTR ds:0xc0025ffc,edi
c0001336:	89 3d 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,edi
c000133c:	c7 47 08 f4 5f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025ff4
c0001343:	c7 47 0c f4 5f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025ff4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d f0 5f 02 c0    	mov    DWORD PTR ds:0xc0025ff0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 ec 5f 02 c0       	mov    eax,ds:0xc0025fec
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d ec 5f 02 c0    	mov    DWORD PTR ds:0xc0025fec,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba c0 5f 02 c0       	mov    edx,0xc0025fc0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d c0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fc0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 14 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026314
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 14 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026314,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 14 63 02 c0    	mov    DWORD PTR ds:0xc0026314,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 ec 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fec,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d ec 5f 02 c0    	mov    DWORD PTR ds:0xc0025fec,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d c0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fc0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 1c 63 02 c0    	push   DWORD PTR ds:0xc002631c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d c0 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fc0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 1c 63 02 c0       	mov    eax,ds:0xc002631c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d ec 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025fec,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 ec 5f 02 c0       	mov    eax,ds:0xc0025fec
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 c4 5f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda03c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 f4 5f 02 c0       	mov    eax,0xc0025ff4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d ec 62 02 c0       	cmp    eax,0xc00262ec
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 10 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026310
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 24 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026324
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 34 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026334
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 c0 5f 02 c0       	mov    eax,0xc0025fc0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 e4 1e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde11c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 04 63 02 c0    	mov    DWORD PTR ds:0xc0026304,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 08 63 02 c0    	mov    DWORD PTR ds:0xc0026308,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 0c 63 02 c0    	mov    DWORD PTR ds:0xc002630c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 14 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026314,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 ba 94 01 00       	jmp    c001afe0 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 ec 94 01 00       	jmp    c001b028 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 15 95 01 00       	jmp    c001b070 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 e6 f0 01 00       	call   c0020f24 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 00 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde000]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 00 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde000]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 20 20 02 c0       	mov    edx,0xc0022020
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba e4 4a 02 c0       	mov    edx,0xc0024ae4
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 2c 20 02 c0       	mov    edx,0xc002202c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 10 20 02 c0       	mov    edx,0xc0022010
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 60 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9ca0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 40 63 02 c0    	mov    ax,ds:0xc0026340
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 40 63 02 c0    	mov    ds:0xc0026340,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 e3 de 01 00       	call   c0020f24 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 32 20 02 c0       	mov    eax,0xc0022032
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 80 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde080]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 3b 20 02 c0       	mov    eax,0xc002203b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 00 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde000]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 ae c8 01 00       	call   c0020f24 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 10 20 02 c0       	mov    edx,0xc0022010
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 10 1f 02 c0       	mov    edx,0xc0021f10
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 60 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9ca0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 60 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9ca0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 75 b2 01 00       	call   c0020f24 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 5b b2 01 00       	call   c0020f24 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 57 1f 02 c0       	mov    eax,0xc0021f57
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 50 1f 02 c0       	mov    eax,0xc0021f50
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 f4 9d 01 00       	call   c0020f24 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 60 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ca0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 40 1f 02 c0       	mov    esi,0xc0021f40
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 68 97 01 00       	call   c0020f24 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 20 20 02 c0       	mov    edx,0xc0022020
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 30 1f 02 c0       	mov    edx,0xc0021f30
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 42 20 02 c0       	mov    edx,0xc0022042
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 4e 20 02 c0       	mov    edx,0xc002204e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 62 20 02 c0       	mov    edx,0xc0022062
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 80 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022380
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 80 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022380
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 80 21 02 c0       	mov    eax,0xc0022180
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 c0 20 02 c0       	mov    eax,0xc00220c0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000888b:	48                   	dec    eax
c000888c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00088a2:	48                   	dec    eax
c00088a3:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00088b3:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00088c2:	48                   	dec    eax
c00088c3:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00088dd:	e8 1a f6 00 00       	call   c0017efc <schedule()>
c00088e2:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00088e7:	48                   	dec    eax
c00088e8:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 80 24 02 c0       	push   0xc0022480
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 c8 63 02 c0       	mov    eax,0xc00263c8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 89 24 02 c0       	push   0xc0022489
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 24 0f 02 c0       	mov    eax,0xc0020f24
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 93 24 02 c0       	push   0xc0022493
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 58 0c 02 c0       	mov    eax,0xc0020c58
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 9c 24 02 c0       	push   0xc002249c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 24 10 02 c0       	mov    eax,0xc0021024
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 a6 24 02 c0       	push   0xc00224a6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 a4 0d 02 c0       	mov    eax,0xc0020da4
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 af 24 02 c0       	push   0xc00224af
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 cc 63 02 c0       	mov    eax,0xc00263cc
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 bc 24 02 c0       	push   0xc00224bc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 cd 63 02 c0       	mov    eax,0xc00263cd
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 f3 55 00 00       	call   c000e038 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 c9 24 02 c0       	push   0xc00224c9
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 e0 24 02 c0 	mov    DWORD PTR [esp],0xc00224e0
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0008aa2:	68 f9 24 02 c0       	push   0xc00224f9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 29 f0 00 00       	call   c0017ad8 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 1c f2 00 00       	call   c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 24 87 01 c0       	push   0xc0018724
c0008acd:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0008ad3:	e8 08 f2 00 00       	call   c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 a8 78 02 c0       	mov    ds:0xc00278a8,eax
c0008ae0:	68 a0 26 02 c0       	push   0xc00226a0
c0008ae5:	c6 05 cd 63 02 c0 01 	mov    BYTE PTR ds:0xc00263cd,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 09 00 01 00       	call   c0018aff <Vm::initialise8086()>
c0008af6:	e8 03 43 00 00       	call   c000cdfe <Fs::initVFS()>
c0008afb:	c7 04 24 06 25 02 c0 	mov    DWORD PTR [esp],0xc0022506
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 a0 26 02 c0       	push   0xc00226a0
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 16 d8 00 00       	call   c0016346 <Sys::loadSyscalls()>
c0008b30:	e8 eb b6 00 00       	call   c0014220 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 20 25 02 c0       	push   0xc0022520
c0008b3f:	68 29 25 02 c0       	push   0xc0022529
c0008b44:	e8 c0 c5 00 00       	call   c0015109 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 9f 4d 00 00       	call   c000d8f0 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 c4 26 02 c0 	mov    DWORD PTR [esp],0xc00226c4
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 8a 54 00 00       	call   c000dff8 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 31 25 02 c0 	mov    DWORD PTR [esp],0xc0022531
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 09 b2 00 00       	call   c0013d88 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 4b 25 02 c0 	mov    DWORD PTR [esp],0xc002254b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 5c 25 02 c0       	push   0xc002255c
c0008b9a:	e8 77 e9 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 9f eb 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 3f f5 00 00       	call   c00180f4 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 78 25 02 c0       	push   0xc0022578
c0008bc9:	50                   	push   eax
c0008bca:	e8 e3 54 00 00       	call   c000e0b2 <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 74 27 02 c0       	mov    edx,0xc0022774
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 e1 63 02 c0 04 	test   BYTE PTR ds:0xc00263e1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 83 7e 01 00       	call   c0020be6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 ec 9e 00 00       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 c5 9e 00 00       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 a3 9e 00 00       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 81 9e 00 00       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 e0 63 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00263e0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 8f 9d 00 00       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 6a 9d 00 00       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 ed 7c 01 00       	call   c0020ba0 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 aa 7c 01 00       	call   c0020b80 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 86 9d 00 00       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 81 25 02 c0       	push   0xc0022581
c0008f46:	e8 de b3 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 87 25 02 c0       	push   0xc0022587
c0008f7e:	e8 a6 b3 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 e4 26 02 c0       	push   0xc00226e4
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 e0 63 02 c0 04 	test   BYTE PTR ds:0xc00263e0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 a0 57 02 c0 	sete   BYTE PTR ds:0xc00257a0
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 8d 25 02 c0       	push   0xc002258d
c0008ff3:	e8 6f 3a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 a3 25 02 c0       	push   0xc00225a3
c0009004:	e8 5e 3a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 b7 25 02 c0       	push   0xc00225b7
c0009012:	e8 50 3a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 ca 25 02 c0       	push   0xc00225ca
c0009023:	e8 3f 3a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 e1 25 02 c0       	push   0xc00225e1
c0009031:	e8 31 3a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 f7 25 02 c0 	mov    DWORD PTR [esp],0xc00225f7
c000903d:	e8 25 3a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 09 26 02 c0 	mov    DWORD PTR [esp],0xc0022609
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 98 8d 00 00       	call   c0011dfc <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 23 26 02 c0 	mov    DWORD PTR [esp],0xc0022623
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 2a 4e 00 00       	call   c000deae <Device::addChild(Device*)>
c0009084:	c7 04 24 08 27 02 c0 	mov    DWORD PTR [esp],0xc0022708
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 28 27 02 c0 	mov    DWORD PTR [esp],0xc0022728
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 3d 26 02 c0 	mov    DWORD PTR [esp],0xc002263d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 31 25 02 c0 	mov    DWORD PTR [esp],0xc0022531
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 66 9c 00 00       	call   c0012d42 <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 c3 4d 00 00       	call   c000deae <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 48 27 02 c0       	push   0xc0022748
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 39 53 00 00       	call   c000e44a <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 86 4d 00 00       	call   c000deae <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 4e 26 02 c0       	push   0xc002264e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 9e ec 00 00       	call   c0017df4 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 69 26 02 c0       	push   0xc0022669
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 c2 38 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 7a 26 02 c0       	push   0xc002267a
c00091c2:	e8 62 b1 00 00       	call   c0014329 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 87 26 02 c0       	push   0xc0022687
c00091d7:	e8 4d b1 00 00       	call   c0014329 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 91 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022691
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 36 b1 00 00       	jmp    c0014329 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 d2 63 02 c0       	mov    ds:0xc00263d2,eax
c00092af:	66 89 15 d0 63 02 c0 	mov    WORD PTR ds:0xc00263d0,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00093c6:	48                   	dec    eax
c00093c7:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 89 7d 01 00       	call   c00211a6 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 80 7d 01 00       	call   c00211a6 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 d8 63 02 c0 ff 07 	mov    WORD PTR ds:0xc00263d8,0x7ff
c0009519:	a3 da 63 02 c0       	mov    ds:0xc00263da,eax
c000951e:	0f 01 1d d8 63 02 c0 	lidtd  ds:0xc00263d8
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c0009810:	e8 29 26 00 00       	call   c000be3e <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 a5 17 00 00       	call   c000afd8 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 da 17 00 00       	call   c000b01c <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 98 27 02 c0       	push   0xc0022798
c000989d:	e8 c5 31 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 2c 56 02 c0       	mov    eax,ds:0xc002562c
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 30 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026530
c00098cc:	8b 3d 2c 56 02 c0    	mov    edi,DWORD PTR ds:0xc002562c
c00098d2:	e8 13 05 00 00       	call   c0009dea <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 58 24 00 00       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 2c 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002562c,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 2c 56 02 c0       	mov    eax,ds:0xc002562c
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 c4 27 02 c0       	push   0xc00227c4
c0009918:	e8 4a 31 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 b6 27 02 c0       	push   0xc00227b6
c0009937:	e8 ed a9 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 bb 27 02 c0       	push   0xc00227bb
c000994d:	e8 d7 a9 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000996d:	48                   	dec    eax
c000996e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000998b:	e8 ae 24 00 00       	call   c000be3e <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c00099a1:	e8 42 21 00 00       	call   c000bae8 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 f4 27 02 c0       	push   0xc00227f4
c0009ace:	e8 94 2f 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 00 0a 00 00       	call   c000a4d8 <installVgaTextImplementation()>
c0009ad8:	0f b6 05 40 56 02 c0 	movzx  eax,BYTE PTR ds:0xc0025640
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 40 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda9c0]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 76 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda98a],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 75 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda98b]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 40 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda9c0]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 0c 28 02 c0       	push   0xc002280c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 e0 63 02 c0       	mov    ds:0xc00263e0,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 e9 03 00 00       	call   c0009f69 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 cf 1c 00 00       	call   c000b854 <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 80 1d 00 00       	call   c000b910 <VAS::VAS()>
c0009b90:	89 1d 30 65 02 c0    	mov    DWORD PTR ds:0xc0026530,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 c8 63 02 c0    	mov    DWORD PTR ds:0xc00263c8,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 f4 1f 00 00       	call   c000bbc0 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 18             	sub    esp,0x18
c0009bde:	68 2b 28 02 c0       	push   0xc002282b
c0009be3:	e8 7f 2e 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bec:	31 d2                	xor    edx,edx
c0009bee:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	c1 e8 0c             	shr    eax,0xc
c0009bf9:	31 c9                	xor    ecx,ecx
c0009bfb:	eb 17                	jmp    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009bfd:	85 c9                	test   ecx,ecx
c0009bff:	75 04                	jne    c0009c05 <Phys::allocateDMA(unsigned long)+0x32>
c0009c01:	89 d5                	mov    ebp,edx
c0009c03:	89 d3                	mov    ebx,edx
c0009c05:	8d 71 01             	lea    esi,[ecx+0x1]
c0009c08:	39 f0                	cmp    eax,esi
c0009c0a:	74 23                	je     c0009c2f <Phys::allocateDMA(unsigned long)+0x5c>
c0009c0c:	42                   	inc    edx
c0009c0d:	89 f1                	mov    ecx,esi
c0009c0f:	83 fa 2f             	cmp    edx,0x2f
c0009c12:	7f 11                	jg     c0009c25 <Phys::allocateDMA(unsigned long)+0x52>
c0009c14:	80 ba 20 64 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9be0],0x0
c0009c1b:	74 e0                	je     c0009bfd <Phys::allocateDMA(unsigned long)+0x2a>
c0009c1d:	31 c9                	xor    ecx,ecx
c0009c1f:	42                   	inc    edx
c0009c20:	83 fa 2f             	cmp    edx,0x2f
c0009c23:	7e ef                	jle    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009c25:	83 c4 0c             	add    esp,0xc
c0009c28:	31 c0                	xor    eax,eax
c0009c2a:	5b                   	pop    ebx
c0009c2b:	5e                   	pop    esi
c0009c2c:	5f                   	pop    edi
c0009c2d:	5d                   	pop    ebp
c0009c2e:	c3                   	ret    
c0009c2f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0009c32:	89 d7                	mov    edi,edx
c0009c34:	4f                   	dec    edi
c0009c35:	79 03                	jns    c0009c3a <Phys::allocateDMA(unsigned long)+0x67>
c0009c37:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c3a:	c1 ff 04             	sar    edi,0x4
c0009c3d:	89 da                	mov    edx,ebx
c0009c3f:	c1 fa 04             	sar    edx,0x4
c0009c42:	39 fa                	cmp    edx,edi
c0009c44:	75 4a                	jne    c0009c90 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c46:	85 f6                	test   esi,esi
c0009c48:	74 1b                	je     c0009c65 <Phys::allocateDMA(unsigned long)+0x92>
c0009c4a:	bd 20 64 02 c0       	mov    ebp,0xc0026420
c0009c4f:	8d 93 20 64 02 c0    	lea    edx,[ebx-0x3ffd9be0]
c0009c55:	f7 d5                	not    ebp
c0009c57:	29 dd                	sub    ebp,ebx
c0009c59:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c5c:	42                   	inc    edx
c0009c5d:	8d 74 15 00          	lea    esi,[ebp+edx*1+0x0]
c0009c61:	39 f1                	cmp    ecx,esi
c0009c63:	7f f4                	jg     c0009c59 <Phys::allocateDMA(unsigned long)+0x86>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	01 05 10 64 02 c0    	add    DWORD PTR ds:0xc0026410,eax
c0009c6e:	68 44 28 02 c0       	push   0xc0022844
c0009c73:	e8 ef 2d 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	85 ff                	test   edi,edi
c0009c7d:	74 17                	je     c0009c96 <Phys::allocateDMA(unsigned long)+0xc3>
c0009c7f:	83 c4 0c             	add    esp,0xc
c0009c82:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c88:	5b                   	pop    ebx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	5e                   	pop    esi
c0009c8d:	5f                   	pop    edi
c0009c8e:	5d                   	pop    ebp
c0009c8f:	c3                   	ret    
c0009c90:	89 ea                	mov    edx,ebp
c0009c92:	31 c9                	xor    ecx,ecx
c0009c94:	eb 89                	jmp    c0009c1f <Phys::allocateDMA(unsigned long)+0x4c>
c0009c96:	83 c4 0c             	add    esp,0xc
c0009c99:	c1 e3 0c             	shl    ebx,0xc
c0009c9c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009ca2:	5b                   	pop    ebx
c0009ca3:	5e                   	pop    esi
c0009ca4:	5f                   	pop    edi
c0009ca5:	5d                   	pop    ebp
c0009ca6:	c3                   	ret    

c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ca7:	83 ec 18             	sub    esp,0x18
c0009caa:	68 5b 28 02 c0       	push   0xc002285b
c0009caf:	e8 b3 2d 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc5:	c1 e9 0c             	shr    ecx,0xc
c0009cc8:	29 0d 10 64 02 c0    	sub    DWORD PTR ds:0xc0026410,ecx
c0009cce:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009cd6:	76 29                	jbe    c0009d01 <Phys::freeDMA(unsigned long, unsigned long)+0x5a>
c0009cd8:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cde:	c1 ea 0c             	shr    edx,0xc
c0009ce1:	83 c2 10             	add    edx,0x10
c0009ce4:	85 c9                	test   ecx,ecx
c0009ce6:	74 15                	je     c0009cfd <Phys::freeDMA(unsigned long, unsigned long)+0x56>
c0009ce8:	8d 82 20 64 02 c0    	lea    eax,[edx-0x3ffd9be0]
c0009cee:	8d 94 11 20 64 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9be0]
c0009cf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cf8:	40                   	inc    eax
c0009cf9:	39 d0                	cmp    eax,edx
c0009cfb:	75 f8                	jne    c0009cf5 <Phys::freeDMA(unsigned long, unsigned long)+0x4e>
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	c3                   	ret    
c0009d01:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009d07:	c1 ea 0c             	shr    edx,0xc
c0009d0a:	eb d8                	jmp    c0009ce4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>

c0009d0c <Phys::setPageState(unsigned long, bool)>:
c0009d0c:	56                   	push   esi
c0009d0d:	ba 01 00 00 00       	mov    edx,0x1
c0009d12:	53                   	push   ebx
c0009d13:	8b 35 84 57 02 c0    	mov    esi,DWORD PTR ds:0xc0025784
c0009d19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d21:	89 c8                	mov    eax,ecx
c0009d23:	83 e1 07             	and    ecx,0x7
c0009d26:	c1 e8 03             	shr    eax,0x3
c0009d29:	d3 e3                	shl    ebx,cl
c0009d2b:	01 c6                	add    esi,eax
c0009d2d:	d3 e2                	shl    edx,cl
c0009d2f:	f7 d2                	not    edx
c0009d31:	20 16                	and    BYTE PTR [esi],dl
c0009d33:	03 05 84 57 02 c0    	add    eax,DWORD PTR ds:0xc0025784
c0009d39:	08 18                	or     BYTE PTR [eax],bl
c0009d3b:	5b                   	pop    ebx
c0009d3c:	5e                   	pop    esi
c0009d3d:	c3                   	ret    

c0009d3e <Phys::getPageState(unsigned long)>:
c0009d3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d42:	8b 15 84 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025784
c0009d48:	89 c8                	mov    eax,ecx
c0009d4a:	83 e1 07             	and    ecx,0x7
c0009d4d:	c1 e8 03             	shr    eax,0x3
c0009d50:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d54:	d3 f8                	sar    eax,cl
c0009d56:	83 e0 01             	and    eax,0x1
c0009d59:	c3                   	ret    

c0009d5a <Phys::freePage(unsigned long)>:
c0009d5a:	53                   	push   ebx
c0009d5b:	83 ec 10             	sub    esp,0x10
c0009d5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d62:	53                   	push   ebx
c0009d63:	68 71 28 02 c0       	push   0xc0022871
c0009d68:	e8 fa 2c 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009d6d:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d7b:	76 39                	jbe    c0009db6 <Phys::freePage(unsigned long)+0x5c>
c0009d7d:	8d 83 00 00 fa ff    	lea    eax,[ebx-0x60000]
c0009d83:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0009d88:	76 2c                	jbe    c0009db6 <Phys::freePage(unsigned long)+0x5c>
c0009d8a:	83 ec 0c             	sub    esp,0xc
c0009d8d:	c1 eb 0c             	shr    ebx,0xc
c0009d90:	53                   	push   ebx
c0009d91:	e8 a8 ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009d96:	83 c4 10             	add    esp,0x10
c0009d99:	84 c0                	test   al,al
c0009d9b:	74 3c                	je     c0009dd9 <Phys::freePage(unsigned long)+0x7f>
c0009d9d:	83 ec 08             	sub    esp,0x8
c0009da0:	ff 0d 10 64 02 c0    	dec    DWORD PTR ds:0xc0026410
c0009da6:	6a 00                	push   0x0
c0009da8:	53                   	push   ebx
c0009da9:	e8 5e ff ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009dae:	83 c4 10             	add    esp,0x10
c0009db1:	83 c4 08             	add    esp,0x8
c0009db4:	5b                   	pop    ebx
c0009db5:	c3                   	ret    
c0009db6:	83 ec 08             	sub    esp,0x8
c0009db9:	53                   	push   ebx
c0009dba:	68 84 28 02 c0       	push   0xc0022884
c0009dbf:	e8 a3 2c 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009dc4:	58                   	pop    eax
c0009dc5:	5a                   	pop    edx
c0009dc6:	68 00 10 00 00       	push   0x1000
c0009dcb:	53                   	push   ebx
c0009dcc:	e8 d6 fe ff ff       	call   c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>
c0009dd1:	83 c4 10             	add    esp,0x10
c0009dd4:	83 c4 08             	add    esp,0x8
c0009dd7:	5b                   	pop    ebx
c0009dd8:	c3                   	ret    
c0009dd9:	c7 44 24 10 9b 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc002289b
c0009de1:	83 c4 08             	add    esp,0x8
c0009de4:	5b                   	pop    ebx
c0009de5:	e9 3f a5 00 00       	jmp    c0014329 <Krnl::panic(char const*)>

c0009dea <Phys::allocatePage()>:
c0009dea:	56                   	push   esi
c0009deb:	53                   	push   ebx
c0009dec:	83 ec 14             	sub    esp,0x14
c0009def:	8b 35 04 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026404
c0009df5:	89 f3                	mov    ebx,esi
c0009df7:	eb 0a                	jmp    c0009e03 <Phys::allocatePage()+0x19>
c0009df9:	89 1d 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,ebx
c0009dff:	39 de                	cmp    esi,ebx
c0009e01:	74 24                	je     c0009e27 <Phys::allocatePage()+0x3d>
c0009e03:	53                   	push   ebx
c0009e04:	e8 35 ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009e09:	5a                   	pop    edx
c0009e0a:	84 c0                	test   al,al
c0009e0c:	74 69                	je     c0009e77 <Phys::allocatePage()+0x8d>
c0009e0e:	43                   	inc    ebx
c0009e0f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e15:	75 e2                	jne    c0009df9 <Phys::allocatePage()+0xf>
c0009e17:	31 db                	xor    ebx,ebx
c0009e19:	c7 05 04 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026404,0x0
c0009e23:	39 de                	cmp    esi,ebx
c0009e25:	75 dc                	jne    c0009e03 <Phys::allocatePage()+0x19>
c0009e27:	83 ec 0c             	sub    esp,0xc
c0009e2a:	80 35 50 64 02 c0 01 	xor    BYTE PTR ds:0xc0026450,0x1
c0009e31:	68 14 29 02 c0       	push   0xc0022914
c0009e36:	e8 2c 2c 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009e3b:	58                   	pop    eax
c0009e3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e4a:	e8 a7 28 00 00       	call   c000c6f6 <VAS::scanForEviction()>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	85 c0                	test   eax,eax
c0009e54:	75 62                	jne    c0009eb8 <Phys::allocatePage()+0xce>
c0009e56:	83 ec 0c             	sub    esp,0xc
c0009e59:	68 38 29 02 c0       	push   0xc0022938
c0009e5e:	e8 c6 a4 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0009e63:	83 c4 10             	add    esp,0x10
c0009e66:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0009e6c:	53                   	push   ebx
c0009e6d:	e8 cc fe ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009e72:	5a                   	pop    edx
c0009e73:	84 c0                	test   al,al
c0009e75:	75 97                	jne    c0009e0e <Phys::allocatePage()+0x24>
c0009e77:	6a 01                	push   0x1
c0009e79:	53                   	push   ebx
c0009e7a:	e8 8d fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009e7f:	5a                   	pop    edx
c0009e80:	a1 10 64 02 c0       	mov    eax,ds:0xc0026410
c0009e85:	59                   	pop    ecx
c0009e86:	40                   	inc    eax
c0009e87:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c0009e8d:	a3 10 64 02 c0       	mov    ds:0xc0026410,eax
c0009e92:	c1 e2 0c             	shl    edx,0xc
c0009e95:	52                   	push   edx
c0009e96:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c0009e9c:	50                   	push   eax
c0009e9d:	68 b1 28 02 c0       	push   0xc00228b1
c0009ea2:	e8 c0 2b 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009ea7:	a1 04 64 02 c0       	mov    eax,ds:0xc0026404
c0009eac:	83 c4 10             	add    esp,0x10
c0009eaf:	c1 e0 0c             	shl    eax,0xc
c0009eb2:	83 c4 14             	add    esp,0x14
c0009eb5:	5b                   	pop    ebx
c0009eb6:	5e                   	pop    esi
c0009eb7:	c3                   	ret    
c0009eb8:	83 ec 08             	sub    esp,0x8
c0009ebb:	89 c2                	mov    edx,eax
c0009ebd:	6a 01                	push   0x1
c0009ebf:	c1 ea 0c             	shr    edx,0xc
c0009ec2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ec6:	52                   	push   edx
c0009ec7:	e8 40 fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009ecc:	83 c4 10             	add    esp,0x10
c0009ecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ed3:	eb dd                	jmp    c0009eb2 <Phys::allocatePage()+0xc8>

c0009ed5 <Phys::allocateContiguousPages(int)>:
c0009ed5:	57                   	push   edi
c0009ed6:	56                   	push   esi
c0009ed7:	53                   	push   ebx
c0009ed8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009edc:	fa                   	cli    
c0009edd:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0009ee3:	31 db                	xor    ebx,ebx
c0009ee5:	85 db                	test   ebx,ebx
c0009ee7:	75 11                	jne    c0009efa <Phys::allocateContiguousPages(int)+0x25>
c0009ee9:	e8 fc fe ff ff       	call   c0009dea <Phys::allocatePage()>
c0009eee:	83 fe 01             	cmp    esi,0x1
c0009ef1:	89 c7                	mov    edi,eax
c0009ef3:	74 21                	je     c0009f16 <Phys::allocateContiguousPages(int)+0x41>
c0009ef5:	bb 01 00 00 00       	mov    ebx,0x1
c0009efa:	e8 eb fe ff ff       	call   c0009dea <Phys::allocatePage()>
c0009eff:	89 da                	mov    edx,ebx
c0009f01:	c1 e2 0c             	shl    edx,0xc
c0009f04:	01 fa                	add    edx,edi
c0009f06:	39 c2                	cmp    edx,eax
c0009f08:	74 20                	je     c0009f2a <Phys::allocateContiguousPages(int)+0x55>
c0009f0a:	bb 01 00 00 00       	mov    ebx,0x1
c0009f0f:	89 c7                	mov    edi,eax
c0009f11:	83 fe 01             	cmp    esi,0x1
c0009f14:	75 e4                	jne    c0009efa <Phys::allocateContiguousPages(int)+0x25>
c0009f16:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0009f1b:	48                   	dec    eax
c0009f1c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0009f21:	75 01                	jne    c0009f24 <Phys::allocateContiguousPages(int)+0x4f>
c0009f23:	fb                   	sti    
c0009f24:	89 f8                	mov    eax,edi
c0009f26:	5b                   	pop    ebx
c0009f27:	5e                   	pop    esi
c0009f28:	5f                   	pop    edi
c0009f29:	c3                   	ret    
c0009f2a:	43                   	inc    ebx
c0009f2b:	39 f3                	cmp    ebx,esi
c0009f2d:	75 b6                	jne    c0009ee5 <Phys::allocateContiguousPages(int)+0x10>
c0009f2f:	eb e5                	jmp    c0009f16 <Phys::allocateContiguousPages(int)+0x41>

c0009f31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f31:	56                   	push   esi
c0009f32:	53                   	push   ebx
c0009f33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f37:	39 1d 08 64 02 c0    	cmp    DWORD PTR ds:0xc0026408,ebx
c0009f3d:	73 06                	jae    c0009f45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f3f:	89 1d 08 64 02 c0    	mov    DWORD PTR ds:0xc0026408,ebx
c0009f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f49:	c1 eb 0c             	shr    ebx,0xc
c0009f4c:	c1 e8 0c             	shr    eax,0xc
c0009f4f:	39 d8                	cmp    eax,ebx
c0009f51:	73 13                	jae    c0009f66 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f53:	6a 00                	push   0x0
c0009f55:	8d 70 01             	lea    esi,[eax+0x1]
c0009f58:	50                   	push   eax
c0009f59:	e8 ae fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009f5e:	5a                   	pop    edx
c0009f5f:	89 f0                	mov    eax,esi
c0009f61:	59                   	pop    ecx
c0009f62:	39 f3                	cmp    ebx,esi
c0009f64:	75 ed                	jne    c0009f53 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f66:	5b                   	pop    ebx
c0009f67:	5e                   	pop    esi
c0009f68:	c3                   	ret    

c0009f69 <Phys::physicalMemorySetup(unsigned int)>:
c0009f69:	55                   	push   ebp
c0009f6a:	57                   	push   edi
c0009f6b:	56                   	push   esi
c0009f6c:	53                   	push   ebx
c0009f6d:	31 db                	xor    ebx,ebx
c0009f6f:	83 ec 40             	sub    esp,0x40
c0009f72:	6a 30                	push   0x30
c0009f74:	6a 00                	push   0x0
c0009f76:	68 20 64 02 c0       	push   0xc0026420
c0009f7b:	e8 04 67 ff ff       	call   c0000684 <memset>
c0009f80:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f89:	05 00 10 00 00       	add    eax,0x1000
c0009f8e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009f92:	5a                   	pop    edx
c0009f93:	59                   	pop    ecx
c0009f94:	50                   	push   eax
c0009f95:	68 cf 28 02 c0       	push   0xc00228cf
c0009f9a:	e8 c8 2a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	83 ec 08             	sub    esp,0x8
c0009fa5:	6a 01                	push   0x1
c0009fa7:	53                   	push   ebx
c0009fa8:	43                   	inc    ebx
c0009fa9:	e8 5e fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009fae:	83 c4 10             	add    esp,0x10
c0009fb1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009fb7:	75 e9                	jne    c0009fa2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fb9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fc0:	66 85 c0             	test   ax,ax
c0009fc3:	0f 84 8e 01 00 00    	je     c000a157 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fcd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fd9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fe2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009fea:	eb 15                	jmp    c000a001 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009fec:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009ff0:	83 c3 18             	add    ebx,0x18
c0009ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ff7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009ffb:	0f 84 66 01 00 00    	je     c000a167 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a001:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a004:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a007:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a012:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a014:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a017:	01 f0                	add    eax,esi
c000a019:	55                   	push   ebp
c000a01a:	11 fa                	adc    edx,edi
c000a01c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a020:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a028:	56                   	push   esi
c000a029:	68 68 29 02 c0       	push   0xc0022968
c000a02e:	e8 34 2a 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000a033:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a037:	83 c4 10             	add    esp,0x10
c000a03a:	09 f8                	or     eax,edi
c000a03c:	0f 85 25 01 00 00    	jne    c000a167 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a042:	4d                   	dec    ebp
c000a043:	75 a7                	jne    c0009fec <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a045:	ba 00 00 08 00       	mov    edx,0x80000
c000a04a:	89 c1                	mov    ecx,eax
c000a04c:	39 f2                	cmp    edx,esi
c000a04e:	19 f9                	sbb    ecx,edi
c000a050:	0f 82 a7 00 00 00    	jb     c000a0fd <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a056:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a05a:	89 c1                	mov    ecx,eax
c000a05c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a060:	0f 83 97 00 00 00    	jae    c000a0fd <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a066:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a06b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a06f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a073:	39 fa                	cmp    edx,edi
c000a075:	19 e8                	sbb    eax,ebp
c000a077:	0f 82 3d 01 00 00    	jb     c000a1ba <Phys::physicalMemorySetup(unsigned int)+0x251>
c000a07d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a081:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a085:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a08b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a090:	83 d5 ff             	adc    ebp,0xffffffff
c000a093:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a097:	31 c0                	xor    eax,eax
c000a099:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a09d:	39 fa                	cmp    edx,edi
c000a09f:	89 c1                	mov    ecx,eax
c000a0a1:	19 e9                	sbb    ecx,ebp
c000a0a3:	0f 83 43 ff ff ff    	jae    c0009fec <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0a9:	be 00 00 08 00       	mov    esi,0x80000
c000a0ae:	57                   	push   edi
c000a0af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0b3:	57                   	push   edi
c000a0b4:	56                   	push   esi
c000a0b5:	68 8c 29 02 c0       	push   0xc002298c
c000a0ba:	e8 a8 29 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000a0bf:	5d                   	pop    ebp
c000a0c0:	58                   	pop    eax
c000a0c1:	57                   	push   edi
c000a0c2:	56                   	push   esi
c000a0c3:	e8 69 fe ff ff       	call   c0009f31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0d0:	83 c4 0c             	add    esp,0xc
c000a0d3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0d7:	03 05 14 64 02 c0    	add    eax,DWORD PTR ds:0xc0026414
c000a0dd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0e4:	a3 14 64 02 c0       	mov    ds:0xc0026414,eax
c000a0e9:	52                   	push   edx
c000a0ea:	50                   	push   eax
c000a0eb:	68 f5 28 02 c0       	push   0xc00228f5
c000a0f0:	e8 72 29 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	e9 ef fe ff ff       	jmp    c0009fec <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0fd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a101:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a105:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a109:	39 ea                	cmp    edx,ebp
c000a10b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a10f:	0f 82 d7 fe ff ff    	jb     c0009fec <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a115:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a11a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a11e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a122:	0f 83 c4 fe ff ff    	jae    c0009fec <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a128:	39 ee                	cmp    esi,ebp
c000a12a:	89 f8                	mov    eax,edi
c000a12c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a130:	0f 83 78 ff ff ff    	jae    c000a0ae <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a136:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a13a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a13e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a142:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a146:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a14a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a14e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a152:	e9 57 ff ff ff       	jmp    c000a0ae <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a157:	83 ec 0c             	sub    esp,0xc
c000a15a:	68 e7 28 02 c0       	push   0xc00228e7
c000a15f:	e8 c5 a1 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000a164:	83 c4 10             	add    esp,0x10
c000a167:	bb 40 01 00 00       	mov    ebx,0x140
c000a16c:	83 ec 08             	sub    esp,0x8
c000a16f:	6a 00                	push   0x0
c000a171:	53                   	push   ebx
c000a172:	43                   	inc    ebx
c000a173:	e8 94 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a178:	ff 05 14 64 02 c0    	inc    DWORD PTR ds:0xc0026414
c000a17e:	83 c4 10             	add    esp,0x10
c000a181:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a187:	75 e3                	jne    c000a16c <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a189:	83 ec 08             	sub    esp,0x8
c000a18c:	6a 00                	push   0x0
c000a18e:	6a 05                	push   0x5
c000a190:	e8 77 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a195:	58                   	pop    eax
c000a196:	5a                   	pop    edx
c000a197:	6a 00                	push   0x0
c000a199:	6a 06                	push   0x6
c000a19b:	e8 6c fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1a0:	59                   	pop    ecx
c000a1a1:	5b                   	pop    ebx
c000a1a2:	6a 00                	push   0x0
c000a1a4:	6a 07                	push   0x7
c000a1a6:	e8 61 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1ab:	83 05 14 64 02 c0 33 	add    DWORD PTR ds:0xc0026414,0x33
c000a1b2:	83 c4 4c             	add    esp,0x4c
c000a1b5:	5b                   	pop    ebx
c000a1b6:	5e                   	pop    esi
c000a1b7:	5f                   	pop    edi
c000a1b8:	5d                   	pop    ebp
c000a1b9:	c3                   	ret    
c000a1ba:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a1c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a1ca:	e9 ae fe ff ff       	jmp    c000a07d <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a1cf:	90                   	nop

c000a1d0 <Pipe::isAtty()>:
c000a1d0:	31 c0                	xor    eax,eax
c000a1d2:	c3                   	ret    
c000a1d3:	90                   	nop

c000a1d4 <Pipe::~Pipe()>:
c000a1d4:	83 ec 0c             	sub    esp,0xc
c000a1d7:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	89 10                	mov    DWORD PTR [eax],edx
c000a1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e6:	83 ec 0c             	sub    esp,0xc
c000a1e9:	50                   	push   eax
c000a1ea:	e8 45 12 00 00       	call   c000b434 <UnixFile::~UnixFile()>
c000a1ef:	83 c4 10             	add    esp,0x10
c000a1f2:	90                   	nop
c000a1f3:	83 c4 0c             	add    esp,0xc
c000a1f6:	c3                   	ret    
c000a1f7:	90                   	nop

c000a1f8 <Pipe::~Pipe()>:
c000a1f8:	83 ec 0c             	sub    esp,0xc
c000a1fb:	83 ec 0c             	sub    esp,0xc
c000a1fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a202:	e8 cd ff ff ff       	call   c000a1d4 <Pipe::~Pipe()>
c000a207:	83 c4 10             	add    esp,0x10
c000a20a:	83 ec 08             	sub    esp,0x8
c000a20d:	6a 20                	push   0x20
c000a20f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a213:	e8 6e 27 00 00       	call   c000c986 <operator delete(void*, unsigned long)>
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	83 c4 0c             	add    esp,0xc
c000a21e:	c3                   	ret    
c000a21f:	90                   	nop

c000a220 <Pipe::read(unsigned long long, void*, int*)>:
c000a220:	55                   	push   ebp
c000a221:	57                   	push   edi
c000a222:	56                   	push   esi
c000a223:	53                   	push   ebx
c000a224:	83 ec 1c             	sub    esp,0x1c
c000a227:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a22b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a22f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a233:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a236:	89 c8                	mov    eax,ecx
c000a238:	99                   	cdq    
c000a239:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a23d:	74 24                	je     c000a263 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a23f:	39 f9                	cmp    ecx,edi
c000a241:	89 d1                	mov    ecx,edx
c000a243:	19 f1                	sbb    ecx,esi
c000a245:	73 1c                	jae    c000a263 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a247:	fa                   	cli    
c000a248:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c000a24e:	e8 a9 dc 00 00       	call   c0017efc <schedule()>
c000a253:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000a258:	48                   	dec    eax
c000a259:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000a25e:	75 d3                	jne    c000a233 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a260:	fb                   	sti    
c000a261:	eb d0                	jmp    c000a233 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a263:	39 f8                	cmp    eax,edi
c000a265:	89 d1                	mov    ecx,edx
c000a267:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a26a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a26e:	19 f1                	sbb    ecx,esi
c000a270:	73 07                	jae    c000a279 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a272:	89 04 24             	mov    DWORD PTR [esp],eax
c000a275:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a279:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a27c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a27f:	29 f7                	sub    edi,esi
c000a281:	89 f8                	mov    eax,edi
c000a283:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a287:	99                   	cdq    
c000a288:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a28b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28f:	19 d0                	sbb    eax,edx
c000a291:	73 07                	jae    c000a29a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a293:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a296:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a29a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a29d:	89 ea                	mov    edx,ebp
c000a29f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a2a3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a2a8:	74 0d                	je     c000a2b7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a2aa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a2ad:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a2b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2b7:	85 d2                	test   edx,edx
c000a2b9:	74 11                	je     c000a2cc <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a2bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2bf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a2c2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a2c6:	89 d1                	mov    ecx,edx
c000a2c8:	89 c7                	mov    edi,eax
c000a2ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2cf:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a2d2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a2d5:	99                   	cdq    
c000a2d6:	89 f7                	mov    edi,esi
c000a2d8:	03 04 24             	add    eax,DWORD PTR [esp]
c000a2db:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a2df:	c1 ff 1f             	sar    edi,0x1f
c000a2e2:	57                   	push   edi
c000a2e3:	56                   	push   esi
c000a2e4:	52                   	push   edx
c000a2e5:	50                   	push   eax
c000a2e6:	e8 39 6d 01 00       	call   c0021024 <__umoddi3>
c000a2eb:	83 c4 10             	add    esp,0x10
c000a2ee:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a2f1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a2f6:	75 10                	jne    c000a308 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a2f8:	83 ec 0c             	sub    esp,0xc
c000a2fb:	68 b5 29 02 c0       	push   0xc00229b5
c000a300:	e8 24 a0 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000a305:	83 c4 10             	add    esp,0x10
c000a308:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a30c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a30f:	89 10                	mov    DWORD PTR [eax],edx
c000a311:	83 c4 1c             	add    esp,0x1c
c000a314:	31 c0                	xor    eax,eax
c000a316:	5b                   	pop    ebx
c000a317:	5e                   	pop    esi
c000a318:	5f                   	pop    edi
c000a319:	5d                   	pop    ebp
c000a31a:	c3                   	ret    
c000a31b:	90                   	nop

c000a31c <Pipe::write(unsigned long long, void*, int*)>:
c000a31c:	55                   	push   ebp
c000a31d:	57                   	push   edi
c000a31e:	56                   	push   esi
c000a31f:	53                   	push   ebx
c000a320:	83 ec 1c             	sub    esp,0x1c
c000a323:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a327:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a32b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a32e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a332:	89 04 24             	mov    DWORD PTR [esp],eax
c000a335:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a339:	89 d8                	mov    eax,ebx
c000a33b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a33e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a342:	89 d6                	mov    esi,edx
c000a344:	89 d7                	mov    edi,edx
c000a346:	c1 ff 1f             	sar    edi,0x1f
c000a349:	03 34 24             	add    esi,DWORD PTR [esp]
c000a34c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a350:	c1 f8 1f             	sar    eax,0x1f
c000a353:	39 f3                	cmp    ebx,esi
c000a355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a359:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a35d:	19 f8                	sbb    eax,edi
c000a35f:	b8 01 00 00 00       	mov    eax,0x1
c000a364:	72 6e                	jb     c000a3d4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a366:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a369:	01 d0                	add    eax,edx
c000a36b:	99                   	cdq    
c000a36c:	f7 fb                	idiv   ebx
c000a36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a372:	29 d3                	sub    ebx,edx
c000a374:	89 d7                	mov    edi,edx
c000a376:	89 de                	mov    esi,ebx
c000a378:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a37b:	c1 fb 1f             	sar    ebx,0x1f
c000a37e:	39 f2                	cmp    edx,esi
c000a380:	19 d8                	sbb    eax,ebx
c000a382:	b8 00 00 00 00       	mov    eax,0x0
c000a387:	72 04                	jb     c000a38d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a389:	89 d0                	mov    eax,edx
c000a38b:	29 f0                	sub    eax,esi
c000a38d:	89 d3                	mov    ebx,edx
c000a38f:	29 c3                	sub    ebx,eax
c000a391:	74 0b                	je     c000a39e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a393:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a396:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a39a:	89 d9                	mov    ecx,ebx
c000a39c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a39e:	85 c0                	test   eax,eax
c000a3a0:	74 0d                	je     c000a3af <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a3a2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a3a6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a3a9:	89 de                	mov    esi,ebx
c000a3ab:	89 c1                	mov    ecx,eax
c000a3ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3af:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a3b2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a3b7:	75 10                	jne    c000a3c9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a3b9:	83 ec 0c             	sub    esp,0xc
c000a3bc:	68 d1 29 02 c0       	push   0xc00229d1
c000a3c1:	e8 63 9f 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3cd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a3d0:	89 08                	mov    DWORD PTR [eax],ecx
c000a3d2:	31 c0                	xor    eax,eax
c000a3d4:	83 c4 1c             	add    esp,0x1c
c000a3d7:	5b                   	pop    ebx
c000a3d8:	5e                   	pop    esi
c000a3d9:	5f                   	pop    edi
c000a3da:	5d                   	pop    ebp
c000a3db:	c3                   	ret    

c000a3dc <Pipe::Pipe(int)>:
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e3:	83 ec 08             	sub    esp,0x8
c000a3e6:	6a 00                	push   0x0
c000a3e8:	50                   	push   eax
c000a3e9:	e8 64 0e 00 00       	call   c000b252 <UnixFile::UnixFile(int)>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000a3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3fa:	89 10                	mov    DWORD PTR [eax],edx
c000a3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a400:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a404:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a416:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a41d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a421:	83 ec 0c             	sub    esp,0xc
c000a424:	50                   	push   eax
c000a425:	e8 99 f5 ff ff       	call   c00099c3 <malloc>
c000a42a:	83 c4 10             	add    esp,0x10
c000a42d:	89 c2                	mov    edx,eax
c000a42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a433:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a43a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a43e:	90                   	nop
c000a43f:	83 c4 0c             	add    esp,0xc
c000a442:	c3                   	ret    
c000a443:	90                   	nop

c000a444 <VgaText::isAtty()>:
c000a444:	b0 01                	mov    al,0x1
c000a446:	c3                   	ret    
c000a447:	90                   	nop

c000a448 <VgaText::~VgaText()>:
c000a448:	83 ec 0c             	sub    esp,0xc
c000a44b:	ba 80 2a 02 c0       	mov    edx,0xc0022a80
c000a450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a454:	89 10                	mov    DWORD PTR [eax],edx
c000a456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a45a:	83 ec 0c             	sub    esp,0xc
c000a45d:	50                   	push   eax
c000a45e:	e8 d1 0f 00 00       	call   c000b434 <UnixFile::~UnixFile()>
c000a463:	83 c4 10             	add    esp,0x10
c000a466:	90                   	nop
c000a467:	83 c4 0c             	add    esp,0xc
c000a46a:	c3                   	ret    
c000a46b:	90                   	nop

c000a46c <VgaText::~VgaText()>:
c000a46c:	83 ec 0c             	sub    esp,0xc
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a476:	e8 cd ff ff ff       	call   c000a448 <VgaText::~VgaText()>
c000a47b:	83 c4 10             	add    esp,0x10
c000a47e:	83 ec 08             	sub    esp,0x8
c000a481:	68 c4 02 00 00       	push   0x2c4
c000a486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a48a:	e8 f7 24 00 00       	call   c000c986 <operator delete(void*, unsigned long)>
c000a48f:	83 c4 10             	add    esp,0x10
c000a492:	83 c4 0c             	add    esp,0xc
c000a495:	c3                   	ret    

c000a496 <VgaText::read(unsigned long long, void*, int*)>:
c000a496:	83 ec 10             	sub    esp,0x10
c000a499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a49d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	e8 4c 58 00 00       	call   c000fcf6 <readKeyboard(VgaText*, char*, unsigned long)>
c000a4aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a4ae:	89 02                	mov    DWORD PTR [edx],eax
c000a4b0:	31 c0                	xor    eax,eax
c000a4b2:	83 c4 1c             	add    esp,0x1c
c000a4b5:	c3                   	ret    

c000a4b6 <setTerminalScrollLock(bool)>:
c000a4b6:	c3                   	ret    

c000a4b7 <addToTerminalCycle(VgaText*)>:
c000a4b7:	8b 15 80 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026480
c000a4bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a4c1:	85 d2                	test   edx,edx
c000a4c3:	75 09                	jne    c000a4ce <addToTerminalCycle(VgaText*)+0x17>
c000a4c5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a4c8:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c000a4cd:	c3                   	ret    
c000a4ce:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a4d1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a4d4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a4d7:	c3                   	ret    

c000a4d8 <installVgaTextImplementation()>:
c000a4d8:	83 ec 10             	sub    esp,0x10
c000a4db:	6a 20                	push   0x20
c000a4dd:	6a 00                	push   0x0
c000a4df:	68 60 64 02 c0       	push   0xc0026460
c000a4e4:	e8 9b 61 ff ff       	call   c0000684 <memset>
c000a4e9:	83 c4 1c             	add    esp,0x1c
c000a4ec:	c3                   	ret    

c000a4ed <scrollTerminalScrollLock(int)>:
c000a4ed:	c3                   	ret    

c000a4ee <VgaText::updateTitle()>:
c000a4ee:	53                   	push   ebx
c000a4ef:	31 c0                	xor    eax,eax
c000a4f1:	83 ec 58             	sub    esp,0x58
c000a4f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a4f8:	89 e1                	mov    ecx,esp
c000a4fa:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a4fe:	40                   	inc    eax
c000a4ff:	83 f8 50             	cmp    eax,0x50
c000a502:	75 f6                	jne    c000a4fa <VgaText::updateTitle()+0xc>
c000a504:	31 c0                	xor    eax,eax
c000a506:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a50d:	84 db                	test   bl,bl
c000a50f:	74 06                	je     c000a517 <VgaText::updateTitle()+0x29>
c000a511:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a514:	40                   	inc    eax
c000a515:	eb ef                	jmp    c000a506 <VgaText::updateTitle()+0x18>
c000a517:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a51a:	85 c0                	test   eax,eax
c000a51c:	74 09                	je     c000a527 <VgaText::updateTitle()+0x39>
c000a51e:	53                   	push   ebx
c000a51f:	53                   	push   ebx
c000a520:	51                   	push   ecx
c000a521:	52                   	push   edx
c000a522:	ff d0                	call   eax
c000a524:	83 c4 10             	add    esp,0x10
c000a527:	83 c4 58             	add    esp,0x58
c000a52a:	5b                   	pop    ebx
c000a52b:	c3                   	ret    

c000a52c <VgaText::load()>:
c000a52c:	53                   	push   ebx
c000a52d:	31 c0                	xor    eax,eax
c000a52f:	83 ec 58             	sub    esp,0x58
c000a532:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a536:	89 e2                	mov    edx,esp
c000a538:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a53c:	40                   	inc    eax
c000a53d:	83 f8 50             	cmp    eax,0x50
c000a540:	75 f6                	jne    c000a538 <VgaText::load()+0xc>
c000a542:	31 c0                	xor    eax,eax
c000a544:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a54b:	84 c9                	test   cl,cl
c000a54d:	74 06                	je     c000a555 <VgaText::load()+0x29>
c000a54f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a552:	40                   	inc    eax
c000a553:	eb ef                	jmp    c000a544 <VgaText::load()+0x18>
c000a555:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a558:	85 c0                	test   eax,eax
c000a55a:	74 09                	je     c000a565 <VgaText::load()+0x39>
c000a55c:	51                   	push   ecx
c000a55d:	51                   	push   ecx
c000a55e:	52                   	push   edx
c000a55f:	53                   	push   ebx
c000a560:	ff d0                	call   eax
c000a562:	83 c4 10             	add    esp,0x10
c000a565:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a568:	85 c0                	test   eax,eax
c000a56a:	74 09                	je     c000a575 <VgaText::load()+0x49>
c000a56c:	83 ec 0c             	sub    esp,0xc
c000a56f:	53                   	push   ebx
c000a570:	ff d0                	call   eax
c000a572:	83 c4 10             	add    esp,0x10
c000a575:	83 c4 58             	add    esp,0x58
c000a578:	5b                   	pop    ebx
c000a579:	c3                   	ret    

c000a57a <VgaText::updateCursor()>:
c000a57a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a57e:	39 05 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,eax
c000a584:	75 09                	jne    c000a58f <VgaText::updateCursor()+0x15>
c000a586:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a589:	85 c0                	test   eax,eax
c000a58b:	74 02                	je     c000a58f <VgaText::updateCursor()+0x15>
c000a58d:	ff e0                	jmp    eax
c000a58f:	c3                   	ret    

c000a590 <VgaText::doANSI_SGR(int)>:
c000a590:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a598:	85 d2                	test   edx,edx
c000a59a:	75 0b                	jne    c000a5a7 <VgaText::doANSI_SGR(int)+0x17>
c000a59c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a59f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5a2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a5a5:	eb 59                	jmp    c000a600 <VgaText::doANSI_SGR(int)+0x70>
c000a5a7:	83 fa 07             	cmp    edx,0x7
c000a5aa:	75 0b                	jne    c000a5b7 <VgaText::doANSI_SGR(int)+0x27>
c000a5ac:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a5af:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a5b2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a5b5:	eb 49                	jmp    c000a600 <VgaText::doANSI_SGR(int)+0x70>
c000a5b7:	83 fa 1b             	cmp    edx,0x1b
c000a5ba:	74 e0                	je     c000a59c <VgaText::doANSI_SGR(int)+0xc>
c000a5bc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a5bf:	83 f9 07             	cmp    ecx,0x7
c000a5c2:	77 09                	ja     c000a5cd <VgaText::doANSI_SGR(int)+0x3d>
c000a5c4:	8b 14 8d c0 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda840]
c000a5cb:	eb 20                	jmp    c000a5ed <VgaText::doANSI_SGR(int)+0x5d>
c000a5cd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a5d0:	83 f9 07             	cmp    ecx,0x7
c000a5d3:	77 09                	ja     c000a5de <VgaText::doANSI_SGR(int)+0x4e>
c000a5d5:	8b 14 8d c0 57 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda840]
c000a5dc:	eb 22                	jmp    c000a600 <VgaText::doANSI_SGR(int)+0x70>
c000a5de:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a5e1:	83 f9 07             	cmp    ecx,0x7
c000a5e4:	77 0b                	ja     c000a5f1 <VgaText::doANSI_SGR(int)+0x61>
c000a5e6:	8b 14 95 78 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda988]
c000a5ed:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5f0:	c3                   	ret    
c000a5f1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a5f4:	83 f9 07             	cmp    ecx,0x7
c000a5f7:	77 0a                	ja     c000a603 <VgaText::doANSI_SGR(int)+0x73>
c000a5f9:	8b 14 95 50 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda9b0]
c000a600:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a603:	c3                   	ret    

c000a604 <VgaText::setDefaultBgColour(VgaColour)>:
c000a604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a60c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a60f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a612:	c3                   	ret    
c000a613:	90                   	nop

c000a614 <VgaText::setDefaultFgColour(VgaColour)>:
c000a614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a618:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a61c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a61f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a622:	c3                   	ret    
c000a623:	90                   	nop

c000a624 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a624:	53                   	push   ebx
c000a625:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a629:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a62d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a631:	51                   	push   ecx
c000a632:	e8 cd ff ff ff       	call   c000a604 <VgaText::setDefaultBgColour(VgaColour)>
c000a637:	58                   	pop    eax
c000a638:	5a                   	pop    edx
c000a639:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a63d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a641:	5b                   	pop    ebx
c000a642:	eb d0                	jmp    c000a614 <VgaText::setDefaultFgColour(VgaColour)>

c000a644 <VgaText::setTitleTextColour(VgaColour)>:
c000a644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a64c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a64f:	e9 9a fe ff ff       	jmp    c000a4ee <VgaText::updateTitle()>

c000a654 <VgaText::setTitleColour(VgaColour)>:
c000a654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a65c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a65f:	e9 8a fe ff ff       	jmp    c000a4ee <VgaText::updateTitle()>

c000a664 <VgaText::setTitle(char*)>:
c000a664:	53                   	push   ebx
c000a665:	83 ec 10             	sub    esp,0x10
c000a668:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a670:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a676:	50                   	push   eax
c000a677:	e8 c4 60 ff ff       	call   c0000740 <strcpy>
c000a67c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a680:	83 c4 18             	add    esp,0x18
c000a683:	5b                   	pop    ebx
c000a684:	e9 65 fe ff ff       	jmp    c000a4ee <VgaText::updateTitle()>
c000a689:	90                   	nop

c000a68a <VgaText::combineColours(unsigned char, unsigned char)>:
c000a68a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a68e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a693:	83 e0 0f             	and    eax,0xf
c000a696:	c1 e2 04             	shl    edx,0x4
c000a699:	09 d0                	or     eax,edx
c000a69b:	c3                   	ret    

c000a69c <VgaText::scrollScreen()>:
c000a69c:	55                   	push   ebp
c000a69d:	b9 01 00 00 00       	mov    ecx,0x1
c000a6a2:	57                   	push   edi
c000a6a3:	56                   	push   esi
c000a6a4:	53                   	push   ebx
c000a6a5:	83 ec 0c             	sub    esp,0xc
c000a6a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a6ac:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a6b2:	31 ff                	xor    edi,edi
c000a6b4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a6b7:	83 f9 17             	cmp    ecx,0x17
c000a6ba:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a6bd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a6c4:	75 27                	jne    c000a6ed <VgaText::scrollScreen()+0x51>
c000a6c6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a6c9:	01 f5                	add    ebp,esi
c000a6cb:	f7 c7 01 00 00 00    	test   edi,0x1
c000a6d1:	74 16                	je     c000a6e9 <VgaText::scrollScreen()+0x4d>
c000a6d3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a6d7:	50                   	push   eax
c000a6d8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a6dc:	50                   	push   eax
c000a6dd:	e8 a8 ff ff ff       	call   c000a68a <VgaText::combineColours(unsigned char, unsigned char)>
c000a6e2:	5a                   	pop    edx
c000a6e3:	5a                   	pop    edx
c000a6e4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a6e7:	eb 04                	jmp    c000a6ed <VgaText::scrollScreen()+0x51>
c000a6e9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a6ed:	47                   	inc    edi
c000a6ee:	46                   	inc    esi
c000a6ef:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a6f5:	75 bd                	jne    c000a6b4 <VgaText::scrollScreen()+0x18>
c000a6f7:	41                   	inc    ecx
c000a6f8:	83 f9 18             	cmp    ecx,0x18
c000a6fb:	75 af                	jne    c000a6ac <VgaText::scrollScreen()+0x10>
c000a6fd:	39 1d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ebx
c000a703:	75 1b                	jne    c000a720 <VgaText::scrollScreen()+0x84>
c000a705:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a709:	74 05                	je     c000a710 <VgaText::scrollScreen()+0x74>
c000a70b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a70e:	eb 10                	jmp    c000a720 <VgaText::scrollScreen()+0x84>
c000a710:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a713:	85 c0                	test   eax,eax
c000a715:	74 09                	je     c000a720 <VgaText::scrollScreen()+0x84>
c000a717:	83 ec 0c             	sub    esp,0xc
c000a71a:	53                   	push   ebx
c000a71b:	ff d0                	call   eax
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a724:	83 c4 0c             	add    esp,0xc
c000a727:	5b                   	pop    ebx
c000a728:	5e                   	pop    esi
c000a729:	5f                   	pop    edi
c000a72a:	5d                   	pop    ebp
c000a72b:	e9 4a fe ff ff       	jmp    c000a57a <VgaText::updateCursor()>

c000a730 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a730:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a735:	c1 e0 08             	shl    eax,0x8
c000a738:	89 c2                	mov    edx,eax
c000a73a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a73f:	09 d0                	or     eax,edx
c000a741:	c3                   	ret    

c000a742 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a742:	56                   	push   esi
c000a743:	53                   	push   ebx
c000a744:	51                   	push   ecx
c000a745:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a749:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a74e:	50                   	push   eax
c000a74f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a754:	50                   	push   eax
c000a755:	e8 30 ff ff ff       	call   c000a68a <VgaText::combineColours(unsigned char, unsigned char)>
c000a75a:	5b                   	pop    ebx
c000a75b:	0f b6 c0             	movzx  eax,al
c000a75e:	5e                   	pop    esi
c000a75f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a764:	50                   	push   eax
c000a765:	53                   	push   ebx
c000a766:	e8 c5 ff ff ff       	call   c000a730 <VgaText::combineCharAndColour(char, unsigned char)>
c000a76b:	5a                   	pop    edx
c000a76c:	5e                   	pop    esi
c000a76d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a770:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a776:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a77a:	0f b7 d2             	movzx  edx,dx
c000a77d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a781:	39 0d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ecx
c000a787:	75 10                	jne    c000a799 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a789:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a78c:	85 c0                	test   eax,eax
c000a78e:	74 09                	je     c000a799 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a790:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a794:	5a                   	pop    edx
c000a795:	5b                   	pop    ebx
c000a796:	5e                   	pop    esi
c000a797:	ff e0                	jmp    eax
c000a799:	58                   	pop    eax
c000a79a:	5b                   	pop    ebx
c000a79b:	5e                   	pop    esi
c000a79c:	c3                   	ret    
c000a79d:	90                   	nop

c000a79e <VgaText::getCursorX()>:
c000a79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7a2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a7a5:	c3                   	ret    

c000a7a6 <VgaText::getCursorY()>:
c000a7a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7aa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a7ad:	c3                   	ret    

c000a7ae <VgaText::setCursor(int, int)>:
c000a7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7b6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a7b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a7c0:	e9 b5 fd ff ff       	jmp    c000a57a <VgaText::updateCursor()>

c000a7c5 <setActiveTerminal(VgaText*)>:
c000a7c5:	53                   	push   ebx
c000a7c6:	83 ec 08             	sub    esp,0x8
c000a7c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a7cd:	85 db                	test   ebx,ebx
c000a7cf:	75 11                	jne    c000a7e2 <setActiveTerminal(VgaText*)+0x1d>
c000a7d1:	c7 44 24 10 0c 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a0c
c000a7d9:	83 c4 08             	add    esp,0x8
c000a7dc:	5b                   	pop    ebx
c000a7dd:	e9 47 9b 00 00       	jmp    c0014329 <Krnl::panic(char const*)>
c000a7e2:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c000a7e7:	85 c0                	test   eax,eax
c000a7e9:	74 0c                	je     c000a7f7 <setActiveTerminal(VgaText*)+0x32>
c000a7eb:	83 ec 0c             	sub    esp,0xc
c000a7ee:	50                   	push   eax
c000a7ef:	e8 86 fd ff ff       	call   c000a57a <VgaText::updateCursor()>
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	89 1d 84 64 02 c0    	mov    DWORD PTR ds:0xc0026484,ebx
c000a7fd:	51                   	push   ecx
c000a7fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a801:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a804:	53                   	push   ebx
c000a805:	e8 a4 ff ff ff       	call   c000a7ae <VgaText::setCursor(int, int)>
c000a80a:	83 c4 10             	add    esp,0x10
c000a80d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a811:	75 07                	jne    c000a81a <setActiveTerminal(VgaText*)+0x55>
c000a813:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a81a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a81e:	83 c4 08             	add    esp,0x8
c000a821:	5b                   	pop    ebx
c000a822:	e9 05 fd ff ff       	jmp    c000a52c <VgaText::load()>

c000a827 <doTerminalCycle()>:
c000a827:	83 ec 18             	sub    esp,0x18
c000a82a:	a1 80 64 02 c0       	mov    eax,ds:0xc0026480
c000a82f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a832:	50                   	push   eax
c000a833:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c000a838:	e8 88 ff ff ff       	call   c000a7c5 <setActiveTerminal(VgaText*)>
c000a83d:	83 c4 1c             	add    esp,0x1c
c000a840:	c3                   	ret    
c000a841:	90                   	nop

c000a842 <VgaText::setCursorX(int)>:
c000a842:	83 ec 10             	sub    esp,0x10
c000a845:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a849:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a850:	50                   	push   eax
c000a851:	e8 58 ff ff ff       	call   c000a7ae <VgaText::setCursor(int, int)>
c000a856:	83 c4 1c             	add    esp,0x1c
c000a859:	c3                   	ret    

c000a85a <VgaText::setCursorY(int)>:
c000a85a:	83 ec 10             	sub    esp,0x10
c000a85d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a861:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a865:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a868:	50                   	push   eax
c000a869:	e8 40 ff ff ff       	call   c000a7ae <VgaText::setCursor(int, int)>
c000a86e:	83 c4 1c             	add    esp,0x1c
c000a871:	c3                   	ret    

c000a872 <VgaText::incrementCursor(bool)>:
c000a872:	56                   	push   esi
c000a873:	53                   	push   ebx
c000a874:	51                   	push   ecx
c000a875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a879:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a87d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	74 05                	je     c000a88b <VgaText::incrementCursor(bool)+0x19>
c000a886:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a889:	eb 24                	jmp    c000a8af <VgaText::incrementCursor(bool)+0x3d>
c000a88b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a88e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a895:	8d 50 01             	lea    edx,[eax+0x1]
c000a898:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a89b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a89e:	75 0f                	jne    c000a8af <VgaText::incrementCursor(bool)+0x3d>
c000a8a0:	83 ec 0c             	sub    esp,0xc
c000a8a3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8a6:	53                   	push   ebx
c000a8a7:	e8 f0 fd ff ff       	call   c000a69c <VgaText::scrollScreen()>
c000a8ac:	83 c4 10             	add    esp,0x10
c000a8af:	89 f0                	mov    eax,esi
c000a8b1:	84 c0                	test   al,al
c000a8b3:	74 0c                	je     c000a8c1 <VgaText::incrementCursor(bool)+0x4f>
c000a8b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8b9:	5a                   	pop    edx
c000a8ba:	5b                   	pop    ebx
c000a8bb:	5e                   	pop    esi
c000a8bc:	e9 b9 fc ff ff       	jmp    c000a57a <VgaText::updateCursor()>
c000a8c1:	58                   	pop    eax
c000a8c2:	5b                   	pop    ebx
c000a8c3:	5e                   	pop    esi
c000a8c4:	c3                   	ret    
c000a8c5:	90                   	nop

c000a8c6 <VgaText::decrementCursor(bool)>:
c000a8c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8ce:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a8d1:	85 c0                	test   eax,eax
c000a8d3:	74 04                	je     c000a8d9 <VgaText::decrementCursor(bool)+0x13>
c000a8d5:	48                   	dec    eax
c000a8d6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a8d9:	84 c9                	test   cl,cl
c000a8db:	74 09                	je     c000a8e6 <VgaText::decrementCursor(bool)+0x20>
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	e9 94 fc ff ff       	jmp    c000a57a <VgaText::updateCursor()>
c000a8e6:	c3                   	ret    
c000a8e7:	90                   	nop

c000a8e8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a8e8:	53                   	push   ebx
c000a8e9:	83 ec 08             	sub    esp,0x8
c000a8ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a8f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a8fc:	3c 07                	cmp    al,0x7
c000a8fe:	75 2a                	jne    c000a92a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a900:	a1 38 65 02 c0       	mov    eax,ds:0xc0026538
c000a905:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a90d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a915:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a91d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a921:	83 c4 08             	add    esp,0x8
c000a924:	5b                   	pop    ebx
c000a925:	e9 58 2f 00 00       	jmp    c000d882 <Buzzer::beep(int, int, bool)>
c000a92a:	3c 0d                	cmp    al,0xd
c000a92c:	75 09                	jne    c000a937 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a92e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a935:	eb 2c                	jmp    c000a963 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a937:	3c 0a                	cmp    al,0xa
c000a939:	75 31                	jne    c000a96c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a93b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a93e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a945:	8d 50 01             	lea    edx,[eax+0x1]
c000a948:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a94b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a94e:	75 0f                	jne    c000a95f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a950:	83 ec 0c             	sub    esp,0xc
c000a953:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a956:	53                   	push   ebx
c000a957:	e8 40 fd ff ff       	call   c000a69c <VgaText::scrollScreen()>
c000a95c:	83 c4 10             	add    esp,0x10
c000a95f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a963:	83 c4 08             	add    esp,0x8
c000a966:	5b                   	pop    ebx
c000a967:	e9 0e fc ff ff       	jmp    c000a57a <VgaText::updateCursor()>
c000a96c:	3c 08                	cmp    al,0x8
c000a96e:	75 25                	jne    c000a995 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a970:	50                   	push   eax
c000a971:	50                   	push   eax
c000a972:	6a 01                	push   0x1
c000a974:	53                   	push   ebx
c000a975:	e8 4c ff ff ff       	call   c000a8c6 <VgaText::decrementCursor(bool)>
c000a97a:	5a                   	pop    edx
c000a97b:	59                   	pop    ecx
c000a97c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a97f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a982:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a985:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a988:	6a 20                	push   0x20
c000a98a:	53                   	push   ebx
c000a98b:	e8 b2 fd ff ff       	call   c000a742 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a990:	83 c4 28             	add    esp,0x28
c000a993:	5b                   	pop    ebx
c000a994:	c3                   	ret    
c000a995:	83 ec 08             	sub    esp,0x8
c000a998:	0f be c0             	movsx  eax,al
c000a99b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a99e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9a1:	51                   	push   ecx
c000a9a2:	52                   	push   edx
c000a9a3:	50                   	push   eax
c000a9a4:	53                   	push   ebx
c000a9a5:	e8 98 fd ff ff       	call   c000a742 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9aa:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a9ae:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a9b6:	83 c4 28             	add    esp,0x28
c000a9b9:	5b                   	pop    ebx
c000a9ba:	e9 b3 fe ff ff       	jmp    c000a872 <VgaText::incrementCursor(bool)>
c000a9bf:	90                   	nop

c000a9c0 <VgaText::doUpdate()>:
c000a9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9c4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a9c7:	85 c0                	test   eax,eax
c000a9c9:	74 02                	je     c000a9cd <VgaText::doUpdate()+0xd>
c000a9cb:	ff e0                	jmp    eax
c000a9cd:	c3                   	ret    

c000a9ce <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a9ce:	55                   	push   ebp
c000a9cf:	31 ed                	xor    ebp,ebp
c000a9d1:	57                   	push   edi
c000a9d2:	56                   	push   esi
c000a9d3:	53                   	push   ebx
c000a9d4:	83 ec 1c             	sub    esp,0x1c
c000a9d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a9db:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9e0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a9e7:	50                   	push   eax
c000a9e8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9ed:	50                   	push   eax
c000a9ee:	e8 97 fc ff ff       	call   c000a68a <VgaText::combineColours(unsigned char, unsigned char)>
c000a9f3:	59                   	pop    ecx
c000a9f4:	0f b6 c0             	movzx  eax,al
c000a9f7:	5e                   	pop    esi
c000a9f8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa01:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa08:	0f b7 f6             	movzx  esi,si
c000aa0b:	01 f6                	add    esi,esi
c000aa0d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa10:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa13:	84 c0                	test   al,al
c000aa15:	0f 84 fd 00 00 00    	je     c000ab18 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa1b:	3c 0d                	cmp    al,0xd
c000aa1d:	75 0c                	jne    c000aa2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa1f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa26:	e9 e7 00 00 00       	jmp    c000ab12 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa2b:	3c 0a                	cmp    al,0xa
c000aa2d:	75 47                	jne    c000aa76 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa2f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa32:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa39:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa3c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa3f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa42:	75 0f                	jne    c000aa53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa44:	83 ec 0c             	sub    esp,0xc
c000aa47:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa4a:	53                   	push   ebx
c000aa4b:	e8 4c fc ff ff       	call   c000a69c <VgaText::scrollScreen()>
c000aa50:	83 c4 10             	add    esp,0x10
c000aa53:	83 ec 0c             	sub    esp,0xc
c000aa56:	31 ed                	xor    ebp,ebp
c000aa58:	53                   	push   ebx
c000aa59:	e8 1c fb ff ff       	call   c000a57a <VgaText::updateCursor()>
c000aa5e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa63:	83 c4 10             	add    esp,0x10
c000aa66:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa69:	0f b7 f6             	movzx  esi,si
c000aa6c:	01 f6                	add    esi,esi
c000aa6e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa71:	e9 9c 00 00 00       	jmp    c000ab12 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa76:	3c 08                	cmp    al,0x8
c000aa78:	75 35                	jne    c000aaaf <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa7a:	56                   	push   esi
c000aa7b:	56                   	push   esi
c000aa7c:	6a 01                	push   0x1
c000aa7e:	53                   	push   ebx
c000aa7f:	e8 42 fe ff ff       	call   c000a8c6 <VgaText::decrementCursor(bool)>
c000aa84:	58                   	pop    eax
c000aa85:	5a                   	pop    edx
c000aa86:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa92:	6a 20                	push   0x20
c000aa94:	53                   	push   ebx
c000aa95:	e8 a8 fc ff ff       	call   c000a742 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa9a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa9f:	83 c4 20             	add    esp,0x20
c000aaa2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aaa5:	0f b7 f6             	movzx  esi,si
c000aaa8:	01 f6                	add    esi,esi
c000aaaa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aaad:	eb 63                	jmp    c000ab12 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aaaf:	51                   	push   ecx
c000aab0:	51                   	push   ecx
c000aab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab5:	50                   	push   eax
c000aab6:	e8 75 fc ff ff       	call   c000a730 <VgaText::combineCharAndColour(char, unsigned char)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	66 89 06             	mov    WORD PTR [esi],ax
c000aac1:	39 1d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ebx
c000aac7:	75 21                	jne    c000aaea <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aac9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aacc:	85 c0                	test   eax,eax
c000aace:	74 1a                	je     c000aaea <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aad0:	52                   	push   edx
c000aad1:	52                   	push   edx
c000aad2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aad5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aad8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aadc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aae0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aae3:	51                   	push   ecx
c000aae4:	53                   	push   ebx
c000aae5:	ff d0                	call   eax
c000aae7:	83 c4 20             	add    esp,0x20
c000aaea:	83 c6 02             	add    esi,0x2
c000aaed:	50                   	push   eax
c000aaee:	50                   	push   eax
c000aaef:	6a 00                	push   0x0
c000aaf1:	53                   	push   ebx
c000aaf2:	e8 7b fd ff ff       	call   c000a872 <VgaText::incrementCursor(bool)>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aafe:	75 0d                	jne    c000ab0d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab00:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab05:	0f b7 f6             	movzx  esi,si
c000ab08:	01 f6                	add    esi,esi
c000ab0a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab0d:	bd 01 00 00 00       	mov    ebp,0x1
c000ab12:	47                   	inc    edi
c000ab13:	e9 f8 fe ff ff       	jmp    c000aa10 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	53                   	push   ebx
c000ab1c:	e8 59 fa ff ff       	call   c000a57a <VgaText::updateCursor()>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	89 e8                	mov    eax,ebp
c000ab26:	84 c0                	test   al,al
c000ab28:	74 0c                	je     c000ab36 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	53                   	push   ebx
c000ab2e:	e8 8d fe ff ff       	call   c000a9c0 <VgaText::doUpdate()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab3d:	83 c4 1c             	add    esp,0x1c
c000ab40:	5b                   	pop    ebx
c000ab41:	5e                   	pop    esi
c000ab42:	5f                   	pop    edi
c000ab43:	5d                   	pop    ebp
c000ab44:	c3                   	ret    
c000ab45:	90                   	nop

c000ab46 <VgaText::clearScreen()>:
c000ab46:	57                   	push   edi
c000ab47:	56                   	push   esi
c000ab48:	31 f6                	xor    esi,esi
c000ab4a:	53                   	push   ebx
c000ab4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab4f:	52                   	push   edx
c000ab50:	6a 00                	push   0x0
c000ab52:	6a 00                	push   0x0
c000ab54:	53                   	push   ebx
c000ab55:	e8 54 fc ff ff       	call   c000a7ae <VgaText::setCursor(int, int)>
c000ab5a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ab67:	7e 20                	jle    c000ab89 <VgaText::clearScreen()+0x43>
c000ab69:	31 ff                	xor    edi,edi
c000ab6b:	50                   	push   eax
c000ab6c:	50                   	push   eax
c000ab6d:	56                   	push   esi
c000ab6e:	57                   	push   edi
c000ab6f:	47                   	inc    edi
c000ab70:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab73:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab76:	6a 20                	push   0x20
c000ab78:	53                   	push   ebx
c000ab79:	e8 c4 fb ff ff       	call   c000a742 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab7e:	83 c4 20             	add    esp,0x20
c000ab81:	83 ff 50             	cmp    edi,0x50
c000ab84:	75 e5                	jne    c000ab6b <VgaText::clearScreen()+0x25>
c000ab86:	46                   	inc    esi
c000ab87:	eb db                	jmp    c000ab64 <VgaText::clearScreen()+0x1e>
c000ab89:	83 ec 0c             	sub    esp,0xc
c000ab8c:	53                   	push   ebx
c000ab8d:	e8 2e fe ff ff       	call   c000a9c0 <VgaText::doUpdate()>
c000ab92:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	5b                   	pop    ebx
c000ab9d:	5e                   	pop    esi
c000ab9e:	5f                   	pop    edi
c000ab9f:	c3                   	ret    

c000aba0 <VgaText::putchar(char)>:
c000aba0:	56                   	push   esi
c000aba1:	53                   	push   ebx
c000aba2:	83 ec 14             	sub    esp,0x14
c000aba5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aba9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abad:	3c 5b                	cmp    al,0x5b
c000abaf:	75 18                	jne    c000abc9 <VgaText::putchar(char)+0x29>
c000abb1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000abb5:	74 1f                	je     c000abd6 <VgaText::putchar(char)+0x36>
c000abb7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000abbd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000abc4:	e9 bd 00 00 00       	jmp    c000ac86 <VgaText::putchar(char)+0xe6>
c000abc9:	3c 1b                	cmp    al,0x1b
c000abcb:	75 09                	jne    c000abd6 <VgaText::putchar(char)+0x36>
c000abcd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000abd1:	e9 b0 00 00 00       	jmp    c000ac86 <VgaText::putchar(char)+0xe6>
c000abd6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000abd9:	84 c9                	test   cl,cl
c000abdb:	0f 84 92 00 00 00    	je     c000ac73 <VgaText::putchar(char)+0xd3>
c000abe1:	8d 50 c0             	lea    edx,[eax-0x40]
c000abe4:	80 fa 3e             	cmp    dl,0x3e
c000abe7:	77 76                	ja     c000ac5f <VgaText::putchar(char)+0xbf>
c000abe9:	3c 6d                	cmp    al,0x6d
c000abeb:	75 47                	jne    c000ac34 <VgaText::putchar(char)+0x94>
c000abed:	31 f6                	xor    esi,esi
c000abef:	31 d2                	xor    edx,edx
c000abf1:	31 c0                	xor    eax,eax
c000abf3:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000abf6:	7e 2d                	jle    c000ac25 <VgaText::putchar(char)+0x85>
c000abf8:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000abfd:	80 fa 3b             	cmp    dl,0x3b
c000ac00:	75 17                	jne    c000ac19 <VgaText::putchar(char)+0x79>
c000ac02:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac06:	50                   	push   eax
c000ac07:	53                   	push   ebx
c000ac08:	e8 83 f9 ff ff       	call   c000a590 <VgaText::doANSI_SGR(int)>
c000ac0d:	59                   	pop    ecx
c000ac0e:	31 d2                	xor    edx,edx
c000ac10:	58                   	pop    eax
c000ac11:	31 c0                	xor    eax,eax
c000ac13:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac17:	eb 09                	jmp    c000ac22 <VgaText::putchar(char)+0x82>
c000ac19:	6b c0 0a             	imul   eax,eax,0xa
c000ac1c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac20:	88 ca                	mov    dl,cl
c000ac22:	46                   	inc    esi
c000ac23:	eb ce                	jmp    c000abf3 <VgaText::putchar(char)+0x53>
c000ac25:	84 d2                	test   dl,dl
c000ac27:	74 2e                	je     c000ac57 <VgaText::putchar(char)+0xb7>
c000ac29:	50                   	push   eax
c000ac2a:	53                   	push   ebx
c000ac2b:	e8 60 f9 ff ff       	call   c000a590 <VgaText::doANSI_SGR(int)>
c000ac30:	58                   	pop    eax
c000ac31:	5a                   	pop    edx
c000ac32:	eb 23                	jmp    c000ac57 <VgaText::putchar(char)+0xb7>
c000ac34:	3c 4a                	cmp    al,0x4a
c000ac36:	75 1f                	jne    c000ac57 <VgaText::putchar(char)+0xb7>
c000ac38:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac3c:	75 19                	jne    c000ac57 <VgaText::putchar(char)+0xb7>
c000ac3e:	83 ec 0c             	sub    esp,0xc
c000ac41:	53                   	push   ebx
c000ac42:	e8 ff fe ff ff       	call   c000ab46 <VgaText::clearScreen()>
c000ac47:	83 c4 0c             	add    esp,0xc
c000ac4a:	6a 00                	push   0x0
c000ac4c:	6a 00                	push   0x0
c000ac4e:	53                   	push   ebx
c000ac4f:	e8 5a fb ff ff       	call   c000a7ae <VgaText::setCursor(int, int)>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ac5d:	eb 27                	jmp    c000ac86 <VgaText::putchar(char)+0xe6>
c000ac5f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ac62:	83 fa 0e             	cmp    edx,0xe
c000ac65:	7f 1f                	jg     c000ac86 <VgaText::putchar(char)+0xe6>
c000ac67:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac6a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac6d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac71:	eb 13                	jmp    c000ac86 <VgaText::putchar(char)+0xe6>
c000ac73:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac76:	0f be c0             	movsx  eax,al
c000ac79:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac7c:	50                   	push   eax
c000ac7d:	53                   	push   ebx
c000ac7e:	e8 65 fc ff ff       	call   c000a8e8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac83:	83 c4 10             	add    esp,0x10
c000ac86:	83 c4 14             	add    esp,0x14
c000ac89:	5b                   	pop    ebx
c000ac8a:	5e                   	pop    esi
c000ac8b:	c3                   	ret    

c000ac8c <VgaText::putx(unsigned int)>:
c000ac8c:	57                   	push   edi
c000ac8d:	b9 11 00 00 00       	mov    ecx,0x11
c000ac92:	56                   	push   esi
c000ac93:	be 1a 2a 02 c0       	mov    esi,0xc0022a1a
c000ac98:	53                   	push   ebx
c000ac99:	83 ec 20             	sub    esp,0x20
c000ac9c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000aca0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000aca4:	fc                   	cld    
c000aca5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aca7:	be 08 00 00 00       	mov    esi,0x8
c000acac:	50                   	push   eax
c000acad:	50                   	push   eax
c000acae:	89 d8                	mov    eax,ebx
c000acb0:	c1 e3 04             	shl    ebx,0x4
c000acb3:	c1 e8 1c             	shr    eax,0x1c
c000acb6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000acbb:	50                   	push   eax
c000acbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acc0:	e8 db fe ff ff       	call   c000aba0 <VgaText::putchar(char)>
c000acc5:	83 c4 10             	add    esp,0x10
c000acc8:	4e                   	dec    esi
c000acc9:	75 e1                	jne    c000acac <VgaText::putx(unsigned int)+0x20>
c000accb:	83 c4 20             	add    esp,0x20
c000acce:	5b                   	pop    ebx
c000accf:	5e                   	pop    esi
c000acd0:	5f                   	pop    edi
c000acd1:	c3                   	ret    

c000acd2 <VgaText::puts(char const*)>:
c000acd2:	53                   	push   ebx
c000acd3:	83 ec 08             	sub    esp,0x8
c000acd6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acda:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000acdd:	84 c0                	test   al,al
c000acdf:	74 12                	je     c000acf3 <VgaText::puts(char const*)+0x21>
c000ace1:	43                   	inc    ebx
c000ace2:	51                   	push   ecx
c000ace3:	51                   	push   ecx
c000ace4:	50                   	push   eax
c000ace5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ace9:	e8 b2 fe ff ff       	call   c000aba0 <VgaText::putchar(char)>
c000acee:	83 c4 10             	add    esp,0x10
c000acf1:	eb e7                	jmp    c000acda <VgaText::puts(char const*)+0x8>
c000acf3:	83 c4 08             	add    esp,0x8
c000acf6:	5b                   	pop    ebx
c000acf7:	c3                   	ret    

c000acf8 <VgaText::VgaText(char const*)>:
c000acf8:	57                   	push   edi
c000acf9:	56                   	push   esi
c000acfa:	53                   	push   ebx
c000acfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acff:	83 ec 08             	sub    esp,0x8
c000ad02:	6a 00                	push   0x0
c000ad04:	50                   	push   eax
c000ad05:	e8 48 05 00 00       	call   c000b252 <UnixFile::UnixFile(int)>
c000ad0a:	83 c4 10             	add    esp,0x10
c000ad0d:	ba 80 2a 02 c0       	mov    edx,0xc0022a80
c000ad12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad16:	89 10                	mov    DWORD PTR [eax],edx
c000ad18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad27:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad3a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad42:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ad54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad58:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ad5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad63:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad6e:	8d 50 60             	lea    edx,[eax+0x60]
c000ad71:	bb 60 64 02 c0       	mov    ebx,0xc0026460
c000ad76:	b8 08 00 00 00       	mov    eax,0x8
c000ad7b:	fc                   	cld    
c000ad7c:	89 d7                	mov    edi,edx
c000ad7e:	89 de                	mov    esi,ebx
c000ad80:	89 c1                	mov    ecx,eax
c000ad82:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad88:	05 82 00 00 00       	add    eax,0x82
c000ad8d:	83 ec 08             	sub    esp,0x8
c000ad90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad94:	50                   	push   eax
c000ad95:	e8 a6 59 ff ff       	call   c0000740 <strcpy>
c000ad9a:	83 c4 10             	add    esp,0x10
c000ad9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	6a 01                	push   0x1
c000adad:	e8 e3 08 00 00       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c000adb2:	83 c4 10             	add    esp,0x10
c000adb5:	89 c2                	mov    edx,eax
c000adb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adbb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adbe:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c000adc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adcb:	89 c6                	mov    esi,eax
c000adcd:	e8 18 f0 ff ff       	call   c0009dea <Phys::allocatePage()>
c000add2:	68 05 0c 00 00       	push   0xc05
c000add7:	56                   	push   esi
c000add8:	50                   	push   eax
c000add9:	53                   	push   ebx
c000adda:	e8 5d 0f 00 00       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c000addf:	83 c4 10             	add    esp,0x10
c000ade2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ade9:	83 ec 04             	sub    esp,0x4
c000adec:	68 00 0f 00 00       	push   0xf00
c000adf1:	6a 00                	push   0x0
c000adf3:	50                   	push   eax
c000adf4:	e8 8b 58 ff ff       	call   c0000684 <memset>
c000adf9:	83 c4 10             	add    esp,0x10
c000adfc:	83 ec 04             	sub    esp,0x4
c000adff:	6a 00                	push   0x0
c000ae01:	6a 07                	push   0x7
c000ae03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae07:	e8 18 f8 ff ff       	call   c000a624 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae0c:	83 c4 10             	add    esp,0x10
c000ae0f:	83 ec 04             	sub    esp,0x4
c000ae12:	6a 00                	push   0x0
c000ae14:	6a 00                	push   0x0
c000ae16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae1a:	e8 8f f9 ff ff       	call   c000a7ae <VgaText::setCursor(int, int)>
c000ae1f:	83 c4 10             	add    esp,0x10
c000ae22:	83 ec 0c             	sub    esp,0xc
c000ae25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae29:	e8 18 fd ff ff       	call   c000ab46 <VgaText::clearScreen()>
c000ae2e:	83 c4 10             	add    esp,0x10
c000ae31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae35:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3d:	05 02 01 00 00       	add    eax,0x102
c000ae42:	83 ec 04             	sub    esp,0x4
c000ae45:	68 96 00 00 00       	push   0x96
c000ae4a:	6a 00                	push   0x0
c000ae4c:	50                   	push   eax
c000ae4d:	e8 32 58 ff ff       	call   c0000684 <memset>
c000ae52:	83 c4 10             	add    esp,0x10
c000ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae59:	05 98 01 00 00       	add    eax,0x198
c000ae5e:	83 ec 04             	sub    esp,0x4
c000ae61:	68 2c 01 00 00       	push   0x12c
c000ae66:	6a 00                	push   0x0
c000ae68:	50                   	push   eax
c000ae69:	e8 16 58 ff ff       	call   c0000684 <memset>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	90                   	nop
c000ae72:	5b                   	pop    ebx
c000ae73:	5e                   	pop    esi
c000ae74:	5f                   	pop    edi
c000ae75:	c3                   	ret    

c000ae76 <VgaText::receiveKey(unsigned char)>:
c000ae76:	55                   	push   ebp
c000ae77:	57                   	push   edi
c000ae78:	56                   	push   esi
c000ae79:	53                   	push   ebx
c000ae7a:	83 ec 1c             	sub    esp,0x1c
c000ae7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae85:	84 db                	test   bl,bl
c000ae87:	0f 84 c9 00 00 00    	je     c000af56 <VgaText::receiveKey(unsigned char)+0xe0>
c000ae8d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae93:	80 fb 08             	cmp    bl,0x8
c000ae96:	75 2c                	jne    c000aec4 <VgaText::receiveKey(unsigned char)+0x4e>
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	57                   	push   edi
c000ae9c:	e8 ff 57 ff ff       	call   c00006a0 <strlen>
c000aea1:	83 c4 10             	add    esp,0x10
c000aea4:	85 c0                	test   eax,eax
c000aea6:	74 41                	je     c000aee9 <VgaText::receiveKey(unsigned char)+0x73>
c000aea8:	50                   	push   eax
c000aea9:	50                   	push   eax
c000aeaa:	6a 08                	push   0x8
c000aeac:	56                   	push   esi
c000aead:	e8 ee fc ff ff       	call   c000aba0 <VgaText::putchar(char)>
c000aeb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aeb5:	e8 e6 57 ff ff       	call   c00006a0 <strlen>
c000aeba:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000aec2:	eb 22                	jmp    c000aee6 <VgaText::receiveKey(unsigned char)+0x70>
c000aec4:	0f be c3             	movsx  eax,bl
c000aec7:	52                   	push   edx
c000aec8:	52                   	push   edx
c000aec9:	50                   	push   eax
c000aeca:	56                   	push   esi
c000aecb:	e8 d0 fc ff ff       	call   c000aba0 <VgaText::putchar(char)>
c000aed0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000aed4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aed9:	59                   	pop    ecx
c000aeda:	5d                   	pop    ebp
c000aedb:	8d 44 24 16          	lea    eax,[esp+0x16]
c000aedf:	50                   	push   eax
c000aee0:	57                   	push   edi
c000aee1:	e8 9a 59 ff ff       	call   c0000880 <strcat>
c000aee6:	83 c4 10             	add    esp,0x10
c000aee9:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000aef0:	75 05                	jne    c000aef7 <VgaText::receiveKey(unsigned char)+0x81>
c000aef2:	80 fb 0a             	cmp    bl,0xa
c000aef5:	75 53                	jne    c000af4a <VgaText::receiveKey(unsigned char)+0xd4>
c000aef7:	83 ec 0c             	sub    esp,0xc
c000aefa:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af00:	53                   	push   ebx
c000af01:	e8 9a 57 ff ff       	call   c00006a0 <strlen>
c000af06:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af09:	89 c5                	mov    ebp,eax
c000af0b:	e8 90 57 ff ff       	call   c00006a0 <strlen>
c000af10:	83 c4 10             	add    esp,0x10
c000af13:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af17:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af1c:	76 10                	jbe    c000af2e <VgaText::receiveKey(unsigned char)+0xb8>
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	68 2b 2a 02 c0       	push   0xc0022a2b
c000af26:	e8 fe 93 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	50                   	push   eax
c000af2f:	50                   	push   eax
c000af30:	57                   	push   edi
c000af31:	53                   	push   ebx
c000af32:	e8 49 59 ff ff       	call   c0000880 <strcat>
c000af37:	83 c4 0c             	add    esp,0xc
c000af3a:	68 96 00 00 00       	push   0x96
c000af3f:	6a 00                	push   0x0
c000af41:	57                   	push   edi
c000af42:	e8 3d 57 ff ff       	call   c0000684 <memset>
c000af47:	83 c4 10             	add    esp,0x10
c000af4a:	83 ec 0c             	sub    esp,0xc
c000af4d:	56                   	push   esi
c000af4e:	e8 6d fa ff ff       	call   c000a9c0 <VgaText::doUpdate()>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	83 c4 1c             	add    esp,0x1c
c000af59:	5b                   	pop    ebx
c000af5a:	5e                   	pop    esi
c000af5b:	5f                   	pop    edi
c000af5c:	5d                   	pop    ebp
c000af5d:	c3                   	ret    

c000af5e <VgaText::write(unsigned long long, void*, int*)>:
c000af5e:	55                   	push   ebp
c000af5f:	57                   	push   edi
c000af60:	56                   	push   esi
c000af61:	53                   	push   ebx
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af69:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af6d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af71:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af78:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af7b:	39 eb                	cmp    ebx,ebp
c000af7d:	74 13                	je     c000af92 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af7f:	43                   	inc    ebx
c000af80:	50                   	push   eax
c000af81:	50                   	push   eax
c000af82:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af86:	50                   	push   eax
c000af87:	56                   	push   esi
c000af88:	e8 13 fc ff ff       	call   c000aba0 <VgaText::putchar(char)>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	eb e9                	jmp    c000af7b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af92:	83 ec 0c             	sub    esp,0xc
c000af95:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000af9c:	56                   	push   esi
c000af9d:	e8 1e fa ff ff       	call   c000a9c0 <VgaText::doUpdate()>
c000afa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000afa6:	89 38                	mov    DWORD PTR [eax],edi
c000afa8:	83 c4 1c             	add    esp,0x1c
c000afab:	31 c0                	xor    eax,eax
c000afad:	5b                   	pop    ebx
c000afae:	5e                   	pop    esi
c000afaf:	5f                   	pop    edi
c000afb0:	5d                   	pop    ebp
c000afb1:	c3                   	ret    

c000afb2 <newTerminal(char*)>:
c000afb2:	83 ec 28             	sub    esp,0x28
c000afb5:	68 c4 02 00 00       	push   0x2c4
c000afba:	e8 04 ea ff ff       	call   c00099c3 <malloc>
c000afbf:	5a                   	pop    edx
c000afc0:	59                   	pop    ecx
c000afc1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000afc5:	50                   	push   eax
c000afc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afca:	e8 29 fd ff ff       	call   c000acf8 <VgaText::VgaText(char const*)>
c000afcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afd3:	83 c4 2c             	add    esp,0x2c
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <TSS::TSS()>:
c000afd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000afe3:	90                   	nop
c000afe4:	c3                   	ret    
c000afe5:	90                   	nop
c000afe6:	66 90                	xchg   ax,ax

c000afe8 <TSS::setESP(unsigned long)>:
c000afe8:	55                   	push   ebp
c000afe9:	89 e5                	mov    ebp,esp
c000afeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aff1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000aff4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000aff7:	90                   	nop
c000aff8:	5d                   	pop    ebp
c000aff9:	c3                   	ret    
c000affa:	66 90                	xchg   ax,ax

c000affc <TSS::flush()>:
c000affc:	55                   	push   ebp
c000affd:	89 e5                	mov    ebp,esp
c000afff:	83 ec 10             	sub    esp,0x10
c000b002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b005:	8b 00                	mov    eax,DWORD PTR [eax]
c000b007:	83 c8 03             	or     eax,0x3
c000b00a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b00e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b012:	66 89 d0             	mov    ax,dx
c000b015:	0f 00 d8             	ltr    ax
c000b018:	90                   	nop
c000b019:	c9                   	leave  
c000b01a:	c3                   	ret    
c000b01b:	90                   	nop

c000b01c <TSS::setup(unsigned long, unsigned long)>:
c000b01c:	55                   	push   ebp
c000b01d:	89 e5                	mov    ebp,esp
c000b01f:	83 ec 18             	sub    esp,0x18
c000b022:	83 ec 0c             	sub    esp,0xc
c000b025:	6a 68                	push   0x68
c000b027:	e8 97 e9 ff ff       	call   c00099c3 <malloc>
c000b02c:	83 c4 10             	add    esp,0x10
c000b02f:	89 c2                	mov    edx,eax
c000b031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b034:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b03a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b03d:	83 ec 04             	sub    esp,0x4
c000b040:	6a 68                	push   0x68
c000b042:	6a 00                	push   0x0
c000b044:	50                   	push   eax
c000b045:	e8 3a 56 ff ff       	call   c0000684 <memset>
c000b04a:	83 c4 10             	add    esp,0x10
c000b04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b053:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b05f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b06e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b077:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b083:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b0a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0a7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0bf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b0c2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b0d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e4:	0f 20 da             	mov    edx,cr3
c000b0e7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b0ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b0ed:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f6:	83 ec 08             	sub    esp,0x8
c000b0f9:	50                   	push   eax
c000b0fa:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 1d e1 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	83 ec 08             	sub    esp,0x8
c000b109:	6a 68                	push   0x68
c000b10b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b10e:	50                   	push   eax
c000b10f:	e8 28 e1 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b11b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b11e:	83 e0 0f             	and    eax,0xf
c000b121:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b124:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b127:	83 c8 40             	or     eax,0x40
c000b12a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b12d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000b132:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b138:	05 78 01 00 00       	add    eax,0x178
c000b13d:	83 ec 04             	sub    esp,0x4
c000b140:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b143:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b146:	50                   	push   eax
c000b147:	e8 24 e1 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 c2                	mov    edx,eax
c000b151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b154:	89 10                	mov    DWORD PTR [eax],edx
c000b156:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000b15b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b161:	05 78 01 00 00       	add    eax,0x178
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	50                   	push   eax
c000b16a:	e8 2b e1 ff ff       	call   c000929a <GDT::flush()>
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b175:	8b 00                	mov    eax,DWORD PTR [eax]
c000b177:	c9                   	leave  
c000b178:	c3                   	ret    
c000b179:	90                   	nop

c000b17a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b17a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b17e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b185:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b18a:	75 08                	jne    c000b194 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b18c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b192:	eb 38                	jmp    c000b1cc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b194:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b199:	75 17                	jne    c000b1b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b19b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b1a9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1af:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b1b2:	89 c1                	mov    ecx,eax
c000b1b4:	83 e1 fd             	and    ecx,0xfffffffd
c000b1b7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b1bd:	74 cd                	je     c000b18c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1bf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1c4:	83 e0 ef             	and    eax,0xffffffef
c000b1c7:	83 f8 08             	cmp    eax,0x8
c000b1ca:	76 c0                	jbe    c000b18c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1cc:	31 c0                	xor    eax,eax
c000b1ce:	c3                   	ret    
c000b1cf:	90                   	nop

c000b1d0 <ReservedFilename::isAtty()>:
c000b1d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b1d7:	31 c0                	xor    eax,eax
c000b1d9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b1df:	74 09                	je     c000b1ea <ReservedFilename::isAtty()+0x1a>
c000b1e1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b1e7:	0f 94 c0             	sete   al
c000b1ea:	c3                   	ret    
c000b1eb:	90                   	nop

c000b1ec <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b1ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1fb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b200:	75 08                	jne    c000b20a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b202:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b208:	eb 3d                	jmp    c000b247 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b20a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b20f:	75 17                	jne    c000b228 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b211:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b216:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b219:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b21f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b221:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b225:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b228:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b22d:	75 04                	jne    c000b233 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b22f:	89 0a                	mov    DWORD PTR [edx],ecx
c000b231:	eb 14                	jmp    c000b247 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b233:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b238:	74 c8                	je     c000b202 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b23a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b23f:	83 e0 ef             	and    eax,0xffffffef
c000b242:	83 f8 08             	cmp    eax,0x8
c000b245:	76 bb                	jbe    c000b202 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b247:	31 c0                	xor    eax,eax
c000b249:	c3                   	ret    

c000b24a <UnixFile::getFileDescriptor()>:
c000b24a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b24e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b251:	c3                   	ret    

c000b252 <UnixFile::UnixFile(int)>:
c000b252:	53                   	push   ebx
c000b253:	83 ec 28             	sub    esp,0x28
c000b256:	ba 48 2b 02 c0       	mov    edx,0xc0022b48
c000b25b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b25f:	89 10                	mov    DWORD PTR [eax],edx
c000b261:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b269:	0f 8f 8c 01 00 00    	jg     c000b3fb <UnixFile::UnixFile(int)+0x1a9>
c000b26f:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c000b274:	8d 50 01             	lea    edx,[eax+0x1]
c000b277:	89 15 00 58 02 c0    	mov    DWORD PTR ds:0xc0025800,edx
c000b27d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b281:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b284:	83 ec 08             	sub    esp,0x8
c000b287:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b28b:	68 18 65 02 c0       	push   0xc0026518
c000b290:	e8 77 5f 01 00       	call   c002120c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b295:	83 c4 10             	add    esp,0x10
c000b298:	a0 14 65 02 c0       	mov    al,ds:0xc0026514
c000b29d:	83 f0 01             	xor    eax,0x1
c000b2a0:	84 c0                	test   al,al
c000b2a2:	0f 84 54 01 00 00    	je     c000b3fc <UnixFile::UnixFile(int)+0x1aa>
c000b2a8:	c6 05 14 65 02 c0 01 	mov    BYTE PTR ds:0xc0026514,0x1
c000b2af:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b2b7:	83 ec 0c             	sub    esp,0xc
c000b2ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2be:	e8 00 e7 ff ff       	call   c00099c3 <malloc>
c000b2c3:	83 c4 10             	add    esp,0x10
c000b2c6:	89 c3                	mov    ebx,eax
c000b2c8:	83 ec 08             	sub    esp,0x8
c000b2cb:	68 03 ff ff 0f       	push   0xfffff03
c000b2d0:	53                   	push   ebx
c000b2d1:	e8 2c 01 00 00       	call   c000b402 <ReservedFilename::ReservedFilename(int)>
c000b2d6:	83 c4 10             	add    esp,0x10
c000b2d9:	89 1d 0c 65 02 c0    	mov    DWORD PTR ds:0xc002650c,ebx
c000b2df:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b2e7:	83 ec 0c             	sub    esp,0xc
c000b2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ee:	e8 d0 e6 ff ff       	call   c00099c3 <malloc>
c000b2f3:	83 c4 10             	add    esp,0x10
c000b2f6:	89 c3                	mov    ebx,eax
c000b2f8:	83 ec 08             	sub    esp,0x8
c000b2fb:	68 01 ff ff 0f       	push   0xfffff01
c000b300:	53                   	push   ebx
c000b301:	e8 fc 00 00 00       	call   c000b402 <ReservedFilename::ReservedFilename(int)>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 1d 10 65 02 c0    	mov    DWORD PTR ds:0xc0026510,ebx
c000b30f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b317:	83 ec 0c             	sub    esp,0xc
c000b31a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b31e:	e8 a0 e6 ff ff       	call   c00099c3 <malloc>
c000b323:	83 c4 10             	add    esp,0x10
c000b326:	89 c3                	mov    ebx,eax
c000b328:	83 ec 08             	sub    esp,0x8
c000b32b:	68 00 ff ff 0f       	push   0xfffff00
c000b330:	53                   	push   ebx
c000b331:	e8 cc 00 00 00       	call   c000b402 <ReservedFilename::ReservedFilename(int)>
c000b336:	83 c4 10             	add    esp,0x10
c000b339:	89 1d 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,ebx
c000b33f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b347:	83 ec 0c             	sub    esp,0xc
c000b34a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b34e:	e8 70 e6 ff ff       	call   c00099c3 <malloc>
c000b353:	83 c4 10             	add    esp,0x10
c000b356:	89 c3                	mov    ebx,eax
c000b358:	83 ec 08             	sub    esp,0x8
c000b35b:	68 02 ff ff 0f       	push   0xfffff02
c000b360:	53                   	push   ebx
c000b361:	e8 9c 00 00 00       	call   c000b402 <ReservedFilename::ReservedFilename(int)>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 1d 08 65 02 c0    	mov    DWORD PTR ds:0xc0026508,ebx
c000b36f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b377:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b37c:	7f 7e                	jg     c000b3fc <UnixFile::UnixFile(int)+0x1aa>
c000b37e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b38d:	e8 31 e6 ff ff       	call   c00099c3 <malloc>
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	89 c3                	mov    ebx,eax
c000b397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b39b:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b3a0:	83 ec 08             	sub    esp,0x8
c000b3a3:	50                   	push   eax
c000b3a4:	53                   	push   ebx
c000b3a5:	e8 58 00 00 00       	call   c000b402 <ReservedFilename::ReservedFilename(int)>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3b1:	89 1c 85 e0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b20],ebx
c000b3b8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b3c0:	83 ec 0c             	sub    esp,0xc
c000b3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c7:	e8 f7 e5 ff ff       	call   c00099c3 <malloc>
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	89 c3                	mov    ebx,eax
c000b3d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3d5:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b3da:	83 ec 08             	sub    esp,0x8
c000b3dd:	50                   	push   eax
c000b3de:	53                   	push   ebx
c000b3df:	e8 1e 00 00 00       	call   c000b402 <ReservedFilename::ReservedFilename(int)>
c000b3e4:	83 c4 10             	add    esp,0x10
c000b3e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3eb:	89 1c 85 a0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b60],ebx
c000b3f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b3f6:	e9 7c ff ff ff       	jmp    c000b377 <UnixFile::UnixFile(int)+0x125>
c000b3fb:	90                   	nop
c000b3fc:	83 c4 28             	add    esp,0x28
c000b3ff:	5b                   	pop    ebx
c000b400:	c3                   	ret    
c000b401:	90                   	nop

c000b402 <ReservedFilename::ReservedFilename(int)>:
c000b402:	83 ec 0c             	sub    esp,0xc
c000b405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b409:	83 ec 08             	sub    esp,0x8
c000b40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b410:	50                   	push   eax
c000b411:	e8 3c fe ff ff       	call   c000b252 <UnixFile::UnixFile(int)>
c000b416:	83 c4 10             	add    esp,0x10
c000b419:	ba 64 2b 02 c0       	mov    edx,0xc0022b64
c000b41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b422:	89 10                	mov    DWORD PTR [eax],edx
c000b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b428:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b42c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b42f:	90                   	nop
c000b430:	83 c4 0c             	add    esp,0xc
c000b433:	c3                   	ret    

c000b434 <UnixFile::~UnixFile()>:
c000b434:	83 ec 1c             	sub    esp,0x1c
c000b437:	ba 48 2b 02 c0       	mov    edx,0xc0022b48
c000b43c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b440:	89 10                	mov    DWORD PTR [eax],edx
c000b442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b449:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b44e:	7f 73                	jg     c000b4c3 <UnixFile::~UnixFile()+0x8f>
c000b450:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	68 18 65 02 c0       	push   0xc0026518
c000b460:	e8 7b 5e 01 00       	call   c00212e0 <LinkedList<UnixFile>::getFirstElement()>
c000b465:	83 c4 10             	add    esp,0x10
c000b468:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	68 18 65 02 c0       	push   0xc0026518
c000b474:	e8 6f 5e 01 00       	call   c00212e8 <LinkedList<UnixFile>::removeFirst()>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b480:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b484:	74 40                	je     c000b4c6 <UnixFile::~UnixFile()+0x92>
c000b486:	83 ec 08             	sub    esp,0x8
c000b489:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b48d:	68 18 65 02 c0       	push   0xc0026518
c000b492:	e8 75 5d 01 00       	call   c002120c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b49e:	8d 50 01             	lea    edx,[eax+0x1]
c000b4a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a5:	3d 88 13 00 00       	cmp    eax,0x1388
c000b4aa:	0f 94 c0             	sete   al
c000b4ad:	84 c0                	test   al,al
c000b4af:	74 a7                	je     c000b458 <UnixFile::~UnixFile()+0x24>
c000b4b1:	83 ec 0c             	sub    esp,0xc
c000b4b4:	68 20 2b 02 c0       	push   0xc0022b20
c000b4b9:	e8 6b 8e 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000b4be:	83 c4 10             	add    esp,0x10
c000b4c1:	eb 95                	jmp    c000b458 <UnixFile::~UnixFile()+0x24>
c000b4c3:	90                   	nop
c000b4c4:	eb 01                	jmp    c000b4c7 <UnixFile::~UnixFile()+0x93>
c000b4c6:	90                   	nop
c000b4c7:	90                   	nop
c000b4c8:	83 c4 1c             	add    esp,0x1c
c000b4cb:	c3                   	ret    

c000b4cc <UnixFile::~UnixFile()>:
c000b4cc:	83 ec 0c             	sub    esp,0xc
c000b4cf:	83 ec 0c             	sub    esp,0xc
c000b4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d6:	e8 59 ff ff ff       	call   c000b434 <UnixFile::~UnixFile()>
c000b4db:	83 c4 10             	add    esp,0x10
c000b4de:	83 ec 08             	sub    esp,0x8
c000b4e1:	6a 0c                	push   0xc
c000b4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e7:	e8 9a 14 00 00       	call   c000c986 <operator delete(void*, unsigned long)>
c000b4ec:	83 c4 10             	add    esp,0x10
c000b4ef:	83 c4 0c             	add    esp,0xc
c000b4f2:	c3                   	ret    
c000b4f3:	90                   	nop

c000b4f4 <ReservedFilename::~ReservedFilename()>:
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	ba 64 2b 02 c0       	mov    edx,0xc0022b64
c000b4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b500:	89 10                	mov    DWORD PTR [eax],edx
c000b502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b506:	83 ec 0c             	sub    esp,0xc
c000b509:	50                   	push   eax
c000b50a:	e8 25 ff ff ff       	call   c000b434 <UnixFile::~UnixFile()>
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	90                   	nop
c000b513:	83 c4 0c             	add    esp,0xc
c000b516:	c3                   	ret    
c000b517:	90                   	nop

c000b518 <ReservedFilename::~ReservedFilename()>:
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b522:	e8 cd ff ff ff       	call   c000b4f4 <ReservedFilename::~ReservedFilename()>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	83 ec 08             	sub    esp,0x8
c000b52d:	6a 0c                	push   0xc
c000b52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b533:	e8 4e 14 00 00       	call   c000c986 <operator delete(void*, unsigned long)>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	83 c4 0c             	add    esp,0xc
c000b53e:	c3                   	ret    

c000b53f <getFromFileDescriptor(int)>:
c000b53f:	53                   	push   ebx
c000b540:	83 ec 08             	sub    esp,0x8
c000b543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b547:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b54d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b553:	7f 2c                	jg     c000b581 <getFromFileDescriptor(int)+0x42>
c000b555:	83 ec 0c             	sub    esp,0xc
c000b558:	68 18 65 02 c0       	push   0xc0026518
c000b55d:	e8 7e 5d 01 00       	call   c00212e0 <LinkedList<UnixFile>::getFirstElement()>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	85 c0                	test   eax,eax
c000b567:	75 04                	jne    c000b56d <getFromFileDescriptor(int)+0x2e>
c000b569:	31 c0                	xor    eax,eax
c000b56b:	eb 6e                	jmp    c000b5db <getFromFileDescriptor(int)+0x9c>
c000b56d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b570:	74 69                	je     c000b5db <getFromFileDescriptor(int)+0x9c>
c000b572:	52                   	push   edx
c000b573:	52                   	push   edx
c000b574:	50                   	push   eax
c000b575:	68 18 65 02 c0       	push   0xc0026518
c000b57a:	e8 0b 5e 01 00       	call   c002138a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b57f:	eb e1                	jmp    c000b562 <getFromFileDescriptor(int)+0x23>
c000b581:	a1 0c 65 02 c0       	mov    eax,ds:0xc002650c
c000b586:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b58c:	74 4d                	je     c000b5db <getFromFileDescriptor(int)+0x9c>
c000b58e:	a1 10 65 02 c0       	mov    eax,ds:0xc0026510
c000b593:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b599:	74 40                	je     c000b5db <getFromFileDescriptor(int)+0x9c>
c000b59b:	a1 08 65 02 c0       	mov    eax,ds:0xc0026508
c000b5a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b5a6:	74 33                	je     c000b5db <getFromFileDescriptor(int)+0x9c>
c000b5a8:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000b5ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b5b3:	74 26                	je     c000b5db <getFromFileDescriptor(int)+0x9c>
c000b5b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b5bb:	83 f8 08             	cmp    eax,0x8
c000b5be:	77 09                	ja     c000b5c9 <getFromFileDescriptor(int)+0x8a>
c000b5c0:	8b 04 85 e0 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b20]
c000b5c7:	eb 12                	jmp    c000b5db <getFromFileDescriptor(int)+0x9c>
c000b5c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b5cf:	83 fb 08             	cmp    ebx,0x8
c000b5d2:	77 95                	ja     c000b569 <getFromFileDescriptor(int)+0x2a>
c000b5d4:	8b 04 9d a0 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b60]
c000b5db:	83 c4 08             	add    esp,0x8
c000b5de:	5b                   	pop    ebx
c000b5df:	c3                   	ret    

c000b5e0 <__static_initialization_and_destruction_0(int, int)>:
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b5e8:	75 34                	jne    c000b61e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b5f2:	75 2a                	jne    c000b61e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5f4:	83 ec 0c             	sub    esp,0xc
c000b5f7:	68 18 65 02 c0       	push   0xc0026518
c000b5fc:	e8 c9 5b 01 00       	call   c00211ca <LinkedList<UnixFile>::LinkedList()>
c000b601:	83 c4 10             	add    esp,0x10
c000b604:	83 ec 04             	sub    esp,0x4
c000b607:	68 28 56 02 c0       	push   0xc0025628
c000b60c:	68 18 65 02 c0       	push   0xc0026518
c000b611:	68 c8 11 02 c0       	push   0xc00211c8
c000b616:	e8 e5 12 00 00       	call   c000c900 <__cxa_atexit>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	90                   	nop
c000b61f:	83 c4 0c             	add    esp,0xc
c000b622:	c3                   	ret    

c000b623 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b623:	83 ec 0c             	sub    esp,0xc
c000b626:	83 ec 08             	sub    esp,0x8
c000b629:	68 ff ff 00 00       	push   0xffff
c000b62e:	6a 01                	push   0x1
c000b630:	e8 ab ff ff ff       	call   c000b5e0 <__static_initialization_and_destruction_0(int, int)>
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	83 c4 0c             	add    esp,0xc
c000b63b:	c3                   	ret    

c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b63c:	53                   	push   ebx
c000b63d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b641:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b645:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b64b:	89 c8                	mov    eax,ecx
c000b64d:	d1 e8                	shr    eax,1
c000b64f:	03 05 08 58 02 c0    	add    eax,DWORD PTR ds:0xc0025808
c000b655:	83 e1 01             	and    ecx,0x1
c000b658:	8a 10                	mov    dl,BYTE PTR [eax]
c000b65a:	75 09                	jne    c000b665 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b65c:	83 e2 f0             	and    edx,0xfffffff0
c000b65f:	09 da                	or     edx,ebx
c000b661:	88 10                	mov    BYTE PTR [eax],dl
c000b663:	5b                   	pop    ebx
c000b664:	c3                   	ret    
c000b665:	c1 e3 04             	shl    ebx,0x4
c000b668:	83 e2 0f             	and    edx,0xf
c000b66b:	09 da                	or     edx,ebx
c000b66d:	88 10                	mov    BYTE PTR [eax],dl
c000b66f:	5b                   	pop    ebx
c000b670:	c3                   	ret    

c000b671 <Virt::getPageState(unsigned long)>:
c000b671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b675:	8b 0d 08 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025808
c000b67b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b681:	89 d0                	mov    eax,edx
c000b683:	d1 e8                	shr    eax,1
c000b685:	83 e2 01             	and    edx,0x1
c000b688:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b68b:	75 04                	jne    c000b691 <Virt::getPageState(unsigned long)+0x20>
c000b68d:	83 e0 0f             	and    eax,0xf
c000b690:	c3                   	ret    
c000b691:	c0 e8 04             	shr    al,0x4
c000b694:	c3                   	ret    

c000b695 <Virt::allocateKernelVirtualPages(int)>:
c000b695:	55                   	push   ebp
c000b696:	31 ed                	xor    ebp,ebp
c000b698:	57                   	push   edi
c000b699:	56                   	push   esi
c000b69a:	53                   	push   ebx
c000b69b:	31 db                	xor    ebx,ebx
c000b69d:	83 ec 1c             	sub    esp,0x1c
c000b6a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6a4:	8b 3d 04 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025804
c000b6aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b6af:	57                   	push   edi
c000b6b0:	e8 bc ff ff ff       	call   c000b671 <Virt::getPageState(unsigned long)>
c000b6b5:	5a                   	pop    edx
c000b6b6:	84 c0                	test   al,al
c000b6b8:	75 3a                	jne    c000b6f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b6ba:	85 db                	test   ebx,ebx
c000b6bc:	75 02                	jne    c000b6c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b6be:	89 fd                	mov    ebp,edi
c000b6c0:	43                   	inc    ebx
c000b6c1:	39 f3                	cmp    ebx,esi
c000b6c3:	74 5a                	je     c000b71f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b6c5:	47                   	inc    edi
c000b6c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6cc:	76 31                	jbe    c000b6ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b6ce:	c7 05 04 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025804,0xc8000
c000b6d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b6dd:	75 28                	jne    c000b707 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b6df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b6e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b6e9:	57                   	push   edi
c000b6ea:	e8 82 ff ff ff       	call   c000b671 <Virt::getPageState(unsigned long)>
c000b6ef:	5a                   	pop    edx
c000b6f0:	84 c0                	test   al,al
c000b6f2:	74 c6                	je     c000b6ba <Virt::allocateKernelVirtualPages(int)+0x25>
c000b6f4:	31 db                	xor    ebx,ebx
c000b6f6:	47                   	inc    edi
c000b6f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6fd:	77 cf                	ja     c000b6ce <Virt::allocateKernelVirtualPages(int)+0x39>
c000b6ff:	89 3d 04 58 02 c0    	mov    DWORD PTR ds:0xc0025804,edi
c000b705:	eb a8                	jmp    c000b6af <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b707:	83 ec 0c             	sub    esp,0xc
c000b70a:	68 78 2b 02 c0       	push   0xc0022b78
c000b70f:	e8 15 8c 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000b714:	8b 3d 04 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025804
c000b71a:	83 c4 10             	add    esp,0x10
c000b71d:	eb 90                	jmp    c000b6af <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b71f:	89 2d 04 58 02 c0    	mov    DWORD PTR ds:0xc0025804,ebp
c000b725:	4b                   	dec    ebx
c000b726:	74 5f                	je     c000b787 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b728:	85 f6                	test   esi,esi
c000b72a:	74 3d                	je     c000b769 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b72c:	89 e8                	mov    eax,ebp
c000b72e:	31 db                	xor    ebx,ebx
c000b730:	8d 7e ff             	lea    edi,[esi-0x1]
c000b733:	eb 14                	jmp    c000b749 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b735:	6a 01                	push   0x1
c000b737:	43                   	inc    ebx
c000b738:	50                   	push   eax
c000b739:	e8 fe fe ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b73e:	58                   	pop    eax
c000b73f:	39 f3                	cmp    ebx,esi
c000b741:	5a                   	pop    edx
c000b742:	74 25                	je     c000b769 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b744:	a1 04 58 02 c0       	mov    eax,ds:0xc0025804
c000b749:	8d 50 01             	lea    edx,[eax+0x1]
c000b74c:	85 db                	test   ebx,ebx
c000b74e:	89 15 04 58 02 c0    	mov    DWORD PTR ds:0xc0025804,edx
c000b754:	74 20                	je     c000b776 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b756:	39 df                	cmp    edi,ebx
c000b758:	75 db                	jne    c000b735 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b75a:	6a 03                	push   0x3
c000b75c:	43                   	inc    ebx
c000b75d:	50                   	push   eax
c000b75e:	e8 d9 fe ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b763:	59                   	pop    ecx
c000b764:	39 f3                	cmp    ebx,esi
c000b766:	58                   	pop    eax
c000b767:	75 db                	jne    c000b744 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b769:	83 c4 1c             	add    esp,0x1c
c000b76c:	89 e8                	mov    eax,ebp
c000b76e:	5b                   	pop    ebx
c000b76f:	c1 e0 0c             	shl    eax,0xc
c000b772:	5e                   	pop    esi
c000b773:	5f                   	pop    edi
c000b774:	5d                   	pop    ebp
c000b775:	c3                   	ret    
c000b776:	6a 02                	push   0x2
c000b778:	bb 01 00 00 00       	mov    ebx,0x1
c000b77d:	50                   	push   eax
c000b77e:	e8 b9 fe ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b783:	58                   	pop    eax
c000b784:	5a                   	pop    edx
c000b785:	eb bd                	jmp    c000b744 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b787:	6a 04                	push   0x4
c000b789:	8d 45 01             	lea    eax,[ebp+0x1]
c000b78c:	55                   	push   ebp
c000b78d:	a3 04 58 02 c0       	mov    ds:0xc0025804,eax
c000b792:	e8 a5 fe ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b797:	59                   	pop    ecx
c000b798:	89 e8                	mov    eax,ebp
c000b79a:	5b                   	pop    ebx
c000b79b:	c1 e0 0c             	shl    eax,0xc
c000b79e:	83 c4 1c             	add    esp,0x1c
c000b7a1:	5b                   	pop    ebx
c000b7a2:	5e                   	pop    esi
c000b7a3:	5f                   	pop    edi
c000b7a4:	5d                   	pop    ebp
c000b7a5:	c3                   	ret    

c000b7a6 <Virt::freeSwapfilePage(unsigned long)>:
c000b7a6:	53                   	push   ebx
c000b7a7:	8b 15 2c 65 02 c0    	mov    edx,DWORD PTR ds:0xc002652c
c000b7ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7b1:	b8 01 00 00 00       	mov    eax,0x1
c000b7b6:	89 cb                	mov    ebx,ecx
c000b7b8:	d3 e0                	shl    eax,cl
c000b7ba:	c1 eb 05             	shr    ebx,0x5
c000b7bd:	f7 d0                	not    eax
c000b7bf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b7c2:	5b                   	pop    ebx
c000b7c3:	c3                   	ret    

c000b7c4 <Virt::swapIDToSector(unsigned long)>:
c000b7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c8:	0f af 05 0c 58 02 c0 	imul   eax,DWORD PTR ds:0xc002580c
c000b7cf:	03 05 14 58 02 c0    	add    eax,DWORD PTR ds:0xc0025814
c000b7d5:	c3                   	ret    

c000b7d6 <Virt::allocateSwapfilePage()>:
c000b7d6:	55                   	push   ebp
c000b7d7:	31 d2                	xor    edx,edx
c000b7d9:	57                   	push   edi
c000b7da:	56                   	push   esi
c000b7db:	53                   	push   ebx
c000b7dc:	83 ec 0c             	sub    esp,0xc
c000b7df:	8b 0d 0c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002580c
c000b7e5:	a1 10 58 02 c0       	mov    eax,ds:0xc0025810
c000b7ea:	f7 f1                	div    ecx
c000b7ec:	39 0d 10 58 02 c0    	cmp    DWORD PTR ds:0xc0025810,ecx
c000b7f2:	72 2d                	jb     c000b821 <Virt::allocateSwapfilePage()+0x4b>
c000b7f4:	8b 35 2c 65 02 c0    	mov    esi,DWORD PTR ds:0xc002652c
c000b7fa:	8b 16                	mov    edx,DWORD PTR [esi]
c000b7fc:	f6 c2 01             	test   dl,0x1
c000b7ff:	74 3c                	je     c000b83d <Virt::allocateSwapfilePage()+0x67>
c000b801:	31 c9                	xor    ecx,ecx
c000b803:	bf 01 00 00 00       	mov    edi,0x1
c000b808:	eb 12                	jmp    c000b81c <Virt::allocateSwapfilePage()+0x46>
c000b80a:	89 fd                	mov    ebp,edi
c000b80c:	89 ca                	mov    edx,ecx
c000b80e:	d3 e5                	shl    ebp,cl
c000b810:	c1 ea 05             	shr    edx,0x5
c000b813:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b816:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b818:	85 ea                	test   edx,ebp
c000b81a:	74 2a                	je     c000b846 <Virt::allocateSwapfilePage()+0x70>
c000b81c:	41                   	inc    ecx
c000b81d:	39 c8                	cmp    eax,ecx
c000b81f:	77 e9                	ja     c000b80a <Virt::allocateSwapfilePage()+0x34>
c000b821:	83 ec 0c             	sub    esp,0xc
c000b824:	68 30 2d 02 c0       	push   0xc0022d30
c000b829:	e8 fb 8a 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000b82e:	83 c4 10             	add    esp,0x10
c000b831:	31 c9                	xor    ecx,ecx
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	89 c8                	mov    eax,ecx
c000b838:	5b                   	pop    ebx
c000b839:	5e                   	pop    esi
c000b83a:	5f                   	pop    edi
c000b83b:	5d                   	pop    ebp
c000b83c:	c3                   	ret    
c000b83d:	89 f3                	mov    ebx,esi
c000b83f:	bd 01 00 00 00       	mov    ebp,0x1
c000b844:	31 c9                	xor    ecx,ecx
c000b846:	09 ea                	or     edx,ebp
c000b848:	89 c8                	mov    eax,ecx
c000b84a:	89 13                	mov    DWORD PTR [ebx],edx
c000b84c:	83 c4 0c             	add    esp,0xc
c000b84f:	5b                   	pop    ebx
c000b850:	5e                   	pop    esi
c000b851:	5f                   	pop    edi
c000b852:	5d                   	pop    ebp
c000b853:	c3                   	ret    

c000b854 <Virt::virtualMemorySetup()>:
c000b854:	53                   	push   ebx
c000b855:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b85a:	6a 0f                	push   0xf
c000b85c:	53                   	push   ebx
c000b85d:	43                   	inc    ebx
c000b85e:	e8 d9 fd ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b863:	58                   	pop    eax
c000b864:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b86a:	5a                   	pop    edx
c000b86b:	75 ed                	jne    c000b85a <Virt::virtualMemorySetup()+0x6>
c000b86d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b872:	6a 00                	push   0x0
c000b874:	53                   	push   ebx
c000b875:	43                   	inc    ebx
c000b876:	e8 c1 fd ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b87b:	59                   	pop    ecx
c000b87c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b882:	58                   	pop    eax
c000b883:	75 ed                	jne    c000b872 <Virt::virtualMemorySetup()+0x1e>
c000b885:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b88a:	6a 0f                	push   0xf
c000b88c:	53                   	push   ebx
c000b88d:	43                   	inc    ebx
c000b88e:	e8 a9 fd ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b893:	58                   	pop    eax
c000b894:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b89a:	5a                   	pop    edx
c000b89b:	75 ed                	jne    c000b88a <Virt::virtualMemorySetup()+0x36>
c000b89d:	5b                   	pop    ebx
c000b89e:	c3                   	ret    

c000b89f <Virt::setupPageSwapping(int)>:
c000b89f:	53                   	push   ebx
c000b8a0:	83 ec 0c             	sub    esp,0xc
c000b8a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b8a7:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c000b8ac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b8b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b4:	53                   	push   ebx
c000b8b5:	c1 e3 0b             	shl    ebx,0xb
c000b8b8:	68 47 2d 02 c0       	push   0xc0022d47
c000b8bd:	50                   	push   eax
c000b8be:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b8c1:	89 1d 10 58 02 c0    	mov    DWORD PTR ds:0xc0025810,ebx
c000b8c7:	c6 05 18 58 02 c0 43 	mov    BYTE PTR ds:0xc0025818,0x43
c000b8ce:	c1 eb 08             	shr    ebx,0x8
c000b8d1:	a3 14 58 02 c0       	mov    ds:0xc0025814,eax
c000b8d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8d9:	c7 05 0c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002580c,0x8
c000b8e3:	e8 db e0 ff ff       	call   c00099c3 <malloc>
c000b8e8:	83 c4 0c             	add    esp,0xc
c000b8eb:	89 c1                	mov    ecx,eax
c000b8ed:	a3 2c 65 02 c0       	mov    ds:0xc002652c,eax
c000b8f2:	31 d2                	xor    edx,edx
c000b8f4:	a1 10 58 02 c0       	mov    eax,ds:0xc0025810
c000b8f9:	f7 35 0c 58 02 c0    	div    DWORD PTR ds:0xc002580c
c000b8ff:	c1 e8 05             	shr    eax,0x5
c000b902:	50                   	push   eax
c000b903:	6a 00                	push   0x0
c000b905:	51                   	push   ecx
c000b906:	e8 79 4d ff ff       	call   c0000684 <memset>
c000b90b:	83 c4 18             	add    esp,0x18
c000b90e:	5b                   	pop    ebx
c000b90f:	c3                   	ret    

c000b910 <VAS::VAS()>:
c000b910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b92a:	a3 30 65 02 c0       	mov    ds:0xc0026530,eax
c000b92f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b933:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b93b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b942:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b949:	90                   	nop
c000b94a:	c3                   	ret    
c000b94b:	90                   	nop

c000b94c <VAS::VAS(VAS*)>:
c000b94c:	83 ec 0c             	sub    esp,0xc
c000b94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b953:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b95e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b965:	83 ec 0c             	sub    esp,0xc
c000b968:	68 98 2b 02 c0       	push   0xc0022b98
c000b96d:	e8 b7 89 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000b972:	83 c4 10             	add    esp,0x10
c000b975:	90                   	nop
c000b976:	83 c4 0c             	add    esp,0xc
c000b979:	c3                   	ret    

c000b97a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b97a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b97e:	89 c2                	mov    edx,eax
c000b980:	c1 e8 0a             	shr    eax,0xa
c000b983:	c1 ea 16             	shr    edx,0x16
c000b986:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b98b:	19 c9                	sbb    ecx,ecx
c000b98d:	c1 e2 0c             	shl    edx,0xc
c000b990:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b996:	25 fc 0f 00 00       	and    eax,0xffc
c000b99b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b9a2:	01 d0                	add    eax,edx
c000b9a4:	c3                   	ret    
c000b9a5:	90                   	nop

c000b9a6 <VAS::getPageTableEntry(unsigned long)>:
c000b9a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b9aa:	89 ca                	mov    edx,ecx
c000b9ac:	c1 e9 0a             	shr    ecx,0xa
c000b9af:	c1 ea 16             	shr    edx,0x16
c000b9b2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b9b8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b9be:	c1 e0 0c             	shl    eax,0xc
c000b9c1:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b9c4:	c3                   	ret    

c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b9c5:	57                   	push   edi
c000b9c6:	56                   	push   esi
c000b9c7:	be 01 00 00 00       	mov    esi,0x1
c000b9cc:	53                   	push   ebx
c000b9cd:	83 ec 10             	sub    esp,0x10
c000b9d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9d4:	c1 eb 0c             	shr    ebx,0xc
c000b9d7:	eb 3f                	jmp    c000ba18 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b9d9:	83 ec 08             	sub    esp,0x8
c000b9dc:	57                   	push   edi
c000b9dd:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000b9e3:	e8 be ff ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000b9e8:	83 c4 10             	add    esp,0x10
c000b9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9f1:	f6 c4 04             	test   ah,0x4
c000b9f4:	75 5f                	jne    c000ba55 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b9f6:	80 fa 04             	cmp    dl,0x4
c000b9f9:	74 78                	je     c000ba73 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b9fb:	80 fa 02             	cmp    dl,0x2
c000b9fe:	0f 84 88 00 00 00    	je     c000ba8c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba04:	80 fa 03             	cmp    dl,0x3
c000ba07:	0f 84 ad 00 00 00    	je     c000baba <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba0d:	fe ca                	dec    dl
c000ba0f:	0f 84 92 00 00 00    	je     c000baa7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba15:	43                   	inc    ebx
c000ba16:	31 f6                	xor    esi,esi
c000ba18:	53                   	push   ebx
c000ba19:	89 df                	mov    edi,ebx
c000ba1b:	e8 51 fc ff ff       	call   c000b671 <Virt::getPageState(unsigned long)>
c000ba20:	c1 e7 0c             	shl    edi,0xc
c000ba23:	59                   	pop    ecx
c000ba24:	84 c0                	test   al,al
c000ba26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba2a:	75 ad                	jne    c000b9d9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	68 5e 2d 02 c0       	push   0xc0022d5e
c000ba34:	e8 f0 88 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000ba39:	58                   	pop    eax
c000ba3a:	5a                   	pop    edx
c000ba3b:	57                   	push   edi
c000ba3c:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000ba42:	e8 5f ff ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000ba47:	83 c4 10             	add    esp,0x10
c000ba4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba4c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba50:	f6 c4 04             	test   ah,0x4
c000ba53:	74 c0                	je     c000ba15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba55:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000ba59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	50                   	push   eax
c000ba62:	e8 f3 e2 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000ba67:	83 c4 10             	add    esp,0x10
c000ba6a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba6e:	80 fa 04             	cmp    dl,0x4
c000ba71:	75 88                	jne    c000b9fb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba73:	89 f0                	mov    eax,esi
c000ba75:	84 c0                	test   al,al
c000ba77:	75 47                	jne    c000bac0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba79:	c7 44 24 20 bc 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022bbc
c000ba81:	83 c4 10             	add    esp,0x10
c000ba84:	5b                   	pop    ebx
c000ba85:	5e                   	pop    esi
c000ba86:	5f                   	pop    edi
c000ba87:	e9 9d 88 00 00       	jmp    c0014329 <Krnl::panic(char const*)>
c000ba8c:	89 f0                	mov    eax,esi
c000ba8e:	84 c0                	test   al,al
c000ba90:	75 15                	jne    c000baa7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	68 7a 2d 02 c0       	push   0xc0022d7a
c000ba9a:	e8 8a 88 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000ba9f:	83 c4 10             	add    esp,0x10
c000baa2:	e9 6e ff ff ff       	jmp    c000ba15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baa7:	83 ec 08             	sub    esp,0x8
c000baaa:	6a 00                	push   0x0
c000baac:	53                   	push   ebx
c000baad:	e8 8a fb ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bab2:	83 c4 10             	add    esp,0x10
c000bab5:	e9 5b ff ff ff       	jmp    c000ba15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baba:	89 f0                	mov    eax,esi
c000babc:	84 c0                	test   al,al
c000babe:	75 15                	jne    c000bad5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bac0:	83 ec 08             	sub    esp,0x8
c000bac3:	6a 00                	push   0x0
c000bac5:	53                   	push   ebx
c000bac6:	e8 71 fb ff ff       	call   c000b63c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bacb:	83 c4 10             	add    esp,0x10
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	5b                   	pop    ebx
c000bad2:	5e                   	pop    esi
c000bad3:	5f                   	pop    edi
c000bad4:	c3                   	ret    
c000bad5:	c7 44 24 20 96 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d96
c000badd:	83 c4 10             	add    esp,0x10
c000bae0:	5b                   	pop    ebx
c000bae1:	5e                   	pop    esi
c000bae2:	5f                   	pop    edi
c000bae3:	e9 41 88 00 00       	jmp    c0014329 <Krnl::panic(char const*)>

c000bae8 <VAS::freeAllocatedPages(unsigned long)>:
c000bae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000baf0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000baf4:	74 09                	je     c000baff <VAS::freeAllocatedPages(unsigned long)+0x17>
c000baf6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bafa:	e9 c6 fe ff ff       	jmp    c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000baff:	c7 44 24 04 e0 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022be0
c000bb07:	e9 5b 0f 00 00       	jmp    c000ca67 <Dbg::kprintf(char const*, ...)>

c000bb0c <VAS::virtualToPhysical(unsigned long)>:
c000bb0c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb10:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb14:	e8 8d fe ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000bb19:	5a                   	pop    edx
c000bb1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb1c:	59                   	pop    ecx
c000bb1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb22:	c3                   	ret    
c000bb23:	90                   	nop

c000bb24 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb24:	55                   	push   ebp
c000bb25:	57                   	push   edi
c000bb26:	56                   	push   esi
c000bb27:	53                   	push   ebx
c000bb28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb2c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb30:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb34:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb38:	85 db                	test   ebx,ebx
c000bb3a:	7e 22                	jle    c000bb5e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb3c:	c1 e3 0c             	shl    ebx,0xc
c000bb3f:	01 f3                	add    ebx,esi
c000bb41:	56                   	push   esi
c000bb42:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb48:	55                   	push   ebp
c000bb49:	e8 58 fe ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000bb4e:	5a                   	pop    edx
c000bb4f:	59                   	pop    ecx
c000bb50:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb52:	21 f9                	and    ecx,edi
c000bb54:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bb58:	39 f3                	cmp    ebx,esi
c000bb5a:	89 08                	mov    DWORD PTR [eax],ecx
c000bb5c:	75 e3                	jne    c000bb41 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bb5e:	5b                   	pop    ebx
c000bb5f:	5e                   	pop    esi
c000bb60:	5f                   	pop    edi
c000bb61:	5d                   	pop    ebp
c000bb62:	c3                   	ret    
c000bb63:	90                   	nop

c000bb64 <VAS::setToWriteCombining(unsigned long, int)>:
c000bb64:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000bb69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb6f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb76:	75 01                	jne    c000bb79 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb78:	c3                   	ret    
c000bb79:	68 80 00 00 00       	push   0x80
c000bb7e:	6a ff                	push   0xffffffff
c000bb80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8c:	e8 93 ff ff ff       	call   c000bb24 <VAS::reflagRange(unsigned long, int, int, int)>
c000bb91:	83 c4 14             	add    esp,0x14
c000bb94:	c3                   	ret    
c000bb95:	90                   	nop

c000bb96 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bb96:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bb9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb9f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bba6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bba9:	19 c0                	sbb    eax,eax
c000bbab:	83 ca 03             	or     edx,0x3
c000bbae:	83 e0 fc             	and    eax,0xfffffffc
c000bbb1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bbb8:	0f 20 d8             	mov    eax,cr3
c000bbbb:	0f 22 d8             	mov    cr3,eax
c000bbbe:	c3                   	ret    
c000bbbf:	90                   	nop

c000bbc0 <VAS::~VAS()>:
c000bbc0:	83 ec 2c             	sub    esp,0x2c
c000bbc3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bbcb:	fa                   	cli    
c000bbcc:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bbd1:	40                   	inc    eax
c000bbd2:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000bbd7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bbdc:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbe1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bbe7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbeb:	6a 01                	push   0x1
c000bbed:	50                   	push   eax
c000bbee:	e8 a3 ff ff ff       	call   c000bb96 <VAS::mapOtherVASIn(bool, VAS*)>
c000bbf3:	83 c4 0c             	add    esp,0xc
c000bbf6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bbfe:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc06:	0f 8f d4 00 00 00    	jg     c000bce0 <VAS::~VAS()+0x120>
c000bc0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc17:	c1 e2 02             	shl    edx,0x2
c000bc1a:	01 d0                	add    eax,edx
c000bc1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc26:	83 e0 01             	and    eax,0x1
c000bc29:	0f 84 a8 00 00 00    	je     c000bcd7 <VAS::~VAS()+0x117>
c000bc2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc37:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc3f:	7f 72                	jg     c000bcb3 <VAS::~VAS()+0xf3>
c000bc41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc45:	c1 e0 0a             	shl    eax,0xa
c000bc48:	89 c2                	mov    edx,eax
c000bc4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc4e:	01 d0                	add    eax,edx
c000bc50:	c1 e0 0c             	shl    eax,0xc
c000bc53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc57:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc5e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc61:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc6b:	6a 01                	push   0x1
c000bc6d:	50                   	push   eax
c000bc6e:	e8 07 fd ff ff       	call   c000b97a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc73:	83 c4 0c             	add    esp,0xc
c000bc76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc88:	25 01 04 00 00       	and    eax,0x401
c000bc8d:	3d 01 04 00 00       	cmp    eax,0x401
c000bc92:	75 19                	jne    c000bcad <VAS::~VAS()+0xed>
c000bc94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc98:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc9d:	83 ec 0c             	sub    esp,0xc
c000bca0:	50                   	push   eax
c000bca1:	e8 b4 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcad:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcb1:	eb 84                	jmp    c000bc37 <VAS::~VAS()+0x77>
c000bcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb7:	25 00 04 00 00       	and    eax,0x400
c000bcbc:	74 19                	je     c000bcd7 <VAS::~VAS()+0x117>
c000bcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcc7:	83 ec 0c             	sub    esp,0xc
c000bcca:	50                   	push   eax
c000bccb:	e8 8a e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcd7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bcdb:	e9 1e ff ff ff       	jmp    c000bbfe <VAS::~VAS()+0x3e>
c000bce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bce4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bce7:	83 ec 0c             	sub    esp,0xc
c000bcea:	50                   	push   eax
c000bceb:	e8 d5 fc ff ff       	call   c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000bcf0:	83 c4 10             	add    esp,0x10
c000bcf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcf7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bcfa:	83 ec 0c             	sub    esp,0xc
c000bcfd:	50                   	push   eax
c000bcfe:	e8 57 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bd03:	83 c4 10             	add    esp,0x10
c000bd06:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd0e:	c1 e0 02             	shl    eax,0x2
c000bd11:	83 ec 08             	sub    esp,0x8
c000bd14:	50                   	push   eax
c000bd15:	68 04 2c 02 c0       	push   0xc0022c04
c000bd1a:	e8 48 0d 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000bd1f:	83 c4 10             	add    esp,0x10
c000bd22:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bd27:	48                   	dec    eax
c000bd28:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000bd2d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bd32:	85 c0                	test   eax,eax
c000bd34:	75 01                	jne    c000bd37 <VAS::~VAS()+0x177>
c000bd36:	fb                   	sti    
c000bd37:	90                   	nop
c000bd38:	83 c4 2c             	add    esp,0x2c
c000bd3b:	c3                   	ret    

c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd3c:	55                   	push   ebp
c000bd3d:	57                   	push   edi
c000bd3e:	56                   	push   esi
c000bd3f:	53                   	push   ebx
c000bd40:	83 ec 1c             	sub    esp,0x1c
c000bd43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd47:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd4b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd51:	77 08                	ja     c000bd5b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bd53:	0f 20 d8             	mov    eax,cr3
c000bd56:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bd59:	75 47                	jne    c000bda2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bd5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd5f:	09 d8                	or     eax,ebx
c000bd61:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd66:	75 57                	jne    c000bdbf <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bd68:	89 de                	mov    esi,ebx
c000bd6a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd6d:	c1 ee 16             	shr    esi,0x16
c000bd70:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd77:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd7b:	74 54                	je     c000bdd1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd81:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd87:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd8b:	c1 e6 0c             	shl    esi,0xc
c000bd8e:	c1 eb 0a             	shr    ebx,0xa
c000bd91:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bd97:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bd9a:	83 c4 1c             	add    esp,0x1c
c000bd9d:	5b                   	pop    ebx
c000bd9e:	5e                   	pop    esi
c000bd9f:	5f                   	pop    edi
c000bda0:	5d                   	pop    ebp
c000bda1:	c3                   	ret    
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	68 24 2c 02 c0       	push   0xc0022c24
c000bdaa:	e8 b8 0c 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000bdaf:	83 c4 10             	add    esp,0x10
c000bdb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdb6:	09 d8                	or     eax,ebx
c000bdb8:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdbd:	74 a9                	je     c000bd68 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdbf:	83 ec 0c             	sub    esp,0xc
c000bdc2:	68 8c 2c 02 c0       	push   0xc0022c8c
c000bdc7:	e8 5d 85 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000bdcc:	83 c4 10             	add    esp,0x10
c000bdcf:	eb 97                	jmp    c000bd68 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdd5:	e8 10 e0 ff ff       	call   c0009dea <Phys::allocatePage()>
c000bdda:	83 ec 0c             	sub    esp,0xc
c000bddd:	89 c5                	mov    ebp,eax
c000bddf:	8b 0d 30 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026530
c000bde5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bde9:	6a 01                	push   0x1
c000bdeb:	e8 a5 f8 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c000bdf0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bdf7:	6a 01                	push   0x1
c000bdf9:	50                   	push   eax
c000bdfa:	55                   	push   ebp
c000bdfb:	81 cd 07 04 00 00    	or     ebp,0x407
c000be01:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be05:	51                   	push   ecx
c000be06:	e8 27 02 00 00       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be0b:	83 c4 1c             	add    esp,0x1c
c000be0e:	68 00 10 00 00       	push   0x1000
c000be13:	6a 00                	push   0x0
c000be15:	50                   	push   eax
c000be16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be1a:	e8 65 48 ff ff       	call   c0000684 <memset>
c000be1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be26:	e8 9a fb ff ff       	call   c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000be2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be2f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be38:	e9 40 ff ff ff       	jmp    c000bd7d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be3d:	90                   	nop

c000be3e <VAS::allocatePages(int, int)>:
c000be3e:	55                   	push   ebp
c000be3f:	57                   	push   edi
c000be40:	56                   	push   esi
c000be41:	53                   	push   ebx
c000be42:	83 ec 1c             	sub    esp,0x1c
c000be45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be49:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000be4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be54:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be5a:	83 e0 01             	and    eax,0x1
c000be5d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000be61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000be65:	0f 85 cc 00 00 00    	jne    c000bf37 <VAS::allocatePages(int, int)+0xf9>
c000be6b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be72:	85 c0                	test   eax,eax
c000be74:	0f 84 a1 00 00 00    	je     c000bf1b <VAS::allocatePages(int, int)+0xdd>
c000be7a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be82:	c1 e6 0c             	shl    esi,0xc
c000be85:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be89:	85 c0                	test   eax,eax
c000be8b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be8e:	7e 33                	jle    c000bec3 <VAS::allocatePages(int, int)+0x85>
c000be90:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be98:	81 cd 00 04 00 00    	or     ebp,0x400
c000be9e:	e8 47 df ff ff       	call   c0009dea <Phys::allocatePage()>
c000bea3:	55                   	push   ebp
c000bea4:	53                   	push   ebx
c000bea5:	50                   	push   eax
c000bea6:	57                   	push   edi
c000bea7:	e8 90 fe ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c000beac:	83 c4 10             	add    esp,0x10
c000beaf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000beb4:	74 03                	je     c000beb9 <VAS::allocatePages(int, int)+0x7b>
c000beb6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000beb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bebf:	39 de                	cmp    esi,ebx
c000bec1:	75 db                	jne    c000be9e <VAS::allocatePages(int, int)+0x60>
c000bec3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bec8:	75 12                	jne    c000bedc <VAS::allocatePages(int, int)+0x9e>
c000beca:	0f 20 d8             	mov    eax,cr3
c000becd:	0f 22 d8             	mov    cr3,eax
c000bed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bed4:	83 c4 1c             	add    esp,0x1c
c000bed7:	5b                   	pop    ebx
c000bed8:	5e                   	pop    esi
c000bed9:	5f                   	pop    edi
c000beda:	5d                   	pop    ebp
c000bedb:	c3                   	ret    
c000bedc:	c1 ee 0a             	shr    esi,0xa
c000bedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bee3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bee9:	c1 eb 0a             	shr    ebx,0xa
c000beec:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bef2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bef8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000befe:	39 c3                	cmp    ebx,eax
c000bf00:	77 ce                	ja     c000bed0 <VAS::allocatePages(int, int)+0x92>
c000bf02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf05:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf0b:	39 d8                	cmp    eax,ebx
c000bf0d:	73 f3                	jae    c000bf02 <VAS::allocatePages(int, int)+0xc4>
c000bf0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf13:	83 c4 1c             	add    esp,0x1c
c000bf16:	5b                   	pop    ebx
c000bf17:	5e                   	pop    esi
c000bf18:	5f                   	pop    edi
c000bf19:	5d                   	pop    ebp
c000bf1a:	c3                   	ret    
c000bf1b:	83 ec 0c             	sub    esp,0xc
c000bf1e:	68 b0 2c 02 c0       	push   0xc0022cb0
c000bf23:	e8 01 84 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000bf28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf2f:	83 c4 10             	add    esp,0x10
c000bf32:	e9 43 ff ff ff       	jmp    c000be7a <VAS::allocatePages(int, int)+0x3c>
c000bf37:	83 ec 0c             	sub    esp,0xc
c000bf3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf3e:	e8 52 f7 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c000bf43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf47:	83 c4 10             	add    esp,0x10
c000bf4a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf4f:	0f 87 9b 00 00 00    	ja     c000bff0 <VAS::allocatePages(int, int)+0x1b2>
c000bf55:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bf59:	85 d2                	test   edx,edx
c000bf5b:	7e 3c                	jle    c000bf99 <VAS::allocatePages(int, int)+0x15b>
c000bf5d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bf61:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf69:	c1 e5 0c             	shl    ebp,0xc
c000bf6c:	81 ce 00 04 00 00    	or     esi,0x400
c000bf72:	01 dd                	add    ebp,ebx
c000bf74:	e8 71 de ff ff       	call   c0009dea <Phys::allocatePage()>
c000bf79:	56                   	push   esi
c000bf7a:	53                   	push   ebx
c000bf7b:	50                   	push   eax
c000bf7c:	57                   	push   edi
c000bf7d:	e8 ba fd ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf82:	83 c4 10             	add    esp,0x10
c000bf85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf8a:	74 03                	je     c000bf8f <VAS::allocatePages(int, int)+0x151>
c000bf8c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf8f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf95:	39 dd                	cmp    ebp,ebx
c000bf97:	75 db                	jne    c000bf74 <VAS::allocatePages(int, int)+0x136>
c000bf99:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf9e:	0f 84 26 ff ff ff    	je     c000beca <VAS::allocatePages(int, int)+0x8c>
c000bfa4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfa8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfac:	89 d3                	mov    ebx,edx
c000bfae:	c1 e0 0c             	shl    eax,0xc
c000bfb1:	c1 eb 0a             	shr    ebx,0xa
c000bfb4:	01 d0                	add    eax,edx
c000bfb6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bfbc:	c1 e8 0a             	shr    eax,0xa
c000bfbf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bfc5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfca:	2d 00 00 40 00       	sub    eax,0x400000
c000bfcf:	39 c3                	cmp    ebx,eax
c000bfd1:	0f 87 f9 fe ff ff    	ja     c000bed0 <VAS::allocatePages(int, int)+0x92>
c000bfd7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfda:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfe0:	39 d8                	cmp    eax,ebx
c000bfe2:	73 f3                	jae    c000bfd7 <VAS::allocatePages(int, int)+0x199>
c000bfe4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfe8:	83 c4 1c             	add    esp,0x1c
c000bfeb:	5b                   	pop    ebx
c000bfec:	5e                   	pop    esi
c000bfed:	5f                   	pop    edi
c000bfee:	5d                   	pop    ebp
c000bfef:	c3                   	ret    
c000bff0:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000bff5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bffb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c002:	0f 84 4d ff ff ff    	je     c000bf55 <VAS::allocatePages(int, int)+0x117>
c000c008:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c010:	e9 40 ff ff ff       	jmp    c000bf55 <VAS::allocatePages(int, int)+0x117>
c000c015:	90                   	nop

c000c016 <VAS::setCPUSpecific(unsigned long)>:
c000c016:	83 ec 0c             	sub    esp,0xc
c000c019:	6a 05                	push   0x5
c000c01b:	68 00 00 40 c2       	push   0xc2400000
c000c020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c028:	e8 0f fd ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c02d:	83 c4 1c             	add    esp,0x1c
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c032:	55                   	push   ebp
c000c033:	57                   	push   edi
c000c034:	56                   	push   esi
c000c035:	53                   	push   ebx
c000c036:	83 ec 1c             	sub    esp,0x1c
c000c039:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c03e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c042:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c048:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c04c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c052:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c056:	83 e0 01             	and    eax,0x1
c000c059:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c05d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c061:	85 c0                	test   eax,eax
c000c063:	7e 39                	jle    c000c09e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c065:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c069:	89 f3                	mov    ebx,esi
c000c06b:	c1 e0 0c             	shl    eax,0xc
c000c06e:	01 f0                	add    eax,esi
c000c070:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c074:	55                   	push   ebp
c000c075:	53                   	push   ebx
c000c076:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c07a:	29 f0                	sub    eax,esi
c000c07c:	01 d8                	add    eax,ebx
c000c07e:	50                   	push   eax
c000c07f:	57                   	push   edi
c000c080:	e8 b7 fc ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c08d:	74 03                	je     c000c092 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c08f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c092:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c098:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c09c:	75 d6                	jne    c000c074 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c09e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0a3:	75 10                	jne    c000c0b5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c0a5:	0f 20 d8             	mov    eax,cr3
c000c0a8:	0f 22 d8             	mov    cr3,eax
c000c0ab:	83 c4 1c             	add    esp,0x1c
c000c0ae:	89 f0                	mov    eax,esi
c000c0b0:	5b                   	pop    ebx
c000c0b1:	5e                   	pop    esi
c000c0b2:	5f                   	pop    edi
c000c0b3:	5d                   	pop    ebp
c000c0b4:	c3                   	ret    
c000c0b5:	89 f3                	mov    ebx,esi
c000c0b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0bb:	c1 eb 0a             	shr    ebx,0xa
c000c0be:	c1 e0 0c             	shl    eax,0xc
c000c0c1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c0c7:	01 f0                	add    eax,esi
c000c0c9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c0cf:	c1 e8 0a             	shr    eax,0xa
c000c0d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0d7:	2d 00 00 40 00       	sub    eax,0x400000
c000c0dc:	39 c3                	cmp    ebx,eax
c000c0de:	77 cb                	ja     c000c0ab <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c0e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0e9:	39 d8                	cmp    eax,ebx
c000c0eb:	73 f3                	jae    c000c0e0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c0ed:	83 c4 1c             	add    esp,0x1c
c000c0f0:	89 f0                	mov    eax,esi
c000c0f2:	5b                   	pop    ebx
c000c0f3:	5e                   	pop    esi
c000c0f4:	5f                   	pop    edi
c000c0f5:	5d                   	pop    ebp
c000c0f6:	c3                   	ret    
c000c0f7:	90                   	nop

c000c0f8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c0f8:	55                   	push   ebp
c000c0f9:	57                   	push   edi
c000c0fa:	56                   	push   esi
c000c0fb:	53                   	push   ebx
c000c0fc:	83 ec 1c             	sub    esp,0x1c
c000c0ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c103:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c107:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c10b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c10f:	a9 ff 0f 00 00       	test   eax,0xfff
c000c114:	75 4a                	jne    c000c160 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c116:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c11a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c11d:	c1 eb 16             	shr    ebx,0x16
c000c120:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c127:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c12b:	74 4d                	je     c000c17a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c12d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c131:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c135:	c1 e8 0a             	shr    eax,0xa
c000c138:	80 fa 01             	cmp    dl,0x1
c000c13b:	19 d2                	sbb    edx,edx
c000c13d:	c1 e3 0c             	shl    ebx,0xc
c000c140:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c144:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c14a:	25 fc 0f 00 00       	and    eax,0xffc
c000c14f:	01 d8                	add    eax,ebx
c000c151:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c158:	83 c4 1c             	add    esp,0x1c
c000c15b:	5b                   	pop    ebx
c000c15c:	5e                   	pop    esi
c000c15d:	5f                   	pop    edi
c000c15e:	5d                   	pop    ebp
c000c15f:	c3                   	ret    
c000c160:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c164:	83 ec 0c             	sub    esp,0xc
c000c167:	68 dc 2c 02 c0       	push   0xc0022cdc
c000c16c:	e8 b8 81 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000c171:	83 c4 10             	add    esp,0x10
c000c174:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c178:	eb 9c                	jmp    c000c116 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c17a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c17e:	e8 67 dc ff ff       	call   c0009dea <Phys::allocatePage()>
c000c183:	83 ec 0c             	sub    esp,0xc
c000c186:	89 c5                	mov    ebp,eax
c000c188:	8b 0d 30 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026530
c000c18e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c192:	6a 01                	push   0x1
c000c194:	e8 fc f4 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c000c199:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c1a0:	6a 01                	push   0x1
c000c1a2:	50                   	push   eax
c000c1a3:	55                   	push   ebp
c000c1a4:	81 cd 07 04 00 00    	or     ebp,0x407
c000c1aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c1ae:	51                   	push   ecx
c000c1af:	e8 7e fe ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1b4:	83 c4 1c             	add    esp,0x1c
c000c1b7:	68 00 10 00 00       	push   0x1000
c000c1bc:	6a 00                	push   0x0
c000c1be:	50                   	push   eax
c000c1bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1c3:	e8 bc 44 ff ff       	call   c0000684 <memset>
c000c1c8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c1cc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c1cf:	e8 f1 f7 ff ff       	call   c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c1dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1e1:	e9 47 ff ff ff       	jmp    c000c12d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c1e6 <VAS::VAS(bool)>:
c000c1e6:	53                   	push   ebx
c000c1e7:	83 ec 28             	sub    esp,0x28
c000c1ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1ee:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c1fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c201:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c20c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c210:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c213:	e8 d2 db ff ff       	call   c0009dea <Phys::allocatePage()>
c000c218:	89 c2                	mov    edx,eax
c000c21a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c21e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c221:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c000c227:	83 ec 0c             	sub    esp,0xc
c000c22a:	6a 01                	push   0x1
c000c22c:	e8 64 f4 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	89 c2                	mov    edx,eax
c000c236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c23a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c23d:	83 ec 0c             	sub    esp,0xc
c000c240:	6a 03                	push   0x3
c000c242:	6a 01                	push   0x1
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	53                   	push   ebx
c000c247:	e8 e6 fd ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c24c:	83 c4 20             	add    esp,0x20
c000c24f:	89 c2                	mov    edx,eax
c000c251:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c255:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c258:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c260:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c268:	7f 1c                	jg     c000c286 <VAS::VAS(bool)+0xa0>
c000c26a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c26e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c271:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c275:	c1 e2 02             	shl    edx,0x2
c000c278:	01 d0                	add    eax,edx
c000c27a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c280:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c284:	eb da                	jmp    c000c260 <VAS::VAS(bool)+0x7a>
c000c286:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c28e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c296:	7f 7a                	jg     c000c312 <VAS::VAS(bool)+0x12c>
c000c298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c29c:	2d 00 02 00 00       	sub    eax,0x200
c000c2a1:	c1 e0 0c             	shl    eax,0xc
c000c2a4:	83 c8 03             	or     eax,0x3
c000c2a7:	89 c2                	mov    edx,eax
c000c2a9:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c2ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2b4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2ba:	83 e0 10             	and    eax,0x10
c000c2bd:	84 c0                	test   al,al
c000c2bf:	74 07                	je     c000c2c8 <VAS::VAS(bool)+0xe2>
c000c2c1:	b8 00 01 00 00       	mov    eax,0x100
c000c2c6:	eb 05                	jmp    c000c2cd <VAS::VAS(bool)+0xe7>
c000c2c8:	b8 00 00 00 00       	mov    eax,0x0
c000c2cd:	09 d0                	or     eax,edx
c000c2cf:	89 c1                	mov    ecx,eax
c000c2d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2dc:	c1 e2 02             	shl    edx,0x2
c000c2df:	01 d0                	add    eax,edx
c000c2e1:	89 ca                	mov    edx,ecx
c000c2e3:	89 10                	mov    DWORD PTR [eax],edx
c000c2e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2e9:	2d 40 03 00 00       	sub    eax,0x340
c000c2ee:	83 f8 7f             	cmp    eax,0x7f
c000c2f1:	77 16                	ja     c000c309 <VAS::VAS(bool)+0x123>
c000c2f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2fe:	c1 e2 02             	shl    edx,0x2
c000c301:	01 d0                	add    eax,edx
c000c303:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c309:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c30d:	e9 7c ff ff ff       	jmp    c000c28e <VAS::VAS(bool)+0xa8>
c000c312:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c317:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c31d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c323:	83 e0 10             	and    eax,0x10
c000c326:	84 c0                	test   al,al
c000c328:	74 07                	je     c000c331 <VAS::VAS(bool)+0x14b>
c000c32a:	b8 03 41 00 00       	mov    eax,0x4103
c000c32f:	eb 05                	jmp    c000c336 <VAS::VAS(bool)+0x150>
c000c331:	b8 03 40 00 00       	mov    eax,0x4003
c000c336:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c33a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c33d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c343:	89 02                	mov    DWORD PTR [edx],eax
c000c345:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c350:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c356:	83 ec 08             	sub    esp,0x8
c000c359:	50                   	push   eax
c000c35a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c35e:	e8 b3 fc ff ff       	call   c000c016 <VAS::setCPUSpecific(unsigned long)>
c000c363:	83 c4 10             	add    esp,0x10
c000c366:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c36a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c36d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c372:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c378:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c37e:	83 e0 10             	and    eax,0x10
c000c381:	84 c0                	test   al,al
c000c383:	74 07                	je     c000c38c <VAS::VAS(bool)+0x1a6>
c000c385:	b8 00 01 00 00       	mov    eax,0x100
c000c38a:	eb 05                	jmp    c000c391 <VAS::VAS(bool)+0x1ab>
c000c38c:	b8 00 00 00 00       	mov    eax,0x0
c000c391:	09 c2                	or     edx,eax
c000c393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c397:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c39a:	05 fc 0f 00 00       	add    eax,0xffc
c000c39f:	83 ca 03             	or     edx,0x3
c000c3a2:	89 10                	mov    DWORD PTR [eax],edx
c000c3a4:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c3a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3af:	83 ec 0c             	sub    esp,0xc
c000c3b2:	50                   	push   eax
c000c3b3:	e8 f6 1d 00 00       	call   c000e1ae <Device::getName()>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	83 ec 08             	sub    esp,0x8
c000c3be:	68 b0 2d 02 c0       	push   0xc0022db0
c000c3c3:	50                   	push   eax
c000c3c4:	e8 03 44 ff ff       	call   c00007cc <strcmp>
c000c3c9:	83 c4 10             	add    esp,0x10
c000c3cc:	85 c0                	test   eax,eax
c000c3ce:	0f 94 c0             	sete   al
c000c3d1:	84 c0                	test   al,al
c000c3d3:	0f 84 87 00 00 00    	je     c000c460 <VAS::VAS(bool)+0x27a>
c000c3d9:	fa                   	cli    
c000c3da:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c3df:	40                   	inc    eax
c000c3e0:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c3e5:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c3ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3f0:	05 7c 09 00 00       	add    eax,0x97c
c000c3f5:	83 ec 0c             	sub    esp,0xc
c000c3f8:	50                   	push   eax
c000c3f9:	e8 b4 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3fe:	83 c4 10             	add    esp,0x10
c000c401:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c406:	89 c3                	mov    ebx,eax
c000c408:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c40d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c413:	05 7c 09 00 00       	add    eax,0x97c
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	50                   	push   eax
c000c41c:	e8 91 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	83 ec 08             	sub    esp,0x8
c000c427:	50                   	push   eax
c000c428:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c42c:	e8 75 f5 ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000c431:	83 c4 10             	add    esp,0x10
c000c434:	8b 00                	mov    eax,DWORD PTR [eax]
c000c436:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c43b:	6a 11                	push   0x11
c000c43d:	53                   	push   ebx
c000c43e:	50                   	push   eax
c000c43f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c443:	e8 f4 f8 ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c448:	83 c4 10             	add    esp,0x10
c000c44b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c450:	48                   	dec    eax
c000c451:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c456:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c45b:	85 c0                	test   eax,eax
c000c45d:	75 01                	jne    c000c460 <VAS::VAS(bool)+0x27a>
c000c45f:	fb                   	sti    
c000c460:	90                   	nop
c000c461:	83 c4 28             	add    esp,0x28
c000c464:	5b                   	pop    ebx
c000c465:	c3                   	ret    

c000c466 <VAS::evict(unsigned long)>:
c000c466:	55                   	push   ebp
c000c467:	57                   	push   edi
c000c468:	56                   	push   esi
c000c469:	53                   	push   ebx
c000c46a:	83 ec 28             	sub    esp,0x28
c000c46d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c471:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c475:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c479:	68 be 2d 02 c0       	push   0xc0022dbe
c000c47e:	e8 e4 05 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c483:	e8 4e f3 ff ff       	call   c000b7d6 <Virt::allocateSwapfilePage()>
c000c488:	5a                   	pop    edx
c000c489:	89 c7                	mov    edi,eax
c000c48b:	59                   	pop    ecx
c000c48c:	50                   	push   eax
c000c48d:	68 db 2d 02 c0       	push   0xc0022ddb
c000c492:	e8 d0 05 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	8b 1d 0c 58 02 c0    	mov    ebx,DWORD PTR ds:0xc002580c
c000c4a0:	85 db                	test   ebx,ebx
c000c4a2:	7e 3d                	jle    c000c4e1 <VAS::evict(unsigned long)+0x7b>
c000c4a4:	89 ee                	mov    esi,ebp
c000c4a6:	31 db                	xor    ebx,ebx
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	57                   	push   edi
c000c4ac:	e8 13 f3 ff ff       	call   c000b7c4 <Virt::swapIDToSector(unsigned long)>
c000c4b1:	89 34 24             	mov    DWORD PTR [esp],esi
c000c4b4:	01 d8                	add    eax,ebx
c000c4b6:	6a 01                	push   0x1
c000c4b8:	31 d2                	xor    edx,edx
c000c4ba:	43                   	inc    ebx
c000c4bb:	52                   	push   edx
c000c4bc:	81 c6 00 02 00 00    	add    esi,0x200
c000c4c2:	50                   	push   eax
c000c4c3:	0f be 05 18 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025818
c000c4ca:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c000c4d1:	e8 1a 3d 00 00       	call   c00101f0 <LogicalDisk::write(unsigned long long, int, void*)>
c000c4d6:	83 c4 20             	add    esp,0x20
c000c4d9:	39 1d 0c 58 02 c0    	cmp    DWORD PTR ds:0xc002580c,ebx
c000c4df:	7f c7                	jg     c000c4a8 <VAS::evict(unsigned long)+0x42>
c000c4e1:	83 ec 08             	sub    esp,0x8
c000c4e4:	c1 e7 0b             	shl    edi,0xb
c000c4e7:	55                   	push   ebp
c000c4e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4ec:	e8 b5 f4 ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000c4f1:	5a                   	pop    edx
c000c4f2:	89 c6                	mov    esi,eax
c000c4f4:	59                   	pop    ecx
c000c4f5:	ff 30                	push   DWORD PTR [eax]
c000c4f7:	68 eb 2d 02 c0       	push   0xc0022deb
c000c4fc:	e8 66 05 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c501:	8b 16                	mov    edx,DWORD PTR [esi]
c000c503:	89 d3                	mov    ebx,edx
c000c505:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c50b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c511:	09 d7                	or     edi,edx
c000c513:	89 3e                	mov    DWORD PTR [esi],edi
c000c515:	5e                   	pop    esi
c000c516:	58                   	pop    eax
c000c517:	57                   	push   edi
c000c518:	68 04 2e 02 c0       	push   0xc0022e04
c000c51d:	e8 45 05 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c525:	ff 05 28 65 02 c0    	inc    DWORD PTR ds:0xc0026528
c000c52b:	e8 2a d8 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000c530:	0f 20 d8             	mov    eax,cr3
c000c533:	0f 22 d8             	mov    cr3,eax
c000c536:	ff 35 28 65 02 c0    	push   DWORD PTR ds:0xc0026528
c000c53c:	55                   	push   ebp
c000c53d:	53                   	push   ebx
c000c53e:	68 00 2d 02 c0       	push   0xc0022d00
c000c543:	e8 1f 05 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c548:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000c54d:	c7 44 24 50 1d 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022e1d
c000c555:	8d 50 01             	lea    edx,[eax+0x1]
c000c558:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c55c:	89 15 24 65 02 c0    	mov    DWORD PTR ds:0xc0026524,edx
c000c562:	83 c4 3c             	add    esp,0x3c
c000c565:	5b                   	pop    ebx
c000c566:	5e                   	pop    esi
c000c567:	5f                   	pop    edi
c000c568:	5d                   	pop    ebp
c000c569:	e9 f9 04 00 00       	jmp    c000ca67 <Dbg::kprintf(char const*, ...)>

c000c56e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c56e:	55                   	push   ebp
c000c56f:	57                   	push   edi
c000c570:	56                   	push   esi
c000c571:	53                   	push   ebx
c000c572:	83 ec 24             	sub    esp,0x24
c000c575:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c579:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c57d:	68 2e 2e 02 c0       	push   0xc0022e2e
c000c582:	e8 e0 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c587:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c58b:	58                   	pop    eax
c000c58c:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c592:	5a                   	pop    edx
c000c593:	57                   	push   edi
c000c594:	53                   	push   ebx
c000c595:	e8 0c f4 ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000c59a:	59                   	pop    ecx
c000c59b:	5e                   	pop    esi
c000c59c:	89 c6                	mov    esi,eax
c000c59e:	ff 30                	push   DWORD PTR [eax]
c000c5a0:	68 41 2e 02 c0       	push   0xc0022e41
c000c5a5:	e8 bd 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	85 ff                	test   edi,edi
c000c5af:	74 0a                	je     c000c5bb <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c5b1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c5b3:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c5b9:	74 0a                	je     c000c5c5 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c5bb:	83 c4 1c             	add    esp,0x1c
c000c5be:	31 c0                	xor    eax,eax
c000c5c0:	5b                   	pop    ebx
c000c5c1:	5e                   	pop    esi
c000c5c2:	5f                   	pop    edi
c000c5c3:	5d                   	pop    ebp
c000c5c4:	c3                   	ret    
c000c5c5:	83 ec 08             	sub    esp,0x8
c000c5c8:	c1 ed 0b             	shr    ebp,0xb
c000c5cb:	55                   	push   ebp
c000c5cc:	68 4f 2e 02 c0       	push   0xc0022e4f
c000c5d1:	e8 91 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c5d6:	e8 0f d8 ff ff       	call   c0009dea <Phys::allocatePage()>
c000c5db:	59                   	pop    ecx
c000c5dc:	5a                   	pop    edx
c000c5dd:	50                   	push   eax
c000c5de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5e2:	68 5a 2e 02 c0       	push   0xc0022e5a
c000c5e7:	e8 7b 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c5ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5f0:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5f2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c5f8:	09 d0                	or     eax,edx
c000c5fa:	0d 01 08 00 00       	or     eax,0x801
c000c5ff:	89 06                	mov    DWORD PTR [esi],eax
c000c601:	59                   	pop    ecx
c000c602:	5e                   	pop    esi
c000c603:	50                   	push   eax
c000c604:	68 6f 2e 02 c0       	push   0xc0022e6f
c000c609:	e8 59 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c60e:	0f 20 d8             	mov    eax,cr3
c000c611:	83 c4 0c             	add    esp,0xc
c000c614:	53                   	push   ebx
c000c615:	50                   	push   eax
c000c616:	68 87 2e 02 c0       	push   0xc0022e87
c000c61b:	e8 47 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c620:	c7 04 24 9f 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9f
c000c627:	e8 3b 04 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c62c:	83 c4 10             	add    esp,0x10
c000c62f:	a1 0c 58 02 c0       	mov    eax,ds:0xc002580c
c000c634:	85 c0                	test   eax,eax
c000c636:	7e 3d                	jle    c000c675 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c638:	89 fe                	mov    esi,edi
c000c63a:	31 db                	xor    ebx,ebx
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	55                   	push   ebp
c000c640:	e8 7f f1 ff ff       	call   c000b7c4 <Virt::swapIDToSector(unsigned long)>
c000c645:	89 34 24             	mov    DWORD PTR [esp],esi
c000c648:	01 d8                	add    eax,ebx
c000c64a:	6a 01                	push   0x1
c000c64c:	31 d2                	xor    edx,edx
c000c64e:	43                   	inc    ebx
c000c64f:	52                   	push   edx
c000c650:	81 c6 00 02 00 00    	add    esi,0x200
c000c656:	50                   	push   eax
c000c657:	0f be 05 18 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025818
c000c65e:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c000c665:	e8 1a 3b 00 00       	call   c0010184 <LogicalDisk::read(unsigned long long, int, void*)>
c000c66a:	83 c4 20             	add    esp,0x20
c000c66d:	39 1d 0c 58 02 c0    	cmp    DWORD PTR ds:0xc002580c,ebx
c000c673:	7f c7                	jg     c000c63c <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c675:	a1 28 65 02 c0       	mov    eax,ds:0xc0026528
c000c67a:	48                   	dec    eax
c000c67b:	52                   	push   edx
c000c67c:	a3 28 65 02 c0       	mov    ds:0xc0026528,eax
c000c681:	50                   	push   eax
c000c682:	57                   	push   edi
c000c683:	68 af 2e 02 c0       	push   0xc0022eaf
c000c688:	e8 da 03 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c68d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c690:	e8 11 f1 ff ff       	call   c000b7a6 <Virt::freeSwapfilePage(unsigned long)>
c000c695:	c7 04 24 c4 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec4
c000c69c:	e8 c6 03 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c6a1:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c6a6:	83 c4 10             	add    esp,0x10
c000c6a9:	48                   	dec    eax
c000c6aa:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c6af:	85 c0                	test   eax,eax
c000c6b1:	75 01                	jne    c000c6b4 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c6b3:	fb                   	sti    
c000c6b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6b8:	25 ff 0f 00 00       	and    eax,0xfff
c000c6bd:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c6c2:	77 20                	ja     c000c6e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c6c4:	0f 20 d8             	mov    eax,cr3
c000c6c7:	0f 22 d8             	mov    cr3,eax
c000c6ca:	83 ec 0c             	sub    esp,0xc
c000c6cd:	68 ea 2e 02 c0       	push   0xc0022eea
c000c6d2:	e8 90 03 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c6d7:	83 c4 10             	add    esp,0x10
c000c6da:	b0 01                	mov    al,0x1
c000c6dc:	83 c4 1c             	add    esp,0x1c
c000c6df:	5b                   	pop    ebx
c000c6e0:	5e                   	pop    esi
c000c6e1:	5f                   	pop    edi
c000c6e2:	5d                   	pop    ebp
c000c6e3:	c3                   	ret    
c000c6e4:	83 ec 0c             	sub    esp,0xc
c000c6e7:	68 da 2e 02 c0       	push   0xc0022eda
c000c6ec:	e8 76 03 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c6f1:	83 c4 10             	add    esp,0x10
c000c6f4:	eb ce                	jmp    c000c6c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c6f6 <VAS::scanForEviction()>:
c000c6f6:	57                   	push   edi
c000c6f7:	31 ff                	xor    edi,edi
c000c6f9:	56                   	push   esi
c000c6fa:	53                   	push   ebx
c000c6fb:	83 ec 10             	sub    esp,0x10
c000c6fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c702:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c705:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c70b:	75 0e                	jne    c000c71b <VAS::scanForEviction()+0x25>
c000c70d:	89 da                	mov    edx,ebx
c000c70f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c712:	c1 ea 16             	shr    edx,0x16
c000c715:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c719:	74 4e                	je     c000c769 <VAS::scanForEviction()+0x73>
c000c71b:	53                   	push   ebx
c000c71c:	56                   	push   esi
c000c71d:	e8 84 f2 ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000c722:	5a                   	pop    edx
c000c723:	8b 10                	mov    edx,DWORD PTR [eax]
c000c725:	59                   	pop    ecx
c000c726:	89 d1                	mov    ecx,edx
c000c728:	81 e1 01 08 00 00    	and    ecx,0x801
c000c72e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c734:	74 3e                	je     c000c774 <VAS::scanForEviction()+0x7e>
c000c736:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c73c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c742:	76 2b                	jbe    c000c76f <VAS::scanForEviction()+0x79>
c000c744:	47                   	inc    edi
c000c745:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c74c:	83 ff 03             	cmp    edi,0x3
c000c74f:	74 32                	je     c000c783 <VAS::scanForEviction()+0x8d>
c000c751:	31 db                	xor    ebx,ebx
c000c753:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c759:	75 c0                	jne    c000c71b <VAS::scanForEviction()+0x25>
c000c75b:	89 da                	mov    edx,ebx
c000c75d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c760:	c1 ea 16             	shr    edx,0x16
c000c763:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c767:	75 b2                	jne    c000c71b <VAS::scanForEviction()+0x25>
c000c769:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c76f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c772:	eb 91                	jmp    c000c705 <VAS::scanForEviction()+0xf>
c000c774:	f6 c2 20             	test   dl,0x20
c000c777:	74 13                	je     c000c78c <VAS::scanForEviction()+0x96>
c000c779:	83 e2 df             	and    edx,0xffffffdf
c000c77c:	89 10                	mov    DWORD PTR [eax],edx
c000c77e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c781:	eb b3                	jmp    c000c736 <VAS::scanForEviction()+0x40>
c000c783:	83 c4 10             	add    esp,0x10
c000c786:	31 c0                	xor    eax,eax
c000c788:	5b                   	pop    ebx
c000c789:	5e                   	pop    esi
c000c78a:	5f                   	pop    edi
c000c78b:	c3                   	ret    
c000c78c:	83 ec 08             	sub    esp,0x8
c000c78f:	89 d0                	mov    eax,edx
c000c791:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c796:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c79a:	53                   	push   ebx
c000c79b:	68 f8 2e 02 c0       	push   0xc0022ef8
c000c7a0:	e8 c2 02 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c7a5:	58                   	pop    eax
c000c7a6:	5a                   	pop    edx
c000c7a7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7aa:	56                   	push   esi
c000c7ab:	e8 b6 fc ff ff       	call   c000c466 <VAS::evict(unsigned long)>
c000c7b0:	59                   	pop    ecx
c000c7b1:	5b                   	pop    ebx
c000c7b2:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7b5:	68 0c 2f 02 c0       	push   0xc0022f0c
c000c7ba:	e8 a8 02 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c7bf:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7cd:	83 c4 10             	add    esp,0x10
c000c7d0:	5b                   	pop    ebx
c000c7d1:	5e                   	pop    esi
c000c7d2:	5f                   	pop    edi
c000c7d3:	c3                   	ret    

c000c7d4 <mapVASFirstTime>:
c000c7d4:	55                   	push   ebp
c000c7d5:	57                   	push   edi
c000c7d6:	56                   	push   esi
c000c7d7:	53                   	push   ebx
c000c7d8:	83 ec 0c             	sub    esp,0xc
c000c7db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7e0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7e3:	4a                   	dec    edx
c000c7e4:	0f 84 fe 00 00 00    	je     c000c8e8 <mapVASFirstTime+0x114>
c000c7ea:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7ed:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7f0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7f5:	c1 e5 15             	shl    ebp,0x15
c000c7f8:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c7fd:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c803:	29 eb                	sub    ebx,ebp
c000c805:	29 ef                	sub    edi,ebp
c000c807:	83 ec 08             	sub    esp,0x8
c000c80a:	53                   	push   ebx
c000c80b:	68 38 2f 02 c0       	push   0xc0022f38
c000c810:	e8 52 02 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c815:	e8 d0 d5 ff ff       	call   c0009dea <Phys::allocatePage()>
c000c81a:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c821:	6a 01                	push   0x1
c000c823:	53                   	push   ebx
c000c824:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c82a:	50                   	push   eax
c000c82b:	56                   	push   esi
c000c82c:	e8 01 f8 ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c831:	83 c4 20             	add    esp,0x20
c000c834:	39 fb                	cmp    ebx,edi
c000c836:	75 cf                	jne    c000c807 <mapVASFirstTime+0x33>
c000c838:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c83d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c842:	29 eb                	sub    ebx,ebp
c000c844:	29 ef                	sub    edi,ebp
c000c846:	83 ec 08             	sub    esp,0x8
c000c849:	53                   	push   ebx
c000c84a:	68 54 2f 02 c0       	push   0xc0022f54
c000c84f:	e8 13 02 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c854:	58                   	pop    eax
c000c855:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c859:	5a                   	pop    edx
c000c85a:	19 c0                	sbb    eax,eax
c000c85c:	83 e0 04             	and    eax,0x4
c000c85f:	05 03 04 00 00       	add    eax,0x403
c000c864:	50                   	push   eax
c000c865:	68 79 2e 02 c0       	push   0xc0022e79
c000c86a:	e8 f8 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c86f:	e8 76 d5 ff ff       	call   c0009dea <Phys::allocatePage()>
c000c874:	59                   	pop    ecx
c000c875:	89 c5                	mov    ebp,eax
c000c877:	58                   	pop    eax
c000c878:	55                   	push   ebp
c000c879:	68 68 2f 02 c0       	push   0xc0022f68
c000c87e:	e8 e4 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c883:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c887:	19 d2                	sbb    edx,edx
c000c889:	83 e2 04             	and    edx,0x4
c000c88c:	81 c2 03 04 00 00    	add    edx,0x403
c000c892:	89 14 24             	mov    DWORD PTR [esp],edx
c000c895:	6a 01                	push   0x1
c000c897:	53                   	push   ebx
c000c898:	55                   	push   ebp
c000c899:	56                   	push   esi
c000c89a:	e8 93 f7 ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c89f:	83 c4 18             	add    esp,0x18
c000c8a2:	53                   	push   ebx
c000c8a3:	56                   	push   esi
c000c8a4:	e8 fd f0 ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c000c8a9:	5a                   	pop    edx
c000c8aa:	59                   	pop    ecx
c000c8ab:	ff 30                	push   DWORD PTR [eax]
c000c8ad:	68 84 2f 02 c0       	push   0xc0022f84
c000c8b2:	e8 b0 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c8b7:	0f 20 d8             	mov    eax,cr3
c000c8ba:	83 c4 0c             	add    esp,0xc
c000c8bd:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8c3:	56                   	push   esi
c000c8c4:	50                   	push   eax
c000c8c5:	68 87 2e 02 c0       	push   0xc0022e87
c000c8ca:	e8 98 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	39 df                	cmp    edi,ebx
c000c8d4:	0f 85 6c ff ff ff    	jne    c000c846 <mapVASFirstTime+0x72>
c000c8da:	0f 20 d8             	mov    eax,cr3
c000c8dd:	0f 22 d8             	mov    cr3,eax
c000c8e0:	83 c4 0c             	add    esp,0xc
c000c8e3:	5b                   	pop    ebx
c000c8e4:	5e                   	pop    esi
c000c8e5:	5f                   	pop    edi
c000c8e6:	5d                   	pop    ebp
c000c8e7:	c3                   	ret    
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	68 1f 2f 02 c0       	push   0xc0022f1f
c000c8f0:	e8 72 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	83 c4 0c             	add    esp,0xc
c000c8fb:	5b                   	pop    ebx
c000c8fc:	5e                   	pop    esi
c000c8fd:	5f                   	pop    edi
c000c8fe:	5d                   	pop    ebp
c000c8ff:	c3                   	ret    

c000c900 <__cxa_atexit>:
c000c900:	31 c0                	xor    eax,eax
c000c902:	c3                   	ret    

c000c903 <__cxa_finalize>:
c000c903:	c3                   	ret    

c000c904 <__stack_chk_fail>:
c000c904:	55                   	push   ebp
c000c905:	89 e5                	mov    ebp,esp
c000c907:	83 ec 14             	sub    esp,0x14
c000c90a:	68 8f 2f 02 c0       	push   0xc0022f8f
c000c90f:	e8 53 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c914:	58                   	pop    eax
c000c915:	5a                   	pop    edx
c000c916:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c919:	68 df 2f 02 c0       	push   0xc0022fdf
c000c91e:	e8 44 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c923:	59                   	pop    ecx
c000c924:	58                   	pop    eax
c000c925:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c92b:	68 df 2f 02 c0       	push   0xc0022fdf
c000c930:	e8 32 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c935:	5a                   	pop    edx
c000c936:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c939:	59                   	pop    ecx
c000c93a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c93c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c93f:	68 df 2f 02 c0       	push   0xc0022fdf
c000c944:	e8 1e 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c949:	5a                   	pop    edx
c000c94a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c94d:	59                   	pop    ecx
c000c94e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c950:	8b 00                	mov    eax,DWORD PTR [eax]
c000c952:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c955:	68 df 2f 02 c0       	push   0xc0022fdf
c000c95a:	e8 08 01 00 00       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000c95f:	c7 04 24 e7 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fe7
c000c966:	e8 be 79 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000c96b:	83 c4 10             	add    esp,0x10
c000c96e:	c9                   	leave  
c000c96f:	c3                   	ret    

c000c970 <__cxa_pure_virtual>:
c000c970:	83 ec 18             	sub    esp,0x18
c000c973:	68 ff 2f 02 c0       	push   0xc0022fff
c000c978:	e8 ac 79 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000c97d:	83 c4 1c             	add    esp,0x1c
c000c980:	c3                   	ret    

c000c981 <operator new[](unsigned long)>:
c000c981:	e9 3d d0 ff ff       	jmp    c00099c3 <malloc>

c000c986 <operator delete(void*, unsigned long)>:
c000c986:	e9 58 d0 ff ff       	jmp    c00099e3 <rfree>

c000c98b <operator delete[](void*)>:
c000c98b:	e9 53 d0 ff ff       	jmp    c00099e3 <rfree>

c000c990 <operator delete[](void*, unsigned long)>:
c000c990:	e9 4e d0 ff ff       	jmp    c00099e3 <rfree>

c000c995 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c995:	55                   	push   ebp
c000c996:	b9 11 00 00 00       	mov    ecx,0x11
c000c99b:	57                   	push   edi
c000c99c:	56                   	push   esi
c000c99d:	be 1a 2a 02 c0       	mov    esi,0xc0022a1a
c000c9a2:	53                   	push   ebx
c000c9a3:	83 ec 20             	sub    esp,0x20
c000c9a6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9aa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9ae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c9b2:	fc                   	cld    
c000c9b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9b5:	89 ee                	mov    esi,ebp
c000c9b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c9bb:	eb 02                	jmp    c000c9bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c9bd:	89 c6                	mov    esi,eax
c000c9bf:	31 d2                	xor    edx,edx
c000c9c1:	41                   	inc    ecx
c000c9c2:	89 f0                	mov    eax,esi
c000c9c4:	f7 f3                	div    ebx
c000c9c6:	39 de                	cmp    esi,ebx
c000c9c8:	73 f3                	jae    c000c9bd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c9ca:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c9cd:	eb 02                	jmp    c000c9d1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c9cf:	89 c5                	mov    ebp,eax
c000c9d1:	31 d2                	xor    edx,edx
c000c9d3:	49                   	dec    ecx
c000c9d4:	89 e8                	mov    eax,ebp
c000c9d6:	f7 f3                	div    ebx
c000c9d8:	39 dd                	cmp    ebp,ebx
c000c9da:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c9de:	88 11                	mov    BYTE PTR [ecx],dl
c000c9e0:	73 ed                	jae    c000c9cf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9e6:	83 c4 20             	add    esp,0x20
c000c9e9:	5b                   	pop    ebx
c000c9ea:	5e                   	pop    esi
c000c9eb:	5f                   	pop    edi
c000c9ec:	5d                   	pop    ebp
c000c9ed:	c3                   	ret    

c000c9ee <Dbg::logc(char)>:
c000c9ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9f2:	f6 05 e0 63 02 c0 10 	test   BYTE PTR ds:0xc00263e0,0x10
c000c9f9:	75 12                	jne    c000ca0d <Dbg::logc(char)+0x1f>
c000c9fb:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca00:	ec                   	in     al,dx
c000ca01:	a8 20                	test   al,0x20
c000ca03:	74 fb                	je     c000ca00 <Dbg::logc(char)+0x12>
c000ca05:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca0a:	88 c8                	mov    al,cl
c000ca0c:	ee                   	out    dx,al
c000ca0d:	c3                   	ret    

c000ca0e <Dbg::logs(char*)>:
c000ca0e:	53                   	push   ebx
c000ca0f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca13:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca16:	84 c0                	test   al,al
c000ca18:	74 0f                	je     c000ca29 <Dbg::logs(char*)+0x1b>
c000ca1a:	50                   	push   eax
c000ca1b:	43                   	inc    ebx
c000ca1c:	e8 cd ff ff ff       	call   c000c9ee <Dbg::logc(char)>
c000ca21:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca24:	5a                   	pop    edx
c000ca25:	84 c0                	test   al,al
c000ca27:	75 f1                	jne    c000ca1a <Dbg::logs(char*)+0xc>
c000ca29:	5b                   	pop    ebx
c000ca2a:	c3                   	ret    

c000ca2b <Dbg::logWriteInt(unsigned int)>:
c000ca2b:	83 ec 10             	sub    esp,0x10
c000ca2e:	6a 0a                	push   0xa
c000ca30:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca34:	50                   	push   eax
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	e8 57 ff ff ff       	call   c000c995 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca3e:	50                   	push   eax
c000ca3f:	e8 ca ff ff ff       	call   c000ca0e <Dbg::logs(char*)>
c000ca44:	83 c4 20             	add    esp,0x20
c000ca47:	c3                   	ret    

c000ca48 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca48:	83 ec 10             	sub    esp,0x10
c000ca4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca53:	50                   	push   eax
c000ca54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca58:	e8 38 ff ff ff       	call   c000c995 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca5d:	50                   	push   eax
c000ca5e:	e8 ab ff ff ff       	call   c000ca0e <Dbg::logs(char*)>
c000ca63:	83 c4 20             	add    esp,0x20
c000ca66:	c3                   	ret    

c000ca67 <Dbg::kprintf(char const*, ...)>:
c000ca67:	55                   	push   ebp
c000ca68:	57                   	push   edi
c000ca69:	56                   	push   esi
c000ca6a:	53                   	push   ebx
c000ca6b:	83 ec 0c             	sub    esp,0xc
c000ca6e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca72:	f6 05 e0 63 02 c0 10 	test   BYTE PTR ds:0xc00263e0,0x10
c000ca79:	74 08                	je     c000ca83 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca7b:	83 c4 0c             	add    esp,0xc
c000ca7e:	5b                   	pop    ebx
c000ca7f:	5e                   	pop    esi
c000ca80:	5f                   	pop    edi
c000ca81:	5d                   	pop    ebp
c000ca82:	c3                   	ret    
c000ca83:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca87:	31 db                	xor    ebx,ebx
c000ca89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca8d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca90:	84 c0                	test   al,al
c000ca92:	74 e7                	je     c000ca7b <Dbg::kprintf(char const*, ...)+0x14>
c000ca94:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca97:	3c 25                	cmp    al,0x25
c000ca99:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca9c:	75 44                	jne    c000cae2 <Dbg::kprintf(char const*, ...)+0x7b>
c000ca9e:	83 c3 02             	add    ebx,0x2
c000caa1:	8a 07                	mov    al,BYTE PTR [edi]
c000caa3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000caa6:	83 e8 25             	sub    eax,0x25
c000caa9:	3c 53                	cmp    al,0x53
c000caab:	0f 87 c9 00 00 00    	ja     c000cb7a <Dbg::kprintf(char const*, ...)+0x113>
c000cab1:	0f b6 c0             	movzx  eax,al
c000cab4:	ff 24 85 14 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcfec]
c000cabb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cabf:	89 c8                	mov    eax,ecx
c000cac1:	83 c1 04             	add    ecx,0x4
c000cac4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cac8:	ff 30                	push   DWORD PTR [eax]
c000caca:	e8 5c ff ff ff       	call   c000ca2b <Dbg::logWriteInt(unsigned int)>
c000cacf:	5f                   	pop    edi
c000cad0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cad4:	84 c0                	test   al,al
c000cad6:	74 a3                	je     c000ca7b <Dbg::kprintf(char const*, ...)+0x14>
c000cad8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cadb:	3c 25                	cmp    al,0x25
c000cadd:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cae0:	74 bc                	je     c000ca9e <Dbg::kprintf(char const*, ...)+0x37>
c000cae2:	50                   	push   eax
c000cae3:	89 eb                	mov    ebx,ebp
c000cae5:	e8 04 ff ff ff       	call   c000c9ee <Dbg::logc(char)>
c000caea:	89 fd                	mov    ebp,edi
c000caec:	58                   	pop    eax
c000caed:	eb e1                	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000caef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caf3:	89 c8                	mov    eax,ecx
c000caf5:	83 c1 04             	add    ecx,0x4
c000caf8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cafc:	ff 30                	push   DWORD PTR [eax]
c000cafe:	e8 0b ff ff ff       	call   c000ca0e <Dbg::logs(char*)>
c000cb03:	58                   	pop    eax
c000cb04:	eb ca                	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb0a:	89 d0                	mov    eax,edx
c000cb0c:	83 c2 04             	add    edx,0x4
c000cb0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb13:	ff 30                	push   DWORD PTR [eax]
c000cb15:	e8 11 ff ff ff       	call   c000ca2b <Dbg::logWriteInt(unsigned int)>
c000cb1a:	58                   	pop    eax
c000cb1b:	eb b3                	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb21:	89 d0                	mov    eax,edx
c000cb23:	83 c2 04             	add    edx,0x4
c000cb26:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb2d:	50                   	push   eax
c000cb2e:	e8 bb fe ff ff       	call   c000c9ee <Dbg::logc(char)>
c000cb33:	58                   	pop    eax
c000cb34:	eb 9a                	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb3a:	89 c8                	mov    eax,ecx
c000cb3c:	83 c1 04             	add    ecx,0x4
c000cb3f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb43:	6a 10                	push   0x10
c000cb45:	ff 30                	push   DWORD PTR [eax]
c000cb47:	e8 fc fe ff ff       	call   c000ca48 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb4c:	59                   	pop    ecx
c000cb4d:	5f                   	pop    edi
c000cb4e:	eb 80                	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb54:	89 d0                	mov    eax,edx
c000cb56:	83 c2 08             	add    edx,0x8
c000cb59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb5d:	6a 10                	push   0x10
c000cb5f:	ff 30                	push   DWORD PTR [eax]
c000cb61:	e8 e2 fe ff ff       	call   c000ca48 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb66:	58                   	pop    eax
c000cb67:	5a                   	pop    edx
c000cb68:	e9 63 ff ff ff       	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb6d:	6a 25                	push   0x25
c000cb6f:	e8 7a fe ff ff       	call   c000c9ee <Dbg::logc(char)>
c000cb74:	58                   	pop    eax
c000cb75:	e9 56 ff ff ff       	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb7a:	6a 25                	push   0x25
c000cb7c:	e8 6d fe ff ff       	call   c000c9ee <Dbg::logc(char)>
c000cb81:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb84:	50                   	push   eax
c000cb85:	e8 64 fe ff ff       	call   c000c9ee <Dbg::logc(char)>
c000cb8a:	5a                   	pop    edx
c000cb8b:	59                   	pop    ecx
c000cb8c:	e9 3f ff ff ff       	jmp    c000cad0 <Dbg::kprintf(char const*, ...)+0x69>
c000cb91:	90                   	nop

c000cb92 <File::read(unsigned long long, void*, int*)>:
c000cb92:	53                   	push   ebx
c000cb93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb9b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cba2:	3c 19                	cmp    al,0x19
c000cba4:	77 35                	ja     c000cbdb <File::read(unsigned long long, void*, int*)+0x49>
c000cba6:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cbad:	85 c0                	test   eax,eax
c000cbaf:	74 2a                	je     c000cbdb <File::read(unsigned long long, void*, int*)+0x49>
c000cbb1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbb7:	85 c0                	test   eax,eax
c000cbb9:	74 20                	je     c000cbdb <File::read(unsigned long long, void*, int*)+0x49>
c000cbbb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbbf:	74 21                	je     c000cbe2 <File::read(unsigned long long, void*, int*)+0x50>
c000cbc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbc3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbc7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbd5:	5b                   	pop    ebx
c000cbd6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cbd9:	ff e0                	jmp    eax
c000cbdb:	b8 0b 00 00 00       	mov    eax,0xb
c000cbe0:	eb 05                	jmp    c000cbe7 <File::read(unsigned long long, void*, int*)+0x55>
c000cbe2:	b8 05 00 00 00       	mov    eax,0x5
c000cbe7:	5b                   	pop    ebx
c000cbe8:	c3                   	ret    
c000cbe9:	90                   	nop

c000cbea <File::write(unsigned long long, void*, int*)>:
c000cbea:	53                   	push   ebx
c000cbeb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbf3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbfa:	3c 19                	cmp    al,0x19
c000cbfc:	77 35                	ja     c000cc33 <File::write(unsigned long long, void*, int*)+0x49>
c000cbfe:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cc05:	85 c0                	test   eax,eax
c000cc07:	74 2a                	je     c000cc33 <File::write(unsigned long long, void*, int*)+0x49>
c000cc09:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc0f:	85 c0                	test   eax,eax
c000cc11:	74 20                	je     c000cc33 <File::write(unsigned long long, void*, int*)+0x49>
c000cc13:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc17:	74 21                	je     c000cc3a <File::write(unsigned long long, void*, int*)+0x50>
c000cc19:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc1f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc2d:	5b                   	pop    ebx
c000cc2e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc31:	ff e0                	jmp    eax
c000cc33:	b8 0b 00 00 00       	mov    eax,0xb
c000cc38:	eb 05                	jmp    c000cc3f <File::write(unsigned long long, void*, int*)+0x55>
c000cc3a:	b8 05 00 00 00       	mov    eax,0x5
c000cc3f:	5b                   	pop    ebx
c000cc40:	c3                   	ret    
c000cc41:	90                   	nop

c000cc42 <Directory::read(unsigned long long, void*, int*)>:
c000cc42:	53                   	push   ebx
c000cc43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc47:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc4b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc52:	3c 19                	cmp    al,0x19
c000cc54:	77 35                	ja     c000cc8b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc56:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cc5d:	85 c0                	test   eax,eax
c000cc5f:	74 2a                	je     c000cc8b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc61:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc67:	85 c0                	test   eax,eax
c000cc69:	74 20                	je     c000cc8b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc6f:	74 21                	je     c000cc92 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc71:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc73:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc77:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc85:	5b                   	pop    ebx
c000cc86:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc89:	ff e0                	jmp    eax
c000cc8b:	b8 0b 00 00 00       	mov    eax,0xb
c000cc90:	eb 05                	jmp    c000cc97 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc92:	b8 05 00 00 00       	mov    eax,0x5
c000cc97:	5b                   	pop    ebx
c000cc98:	c3                   	ret    
c000cc99:	90                   	nop

c000cc9a <Directory::write(unsigned long long, void*, int*)>:
c000cc9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc9e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cca5:	b8 0b 00 00 00       	mov    eax,0xb
c000ccaa:	80 fa 19             	cmp    dl,0x19
c000ccad:	77 18                	ja     c000ccc7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccaf:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000ccb6:	85 d2                	test   edx,edx
c000ccb8:	74 0d                	je     c000ccc7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccba:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ccc1:	19 c0                	sbb    eax,eax
c000ccc3:	83 e0 0a             	and    eax,0xa
c000ccc6:	40                   	inc    eax
c000ccc7:	c3                   	ret    

c000ccc8 <File::isAtty()>:
c000ccc8:	31 c0                	xor    eax,eax
c000ccca:	c3                   	ret    
c000cccb:	90                   	nop

c000cccc <Directory::isAtty()>:
c000cccc:	31 c0                	xor    eax,eax
c000ccce:	c3                   	ret    
c000cccf:	90                   	nop

c000ccd0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ccd0:	b8 0a 00 00 00       	mov    eax,0xa
c000ccd5:	c3                   	ret    

c000ccd6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ccd6:	b8 0a 00 00 00       	mov    eax,0xa
c000ccdb:	c3                   	ret    

c000ccdc <Filesystem::allocateSwapfile(char const*, int)>:
c000ccdc:	31 c0                	xor    eax,eax
c000ccde:	31 d2                	xor    edx,edx
c000cce0:	c3                   	ret    
c000cce1:	90                   	nop

c000cce2 <File::~File()>:
c000cce2:	83 ec 0c             	sub    esp,0xc
c000cce5:	ba d4 31 02 c0       	mov    edx,0xc00231d4
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	89 10                	mov    DWORD PTR [eax],edx
c000ccf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf4:	83 ec 0c             	sub    esp,0xc
c000ccf7:	50                   	push   eax
c000ccf8:	e8 37 e7 ff ff       	call   c000b434 <UnixFile::~UnixFile()>
c000ccfd:	83 c4 10             	add    esp,0x10
c000cd00:	90                   	nop
c000cd01:	83 c4 0c             	add    esp,0xc
c000cd04:	c3                   	ret    
c000cd05:	90                   	nop

c000cd06 <File::~File()>:
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	83 ec 0c             	sub    esp,0xc
c000cd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd10:	e8 cd ff ff ff       	call   c000cce2 <File::~File()>
c000cd15:	83 c4 10             	add    esp,0x10
c000cd18:	83 ec 08             	sub    esp,0x8
c000cd1b:	68 14 01 00 00       	push   0x114
c000cd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd24:	e8 5d fc ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000cd29:	83 c4 10             	add    esp,0x10
c000cd2c:	83 c4 0c             	add    esp,0xc
c000cd2f:	c3                   	ret    

c000cd30 <Directory::~Directory()>:
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	ba f0 31 02 c0       	mov    edx,0xc00231f0
c000cd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3c:	89 10                	mov    DWORD PTR [eax],edx
c000cd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd42:	83 ec 0c             	sub    esp,0xc
c000cd45:	50                   	push   eax
c000cd46:	e8 e9 e6 ff ff       	call   c000b434 <UnixFile::~UnixFile()>
c000cd4b:	83 c4 10             	add    esp,0x10
c000cd4e:	90                   	nop
c000cd4f:	83 c4 0c             	add    esp,0xc
c000cd52:	c3                   	ret    
c000cd53:	90                   	nop

c000cd54 <Directory::~Directory()>:
c000cd54:	83 ec 0c             	sub    esp,0xc
c000cd57:	83 ec 0c             	sub    esp,0xc
c000cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5e:	e8 cd ff ff ff       	call   c000cd30 <Directory::~Directory()>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	83 ec 08             	sub    esp,0x8
c000cd69:	68 14 01 00 00       	push   0x114
c000cd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd72:	e8 0f fc ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000cd77:	83 c4 10             	add    esp,0x10
c000cd7a:	83 c4 0c             	add    esp,0xc
c000cd7d:	c3                   	ret    

c000cd7e <Filesystem::Filesystem()>:
c000cd7e:	ba 6c 31 02 c0       	mov    edx,0xc002316c
c000cd83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd87:	89 10                	mov    DWORD PTR [eax],edx
c000cd89:	8b 15 34 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026534
c000cd8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd9a:	a3 34 65 02 c0       	mov    ds:0xc0026534,eax
c000cd9f:	90                   	nop
c000cda0:	c3                   	ret    
c000cda1:	90                   	nop

c000cda2 <Filesystem::~Filesystem()>:
c000cda2:	ba 6c 31 02 c0       	mov    edx,0xc002316c
c000cda7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdab:	89 10                	mov    DWORD PTR [eax],edx
c000cdad:	90                   	nop
c000cdae:	c3                   	ret    
c000cdaf:	90                   	nop

c000cdb0 <Filesystem::~Filesystem()>:
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdb7:	e8 e6 ff ff ff       	call   c000cda2 <Filesystem::~Filesystem()>
c000cdbc:	83 c4 04             	add    esp,0x4
c000cdbf:	83 ec 08             	sub    esp,0x8
c000cdc2:	6a 08                	push   0x8
c000cdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc8:	e8 b9 fb ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000cdcd:	83 c4 10             	add    esp,0x10
c000cdd0:	83 c4 0c             	add    esp,0xc
c000cdd3:	c3                   	ret    

c000cdd4 <Fs::getcwd(Process*, char*, int)>:
c000cdd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdd8:	31 c0                	xor    eax,eax
c000cdda:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cddd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cde1:	7d 15                	jge    c000cdf8 <Fs::getcwd(Process*, char*, int)+0x24>
c000cde3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cde7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdee:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cdf1:	84 c9                	test   cl,cl
c000cdf3:	74 06                	je     c000cdfb <Fs::getcwd(Process*, char*, int)+0x27>
c000cdf5:	40                   	inc    eax
c000cdf6:	eb e2                	jmp    c000cdda <Fs::getcwd(Process*, char*, int)+0x6>
c000cdf8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdfb:	31 c0                	xor    eax,eax
c000cdfd:	c3                   	ret    

c000cdfe <Fs::initVFS()>:
c000cdfe:	83 ec 18             	sub    esp,0x18
c000ce01:	6a 08                	push   0x8
c000ce03:	e8 bb cb ff ff       	call   c00099c3 <malloc>
c000ce08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce0b:	e8 70 e3 00 00       	call   c001b180 <FAT::FAT()>
c000ce10:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce17:	e8 a7 cb ff ff       	call   c00099c3 <malloc>
c000ce1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce1f:	e8 ba f5 00 00       	call   c001c3de <ISO9660::ISO9660()>
c000ce24:	83 c4 1c             	add    esp,0x1c
c000ce27:	c3                   	ret    

c000ce28 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce28:	55                   	push   ebp
c000ce29:	57                   	push   edi
c000ce2a:	56                   	push   esi
c000ce2b:	53                   	push   ebx
c000ce2c:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce32:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce39:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce40:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce47:	68 00 04 00 00       	push   0x400
c000ce4c:	6a 00                	push   0x0
c000ce4e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce52:	56                   	push   esi
c000ce53:	e8 2c 38 ff ff       	call   c0000684 <memset>
c000ce58:	83 c4 10             	add    esp,0x10
c000ce5b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce5f:	75 0b                	jne    c000ce6c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce61:	50                   	push   eax
c000ce62:	50                   	push   eax
c000ce63:	57                   	push   edi
c000ce64:	56                   	push   esi
c000ce65:	e8 d6 38 ff ff       	call   c0000740 <strcpy>
c000ce6a:	eb 41                	jmp    c000cead <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce6c:	8a 07                	mov    al,BYTE PTR [edi]
c000ce6e:	3c 5c                	cmp    al,0x5c
c000ce70:	74 04                	je     c000ce76 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce72:	3c 2f                	cmp    al,0x2f
c000ce74:	75 18                	jne    c000ce8e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce76:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce79:	3c 60                	cmp    al,0x60
c000ce7b:	7e 03                	jle    c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce7d:	83 e8 20             	sub    eax,0x20
c000ce80:	88 04 24             	mov    BYTE PTR [esp],al
c000ce83:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce8a:	50                   	push   eax
c000ce8b:	50                   	push   eax
c000ce8c:	eb 18                	jmp    c000cea6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce8e:	50                   	push   eax
c000ce8f:	50                   	push   eax
c000ce90:	55                   	push   ebp
c000ce91:	56                   	push   esi
c000ce92:	e8 a9 38 ff ff       	call   c0000740 <strcpy>
c000ce97:	5a                   	pop    edx
c000ce98:	59                   	pop    ecx
c000ce99:	68 fa 47 02 c0       	push   0xc00247fa
c000ce9e:	56                   	push   esi
c000ce9f:	e8 dc 39 ff ff       	call   c0000880 <strcat>
c000cea4:	5d                   	pop    ebp
c000cea5:	58                   	pop    eax
c000cea6:	57                   	push   edi
c000cea7:	56                   	push   esi
c000cea8:	e8 d3 39 ff ff       	call   c0000880 <strcat>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ceb3:	3c 60                	cmp    al,0x60
c000ceb5:	7e 03                	jle    c000ceba <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ceb7:	83 e8 20             	sub    eax,0x20
c000ceba:	88 04 24             	mov    BYTE PTR [esp],al
c000cebd:	88 03                	mov    BYTE PTR [ebx],al
c000cebf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cec6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cecc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ced0:	bf 03 00 00 00       	mov    edi,0x3
c000ced5:	b8 03 00 00 00       	mov    eax,0x3
c000ceda:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cedd:	84 d2                	test   dl,dl
c000cedf:	0f 84 91 00 00 00    	je     c000cf76 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cee5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cee8:	80 fa 5c             	cmp    dl,0x5c
c000ceeb:	74 05                	je     c000cef2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000ceed:	80 fa 2f             	cmp    dl,0x2f
c000cef0:	75 12                	jne    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cef2:	89 c5                	mov    ebp,eax
c000cef4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cef9:	74 09                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cefb:	40                   	inc    eax
c000cefc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf00:	89 cf                	mov    edi,ecx
c000cf02:	eb d6                	jmp    c000ceda <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf04:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf09:	75 5b                	jne    c000cf66 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf0b:	80 fa 2e             	cmp    dl,0x2e
c000cf0e:	75 56                	jne    c000cf66 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf10:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf14:	74 19                	je     c000cf2f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf16:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf1b:	74 53                	je     c000cf70 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf1d:	89 f9                	mov    ecx,edi
c000cf1f:	41                   	inc    ecx
c000cf20:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf23:	80 fa 2f             	cmp    dl,0x2f
c000cf26:	74 f7                	je     c000cf1f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf28:	80 fa 5c             	cmp    dl,0x5c
c000cf2b:	74 f2                	je     c000cf1f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf2d:	eb d1                	jmp    c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf2f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf34:	74 3a                	je     c000cf70 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf36:	83 f8 03             	cmp    eax,0x3
c000cf39:	74 c5                	je     c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf3b:	41                   	inc    ecx
c000cf3c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf3f:	80 fa 2f             	cmp    dl,0x2f
c000cf42:	74 f7                	je     c000cf3b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf44:	80 fa 5c             	cmp    dl,0x5c
c000cf47:	74 f2                	je     c000cf3b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf49:	48                   	dec    eax
c000cf4a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf4e:	75 06                	jne    c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf50:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf54:	eb f3                	jmp    c000cf49 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf56:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf5a:	74 07                	je     c000cf63 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf5c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf60:	48                   	dec    eax
c000cf61:	eb f3                	jmp    c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf63:	40                   	inc    eax
c000cf64:	eb 9a                	jmp    c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf66:	80 fa 2f             	cmp    dl,0x2f
c000cf69:	74 95                	je     c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6b:	80 fa 5c             	cmp    dl,0x5c
c000cf6e:	74 90                	je     c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf70:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf73:	40                   	inc    eax
c000cf74:	eb 8a                	jmp    c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	53                   	push   ebx
c000cf7e:	e8 1d 37 ff ff       	call   c00006a0 <strlen>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf8b:	75 26                	jne    c000cfb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf8d:	83 ec 0c             	sub    esp,0xc
c000cf90:	53                   	push   ebx
c000cf91:	e8 0a 37 ff ff       	call   c00006a0 <strlen>
c000cf96:	83 c4 10             	add    esp,0x10
c000cf99:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cf9e:	74 26                	je     c000cfc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cfa0:	83 ec 0c             	sub    esp,0xc
c000cfa3:	53                   	push   ebx
c000cfa4:	e8 f7 36 ff ff       	call   c00006a0 <strlen>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cfb1:	eb c7                	jmp    c000cf7a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cfb3:	83 ec 0c             	sub    esp,0xc
c000cfb6:	53                   	push   ebx
c000cfb7:	e8 e4 36 ff ff       	call   c00006a0 <strlen>
c000cfbc:	83 c4 10             	add    esp,0x10
c000cfbf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cfc4:	74 c7                	je     c000cf8d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cfc6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cfcc:	5b                   	pop    ebx
c000cfcd:	5e                   	pop    esi
c000cfce:	5f                   	pop    edi
c000cfcf:	5d                   	pop    ebp
c000cfd0:	c3                   	ret    
c000cfd1:	90                   	nop

c000cfd2 <File::File(char const*, Process*)>:
c000cfd2:	83 ec 0c             	sub    esp,0xc
c000cfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 00                	push   0x0
c000cfde:	50                   	push   eax
c000cfdf:	e8 6e e2 ff ff       	call   c000b252 <UnixFile::UnixFile(int)>
c000cfe4:	83 c4 10             	add    esp,0x10
c000cfe7:	ba d4 31 02 c0       	mov    edx,0xc00231d4
c000cfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff0:	89 10                	mov    DWORD PTR [eax],edx
c000cff2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cff6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d000:	83 c0 0d             	add    eax,0xd
c000d003:	83 ec 04             	sub    esp,0x4
c000d006:	52                   	push   edx
c000d007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00b:	50                   	push   eax
c000d00c:	e8 17 fe ff ff       	call   c000ce28 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d011:	83 c4 10             	add    esp,0x10
c000d014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d018:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d01b:	8d 50 bf             	lea    edx,[eax-0x41]
c000d01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d022:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d02c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d030:	90                   	nop
c000d031:	83 c4 0c             	add    esp,0xc
c000d034:	c3                   	ret    
c000d035:	90                   	nop

c000d036 <File::open(FileOpenMode)>:
c000d036:	53                   	push   ebx
c000d037:	b8 0b 00 00 00       	mov    eax,0xb
c000d03c:	83 ec 08             	sub    esp,0x8
c000d03f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d043:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d04a:	80 fa 19             	cmp    dl,0x19
c000d04d:	77 40                	ja     c000d08f <File::open(FileOpenMode)+0x59>
c000d04f:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d056:	85 d2                	test   edx,edx
c000d058:	74 35                	je     c000d08f <File::open(FileOpenMode)+0x59>
c000d05a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d060:	85 d2                	test   edx,edx
c000d062:	74 2b                	je     c000d08f <File::open(FileOpenMode)+0x59>
c000d064:	b8 06 00 00 00       	mov    eax,0x6
c000d069:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d06d:	75 20                	jne    c000d08f <File::open(FileOpenMode)+0x59>
c000d06f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07b:	51                   	push   ecx
c000d07c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d07f:	51                   	push   ecx
c000d080:	52                   	push   edx
c000d081:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d084:	83 c4 10             	add    esp,0x10
c000d087:	85 c0                	test   eax,eax
c000d089:	75 04                	jne    c000d08f <File::open(FileOpenMode)+0x59>
c000d08b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d08f:	83 c4 08             	add    esp,0x8
c000d092:	5b                   	pop    ebx
c000d093:	c3                   	ret    

c000d094 <File::close()>:
c000d094:	53                   	push   ebx
c000d095:	b8 0b 00 00 00       	mov    eax,0xb
c000d09a:	83 ec 08             	sub    esp,0x8
c000d09d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0a8:	80 fa 19             	cmp    dl,0x19
c000d0ab:	77 41                	ja     c000d0ee <File::close()+0x5a>
c000d0ad:	8b 1c 95 c0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9640]
c000d0b4:	85 db                	test   ebx,ebx
c000d0b6:	74 36                	je     c000d0ee <File::close()+0x5a>
c000d0b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0bf:	74 2d                	je     c000d0ee <File::close()+0x5a>
c000d0c1:	b8 05 00 00 00       	mov    eax,0x5
c000d0c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0ca:	74 22                	je     c000d0ee <File::close()+0x5a>
c000d0cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0d0:	8b 04 95 c0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9640]
c000d0d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0dd:	53                   	push   ebx
c000d0de:	53                   	push   ebx
c000d0df:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0e7:	50                   	push   eax
c000d0e8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0eb:	83 c4 10             	add    esp,0x10
c000d0ee:	83 c4 08             	add    esp,0x8
c000d0f1:	5b                   	pop    ebx
c000d0f2:	c3                   	ret    
c000d0f3:	90                   	nop

c000d0f4 <File::seek(unsigned long long)>:
c000d0f4:	56                   	push   esi
c000d0f5:	53                   	push   ebx
c000d0f6:	b8 0b 00 00 00       	mov    eax,0xb
c000d0fb:	51                   	push   ecx
c000d0fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d100:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d104:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d10b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d10f:	80 fa 19             	cmp    dl,0x19
c000d112:	77 31                	ja     c000d145 <File::seek(unsigned long long)+0x51>
c000d114:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d11b:	85 d2                	test   edx,edx
c000d11d:	74 26                	je     c000d145 <File::seek(unsigned long long)+0x51>
c000d11f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d125:	85 d2                	test   edx,edx
c000d127:	74 1c                	je     c000d145 <File::seek(unsigned long long)+0x51>
c000d129:	b8 05 00 00 00       	mov    eax,0x5
c000d12e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d132:	74 11                	je     c000d145 <File::seek(unsigned long long)+0x51>
c000d134:	8b 02                	mov    eax,DWORD PTR [edx]
c000d136:	53                   	push   ebx
c000d137:	51                   	push   ecx
c000d138:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d13e:	52                   	push   edx
c000d13f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	5a                   	pop    edx
c000d146:	5b                   	pop    ebx
c000d147:	5e                   	pop    esi
c000d148:	c3                   	ret    
c000d149:	90                   	nop

c000d14a <File::tell(unsigned long long*)>:
c000d14a:	83 ec 0c             	sub    esp,0xc
c000d14d:	b8 0b 00 00 00       	mov    eax,0xb
c000d152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d156:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d15d:	80 fa 19             	cmp    dl,0x19
c000d160:	77 34                	ja     c000d196 <File::tell(unsigned long long*)+0x4c>
c000d162:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d169:	85 d2                	test   edx,edx
c000d16b:	74 29                	je     c000d196 <File::tell(unsigned long long*)+0x4c>
c000d16d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d173:	85 d2                	test   edx,edx
c000d175:	74 1f                	je     c000d196 <File::tell(unsigned long long*)+0x4c>
c000d177:	b8 05 00 00 00       	mov    eax,0x5
c000d17c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d180:	74 14                	je     c000d196 <File::tell(unsigned long long*)+0x4c>
c000d182:	50                   	push   eax
c000d183:	8b 02                	mov    eax,DWORD PTR [edx]
c000d185:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d189:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d18f:	52                   	push   edx
c000d190:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	83 c4 0c             	add    esp,0xc
c000d199:	c3                   	ret    

c000d19a <File::rewind()>:
c000d19a:	83 ec 10             	sub    esp,0x10
c000d19d:	6a 00                	push   0x0
c000d19f:	6a 00                	push   0x0
c000d1a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a5:	e8 4a ff ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c000d1aa:	83 c4 1c             	add    esp,0x1c
c000d1ad:	c3                   	ret    

c000d1ae <File::unlink()>:
c000d1ae:	83 ec 0c             	sub    esp,0xc
c000d1b1:	b8 0b 00 00 00       	mov    eax,0xb
c000d1b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1c1:	80 f9 19             	cmp    cl,0x19
c000d1c4:	77 2f                	ja     c000d1f5 <File::unlink()+0x47>
c000d1c6:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d1cd:	85 c9                	test   ecx,ecx
c000d1cf:	74 24                	je     c000d1f5 <File::unlink()+0x47>
c000d1d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1d7:	85 c9                	test   ecx,ecx
c000d1d9:	74 1a                	je     c000d1f5 <File::unlink()+0x47>
c000d1db:	b8 06 00 00 00       	mov    eax,0x6
c000d1e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1e4:	75 0f                	jne    c000d1f5 <File::unlink()+0x47>
c000d1e6:	83 c2 0d             	add    edx,0xd
c000d1e9:	50                   	push   eax
c000d1ea:	50                   	push   eax
c000d1eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1ed:	52                   	push   edx
c000d1ee:	51                   	push   ecx
c000d1ef:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	83 c4 0c             	add    esp,0xc
c000d1f8:	c3                   	ret    
c000d1f9:	90                   	nop

c000d1fa <File::rename(char const*)>:
c000d1fa:	83 ec 0c             	sub    esp,0xc
c000d1fd:	b8 0b 00 00 00       	mov    eax,0xb
c000d202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d206:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d20d:	80 f9 19             	cmp    cl,0x19
c000d210:	77 32                	ja     c000d244 <File::rename(char const*)+0x4a>
c000d212:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d219:	85 c9                	test   ecx,ecx
c000d21b:	74 27                	je     c000d244 <File::rename(char const*)+0x4a>
c000d21d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d223:	85 c9                	test   ecx,ecx
c000d225:	74 1d                	je     c000d244 <File::rename(char const*)+0x4a>
c000d227:	b8 06 00 00 00       	mov    eax,0x6
c000d22c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d230:	75 12                	jne    c000d244 <File::rename(char const*)+0x4a>
c000d232:	83 c2 0d             	add    edx,0xd
c000d235:	50                   	push   eax
c000d236:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d23c:	52                   	push   edx
c000d23d:	51                   	push   ecx
c000d23e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	83 c4 0c             	add    esp,0xc
c000d247:	c3                   	ret    

c000d248 <File::chfatattr(unsigned char, unsigned char)>:
c000d248:	57                   	push   edi
c000d249:	b8 0b 00 00 00       	mov    eax,0xb
c000d24e:	56                   	push   esi
c000d24f:	53                   	push   ebx
c000d250:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d258:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d25f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d263:	80 f9 19             	cmp    cl,0x19
c000d266:	77 37                	ja     c000d29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d268:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d26f:	85 c9                	test   ecx,ecx
c000d271:	74 2c                	je     c000d29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d273:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d279:	85 c9                	test   ecx,ecx
c000d27b:	74 22                	je     c000d29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d27d:	b8 06 00 00 00       	mov    eax,0x6
c000d282:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d286:	75 17                	jne    c000d29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d288:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d28a:	89 f0                	mov    eax,esi
c000d28c:	83 c2 0d             	add    edx,0xd
c000d28f:	0f b6 f0             	movzx  esi,al
c000d292:	0f b6 db             	movzx  ebx,bl
c000d295:	56                   	push   esi
c000d296:	53                   	push   ebx
c000d297:	52                   	push   edx
c000d298:	51                   	push   ecx
c000d299:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d29c:	83 c4 10             	add    esp,0x10
c000d29f:	5b                   	pop    ebx
c000d2a0:	5e                   	pop    esi
c000d2a1:	5f                   	pop    edi
c000d2a2:	c3                   	ret    
c000d2a3:	90                   	nop

c000d2a4 <File::exists()>:
c000d2a4:	83 ec 0c             	sub    esp,0xc
c000d2a7:	31 c0                	xor    eax,eax
c000d2a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2ad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b4:	80 f9 19             	cmp    cl,0x19
c000d2b7:	77 24                	ja     c000d2dd <File::exists()+0x39>
c000d2b9:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d2c0:	85 c9                	test   ecx,ecx
c000d2c2:	74 19                	je     c000d2dd <File::exists()+0x39>
c000d2c4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2ca:	85 c9                	test   ecx,ecx
c000d2cc:	74 0f                	je     c000d2dd <File::exists()+0x39>
c000d2ce:	83 c2 0d             	add    edx,0xd
c000d2d1:	50                   	push   eax
c000d2d2:	50                   	push   eax
c000d2d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2d5:	52                   	push   edx
c000d2d6:	51                   	push   ecx
c000d2d7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d2da:	83 c4 10             	add    esp,0x10
c000d2dd:	83 c4 0c             	add    esp,0xc
c000d2e0:	c3                   	ret    
c000d2e1:	90                   	nop

c000d2e2 <File::stat(unsigned long long*, bool*)>:
c000d2e2:	56                   	push   esi
c000d2e3:	53                   	push   ebx
c000d2e4:	50                   	push   eax
c000d2e5:	b8 0b 00 00 00       	mov    eax,0xb
c000d2ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2fd:	80 f9 19             	cmp    cl,0x19
c000d300:	77 3d                	ja     c000d33f <File::stat(unsigned long long*, bool*)+0x5d>
c000d302:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d309:	85 c9                	test   ecx,ecx
c000d30b:	74 32                	je     c000d33f <File::stat(unsigned long long*, bool*)+0x5d>
c000d30d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d313:	85 c9                	test   ecx,ecx
c000d315:	74 28                	je     c000d33f <File::stat(unsigned long long*, bool*)+0x5d>
c000d317:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d319:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d31d:	74 13                	je     c000d332 <File::stat(unsigned long long*, bool*)+0x50>
c000d31f:	83 ec 04             	sub    esp,0x4
c000d322:	56                   	push   esi
c000d323:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d329:	51                   	push   ecx
c000d32a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d32d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d330:	eb 0a                	jmp    c000d33c <File::stat(unsigned long long*, bool*)+0x5a>
c000d332:	53                   	push   ebx
c000d333:	83 c2 0d             	add    edx,0xd
c000d336:	56                   	push   esi
c000d337:	52                   	push   edx
c000d338:	51                   	push   ecx
c000d339:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d33c:	83 c4 10             	add    esp,0x10
c000d33f:	5a                   	pop    edx
c000d340:	5b                   	pop    ebx
c000d341:	5e                   	pop    esi
c000d342:	c3                   	ret    

c000d343 <Fs::setcwd(Process*, char*)>:
c000d343:	55                   	push   ebp
c000d344:	57                   	push   edi
c000d345:	56                   	push   esi
c000d346:	53                   	push   ebx
c000d347:	81 ec 20 02 00 00    	sub    esp,0x220
c000d34d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d354:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d35a:	57                   	push   edi
c000d35b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d362:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d366:	56                   	push   esi
c000d367:	e8 bc fa ff ff       	call   c000ce28 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d36c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d36f:	e8 2c 33 ff ff       	call   c00006a0 <strlen>
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	83 f8 02             	cmp    eax,0x2
c000d37a:	77 17                	ja     c000d393 <Fs::setcwd(Process*, char*)+0x50>
c000d37c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d381:	83 e8 41             	sub    eax,0x41
c000d384:	83 f8 19             	cmp    eax,0x19
c000d387:	76 24                	jbe    c000d3ad <Fs::setcwd(Process*, char*)+0x6a>
c000d389:	b8 03 00 00 00       	mov    eax,0x3
c000d38e:	e9 e0 00 00 00       	jmp    c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d393:	83 ec 0c             	sub    esp,0xc
c000d396:	56                   	push   esi
c000d397:	e8 04 33 ff ff       	call   c00006a0 <strlen>
c000d39c:	83 c4 10             	add    esp,0x10
c000d39f:	83 f8 03             	cmp    eax,0x3
c000d3a2:	75 34                	jne    c000d3d8 <Fs::setcwd(Process*, char*)+0x95>
c000d3a4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3a9:	75 2d                	jne    c000d3d8 <Fs::setcwd(Process*, char*)+0x95>
c000d3ab:	eb cf                	jmp    c000d37c <Fs::setcwd(Process*, char*)+0x39>
c000d3ad:	8b 14 85 c0 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9640]
c000d3b4:	b8 05 00 00 00       	mov    eax,0x5
c000d3b9:	85 d2                	test   edx,edx
c000d3bb:	0f 84 b2 00 00 00    	je     c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d3c1:	b8 06 00 00 00       	mov    eax,0x6
c000d3c6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d3cd:	0f 85 92 00 00 00    	jne    c000d465 <Fs::setcwd(Process*, char*)+0x122>
c000d3d3:	e9 9b 00 00 00       	jmp    c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d3d8:	83 ec 0c             	sub    esp,0xc
c000d3db:	68 14 01 00 00       	push   0x114
c000d3e0:	e8 de c5 ff ff       	call   c00099c3 <malloc>
c000d3e5:	83 c4 0c             	add    esp,0xc
c000d3e8:	89 c3                	mov    ebx,eax
c000d3ea:	55                   	push   ebp
c000d3eb:	56                   	push   esi
c000d3ec:	50                   	push   eax
c000d3ed:	e8 e0 fb ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c000d3f2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3f7:	83 c4 0c             	add    esp,0xc
c000d3fa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d3fe:	50                   	push   eax
c000d3ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d403:	50                   	push   eax
c000d404:	53                   	push   ebx
c000d405:	e8 d8 fe ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c000d40a:	83 c4 10             	add    esp,0x10
c000d40d:	83 f8 02             	cmp    eax,0x2
c000d410:	74 04                	je     c000d416 <Fs::setcwd(Process*, char*)+0xd3>
c000d412:	85 c0                	test   eax,eax
c000d414:	74 1c                	je     c000d432 <Fs::setcwd(Process*, char*)+0xef>
c000d416:	b8 01 00 00 00       	mov    eax,0x1
c000d41b:	85 db                	test   ebx,ebx
c000d41d:	74 54                	je     c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d41f:	83 ec 0c             	sub    esp,0xc
c000d422:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d424:	53                   	push   ebx
c000d425:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d428:	83 c4 10             	add    esp,0x10
c000d42b:	b8 01 00 00 00       	mov    eax,0x1
c000d430:	eb 41                	jmp    c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d432:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d437:	75 1c                	jne    c000d455 <Fs::setcwd(Process*, char*)+0x112>
c000d439:	b8 02 00 00 00       	mov    eax,0x2
c000d43e:	85 db                	test   ebx,ebx
c000d440:	74 31                	je     c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d442:	83 ec 0c             	sub    esp,0xc
c000d445:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d447:	53                   	push   ebx
c000d448:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d44b:	83 c4 10             	add    esp,0x10
c000d44e:	b8 02 00 00 00       	mov    eax,0x2
c000d453:	eb 1e                	jmp    c000d473 <Fs::setcwd(Process*, char*)+0x130>
c000d455:	85 db                	test   ebx,ebx
c000d457:	74 0c                	je     c000d465 <Fs::setcwd(Process*, char*)+0x122>
c000d459:	83 ec 0c             	sub    esp,0xc
c000d45c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d45e:	53                   	push   ebx
c000d45f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	50                   	push   eax
c000d466:	50                   	push   eax
c000d467:	56                   	push   esi
c000d468:	57                   	push   edi
c000d469:	e8 d2 32 ff ff       	call   c0000740 <strcpy>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	31 c0                	xor    eax,eax
c000d473:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d479:	5b                   	pop    ebx
c000d47a:	5e                   	pop    esi
c000d47b:	5f                   	pop    edi
c000d47c:	5d                   	pop    ebp
c000d47d:	c3                   	ret    

c000d47e <Directory::Directory(char const*, Process*)>:
c000d47e:	83 ec 0c             	sub    esp,0xc
c000d481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d485:	83 ec 08             	sub    esp,0x8
c000d488:	6a 00                	push   0x0
c000d48a:	50                   	push   eax
c000d48b:	e8 c2 dd ff ff       	call   c000b252 <UnixFile::UnixFile(int)>
c000d490:	83 c4 10             	add    esp,0x10
c000d493:	ba f0 31 02 c0       	mov    edx,0xc00231f0
c000d498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d49c:	89 10                	mov    DWORD PTR [eax],edx
c000d49e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ac:	83 c0 0d             	add    eax,0xd
c000d4af:	83 ec 04             	sub    esp,0x4
c000d4b2:	52                   	push   edx
c000d4b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b7:	50                   	push   eax
c000d4b8:	e8 6b f9 ff ff       	call   c000ce28 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d4bd:	83 c4 10             	add    esp,0x10
c000d4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d4c7:	8d 50 bf             	lea    edx,[eax-0x41]
c000d4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d4dc:	90                   	nop
c000d4dd:	83 c4 0c             	add    esp,0xc
c000d4e0:	c3                   	ret    
c000d4e1:	90                   	nop

c000d4e2 <Directory::open()>:
c000d4e2:	53                   	push   ebx
c000d4e3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4e8:	83 ec 08             	sub    esp,0x8
c000d4eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4ef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4f6:	80 fa 19             	cmp    dl,0x19
c000d4f9:	77 3d                	ja     c000d538 <Directory::open()+0x56>
c000d4fb:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d502:	85 d2                	test   edx,edx
c000d504:	74 32                	je     c000d538 <Directory::open()+0x56>
c000d506:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d50c:	85 d2                	test   edx,edx
c000d50e:	74 28                	je     c000d538 <Directory::open()+0x56>
c000d510:	b8 06 00 00 00       	mov    eax,0x6
c000d515:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d519:	75 1d                	jne    c000d538 <Directory::open()+0x56>
c000d51b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d521:	50                   	push   eax
c000d522:	8b 02                	mov    eax,DWORD PTR [edx]
c000d524:	51                   	push   ecx
c000d525:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d528:	51                   	push   ecx
c000d529:	52                   	push   edx
c000d52a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d52d:	83 c4 10             	add    esp,0x10
c000d530:	85 c0                	test   eax,eax
c000d532:	75 04                	jne    c000d538 <Directory::open()+0x56>
c000d534:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d538:	83 c4 08             	add    esp,0x8
c000d53b:	5b                   	pop    ebx
c000d53c:	c3                   	ret    
c000d53d:	90                   	nop

c000d53e <Directory::close()>:
c000d53e:	53                   	push   ebx
c000d53f:	b8 0b 00 00 00       	mov    eax,0xb
c000d544:	83 ec 08             	sub    esp,0x8
c000d547:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d54b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d552:	80 fa 19             	cmp    dl,0x19
c000d555:	77 41                	ja     c000d598 <Directory::close()+0x5a>
c000d557:	8b 1c 95 c0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9640]
c000d55e:	85 db                	test   ebx,ebx
c000d560:	74 36                	je     c000d598 <Directory::close()+0x5a>
c000d562:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d569:	74 2d                	je     c000d598 <Directory::close()+0x5a>
c000d56b:	b8 05 00 00 00       	mov    eax,0x5
c000d570:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d574:	74 22                	je     c000d598 <Directory::close()+0x5a>
c000d576:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d57a:	8b 04 95 c0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9640]
c000d581:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d587:	53                   	push   ebx
c000d588:	53                   	push   ebx
c000d589:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d591:	50                   	push   eax
c000d592:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d595:	83 c4 10             	add    esp,0x10
c000d598:	83 c4 08             	add    esp,0x8
c000d59b:	5b                   	pop    ebx
c000d59c:	c3                   	ret    
c000d59d:	90                   	nop

c000d59e <Directory::unlink()>:
c000d59e:	83 ec 0c             	sub    esp,0xc
c000d5a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d5a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5b1:	80 f9 19             	cmp    cl,0x19
c000d5b4:	77 2f                	ja     c000d5e5 <Directory::unlink()+0x47>
c000d5b6:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d5bd:	85 c9                	test   ecx,ecx
c000d5bf:	74 24                	je     c000d5e5 <Directory::unlink()+0x47>
c000d5c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5c7:	85 c9                	test   ecx,ecx
c000d5c9:	74 1a                	je     c000d5e5 <Directory::unlink()+0x47>
c000d5cb:	b8 06 00 00 00       	mov    eax,0x6
c000d5d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5d4:	75 0f                	jne    c000d5e5 <Directory::unlink()+0x47>
c000d5d6:	83 c2 0d             	add    edx,0xd
c000d5d9:	50                   	push   eax
c000d5da:	50                   	push   eax
c000d5db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5dd:	52                   	push   edx
c000d5de:	51                   	push   ecx
c000d5df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5e2:	83 c4 10             	add    esp,0x10
c000d5e5:	83 c4 0c             	add    esp,0xc
c000d5e8:	c3                   	ret    
c000d5e9:	90                   	nop

c000d5ea <Directory::rename(char const*)>:
c000d5ea:	83 ec 0c             	sub    esp,0xc
c000d5ed:	b8 0b 00 00 00       	mov    eax,0xb
c000d5f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5fd:	80 f9 19             	cmp    cl,0x19
c000d600:	77 32                	ja     c000d634 <Directory::rename(char const*)+0x4a>
c000d602:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d609:	85 c9                	test   ecx,ecx
c000d60b:	74 27                	je     c000d634 <Directory::rename(char const*)+0x4a>
c000d60d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d613:	85 c9                	test   ecx,ecx
c000d615:	74 1d                	je     c000d634 <Directory::rename(char const*)+0x4a>
c000d617:	b8 06 00 00 00       	mov    eax,0x6
c000d61c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d620:	75 12                	jne    c000d634 <Directory::rename(char const*)+0x4a>
c000d622:	83 c2 0d             	add    edx,0xd
c000d625:	50                   	push   eax
c000d626:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d628:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d62c:	52                   	push   edx
c000d62d:	51                   	push   ecx
c000d62e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	83 c4 0c             	add    esp,0xc
c000d637:	c3                   	ret    

c000d638 <Directory::exists()>:
c000d638:	83 ec 0c             	sub    esp,0xc
c000d63b:	31 c0                	xor    eax,eax
c000d63d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d641:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d648:	80 f9 19             	cmp    cl,0x19
c000d64b:	77 24                	ja     c000d671 <Directory::exists()+0x39>
c000d64d:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d654:	85 c9                	test   ecx,ecx
c000d656:	74 19                	je     c000d671 <Directory::exists()+0x39>
c000d658:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d65e:	85 c9                	test   ecx,ecx
c000d660:	74 0f                	je     c000d671 <Directory::exists()+0x39>
c000d662:	83 c2 0d             	add    edx,0xd
c000d665:	50                   	push   eax
c000d666:	50                   	push   eax
c000d667:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d669:	52                   	push   edx
c000d66a:	51                   	push   ecx
c000d66b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d66e:	83 c4 10             	add    esp,0x10
c000d671:	83 c4 0c             	add    esp,0xc
c000d674:	c3                   	ret    
c000d675:	90                   	nop

c000d676 <Directory::read(dirent*)>:
c000d676:	83 ec 1c             	sub    esp,0x1c
c000d679:	b8 0b 00 00 00       	mov    eax,0xb
c000d67e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d682:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d689:	80 fa 19             	cmp    dl,0x19
c000d68c:	77 30                	ja     c000d6be <Directory::read(dirent*)+0x48>
c000d68e:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d695:	85 d2                	test   edx,edx
c000d697:	74 25                	je     c000d6be <Directory::read(dirent*)+0x48>
c000d699:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6a0:	74 1c                	je     c000d6be <Directory::read(dirent*)+0x48>
c000d6a2:	83 ec 0c             	sub    esp,0xc
c000d6a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d6ab:	52                   	push   edx
c000d6ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b0:	6a 00                	push   0x0
c000d6b2:	68 10 01 00 00       	push   0x110
c000d6b7:	51                   	push   ecx
c000d6b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d6bb:	83 c4 20             	add    esp,0x20
c000d6be:	83 c4 1c             	add    esp,0x1c
c000d6c1:	c3                   	ret    

c000d6c2 <Directory::create()>:
c000d6c2:	83 ec 0c             	sub    esp,0xc
c000d6c5:	b8 0b 00 00 00       	mov    eax,0xb
c000d6ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6d5:	80 f9 19             	cmp    cl,0x19
c000d6d8:	77 2f                	ja     c000d709 <Directory::create()+0x47>
c000d6da:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d6e1:	85 c9                	test   ecx,ecx
c000d6e3:	74 24                	je     c000d709 <Directory::create()+0x47>
c000d6e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6eb:	85 c9                	test   ecx,ecx
c000d6ed:	74 1a                	je     c000d709 <Directory::create()+0x47>
c000d6ef:	b8 06 00 00 00       	mov    eax,0x6
c000d6f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6f8:	75 0f                	jne    c000d709 <Directory::create()+0x47>
c000d6fa:	83 c2 0d             	add    edx,0xd
c000d6fd:	50                   	push   eax
c000d6fe:	50                   	push   eax
c000d6ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d701:	52                   	push   edx
c000d702:	51                   	push   ecx
c000d703:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	83 c4 0c             	add    esp,0xc
c000d70c:	c3                   	ret    
c000d70d:	90                   	nop

c000d70e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d70e:	b8 0a 00 00 00       	mov    eax,0xa
c000d713:	c3                   	ret    

c000d714 <Bus::Bus(char const*)>:
c000d714:	83 ec 0c             	sub    esp,0xc
c000d717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71b:	83 ec 08             	sub    esp,0x8
c000d71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d722:	50                   	push   eax
c000d723:	e8 8a 09 00 00       	call   c000e0b2 <Device::Device(char const*)>
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	ba 0c 32 02 c0       	mov    edx,0xc002320c
c000d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d734:	89 10                	mov    DWORD PTR [eax],edx
c000d736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d744:	90                   	nop
c000d745:	83 c4 0c             	add    esp,0xc
c000d748:	c3                   	ret    
c000d749:	90                   	nop
c000d74a:	66 90                	xchg   ax,ax

c000d74c <Bus::~Bus()>:
c000d74c:	83 ec 0c             	sub    esp,0xc
c000d74f:	ba 0c 32 02 c0       	mov    edx,0xc002320c
c000d754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d758:	89 10                	mov    DWORD PTR [eax],edx
c000d75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75e:	83 ec 0c             	sub    esp,0xc
c000d761:	50                   	push   eax
c000d762:	e8 15 06 00 00       	call   c000dd7c <Device::~Device()>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	90                   	nop
c000d76b:	83 c4 0c             	add    esp,0xc
c000d76e:	c3                   	ret    
c000d76f:	90                   	nop

c000d770 <Bus::~Bus()>:
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	83 ec 0c             	sub    esp,0xc
c000d776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77a:	e8 cd ff ff ff       	call   c000d74c <Bus::~Bus()>
c000d77f:	83 c4 10             	add    esp,0x10
c000d782:	83 ec 08             	sub    esp,0x8
c000d785:	68 58 01 00 00       	push   0x158
c000d78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78e:	e8 f3 f1 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	83 c4 0c             	add    esp,0xc
c000d799:	c3                   	ret    
c000d79a:	66 90                	xchg   ax,ax

c000d79c <Buzzer::Buzzer(char const*)>:
c000d79c:	83 ec 0c             	sub    esp,0xc
c000d79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a3:	83 ec 08             	sub    esp,0x8
c000d7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7aa:	50                   	push   eax
c000d7ab:	e8 02 09 00 00       	call   c000e0b2 <Device::Device(char const*)>
c000d7b0:	83 c4 10             	add    esp,0x10
c000d7b3:	ba 38 32 02 c0       	mov    edx,0xc0023238
c000d7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7bc:	89 10                	mov    DWORD PTR [eax],edx
c000d7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d7da:	90                   	nop
c000d7db:	83 c4 0c             	add    esp,0xc
c000d7de:	c3                   	ret    
c000d7df:	90                   	nop

c000d7e0 <Buzzer::~Buzzer()>:
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	ba 38 32 02 c0       	mov    edx,0xc0023238
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	89 10                	mov    DWORD PTR [eax],edx
c000d7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f2:	83 ec 0c             	sub    esp,0xc
c000d7f5:	50                   	push   eax
c000d7f6:	e8 81 05 00 00       	call   c000dd7c <Device::~Device()>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	90                   	nop
c000d7ff:	83 c4 0c             	add    esp,0xc
c000d802:	c3                   	ret    
c000d803:	90                   	nop

c000d804 <Buzzer::~Buzzer()>:
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	83 ec 0c             	sub    esp,0xc
c000d80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80e:	e8 cd ff ff ff       	call   c000d7e0 <Buzzer::~Buzzer()>
c000d813:	83 c4 10             	add    esp,0x10
c000d816:	83 ec 08             	sub    esp,0x8
c000d819:	68 5c 01 00 00       	push   0x15c
c000d81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d822:	e8 5f f1 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000d827:	83 c4 10             	add    esp,0x10
c000d82a:	83 c4 0c             	add    esp,0xc
c000d82d:	c3                   	ret    

c000d82e <Buzzer::stop()>:
c000d82e:	83 ec 14             	sub    esp,0x14
c000d831:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d835:	8b 10                	mov    edx,DWORD PTR [eax]
c000d837:	6a 00                	push   0x0
c000d839:	50                   	push   eax
c000d83a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d83d:	83 c4 1c             	add    esp,0x1c
c000d840:	c3                   	ret    

c000d841 <beepThread(void*)>:
c000d841:	53                   	push   ebx
c000d842:	83 ec 08             	sub    esp,0x8
c000d845:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000d84a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d84e:	48                   	dec    eax
c000d84f:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000d854:	75 02                	jne    c000d858 <beepThread(void*)+0x17>
c000d856:	fb                   	sti    
c000d857:	90                   	nop
c000d858:	83 ec 0c             	sub    esp,0xc
c000d85b:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d862:	50                   	push   eax
c000d863:	e8 8c a9 00 00       	call   c00181f4 <milliTenthSleep(unsigned int)>
c000d868:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d86b:	e8 be ff ff ff       	call   c000d82e <Buzzer::stop()>
c000d870:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d878:	83 c4 18             	add    esp,0x18
c000d87b:	5b                   	pop    ebx
c000d87c:	e9 73 a8 00 00       	jmp    c00180f4 <blockTask(TaskState)>
c000d881:	90                   	nop

c000d882 <Buzzer::beep(int, int, bool)>:
c000d882:	57                   	push   edi
c000d883:	56                   	push   esi
c000d884:	53                   	push   ebx
c000d885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d889:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d88d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d891:	50                   	push   eax
c000d892:	50                   	push   eax
c000d893:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d899:	53                   	push   ebx
c000d89a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	89 f8                	mov    eax,edi
c000d8a2:	84 c0                	test   al,al
c000d8a4:	74 1e                	je     c000d8c4 <Buzzer::beep(int, int, bool)+0x42>
c000d8a6:	83 ec 0c             	sub    esp,0xc
c000d8a9:	6b f6 0a             	imul   esi,esi,0xa
c000d8ac:	56                   	push   esi
c000d8ad:	e8 42 a9 00 00       	call   c00181f4 <milliTenthSleep(unsigned int)>
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8b9:	5b                   	pop    ebx
c000d8ba:	5e                   	pop    esi
c000d8bb:	5f                   	pop    edi
c000d8bc:	e9 6d ff ff ff       	jmp    c000d82e <Buzzer::stop()>
c000d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c4:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d8ca:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000d8cf:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d8d7:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8db:	c7 44 24 14 41 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d841
c000d8e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8e7:	5b                   	pop    ebx
c000d8e8:	5e                   	pop    esi
c000d8e9:	5f                   	pop    edi
c000d8ea:	e9 f1 a3 00 00       	jmp    c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c000d8ef:	90                   	nop

c000d8f0 <User::loadClockSettings(int)>:
c000d8f0:	53                   	push   ebx
c000d8f1:	83 ec 14             	sub    esp,0x14
c000d8f4:	68 14 01 00 00       	push   0x114
c000d8f9:	e8 c5 c0 ff ff       	call   c00099c3 <malloc>
c000d8fe:	83 c4 0c             	add    esp,0xc
c000d901:	89 c3                	mov    ebx,eax
c000d903:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c000d909:	68 60 32 02 c0       	push   0xc0023260
c000d90e:	50                   	push   eax
c000d90f:	e8 be f6 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c000d914:	58                   	pop    eax
c000d915:	5a                   	pop    edx
c000d916:	6a 01                	push   0x1
c000d918:	53                   	push   ebx
c000d919:	e8 18 f7 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c000d91e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d921:	e8 6e f7 ff ff       	call   c000d094 <File::close()>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	85 db                	test   ebx,ebx
c000d92b:	74 0f                	je     c000d93c <User::loadClockSettings(int)+0x4c>
c000d92d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d92f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d933:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d936:	83 c4 08             	add    esp,0x8
c000d939:	5b                   	pop    ebx
c000d93a:	ff e0                	jmp    eax
c000d93c:	83 c4 08             	add    esp,0x8
c000d93f:	5b                   	pop    ebx
c000d940:	c3                   	ret    
c000d941:	90                   	nop

c000d942 <Clock::Clock(char const*)>:
c000d942:	83 ec 0c             	sub    esp,0xc
c000d945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d949:	83 ec 08             	sub    esp,0x8
c000d94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d950:	50                   	push   eax
c000d951:	e8 5c 07 00 00       	call   c000e0b2 <Device::Device(char const*)>
c000d956:	83 c4 10             	add    esp,0x10
c000d959:	ba 88 32 02 c0       	mov    edx,0xc0023288
c000d95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d962:	89 10                	mov    DWORD PTR [eax],edx
c000d964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d968:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d972:	90                   	nop
c000d973:	83 c4 0c             	add    esp,0xc
c000d976:	c3                   	ret    
c000d977:	90                   	nop

c000d978 <Clock::~Clock()>:
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	ba 88 32 02 c0       	mov    edx,0xc0023288
c000d980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d984:	89 10                	mov    DWORD PTR [eax],edx
c000d986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98a:	83 ec 0c             	sub    esp,0xc
c000d98d:	50                   	push   eax
c000d98e:	e8 e9 03 00 00       	call   c000dd7c <Device::~Device()>
c000d993:	83 c4 10             	add    esp,0x10
c000d996:	90                   	nop
c000d997:	83 c4 0c             	add    esp,0xc
c000d99a:	c3                   	ret    
c000d99b:	90                   	nop

c000d99c <Clock::~Clock()>:
c000d99c:	83 ec 0c             	sub    esp,0xc
c000d99f:	83 ec 0c             	sub    esp,0xc
c000d9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a6:	e8 cd ff ff ff       	call   c000d978 <Clock::~Clock()>
c000d9ab:	83 c4 10             	add    esp,0x10
c000d9ae:	83 ec 08             	sub    esp,0x8
c000d9b1:	68 58 01 00 00       	push   0x158
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	e8 c7 ef ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	83 c4 0c             	add    esp,0xc
c000d9c5:	c3                   	ret    

c000d9c6 <Clock::timeInSecondsLocal()>:
c000d9c6:	53                   	push   ebx
c000d9c7:	83 ec 14             	sub    esp,0x14
c000d9ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9d0:	50                   	push   eax
c000d9d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9d4:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000d9db:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000d9e1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9e7:	89 cb                	mov    ebx,ecx
c000d9e9:	c1 fb 1f             	sar    ebx,0x1f
c000d9ec:	01 c8                	add    eax,ecx
c000d9ee:	11 da                	adc    edx,ebx
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	31 c9                	xor    ecx,ecx
c000d9f5:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000d9fc:	74 05                	je     c000da03 <Clock::timeInSecondsLocal()+0x3d>
c000d9fe:	b9 08 07 00 00       	mov    ecx,0x708
c000da03:	31 db                	xor    ebx,ebx
c000da05:	01 c8                	add    eax,ecx
c000da07:	11 da                	adc    edx,ebx
c000da09:	83 c4 08             	add    esp,0x8
c000da0c:	5b                   	pop    ebx
c000da0d:	c3                   	ret    

c000da0e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da0e:	57                   	push   edi
c000da0f:	56                   	push   esi
c000da10:	53                   	push   ebx
c000da11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da19:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da1b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da1f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da22:	0f b6 05 3c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002653c
c000da29:	03 05 40 65 02 c0    	add    eax,DWORD PTR ds:0xc0026540
c000da2f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da35:	99                   	cdq    
c000da36:	29 c6                	sub    esi,eax
c000da38:	19 d7                	sbb    edi,edx
c000da3a:	89 f0                	mov    eax,esi
c000da3c:	89 fa                	mov    edx,edi
c000da3e:	31 f6                	xor    esi,esi
c000da40:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000da47:	74 05                	je     c000da4e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da49:	be 08 07 00 00       	mov    esi,0x708
c000da4e:	31 ff                	xor    edi,edi
c000da50:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da54:	29 f0                	sub    eax,esi
c000da56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da5a:	19 fa                	sbb    edx,edi
c000da5c:	89 d8                	mov    eax,ebx
c000da5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da62:	5b                   	pop    ebx
c000da63:	5e                   	pop    esi
c000da64:	5f                   	pop    edi
c000da65:	ff e0                	jmp    eax

c000da67 <datetimeToSeconds(datetime_t)>:
c000da67:	55                   	push   ebp
c000da68:	57                   	push   edi
c000da69:	56                   	push   esi
c000da6a:	53                   	push   ebx
c000da6b:	83 ec 14             	sub    esp,0x14
c000da6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da72:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da76:	89 d3                	mov    ebx,edx
c000da78:	0f b6 c6             	movzx  eax,dh
c000da7b:	c1 eb 10             	shr    ebx,0x10
c000da7e:	48                   	dec    eax
c000da7f:	66 81 eb 6c 07       	sub    bx,0x76c
c000da84:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da88:	0f b6 f5             	movzx  esi,ch
c000da8b:	89 cf                	mov    edi,ecx
c000da8d:	6b f6 3c             	imul   esi,esi,0x3c
c000da90:	c1 ef 10             	shr    edi,0x10
c000da93:	0f b6 c9             	movzx  ecx,cl
c000da96:	89 f8                	mov    eax,edi
c000da98:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da9e:	0f b6 f8             	movzx  edi,al
c000daa1:	0f b6 d2             	movzx  edx,dl
c000daa4:	01 fe                	add    esi,edi
c000daa6:	01 f1                	add    ecx,esi
c000daa8:	0f b7 f3             	movzx  esi,bx
c000daab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000daaf:	c1 f9 1f             	sar    ecx,0x1f
c000dab2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dab7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dabb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dac0:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000dac7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dacb:	76 29                	jbe    c000daf6 <datetimeToSeconds(datetime_t)+0x8f>
c000dacd:	f6 c3 03             	test   bl,0x3
c000dad0:	75 24                	jne    c000daf6 <datetimeToSeconds(datetime_t)+0x8f>
c000dad2:	31 d2                	xor    edx,edx
c000dad4:	bf 64 00 00 00       	mov    edi,0x64
c000dad9:	89 d8                	mov    eax,ebx
c000dadb:	66 f7 f7             	div    di
c000dade:	66 85 d2             	test   dx,dx
c000dae1:	75 12                	jne    c000daf5 <datetimeToSeconds(datetime_t)+0x8e>
c000dae3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dae9:	bf 90 01 00 00       	mov    edi,0x190
c000daee:	99                   	cdq    
c000daef:	f7 ff                	idiv   edi
c000daf1:	85 d2                	test   edx,edx
c000daf3:	75 01                	jne    c000daf6 <datetimeToSeconds(datetime_t)+0x8f>
c000daf5:	41                   	inc    ecx
c000daf6:	66 83 fb 46          	cmp    bx,0x46
c000dafa:	76 45                	jbe    c000db41 <datetimeToSeconds(datetime_t)+0xda>
c000dafc:	bb 46 00 00 00       	mov    ebx,0x46
c000db01:	bf 64 00 00 00       	mov    edi,0x64
c000db06:	bd 90 01 00 00       	mov    ebp,0x190
c000db0b:	b8 6d 01 00 00       	mov    eax,0x16d
c000db10:	f6 c3 03             	test   bl,0x3
c000db13:	75 23                	jne    c000db38 <datetimeToSeconds(datetime_t)+0xd1>
c000db15:	89 d8                	mov    eax,ebx
c000db17:	99                   	cdq    
c000db18:	f7 ff                	idiv   edi
c000db1a:	b8 6e 01 00 00       	mov    eax,0x16e
c000db1f:	85 d2                	test   edx,edx
c000db21:	75 15                	jne    c000db38 <datetimeToSeconds(datetime_t)+0xd1>
c000db23:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db29:	99                   	cdq    
c000db2a:	f7 fd                	idiv   ebp
c000db2c:	83 fa 01             	cmp    edx,0x1
c000db2f:	19 c0                	sbb    eax,eax
c000db31:	f7 d0                	not    eax
c000db33:	05 6e 01 00 00       	add    eax,0x16e
c000db38:	01 c1                	add    ecx,eax
c000db3a:	43                   	inc    ebx
c000db3b:	39 f3                	cmp    ebx,esi
c000db3d:	7c cc                	jl     c000db0b <datetimeToSeconds(datetime_t)+0xa4>
c000db3f:	eb 35                	jmp    c000db76 <datetimeToSeconds(datetime_t)+0x10f>
c000db41:	74 33                	je     c000db76 <datetimeToSeconds(datetime_t)+0x10f>
c000db43:	b8 45 00 00 00       	mov    eax,0x45
c000db48:	89 c2                	mov    edx,eax
c000db4a:	83 e2 03             	and    edx,0x3
c000db4d:	39 f0                	cmp    eax,esi
c000db4f:	7e 0f                	jle    c000db60 <datetimeToSeconds(datetime_t)+0xf9>
c000db51:	83 fa 01             	cmp    edx,0x1
c000db54:	19 d2                	sbb    edx,edx
c000db56:	48                   	dec    eax
c000db57:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db5e:	eb e8                	jmp    c000db48 <datetimeToSeconds(datetime_t)+0xe1>
c000db60:	b8 6d 01 00 00       	mov    eax,0x16d
c000db65:	85 d2                	test   edx,edx
c000db67:	75 0b                	jne    c000db74 <datetimeToSeconds(datetime_t)+0x10d>
c000db69:	66 83 fb 01          	cmp    bx,0x1
c000db6d:	19 c0                	sbb    eax,eax
c000db6f:	05 6e 01 00 00       	add    eax,0x16e
c000db74:	29 c1                	sub    ecx,eax
c000db76:	b8 80 51 01 00       	mov    eax,0x15180
c000db7b:	f7 e9                	imul   ecx
c000db7d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db81:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db85:	83 c4 14             	add    esp,0x14
c000db88:	5b                   	pop    ebx
c000db89:	5e                   	pop    esi
c000db8a:	5f                   	pop    edi
c000db8b:	5d                   	pop    ebp
c000db8c:	c3                   	ret    
c000db8d:	90                   	nop

c000db8e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db8e:	57                   	push   edi
c000db8f:	56                   	push   esi
c000db90:	53                   	push   ebx
c000db91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db95:	8b 06                	mov    eax,DWORD PTR [esi]
c000db97:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dba2:	e8 c0 fe ff ff       	call   c000da67 <datetimeToSeconds(datetime_t)>
c000dba7:	59                   	pop    ecx
c000dba8:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000dbaf:	5b                   	pop    ebx
c000dbb0:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000dbb6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbbc:	89 cb                	mov    ebx,ecx
c000dbbe:	c1 fb 1f             	sar    ebx,0x1f
c000dbc1:	29 c8                	sub    eax,ecx
c000dbc3:	19 da                	sbb    edx,ebx
c000dbc5:	31 c9                	xor    ecx,ecx
c000dbc7:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000dbce:	74 05                	je     c000dbd5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dbd0:	b9 08 07 00 00       	mov    ecx,0x708
c000dbd5:	31 db                	xor    ebx,ebx
c000dbd7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dbdb:	29 c8                	sub    eax,ecx
c000dbdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbe1:	19 da                	sbb    edx,ebx
c000dbe3:	89 f8                	mov    eax,edi
c000dbe5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbe9:	5b                   	pop    ebx
c000dbea:	5e                   	pop    esi
c000dbeb:	5f                   	pop    edi
c000dbec:	ff e0                	jmp    eax

c000dbee <secondsToDatetime(unsigned long long)>:
c000dbee:	55                   	push   ebp
c000dbef:	57                   	push   edi
c000dbf0:	56                   	push   esi
c000dbf1:	53                   	push   ebx
c000dbf2:	83 ec 1c             	sub    esp,0x1c
c000dbf5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbf9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dbfd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc01:	6a 00                	push   0x0
c000dc03:	68 80 51 01 00       	push   0x15180
c000dc08:	55                   	push   ebp
c000dc09:	57                   	push   edi
c000dc0a:	e8 15 33 01 00       	call   c0020f24 <__udivdi3>
c000dc0f:	83 c4 10             	add    esp,0x10
c000dc12:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1c:	6a 00                	push   0x0
c000dc1e:	68 80 51 01 00       	push   0x15180
c000dc23:	55                   	push   ebp
c000dc24:	57                   	push   edi
c000dc25:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc2a:	e8 f5 33 01 00       	call   c0021024 <__umoddi3>
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	99                   	cdq    
c000dc33:	f7 ff                	idiv   edi
c000dc35:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc3a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc3d:	89 d0                	mov    eax,edx
c000dc3f:	99                   	cdq    
c000dc40:	f7 ff                	idiv   edi
c000dc42:	85 db                	test   ebx,ebx
c000dc44:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc47:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc4a:	79 11                	jns    c000dc5d <secondsToDatetime(unsigned long long)+0x6f>
c000dc4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc50:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc56:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc5b:	eb 07                	jmp    c000dc64 <secondsToDatetime(unsigned long long)+0x76>
c000dc5d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc62:	89 d8                	mov    eax,ebx
c000dc64:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc69:	99                   	cdq    
c000dc6a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc6f:	f7 f9                	idiv   ecx
c000dc71:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc7a:	31 d2                	xor    edx,edx
c000dc7c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc84:	01 c3                	add    ebx,eax
c000dc86:	89 d8                	mov    eax,ebx
c000dc88:	f7 f1                	div    ecx
c000dc8a:	31 d2                	xor    edx,edx
c000dc8c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc8f:	89 d8                	mov    eax,ebx
c000dc91:	f7 f7                	div    edi
c000dc93:	31 d2                	xor    edx,edx
c000dc95:	29 c1                	sub    ecx,eax
c000dc97:	89 d8                	mov    eax,ebx
c000dc99:	f7 f5                	div    ebp
c000dc9b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dca0:	29 c1                	sub    ecx,eax
c000dca2:	31 d2                	xor    edx,edx
c000dca4:	89 c8                	mov    eax,ecx
c000dca6:	f7 f5                	div    ebp
c000dca8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dcad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcb1:	31 d2                	xor    edx,edx
c000dcb3:	89 c8                	mov    eax,ecx
c000dcb5:	f7 f5                	div    ebp
c000dcb7:	31 d2                	xor    edx,edx
c000dcb9:	01 c3                	add    ebx,eax
c000dcbb:	89 c8                	mov    eax,ecx
c000dcbd:	f7 f7                	div    edi
c000dcbf:	bf 99 00 00 00       	mov    edi,0x99
c000dcc4:	29 c3                	sub    ebx,eax
c000dcc6:	31 d2                	xor    edx,edx
c000dcc8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dcd0:	29 c3                	sub    ebx,eax
c000dcd2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dcd5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dcd8:	bb 05 00 00 00       	mov    ebx,0x5
c000dcdd:	83 c1 02             	add    ecx,0x2
c000dce0:	89 c8                	mov    eax,ecx
c000dce2:	f7 f7                	div    edi
c000dce4:	31 d2                	xor    edx,edx
c000dce6:	89 c7                	mov    edi,eax
c000dce8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcee:	83 c0 02             	add    eax,0x2
c000dcf1:	f7 f3                	div    ebx
c000dcf3:	89 eb                	mov    ebx,ebp
c000dcf5:	29 c3                	sub    ebx,eax
c000dcf7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dcfd:	88 1e                	mov    BYTE PTR [esi],bl
c000dcff:	19 c0                	sbb    eax,eax
c000dd01:	31 d2                	xor    edx,edx
c000dd03:	83 e0 0c             	and    eax,0xc
c000dd06:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd0a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd12:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd16:	83 f9 01             	cmp    ecx,0x1
c000dd19:	0f 96 c2             	setbe  dl
c000dd1c:	41                   	inc    ecx
c000dd1d:	01 d0                	add    eax,edx
c000dd1f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd22:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd26:	83 c4 1c             	add    esp,0x1c
c000dd29:	89 f0                	mov    eax,esi
c000dd2b:	5b                   	pop    ebx
c000dd2c:	5e                   	pop    esi
c000dd2d:	5f                   	pop    edi
c000dd2e:	5d                   	pop    ebp
c000dd2f:	c2 04 00             	ret    0x4

c000dd32 <Clock::timeInDatetimeLocal()>:
c000dd32:	53                   	push   ebx
c000dd33:	83 ec 14             	sub    esp,0x14
c000dd36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd3e:	e8 83 fc ff ff       	call   c000d9c6 <Clock::timeInSecondsLocal()>
c000dd43:	83 c4 0c             	add    esp,0xc
c000dd46:	52                   	push   edx
c000dd47:	50                   	push   eax
c000dd48:	53                   	push   ebx
c000dd49:	e8 a0 fe ff ff       	call   c000dbee <secondsToDatetime(unsigned long long)>
c000dd4e:	89 d8                	mov    eax,ebx
c000dd50:	83 c4 14             	add    esp,0x14
c000dd53:	5b                   	pop    ebx
c000dd54:	c2 04 00             	ret    0x4
c000dd57:	90                   	nop

c000dd58 <Device::hibernate()>:
c000dd58:	c3                   	ret    
c000dd59:	90                   	nop

c000dd5a <Device::wake()>:
c000dd5a:	c3                   	ret    
c000dd5b:	90                   	nop

c000dd5c <Device::detect()>:
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <Device::disableLegacy()>:
c000dd5e:	c3                   	ret    
c000dd5f:	90                   	nop

c000dd60 <Device::powerSaving(PowerSavingLevel)>:
c000dd60:	c3                   	ret    
c000dd61:	90                   	nop

c000dd62 <DriverlessDevice::close(int, int, void*)>:
c000dd62:	31 c0                	xor    eax,eax
c000dd64:	c3                   	ret    
c000dd65:	90                   	nop

c000dd66 <DriverlessDevice::detect()>:
c000dd66:	c3                   	ret    
c000dd67:	90                   	nop

c000dd68 <DriverlessDevice::open(int, int, void*)>:
c000dd68:	83 ec 18             	sub    esp,0x18
c000dd6b:	68 f0 32 02 c0       	push   0xc00232f0
c000dd70:	e8 b4 65 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000dd75:	83 c8 ff             	or     eax,0xffffffff
c000dd78:	83 c4 1c             	add    esp,0x1c
c000dd7b:	c3                   	ret    

c000dd7c <Device::~Device()>:
c000dd7c:	ba 50 33 02 c0       	mov    edx,0xc0023350
c000dd81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd85:	89 10                	mov    DWORD PTR [eax],edx
c000dd87:	90                   	nop
c000dd88:	c3                   	ret    
c000dd89:	90                   	nop

c000dd8a <Device::~Device()>:
c000dd8a:	83 ec 0c             	sub    esp,0xc
c000dd8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd91:	e8 e6 ff ff ff       	call   c000dd7c <Device::~Device()>
c000dd96:	83 c4 04             	add    esp,0x4
c000dd99:	83 ec 08             	sub    esp,0x8
c000dd9c:	68 58 01 00 00       	push   0x158
c000dda1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda5:	e8 dc eb ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000ddaa:	83 c4 10             	add    esp,0x10
c000ddad:	83 c4 0c             	add    esp,0xc
c000ddb0:	c3                   	ret    
c000ddb1:	90                   	nop

c000ddb2 <Device::findAndLoadDriver()>:
c000ddb2:	c7 44 24 04 0e 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002330e
c000ddba:	e9 a8 ec ff ff       	jmp    c000ca67 <Dbg::kprintf(char const*, ...)>
c000ddbf:	90                   	nop

c000ddc0 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ddc0:	57                   	push   edi
c000ddc1:	b9 09 00 00 00       	mov    ecx,0x9
c000ddc6:	56                   	push   esi
c000ddc7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ddcb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ddcf:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ddd9:	81 c7 18 01 00 00    	add    edi,0x118
c000dddf:	fc                   	cld    
c000dde0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dde2:	5e                   	pop    esi
c000dde3:	5f                   	pop    edi
c000dde4:	c3                   	ret    
c000dde5:	90                   	nop

c000dde6 <Device::preOpenACPI(void*, char*, char*)>:
c000dde6:	57                   	push   edi
c000dde7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ddec:	56                   	push   esi
c000dded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddf5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ddff:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de05:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de11:	b9 0e 00 00 00       	mov    ecx,0xe
c000de16:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de1c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de22:	5e                   	pop    esi
c000de23:	5f                   	pop    edi
c000de24:	c3                   	ret    
c000de25:	90                   	nop

c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de2a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de2f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de36:	75 0b                	jne    c000de43 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de38:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de41:	eb 1e                	jmp    c000de61 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de43:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000de48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de4e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de54:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de56:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de5e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de61:	ff e0                	jmp    eax
c000de63:	90                   	nop

c000de64 <Device::getParent()>:
c000de64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de68:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de6e:	c3                   	ret    
c000de6f:	90                   	nop

c000de70 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de74:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de79:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de80:	75 0b                	jne    c000de8d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de82:	8b 00                	mov    eax,DWORD PTR [eax]
c000de84:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de88:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de8b:	eb 1e                	jmp    c000deab <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de8d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000de92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de98:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de9e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dea0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dea8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000deab:	ff e0                	jmp    eax
c000dead:	90                   	nop

c000deae <Device::addChild(Device*)>:
c000deae:	53                   	push   ebx
c000deaf:	83 ec 08             	sub    esp,0x8
c000deb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deba:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000dec0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000dec6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dec8:	85 d2                	test   edx,edx
c000deca:	74 04                	je     c000ded0 <Device::addChild(Device*)+0x22>
c000decc:	89 d3                	mov    ebx,edx
c000dece:	eb f6                	jmp    c000dec6 <Device::addChild(Device*)+0x18>
c000ded0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ded3:	83 ec 0c             	sub    esp,0xc
c000ded6:	6a 08                	push   0x8
c000ded8:	e8 e6 ba ff ff       	call   c00099c3 <malloc>
c000dedd:	89 03                	mov    DWORD PTR [ebx],eax
c000dedf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dee5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000deec:	83 c4 18             	add    esp,0x18
c000deef:	5b                   	pop    ebx
c000def0:	c3                   	ret    
c000def1:	90                   	nop

c000def2 <Device::removeAllChildren()>:
c000def2:	56                   	push   esi
c000def3:	53                   	push   ebx
c000def4:	52                   	push   edx
c000def5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000def9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000deff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df02:	74 17                	je     c000df1b <Device::removeAllChildren()+0x29>
c000df04:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df07:	85 c0                	test   eax,eax
c000df09:	74 0c                	je     c000df17 <Device::removeAllChildren()+0x25>
c000df0b:	83 ec 0c             	sub    esp,0xc
c000df0e:	8b 10                	mov    edx,DWORD PTR [eax]
c000df10:	50                   	push   eax
c000df11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df19:	eb e4                	jmp    c000deff <Device::removeAllChildren()+0xd>
c000df1b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df21:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df27:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df34:	58                   	pop    eax
c000df35:	5b                   	pop    ebx
c000df36:	5e                   	pop    esi
c000df37:	c3                   	ret    

c000df38 <Device::hibernateAll()>:
c000df38:	53                   	push   ebx
c000df39:	83 ec 14             	sub    esp,0x14
c000df3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df42:	53                   	push   ebx
c000df43:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df46:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df4c:	83 c4 10             	add    esp,0x10
c000df4f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df52:	74 0f                	je     c000df63 <Device::hibernateAll()+0x2b>
c000df54:	83 ec 0c             	sub    esp,0xc
c000df57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df5a:	e8 d9 ff ff ff       	call   c000df38 <Device::hibernateAll()>
c000df5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df61:	eb e9                	jmp    c000df4c <Device::hibernateAll()+0x14>
c000df63:	83 c4 08             	add    esp,0x8
c000df66:	5b                   	pop    ebx
c000df67:	c3                   	ret    

c000df68 <Device::wakeAll()>:
c000df68:	53                   	push   ebx
c000df69:	83 ec 14             	sub    esp,0x14
c000df6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df70:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df72:	53                   	push   ebx
c000df73:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df7c:	83 c4 10             	add    esp,0x10
c000df7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df82:	74 0f                	je     c000df93 <Device::wakeAll()+0x2b>
c000df84:	83 ec 0c             	sub    esp,0xc
c000df87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df8a:	e8 d9 ff ff ff       	call   c000df68 <Device::wakeAll()>
c000df8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df91:	eb e9                	jmp    c000df7c <Device::wakeAll()+0x14>
c000df93:	83 c4 08             	add    esp,0x8
c000df96:	5b                   	pop    ebx
c000df97:	c3                   	ret    

c000df98 <Device::detectAll()>:
c000df98:	53                   	push   ebx
c000df99:	83 ec 14             	sub    esp,0x14
c000df9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfa2:	53                   	push   ebx
c000dfa3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dfa6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfb2:	74 0f                	je     c000dfc3 <Device::detectAll()+0x2b>
c000dfb4:	83 ec 0c             	sub    esp,0xc
c000dfb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfba:	e8 d9 ff ff ff       	call   c000df98 <Device::detectAll()>
c000dfbf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfc1:	eb e9                	jmp    c000dfac <Device::detectAll()+0x14>
c000dfc3:	83 c4 08             	add    esp,0x8
c000dfc6:	5b                   	pop    ebx
c000dfc7:	c3                   	ret    

c000dfc8 <Device::disableLegacyAll()>:
c000dfc8:	53                   	push   ebx
c000dfc9:	83 ec 14             	sub    esp,0x14
c000dfcc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfd2:	53                   	push   ebx
c000dfd3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dfd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfe2:	74 0f                	je     c000dff3 <Device::disableLegacyAll()+0x2b>
c000dfe4:	83 ec 0c             	sub    esp,0xc
c000dfe7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfea:	e8 d9 ff ff ff       	call   c000dfc8 <Device::disableLegacyAll()>
c000dfef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dff1:	eb e9                	jmp    c000dfdc <Device::disableLegacyAll()+0x14>
c000dff3:	83 c4 08             	add    esp,0x8
c000dff6:	5b                   	pop    ebx
c000dff7:	c3                   	ret    

c000dff8 <Device::loadDriversForAll()>:
c000dff8:	53                   	push   ebx
c000dff9:	83 ec 08             	sub    esp,0x8
c000dffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e000:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e007:	75 0c                	jne    c000e015 <Device::loadDriversForAll()+0x1d>
c000e009:	83 ec 0c             	sub    esp,0xc
c000e00c:	53                   	push   ebx
c000e00d:	e8 a0 fd ff ff       	call   c000ddb2 <Device::findAndLoadDriver()>
c000e012:	83 c4 10             	add    esp,0x10
c000e015:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e01b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e01e:	74 12                	je     c000e032 <Device::loadDriversForAll()+0x3a>
c000e020:	83 ec 0c             	sub    esp,0xc
c000e023:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e026:	e8 cd ff ff ff       	call   c000dff8 <Device::loadDriversForAll()>
c000e02b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	eb e9                	jmp    c000e01b <Device::loadDriversForAll()+0x23>
c000e032:	83 c4 08             	add    esp,0x8
c000e035:	5b                   	pop    ebx
c000e036:	c3                   	ret    
c000e037:	90                   	nop

c000e038 <Device::closeAll()>:
c000e038:	53                   	push   ebx
c000e039:	83 ec 08             	sub    esp,0x8
c000e03c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e040:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e042:	6a 00                	push   0x0
c000e044:	6a 00                	push   0x0
c000e046:	6a 00                	push   0x0
c000e048:	53                   	push   ebx
c000e049:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e04c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e052:	83 c4 10             	add    esp,0x10
c000e055:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e058:	74 0f                	je     c000e069 <Device::closeAll()+0x31>
c000e05a:	83 ec 0c             	sub    esp,0xc
c000e05d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e060:	e8 d3 ff ff ff       	call   c000e038 <Device::closeAll()>
c000e065:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e067:	eb e9                	jmp    c000e052 <Device::closeAll()+0x1a>
c000e069:	83 c4 08             	add    esp,0x8
c000e06c:	5b                   	pop    ebx
c000e06d:	c3                   	ret    

c000e06e <Device::powerSavingAll(PowerSavingLevel)>:
c000e06e:	56                   	push   esi
c000e06f:	53                   	push   ebx
c000e070:	83 ec 0c             	sub    esp,0xc
c000e073:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e077:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e07b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e07d:	56                   	push   esi
c000e07e:	53                   	push   ebx
c000e07f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e082:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e08e:	74 0f                	je     c000e09f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e090:	52                   	push   edx
c000e091:	52                   	push   edx
c000e092:	56                   	push   esi
c000e093:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e096:	e8 d3 ff ff ff       	call   c000e06e <Device::powerSavingAll(PowerSavingLevel)>
c000e09b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e09d:	eb e9                	jmp    c000e088 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e09f:	58                   	pop    eax
c000e0a0:	5b                   	pop    ebx
c000e0a1:	5e                   	pop    esi
c000e0a2:	c3                   	ret    
c000e0a3:	90                   	nop

c000e0a4 <Device::setName(char const*)>:
c000e0a4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e0ac:	e9 8f 26 ff ff       	jmp    c0000740 <strcpy>
c000e0b1:	90                   	nop

c000e0b2 <Device::Device(char const*)>:
c000e0b2:	83 ec 1c             	sub    esp,0x1c
c000e0b5:	ba 50 33 02 c0       	mov    edx,0xc0023350
c000e0ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0be:	89 10                	mov    DWORD PTR [eax],edx
c000e0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e0ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0f8:	83 ec 08             	sub    esp,0x8
c000e0fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e103:	e8 9c ff ff ff       	call   c000e0a4 <Device::setName(char const*)>
c000e108:	83 c4 10             	add    esp,0x10
c000e10b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e113:	83 ec 0c             	sub    esp,0xc
c000e116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e11a:	e8 a4 b8 ff ff       	call   c00099c3 <malloc>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e128:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e12f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e133:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e143:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e14d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e153:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e15a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e15e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e169:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e174:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e17e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e182:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e18c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e190:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e19a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e19e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1a8:	90                   	nop
c000e1a9:	83 c4 1c             	add    esp,0x1c
c000e1ac:	c3                   	ret    
c000e1ad:	90                   	nop

c000e1ae <Device::getName()>:
c000e1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1b2:	05 d0 00 00 00       	add    eax,0xd0
c000e1b7:	c3                   	ret    

c000e1b8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e1b8:	83 ec 0c             	sub    esp,0xc
c000e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1bf:	83 ec 08             	sub    esp,0x8
c000e1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c6:	50                   	push   eax
c000e1c7:	e8 e6 fe ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	ba 7c 33 02 c0       	mov    edx,0xc002337c
c000e1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d8:	89 10                	mov    DWORD PTR [eax],edx
c000e1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1de:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1e8:	90                   	nop
c000e1e9:	83 c4 0c             	add    esp,0xc
c000e1ec:	c3                   	ret    
c000e1ed:	90                   	nop

c000e1ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1ee:	57                   	push   edi
c000e1ef:	56                   	push   esi
c000e1f0:	53                   	push   ebx
c000e1f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1fd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e203:	75 0c                	jne    c000e211 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e205:	52                   	push   edx
c000e206:	52                   	push   edx
c000e207:	53                   	push   ebx
c000e208:	56                   	push   esi
c000e209:	e8 c8 31 01 00       	call   c00213d6 <LinkedList<Device>::addElement(Device*)>
c000e20e:	83 c4 10             	add    esp,0x10
c000e211:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e217:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e21a:	74 12                	je     c000e22e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e21c:	50                   	push   eax
c000e21d:	57                   	push   edi
c000e21e:	56                   	push   esi
c000e21f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e222:	e8 c7 ff ff ff       	call   c000e1ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e227:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e229:	83 c4 10             	add    esp,0x10
c000e22c:	eb e9                	jmp    c000e217 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e22e:	5b                   	pop    ebx
c000e22f:	5e                   	pop    esi
c000e230:	5f                   	pop    edi
c000e231:	c3                   	ret    

c000e232 <getDevicesOfType(DeviceType)>:
c000e232:	53                   	push   ebx
c000e233:	83 ec 14             	sub    esp,0x14
c000e236:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e23a:	53                   	push   ebx
c000e23b:	e8 72 32 01 00       	call   c00214b2 <LinkedList<Device>::LinkedList()>
c000e240:	83 c4 0c             	add    esp,0xc
c000e243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e247:	53                   	push   ebx
c000e248:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c000e24e:	e8 9b ff ff ff       	call   c000e1ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e253:	89 d8                	mov    eax,ebx
c000e255:	83 c4 18             	add    esp,0x18
c000e258:	5b                   	pop    ebx
c000e259:	c2 04 00             	ret    0x4

c000e25c <HardDiskController::HardDiskController(char const*)>:
c000e25c:	83 ec 0c             	sub    esp,0xc
c000e25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e263:	83 ec 08             	sub    esp,0x8
c000e266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e26a:	50                   	push   eax
c000e26b:	e8 42 fe ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000e270:	83 c4 10             	add    esp,0x10
c000e273:	ba a8 33 02 c0       	mov    edx,0xc00233a8
c000e278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27c:	89 10                	mov    DWORD PTR [eax],edx
c000e27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e282:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e28c:	90                   	nop
c000e28d:	83 c4 0c             	add    esp,0xc
c000e290:	c3                   	ret    
c000e291:	90                   	nop
c000e292:	66 90                	xchg   ax,ax

c000e294 <HardDiskController::~HardDiskController()>:
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	ba a8 33 02 c0       	mov    edx,0xc00233a8
c000e29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a0:	89 10                	mov    DWORD PTR [eax],edx
c000e2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a6:	83 ec 0c             	sub    esp,0xc
c000e2a9:	50                   	push   eax
c000e2aa:	e8 cd fa ff ff       	call   c000dd7c <Device::~Device()>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	90                   	nop
c000e2b3:	83 c4 0c             	add    esp,0xc
c000e2b6:	c3                   	ret    
c000e2b7:	90                   	nop

c000e2b8 <HardDiskController::~HardDiskController()>:
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	83 ec 0c             	sub    esp,0xc
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 cd ff ff ff       	call   c000e294 <HardDiskController::~HardDiskController()>
c000e2c7:	83 c4 10             	add    esp,0x10
c000e2ca:	83 ec 08             	sub    esp,0x8
c000e2cd:	68 58 01 00 00       	push   0x158
c000e2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d6:	e8 ab e6 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	83 c4 0c             	add    esp,0xc
c000e2e1:	c3                   	ret    

c000e2e2 <PhysicalDisk::eject()>:
c000e2e2:	83 c8 ff             	or     eax,0xffffffff
c000e2e5:	c3                   	ret    

c000e2e6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ed:	83 ec 08             	sub    esp,0x8
c000e2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f4:	50                   	push   eax
c000e2f5:	e8 b8 fd ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000e2fa:	83 c4 10             	add    esp,0x10
c000e2fd:	ba d4 33 02 c0       	mov    edx,0xc00233d4
c000e302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e306:	89 10                	mov    DWORD PTR [eax],edx
c000e308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e317:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e322:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e330:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e334:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e348:	90                   	nop
c000e349:	83 c4 0c             	add    esp,0xc
c000e34c:	c3                   	ret    
c000e34d:	90                   	nop

c000e34e <PhysicalDisk::startCache()>:
c000e34e:	56                   	push   esi
c000e34f:	53                   	push   ebx
c000e350:	83 ec 10             	sub    esp,0x10
c000e353:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e357:	6a 44                	push   0x44
c000e359:	e8 65 b6 ff ff       	call   c00099c3 <malloc>
c000e35e:	89 c6                	mov    esi,eax
c000e360:	58                   	pop    eax
c000e361:	5a                   	pop    edx
c000e362:	53                   	push   ebx
c000e363:	56                   	push   esi
c000e364:	e8 2f 26 00 00       	call   c0010998 <VCache::VCache(PhysicalDisk*)>
c000e369:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e36f:	83 c4 14             	add    esp,0x14
c000e372:	5b                   	pop    ebx
c000e373:	5e                   	pop    esi
c000e374:	c3                   	ret    
c000e375:	90                   	nop

c000e376 <PhysicalDisk::~PhysicalDisk()>:
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	ba d4 33 02 c0       	mov    edx,0xc00233d4
c000e37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e382:	89 10                	mov    DWORD PTR [eax],edx
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	50                   	push   eax
c000e38c:	e8 eb f9 ff ff       	call   c000dd7c <Device::~Device()>
c000e391:	83 c4 10             	add    esp,0x10
c000e394:	90                   	nop
c000e395:	83 c4 0c             	add    esp,0xc
c000e398:	c3                   	ret    
c000e399:	90                   	nop

c000e39a <PhysicalDisk::~PhysicalDisk()>:
c000e39a:	83 ec 0c             	sub    esp,0xc
c000e39d:	83 ec 0c             	sub    esp,0xc
c000e3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a4:	e8 cd ff ff ff       	call   c000e376 <PhysicalDisk::~PhysicalDisk()>
c000e3a9:	83 c4 10             	add    esp,0x10
c000e3ac:	83 ec 08             	sub    esp,0x8
c000e3af:	68 6c 01 00 00       	push   0x16c
c000e3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b8:	e8 c9 e5 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000e3bd:	83 c4 10             	add    esp,0x10
c000e3c0:	83 c4 0c             	add    esp,0xc
c000e3c3:	c3                   	ret    

c000e3c4 <FPU::FPU(char const*)>:
c000e3c4:	83 ec 0c             	sub    esp,0xc
c000e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cb:	83 ec 08             	sub    esp,0x8
c000e3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d2:	50                   	push   eax
c000e3d3:	e8 da fc ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000e3d8:	83 c4 10             	add    esp,0x10
c000e3db:	ba 18 34 02 c0       	mov    edx,0xc0023418
c000e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e4:	89 10                	mov    DWORD PTR [eax],edx
c000e3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ea:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3f4:	90                   	nop
c000e3f5:	83 c4 0c             	add    esp,0xc
c000e3f8:	c3                   	ret    
c000e3f9:	90                   	nop
c000e3fa:	66 90                	xchg   ax,ax

c000e3fc <FPU::~FPU()>:
c000e3fc:	83 ec 0c             	sub    esp,0xc
c000e3ff:	ba 18 34 02 c0       	mov    edx,0xc0023418
c000e404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e408:	89 10                	mov    DWORD PTR [eax],edx
c000e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40e:	83 ec 0c             	sub    esp,0xc
c000e411:	50                   	push   eax
c000e412:	e8 65 f9 ff ff       	call   c000dd7c <Device::~Device()>
c000e417:	83 c4 10             	add    esp,0x10
c000e41a:	90                   	nop
c000e41b:	83 c4 0c             	add    esp,0xc
c000e41e:	c3                   	ret    
c000e41f:	90                   	nop

c000e420 <FPU::~FPU()>:
c000e420:	83 ec 0c             	sub    esp,0xc
c000e423:	83 ec 0c             	sub    esp,0xc
c000e426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42a:	e8 cd ff ff ff       	call   c000e3fc <FPU::~FPU()>
c000e42f:	83 c4 10             	add    esp,0x10
c000e432:	83 ec 08             	sub    esp,0x8
c000e435:	68 58 01 00 00       	push   0x158
c000e43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e43e:	e8 43 e5 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000e443:	83 c4 10             	add    esp,0x10
c000e446:	83 c4 0c             	add    esp,0xc
c000e449:	c3                   	ret    

c000e44a <setupFPU()>:
c000e44a:	53                   	push   ebx
c000e44b:	83 ec 08             	sub    esp,0x8
c000e44e:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c000e454:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e45b:	74 1b                	je     c000e478 <setupFPU()+0x2e>
c000e45d:	83 ec 0c             	sub    esp,0xc
c000e460:	68 58 01 00 00       	push   0x158
c000e465:	e8 59 b5 ff ff       	call   c00099c3 <malloc>
c000e46a:	89 c3                	mov    ebx,eax
c000e46c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e46f:	e8 48 16 01 00       	call   c001fabc <AVX::AVX()>
c000e474:	eb 62                	jmp    c000e4d8 <setupFPU()+0x8e>
c000e476:	66 90                	xchg   ax,ax
c000e478:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e47e:	84 c0                	test   al,al
c000e480:	79 1a                	jns    c000e49c <setupFPU()+0x52>
c000e482:	83 ec 0c             	sub    esp,0xc
c000e485:	68 58 01 00 00       	push   0x158
c000e48a:	e8 34 b5 ff ff       	call   c00099c3 <malloc>
c000e48f:	89 c3                	mov    ebx,eax
c000e491:	89 04 24             	mov    DWORD PTR [esp],eax
c000e494:	e8 53 17 01 00       	call   c001fbec <SSE::SSE()>
c000e499:	eb 3d                	jmp    c000e4d8 <setupFPU()+0x8e>
c000e49b:	90                   	nop
c000e49c:	a8 20                	test   al,0x20
c000e49e:	74 1c                	je     c000e4bc <setupFPU()+0x72>
c000e4a0:	83 ec 0c             	sub    esp,0xc
c000e4a3:	68 58 01 00 00       	push   0x158
c000e4a8:	e8 16 b5 ff ff       	call   c00099c3 <malloc>
c000e4ad:	89 c3                	mov    ebx,eax
c000e4af:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4b2:	e8 99 16 01 00       	call   c001fb50 <MMX::MMX()>
c000e4b7:	eb 1f                	jmp    c000e4d8 <setupFPU()+0x8e>
c000e4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4bc:	a8 10                	test   al,0x10
c000e4be:	74 20                	je     c000e4e0 <setupFPU()+0x96>
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	68 58 01 00 00       	push   0x158
c000e4c8:	e8 f6 b4 ff ff       	call   c00099c3 <malloc>
c000e4cd:	89 c3                	mov    ebx,eax
c000e4cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d2:	e8 a9 17 01 00       	call   c001fc80 <x87::x87()>
c000e4d7:	90                   	nop
c000e4d8:	83 c4 10             	add    esp,0x10
c000e4db:	eb 27                	jmp    c000e504 <setupFPU()+0xba>
c000e4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e0:	83 e0 ef             	and    eax,0xffffffef
c000e4e3:	83 ec 0c             	sub    esp,0xc
c000e4e6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4ec:	68 04 34 02 c0       	push   0xc0023404
c000e4f1:	e8 71 e5 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e4f6:	0f 20 c0             	mov    eax,cr0
c000e4f9:	83 c8 04             	or     eax,0x4
c000e4fc:	0f 22 c0             	mov    cr0,eax
c000e4ff:	31 db                	xor    ebx,ebx
c000e501:	83 c4 10             	add    esp,0x10
c000e504:	89 d8                	mov    eax,ebx
c000e506:	83 c4 08             	add    esp,0x8
c000e509:	5b                   	pop    ebx
c000e50a:	c3                   	ret    
c000e50b:	90                   	nop

c000e50c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e514:	c1 e0 04             	shl    eax,0x4
c000e517:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e51b:	8d 50 10             	lea    edx,[eax+0x10]
c000e51e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e524:	74 08                	je     c000e52e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e526:	83 c0 04             	add    eax,0x4
c000e529:	39 d0                	cmp    eax,edx
c000e52b:	75 f1                	jne    c000e51e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e52d:	c3                   	ret    
c000e52e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e538:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e542:	eb e2                	jmp    c000e526 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e544 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e544:	57                   	push   edi
c000e545:	31 c0                	xor    eax,eax
c000e547:	56                   	push   esi
c000e548:	53                   	push   ebx
c000e549:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e54d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e551:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e555:	89 da                	mov    edx,ebx
c000e557:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e55b:	c1 e2 04             	shl    edx,0x4
c000e55e:	01 ca                	add    edx,ecx
c000e560:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e568:	74 16                	je     c000e580 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e56a:	40                   	inc    eax
c000e56b:	83 f8 04             	cmp    eax,0x4
c000e56e:	75 f0                	jne    c000e560 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e570:	c7 44 24 10 48 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023448
c000e578:	5b                   	pop    ebx
c000e579:	5e                   	pop    esi
c000e57a:	5f                   	pop    edi
c000e57b:	e9 a9 5d 00 00       	jmp    c0014329 <Krnl::panic(char const*)>
c000e580:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e583:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e586:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e58c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e592:	5b                   	pop    ebx
c000e593:	5e                   	pop    esi
c000e594:	5f                   	pop    edi
c000e595:	c3                   	ret    

c000e596 <doubleFault(regs*, void*)>:
c000e596:	55                   	push   ebp
c000e597:	89 e5                	mov    ebp,esp
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	83 ec 0c             	sub    esp,0xc
c000e59f:	68 55 34 02 c0       	push   0xc0023455
c000e5a4:	e8 80 5d 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000e5a9:	83 c4 10             	add    esp,0x10
c000e5ac:	90                   	nop
c000e5ad:	c9                   	leave  
c000e5ae:	c3                   	ret    
c000e5af:	90                   	nop

c000e5b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5b0:	56                   	push   esi
c000e5b1:	53                   	push   ebx
c000e5b2:	50                   	push   eax
c000e5b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5bb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e5c0:	75 35                	jne    c000e5f7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e5c2:	8d 43 20             	lea    eax,[ebx+0x20]
c000e5c5:	31 d2                	xor    edx,edx
c000e5c7:	89 c1                	mov    ecx,eax
c000e5c9:	c1 e1 04             	shl    ecx,0x4
c000e5cc:	01 f1                	add    ecx,esi
c000e5ce:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e5d6:	74 3e                	je     c000e616 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5d8:	42                   	inc    edx
c000e5d9:	83 fa 04             	cmp    edx,0x4
c000e5dc:	75 f0                	jne    c000e5ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5de:	83 ec 0c             	sub    esp,0xc
c000e5e1:	68 6f 34 02 c0       	push   0xc002346f
c000e5e6:	e8 3e 5d 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000e5eb:	83 c4 10             	add    esp,0x10
c000e5ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5f3:	5a                   	pop    edx
c000e5f4:	5b                   	pop    ebx
c000e5f5:	5e                   	pop    esi
c000e5f6:	c3                   	ret    
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	56                   	push   esi
c000e5fb:	e8 ae fb ff ff       	call   c000e1ae <Device::getName()>
c000e600:	83 c4 10             	add    esp,0x10
c000e603:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e606:	75 ba                	jne    c000e5c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e608:	83 fb 0f             	cmp    ebx,0xf
c000e60b:	7f 29                	jg     c000e636 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e60d:	0f b6 9b c0 5a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda540]
c000e614:	eb ac                	jmp    c000e5c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e616:	8d 04 82             	lea    eax,[edx+eax*4]
c000e619:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e61d:	8d 04 86             	lea    eax,[esi+eax*4]
c000e620:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e626:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e62a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e630:	89 d8                	mov    eax,ebx
c000e632:	5a                   	pop    edx
c000e633:	5b                   	pop    ebx
c000e634:	5e                   	pop    esi
c000e635:	c3                   	ret    
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	68 62 34 02 c0       	push   0xc0023462
c000e63e:	e8 e6 5c 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000e643:	83 c4 10             	add    esp,0x10
c000e646:	e9 77 ff ff ff       	jmp    c000e5c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e64b:	90                   	nop

c000e64c <InterruptController::clearAllHandlers(int, bool)>:
c000e64c:	56                   	push   esi
c000e64d:	53                   	push   ebx
c000e64e:	52                   	push   edx
c000e64f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e657:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e65c:	75 61                	jne    c000e6bf <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e65e:	8d 46 20             	lea    eax,[esi+0x20]
c000e661:	c1 e6 04             	shl    esi,0x4
c000e664:	c1 e0 04             	shl    eax,0x4
c000e667:	01 de                	add    esi,ebx
c000e669:	01 d8                	add    eax,ebx
c000e66b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e675:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e67f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e689:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e693:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e69d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6a7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6b1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e6bb:	58                   	pop    eax
c000e6bc:	5b                   	pop    ebx
c000e6bd:	5e                   	pop    esi
c000e6be:	c3                   	ret    
c000e6bf:	83 ec 0c             	sub    esp,0xc
c000e6c2:	53                   	push   ebx
c000e6c3:	e8 e6 fa ff ff       	call   c000e1ae <Device::getName()>
c000e6c8:	83 c4 10             	add    esp,0x10
c000e6cb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6ce:	75 8e                	jne    c000e65e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6d0:	83 fe 0f             	cmp    esi,0xf
c000e6d3:	7f 09                	jg     c000e6de <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e6d5:	0f b6 b6 c0 5a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda540]
c000e6dc:	eb 80                	jmp    c000e65e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6de:	83 ec 0c             	sub    esp,0xc
c000e6e1:	68 7c 34 02 c0       	push   0xc002347c
c000e6e6:	e8 3e 5c 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	e9 6b ff ff ff       	jmp    c000e65e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6f3:	90                   	nop

c000e6f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6f4:	56                   	push   esi
c000e6f5:	53                   	push   ebx
c000e6f6:	52                   	push   edx
c000e6f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6ff:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e704:	75 3a                	jne    c000e740 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e706:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e70a:	8d 50 20             	lea    edx,[eax+0x20]
c000e70d:	c1 e2 04             	shl    edx,0x4
c000e710:	8d 04 16             	lea    eax,[esi+edx*1]
c000e713:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e717:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e71d:	74 0b                	je     c000e72a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e71f:	83 c0 04             	add    eax,0x4
c000e722:	39 d0                	cmp    eax,edx
c000e724:	75 f1                	jne    c000e717 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e726:	58                   	pop    eax
c000e727:	5b                   	pop    ebx
c000e728:	5e                   	pop    esi
c000e729:	c3                   	ret    
c000e72a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e734:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e73e:	eb df                	jmp    c000e71f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	56                   	push   esi
c000e744:	e8 65 fa ff ff       	call   c000e1ae <Device::getName()>
c000e749:	83 c4 10             	add    esp,0x10
c000e74c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e74f:	75 b5                	jne    c000e706 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e751:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e756:	7f 11                	jg     c000e769 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e758:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e75c:	0f b6 80 c0 5a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda540]
c000e763:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e767:	eb 9d                	jmp    c000e706 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e769:	83 ec 0c             	sub    esp,0xc
c000e76c:	68 89 34 02 c0       	push   0xc0023489
c000e771:	e8 b3 5b 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000e776:	83 c4 10             	add    esp,0x10
c000e779:	eb 8b                	jmp    c000e706 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e77b <nmiHandler(regs*, void*)>:
c000e77b:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000e780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e784:	e9 05 aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e789 <int_handler>:
c000e789:	55                   	push   ebp
c000e78a:	57                   	push   edi
c000e78b:	56                   	push   esi
c000e78c:	53                   	push   ebx
c000e78d:	83 ec 0c             	sub    esp,0xc
c000e790:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e794:	80 3d e4 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ee4,0x0
c000e79b:	74 0b                	je     c000e7a8 <int_handler+0x1f>
c000e79d:	fa                   	cli    
c000e79e:	f4                   	hlt    
c000e79f:	80 3d e4 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ee4,0x0
c000e7a6:	75 f5                	jne    c000e79d <int_handler+0x14>
c000e7a8:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000e7ad:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7b6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e7bc:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7bf:	83 f8 17             	cmp    eax,0x17
c000e7c2:	77 13                	ja     c000e7d7 <int_handler+0x4e>
c000e7c4:	83 ec 08             	sub    esp,0x8
c000e7c7:	8b 17                	mov    edx,DWORD PTR [edi]
c000e7c9:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7cc:	0f b6 c0             	movzx  eax,al
c000e7cf:	50                   	push   eax
c000e7d0:	57                   	push   edi
c000e7d1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	83 c3 15             	add    ebx,0x15
c000e7da:	c1 e3 04             	shl    ebx,0x4
c000e7dd:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7e1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7e8:	31 db                	xor    ebx,ebx
c000e7ea:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7ee:	85 c0                	test   eax,eax
c000e7f0:	74 13                	je     c000e805 <int_handler+0x7c>
c000e7f2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7f5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7f9:	74 1c                	je     c000e817 <int_handler+0x8e>
c000e7fb:	83 ec 08             	sub    esp,0x8
c000e7fe:	52                   	push   edx
c000e7ff:	56                   	push   esi
c000e800:	ff d0                	call   eax
c000e802:	83 c4 10             	add    esp,0x10
c000e805:	43                   	inc    ebx
c000e806:	83 fb 04             	cmp    ebx,0x4
c000e809:	75 df                	jne    c000e7ea <int_handler+0x61>
c000e80b:	83 c4 0c             	add    esp,0xc
c000e80e:	31 c0                	xor    eax,eax
c000e810:	5b                   	pop    ebx
c000e811:	31 d2                	xor    edx,edx
c000e813:	5e                   	pop    esi
c000e814:	5f                   	pop    edi
c000e815:	5d                   	pop    ebp
c000e816:	c3                   	ret    
c000e817:	83 ec 08             	sub    esp,0x8
c000e81a:	52                   	push   edx
c000e81b:	56                   	push   esi
c000e81c:	ff d0                	call   eax
c000e81e:	83 c4 10             	add    esp,0x10
c000e821:	83 c4 0c             	add    esp,0xc
c000e824:	5b                   	pop    ebx
c000e825:	5e                   	pop    esi
c000e826:	5f                   	pop    edi
c000e827:	5d                   	pop    ebp
c000e828:	c3                   	ret    
c000e829:	90                   	nop

c000e82a <InterruptController::InterruptController(char const*)>:
c000e82a:	83 ec 1c             	sub    esp,0x1c
c000e82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e831:	83 ec 08             	sub    esp,0x8
c000e834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e838:	50                   	push   eax
c000e839:	e8 74 f8 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000e83e:	83 c4 10             	add    esp,0x10
c000e841:	ba 40 37 02 c0       	mov    edx,0xc0023740
c000e846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e84a:	89 10                	mov    DWORD PTR [eax],edx
c000e84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e850:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e85a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e862:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e86a:	7f 5e                	jg     c000e8ca <InterruptController::InterruptController(char const*)+0xa0>
c000e86c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e874:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e879:	7f 49                	jg     c000e8c4 <InterruptController::InterruptController(char const*)+0x9a>
c000e87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e87f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e883:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e88a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e88e:	01 ca                	add    edx,ecx
c000e890:	83 c2 54             	add    edx,0x54
c000e893:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e89b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8ae:	01 ca                	add    edx,ecx
c000e8b0:	81 c2 54 04 00 00    	add    edx,0x454
c000e8b6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8be:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e8c2:	eb b0                	jmp    c000e874 <InterruptController::InterruptController(char const*)+0x4a>
c000e8c4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8c8:	eb 98                	jmp    c000e862 <InterruptController::InterruptController(char const*)+0x38>
c000e8ca:	90                   	nop
c000e8cb:	83 c4 1c             	add    esp,0x1c
c000e8ce:	c3                   	ret    
c000e8cf:	90                   	nop

c000e8d0 <InterruptController::~InterruptController()>:
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	ba 40 37 02 c0       	mov    edx,0xc0023740
c000e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8dc:	89 10                	mov    DWORD PTR [eax],edx
c000e8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e2:	83 ec 0c             	sub    esp,0xc
c000e8e5:	50                   	push   eax
c000e8e6:	e8 91 f4 ff ff       	call   c000dd7c <Device::~Device()>
c000e8eb:	83 c4 10             	add    esp,0x10
c000e8ee:	90                   	nop
c000e8ef:	83 c4 0c             	add    esp,0xc
c000e8f2:	c3                   	ret    
c000e8f3:	90                   	nop

c000e8f4 <InterruptController::~InterruptController()>:
c000e8f4:	83 ec 0c             	sub    esp,0xc
c000e8f7:	83 ec 0c             	sub    esp,0xc
c000e8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8fe:	e8 cd ff ff ff       	call   c000e8d0 <InterruptController::~InterruptController()>
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	83 ec 08             	sub    esp,0x8
c000e909:	68 58 21 00 00       	push   0x2158
c000e90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e912:	e8 6f e0 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000e917:	83 c4 10             	add    esp,0x10
c000e91a:	83 c4 0c             	add    esp,0xc
c000e91d:	c3                   	ret    

c000e91e <displayDebugInfo(regs*)>:
c000e91e:	55                   	push   ebp
c000e91f:	57                   	push   edi
c000e920:	56                   	push   esi
c000e921:	53                   	push   ebx
c000e922:	83 ec 24             	sub    esp,0x24
c000e925:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e929:	0f 20 c2             	mov    edx,cr0
c000e92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e930:	0f 20 d7             	mov    edi,cr2
c000e933:	0f 20 de             	mov    esi,cr3
c000e936:	0f 20 e5             	mov    ebp,cr4
c000e939:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e93c:	68 96 34 02 c0       	push   0xc0023496
c000e941:	e8 21 e1 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e946:	59                   	pop    ecx
c000e947:	58                   	pop    eax
c000e948:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e94b:	68 a1 34 02 c0       	push   0xc00234a1
c000e950:	e8 12 e1 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e955:	58                   	pop    eax
c000e956:	5a                   	pop    edx
c000e957:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e95a:	68 ac 34 02 c0       	push   0xc00234ac
c000e95f:	e8 03 e1 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e964:	59                   	pop    ecx
c000e965:	58                   	pop    eax
c000e966:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e969:	68 b7 34 02 c0       	push   0xc00234b7
c000e96e:	e8 f4 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e973:	58                   	pop    eax
c000e974:	5a                   	pop    edx
c000e975:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e978:	68 c2 34 02 c0       	push   0xc00234c2
c000e97d:	e8 e5 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e982:	59                   	pop    ecx
c000e983:	58                   	pop    eax
c000e984:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e987:	68 cd 34 02 c0       	push   0xc00234cd
c000e98c:	e8 d6 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e991:	58                   	pop    eax
c000e992:	5a                   	pop    edx
c000e993:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e996:	68 d8 34 02 c0       	push   0xc00234d8
c000e99b:	e8 c7 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9a0:	59                   	pop    ecx
c000e9a1:	58                   	pop    eax
c000e9a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9a5:	68 e3 34 02 c0       	push   0xc00234e3
c000e9aa:	e8 b8 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9af:	58                   	pop    eax
c000e9b0:	5a                   	pop    edx
c000e9b1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9b4:	68 ee 34 02 c0       	push   0xc00234ee
c000e9b9:	e8 a9 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9be:	59                   	pop    ecx
c000e9bf:	58                   	pop    eax
c000e9c0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e9c3:	68 fd 34 02 c0       	push   0xc00234fd
c000e9c8:	e8 9a e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9cd:	58                   	pop    eax
c000e9ce:	5a                   	pop    edx
c000e9cf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e9d2:	68 08 35 02 c0       	push   0xc0023508
c000e9d7:	e8 8b e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9dc:	59                   	pop    ecx
c000e9dd:	58                   	pop    eax
c000e9de:	57                   	push   edi
c000e9df:	68 13 35 02 c0       	push   0xc0023513
c000e9e4:	e8 7e e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9e9:	58                   	pop    eax
c000e9ea:	5a                   	pop    edx
c000e9eb:	56                   	push   esi
c000e9ec:	68 1e 35 02 c0       	push   0xc002351e
c000e9f1:	e8 71 e0 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000e9f6:	59                   	pop    ecx
c000e9f7:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000e9fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea02:	e8 be bd ff ff       	call   c000a7c5 <setActiveTerminal(VgaText*)>
c000ea07:	58                   	pop    eax
c000ea08:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea0b:	5a                   	pop    edx
c000ea0c:	c1 e0 05             	shl    eax,0x5
c000ea0f:	05 20 58 02 c0       	add    eax,0xc0025820
c000ea14:	50                   	push   eax
c000ea15:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea20:	e8 ad c2 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ea25:	59                   	pop    ecx
c000ea26:	58                   	pop    eax
c000ea27:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea2c:	68 29 35 02 c0       	push   0xc0023529
c000ea31:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea37:	e8 96 c2 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ea3c:	58                   	pop    eax
c000ea3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea42:	5a                   	pop    edx
c000ea43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea46:	83 c0 0c             	add    eax,0xc
c000ea49:	50                   	push   eax
c000ea4a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea4f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea55:	e8 78 c2 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ea5a:	59                   	pop    ecx
c000ea5b:	58                   	pop    eax
c000ea5c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea61:	68 32 35 02 c0       	push   0xc0023532
c000ea66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea6c:	e8 61 c2 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ea71:	58                   	pop    eax
c000ea72:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea77:	5a                   	pop    edx
c000ea78:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea7b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea81:	e8 06 c2 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ea86:	59                   	pop    ecx
c000ea87:	58                   	pop    eax
c000ea88:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea8d:	68 3a 35 02 c0       	push   0xc002353a
c000ea92:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea98:	e8 35 c2 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ea9d:	58                   	pop    eax
c000ea9e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eaa3:	5a                   	pop    edx
c000eaa4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eaa7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaad:	e8 da c1 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000eab2:	59                   	pop    ecx
c000eab3:	58                   	pop    eax
c000eab4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eab9:	68 42 35 02 c0       	push   0xc0023542
c000eabe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac4:	e8 09 c2 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000eac9:	58                   	pop    eax
c000eaca:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eacf:	5a                   	pop    edx
c000ead0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ead3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ead9:	e8 ae c1 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000eade:	59                   	pop    ecx
c000eadf:	58                   	pop    eax
c000eae0:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eae5:	68 4a 35 02 c0       	push   0xc002354a
c000eaea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf0:	e8 dd c1 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000eaf5:	58                   	pop    eax
c000eaf6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eafb:	5a                   	pop    edx
c000eafc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eaff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb05:	e8 82 c1 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000eb0a:	59                   	pop    ecx
c000eb0b:	58                   	pop    eax
c000eb0c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb11:	68 52 35 02 c0       	push   0xc0023552
c000eb16:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb1c:	e8 b1 c1 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000eb21:	58                   	pop    eax
c000eb22:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb27:	5a                   	pop    edx
c000eb28:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb2b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb31:	e8 56 c1 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000eb36:	59                   	pop    ecx
c000eb37:	58                   	pop    eax
c000eb38:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb3d:	68 5a 35 02 c0       	push   0xc002355a
c000eb42:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb48:	e8 85 c1 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000eb4d:	58                   	pop    eax
c000eb4e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb53:	5a                   	pop    edx
c000eb54:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb57:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb5d:	e8 2a c1 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000eb62:	59                   	pop    ecx
c000eb63:	58                   	pop    eax
c000eb64:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb69:	68 62 35 02 c0       	push   0xc0023562
c000eb6e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb74:	e8 59 c1 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000eb79:	58                   	pop    eax
c000eb7a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb7f:	5a                   	pop    edx
c000eb80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb84:	52                   	push   edx
c000eb85:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb8b:	e8 fc c0 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000eb90:	59                   	pop    ecx
c000eb91:	58                   	pop    eax
c000eb92:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb97:	68 6b 35 02 c0       	push   0xc002356b
c000eb9c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eba2:	e8 2b c1 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000eba7:	58                   	pop    eax
c000eba8:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebad:	5a                   	pop    edx
c000ebae:	57                   	push   edi
c000ebaf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb5:	e8 d2 c0 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ebba:	59                   	pop    ecx
c000ebbb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebc0:	5f                   	pop    edi
c000ebc1:	68 73 35 02 c0       	push   0xc0023573
c000ebc6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebcc:	e8 01 c1 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ebd1:	58                   	pop    eax
c000ebd2:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebd7:	5a                   	pop    edx
c000ebd8:	56                   	push   esi
c000ebd9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebdf:	e8 a8 c0 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ebe4:	59                   	pop    ecx
c000ebe5:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebea:	5e                   	pop    esi
c000ebeb:	68 7b 35 02 c0       	push   0xc002357b
c000ebf0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebf6:	e8 d7 c0 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ebfb:	5f                   	pop    edi
c000ebfc:	58                   	pop    eax
c000ebfd:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec02:	55                   	push   ebp
c000ec03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec09:	e8 7e c0 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ec0e:	58                   	pop    eax
c000ec0f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec14:	5a                   	pop    edx
c000ec15:	68 83 35 02 c0       	push   0xc0023583
c000ec1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec20:	e8 ad c0 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ec25:	0f 21 c0             	mov    eax,db0
c000ec28:	59                   	pop    ecx
c000ec29:	5e                   	pop    esi
c000ec2a:	50                   	push   eax
c000ec2b:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec30:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec36:	e8 51 c0 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ec3b:	5f                   	pop    edi
c000ec3c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec41:	5d                   	pop    ebp
c000ec42:	68 8c 35 02 c0       	push   0xc002358c
c000ec47:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec4d:	e8 80 c0 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ec52:	0f 21 c8             	mov    eax,db1
c000ec55:	5a                   	pop    edx
c000ec56:	59                   	pop    ecx
c000ec57:	50                   	push   eax
c000ec58:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec5d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec63:	e8 24 c0 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ec68:	5e                   	pop    esi
c000ec69:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec6e:	5f                   	pop    edi
c000ec6f:	68 94 35 02 c0       	push   0xc0023594
c000ec74:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec7a:	e8 53 c0 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ec7f:	0f 21 d0             	mov    eax,db2
c000ec82:	5d                   	pop    ebp
c000ec83:	5a                   	pop    edx
c000ec84:	50                   	push   eax
c000ec85:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec8a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec90:	e8 f7 bf ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ec95:	59                   	pop    ecx
c000ec96:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec9b:	5e                   	pop    esi
c000ec9c:	68 9c 35 02 c0       	push   0xc002359c
c000eca1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca7:	e8 26 c0 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ecac:	0f 21 d8             	mov    eax,db3
c000ecaf:	5f                   	pop    edi
c000ecb0:	5d                   	pop    ebp
c000ecb1:	50                   	push   eax
c000ecb2:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecb7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecbd:	e8 ca bf ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ecc2:	58                   	pop    eax
c000ecc3:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecc8:	5a                   	pop    edx
c000ecc9:	68 a4 35 02 c0       	push   0xc00235a4
c000ecce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd4:	e8 f9 bf ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ecd9:	0f 21 f0             	mov    eax,db6
c000ecdc:	59                   	pop    ecx
c000ecdd:	5e                   	pop    esi
c000ecde:	50                   	push   eax
c000ecdf:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ece4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecea:	e8 9d bf ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ecef:	5f                   	pop    edi
c000ecf0:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecf5:	5d                   	pop    ebp
c000ecf6:	68 ac 35 02 c0       	push   0xc00235ac
c000ecfb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed01:	e8 cc bf ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ed06:	0f 21 f8             	mov    eax,db7
c000ed09:	5a                   	pop    edx
c000ed0a:	59                   	pop    ecx
c000ed0b:	50                   	push   eax
c000ed0c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed11:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed17:	e8 70 bf ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ed1c:	5e                   	pop    esi
c000ed1d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed20:	e8 a0 87 00 00       	call   c00174c5 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	85 c0                	test   eax,eax
c000ed2a:	74 7d                	je     c000eda9 <displayDebugInfo(regs*)+0x48b>
c000ed2c:	89 c6                	mov    esi,eax
c000ed2e:	50                   	push   eax
c000ed2f:	50                   	push   eax
c000ed30:	56                   	push   esi
c000ed31:	68 b4 35 02 c0       	push   0xc00235b4
c000ed36:	e8 2c dd ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000ed3b:	5a                   	pop    edx
c000ed3c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed41:	59                   	pop    ecx
c000ed42:	68 c2 35 02 c0       	push   0xc00235c2
c000ed47:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed4d:	e8 80 bf ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ed52:	5f                   	pop    edi
c000ed53:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed58:	5d                   	pop    ebp
c000ed59:	56                   	push   esi
c000ed5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed60:	e8 6d bf ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ed65:	58                   	pop    eax
c000ed66:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed6b:	5a                   	pop    edx
c000ed6c:	68 ce 35 02 c0       	push   0xc00235ce
c000ed71:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed77:	e8 56 bf ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c000ed7c:	59                   	pop    ecx
c000ed7d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed82:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed88:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed8b:	e8 6c 87 00 00       	call   c00174fc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed90:	5b                   	pop    ebx
c000ed91:	5d                   	pop    ebp
c000ed92:	50                   	push   eax
c000ed93:	57                   	push   edi
c000ed94:	e8 f3 be ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c000ed99:	58                   	pop    eax
c000ed9a:	5a                   	pop    edx
c000ed9b:	56                   	push   esi
c000ed9c:	68 da 35 02 c0       	push   0xc00235da
c000eda1:	e8 c1 dc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000eda6:	83 c4 10             	add    esp,0x10
c000eda9:	fa                   	cli    
c000edaa:	f4                   	hlt    
c000edab:	eb fe                	jmp    c000edab <displayDebugInfo(regs*)+0x48d>

c000edad <x87EmulHandler(regs*, void*)>:
c000edad:	83 ec 0c             	sub    esp,0xc
c000edb0:	0f 20 c2             	mov    edx,cr0
c000edb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edb8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000edbc:	75 4b                	jne    c000ee09 <x87EmulHandler(regs*, void*)+0x5c>
c000edbe:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000edc3:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000edc9:	85 c0                	test   eax,eax
c000edcb:	74 05                	je     c000edd2 <x87EmulHandler(regs*, void*)+0x25>
c000edcd:	83 e2 08             	and    edx,0x8
c000edd0:	75 17                	jne    c000ede9 <x87EmulHandler(regs*, void*)+0x3c>
c000edd2:	83 ec 0c             	sub    esp,0xc
c000edd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edd9:	e8 94 ab 00 00       	call   c0019972 <Vm::x87Handler(regs*)>
c000edde:	83 c4 10             	add    esp,0x10
c000ede1:	84 c0                	test   al,al
c000ede3:	74 24                	je     c000ee09 <x87EmulHandler(regs*, void*)+0x5c>
c000ede5:	83 c4 0c             	add    esp,0xc
c000ede8:	c3                   	ret    
c000ede9:	83 ec 0c             	sub    esp,0xc
c000edec:	68 00 36 02 c0       	push   0xc0023600
c000edf1:	e8 71 dc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000edf6:	0f 06                	clts   
c000edf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edfd:	83 c4 10             	add    esp,0x10
c000ee00:	a3 48 65 02 c0       	mov    ds:0xc0026548,eax
c000ee05:	83 c4 0c             	add    esp,0xc
c000ee08:	c3                   	ret    
c000ee09:	83 ec 0c             	sub    esp,0xc
c000ee0c:	68 ea 35 02 c0       	push   0xc00235ea
c000ee11:	e8 51 dc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000ee16:	5a                   	pop    edx
c000ee17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee1b:	e8 fe fa ff ff       	call   c000e91e <displayDebugInfo(regs*)>

c000ee20 <gpFault(regs*, void*)>:
c000ee20:	53                   	push   ebx
c000ee21:	83 ec 14             	sub    esp,0x14
c000ee24:	c7 05 44 65 02 c0 2e 8e 01 c0 	mov    DWORD PTR ds:0xc0026544,0xc0018e2e
c000ee2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee32:	53                   	push   ebx
c000ee33:	e8 f6 9f 00 00       	call   c0018e2e <Vm::faultHandler(regs*)>
c000ee38:	83 c4 10             	add    esp,0x10
c000ee3b:	84 c0                	test   al,al
c000ee3d:	74 05                	je     c000ee44 <gpFault(regs*, void*)+0x24>
c000ee3f:	83 c4 08             	add    esp,0x8
c000ee42:	5b                   	pop    ebx
c000ee43:	c3                   	ret    
c000ee44:	83 ec 0c             	sub    esp,0xc
c000ee47:	68 0d 36 02 c0       	push   0xc002360d
c000ee4c:	e8 16 dc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000ee51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee54:	e8 c5 fa ff ff       	call   c000e91e <displayDebugInfo(regs*)>

c000ee59 <pgFault(regs*, void*)>:
c000ee59:	53                   	push   ebx
c000ee5a:	83 ec 10             	sub    esp,0x10
c000ee5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee61:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee64:	68 28 36 02 c0       	push   0xc0023628
c000ee69:	e8 f9 db ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000ee6e:	0f 20 d0             	mov    eax,cr2
c000ee71:	5a                   	pop    edx
c000ee72:	59                   	pop    ecx
c000ee73:	50                   	push   eax
c000ee74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee7c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee82:	e8 e7 d6 ff ff       	call   c000c56e <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee87:	83 c4 10             	add    esp,0x10
c000ee8a:	84 c0                	test   al,al
c000ee8c:	74 05                	je     c000ee93 <pgFault(regs*, void*)+0x3a>
c000ee8e:	83 c4 08             	add    esp,0x8
c000ee91:	5b                   	pop    ebx
c000ee92:	c3                   	ret    
c000ee93:	83 ec 0c             	sub    esp,0xc
c000ee96:	68 3d 36 02 c0       	push   0xc002363d
c000ee9b:	e8 c7 db ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000eea0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eea3:	e8 76 fa ff ff       	call   c000e91e <displayDebugInfo(regs*)>

c000eea8 <otherISRHandler(regs*, void*)>:
c000eea8:	53                   	push   ebx
c000eea9:	83 ec 0c             	sub    esp,0xc
c000eeac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eeb0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eeb3:	50                   	push   eax
c000eeb4:	50                   	push   eax
c000eeb5:	68 4a 36 02 c0       	push   0xc002364a
c000eeba:	e8 a8 db ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000eebf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec2:	e8 57 fa ff ff       	call   c000e91e <displayDebugInfo(regs*)>

c000eec7 <opcodeFault(regs*, void*)>:
c000eec7:	55                   	push   ebp
c000eec8:	89 e5                	mov    ebp,esp
c000eeca:	56                   	push   esi
c000eecb:	53                   	push   ebx
c000eecc:	83 ec 30             	sub    esp,0x30
c000eecf:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000eed4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eeda:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eee0:	84 c0                	test   al,al
c000eee2:	74 24                	je     c000ef08 <opcodeFault(regs*, void*)+0x41>
c000eee4:	83 ec 0c             	sub    esp,0xc
c000eee7:	68 68 36 02 c0       	push   0xc0023668
c000eeec:	e8 76 db ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000eef1:	83 c4 10             	add    esp,0x10
c000eef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eef7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eefa:	8d 50 19             	lea    edx,[eax+0x19]
c000eefd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef03:	e9 7b 03 00 00       	jmp    c000f283 <opcodeFault(regs*, void*)+0x3bc>
c000ef08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef0b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef0e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef11:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef18:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef21:	8a 00                	mov    al,BYTE PTR [eax]
c000ef23:	3c f0                	cmp    al,0xf0
c000ef25:	75 17                	jne    c000ef3e <opcodeFault(regs*, void*)+0x77>
c000ef27:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef30:	8d 50 01             	lea    edx,[eax+0x1]
c000ef33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef39:	e9 d6 00 00 00       	jmp    c000f014 <opcodeFault(regs*, void*)+0x14d>
c000ef3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef41:	8a 00                	mov    al,BYTE PTR [eax]
c000ef43:	3c f2                	cmp    al,0xf2
c000ef45:	74 09                	je     c000ef50 <opcodeFault(regs*, void*)+0x89>
c000ef47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef4a:	8a 00                	mov    al,BYTE PTR [eax]
c000ef4c:	3c f3                	cmp    al,0xf3
c000ef4e:	75 1b                	jne    c000ef6b <opcodeFault(regs*, void*)+0xa4>
c000ef50:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef54:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef5d:	8d 50 01             	lea    edx,[eax+0x1]
c000ef60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef63:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef66:	e9 a9 00 00 00       	jmp    c000f014 <opcodeFault(regs*, void*)+0x14d>
c000ef6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef6e:	8a 00                	mov    al,BYTE PTR [eax]
c000ef70:	3c 66                	cmp    al,0x66
c000ef72:	75 1b                	jne    c000ef8f <opcodeFault(regs*, void*)+0xc8>
c000ef74:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef78:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef7e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef81:	8d 50 01             	lea    edx,[eax+0x1]
c000ef84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef87:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef8a:	e9 85 00 00 00       	jmp    c000f014 <opcodeFault(regs*, void*)+0x14d>
c000ef8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef92:	8a 00                	mov    al,BYTE PTR [eax]
c000ef94:	3c 67                	cmp    al,0x67
c000ef96:	75 18                	jne    c000efb0 <opcodeFault(regs*, void*)+0xe9>
c000ef98:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef9c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa5:	8d 50 01             	lea    edx,[eax+0x1]
c000efa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efae:	eb 64                	jmp    c000f014 <opcodeFault(regs*, void*)+0x14d>
c000efb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb3:	8a 00                	mov    al,BYTE PTR [eax]
c000efb5:	3c 2e                	cmp    al,0x2e
c000efb7:	74 09                	je     c000efc2 <opcodeFault(regs*, void*)+0xfb>
c000efb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efbc:	8a 00                	mov    al,BYTE PTR [eax]
c000efbe:	3c 3e                	cmp    al,0x3e
c000efc0:	75 18                	jne    c000efda <opcodeFault(regs*, void*)+0x113>
c000efc2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efc6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efcc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efcf:	8d 50 01             	lea    edx,[eax+0x1]
c000efd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efd8:	eb 3a                	jmp    c000f014 <opcodeFault(regs*, void*)+0x14d>
c000efda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efdd:	8a 00                	mov    al,BYTE PTR [eax]
c000efdf:	3c 36                	cmp    al,0x36
c000efe1:	74 1b                	je     c000effe <opcodeFault(regs*, void*)+0x137>
c000efe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe6:	8a 00                	mov    al,BYTE PTR [eax]
c000efe8:	3c 26                	cmp    al,0x26
c000efea:	74 12                	je     c000effe <opcodeFault(regs*, void*)+0x137>
c000efec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efef:	8a 00                	mov    al,BYTE PTR [eax]
c000eff1:	3c 64                	cmp    al,0x64
c000eff3:	74 09                	je     c000effe <opcodeFault(regs*, void*)+0x137>
c000eff5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eff8:	8a 00                	mov    al,BYTE PTR [eax]
c000effa:	3c 65                	cmp    al,0x65
c000effc:	75 16                	jne    c000f014 <opcodeFault(regs*, void*)+0x14d>
c000effe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f002:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f008:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f00b:	8d 50 01             	lea    edx,[eax+0x1]
c000f00e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f011:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f014:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f017:	8a 00                	mov    al,BYTE PTR [eax]
c000f019:	3c 0f                	cmp    al,0xf
c000f01b:	0f 85 8d 01 00 00    	jne    c000f1ae <opcodeFault(regs*, void*)+0x2e7>
c000f021:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f024:	40                   	inc    eax
c000f025:	8a 00                	mov    al,BYTE PTR [eax]
c000f027:	3c c7                	cmp    al,0xc7
c000f029:	0f 85 7f 01 00 00    	jne    c000f1ae <opcodeFault(regs*, void*)+0x2e7>
c000f02f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f035:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f038:	8d 50 01             	lea    edx,[eax+0x1]
c000f03b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f03e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f041:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f044:	50                   	push   eax
c000f045:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f048:	50                   	push   eax
c000f049:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f04c:	50                   	push   eax
c000f04d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f050:	e8 ed 49 00 00       	call   c0013a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f05b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f05e:	83 f0 01             	xor    eax,0x1
c000f061:	84 c0                	test   al,al
c000f063:	0f 84 45 01 00 00    	je     c000f1ae <opcodeFault(regs*, void*)+0x2e7>
c000f069:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f06c:	3c 01                	cmp    al,0x1
c000f06e:	0f 85 3a 01 00 00    	jne    c000f1ae <opcodeFault(regs*, void*)+0x2e7>
c000f074:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f077:	83 f0 01             	xor    eax,0x1
c000f07a:	84 c0                	test   al,al
c000f07c:	0f 84 2c 01 00 00    	je     c000f1ae <opcodeFault(regs*, void*)+0x2e7>
c000f082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f085:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f088:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f08b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f092:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f095:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f098:	89 c2                	mov    edx,eax
c000f09a:	b8 00 00 00 00       	mov    eax,0x0
c000f09f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0a2:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f0ab:	ba 00 00 00 00       	mov    edx,0x0
c000f0b0:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f0b3:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f0b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f0bc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0bf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f0c6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0c9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0cc:	89 c2                	mov    edx,eax
c000f0ce:	b8 00 00 00 00       	mov    eax,0x0
c000f0d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0d6:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0df:	ba 00 00 00 00       	mov    edx,0x0
c000f0e4:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0e7:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0ea:	fa                   	cli    
c000f0eb:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f0f0:	40                   	inc    eax
c000f0f1:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f0f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0f9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fe:	89 c1                	mov    ecx,eax
c000f100:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f103:	89 cb                	mov    ebx,ecx
c000f105:	89 d0                	mov    eax,edx
c000f107:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f10a:	89 c6                	mov    esi,eax
c000f10c:	89 f0                	mov    eax,esi
c000f10e:	09 d8                	or     eax,ebx
c000f110:	85 c0                	test   eax,eax
c000f112:	75 21                	jne    c000f135 <opcodeFault(regs*, void*)+0x26e>
c000f114:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f117:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f11a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f11d:	89 01                	mov    DWORD PTR [ecx],eax
c000f11f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f125:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f128:	83 c8 40             	or     eax,0x40
c000f12b:	89 c2                	mov    edx,eax
c000f12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f130:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f133:	eb 3e                	jmp    c000f173 <opcodeFault(regs*, void*)+0x2ac>
c000f135:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f13b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f13d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f140:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f143:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f149:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f14c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f14f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f152:	89 d0                	mov    eax,edx
c000f154:	31 d2                	xor    edx,edx
c000f156:	89 c3                	mov    ebx,eax
c000f158:	89 d6                	mov    esi,edx
c000f15a:	89 da                	mov    edx,ebx
c000f15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f15f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f165:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f168:	83 e0 bf             	and    eax,0xffffffbf
c000f16b:	89 c2                	mov    edx,eax
c000f16d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f170:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f173:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f178:	48                   	dec    eax
c000f179:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f17e:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f183:	85 c0                	test   eax,eax
c000f185:	75 01                	jne    c000f188 <opcodeFault(regs*, void*)+0x2c1>
c000f187:	fb                   	sti    
c000f188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f18e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f191:	01 c2                	add    edx,eax
c000f193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f196:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	68 8b 36 02 c0       	push   0xc002368b
c000f1a1:	e8 c1 d8 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000f1a6:	83 c4 10             	add    esp,0x10
c000f1a9:	e9 d5 00 00 00       	jmp    c000f283 <opcodeFault(regs*, void*)+0x3bc>
c000f1ae:	83 ec 0c             	sub    esp,0xc
c000f1b1:	68 9e 36 02 c0       	push   0xc002369e
c000f1b6:	e8 ac d8 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000f1bb:	83 c4 10             	add    esp,0x10
c000f1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1ca:	c1 e0 04             	shl    eax,0x4
c000f1cd:	01 d0                	add    eax,edx
c000f1cf:	83 c0 03             	add    eax,0x3
c000f1d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d4:	0f b6 d8             	movzx  ebx,al
c000f1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1da:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1e3:	c1 e0 04             	shl    eax,0x4
c000f1e6:	01 d0                	add    eax,edx
c000f1e8:	83 c0 02             	add    eax,0x2
c000f1eb:	8a 00                	mov    al,BYTE PTR [eax]
c000f1ed:	0f b6 c8             	movzx  ecx,al
c000f1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1fc:	c1 e0 04             	shl    eax,0x4
c000f1ff:	01 d0                	add    eax,edx
c000f201:	40                   	inc    eax
c000f202:	8a 00                	mov    al,BYTE PTR [eax]
c000f204:	0f b6 d0             	movzx  edx,al
c000f207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f20d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f210:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f213:	c1 e0 04             	shl    eax,0x4
c000f216:	01 f0                	add    eax,esi
c000f218:	8a 00                	mov    al,BYTE PTR [eax]
c000f21a:	0f b6 c0             	movzx  eax,al
c000f21d:	83 ec 0c             	sub    esp,0xc
c000f220:	53                   	push   ebx
c000f221:	51                   	push   ecx
c000f222:	52                   	push   edx
c000f223:	50                   	push   eax
c000f224:	68 b0 36 02 c0       	push   0xc00236b0
c000f229:	e8 39 d8 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000f22e:	83 c4 20             	add    esp,0x20
c000f231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f234:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f237:	83 c0 03             	add    eax,0x3
c000f23a:	8a 00                	mov    al,BYTE PTR [eax]
c000f23c:	0f b6 d8             	movzx  ebx,al
c000f23f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f242:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f245:	83 c0 02             	add    eax,0x2
c000f248:	8a 00                	mov    al,BYTE PTR [eax]
c000f24a:	0f b6 c8             	movzx  ecx,al
c000f24d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f250:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f253:	40                   	inc    eax
c000f254:	8a 00                	mov    al,BYTE PTR [eax]
c000f256:	0f b6 d0             	movzx  edx,al
c000f259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f25f:	8a 00                	mov    al,BYTE PTR [eax]
c000f261:	0f b6 c0             	movzx  eax,al
c000f264:	83 ec 0c             	sub    esp,0xc
c000f267:	53                   	push   ebx
c000f268:	51                   	push   ecx
c000f269:	52                   	push   edx
c000f26a:	50                   	push   eax
c000f26b:	68 d8 36 02 c0       	push   0xc00236d8
c000f270:	e8 f2 d7 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c000f275:	83 c4 20             	add    esp,0x20
c000f278:	83 ec 0c             	sub    esp,0xc
c000f27b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f27e:	e8 9b f6 ff ff       	call   c000e91e <displayDebugInfo(regs*)>
c000f283:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f286:	5b                   	pop    ebx
c000f287:	5e                   	pop    esi
c000f288:	5d                   	pop    ebp
c000f289:	c3                   	ret    

c000f28a <displayProgramFault(char const*)>:
c000f28a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f28f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f292:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f298:	85 c0                	test   eax,eax
c000f29a:	74 15                	je     c000f2b1 <displayProgramFault(char const*)+0x27>
c000f29c:	83 ec 0c             	sub    esp,0xc
c000f29f:	6a 04                	push   0x4
c000f2a1:	6a 0f                	push   0xf
c000f2a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2a7:	50                   	push   eax
c000f2a8:	e8 21 b7 ff ff       	call   c000a9ce <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f2ad:	83 c4 1c             	add    esp,0x1c
c000f2b0:	c3                   	ret    
c000f2b1:	c3                   	ret    

c000f2b2 <setupInterruptController()>:
c000f2b2:	55                   	push   ebp
c000f2b3:	89 e5                	mov    ebp,esp
c000f2b5:	53                   	push   ebx
c000f2b6:	83 ec 24             	sub    esp,0x24
c000f2b9:	b8 00 00 00 00       	mov    eax,0x0
c000f2be:	85 c0                	test   eax,eax
c000f2c0:	0f 95 c0             	setne  al
c000f2c3:	84 c0                	test   al,al
c000f2c5:	74 5b                	je     c000f322 <setupInterruptController()+0x70>
c000f2c7:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f2ce:	83 ec 0c             	sub    esp,0xc
c000f2d1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2d4:	e8 ea a6 ff ff       	call   c00099c3 <malloc>
c000f2d9:	83 c4 10             	add    esp,0x10
c000f2dc:	89 c3                	mov    ebx,eax
c000f2de:	83 ec 0c             	sub    esp,0xc
c000f2e1:	53                   	push   ebx
c000f2e2:	e8 d7 0b 01 00       	call   c001febe <APIC::APIC()>
c000f2e7:	83 c4 10             	add    esp,0x10
c000f2ea:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f5:	83 c0 08             	add    eax,0x8
c000f2f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2fa:	6a 00                	push   0x0
c000f2fc:	6a 00                	push   0x0
c000f2fe:	6a 00                	push   0x0
c000f300:	52                   	push   edx
c000f301:	ff d0                	call   eax
c000f303:	83 c4 10             	add    esp,0x10
c000f306:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f30b:	83 ec 08             	sub    esp,0x8
c000f30e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f311:	50                   	push   eax
c000f312:	e8 97 eb ff ff       	call   c000deae <Device::addChild(Device*)>
c000f317:	83 c4 10             	add    esp,0x10
c000f31a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f31d:	e9 79 03 00 00       	jmp    c000f69b <setupInterruptController()+0x3e9>
c000f322:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c000f327:	84 c0                	test   al,al
c000f329:	75 14                	jne    c000f33f <setupInterruptController()+0x8d>
c000f32b:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f330:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f336:	83 e2 fe             	and    edx,0xfffffffe
c000f339:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f33f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f344:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f34a:	83 e0 01             	and    eax,0x1
c000f34d:	84 c0                	test   al,al
c000f34f:	0f 95 c0             	setne  al
c000f352:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f355:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f35c:	83 ec 0c             	sub    esp,0xc
c000f35f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f362:	e8 5c a6 ff ff       	call   c00099c3 <malloc>
c000f367:	83 c4 10             	add    esp,0x10
c000f36a:	89 c3                	mov    ebx,eax
c000f36c:	83 ec 0c             	sub    esp,0xc
c000f36f:	53                   	push   ebx
c000f370:	e8 a1 10 01 00       	call   c0020416 <PIC::PIC()>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f37b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f37e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f381:	8b 00                	mov    eax,DWORD PTR [eax]
c000f383:	83 c0 08             	add    eax,0x8
c000f386:	8b 00                	mov    eax,DWORD PTR [eax]
c000f388:	6a 00                	push   0x0
c000f38a:	6a 00                	push   0x0
c000f38c:	6a 00                	push   0x0
c000f38e:	52                   	push   edx
c000f38f:	ff d0                	call   eax
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f398:	74 73                	je     c000f40d <setupInterruptController()+0x15b>
c000f39a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f39d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a2:	83 c0 0c             	add    eax,0xc
c000f3a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a7:	6a 00                	push   0x0
c000f3a9:	6a 00                	push   0x0
c000f3ab:	6a 00                	push   0x0
c000f3ad:	52                   	push   edx
c000f3ae:	ff d0                	call   eax
c000f3b0:	83 c4 10             	add    esp,0x10
c000f3b3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f3b7:	74 15                	je     c000f3ce <setupInterruptController()+0x11c>
c000f3b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3be:	83 c0 04             	add    eax,0x4
c000f3c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c3:	83 ec 0c             	sub    esp,0xc
c000f3c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3c9:	ff d0                	call   eax
c000f3cb:	83 c4 10             	add    esp,0x10
c000f3ce:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f3d5:	83 ec 0c             	sub    esp,0xc
c000f3d8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3db:	e8 e3 a5 ff ff       	call   c00099c3 <malloc>
c000f3e0:	83 c4 10             	add    esp,0x10
c000f3e3:	89 c3                	mov    ebx,eax
c000f3e5:	83 ec 0c             	sub    esp,0xc
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 d0 0a 01 00       	call   c001febe <APIC::APIC()>
c000f3ee:	83 c4 10             	add    esp,0x10
c000f3f1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3f4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fc:	83 c0 08             	add    eax,0x8
c000f3ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f401:	6a 00                	push   0x0
c000f403:	6a 00                	push   0x0
c000f405:	6a 00                	push   0x0
c000f407:	52                   	push   edx
c000f408:	ff d0                	call   eax
c000f40a:	83 c4 10             	add    esp,0x10
c000f40d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000f412:	83 ec 08             	sub    esp,0x8
c000f415:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f418:	50                   	push   eax
c000f419:	e8 90 ea ff ff       	call   c000deae <Device::addChild(Device*)>
c000f41e:	83 c4 10             	add    esp,0x10
c000f421:	c7 05 48 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026548,0x0
c000f42b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f42e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f430:	83 c0 24             	add    eax,0x24
c000f433:	8b 00                	mov    eax,DWORD PTR [eax]
c000f435:	6a 00                	push   0x0
c000f437:	68 a8 ee 00 c0       	push   0xc000eea8
c000f43c:	6a 00                	push   0x0
c000f43e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f441:	ff d0                	call   eax
c000f443:	83 c4 10             	add    esp,0x10
c000f446:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f449:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44b:	83 c0 24             	add    eax,0x24
c000f44e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f450:	6a 00                	push   0x0
c000f452:	68 a8 ee 00 c0       	push   0xc000eea8
c000f457:	6a 01                	push   0x1
c000f459:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f45c:	ff d0                	call   eax
c000f45e:	83 c4 10             	add    esp,0x10
c000f461:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f464:	8b 00                	mov    eax,DWORD PTR [eax]
c000f466:	83 c0 24             	add    eax,0x24
c000f469:	8b 00                	mov    eax,DWORD PTR [eax]
c000f46b:	6a 00                	push   0x0
c000f46d:	68 7b e7 00 c0       	push   0xc000e77b
c000f472:	6a 02                	push   0x2
c000f474:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f477:	ff d0                	call   eax
c000f479:	83 c4 10             	add    esp,0x10
c000f47c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f47f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f481:	83 c0 24             	add    eax,0x24
c000f484:	8b 00                	mov    eax,DWORD PTR [eax]
c000f486:	6a 00                	push   0x0
c000f488:	68 a8 ee 00 c0       	push   0xc000eea8
c000f48d:	6a 03                	push   0x3
c000f48f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f492:	ff d0                	call   eax
c000f494:	83 c4 10             	add    esp,0x10
c000f497:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f49a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49c:	83 c0 24             	add    eax,0x24
c000f49f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a1:	6a 00                	push   0x0
c000f4a3:	68 a8 ee 00 c0       	push   0xc000eea8
c000f4a8:	6a 04                	push   0x4
c000f4aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ad:	ff d0                	call   eax
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b7:	83 c0 24             	add    eax,0x24
c000f4ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 a8 ee 00 c0       	push   0xc000eea8
c000f4c3:	6a 05                	push   0x5
c000f4c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4c8:	ff d0                	call   eax
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d2:	83 c0 24             	add    eax,0x24
c000f4d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d7:	6a 00                	push   0x0
c000f4d9:	68 c7 ee 00 c0       	push   0xc000eec7
c000f4de:	6a 06                	push   0x6
c000f4e0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4e3:	ff d0                	call   eax
c000f4e5:	83 c4 10             	add    esp,0x10
c000f4e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ed:	83 c0 24             	add    eax,0x24
c000f4f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f2:	6a 00                	push   0x0
c000f4f4:	68 ad ed 00 c0       	push   0xc000edad
c000f4f9:	6a 07                	push   0x7
c000f4fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4fe:	ff d0                	call   eax
c000f500:	83 c4 10             	add    esp,0x10
c000f503:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f506:	8b 00                	mov    eax,DWORD PTR [eax]
c000f508:	83 c0 24             	add    eax,0x24
c000f50b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f50d:	6a 00                	push   0x0
c000f50f:	68 96 e5 00 c0       	push   0xc000e596
c000f514:	6a 08                	push   0x8
c000f516:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f519:	ff d0                	call   eax
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f521:	8b 00                	mov    eax,DWORD PTR [eax]
c000f523:	83 c0 24             	add    eax,0x24
c000f526:	8b 00                	mov    eax,DWORD PTR [eax]
c000f528:	6a 00                	push   0x0
c000f52a:	68 a8 ee 00 c0       	push   0xc000eea8
c000f52f:	6a 09                	push   0x9
c000f531:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f534:	ff d0                	call   eax
c000f536:	83 c4 10             	add    esp,0x10
c000f539:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f53c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53e:	83 c0 24             	add    eax,0x24
c000f541:	8b 00                	mov    eax,DWORD PTR [eax]
c000f543:	6a 00                	push   0x0
c000f545:	68 a8 ee 00 c0       	push   0xc000eea8
c000f54a:	6a 0a                	push   0xa
c000f54c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f54f:	ff d0                	call   eax
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f557:	8b 00                	mov    eax,DWORD PTR [eax]
c000f559:	83 c0 24             	add    eax,0x24
c000f55c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55e:	6a 00                	push   0x0
c000f560:	68 a8 ee 00 c0       	push   0xc000eea8
c000f565:	6a 0b                	push   0xb
c000f567:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f56a:	ff d0                	call   eax
c000f56c:	83 c4 10             	add    esp,0x10
c000f56f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f572:	8b 00                	mov    eax,DWORD PTR [eax]
c000f574:	83 c0 24             	add    eax,0x24
c000f577:	8b 00                	mov    eax,DWORD PTR [eax]
c000f579:	6a 00                	push   0x0
c000f57b:	68 a8 ee 00 c0       	push   0xc000eea8
c000f580:	6a 0c                	push   0xc
c000f582:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f585:	ff d0                	call   eax
c000f587:	83 c4 10             	add    esp,0x10
c000f58a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f58d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58f:	83 c0 24             	add    eax,0x24
c000f592:	8b 00                	mov    eax,DWORD PTR [eax]
c000f594:	6a 00                	push   0x0
c000f596:	68 20 ee 00 c0       	push   0xc000ee20
c000f59b:	6a 0d                	push   0xd
c000f59d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5a0:	ff d0                	call   eax
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5aa:	83 c0 24             	add    eax,0x24
c000f5ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 59 ee 00 c0       	push   0xc000ee59
c000f5b6:	6a 0e                	push   0xe
c000f5b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5bb:	ff d0                	call   eax
c000f5bd:	83 c4 10             	add    esp,0x10
c000f5c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c5:	83 c0 24             	add    eax,0x24
c000f5c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ca:	6a 00                	push   0x0
c000f5cc:	68 a8 ee 00 c0       	push   0xc000eea8
c000f5d1:	6a 0f                	push   0xf
c000f5d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5d6:	ff d0                	call   eax
c000f5d8:	83 c4 10             	add    esp,0x10
c000f5db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e0:	83 c0 24             	add    eax,0x24
c000f5e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 a8 ee 00 c0       	push   0xc000eea8
c000f5ec:	6a 10                	push   0x10
c000f5ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5f1:	ff d0                	call   eax
c000f5f3:	83 c4 10             	add    esp,0x10
c000f5f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5fb:	83 c0 24             	add    eax,0x24
c000f5fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f600:	6a 00                	push   0x0
c000f602:	68 a8 ee 00 c0       	push   0xc000eea8
c000f607:	6a 11                	push   0x11
c000f609:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f60c:	ff d0                	call   eax
c000f60e:	83 c4 10             	add    esp,0x10
c000f611:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f614:	8b 00                	mov    eax,DWORD PTR [eax]
c000f616:	83 c0 24             	add    eax,0x24
c000f619:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61b:	6a 00                	push   0x0
c000f61d:	68 a8 ee 00 c0       	push   0xc000eea8
c000f622:	6a 12                	push   0x12
c000f624:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f627:	ff d0                	call   eax
c000f629:	83 c4 10             	add    esp,0x10
c000f62c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f62f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f631:	83 c0 24             	add    eax,0x24
c000f634:	8b 00                	mov    eax,DWORD PTR [eax]
c000f636:	6a 00                	push   0x0
c000f638:	68 a8 ee 00 c0       	push   0xc000eea8
c000f63d:	6a 13                	push   0x13
c000f63f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f642:	ff d0                	call   eax
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f64a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64c:	83 c0 24             	add    eax,0x24
c000f64f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f651:	6a 00                	push   0x0
c000f653:	68 a8 ee 00 c0       	push   0xc000eea8
c000f658:	6a 14                	push   0x14
c000f65a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f65d:	ff d0                	call   eax
c000f65f:	83 c4 10             	add    esp,0x10
c000f662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f665:	8b 00                	mov    eax,DWORD PTR [eax]
c000f667:	83 c0 24             	add    eax,0x24
c000f66a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f66c:	6a 00                	push   0x0
c000f66e:	68 a8 ee 00 c0       	push   0xc000eea8
c000f673:	6a 1e                	push   0x1e
c000f675:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f678:	ff d0                	call   eax
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f680:	8b 00                	mov    eax,DWORD PTR [eax]
c000f682:	83 c0 24             	add    eax,0x24
c000f685:	8b 00                	mov    eax,DWORD PTR [eax]
c000f687:	6a 00                	push   0x0
c000f689:	68 3b 65 01 c0       	push   0xc001653b
c000f68e:	6a 60                	push   0x60
c000f690:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f693:	ff d0                	call   eax
c000f695:	83 c4 10             	add    esp,0x10
c000f698:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f69b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f69e:	c9                   	leave  
c000f69f:	c3                   	ret    

c000f6a0 <InterruptController::convertLegacyIRQNumber(int)>:
c000f6a0:	55                   	push   ebp
c000f6a1:	89 e5                	mov    ebp,esp
c000f6a3:	83 ec 08             	sub    esp,0x8
c000f6a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a9:	83 ec 0c             	sub    esp,0xc
c000f6ac:	50                   	push   eax
c000f6ad:	e8 fc ea ff ff       	call   c000e1ae <Device::getName()>
c000f6b2:	83 c4 10             	add    esp,0x10
c000f6b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f6b7:	3c 41                	cmp    al,0x41
c000f6b9:	0f 94 c0             	sete   al
c000f6bc:	84 c0                	test   al,al
c000f6be:	74 28                	je     c000f6e8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6c0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f6c4:	7f 12                	jg     c000f6d8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f6c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6c9:	05 c0 5a 02 c0       	add    eax,0xc0025ac0
c000f6ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d0:	0f b6 c0             	movzx  eax,al
c000f6d3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f6d6:	eb 10                	jmp    c000f6e8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6d8:	83 ec 0c             	sub    esp,0xc
c000f6db:	68 00 37 02 c0       	push   0xc0023700
c000f6e0:	e8 44 4c 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000f6e5:	83 c4 10             	add    esp,0x10
c000f6e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6eb:	c9                   	leave  
c000f6ec:	c3                   	ret    
c000f6ed:	90                   	nop

c000f6ee <startGUI(void*)>:
c000f6ee:	55                   	push   ebp
c000f6ef:	89 e5                	mov    ebp,esp
c000f6f1:	53                   	push   ebx
c000f6f2:	83 ec 04             	sub    esp,0x4
c000f6f5:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f6fa:	48                   	dec    eax
c000f6fb:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f700:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f705:	85 c0                	test   eax,eax
c000f707:	75 01                	jne    c000f70a <startGUI(void*)+0x1c>
c000f709:	fb                   	sti    
c000f70a:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f710:	83 ec 08             	sub    esp,0x8
c000f713:	6a 01                	push   0x1
c000f715:	68 80 37 02 c0       	push   0xc0023780
c000f71a:	e8 f7 7d 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c000f71f:	83 c4 10             	add    esp,0x10
c000f722:	83 ec 08             	sub    esp,0x8
c000f725:	53                   	push   ebx
c000f726:	50                   	push   eax
c000f727:	e8 1b 80 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c000f72c:	83 c4 10             	add    esp,0x10
c000f72f:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f735:	83 ec 08             	sub    esp,0x8
c000f738:	6a 01                	push   0x1
c000f73a:	68 9a 37 02 c0       	push   0xc002379a
c000f73f:	e8 d2 7d 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c000f744:	83 c4 10             	add    esp,0x10
c000f747:	83 ec 08             	sub    esp,0x8
c000f74a:	53                   	push   ebx
c000f74b:	50                   	push   eax
c000f74c:	e8 f6 7f 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	90                   	nop
c000f755:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f758:	c9                   	leave  
c000f759:	c3                   	ret    

c000f75a <startGUIVESA(void*)>:
c000f75a:	55                   	push   ebp
c000f75b:	89 e5                	mov    ebp,esp
c000f75d:	53                   	push   ebx
c000f75e:	83 ec 04             	sub    esp,0x4
c000f761:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f766:	48                   	dec    eax
c000f767:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f76c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f771:	85 c0                	test   eax,eax
c000f773:	75 01                	jne    c000f776 <startGUIVESA(void*)+0x1c>
c000f775:	fb                   	sti    
c000f776:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f77c:	83 ec 08             	sub    esp,0x8
c000f77f:	6a 01                	push   0x1
c000f781:	68 b4 37 02 c0       	push   0xc00237b4
c000f786:	e8 8b 7d 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	83 ec 08             	sub    esp,0x8
c000f791:	53                   	push   ebx
c000f792:	50                   	push   eax
c000f793:	e8 af 7f 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c000f798:	83 c4 10             	add    esp,0x10
c000f79b:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c000f7a1:	83 ec 08             	sub    esp,0x8
c000f7a4:	6a 01                	push   0x1
c000f7a6:	68 9a 37 02 c0       	push   0xc002379a
c000f7ab:	e8 66 7d 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c000f7b0:	83 c4 10             	add    esp,0x10
c000f7b3:	83 ec 08             	sub    esp,0x8
c000f7b6:	53                   	push   ebx
c000f7b7:	50                   	push   eax
c000f7b8:	e8 8a 7f 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	90                   	nop
c000f7c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7c4:	c9                   	leave  
c000f7c5:	c3                   	ret    

c000f7c6 <sendKeyToTerminal(unsigned char)>:
c000f7c6:	55                   	push   ebp
c000f7c7:	89 e5                	mov    ebp,esp
c000f7c9:	83 ec 28             	sub    esp,0x28
c000f7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7cf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f7d2:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c000f7d7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7db:	83 ec 08             	sub    esp,0x8
c000f7de:	52                   	push   edx
c000f7df:	50                   	push   eax
c000f7e0:	e8 91 b6 ff ff       	call   c000ae76 <VgaText::receiveKey(unsigned char)>
c000f7e5:	83 c4 10             	add    esp,0x10
c000f7e8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7ec:	0f 85 8f 00 00 00    	jne    c000f881 <sendKeyToTerminal(unsigned char)+0xbb>
c000f7f2:	fa                   	cli    
c000f7f3:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f7f8:	40                   	inc    eax
c000f7f9:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f7fe:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f803:	40                   	inc    eax
c000f804:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c000f809:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c000f80e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f811:	c7 05 60 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026560,0x0
c000f81b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f81f:	74 1f                	je     c000f840 <sendKeyToTerminal(unsigned char)+0x7a>
c000f821:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f824:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f827:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f82a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f82d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f830:	83 ec 0c             	sub    esp,0xc
c000f833:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f836:	e8 7d 8b 00 00       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	eb db                	jmp    c000f81b <sendKeyToTerminal(unsigned char)+0x55>
c000f840:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f845:	48                   	dec    eax
c000f846:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c000f84b:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f850:	85 c0                	test   eax,eax
c000f852:	75 18                	jne    c000f86c <sendKeyToTerminal(unsigned char)+0xa6>
c000f854:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c000f859:	85 c0                	test   eax,eax
c000f85b:	74 0f                	je     c000f86c <sendKeyToTerminal(unsigned char)+0xa6>
c000f85d:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c000f867:	e8 90 86 00 00       	call   c0017efc <schedule()>
c000f86c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f871:	48                   	dec    eax
c000f872:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f877:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f87c:	85 c0                	test   eax,eax
c000f87e:	75 01                	jne    c000f881 <sendKeyToTerminal(unsigned char)+0xbb>
c000f880:	fb                   	sti    
c000f881:	90                   	nop
c000f882:	c9                   	leave  
c000f883:	c3                   	ret    

c000f884 <sendKeyboardToken(KeyboardToken)>:
c000f884:	55                   	push   ebp
c000f885:	89 e5                	mov    ebp,esp
c000f887:	83 ec 18             	sub    esp,0x18
c000f88a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f890:	0f b7 c0             	movzx  eax,ax
c000f893:	83 f2 01             	xor    edx,0x1
c000f896:	88 90 80 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9a80],dl
c000f89c:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000f8a1:	85 c0                	test   eax,eax
c000f8a3:	74 24                	je     c000f8c9 <sendKeyboardToken(KeyboardToken)+0x45>
c000f8a5:	8b 0d 68 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026568
c000f8ab:	83 ec 04             	sub    esp,0x4
c000f8ae:	68 80 65 02 c0       	push   0xc0026580
c000f8b3:	83 ec 08             	sub    esp,0x8
c000f8b6:	89 e2                	mov    edx,esp
c000f8b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8bb:	89 02                	mov    DWORD PTR [edx],eax
c000f8bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8c0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f8c4:	ff d1                	call   ecx
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8cc:	66 3d 03 02          	cmp    ax,0x203
c000f8d0:	75 07                	jne    c000f8d9 <sendKeyboardToken(KeyboardToken)+0x55>
c000f8d2:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000f8d7:	84 c0                	test   al,al
c000f8d9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8dd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8e0:	a0 88 69 02 c0       	mov    al,ds:0xc0026988
c000f8e5:	38 c2                	cmp    dl,al
c000f8e7:	74 1c                	je     c000f905 <sendKeyboardToken(KeyboardToken)+0x81>
c000f8e9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8ec:	a2 88 69 02 c0       	mov    ds:0xc0026988,al
c000f8f1:	a0 88 69 02 c0       	mov    al,ds:0xc0026988
c000f8f6:	0f b6 c0             	movzx  eax,al
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	50                   	push   eax
c000f8fd:	e8 b4 ab ff ff       	call   c000a4b6 <setTerminalScrollLock(bool)>
c000f902:	83 c4 10             	add    esp,0x10
c000f905:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f908:	84 c0                	test   al,al
c000f90a:	0f 84 ae 00 00 00    	je     c000f9be <sendKeyboardToken(KeyboardToken)+0x13a>
c000f910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f913:	66 3d 10 03          	cmp    ax,0x310
c000f917:	75 06                	jne    c000f91f <sendKeyboardToken(KeyboardToken)+0x9b>
c000f919:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f91f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f922:	66 3d 11 03          	cmp    ax,0x311
c000f926:	75 06                	jne    c000f92e <sendKeyboardToken(KeyboardToken)+0xaa>
c000f928:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f931:	66 3d 12 03          	cmp    ax,0x312
c000f935:	75 06                	jne    c000f93d <sendKeyboardToken(KeyboardToken)+0xb9>
c000f937:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f940:	66 3d 13 03          	cmp    ax,0x313
c000f944:	75 06                	jne    c000f94c <sendKeyboardToken(KeyboardToken)+0xc8>
c000f946:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94f:	66 3d 14 03          	cmp    ax,0x314
c000f953:	75 06                	jne    c000f95b <sendKeyboardToken(KeyboardToken)+0xd7>
c000f955:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f95e:	66 3d 15 03          	cmp    ax,0x315
c000f962:	75 06                	jne    c000f96a <sendKeyboardToken(KeyboardToken)+0xe6>
c000f964:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f96d:	66 3d 16 03          	cmp    ax,0x316
c000f971:	75 06                	jne    c000f979 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f973:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f97c:	66 3d 17 03          	cmp    ax,0x317
c000f980:	75 06                	jne    c000f988 <sendKeyboardToken(KeyboardToken)+0x104>
c000f982:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f98b:	66 3d 18 03          	cmp    ax,0x318
c000f98f:	75 06                	jne    c000f997 <sendKeyboardToken(KeyboardToken)+0x113>
c000f991:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99a:	66 3d 19 03          	cmp    ax,0x319
c000f99e:	75 06                	jne    c000f9a6 <sendKeyboardToken(KeyboardToken)+0x122>
c000f9a0:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f9a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a9:	66 3d 1a 03          	cmp    ax,0x31a
c000f9ad:	0f 85 c9 00 00 00    	jne    c000fa7c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9b3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f9b9:	e9 be 00 00 00       	jmp    c000fa7c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c1:	66 3d 10 03          	cmp    ax,0x310
c000f9c5:	75 0a                	jne    c000f9d1 <sendKeyboardToken(KeyboardToken)+0x14d>
c000f9c7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f9cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d4:	66 3d 11 03          	cmp    ax,0x311
c000f9d8:	75 0a                	jne    c000f9e4 <sendKeyboardToken(KeyboardToken)+0x160>
c000f9da:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e7:	66 3d 12 03          	cmp    ax,0x312
c000f9eb:	75 0a                	jne    c000f9f7 <sendKeyboardToken(KeyboardToken)+0x173>
c000f9ed:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9fa:	66 3d 13 03          	cmp    ax,0x313
c000f9fe:	75 0a                	jne    c000fa0a <sendKeyboardToken(KeyboardToken)+0x186>
c000fa00:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa06:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0d:	66 3d 14 03          	cmp    ax,0x314
c000fa11:	75 0a                	jne    c000fa1d <sendKeyboardToken(KeyboardToken)+0x199>
c000fa13:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa19:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa20:	66 3d 15 03          	cmp    ax,0x315
c000fa24:	75 0a                	jne    c000fa30 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa26:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa33:	66 3d 16 03          	cmp    ax,0x316
c000fa37:	75 0a                	jne    c000fa43 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa39:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa46:	66 3d 17 03          	cmp    ax,0x317
c000fa4a:	75 0a                	jne    c000fa56 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa4c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa52:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa59:	66 3d 18 03          	cmp    ax,0x318
c000fa5d:	75 0a                	jne    c000fa69 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa5f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa6c:	66 3d 19 03          	cmp    ax,0x319
c000fa70:	75 0a                	jne    c000fa7c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa72:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa7f:	66 3d 00 02          	cmp    ax,0x200
c000fa83:	75 2c                	jne    c000fab1 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa85:	a0 80 69 02 c0       	mov    al,ds:0xc0026980
c000fa8a:	83 f0 01             	xor    eax,0x1
c000fa8d:	84 c0                	test   al,al
c000fa8f:	74 20                	je     c000fab1 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa91:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000fa96:	6a 01                	push   0x1
c000fa98:	6a 00                	push   0x0
c000fa9a:	68 ee f6 00 c0       	push   0xc000f6ee
c000fa9f:	50                   	push   eax
c000faa0:	e8 3b 82 00 00       	call   c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	c6 05 80 69 02 c0 01 	mov    BYTE PTR ds:0xc0026980,0x1
c000faaf:	eb 33                	jmp    c000fae4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab4:	66 3d 01 02          	cmp    ax,0x201
c000fab8:	75 2a                	jne    c000fae4 <sendKeyboardToken(KeyboardToken)+0x260>
c000faba:	a0 80 69 02 c0       	mov    al,ds:0xc0026980
c000fabf:	83 f0 01             	xor    eax,0x1
c000fac2:	84 c0                	test   al,al
c000fac4:	74 1e                	je     c000fae4 <sendKeyboardToken(KeyboardToken)+0x260>
c000fac6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000facb:	6a 01                	push   0x1
c000facd:	6a 00                	push   0x0
c000facf:	68 5a f7 00 c0       	push   0xc000f75a
c000fad4:	50                   	push   eax
c000fad5:	e8 06 82 00 00       	call   c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c000fada:	83 c4 10             	add    esp,0x10
c000fadd:	c6 05 80 69 02 c0 01 	mov    BYTE PTR ds:0xc0026980,0x1
c000fae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fae7:	66 3d 1d 03          	cmp    ax,0x31d
c000faeb:	75 06                	jne    c000faf3 <sendKeyboardToken(KeyboardToken)+0x26f>
c000faed:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000faf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf6:	66 3d 1c 03          	cmp    ax,0x31c
c000fafa:	75 06                	jne    c000fb02 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fafc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb05:	66 3d 1b 03          	cmp    ax,0x31b
c000fb09:	75 06                	jne    c000fb11 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb0b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb14:	66 3d 1e 03          	cmp    ax,0x31e
c000fb18:	75 06                	jne    c000fb20 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb1a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb23:	66 3d 1f 03          	cmp    ax,0x31f
c000fb27:	75 06                	jne    c000fb2f <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb29:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb32:	66 3d 1a 03          	cmp    ax,0x31a
c000fb36:	75 06                	jne    c000fb3e <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb38:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb3e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb42:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb45:	83 f0 01             	xor    eax,0x1
c000fb48:	84 c0                	test   al,al
c000fb4a:	74 77                	je     c000fbc3 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb4c:	a0 81 66 02 c0       	mov    al,ds:0xc0026681
c000fb51:	84 c0                	test   al,al
c000fb53:	74 41                	je     c000fb96 <sendKeyboardToken(KeyboardToken)+0x312>
c000fb55:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb59:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb5d:	74 2b                	je     c000fb8a <sendKeyboardToken(KeyboardToken)+0x306>
c000fb5f:	8b 15 84 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026984
c000fb65:	89 d0                	mov    eax,edx
c000fb67:	c1 e0 02             	shl    eax,0x2
c000fb6a:	01 d0                	add    eax,edx
c000fb6c:	01 c0                	add    eax,eax
c000fb6e:	a3 84 69 02 c0       	mov    ds:0xc0026984,eax
c000fb73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb76:	0f b7 c0             	movzx  eax,ax
c000fb79:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb7c:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fb81:	01 d0                	add    eax,edx
c000fb83:	a3 84 69 02 c0       	mov    ds:0xc0026984,eax
c000fb88:	eb 6d                	jmp    c000fbf7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb8a:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fb94:	eb 61                	jmp    c000fbf7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb96:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fb9b:	85 c0                	test   eax,eax
c000fb9d:	74 18                	je     c000fbb7 <sendKeyboardToken(KeyboardToken)+0x333>
c000fb9f:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fba4:	0f b6 c0             	movzx  eax,al
c000fba7:	83 ec 0c             	sub    esp,0xc
c000fbaa:	50                   	push   eax
c000fbab:	e8 16 fc ff ff       	call   c000f7c6 <sendKeyToTerminal(unsigned char)>
c000fbb0:	83 c4 10             	add    esp,0x10
c000fbb3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbb7:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fbc1:	eb 34                	jmp    c000fbf7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc6:	66 3d 01 01          	cmp    ax,0x101
c000fbca:	75 2b                	jne    c000fbf7 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbcc:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbd1:	85 c0                	test   eax,eax
c000fbd3:	74 18                	je     c000fbed <sendKeyboardToken(KeyboardToken)+0x369>
c000fbd5:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbda:	0f b6 c0             	movzx  eax,al
c000fbdd:	83 ec 0c             	sub    esp,0xc
c000fbe0:	50                   	push   eax
c000fbe1:	e8 e0 fb ff ff       	call   c000f7c6 <sendKeyToTerminal(unsigned char)>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbed:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fbf7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbfa:	83 f0 01             	xor    eax,0x1
c000fbfd:	84 c0                	test   al,al
c000fbff:	74 4c                	je     c000fc4d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc04:	83 f0 01             	xor    eax,0x1
c000fc07:	84 c0                	test   al,al
c000fc09:	74 42                	je     c000fc4d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc0b:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000fc10:	83 f0 01             	xor    eax,0x1
c000fc13:	84 c0                	test   al,al
c000fc15:	74 36                	je     c000fc4d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1a:	66 83 f8 1f          	cmp    ax,0x1f
c000fc1e:	76 09                	jbe    c000fc29 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc23:	66 83 f8 7e          	cmp    ax,0x7e
c000fc27:	76 12                	jbe    c000fc3b <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2c:	66 83 f8 0a          	cmp    ax,0xa
c000fc30:	74 09                	je     c000fc3b <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc35:	66 83 f8 08          	cmp    ax,0x8
c000fc39:	75 12                	jne    c000fc4d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3e:	0f b6 c0             	movzx  eax,al
c000fc41:	83 ec 0c             	sub    esp,0xc
c000fc44:	50                   	push   eax
c000fc45:	e8 7c fb ff ff       	call   c000f7c6 <sendKeyToTerminal(unsigned char)>
c000fc4a:	83 c4 10             	add    esp,0x10
c000fc4d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc50:	83 f0 01             	xor    eax,0x1
c000fc53:	84 c0                	test   al,al
c000fc55:	74 4f                	je     c000fca6 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc57:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc5a:	83 f0 01             	xor    eax,0x1
c000fc5d:	84 c0                	test   al,al
c000fc5f:	74 45                	je     c000fca6 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc61:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000fc66:	84 c0                	test   al,al
c000fc68:	74 3c                	je     c000fca6 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc6d:	66 83 f8 3f          	cmp    ax,0x3f
c000fc71:	76 33                	jbe    c000fca6 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc76:	66 83 f8 7f          	cmp    ax,0x7f
c000fc7a:	77 2a                	ja     c000fca6 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7f:	88 c2                	mov    dl,al
c000fc81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc84:	66 83 f8 5f          	cmp    ax,0x5f
c000fc88:	76 04                	jbe    c000fc8e <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc8a:	b0 20                	mov    al,0x20
c000fc8c:	eb 02                	jmp    c000fc90 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc8e:	b0 00                	mov    al,0x0
c000fc90:	29 c2                	sub    edx,eax
c000fc92:	88 d0                	mov    al,dl
c000fc94:	83 e8 40             	sub    eax,0x40
c000fc97:	0f b6 c0             	movzx  eax,al
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	50                   	push   eax
c000fc9e:	e8 23 fb ff ff       	call   c000f7c6 <sendKeyToTerminal(unsigned char)>
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca9:	66 3d 00 03          	cmp    ax,0x300
c000fcad:	75 0f                	jne    c000fcbe <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcaf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcb2:	83 f0 01             	xor    eax,0x1
c000fcb5:	84 c0                	test   al,al
c000fcb7:	74 05                	je     c000fcbe <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcb9:	e8 69 ab ff ff       	call   c000a827 <doTerminalCycle()>
c000fcbe:	90                   	nop
c000fcbf:	c9                   	leave  
c000fcc0:	c3                   	ret    

c000fcc1 <clearInternalKeybuffer(VgaText*)>:
c000fcc1:	55                   	push   ebp
c000fcc2:	89 e5                	mov    ebp,esp
c000fcc4:	83 ec 08             	sub    esp,0x8
c000fcc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcca:	05 98 01 00 00       	add    eax,0x198
c000fccf:	83 ec 0c             	sub    esp,0xc
c000fcd2:	50                   	push   eax
c000fcd3:	e8 c8 09 ff ff       	call   c00006a0 <strlen>
c000fcd8:	83 c4 10             	add    esp,0x10
c000fcdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fcde:	81 c2 98 01 00 00    	add    edx,0x198
c000fce4:	83 ec 04             	sub    esp,0x4
c000fce7:	50                   	push   eax
c000fce8:	6a 00                	push   0x0
c000fcea:	52                   	push   edx
c000fceb:	e8 94 09 ff ff       	call   c0000684 <memset>
c000fcf0:	83 c4 10             	add    esp,0x10
c000fcf3:	90                   	nop
c000fcf4:	c9                   	leave  
c000fcf5:	c3                   	ret    

c000fcf6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcf6:	55                   	push   ebp
c000fcf7:	89 e5                	mov    ebp,esp
c000fcf9:	83 ec 18             	sub    esp,0x18
c000fcfc:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000fd01:	85 c0                	test   eax,eax
c000fd03:	74 2a                	je     c000fd2f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd05:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd0b:	8b 0d 68 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026568
c000fd11:	83 ec 04             	sub    esp,0x4
c000fd14:	68 80 65 02 c0       	push   0xc0026580
c000fd19:	83 ec 08             	sub    esp,0x8
c000fd1c:	89 e2                	mov    edx,esp
c000fd1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd21:	89 02                	mov    DWORD PTR [edx],eax
c000fd23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd26:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd2a:	ff d1                	call   ecx
c000fd2c:	83 c4 10             	add    esp,0x10
c000fd2f:	fb                   	sti    
c000fd30:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd37:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd3b:	0f 84 a1 00 00 00    	je     c000fde2 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd44:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd4a:	84 c0                	test   al,al
c000fd4c:	75 28                	jne    c000fd76 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd4e:	fa                   	cli    
c000fd4f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd54:	40                   	inc    eax
c000fd55:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000fd5a:	e8 9d 81 00 00       	call   c0017efc <schedule()>
c000fd5f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd64:	48                   	dec    eax
c000fd65:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000fd6a:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd6f:	85 c0                	test   eax,eax
c000fd71:	75 ce                	jne    c000fd41 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd73:	fb                   	sti    
c000fd74:	eb cb                	jmp    c000fd41 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd79:	8d 50 01             	lea    edx,[eax+0x1]
c000fd7c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd82:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd88:	88 10                	mov    BYTE PTR [eax],dl
c000fd8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd8d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd93:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd99:	05 98 01 00 00       	add    eax,0x198
c000fd9e:	83 ec 0c             	sub    esp,0xc
c000fda1:	50                   	push   eax
c000fda2:	e8 f9 08 ff ff       	call   c00006a0 <strlen>
c000fda7:	83 c4 10             	add    esp,0x10
c000fdaa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdad:	81 c2 98 01 00 00    	add    edx,0x198
c000fdb3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fdb6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdb9:	81 c2 98 01 00 00    	add    edx,0x198
c000fdbf:	83 ec 04             	sub    esp,0x4
c000fdc2:	50                   	push   eax
c000fdc3:	51                   	push   ecx
c000fdc4:	52                   	push   edx
c000fdc5:	e8 f2 07 ff ff       	call   c00005bc <memmove>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fdd0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fdd3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fdd7:	0f 85 5a ff ff ff    	jne    c000fd37 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fddd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde0:	eb 03                	jmp    c000fde5 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fde2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde5:	c9                   	leave  
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <Keyboard::Keyboard(char const*)>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdef:	83 ec 08             	sub    esp,0x8
c000fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf6:	50                   	push   eax
c000fdf7:	e8 b6 e2 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c000fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe08:	89 10                	mov    DWORD PTR [eax],edx
c000fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe18:	c6 05 64 65 02 c0 01 	mov    BYTE PTR ds:0xc0026564,0x1
c000fe1f:	90                   	nop
c000fe20:	83 c4 0c             	add    esp,0xc
c000fe23:	c3                   	ret    

c000fe24 <Keyboard::~Keyboard()>:
c000fe24:	83 ec 0c             	sub    esp,0xc
c000fe27:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	89 10                	mov    DWORD PTR [eax],edx
c000fe32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe36:	83 ec 0c             	sub    esp,0xc
c000fe39:	50                   	push   eax
c000fe3a:	e8 3d df ff ff       	call   c000dd7c <Device::~Device()>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	90                   	nop
c000fe43:	83 c4 0c             	add    esp,0xc
c000fe46:	c3                   	ret    
c000fe47:	90                   	nop

c000fe48 <Keyboard::~Keyboard()>:
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	83 ec 0c             	sub    esp,0xc
c000fe4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe52:	e8 cd ff ff ff       	call   c000fe24 <Keyboard::~Keyboard()>
c000fe57:	83 c4 10             	add    esp,0x10
c000fe5a:	83 ec 08             	sub    esp,0x8
c000fe5d:	68 5c 01 00 00       	push   0x15c
c000fe62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe66:	e8 1b cb ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	83 c4 0c             	add    esp,0xc
c000fe71:	c3                   	ret    

c000fe72 <LogicalDisk::close(int, int, void*)>:
c000fe72:	83 c8 ff             	or     eax,0xffffffff
c000fe75:	c3                   	ret    

c000fe76 <LogicalDisk::~LogicalDisk()>:
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	ba 50 38 02 c0       	mov    edx,0xc0023850
c000fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe82:	89 10                	mov    DWORD PTR [eax],edx
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	50                   	push   eax
c000fe8c:	e8 eb de ff ff       	call   c000dd7c <Device::~Device()>
c000fe91:	83 c4 10             	add    esp,0x10
c000fe94:	90                   	nop
c000fe95:	83 c4 0c             	add    esp,0xc
c000fe98:	c3                   	ret    
c000fe99:	90                   	nop

c000fe9a <LogicalDisk::~LogicalDisk()>:
c000fe9a:	83 ec 0c             	sub    esp,0xc
c000fe9d:	83 ec 0c             	sub    esp,0xc
c000fea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea4:	e8 cd ff ff ff       	call   c000fe76 <LogicalDisk::~LogicalDisk()>
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	83 ec 08             	sub    esp,0x8
c000feaf:	68 74 01 00 00       	push   0x174
c000feb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb8:	e8 c9 ca ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 c4 0c             	add    esp,0xc
c000fec3:	c3                   	ret    

c000fec4 <LogicalDisk::open(int, int, void*)>:
c000fec4:	83 ec 18             	sub    esp,0x18
c000fec7:	68 04 38 02 c0       	push   0xc0023804
c000fecc:	e8 58 44 00 00       	call   c0014329 <Krnl::panic(char const*)>
c000fed1:	83 c8 ff             	or     eax,0xffffffff
c000fed4:	83 c4 1c             	add    esp,0x1c
c000fed7:	c3                   	ret    

c000fed8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fed8:	53                   	push   ebx
c000fed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000feeb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000fef1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000fef7:	77 10                	ja     c000ff09 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fef9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000feff:	89 d3                	mov    ebx,edx
c000ff01:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff07:	72 05                	jb     c000ff0e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff09:	83 c8 ff             	or     eax,0xffffffff
c000ff0c:	89 c2                	mov    edx,eax
c000ff0e:	5b                   	pop    ebx
c000ff0f:	c3                   	ret    

c000ff10 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff10:	56                   	push   esi
c000ff11:	83 c8 ff             	or     eax,0xffffffff
c000ff14:	53                   	push   ebx
c000ff15:	89 c2                	mov    edx,eax
c000ff17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff1b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff29:	77 27                	ja     c000ff52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff2b:	89 d8                	mov    eax,ebx
c000ff2d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff33:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff3e:	89 c2                	mov    edx,eax
c000ff40:	73 10                	jae    c000ff52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff42:	89 c8                	mov    eax,ecx
c000ff44:	89 da                	mov    edx,ebx
c000ff46:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff4c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff52:	5b                   	pop    ebx
c000ff53:	5e                   	pop    esi
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff56:	83 ec 1c             	sub    esp,0x1c
c000ff59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff6d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff7c:	83 ec 08             	sub    esp,0x8
c000ff7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff83:	50                   	push   eax
c000ff84:	e8 29 e1 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	ba 50 38 02 c0       	mov    edx,0xc0023850
c000ff91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff95:	89 10                	mov    DWORD PTR [eax],edx
c000ff97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff9b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ffbb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffc7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ffcd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ffd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffd7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffde:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffe4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fff2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000fff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010006:	90                   	nop
c0010007:	83 c4 1c             	add    esp,0x1c
c001000a:	c3                   	ret    
c001000b:	90                   	nop

c001000c <LogicalDisk::assignDriveLetter()>:
c001000c:	55                   	push   ebp
c001000d:	57                   	push   edi
c001000e:	56                   	push   esi
c001000f:	53                   	push   ebx
c0010010:	83 ec 14             	sub    esp,0x14
c0010013:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010017:	8b 3d a0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a0
c001001d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010023:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010027:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001002d:	8b 3d a4 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a4
c0010033:	3c 01                	cmp    al,0x1
c0010035:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010039:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001003d:	19 c0                	sbb    eax,eax
c001003f:	83 e0 02             	and    eax,0x2
c0010042:	83 c0 41             	add    eax,0x41
c0010045:	0f be e8             	movsx  ebp,al
c0010048:	3c 43                	cmp    al,0x43
c001004a:	75 10                	jne    c001005c <LogicalDisk::assignDriveLetter()+0x50>
c001004c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010053:	75 5d                	jne    c00100b2 <LogicalDisk::assignDriveLetter()+0xa6>
c0010055:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001005a:	75 56                	jne    c00100b2 <LogicalDisk::assignDriveLetter()+0xa6>
c001005c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001005f:	ba 01 00 00 00       	mov    edx,0x1
c0010064:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010068:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001006c:	d3 e2                	shl    edx,cl
c001006e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010072:	89 d7                	mov    edi,edx
c0010074:	89 d6                	mov    esi,edx
c0010076:	c1 ff 1f             	sar    edi,0x1f
c0010079:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001007d:	21 f9                	and    ecx,edi
c001007f:	09 d1                	or     ecx,edx
c0010081:	75 2f                	jne    c00100b2 <LogicalDisk::assignDriveLetter()+0xa6>
c0010083:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010087:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001008b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010091:	09 f2                	or     edx,esi
c0010093:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0010099:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001009d:	09 fa                	or     edx,edi
c001009f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00100a3:	89 15 a4 69 02 c0    	mov    DWORD PTR ds:0xc00269a4,edx
c00100a9:	89 1c bd c0 69 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9640],ebx
c00100b0:	eb 08                	jmp    c00100ba <LogicalDisk::assignDriveLetter()+0xae>
c00100b2:	45                   	inc    ebp
c00100b3:	40                   	inc    eax
c00100b4:	3c 5b                	cmp    al,0x5b
c00100b6:	75 90                	jne    c0010048 <LogicalDisk::assignDriveLetter()+0x3c>
c00100b8:	31 c0                	xor    eax,eax
c00100ba:	83 c4 14             	add    esp,0x14
c00100bd:	5b                   	pop    ebx
c00100be:	5e                   	pop    esi
c00100bf:	5f                   	pop    edi
c00100c0:	5d                   	pop    ebp
c00100c1:	c3                   	ret    

c00100c2 <LogicalDisk::mount()>:
c00100c2:	56                   	push   esi
c00100c3:	53                   	push   ebx
c00100c4:	53                   	push   ebx
c00100c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100c9:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c00100cf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100d9:	85 db                	test   ebx,ebx
c00100db:	74 27                	je     c0010104 <LogicalDisk::mount()+0x42>
c00100dd:	51                   	push   ecx
c00100de:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100e7:	83 e8 41             	sub    eax,0x41
c00100ea:	50                   	push   eax
c00100eb:	56                   	push   esi
c00100ec:	53                   	push   ebx
c00100ed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	84 c0                	test   al,al
c00100f5:	74 08                	je     c00100ff <LogicalDisk::mount()+0x3d>
c00100f7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00100fd:	eb 07                	jmp    c0010106 <LogicalDisk::mount()+0x44>
c00100ff:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010102:	eb d5                	jmp    c00100d9 <LogicalDisk::mount()+0x17>
c0010104:	31 c0                	xor    eax,eax
c0010106:	5a                   	pop    edx
c0010107:	5b                   	pop    ebx
c0010108:	5e                   	pop    esi
c0010109:	c3                   	ret    

c001010a <LogicalDisk::unmount()>:
c001010a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010118:	c3                   	ret    
c0010119:	90                   	nop

c001011a <LogicalDisk::eject()>:
c001011a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010124:	8b 10                	mov    edx,DWORD PTR [eax]
c0010126:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001012a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001012d:	90                   	nop

c001012e <LogicalDisk::unassignDriveLetter()>:
c001012e:	57                   	push   edi
c001012f:	56                   	push   esi
c0010130:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010134:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001013b:	84 c9                	test   cl,cl
c001013d:	75 0f                	jne    c001014e <LogicalDisk::unassignDriveLetter()+0x20>
c001013f:	c7 44 24 0c 28 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023828
c0010147:	5e                   	pop    esi
c0010148:	5f                   	pop    edi
c0010149:	e9 db 41 00 00       	jmp    c0014329 <Krnl::panic(char const*)>
c001014e:	83 e9 41             	sub    ecx,0x41
c0010151:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010158:	b8 01 00 00 00       	mov    eax,0x1
c001015d:	c7 04 8d c0 69 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9640],0x0
c0010168:	d3 e0                	shl    eax,cl
c001016a:	89 c7                	mov    edi,eax
c001016c:	f7 d0                	not    eax
c001016e:	c1 ff 1f             	sar    edi,0x1f
c0010171:	21 05 a0 69 02 c0    	and    DWORD PTR ds:0xc00269a0,eax
c0010177:	89 fe                	mov    esi,edi
c0010179:	f7 d6                	not    esi
c001017b:	21 35 a4 69 02 c0    	and    DWORD PTR ds:0xc00269a4,esi
c0010181:	5e                   	pop    esi
c0010182:	5f                   	pop    edi
c0010183:	c3                   	ret    

c0010184 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010184:	57                   	push   edi
c0010185:	56                   	push   esi
c0010186:	53                   	push   ebx
c0010187:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001018b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001018f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010197:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001019d:	77 41                	ja     c00101e0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001019f:	99                   	cdq    
c00101a0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101a6:	01 c8                	add    eax,ecx
c00101a8:	11 da                	adc    edx,ebx
c00101aa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101b0:	19 d7                	sbb    edi,edx
c00101b2:	72 33                	jb     c00101e7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00101b4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101ba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101c4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101c8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101d8:	5b                   	pop    ebx
c00101d9:	5e                   	pop    esi
c00101da:	5f                   	pop    edi
c00101db:	e9 3c 0b 00 00       	jmp    c0010d1c <VCache::read(unsigned long long, int, void*)>
c00101e0:	b8 05 00 00 00       	mov    eax,0x5
c00101e5:	eb 05                	jmp    c00101ec <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101e7:	b8 07 00 00 00       	mov    eax,0x7
c00101ec:	5b                   	pop    ebx
c00101ed:	5e                   	pop    esi
c00101ee:	5f                   	pop    edi
c00101ef:	c3                   	ret    

c00101f0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00101f0:	57                   	push   edi
c00101f1:	56                   	push   esi
c00101f2:	53                   	push   ebx
c00101f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010203:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010209:	77 41                	ja     c001024c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001020b:	99                   	cdq    
c001020c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010212:	01 c8                	add    eax,ecx
c0010214:	11 da                	adc    edx,ebx
c0010216:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001021c:	19 d7                	sbb    edi,edx
c001021e:	72 33                	jb     c0010253 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010220:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010226:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001022c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010230:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010234:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001023a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010240:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010244:	5b                   	pop    ebx
c0010245:	5e                   	pop    esi
c0010246:	5f                   	pop    edi
c0010247:	e9 8c 09 00 00       	jmp    c0010bd8 <VCache::write(unsigned long long, int, void*)>
c001024c:	b8 05 00 00 00       	mov    eax,0x5
c0010251:	eb 05                	jmp    c0010258 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010253:	b8 07 00 00 00       	mov    eax,0x7
c0010258:	5b                   	pop    ebx
c0010259:	5e                   	pop    esi
c001025a:	5f                   	pop    edi
c001025b:	c3                   	ret    

c001025c <Mouse::Mouse(char const*)>:
c001025c:	83 ec 0c             	sub    esp,0xc
c001025f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010263:	83 ec 08             	sub    esp,0x8
c0010266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001026a:	50                   	push   eax
c001026b:	e8 42 de ff ff       	call   c000e0b2 <Device::Device(char const*)>
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	ba 7c 38 02 c0       	mov    edx,0xc002387c
c0010278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027c:	89 10                	mov    DWORD PTR [eax],edx
c001027e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010282:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001028c:	90                   	nop
c001028d:	83 c4 0c             	add    esp,0xc
c0010290:	c3                   	ret    
c0010291:	90                   	nop
c0010292:	66 90                	xchg   ax,ax

c0010294 <Mouse::~Mouse()>:
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	ba 7c 38 02 c0       	mov    edx,0xc002387c
c001029c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a0:	89 10                	mov    DWORD PTR [eax],edx
c00102a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	50                   	push   eax
c00102aa:	e8 cd da ff ff       	call   c000dd7c <Device::~Device()>
c00102af:	83 c4 10             	add    esp,0x10
c00102b2:	90                   	nop
c00102b3:	83 c4 0c             	add    esp,0xc
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Mouse::~Mouse()>:
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	83 ec 0c             	sub    esp,0xc
c00102be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c2:	e8 cd ff ff ff       	call   c0010294 <Mouse::~Mouse()>
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	83 ec 08             	sub    esp,0x8
c00102cd:	68 58 01 00 00       	push   0x158
c00102d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d6:	e8 ab c6 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	83 c4 0c             	add    esp,0xc
c00102e1:	c3                   	ret    

c00102e2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102e2:	55                   	push   ebp
c00102e3:	57                   	push   edi
c00102e4:	56                   	push   esi
c00102e5:	53                   	push   ebx
c00102e6:	81 ec 28 01 00 00    	sub    esp,0x128
c00102ec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102f3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102fa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010301:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001030c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010310:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010317:	e8 92 de ff ff       	call   c000e1ae <Device::getName()>
c001031c:	5a                   	pop    edx
c001031d:	59                   	pop    ecx
c001031e:	50                   	push   eax
c001031f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010323:	55                   	push   ebp
c0010324:	e8 17 04 ff ff       	call   c0000740 <strcpy>
c0010329:	5b                   	pop    ebx
c001032a:	58                   	pop    eax
c001032b:	68 a0 38 02 c0       	push   0xc00238a0
c0010330:	55                   	push   ebp
c0010331:	e8 4a 05 ff ff       	call   c0000880 <strcat>
c0010336:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001033d:	e8 81 96 ff ff       	call   c00099c3 <malloc>
c0010342:	83 c4 0c             	add    esp,0xc
c0010345:	89 c3                	mov    ebx,eax
c0010347:	57                   	push   edi
c0010348:	56                   	push   esi
c0010349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001034d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010351:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010358:	55                   	push   ebp
c0010359:	50                   	push   eax
c001035a:	e8 f7 fb ff ff       	call   c000ff56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001035f:	83 c4 14             	add    esp,0x14
c0010362:	53                   	push   ebx
c0010363:	e8 a4 fc ff ff       	call   c001000c <LogicalDisk::assignDriveLetter()>
c0010368:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001036b:	e8 52 fd ff ff       	call   c00100c2 <LogicalDisk::mount()>
c0010370:	58                   	pop    eax
c0010371:	5a                   	pop    edx
c0010372:	53                   	push   ebx
c0010373:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001037a:	e8 2f db ff ff       	call   c000deae <Device::addChild(Device*)>
c001037f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010385:	5b                   	pop    ebx
c0010386:	5e                   	pop    esi
c0010387:	5f                   	pop    edi
c0010388:	5d                   	pop    ebp
c0010389:	c3                   	ret    

c001038a <createPartitionsForDisk(PhysicalDisk*)>:
c001038a:	55                   	push   ebp
c001038b:	57                   	push   edi
c001038c:	56                   	push   esi
c001038d:	53                   	push   ebx
c001038e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010394:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001039b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00103a1:	3d 00 02 00 00       	cmp    eax,0x200
c00103a6:	74 27                	je     c00103cf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00103a8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00103ae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00103b4:	83 ec 10             	sub    esp,0x10
c00103b7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00103bb:	99                   	cdq    
c00103bc:	c1 e6 0a             	shl    esi,0xa
c00103bf:	52                   	push   edx
c00103c0:	89 fd                	mov    ebp,edi
c00103c2:	50                   	push   eax
c00103c3:	55                   	push   ebp
c00103c4:	56                   	push   esi
c00103c5:	e8 5a 0b 01 00       	call   c0020f24 <__udivdi3>
c00103ca:	e9 b1 00 00 00       	jmp    c0010480 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103cf:	83 ec 0c             	sub    esp,0xc
c00103d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103d4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103d8:	56                   	push   esi
c00103d9:	6a 01                	push   0x1
c00103db:	6a 00                	push   0x0
c00103dd:	6a 00                	push   0x0
c00103df:	53                   	push   ebx
c00103e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103e3:	83 c4 20             	add    esp,0x20
c00103e6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103ee:	75 0a                	jne    c00103fa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103f0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103f8:	74 2c                	je     c0010426 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103fa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010400:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010406:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001040c:	83 ec 10             	sub    esp,0x10
c001040f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010413:	89 f7                	mov    edi,esi
c0010415:	c1 e0 0a             	shl    eax,0xa
c0010418:	c1 ff 1f             	sar    edi,0x1f
c001041b:	57                   	push   edi
c001041c:	56                   	push   esi
c001041d:	52                   	push   edx
c001041e:	50                   	push   eax
c001041f:	e8 00 0b 01 00       	call   c0020f24 <__udivdi3>
c0010424:	eb 5a                	jmp    c0010480 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010426:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001042d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010434:	83 e1 7f             	and    ecx,0x7f
c0010437:	83 e0 7f             	and    eax,0x7f
c001043a:	01 c1                	add    ecx,eax
c001043c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010443:	83 e0 7f             	and    eax,0x7f
c0010446:	01 c1                	add    ecx,eax
c0010448:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001044f:	83 e0 7f             	and    eax,0x7f
c0010452:	00 c1                	add    cl,al
c0010454:	74 41                	je     c0010497 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010456:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001045c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010462:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010468:	83 ec 10             	sub    esp,0x10
c001046b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001046f:	89 f7                	mov    edi,esi
c0010471:	c1 e0 0a             	shl    eax,0xa
c0010474:	c1 ff 1f             	sar    edi,0x1f
c0010477:	57                   	push   edi
c0010478:	56                   	push   esi
c0010479:	52                   	push   edx
c001047a:	50                   	push   eax
c001047b:	e8 a4 0a 01 00       	call   c0020f24 <__udivdi3>
c0010480:	83 c4 14             	add    esp,0x14
c0010483:	52                   	push   edx
c0010484:	50                   	push   eax
c0010485:	6a 00                	push   0x0
c0010487:	6a 00                	push   0x0
c0010489:	53                   	push   ebx
c001048a:	e8 53 fe ff ff       	call   c00102e2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001048f:	83 c4 20             	add    esp,0x20
c0010492:	e9 79 01 00 00       	jmp    c0010610 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010497:	89 f0                	mov    eax,esi
c0010499:	31 f6                	xor    esi,esi
c001049b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00104a2:	75 02                	jne    c00104a6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00104a4:	89 f1                	mov    ecx,esi
c00104a6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00104ad:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00104b4:	c1 e2 08             	shl    edx,0x8
c00104b7:	c1 e7 10             	shl    edi,0x10
c00104ba:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00104c2:	09 fa                	or     edx,edi
c00104c4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00104cc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00104d3:	83 c0 10             	add    eax,0x10
c00104d6:	09 fa                	or     edx,edi
c00104d8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104df:	c1 e7 18             	shl    edi,0x18
c00104e2:	09 fa                	or     edx,edi
c00104e4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104eb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104ef:	c1 e7 10             	shl    edi,0x10
c00104f2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104f9:	c1 e2 08             	shl    edx,0x8
c00104fc:	09 fa                	or     edx,edi
c00104fe:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010505:	09 fa                	or     edx,edi
c0010507:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001050e:	c1 e7 18             	shl    edi,0x18
c0010511:	09 fa                	or     edx,edi
c0010513:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010517:	46                   	inc    esi
c0010518:	83 fe 04             	cmp    esi,0x4
c001051b:	0f 85 7a ff ff ff    	jne    c001049b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010525:	83 f0 01             	xor    eax,0x1
c0010528:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001052c:	75 57                	jne    c0010585 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001052e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010532:	83 f0 01             	xor    eax,0x1
c0010535:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010539:	75 4a                	jne    c0010585 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001053b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001053f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010547:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001054f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010555:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001055b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010561:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010565:	89 f7                	mov    edi,esi
c0010567:	c1 e0 0a             	shl    eax,0xa
c001056a:	c1 ff 1f             	sar    edi,0x1f
c001056d:	57                   	push   edi
c001056e:	56                   	push   esi
c001056f:	52                   	push   edx
c0010570:	50                   	push   eax
c0010571:	e8 ae 09 01 00       	call   c0020f24 <__udivdi3>
c0010576:	83 c4 10             	add    esp,0x10
c0010579:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001057d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010581:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010585:	84 c9                	test   cl,cl
c0010587:	74 53                	je     c00105dc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010589:	0f b6 c9             	movzx  ecx,cl
c001058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010590:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010594:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010598:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001059c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105a4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00105a8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00105ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00105b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105bc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00105c0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00105c4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00105c8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00105cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105d4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105d8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105dc:	31 ed                	xor    ebp,ebp
c00105de:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105e2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105e6:	89 f8                	mov    eax,edi
c00105e8:	09 f0                	or     eax,esi
c00105ea:	74 1e                	je     c001060a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105ec:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105f0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105f4:	89 d1                	mov    ecx,edx
c00105f6:	09 c1                	or     ecx,eax
c00105f8:	74 10                	je     c001060a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105fa:	83 ec 0c             	sub    esp,0xc
c00105fd:	57                   	push   edi
c00105fe:	56                   	push   esi
c00105ff:	52                   	push   edx
c0010600:	50                   	push   eax
c0010601:	53                   	push   ebx
c0010602:	e8 db fc ff ff       	call   c00102e2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010607:	83 c4 20             	add    esp,0x20
c001060a:	45                   	inc    ebp
c001060b:	83 fd 04             	cmp    ebp,0x4
c001060e:	75 ce                	jne    c00105de <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010610:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010616:	5b                   	pop    ebx
c0010617:	5e                   	pop    esi
c0010618:	5f                   	pop    edi
c0010619:	5d                   	pop    ebp
c001061a:	c3                   	ret    
c001061b:	90                   	nop

c001061c <Serial::Serial(char const*)>:
c001061c:	83 ec 0c             	sub    esp,0xc
c001061f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010623:	83 ec 08             	sub    esp,0x8
c0010626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062a:	50                   	push   eax
c001062b:	e8 82 da ff ff       	call   c000e0b2 <Device::Device(char const*)>
c0010630:	83 c4 10             	add    esp,0x10
c0010633:	ba b4 38 02 c0       	mov    edx,0xc00238b4
c0010638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063c:	89 10                	mov    DWORD PTR [eax],edx
c001063e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010642:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001064c:	90                   	nop
c001064d:	83 c4 0c             	add    esp,0xc
c0010650:	c3                   	ret    
c0010651:	90                   	nop
c0010652:	66 90                	xchg   ax,ax

c0010654 <Serial::~Serial()>:
c0010654:	83 ec 0c             	sub    esp,0xc
c0010657:	ba b4 38 02 c0       	mov    edx,0xc00238b4
c001065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010660:	89 10                	mov    DWORD PTR [eax],edx
c0010662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010666:	83 ec 0c             	sub    esp,0xc
c0010669:	50                   	push   eax
c001066a:	e8 0d d7 ff ff       	call   c000dd7c <Device::~Device()>
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	90                   	nop
c0010673:	83 c4 0c             	add    esp,0xc
c0010676:	c3                   	ret    
c0010677:	90                   	nop

c0010678 <Serial::~Serial()>:
c0010678:	83 ec 0c             	sub    esp,0xc
c001067b:	83 ec 0c             	sub    esp,0xc
c001067e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010682:	e8 cd ff ff ff       	call   c0010654 <Serial::~Serial()>
c0010687:	83 c4 10             	add    esp,0x10
c001068a:	83 ec 08             	sub    esp,0x8
c001068d:	68 58 01 00 00       	push   0x158
c0010692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010696:	e8 eb c2 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	83 c4 0c             	add    esp,0xc
c00106a1:	c3                   	ret    
c00106a2:	66 90                	xchg   ax,ax

c00106a4 <Timer::Timer(char const*)>:
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ab:	83 ec 08             	sub    esp,0x8
c00106ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b2:	50                   	push   eax
c00106b3:	e8 fa d9 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c00106c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c4:	89 10                	mov    DWORD PTR [eax],edx
c00106c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ca:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00106d4:	90                   	nop
c00106d5:	83 c4 0c             	add    esp,0xc
c00106d8:	c3                   	ret    
c00106d9:	90                   	nop
c00106da:	66 90                	xchg   ax,ax

c00106dc <Timer::~Timer()>:
c00106dc:	83 ec 0c             	sub    esp,0xc
c00106df:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c00106e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e8:	89 10                	mov    DWORD PTR [eax],edx
c00106ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ee:	83 ec 0c             	sub    esp,0xc
c00106f1:	50                   	push   eax
c00106f2:	e8 85 d6 ff ff       	call   c000dd7c <Device::~Device()>
c00106f7:	83 c4 10             	add    esp,0x10
c00106fa:	90                   	nop
c00106fb:	83 c4 0c             	add    esp,0xc
c00106fe:	c3                   	ret    
c00106ff:	90                   	nop

c0010700 <Timer::~Timer()>:
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	83 ec 0c             	sub    esp,0xc
c0010706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070a:	e8 cd ff ff ff       	call   c00106dc <Timer::~Timer()>
c001070f:	83 c4 10             	add    esp,0x10
c0010712:	83 ec 08             	sub    esp,0x8
c0010715:	68 5c 01 00 00       	push   0x15c
c001071a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001071e:	e8 63 c2 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0010723:	83 c4 10             	add    esp,0x10
c0010726:	83 c4 0c             	add    esp,0xc
c0010729:	c3                   	ret    

c001072a <Timer::read()>:
c001072a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010734:	c3                   	ret    

c0010735 <timerHandler(unsigned int)>:
c0010735:	56                   	push   esi
c0010736:	53                   	push   ebx
c0010737:	51                   	push   ecx
c0010738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073c:	01 05 2c 6a 02 c0    	add    DWORD PTR ds:0xc0026a2c,eax
c0010742:	80 3d cd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263cd,0x0
c0010749:	0f 84 49 01 00 00    	je     c0010898 <timerHandler(unsigned int)+0x163>
c001074f:	fa                   	cli    
c0010750:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0010756:	83 ec 0c             	sub    esp,0xc
c0010759:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c001075f:	68 d8 78 02 c0       	push   0xc00278d8
c0010764:	e8 8b 0d 01 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010769:	83 c4 10             	add    esp,0x10
c001076c:	84 c0                	test   al,al
c001076e:	0f 85 a0 00 00 00    	jne    c0010814 <timerHandler(unsigned int)+0xdf>
c0010774:	83 ec 0c             	sub    esp,0xc
c0010777:	68 d8 78 02 c0       	push   0xc00278d8
c001077c:	e8 8f 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010781:	83 c4 10             	add    esp,0x10
c0010784:	89 c6                	mov    esi,eax
c0010786:	66 90                	xchg   ax,ax
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	68 d8 78 02 c0       	push   0xc00278d8
c0010790:	e8 7b 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010795:	c7 04 24 d8 78 02 c0 	mov    DWORD PTR [esp],0xc00278d8
c001079c:	89 c3                	mov    ebx,eax
c001079e:	e8 75 0d 01 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00107a3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00107a6:	83 c4 10             	add    esp,0x10
c00107a9:	3b 05 2c 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026a2c
c00107af:	77 23                	ja     c00107d4 <timerHandler(unsigned int)+0x9f>
c00107b1:	83 ec 0c             	sub    esp,0xc
c00107b4:	53                   	push   ebx
c00107b5:	e8 fe 7b 00 00       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	39 de                	cmp    esi,ebx
c00107bf:	75 27                	jne    c00107e8 <timerHandler(unsigned int)+0xb3>
c00107c1:	83 ec 0c             	sub    esp,0xc
c00107c4:	68 d8 78 02 c0       	push   0xc00278d8
c00107c9:	e8 42 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107ce:	89 c6                	mov    esi,eax
c00107d0:	eb 12                	jmp    c00107e4 <timerHandler(unsigned int)+0xaf>
c00107d2:	66 90                	xchg   ax,ax
c00107d4:	52                   	push   edx
c00107d5:	52                   	push   edx
c00107d6:	53                   	push   ebx
c00107d7:	68 d8 78 02 c0       	push   0xc00278d8
c00107dc:	e8 ef 0d 01 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107e1:	8d 76 00             	lea    esi,[esi+0x0]
c00107e4:	83 c4 10             	add    esp,0x10
c00107e7:	90                   	nop
c00107e8:	83 ec 0c             	sub    esp,0xc
c00107eb:	68 d8 78 02 c0       	push   0xc00278d8
c00107f0:	e8 ff 0c 01 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107f5:	83 c4 10             	add    esp,0x10
c00107f8:	84 c0                	test   al,al
c00107fa:	75 18                	jne    c0010814 <timerHandler(unsigned int)+0xdf>
c00107fc:	83 ec 0c             	sub    esp,0xc
c00107ff:	68 d8 78 02 c0       	push   0xc00278d8
c0010804:	e8 07 0d 01 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010809:	83 c4 10             	add    esp,0x10
c001080c:	39 f0                	cmp    eax,esi
c001080e:	0f 85 74 ff ff ff    	jne    c0010788 <timerHandler(unsigned int)+0x53>
c0010814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010819:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001081d:	74 41                	je     c0010860 <timerHandler(unsigned int)+0x12b>
c001081f:	80 3d cc 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263cc,0x0
c0010826:	74 38                	je     c0010860 <timerHandler(unsigned int)+0x12b>
c0010828:	fa                   	cli    
c0010829:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001082f:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0010834:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001083a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c001083d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010843:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010846:	72 08                	jb     c0010850 <timerHandler(unsigned int)+0x11b>
c0010848:	e8 af 76 00 00       	call   c0017efc <schedule()>
c001084d:	8d 76 00             	lea    esi,[esi+0x0]
c0010850:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0010855:	48                   	dec    eax
c0010856:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001085b:	75 03                	jne    c0010860 <timerHandler(unsigned int)+0x12b>
c001085d:	fb                   	sti    
c001085e:	66 90                	xchg   ax,ax
c0010860:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0010865:	48                   	dec    eax
c0010866:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c001086b:	75 1b                	jne    c0010888 <timerHandler(unsigned int)+0x153>
c001086d:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c0010874:	74 12                	je     c0010888 <timerHandler(unsigned int)+0x153>
c0010876:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0010880:	e8 77 76 00 00       	call   c0017efc <schedule()>
c0010885:	8d 76 00             	lea    esi,[esi+0x0]
c0010888:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001088d:	48                   	dec    eax
c001088e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0010893:	75 03                	jne    c0010898 <timerHandler(unsigned int)+0x163>
c0010895:	fb                   	sti    
c0010896:	66 90                	xchg   ax,ax
c0010898:	58                   	pop    eax
c0010899:	5b                   	pop    ebx
c001089a:	5e                   	pop    esi
c001089b:	c3                   	ret    

c001089c <setupTimer(int)>:
c001089c:	57                   	push   edi
c001089d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00108a2:	56                   	push   esi
c00108a3:	53                   	push   ebx
c00108a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108ae:	83 ec 0c             	sub    esp,0xc
c00108b1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108b7:	e8 f2 d8 ff ff       	call   c000e1ae <Device::getName()>
c00108bc:	83 c4 10             	add    esp,0x10
c00108bf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108c2:	0f 85 94 00 00 00    	jne    c001095c <setupTimer(int)+0xc0>
c00108c8:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00108cd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108d4:	0f 84 82 00 00 00    	je     c001095c <setupTimer(int)+0xc0>
c00108da:	83 ec 0c             	sub    esp,0xc
c00108dd:	68 5c 01 00 00       	push   0x15c
c00108e2:	e8 dc 90 ff ff       	call   c00099c3 <malloc>
c00108e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ea:	89 c3                	mov    ebx,eax
c00108ec:	e8 0f 02 01 00       	call   c0020b00 <PIT::PIT()>
c00108f1:	59                   	pop    ecx
c00108f2:	5f                   	pop    edi
c00108f3:	53                   	push   ebx
c00108f4:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c00108fa:	e8 af d5 ff ff       	call   c000deae <Device::addChild(Device*)>
c00108ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010901:	6a 00                	push   0x0
c0010903:	6a 00                	push   0x0
c0010905:	56                   	push   esi
c0010906:	53                   	push   ebx
c0010907:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001090a:	83 c4 14             	add    esp,0x14
c001090d:	68 60 01 00 00       	push   0x160
c0010912:	e8 ac 90 ff ff       	call   c00099c3 <malloc>
c0010917:	89 04 24             	mov    DWORD PTR [esp],eax
c001091a:	89 c7                	mov    edi,eax
c001091c:	e8 93 00 01 00       	call   c00209b4 <APICTimer::APICTimer()>
c0010921:	6a 00                	push   0x0
c0010923:	6a 00                	push   0x0
c0010925:	56                   	push   esi
c0010926:	57                   	push   edi
c0010927:	e8 88 ff 00 00       	call   c00208b4 <APICTimer::open(int, int, void*)>
c001092c:	83 c4 20             	add    esp,0x20
c001092f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010931:	6a 00                	push   0x0
c0010933:	6a 00                	push   0x0
c0010935:	6a 00                	push   0x0
c0010937:	53                   	push   ebx
c0010938:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001093b:	58                   	pop    eax
c001093c:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0010941:	5a                   	pop    edx
c0010942:	57                   	push   edi
c0010943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010949:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001094f:	e8 5a d5 ff ff       	call   c000deae <Device::addChild(Device*)>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	eb 37                	jmp    c0010990 <setupTimer(int)+0xf4>
c0010959:	8d 76 00             	lea    esi,[esi+0x0]
c001095c:	83 ec 0c             	sub    esp,0xc
c001095f:	68 5c 01 00 00       	push   0x15c
c0010964:	e8 5a 90 ff ff       	call   c00099c3 <malloc>
c0010969:	89 04 24             	mov    DWORD PTR [esp],eax
c001096c:	89 c3                	mov    ebx,eax
c001096e:	e8 8d 01 01 00       	call   c0020b00 <PIT::PIT()>
c0010973:	58                   	pop    eax
c0010974:	5a                   	pop    edx
c0010975:	53                   	push   ebx
c0010976:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c001097c:	e8 2d d5 ff ff       	call   c000deae <Device::addChild(Device*)>
c0010981:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010983:	6a 00                	push   0x0
c0010985:	6a 00                	push   0x0
c0010987:	56                   	push   esi
c0010988:	53                   	push   ebx
c0010989:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001098c:	83 c4 20             	add    esp,0x20
c001098f:	90                   	nop
c0010990:	89 d8                	mov    eax,ebx
c0010992:	5b                   	pop    ebx
c0010993:	5e                   	pop    esi
c0010994:	5f                   	pop    edi
c0010995:	c3                   	ret    
c0010996:	66 90                	xchg   ax,ax

c0010998 <VCache::VCache(PhysicalDisk*)>:
c0010998:	53                   	push   ebx
c0010999:	83 ec 18             	sub    esp,0x18
c001099c:	ba 48 3a 02 c0       	mov    edx,0xc0023a48
c00109a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a5:	89 10                	mov    DWORD PTR [eax],edx
c00109a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ab:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00109b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00109bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109da:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00109ff:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a12:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a22:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a29:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a31:	83 ec 0c             	sub    esp,0xc
c0010a34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a38:	e8 86 8f ff ff       	call   c00099c3 <malloc>
c0010a3d:	83 c4 10             	add    esp,0x10
c0010a40:	89 c3                	mov    ebx,eax
c0010a42:	83 ec 0c             	sub    esp,0xc
c0010a45:	53                   	push   ebx
c0010a46:	e8 81 72 00 00       	call   c0017ccc <Mutex::Mutex()>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a52:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a5d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a64:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a6f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a79:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a80:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a8c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a90:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a93:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010aa2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aa8:	05 00 01 00 00       	add    eax,0x100
c0010aad:	c1 e0 04             	shl    eax,0x4
c0010ab0:	83 ec 0c             	sub    esp,0xc
c0010ab3:	50                   	push   eax
c0010ab4:	e8 0a 8f ff ff       	call   c00099c3 <malloc>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	89 c2                	mov    edx,eax
c0010abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ad8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010adc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ae2:	c1 e0 06             	shl    eax,0x6
c0010ae5:	83 ec 0c             	sub    esp,0xc
c0010ae8:	50                   	push   eax
c0010ae9:	e8 d5 8e ff ff       	call   c00099c3 <malloc>
c0010aee:	83 c4 10             	add    esp,0x10
c0010af1:	89 c2                	mov    edx,eax
c0010af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010afa:	90                   	nop
c0010afb:	83 c4 18             	add    esp,0x18
c0010afe:	5b                   	pop    ebx
c0010aff:	c3                   	ret    

c0010b00 <VCache::invalidateReadBuffer()>:
c0010b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b04:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b0a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b0e:	c3                   	ret    
c0010b0f:	90                   	nop

c0010b10 <VCache::writeWriteBuffer()>:
c0010b10:	53                   	push   ebx
c0010b11:	83 ec 0c             	sub    esp,0xc
c0010b14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b1b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b1e:	68 20 39 02 c0       	push   0xc0023920
c0010b23:	e8 3f bf ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010b28:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b2b:	5a                   	pop    edx
c0010b2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b31:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b34:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b3a:	50                   	push   eax
c0010b3b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b3e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b45:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b4c:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b50:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b57:	83 c4 28             	add    esp,0x28
c0010b5a:	5b                   	pop    ebx
c0010b5b:	c3                   	ret    

c0010b5c <VCache::~VCache()>:
c0010b5c:	83 ec 0c             	sub    esp,0xc
c0010b5f:	ba 48 3a 02 c0       	mov    edx,0xc0023a48
c0010b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b68:	89 10                	mov    DWORD PTR [eax],edx
c0010b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b71:	84 c0                	test   al,al
c0010b73:	74 0f                	je     c0010b84 <VCache::~VCache()+0x28>
c0010b75:	83 ec 0c             	sub    esp,0xc
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	e8 8f ff ff ff       	call   c0010b10 <VCache::writeWriteBuffer()>
c0010b81:	83 c4 10             	add    esp,0x10
c0010b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b88:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b8b:	83 ec 0c             	sub    esp,0xc
c0010b8e:	50                   	push   eax
c0010b8f:	e8 3f 8e ff ff       	call   c00099d3 <free>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	50                   	push   eax
c0010ba2:	e8 2c 8e ff ff       	call   c00099d3 <free>
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	90                   	nop
c0010bab:	83 c4 0c             	add    esp,0xc
c0010bae:	c3                   	ret    
c0010baf:	90                   	nop

c0010bb0 <VCache::~VCache()>:
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	83 ec 0c             	sub    esp,0xc
c0010bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bba:	e8 9d ff ff ff       	call   c0010b5c <VCache::~VCache()>
c0010bbf:	83 c4 10             	add    esp,0x10
c0010bc2:	83 ec 08             	sub    esp,0x8
c0010bc5:	6a 44                	push   0x44
c0010bc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcb:	e8 b6 bd ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	83 c4 0c             	add    esp,0xc
c0010bd6:	c3                   	ret    
c0010bd7:	90                   	nop

c0010bd8 <VCache::write(unsigned long long, int, void*)>:
c0010bd8:	55                   	push   ebp
c0010bd9:	31 c0                	xor    eax,eax
c0010bdb:	57                   	push   edi
c0010bdc:	56                   	push   esi
c0010bdd:	53                   	push   ebx
c0010bde:	83 ec 0c             	sub    esp,0xc
c0010be1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010be5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010be9:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010bed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010bf8:	7d 16                	jge    c0010c10 <VCache::write(unsigned long long, int, void*)+0x38>
c0010bfa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010bfd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c03:	0f af c8             	imul   ecx,eax
c0010c06:	89 ca                	mov    edx,ecx
c0010c08:	01 f2                	add    edx,esi
c0010c0a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c0c:	40                   	inc    eax
c0010c0d:	eb e5                	jmp    c0010bf4 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c0f:	90                   	nop
c0010c10:	83 ec 0c             	sub    esp,0xc
c0010c13:	68 44 39 02 c0       	push   0xc0023944
c0010c18:	e8 4a be ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c24:	74 0e                	je     c0010c34 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c26:	83 ec 0c             	sub    esp,0xc
c0010c29:	53                   	push   ebx
c0010c2a:	e8 d1 fe ff ff       	call   c0010b00 <VCache::invalidateReadBuffer()>
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	66 90                	xchg   ax,ax
c0010c34:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c38:	74 66                	je     c0010ca0 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c3a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c3d:	99                   	cdq    
c0010c3e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c41:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c44:	31 f8                	xor    eax,edi
c0010c46:	89 d1                	mov    ecx,edx
c0010c48:	89 ca                	mov    edx,ecx
c0010c4a:	31 ea                	xor    edx,ebp
c0010c4c:	09 d0                	or     eax,edx
c0010c4e:	75 44                	jne    c0010c94 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c50:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c55:	75 3d                	jne    c0010c94 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c57:	83 ec 0c             	sub    esp,0xc
c0010c5a:	68 6b 39 02 c0       	push   0xc002396b
c0010c5f:	e8 03 be ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010c64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c67:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c6a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c70:	0f af f9             	imul   edi,ecx
c0010c73:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	40                   	inc    eax
c0010c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c82:	83 f8 40             	cmp    eax,0x40
c0010c85:	75 7d                	jne    c0010d04 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c87:	83 ec 0c             	sub    esp,0xc
c0010c8a:	53                   	push   ebx
c0010c8b:	e8 80 fe ff ff       	call   c0010b10 <VCache::writeWriteBuffer()>
c0010c90:	eb 42                	jmp    c0010cd4 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c92:	66 90                	xchg   ax,ax
c0010c94:	83 ec 0c             	sub    esp,0xc
c0010c97:	53                   	push   ebx
c0010c98:	e8 73 fe ff ff       	call   c0010b10 <VCache::writeWriteBuffer()>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010ca5:	7f 35                	jg     c0010cdc <VCache::write(unsigned long long, int, void*)+0x104>
c0010ca7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010cab:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010cae:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cb1:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010cb4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010cb8:	52                   	push   edx
c0010cb9:	56                   	push   esi
c0010cba:	6a 01                	push   0x1
c0010cbc:	68 81 39 02 c0       	push   0xc0023981
c0010cc1:	e8 a1 bd ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010cc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cc9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010ccc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010cd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	eb 2b                	jmp    c0010d04 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cdc:	50                   	push   eax
c0010cdd:	56                   	push   esi
c0010cde:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010ce2:	68 a2 39 02 c0       	push   0xc00239a2
c0010ce7:	e8 7b bd ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010cec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cef:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cf1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cf8:	55                   	push   ebp
c0010cf9:	57                   	push   edi
c0010cfa:	50                   	push   eax
c0010cfb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010cfe:	83 c4 20             	add    esp,0x20
c0010d01:	8d 76 00             	lea    esi,[esi+0x0]
c0010d04:	83 ec 0c             	sub    esp,0xc
c0010d07:	68 bf 39 02 c0       	push   0xc00239bf
c0010d0c:	e8 56 bd ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010d11:	83 c4 1c             	add    esp,0x1c
c0010d14:	31 c0                	xor    eax,eax
c0010d16:	5b                   	pop    ebx
c0010d17:	5e                   	pop    esi
c0010d18:	5f                   	pop    edi
c0010d19:	5d                   	pop    ebp
c0010d1a:	c3                   	ret    
c0010d1b:	90                   	nop

c0010d1c <VCache::read(unsigned long long, int, void*)>:
c0010d1c:	55                   	push   ebp
c0010d1d:	57                   	push   edi
c0010d1e:	56                   	push   esi
c0010d1f:	53                   	push   ebx
c0010d20:	83 ec 1c             	sub    esp,0x1c
c0010d23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d27:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d36:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d3a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d3e:	31 c0                	xor    eax,eax
c0010d40:	39 f0                	cmp    eax,esi
c0010d42:	7d 18                	jge    c0010d5c <VCache::read(unsigned long long, int, void*)+0x40>
c0010d44:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d47:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010d4d:	0f af f8             	imul   edi,eax
c0010d50:	89 fa                	mov    edx,edi
c0010d52:	01 ea                	add    edx,ebp
c0010d54:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010d56:	40                   	inc    eax
c0010d57:	eb e7                	jmp    c0010d40 <VCache::read(unsigned long long, int, void*)+0x24>
c0010d59:	8d 76 00             	lea    esi,[esi+0x0]
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	68 df 39 02 c0       	push   0xc00239df
c0010d64:	e8 fe bc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d70:	74 0e                	je     c0010d80 <VCache::read(unsigned long long, int, void*)+0x64>
c0010d72:	83 ec 0c             	sub    esp,0xc
c0010d75:	53                   	push   ebx
c0010d76:	e8 95 fd ff ff       	call   c0010b10 <VCache::writeWriteBuffer()>
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	66 90                	xchg   ax,ax
c0010d80:	83 fe 01             	cmp    esi,0x1
c0010d83:	75 7b                	jne    c0010e00 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d85:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d88:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d8f:	75 6f                	jne    c0010e00 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d91:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010d94:	89 d1                	mov    ecx,edx
c0010d96:	f7 d9                	neg    ecx
c0010d98:	89 cf                	mov    edi,ecx
c0010d9a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d9e:	c1 ff 1f             	sar    edi,0x1f
c0010da1:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010da4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010da8:	89 ce                	mov    esi,ecx
c0010daa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010dae:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010db2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010db6:	89 cf                	mov    edi,ecx
c0010db8:	74 0a                	je     c0010dc4 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dba:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010dbd:	75 05                	jne    c0010dc4 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dbf:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010dc2:	74 1c                	je     c0010de0 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010dc4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010dc8:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010dcb:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010dce:	83 ec 0c             	sub    esp,0xc
c0010dd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010dd3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010dd6:	52                   	push   edx
c0010dd7:	57                   	push   edi
c0010dd8:	56                   	push   esi
c0010dd9:	50                   	push   eax
c0010dda:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010ddd:	83 c4 20             	add    esp,0x20
c0010de0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010de3:	89 ef                	mov    edi,ebp
c0010de5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010deb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010dee:	8d 70 ff             	lea    esi,[eax-0x1]
c0010df1:	23 34 24             	and    esi,DWORD PTR [esp]
c0010df4:	0f af f1             	imul   esi,ecx
c0010df7:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010dfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dfc:	eb 32                	jmp    c0010e30 <VCache::read(unsigned long long, int, void*)+0x114>
c0010dfe:	66 90                	xchg   ax,ax
c0010e00:	83 ec 0c             	sub    esp,0xc
c0010e03:	53                   	push   ebx
c0010e04:	e8 f7 fc ff ff       	call   c0010b00 <VCache::invalidateReadBuffer()>
c0010e09:	83 c4 0c             	add    esp,0xc
c0010e0c:	55                   	push   ebp
c0010e0d:	56                   	push   esi
c0010e0e:	68 05 3a 02 c0       	push   0xc0023a05
c0010e13:	e8 4f bc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010e18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e1d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e20:	56                   	push   esi
c0010e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e29:	50                   	push   eax
c0010e2a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e2d:	83 c4 20             	add    esp,0x20
c0010e30:	83 ec 0c             	sub    esp,0xc
c0010e33:	68 21 3a 02 c0       	push   0xc0023a21
c0010e38:	e8 2a bc ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0010e3d:	83 c4 2c             	add    esp,0x2c
c0010e40:	31 c0                	xor    eax,eax
c0010e42:	5b                   	pop    ebx
c0010e43:	5e                   	pop    esi
c0010e44:	5f                   	pop    edi
c0010e45:	5d                   	pop    ebp
c0010e46:	c3                   	ret    
c0010e47:	90                   	nop

c0010e48 <Video::putrect(int, int, int, int, unsigned int)>:
c0010e48:	55                   	push   ebp
c0010e49:	57                   	push   edi
c0010e4a:	56                   	push   esi
c0010e4b:	53                   	push   ebx
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010e57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010e5b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010e5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e67:	01 df                	add    edi,ebx
c0010e69:	39 fb                	cmp    ebx,edi
c0010e6b:	7d 1f                	jge    c0010e8c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010e6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010e71:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010e75:	7d 12                	jge    c0010e89 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010e77:	8b 16                	mov    edx,DWORD PTR [esi]
c0010e79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010e7d:	53                   	push   ebx
c0010e7e:	55                   	push   ebp
c0010e7f:	45                   	inc    ebp
c0010e80:	56                   	push   esi
c0010e81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	eb e8                	jmp    c0010e71 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e89:	43                   	inc    ebx
c0010e8a:	eb dd                	jmp    c0010e69 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e8c:	83 c4 1c             	add    esp,0x1c
c0010e8f:	5b                   	pop    ebx
c0010e90:	5e                   	pop    esi
c0010e91:	5f                   	pop    edi
c0010e92:	5d                   	pop    ebp
c0010e93:	c3                   	ret    

c0010e94 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e94:	55                   	push   ebp
c0010e95:	57                   	push   edi
c0010e96:	31 ff                	xor    edi,edi
c0010e98:	56                   	push   esi
c0010e99:	53                   	push   ebx
c0010e9a:	83 ec 1c             	sub    esp,0x1c
c0010e9d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010ea1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ea5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010eac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eb5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010eb9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010ebd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010ec0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ec4:	01 f9                	add    ecx,edi
c0010ec6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010eca:	7d 2f                	jge    c0010efb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010ecc:	31 f6                	xor    esi,esi
c0010ece:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010ed2:	01 f2                	add    edx,esi
c0010ed4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010ed8:	7d 1a                	jge    c0010ef4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010eda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010edd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010ee0:	46                   	inc    esi
c0010ee1:	51                   	push   ecx
c0010ee2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ee6:	52                   	push   edx
c0010ee7:	55                   	push   ebp
c0010ee8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ef2:	eb da                	jmp    c0010ece <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010ef4:	47                   	inc    edi
c0010ef5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010ef9:	eb c5                	jmp    c0010ec0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010efb:	83 c4 1c             	add    esp,0x1c
c0010efe:	5b                   	pop    ebx
c0010eff:	5e                   	pop    esi
c0010f00:	5f                   	pop    edi
c0010f01:	5d                   	pop    ebp
c0010f02:	c3                   	ret    
c0010f03:	90                   	nop

c0010f04 <Video::blit(unsigned int*, int, int, int, int)>:
c0010f04:	55                   	push   ebp
c0010f05:	57                   	push   edi
c0010f06:	56                   	push   esi
c0010f07:	53                   	push   ebx
c0010f08:	83 ec 1c             	sub    esp,0x1c
c0010f0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f13:	85 c0                	test   eax,eax
c0010f15:	79 02                	jns    c0010f19 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f17:	31 c0                	xor    eax,eax
c0010f19:	c1 e0 02             	shl    eax,0x2
c0010f1c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f28:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f2c:	39 d8                	cmp    eax,ebx
c0010f2e:	7e 49                	jle    c0010f79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f30:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f36:	7c 41                	jl     c0010f79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f38:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f40:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f44:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010f48:	39 f9                	cmp    ecx,edi
c0010f4a:	7e 22                	jle    c0010f6e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010f4c:	83 c5 04             	add    ebp,0x4
c0010f4f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f55:	7c 14                	jl     c0010f6b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010f57:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010f59:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010f5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f64:	56                   	push   esi
c0010f65:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	47                   	inc    edi
c0010f6c:	eb d2                	jmp    c0010f40 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f72:	43                   	inc    ebx
c0010f73:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010f77:	eb ab                	jmp    c0010f24 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010f79:	83 c4 1c             	add    esp,0x1c
c0010f7c:	5b                   	pop    ebx
c0010f7d:	5e                   	pop    esi
c0010f7e:	5f                   	pop    edi
c0010f7f:	5d                   	pop    ebp
c0010f80:	c3                   	ret    
c0010f81:	90                   	nop

c0010f82 <Video::clearScreen(unsigned int)>:
c0010f82:	57                   	push   edi
c0010f83:	56                   	push   esi
c0010f84:	53                   	push   ebx
c0010f85:	31 db                	xor    ebx,ebx
c0010f87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f8b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f91:	7e 1f                	jle    c0010fb2 <Video::clearScreen(unsigned int)+0x30>
c0010f93:	31 ff                	xor    edi,edi
c0010f95:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f9b:	7e 12                	jle    c0010faf <Video::clearScreen(unsigned int)+0x2d>
c0010f9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010fa3:	53                   	push   ebx
c0010fa4:	57                   	push   edi
c0010fa5:	47                   	inc    edi
c0010fa6:	56                   	push   esi
c0010fa7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010faa:	83 c4 10             	add    esp,0x10
c0010fad:	eb e6                	jmp    c0010f95 <Video::clearScreen(unsigned int)+0x13>
c0010faf:	43                   	inc    ebx
c0010fb0:	eb d9                	jmp    c0010f8b <Video::clearScreen(unsigned int)+0x9>
c0010fb2:	5b                   	pop    ebx
c0010fb3:	5e                   	pop    esi
c0010fb4:	5f                   	pop    edi
c0010fb5:	c3                   	ret    

c0010fb6 <Video::putpixel(int, int, unsigned int)>:
c0010fb6:	c7 44 24 04 50 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a50
c0010fbe:	e9 66 33 00 00       	jmp    c0014329 <Krnl::panic(char const*)>
c0010fc3:	90                   	nop

c0010fc4 <Video::Video(char const*)>:
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcb:	83 ec 08             	sub    esp,0x8
c0010fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd2:	50                   	push   eax
c0010fd3:	e8 da d0 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c0010fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe4:	89 10                	mov    DWORD PTR [eax],edx
c0010fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010ff4:	90                   	nop
c0010ff5:	83 c4 0c             	add    esp,0xc
c0010ff8:	c3                   	ret    
c0010ff9:	90                   	nop

c0010ffa <Video::~Video()>:
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c0011002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011006:	89 10                	mov    DWORD PTR [eax],edx
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	50                   	push   eax
c0011010:	e8 67 cd ff ff       	call   c000dd7c <Device::~Device()>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	90                   	nop
c0011019:	83 c4 0c             	add    esp,0xc
c001101c:	c3                   	ret    
c001101d:	90                   	nop

c001101e <Video::~Video()>:
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	83 ec 0c             	sub    esp,0xc
c0011024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011028:	e8 cd ff ff ff       	call   c0010ffa <Video::~Video()>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	83 ec 08             	sub    esp,0x8
c0011033:	68 64 01 00 00       	push   0x164
c0011038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103c:	e8 45 b9 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	83 c4 0c             	add    esp,0xc
c0011047:	c3                   	ret    

c0011048 <Video::isMonochrome()>:
c0011048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001104c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011052:	c3                   	ret    
c0011053:	90                   	nop

c0011054 <Video::getWidth()>:
c0011054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011058:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001105e:	c3                   	ret    
c001105f:	90                   	nop

c0011060 <Video::getHeight()>:
c0011060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011064:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001106a:	c3                   	ret    
c001106b:	90                   	nop

c001106c <Video::drawCursor(int, int, unsigned char*, int)>:
c001106c:	55                   	push   ebp
c001106d:	57                   	push   edi
c001106e:	56                   	push   esi
c001106f:	53                   	push   ebx
c0011070:	83 ec 2c             	sub    esp,0x2c
c0011073:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011077:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001107b:	83 f8 01             	cmp    eax,0x1
c001107e:	19 c9                	sbb    ecx,ecx
c0011080:	31 db                	xor    ebx,ebx
c0011082:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011086:	89 cd                	mov    ebp,ecx
c0011088:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011090:	f7 d5                	not    ebp
c0011092:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011098:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001109c:	01 d8                	add    eax,ebx
c001109e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110a2:	56                   	push   esi
c00110a3:	e8 b8 ff ff ff       	call   c0011060 <Video::getHeight()>
c00110a8:	59                   	pop    ecx
c00110a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00110ad:	7e 70                	jle    c001111f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00110af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00110b7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00110ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110c2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00110c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110cd:	89 f8                	mov    eax,edi
c00110cf:	83 c0 20             	add    eax,0x20
c00110d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110d6:	56                   	push   esi
c00110d7:	e8 78 ff ff ff       	call   c0011054 <Video::getWidth()>
c00110dc:	5a                   	pop    edx
c00110dd:	39 c7                	cmp    edi,eax
c00110df:	7d 34                	jge    c0011115 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00110e1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00110e6:	74 05                	je     c00110ed <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00110e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00110ea:	55                   	push   ebp
c00110eb:	eb 0d                	jmp    c00110fa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00110ed:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00110f2:	74 12                	je     c0011106 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00110f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00110f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00110fe:	57                   	push   edi
c00110ff:	56                   	push   esi
c0011100:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001110a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001110e:	47                   	inc    edi
c001110f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011113:	75 c1                	jne    c00110d6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011115:	43                   	inc    ebx
c0011116:	83 fb 20             	cmp    ebx,0x20
c0011119:	0f 85 79 ff ff ff    	jne    c0011098 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001111f:	83 c4 2c             	add    esp,0x2c
c0011122:	5b                   	pop    ebx
c0011123:	5e                   	pop    esi
c0011124:	5f                   	pop    edi
c0011125:	5d                   	pop    ebp
c0011126:	c3                   	ret    
c0011127:	90                   	nop

c0011128 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011128:	55                   	push   ebp
c0011129:	57                   	push   edi
c001112a:	56                   	push   esi
c001112b:	53                   	push   ebx
c001112c:	83 ec 28             	sub    esp,0x28
c001112f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011133:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011137:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001113b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001113f:	c1 e6 08             	shl    esi,0x8
c0011142:	01 c6                	add    esi,eax
c0011144:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011148:	c1 e0 08             	shl    eax,0x8
c001114b:	01 d0                	add    eax,edx
c001114d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011151:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011155:	0f af c6             	imul   eax,esi
c0011158:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001115f:	50                   	push   eax
c0011160:	e8 5e 88 ff ff       	call   c00099c3 <malloc>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	89 c7                	mov    edi,eax
c001116a:	85 c0                	test   eax,eax
c001116c:	75 10                	jne    c001117e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001116e:	83 ec 0c             	sub    esp,0xc
c0011171:	68 71 3a 02 c0       	push   0xc0023a71
c0011176:	e8 ae 31 00 00       	call   c0014329 <Krnl::panic(char const*)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011181:	ba 12 00 00 00       	mov    edx,0x12
c0011186:	84 c0                	test   al,al
c0011188:	74 11                	je     c001119b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001118a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001118e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011192:	c1 fa 03             	sar    edx,0x3
c0011195:	0f af d1             	imul   edx,ecx
c0011198:	83 c2 12             	add    edx,0x12
c001119b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001119f:	74 04                	je     c00111a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00111a1:	85 f6                	test   esi,esi
c00111a3:	75 12                	jne    c00111b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00111a5:	83 ec 0c             	sub    esp,0xc
c00111a8:	68 81 3a 02 c0       	push   0xc0023a81
c00111ad:	e8 b5 b8 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00111b2:	e9 b8 00 00 00       	jmp    c001126f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00111b7:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00111bb:	80 f9 02             	cmp    cl,0x2
c00111be:	0f 85 96 00 00 00    	jne    c001125a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00111c4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00111c9:	75 0e                	jne    c00111d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111cb:	84 c0                	test   al,al
c00111cd:	75 0a                	jne    c00111d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111cf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00111d2:	83 e8 18             	sub    eax,0x18
c00111d5:	a8 f7                	test   al,0xf7
c00111d7:	74 0a                	je     c00111e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00111d9:	83 ec 0c             	sub    esp,0xc
c00111dc:	68 96 3a 02 c0       	push   0xc0023a96
c00111e1:	eb 7f                	jmp    c0011262 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00111e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00111f3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00111f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111ff:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011203:	75 0c                	jne    c0011211 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011205:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001120a:	c1 e0 18             	shl    eax,0x18
c001120d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011211:	45                   	inc    ebp
c0011212:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011217:	c1 e1 10             	shl    ecx,0x10
c001121a:	89 c8                	mov    eax,ecx
c001121c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011221:	c1 e1 08             	shl    ecx,0x8
c0011224:	09 c1                	or     ecx,eax
c0011226:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001122a:	09 c1                	or     ecx,eax
c001122c:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011230:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011234:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011238:	c1 f8 03             	sar    eax,0x3
c001123b:	01 c2                	add    edx,eax
c001123d:	89 e8                	mov    eax,ebp
c001123f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011243:	39 c6                	cmp    esi,eax
c0011245:	7f b0                	jg     c00111f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011247:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001124b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001124f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011252:	7e 22                	jle    c0011276 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011254:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011258:	eb 99                	jmp    c00111f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001125a:	50                   	push   eax
c001125b:	50                   	push   eax
c001125c:	51                   	push   ecx
c001125d:	68 a4 3a 02 c0       	push   0xc0023aa4
c0011262:	e8 00 b8 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0011267:	89 3c 24             	mov    DWORD PTR [esp],edi
c001126a:	e8 64 87 ff ff       	call   c00099d3 <free>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	31 ff                	xor    edi,edi
c0011274:	eb 0f                	jmp    c0011285 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011276:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001127a:	89 30                	mov    DWORD PTR [eax],esi
c001127c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011280:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011283:	89 30                	mov    DWORD PTR [eax],esi
c0011285:	83 c4 1c             	add    esp,0x1c
c0011288:	89 f8                	mov    eax,edi
c001128a:	5b                   	pop    ebx
c001128b:	5e                   	pop    esi
c001128c:	5f                   	pop    edi
c001128d:	5d                   	pop    ebp
c001128e:	c3                   	ret    
c001128f:	90                   	nop

c0011290 <Video::putTGA(int, int, unsigned char*, int)>:
c0011290:	55                   	push   ebp
c0011291:	57                   	push   edi
c0011292:	56                   	push   esi
c0011293:	53                   	push   ebx
c0011294:	83 ec 28             	sub    esp,0x28
c0011297:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001129b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001129f:	50                   	push   eax
c00112a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112a4:	50                   	push   eax
c00112a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112ad:	56                   	push   esi
c00112ae:	e8 75 fe ff ff       	call   c0011128 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00112b3:	83 c4 20             	add    esp,0x20
c00112b6:	85 c0                	test   eax,eax
c00112b8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00112bc:	74 35                	je     c00112f3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112be:	89 c7                	mov    edi,eax
c00112c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112c4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00112c8:	39 d8                	cmp    eax,ebx
c00112ca:	7e 27                	jle    c00112f3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00112d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112d4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00112d8:	39 e8                	cmp    eax,ebp
c00112da:	7e 14                	jle    c00112f0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00112dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00112de:	83 c7 04             	add    edi,0x4
c00112e1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00112e4:	53                   	push   ebx
c00112e5:	55                   	push   ebp
c00112e6:	45                   	inc    ebp
c00112e7:	56                   	push   esi
c00112e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112eb:	83 c4 10             	add    esp,0x10
c00112ee:	eb e0                	jmp    c00112d0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00112f0:	43                   	inc    ebx
c00112f1:	eb cd                	jmp    c00112c0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	5b                   	pop    ebx
c00112f7:	5e                   	pop    esi
c00112f8:	5f                   	pop    edi
c00112f9:	5d                   	pop    ebp
c00112fa:	c3                   	ret    
c00112fb:	90                   	nop

c00112fc <ACPI::close(int, int, void*)>:
c00112fc:	83 ec 1c             	sub    esp,0x1c
c00112ff:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011307:	74 0b                	je     c0011314 <ACPI::close(int, int, void*)+0x18>
c0011309:	b8 00 00 00 00       	mov    eax,0x0
c001130e:	e9 99 00 00 00       	jmp    c00113ac <ACPI::close(int, int, void*)+0xb0>
c0011313:	90                   	nop
c0011314:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011319:	75 29                	jne    c0011344 <ACPI::close(int, int, void*)+0x48>
c001131b:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c0011320:	85 c0                	test   eax,eax
c0011322:	74 08                	je     c001132c <ACPI::close(int, int, void*)+0x30>
c0011324:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c0011329:	ff d0                	call   eax
c001132b:	90                   	nop
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	68 00 3b 02 c0       	push   0xc0023b00
c0011334:	e8 f0 2f 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011341:	eb 69                	jmp    c00113ac <ACPI::close(int, int, void*)+0xb0>
c0011343:	90                   	nop
c0011344:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011349:	75 59                	jne    c00113a4 <ACPI::close(int, int, void*)+0xa8>
c001134b:	a1 44 6a 02 c0       	mov    eax,ds:0xc0026a44
c0011350:	85 c0                	test   eax,eax
c0011352:	74 08                	je     c001135c <ACPI::close(int, int, void*)+0x60>
c0011354:	a1 44 6a 02 c0       	mov    eax,ds:0xc0026a44
c0011359:	ff d0                	call   eax
c001135b:	90                   	nop
c001135c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011369:	83 e0 02             	and    eax,0x2
c001136c:	74 1e                	je     c001138c <ACPI::close(int, int, void*)+0x90>
c001136e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011379:	89 c2                	mov    edx,eax
c001137b:	ec                   	in     al,dx
c001137c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011380:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011384:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011388:	eb da                	jmp    c0011364 <ACPI::close(int, int, void*)+0x68>
c001138a:	66 90                	xchg   ax,ax
c001138c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011393:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011398:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001139c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113a0:	ee                   	out    dx,al
c00113a1:	8d 76 00             	lea    esi,[esi+0x0]
c00113a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113a9:	8d 76 00             	lea    esi,[esi+0x0]
c00113ac:	83 c4 1c             	add    esp,0x1c
c00113af:	c3                   	ret    

c00113b0 <findRSDP()>:
c00113b0:	83 ec 1c             	sub    esp,0x1c
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	68 db 3b 02 c0       	push   0xc0023bdb
c00113bb:	e8 5d 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113c0:	83 c4 10             	add    esp,0x10
c00113c3:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00113c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113ce:	83 e0 04             	and    eax,0x4
c00113d1:	84 c0                	test   al,al
c00113d3:	75 0b                	jne    c00113e0 <findRSDP()+0x30>
c00113d5:	b8 00 00 00 00       	mov    eax,0x0
c00113da:	e9 a1 00 00 00       	jmp    c0011480 <findRSDP()+0xd0>
c00113df:	90                   	nop
c00113e0:	a1 14 64 02 c0       	mov    eax,ds:0xc0026414
c00113e5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00113ea:	7f 1c                	jg     c0011408 <findRSDP()+0x58>
c00113ec:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00113f1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00113f7:	83 e2 fb             	and    edx,0xfffffffb
c00113fa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011400:	b8 00 00 00 00       	mov    eax,0x0
c0011405:	eb 79                	jmp    c0011480 <findRSDP()+0xd0>
c0011407:	90                   	nop
c0011408:	83 ec 0c             	sub    esp,0xc
c001140b:	68 eb 3b 02 c0       	push   0xc0023beb
c0011410:	e8 08 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011420:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011428:	77 3e                	ja     c0011468 <findRSDP()+0xb8>
c001142a:	83 ec 04             	sub    esp,0x4
c001142d:	6a 08                	push   0x8
c001142f:	68 04 3c 02 c0       	push   0xc0023c04
c0011434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011438:	e8 43 f1 fe ff       	call   c0000580 <memcmp>
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	85 c0                	test   eax,eax
c0011442:	0f 94 c0             	sete   al
c0011445:	84 c0                	test   al,al
c0011447:	74 17                	je     c0011460 <findRSDP()+0xb0>
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	68 0d 3c 02 c0       	push   0xc0023c0d
c0011451:	e8 c7 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001145d:	eb 21                	jmp    c0011480 <findRSDP()+0xd0>
c001145f:	90                   	nop
c0011460:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011465:	eb b9                	jmp    c0011420 <findRSDP()+0x70>
c0011467:	90                   	nop
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	68 1b 3c 02 c0       	push   0xc0023c1b
c0011470:	e8 a8 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	b8 00 00 00 00       	mov    eax,0x0
c001147d:	8d 76 00             	lea    esi,[esi+0x0]
c0011480:	83 c4 1c             	add    esp,0x1c
c0011483:	c3                   	ret    

c0011484 <loadACPITables(unsigned char*)>:
c0011484:	57                   	push   edi
c0011485:	56                   	push   esi
c0011486:	53                   	push   ebx
c0011487:	83 ec 60             	sub    esp,0x60
c001148a:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001148f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011495:	83 e0 04             	and    eax,0x4
c0011498:	84 c0                	test   al,al
c001149a:	0f 84 3c 02 00 00    	je     c00116dc <loadACPITables(unsigned char*)+0x258>
c00114a0:	a0 60 6c 02 c0       	mov    al,ds:0xc0026c60
c00114a5:	84 c0                	test   al,al
c00114a7:	74 77                	je     c0011520 <loadACPITables(unsigned char*)+0x9c>
c00114a9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114ad:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00114b1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00114b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b8:	83 e8 24             	sub    eax,0x24
c00114bb:	c1 e8 03             	shr    eax,0x3
c00114be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00114c2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00114ca:	66 90                	xchg   ax,ax
c00114cc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114d0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00114d4:	0f 8d b6 00 00 00    	jge    c0011590 <loadACPITables(unsigned char*)+0x10c>
c00114da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114de:	83 c0 24             	add    eax,0x24
c00114e1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00114e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00114ed:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114f1:	c1 e0 03             	shl    eax,0x3
c00114f4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00114f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00114fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00114ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011501:	89 c1                	mov    ecx,eax
c0011503:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c0011508:	8d 50 01             	lea    edx,[eax+0x1]
c001150b:	89 15 4c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a4c,edx
c0011511:	89 ca                	mov    edx,ecx
c0011513:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c001151a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001151e:	eb ac                	jmp    c00114cc <loadACPITables(unsigned char*)+0x48>
c0011520:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011528:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	83 e8 24             	sub    eax,0x24
c0011532:	c1 e8 02             	shr    eax,0x2
c0011535:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011539:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011541:	8d 76 00             	lea    esi,[esi+0x0]
c0011544:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011548:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001154c:	7d 42                	jge    c0011590 <loadACPITables(unsigned char*)+0x10c>
c001154e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011552:	83 c0 24             	add    eax,0x24
c0011555:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011559:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001155d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011561:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011565:	c1 e0 02             	shl    eax,0x2
c0011568:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001156c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011570:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011572:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c0011577:	8d 50 01             	lea    edx,[eax+0x1]
c001157a:	89 15 4c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a4c,edx
c0011580:	89 ca                	mov    edx,ecx
c0011582:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c0011589:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001158d:	eb b5                	jmp    c0011544 <loadACPITables(unsigned char*)+0xc0>
c001158f:	90                   	nop
c0011590:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011598:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c001159d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00115a1:	0f 8d 39 01 00 00    	jge    c00116e0 <loadACPITables(unsigned char*)+0x25c>
c00115a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115ab:	8b 04 c5 64 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd959c]
c00115b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00115be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c2:	25 ff 0f 00 00       	and    eax,0xfff
c00115c7:	89 c6                	mov    esi,eax
c00115c9:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c00115cf:	83 ec 0c             	sub    esp,0xc
c00115d2:	6a 01                	push   0x1
c00115d4:	e8 bc a0 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115e6:	83 ec 0c             	sub    esp,0xc
c00115e9:	6a 01                	push   0x1
c00115eb:	6a 01                	push   0x1
c00115ed:	50                   	push   eax
c00115ee:	52                   	push   edx
c00115ef:	53                   	push   ebx
c00115f0:	e8 3d aa ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115f5:	83 c4 20             	add    esp,0x20
c00115f8:	09 f0                	or     eax,esi
c00115fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115fe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011602:	c1 e0 03             	shl    eax,0x3
c0011605:	05 60 6a 02 c0       	add    eax,0xc0026a60
c001160a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001160e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011612:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011616:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001161e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011622:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001162a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001162e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011632:	89 c6                	mov    esi,eax
c0011634:	89 d7                	mov    edi,edx
c0011636:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011638:	89 c8                	mov    eax,ecx
c001163a:	89 fa                	mov    edx,edi
c001163c:	89 f3                	mov    ebx,esi
c001163e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011642:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011646:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001164a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001164e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011651:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011655:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011659:	05 00 10 00 00       	add    eax,0x1000
c001165e:	c1 e8 0c             	shr    eax,0xc
c0011661:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011669:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001166d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011671:	25 ff 0f 00 00       	and    eax,0xfff
c0011676:	89 c6                	mov    esi,eax
c0011678:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c001167e:	83 ec 0c             	sub    esp,0xc
c0011681:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011685:	e8 0b a0 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c001168a:	83 c4 10             	add    esp,0x10
c001168d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011691:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	6a 01                	push   0x1
c001169c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00116a0:	50                   	push   eax
c00116a1:	52                   	push   edx
c00116a2:	53                   	push   ebx
c00116a3:	e8 8a a9 ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00116a8:	83 c4 20             	add    esp,0x20
c00116ab:	09 f0                	or     eax,esi
c00116ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00116b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b5:	83 ec 0c             	sub    esp,0xc
c00116b8:	50                   	push   eax
c00116b9:	e8 07 a3 ff ff       	call   c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00116be:	83 c4 10             	add    esp,0x10
c00116c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00116c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116c9:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c00116d0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00116d4:	e9 bf fe ff ff       	jmp    c0011598 <loadACPITables(unsigned char*)+0x114>
c00116d9:	8d 76 00             	lea    esi,[esi+0x0]
c00116dc:	90                   	nop
c00116dd:	8d 76 00             	lea    esi,[esi+0x0]
c00116e0:	83 c4 60             	add    esp,0x60
c00116e3:	5b                   	pop    ebx
c00116e4:	5e                   	pop    esi
c00116e5:	5f                   	pop    edi
c00116e6:	c3                   	ret    
c00116e7:	90                   	nop

c00116e8 <findRSDT(unsigned char*)>:
c00116e8:	57                   	push   edi
c00116e9:	56                   	push   esi
c00116ea:	53                   	push   ebx
c00116eb:	83 ec 50             	sub    esp,0x50
c00116ee:	83 ec 0c             	sub    esp,0xc
c00116f1:	68 2f 3c 02 c0       	push   0xc0023c2f
c00116f6:	e8 22 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011703:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011709:	83 e0 04             	and    eax,0x4
c001170c:	84 c0                	test   al,al
c001170e:	75 0c                	jne    c001171c <findRSDT(unsigned char*)+0x34>
c0011710:	b8 00 00 00 00       	mov    eax,0x0
c0011715:	e9 86 01 00 00       	jmp    c00118a0 <findRSDT(unsigned char*)+0x1b8>
c001171a:	66 90                	xchg   ax,ax
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	68 41 3c 02 c0       	push   0xc0023c41
c0011724:	e8 f4 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011729:	83 c4 10             	add    esp,0x10
c001172c:	89 e0                	mov    eax,esp
c001172e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011732:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011736:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001173a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011742:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011746:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001174a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001174e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011752:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011756:	89 c6                	mov    esi,eax
c0011758:	89 d7                	mov    edi,edx
c001175a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001175c:	89 c8                	mov    eax,ecx
c001175e:	89 fa                	mov    edx,edi
c0011760:	89 f3                	mov    ebx,esi
c0011762:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011766:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001176a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001176e:	83 ec 0c             	sub    esp,0xc
c0011771:	68 53 3c 02 c0       	push   0xc0023c53
c0011776:	e8 a2 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011782:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011786:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	68 65 3c 02 c0       	push   0xc0023c65
c0011796:	e8 82 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001179b:	83 c4 10             	add    esp,0x10
c001179e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00117aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117b2:	83 ec 04             	sub    esp,0x4
c00117b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117bd:	68 24 3b 02 c0       	push   0xc0023b24
c00117c2:	e8 a0 b2 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00117c7:	83 c4 10             	add    esp,0x10
c00117ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00117ce:	25 ff 0f 00 00       	and    eax,0xfff
c00117d3:	89 c6                	mov    esi,eax
c00117d5:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c00117db:	83 ec 0c             	sub    esp,0xc
c00117de:	6a 02                	push   0x2
c00117e0:	e8 b0 9e ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00117ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	6a 01                	push   0x1
c00117f7:	6a 02                	push   0x2
c00117f9:	50                   	push   eax
c00117fa:	52                   	push   edx
c00117fb:	53                   	push   ebx
c00117fc:	e8 31 a8 ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011801:	83 c4 20             	add    esp,0x20
c0011804:	09 f0                	or     eax,esi
c0011806:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001180a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001180e:	25 ff 0f 00 00       	and    eax,0xfff
c0011813:	89 c6                	mov    esi,eax
c0011815:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c001181b:	83 ec 0c             	sub    esp,0xc
c001181e:	6a 02                	push   0x2
c0011820:	e8 70 9e ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001182c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011832:	83 ec 0c             	sub    esp,0xc
c0011835:	6a 01                	push   0x1
c0011837:	6a 02                	push   0x2
c0011839:	50                   	push   eax
c001183a:	52                   	push   edx
c001183b:	53                   	push   ebx
c001183c:	e8 f1 a7 ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011841:	83 c4 20             	add    esp,0x20
c0011844:	09 f0                	or     eax,esi
c0011846:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001184a:	83 ec 04             	sub    esp,0x4
c001184d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011851:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011855:	68 44 3b 02 c0       	push   0xc0023b44
c001185a:	e8 08 b2 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001185f:	83 c4 10             	add    esp,0x10
c0011862:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011867:	75 13                	jne    c001187c <findRSDT(unsigned char*)+0x194>
c0011869:	c6 05 60 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026c60,0x0
c0011870:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011874:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011878:	eb 22                	jmp    c001189c <findRSDT(unsigned char*)+0x1b4>
c001187a:	66 90                	xchg   ax,ax
c001187c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011881:	75 11                	jne    c0011894 <findRSDT(unsigned char*)+0x1ac>
c0011883:	c6 05 60 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c60,0x1
c001188a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001188e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011892:	eb 08                	jmp    c001189c <findRSDT(unsigned char*)+0x1b4>
c0011894:	b8 00 00 00 00       	mov    eax,0x0
c0011899:	eb 05                	jmp    c00118a0 <findRSDT(unsigned char*)+0x1b8>
c001189b:	90                   	nop
c001189c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00118a0:	83 c4 50             	add    esp,0x50
c00118a3:	5b                   	pop    ebx
c00118a4:	5e                   	pop    esi
c00118a5:	5f                   	pop    edi
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <findDataTable(unsigned char*, char*)>:
c00118a8:	83 ec 1c             	sub    esp,0x1c
c00118ab:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00118b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118b6:	83 e0 04             	and    eax,0x4
c00118b9:	84 c0                	test   al,al
c00118bb:	75 07                	jne    c00118c4 <findDataTable(unsigned char*, char*)+0x1c>
c00118bd:	b8 00 00 00 00       	mov    eax,0x0
c00118c2:	eb 58                	jmp    c001191c <findDataTable(unsigned char*, char*)+0x74>
c00118c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118cc:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00118d1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00118d5:	7d 3d                	jge    c0011914 <findDataTable(unsigned char*, char*)+0x6c>
c00118d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118db:	c1 e0 03             	shl    eax,0x3
c00118de:	05 60 6a 02 c0       	add    eax,0xc0026a60
c00118e3:	83 ec 04             	sub    esp,0x4
c00118e6:	6a 04                	push   0x4
c00118e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118ec:	50                   	push   eax
c00118ed:	e8 8e ec fe ff       	call   c0000580 <memcmp>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	85 c0                	test   eax,eax
c00118f7:	0f 94 c0             	sete   al
c00118fa:	84 c0                	test   al,al
c00118fc:	74 0e                	je     c001190c <findDataTable(unsigned char*, char*)+0x64>
c00118fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011902:	8b 04 c5 64 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd959c]
c0011909:	eb 11                	jmp    c001191c <findDataTable(unsigned char*, char*)+0x74>
c001190b:	90                   	nop
c001190c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011910:	eb ba                	jmp    c00118cc <findDataTable(unsigned char*, char*)+0x24>
c0011912:	66 90                	xchg   ax,ax
c0011914:	b8 00 00 00 00       	mov    eax,0x0
c0011919:	8d 76 00             	lea    esi,[esi+0x0]
c001191c:	83 c4 1c             	add    esp,0x1c
c001191f:	c3                   	ret    

c0011920 <scanMADT()>:
c0011920:	53                   	push   ebx
c0011921:	83 ec 38             	sub    esp,0x38
c0011924:	83 ec 0c             	sub    esp,0xc
c0011927:	68 77 3c 02 c0       	push   0xc0023c77
c001192c:	e8 ec 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011931:	83 c4 10             	add    esp,0x10
c0011934:	a1 e0 63 02 c0       	mov    eax,ds:0xc00263e0
c0011939:	25 00 04 00 00       	and    eax,0x400
c001193e:	74 14                	je     c0011954 <scanMADT()+0x34>
c0011940:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011945:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001194b:	83 e2 fb             	and    edx,0xfffffffb
c001194e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011954:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011959:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001195f:	83 e0 04             	and    eax,0x4
c0011962:	84 c0                	test   al,al
c0011964:	0f 84 82 04 00 00    	je     c0011dec <scanMADT()+0x4cc>
c001196a:	83 ec 0c             	sub    esp,0xc
c001196d:	68 84 3c 02 c0       	push   0xc0023c84
c0011972:	e8 a6 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011977:	83 c4 10             	add    esp,0x10
c001197a:	e8 31 fa ff ff       	call   c00113b0 <findRSDP()>
c001197f:	a3 6c 6c 02 c0       	mov    ds:0xc0026c6c,eax
c0011984:	a1 6c 6c 02 c0       	mov    eax,ds:0xc0026c6c
c0011989:	85 c0                	test   eax,eax
c001198b:	75 1b                	jne    c00119a8 <scanMADT()+0x88>
c001198d:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011992:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011998:	83 e2 fb             	and    edx,0xfffffffb
c001199b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119a1:	e9 4e 04 00 00       	jmp    c0011df4 <scanMADT()+0x4d4>
c00119a6:	66 90                	xchg   ax,ax
c00119a8:	83 ec 0c             	sub    esp,0xc
c00119ab:	68 96 3c 02 c0       	push   0xc0023c96
c00119b0:	e8 68 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119b5:	83 c4 10             	add    esp,0x10
c00119b8:	a1 6c 6c 02 c0       	mov    eax,ds:0xc0026c6c
c00119bd:	83 ec 0c             	sub    esp,0xc
c00119c0:	50                   	push   eax
c00119c1:	e8 22 fd ff ff       	call   c00116e8 <findRSDT(unsigned char*)>
c00119c6:	83 c4 10             	add    esp,0x10
c00119c9:	a3 68 6c 02 c0       	mov    ds:0xc0026c68,eax
c00119ce:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c00119d3:	85 c0                	test   eax,eax
c00119d5:	75 19                	jne    c00119f0 <scanMADT()+0xd0>
c00119d7:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00119dc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119e2:	83 e2 fb             	and    edx,0xfffffffb
c00119e5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119eb:	e9 04 04 00 00       	jmp    c0011df4 <scanMADT()+0x4d4>
c00119f0:	83 ec 0c             	sub    esp,0xc
c00119f3:	68 a6 3c 02 c0       	push   0xc0023ca6
c00119f8:	e8 20 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119fd:	83 c4 10             	add    esp,0x10
c0011a00:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	50                   	push   eax
c0011a09:	e8 76 fa ff ff       	call   c0011484 <loadACPITables(unsigned char*)>
c0011a0e:	83 c4 10             	add    esp,0x10
c0011a11:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0011a16:	83 ec 08             	sub    esp,0x8
c0011a19:	68 be 3c 02 c0       	push   0xc0023cbe
c0011a1e:	50                   	push   eax
c0011a1f:	e8 84 fe ff ff       	call   c00118a8 <findDataTable(unsigned char*, char*)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a2b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a30:	75 1a                	jne    c0011a4c <scanMADT()+0x12c>
c0011a32:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0011a37:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a3d:	83 e2 fe             	and    edx,0xfffffffe
c0011a40:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a46:	e9 a9 03 00 00       	jmp    c0011df4 <scanMADT()+0x4d4>
c0011a4b:	90                   	nop
c0011a4c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a5b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011a5f:	0f 87 8f 03 00 00    	ja     c0011df4 <scanMADT()+0x4d4>
c0011a65:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011a6d:	0f 87 81 03 00 00    	ja     c0011df4 <scanMADT()+0x4d4>
c0011a73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a77:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0011a82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a8e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a96:	8d 50 01             	lea    edx,[eax+0x1]
c0011a99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011aa1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011aa5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011aa9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011aae:	0f 86 3c 03 00 00    	jbe    c0011df0 <scanMADT()+0x4d0>
c0011ab4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011ab9:	75 59                	jne    c0011b14 <scanMADT()+0x1f4>
c0011abb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011abf:	8d 50 01             	lea    edx,[eax+0x1]
c0011ac2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ac6:	8a 15 60 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e60
c0011acc:	0f b6 d2             	movzx  edx,dl
c0011acf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ad3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ad7:	88 82 a0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9160],al
c0011add:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ae1:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ae8:	8a 15 60 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e60
c0011aee:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011af1:	88 0d 60 6e 02 c0    	mov    BYTE PTR ds:0xc0026e60,cl
c0011af7:	0f b6 d2             	movzx  edx,dl
c0011afa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011afe:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b02:	88 82 80 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9180],al
c0011b08:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b0d:	e9 c6 02 00 00       	jmp    c0011dd8 <scanMADT()+0x4b8>
c0011b12:	66 90                	xchg   ax,ax
c0011b14:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b19:	0f 85 15 01 00 00    	jne    c0011c34 <scanMADT()+0x314>
c0011b1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b23:	8d 50 01             	lea    edx,[eax+0x1]
c0011b26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b2a:	8a 15 20 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d20
c0011b30:	0f b6 d2             	movzx  edx,dl
c0011b33:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b37:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b3b:	88 82 40 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd92c0],al
c0011b41:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b4d:	01 d0                	add    eax,edx
c0011b4f:	83 c0 2c             	add    eax,0x2c
c0011b52:	8a 00                	mov    al,BYTE PTR [eax]
c0011b54:	0f b6 d0             	movzx  edx,al
c0011b57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b62:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b66:	0f b6 c0             	movzx  eax,al
c0011b69:	c1 e0 08             	shl    eax,0x8
c0011b6c:	89 d1                	mov    ecx,edx
c0011b6e:	09 c1                	or     ecx,eax
c0011b70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b74:	8d 50 02             	lea    edx,[eax+0x2]
c0011b77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b7b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b7f:	0f b6 c0             	movzx  eax,al
c0011b82:	c1 e0 10             	shl    eax,0x10
c0011b85:	09 c1                	or     ecx,eax
c0011b87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b8b:	8d 50 03             	lea    edx,[eax+0x3]
c0011b8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b92:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b96:	0f b6 c0             	movzx  eax,al
c0011b99:	c1 e0 18             	shl    eax,0x18
c0011b9c:	09 c1                	or     ecx,eax
c0011b9e:	89 ca                	mov    edx,ecx
c0011ba0:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011ba5:	0f b6 c0             	movzx  eax,al
c0011ba8:	89 14 85 60 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd92a0],edx
c0011baf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011bb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bbc:	01 d0                	add    eax,edx
c0011bbe:	83 c0 2c             	add    eax,0x2c
c0011bc1:	8a 00                	mov    al,BYTE PTR [eax]
c0011bc3:	0f b6 d0             	movzx  edx,al
c0011bc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bca:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bd1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bd5:	0f b6 c0             	movzx  eax,al
c0011bd8:	c1 e0 08             	shl    eax,0x8
c0011bdb:	89 d1                	mov    ecx,edx
c0011bdd:	09 c1                	or     ecx,eax
c0011bdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011be3:	8d 50 02             	lea    edx,[eax+0x2]
c0011be6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bee:	0f b6 c0             	movzx  eax,al
c0011bf1:	c1 e0 10             	shl    eax,0x10
c0011bf4:	09 c1                	or     ecx,eax
c0011bf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bfa:	8d 50 03             	lea    edx,[eax+0x3]
c0011bfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c01:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c05:	0f b6 c0             	movzx  eax,al
c0011c08:	c1 e0 18             	shl    eax,0x18
c0011c0b:	09 c1                	or     ecx,eax
c0011c0d:	89 ca                	mov    edx,ecx
c0011c0f:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011c14:	0f b6 c0             	movzx  eax,al
c0011c17:	89 14 85 e0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9220],edx
c0011c1e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c23:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011c28:	40                   	inc    eax
c0011c29:	a2 20 6d 02 c0       	mov    ds:0xc0026d20,al
c0011c2e:	e9 a5 01 00 00       	jmp    c0011dd8 <scanMADT()+0x4b8>
c0011c33:	90                   	nop
c0011c34:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c39:	0f 85 e9 00 00 00    	jne    c0011d28 <scanMADT()+0x408>
c0011c3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c43:	8d 50 01             	lea    edx,[eax+0x1]
c0011c46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c52:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011c56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0011c5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c69:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011c6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c75:	01 d0                	add    eax,edx
c0011c77:	83 c0 2c             	add    eax,0x2c
c0011c7a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c7c:	0f b6 d0             	movzx  edx,al
c0011c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c83:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c8a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c8e:	0f b6 c0             	movzx  eax,al
c0011c91:	c1 e0 08             	shl    eax,0x8
c0011c94:	89 d1                	mov    ecx,edx
c0011c96:	09 c1                	or     ecx,eax
c0011c98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c9c:	8d 50 02             	lea    edx,[eax+0x2]
c0011c9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ca3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ca7:	0f b6 c0             	movzx  eax,al
c0011caa:	c1 e0 10             	shl    eax,0x10
c0011cad:	09 c1                	or     ecx,eax
c0011caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb3:	8d 50 03             	lea    edx,[eax+0x3]
c0011cb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cbe:	0f b6 c0             	movzx  eax,al
c0011cc1:	c1 e0 18             	shl    eax,0x18
c0011cc4:	09 c8                	or     eax,ecx
c0011cc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ccf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd7:	01 d0                	add    eax,edx
c0011cd9:	83 c0 2c             	add    eax,0x2c
c0011cdc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cde:	0f b6 c0             	movzx  eax,al
c0011ce1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ce5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ce8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cec:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011cf0:	0f b6 d2             	movzx  edx,dl
c0011cf3:	c1 e2 08             	shl    edx,0x8
c0011cf6:	09 d0                	or     eax,edx
c0011cf8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011cfd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d02:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d0b:	88 90 c0 5a 02 c0    	mov    BYTE PTR [eax-0x3ffda540],dl
c0011d11:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d16:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d1b:	66 89 84 12 00 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9300],ax
c0011d23:	e9 b0 00 00 00       	jmp    c0011dd8 <scanMADT()+0x4b8>
c0011d28:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d2d:	0f 85 99 00 00 00    	jne    c0011dcc <scanMADT()+0x4ac>
c0011d33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d37:	8d 50 01             	lea    edx,[eax+0x1]
c0011d3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d42:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d46:	0f b6 c0             	movzx  eax,al
c0011d49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d55:	01 d0                	add    eax,edx
c0011d57:	83 c0 2c             	add    eax,0x2c
c0011d5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011d5c:	0f b6 d0             	movzx  edx,al
c0011d5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d63:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d6a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d6e:	0f b6 c0             	movzx  eax,al
c0011d71:	c1 e0 08             	shl    eax,0x8
c0011d74:	09 d0                	or     eax,edx
c0011d76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d7a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d83:	8d 50 01             	lea    edx,[eax+0x1]
c0011d86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d92:	0f b6 c0             	movzx  eax,al
c0011d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d9d:	c1 e0 08             	shl    eax,0x8
c0011da0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011da4:	89 c1                	mov    ecx,eax
c0011da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011daa:	c1 e0 18             	shl    eax,0x18
c0011dad:	89 c3                	mov    ebx,eax
c0011daf:	a1 70 6c 02 c0       	mov    eax,ds:0xc0026c70
c0011db4:	8d 50 01             	lea    edx,[eax+0x1]
c0011db7:	89 15 70 6c 02 c0    	mov    DWORD PTR ds:0xc0026c70,edx
c0011dbd:	09 d9                	or     ecx,ebx
c0011dbf:	89 ca                	mov    edx,ecx
c0011dc1:	89 14 85 80 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9380],edx
c0011dc8:	eb 0e                	jmp    c0011dd8 <scanMADT()+0x4b8>
c0011dca:	66 90                	xchg   ax,ax
c0011dcc:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011dd1:	75 05                	jne    c0011dd8 <scanMADT()+0x4b8>
c0011dd3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011dd8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011ddd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011de1:	01 d0                	add    eax,edx
c0011de3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011de7:	e9 68 fc ff ff       	jmp    c0011a54 <scanMADT()+0x134>
c0011dec:	90                   	nop
c0011ded:	eb 05                	jmp    c0011df4 <scanMADT()+0x4d4>
c0011def:	90                   	nop
c0011df0:	90                   	nop
c0011df1:	8d 76 00             	lea    esi,[esi+0x0]
c0011df4:	83 c4 38             	add    esp,0x38
c0011df7:	5b                   	pop    ebx
c0011df8:	c3                   	ret    
c0011df9:	90                   	nop
c0011dfa:	66 90                	xchg   ax,ax

c0011dfc <ACPI::ACPI()>:
c0011dfc:	83 ec 0c             	sub    esp,0xc
c0011dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e03:	83 ec 08             	sub    esp,0x8
c0011e06:	68 c3 3c 02 c0       	push   0xc0023cc3
c0011e0b:	50                   	push   eax
c0011e0c:	e8 a1 c2 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	ba 4c 3e 02 c0       	mov    edx,0xc0023e4c
c0011e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1d:	89 10                	mov    DWORD PTR [eax],edx
c0011e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e46:	83 ec 0c             	sub    esp,0xc
c0011e49:	68 c8 3c 02 c0       	push   0xc0023cc8
c0011e4e:	e8 ca 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	e8 c5 fa ff ff       	call   c0011920 <scanMADT()>
c0011e5b:	90                   	nop
c0011e5c:	83 c4 0c             	add    esp,0xc
c0011e5f:	c3                   	ret    

c0011e60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011e60:	83 ec 2c             	sub    esp,0x2c
c0011e63:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011e67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e6b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011e6f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011e73:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011e78:	88 d0                	mov    al,dl
c0011e7a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e7e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e83:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e8b:	90                   	nop
c0011e8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e90:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e96:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e9a:	0f 8d 9c 00 00 00    	jge    c0011f3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011ea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ea4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ea8:	83 c2 2a             	add    edx,0x2a
c0011eab:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011eaf:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011eb4:	75 7a                	jne    c0011f30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011eb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ebe:	83 c2 2a             	add    edx,0x2a
c0011ec1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011ec5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011ec9:	75 65                	jne    c0011f30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011ecb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011ed0:	74 3a                	je     c0011f0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011ed2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ed6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eda:	83 c2 2a             	add    edx,0x2a
c0011edd:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011ee1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ee8:	39 c2                	cmp    edx,eax
c0011eea:	74 10                	je     c0011efc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011eec:	83 ec 0c             	sub    esp,0xc
c0011eef:	68 64 3b 02 c0       	push   0xc0023b64
c0011ef4:	e8 30 24 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0011ef9:	83 c4 10             	add    esp,0x10
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	68 d6 3c 02 c0       	push   0xc0023cd6
c0011f04:	e8 20 24 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f18:	83 c2 2a             	add    edx,0x2a
c0011f1b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f1f:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f21:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f24:	89 01                	mov    DWORD PTR [ecx],eax
c0011f26:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f29:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f2e:	66 90                	xchg   ax,ax
c0011f30:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f34:	e9 53 ff ff ff       	jmp    c0011e8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f39:	8d 76 00             	lea    esi,[esi+0x0]
c0011f3c:	90                   	nop
c0011f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f41:	83 c4 2c             	add    esp,0x2c
c0011f44:	c2 04 00             	ret    0x4
c0011f47:	90                   	nop

c0011f48 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011f48:	83 ec 1c             	sub    esp,0x1c
c0011f4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011f53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f57:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f5c:	88 c8                	mov    al,cl
c0011f5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011f62:	88 d0                	mov    al,dl
c0011f64:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f6c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f76:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f79:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f7d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f85:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f8f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f96:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fa5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011fa9:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fb0:	83 c2 2a             	add    edx,0x2a
c0011fb3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fbb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fc8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011fcc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fd4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fda:	8d 50 01             	lea    edx,[eax+0x1]
c0011fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fe1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011feb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ff1:	3d 00 02 00 00       	cmp    eax,0x200
c0011ff6:	75 10                	jne    c0012008 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011ff8:	83 ec 0c             	sub    esp,0xc
c0011ffb:	68 e5 3c 02 c0       	push   0xc0023ce5
c0012000:	e8 24 23 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	90                   	nop
c0012009:	83 c4 1c             	add    esp,0x1c
c001200c:	c3                   	ret    
c001200d:	90                   	nop
c001200e:	66 90                	xchg   ax,ax

c0012010 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012010:	b8 00 00 00 00       	mov    eax,0x0
c0012015:	c3                   	ret    
c0012016:	66 90                	xchg   ax,ax

c0012018 <ACPI::detectPCI()>:
c0012018:	53                   	push   ebx
c0012019:	83 ec 28             	sub    esp,0x28
c001201c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012021:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0012026:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001202b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012031:	83 e0 04             	and    eax,0x4
c0012034:	84 c0                	test   al,al
c0012036:	74 2c                	je     c0012064 <ACPI::detectPCI()+0x4c>
c0012038:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c001203d:	83 ec 08             	sub    esp,0x8
c0012040:	68 02 3d 02 c0       	push   0xc0023d02
c0012045:	50                   	push   eax
c0012046:	e8 5d f8 ff ff       	call   c00118a8 <findDataTable(unsigned char*, char*)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012052:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012057:	74 0b                	je     c0012064 <ACPI::detectPCI()+0x4c>
c0012059:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001205e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012063:	90                   	nop
c0012064:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001206c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012070:	8a 00                	mov    al,BYTE PTR [eax]
c0012072:	3c 01                	cmp    al,0x1
c0012074:	75 0e                	jne    c0012084 <ACPI::detectPCI()+0x6c>
c0012076:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001207b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012080:	eb 2a                	jmp    c00120ac <ACPI::detectPCI()+0x94>
c0012082:	66 90                	xchg   ax,ax
c0012084:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012088:	8a 00                	mov    al,BYTE PTR [eax]
c001208a:	3c 02                	cmp    al,0x2
c001208c:	75 1e                	jne    c00120ac <ACPI::detectPCI()+0x94>
c001208e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012093:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012098:	74 12                	je     c00120ac <ACPI::detectPCI()+0x94>
c001209a:	83 ec 0c             	sub    esp,0xc
c001209d:	68 94 3b 02 c0       	push   0xc0023b94
c00120a2:	e8 82 22 00 00       	call   c0014329 <Krnl::panic(char const*)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	66 90                	xchg   ax,ax
c00120ac:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00120b0:	83 f0 01             	xor    eax,0x1
c00120b3:	84 c0                	test   al,al
c00120b5:	74 41                	je     c00120f8 <ACPI::detectPCI()+0xe0>
c00120b7:	e8 94 e0 fe ff       	call   c0000150 <manualPCIProbe>
c00120bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120c0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00120c5:	75 0d                	jne    c00120d4 <ACPI::detectPCI()+0xbc>
c00120c7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120cc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120d1:	eb 25                	jmp    c00120f8 <ACPI::detectPCI()+0xe0>
c00120d3:	90                   	nop
c00120d4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00120d9:	75 1d                	jne    c00120f8 <ACPI::detectPCI()+0xe0>
c00120db:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120e0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120e5:	74 11                	je     c00120f8 <ACPI::detectPCI()+0xe0>
c00120e7:	83 ec 0c             	sub    esp,0xc
c00120ea:	68 94 3b 02 c0       	push   0xc0023b94
c00120ef:	e8 35 22 00 00       	call   c0014329 <Krnl::panic(char const*)>
c00120f4:	83 c4 10             	add    esp,0x10
c00120f7:	90                   	nop
c00120f8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00120fd:	0f 84 85 00 00 00    	je     c0012188 <ACPI::detectPCI()+0x170>
c0012103:	83 ec 0c             	sub    esp,0xc
c0012106:	68 07 3d 02 c0       	push   0xc0023d07
c001210b:	e8 0d 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001211b:	83 ec 0c             	sub    esp,0xc
c001211e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012122:	e8 9c 78 ff ff       	call   c00099c3 <malloc>
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	89 c3                	mov    ebx,eax
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	53                   	push   ebx
c0012130:	e8 dd a9 00 00       	call   c001cb12 <PCI::PCI()>
c0012135:	83 c4 10             	add    esp,0x10
c0012138:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001213c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012140:	83 ec 08             	sub    esp,0x8
c0012143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012147:	50                   	push   eax
c0012148:	e8 61 bd ff ff       	call   c000deae <Device::addChild(Device*)>
c001214d:	83 c4 10             	add    esp,0x10
c0012150:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012154:	8b 00                	mov    eax,DWORD PTR [eax]
c0012156:	83 c0 08             	add    eax,0x8
c0012159:	8b 00                	mov    eax,DWORD PTR [eax]
c001215b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012160:	74 0a                	je     c001216c <ACPI::detectPCI()+0x154>
c0012162:	ba 01 00 00 00       	mov    edx,0x1
c0012167:	eb 0b                	jmp    c0012174 <ACPI::detectPCI()+0x15c>
c0012169:	8d 76 00             	lea    esi,[esi+0x0]
c001216c:	ba 02 00 00 00       	mov    edx,0x2
c0012171:	8d 76 00             	lea    esi,[esi+0x0]
c0012174:	6a 00                	push   0x0
c0012176:	6a 00                	push   0x0
c0012178:	52                   	push   edx
c0012179:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001217d:	ff d0                	call   eax
c001217f:	83 c4 10             	add    esp,0x10
c0012182:	e9 a1 00 00 00       	jmp    c0012228 <ACPI::detectPCI()+0x210>
c0012187:	90                   	nop
c0012188:	83 ec 0c             	sub    esp,0xc
c001218b:	68 1f 3d 02 c0       	push   0xc0023d1f
c0012190:	e8 d2 a8 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	83 ec 0c             	sub    esp,0xc
c001219b:	68 2a 3d 02 c0       	push   0xc0023d2a
c00121a0:	e8 78 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121b6:	e8 08 78 ff ff       	call   c00099c3 <malloc>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	89 c3                	mov    ebx,eax
c00121c0:	83 ec 0c             	sub    esp,0xc
c00121c3:	53                   	push   ebx
c00121c4:	e8 b3 b4 00 00       	call   c001d67c <IDE::IDE()>
c00121c9:	83 c4 10             	add    esp,0x10
c00121cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00121d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d4:	83 ec 08             	sub    esp,0x8
c00121d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121db:	50                   	push   eax
c00121dc:	e8 cd bc ff ff       	call   c000deae <Device::addChild(Device*)>
c00121e1:	83 c4 10             	add    esp,0x10
c00121e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121e8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00121f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121f6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00121ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012203:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001220c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012210:	8b 00                	mov    eax,DWORD PTR [eax]
c0012212:	83 c0 08             	add    eax,0x8
c0012215:	8b 00                	mov    eax,DWORD PTR [eax]
c0012217:	6a 00                	push   0x0
c0012219:	6a 00                	push   0x0
c001221b:	6a 00                	push   0x0
c001221d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012221:	ff d0                	call   eax
c0012223:	83 c4 10             	add    esp,0x10
c0012226:	66 90                	xchg   ax,ax
c0012228:	90                   	nop
c0012229:	83 c4 28             	add    esp,0x28
c001222c:	5b                   	pop    ebx
c001222d:	c3                   	ret    
c001222e:	66 90                	xchg   ax,ax

c0012230 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012230:	83 ec 1c             	sub    esp,0x1c
c0012233:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012237:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001223a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001223e:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0012243:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012248:	83 ec 08             	sub    esp,0x8
c001224b:	52                   	push   edx
c001224c:	50                   	push   eax
c001224d:	e8 42 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012259:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001225e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012263:	83 ec 04             	sub    esp,0x4
c0012266:	6a 01                	push   0x1
c0012268:	52                   	push   edx
c0012269:	50                   	push   eax
c001226a:	e8 01 6f ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c001226f:	83 c4 10             	add    esp,0x10
c0012272:	90                   	nop
c0012273:	83 c4 1c             	add    esp,0x1c
c0012276:	c3                   	ret    
c0012277:	90                   	nop

c0012278 <ACPI::sleep()>:
c0012278:	83 ec 0c             	sub    esp,0xc
c001227b:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c0012280:	85 c0                	test   eax,eax
c0012282:	74 08                	je     c001228c <ACPI::sleep()+0x14>
c0012284:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c0012289:	ff d0                	call   eax
c001228b:	90                   	nop
c001228c:	90                   	nop
c001228d:	83 c4 0c             	add    esp,0xc
c0012290:	c3                   	ret    
c0012291:	90                   	nop
c0012292:	66 90                	xchg   ax,ax

c0012294 <ACPI::open(int, int, void*)>:
c0012294:	57                   	push   edi
c0012295:	56                   	push   esi
c0012296:	53                   	push   ebx
c0012297:	81 ec 70 01 00 00    	sub    esp,0x170
c001229d:	83 ec 0c             	sub    esp,0xc
c00122a0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00122a7:	e8 6c fd ff ff       	call   c0012018 <ACPI::detectPCI()>
c00122ac:	83 c4 10             	add    esp,0x10
c00122af:	83 ec 0c             	sub    esp,0xc
c00122b2:	68 bc 3b 02 c0       	push   0xc0023bbc
c00122b7:	e8 61 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	83 ec 0c             	sub    esp,0xc
c00122c2:	68 3f 3d 02 c0       	push   0xc0023d3f
c00122c7:	e8 d3 47 00 00       	call   c0016a9f <Thr::loadKernelSymbolTable(char const*)>
c00122cc:	83 c4 10             	add    esp,0x10
c00122cf:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00122d7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00122e2:	83 ec 0c             	sub    esp,0xc
c00122e5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00122ec:	e8 d2 76 ff ff       	call   c00099c3 <malloc>
c00122f1:	83 c4 10             	add    esp,0x10
c00122f4:	89 c3                	mov    ebx,eax
c00122f6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00122fb:	83 ec 04             	sub    esp,0x4
c00122fe:	50                   	push   eax
c00122ff:	68 5d 3d 02 c0       	push   0xc0023d5d
c0012304:	53                   	push   ebx
c0012305:	e8 c8 ac ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c001230a:	83 c4 10             	add    esp,0x10
c001230d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012314:	83 ec 08             	sub    esp,0x8
c0012317:	6a 01                	push   0x1
c0012319:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012320:	e8 11 ad ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001232f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012337:	75 17                	jne    c0012350 <ACPI::open(int, int, void*)+0xbc>
c0012339:	83 ec 0c             	sub    esp,0xc
c001233c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012343:	e8 4c ad ff ff       	call   c000d094 <File::close()>
c0012348:	83 c4 10             	add    esp,0x10
c001234b:	eb 0b                	jmp    c0012358 <ACPI::open(int, int, void*)+0xc4>
c001234d:	8d 76 00             	lea    esi,[esi+0x0]
c0012350:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012358:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012360:	74 1e                	je     c0012380 <ACPI::open(int, int, void*)+0xec>
c0012362:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012369:	8b 00                	mov    eax,DWORD PTR [eax]
c001236b:	83 c0 08             	add    eax,0x8
c001236e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012370:	83 ec 0c             	sub    esp,0xc
c0012373:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001237a:	ff d0                	call   eax
c001237c:	83 c4 10             	add    esp,0x10
c001237f:	90                   	nop
c0012380:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012387:	83 f0 01             	xor    eax,0x1
c001238a:	84 c0                	test   al,al
c001238c:	74 42                	je     c00123d0 <ACPI::open(int, int, void*)+0x13c>
c001238e:	83 ec 0c             	sub    esp,0xc
c0012391:	68 7b 3d 02 c0       	push   0xc0023d7b
c0012396:	e8 82 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	83 ec 04             	sub    esp,0x4
c00123a1:	6a 0c                	push   0xc
c00123a3:	68 96 3d 02 c0       	push   0xc0023d96
c00123a8:	68 a7 3d 02 c0       	push   0xc0023da7
c00123ad:	e8 57 2d 00 00       	call   c0015109 <Reg::readIntWithDefault(char*, char*, int)>
c00123b2:	83 c4 10             	add    esp,0x10
c00123b5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00123c6:	e8 d4 94 ff ff       	call   c000b89f <Virt::setupPageSwapping(int)>
c00123cb:	83 c4 10             	add    esp,0x10
c00123ce:	66 90                	xchg   ax,ax
c00123d0:	83 ec 0c             	sub    esp,0xc
c00123d3:	68 06 25 02 c0       	push   0xc0022506
c00123d8:	e8 40 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123dd:	83 c4 10             	add    esp,0x10
c00123e0:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c00123e6:	83 ec 08             	sub    esp,0x8
c00123e9:	6a 01                	push   0x1
c00123eb:	68 ae 3d 02 c0       	push   0xc0023dae
c00123f0:	e8 21 51 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	83 ec 08             	sub    esp,0x8
c00123fb:	53                   	push   ebx
c00123fc:	50                   	push   eax
c00123fd:	e8 45 53 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c0012402:	83 c4 10             	add    esp,0x10
c0012405:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001240c:	83 ec 08             	sub    esp,0x8
c001240f:	6a 12                	push   0x12
c0012411:	50                   	push   eax
c0012412:	e8 1b be ff ff       	call   c000e232 <getDevicesOfType(DeviceType)>
c0012417:	83 c4 0c             	add    esp,0xc
c001241a:	66 90                	xchg   ax,ax
c001241c:	83 ec 0c             	sub    esp,0xc
c001241f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012426:	50                   	push   eax
c0012427:	e8 d4 f2 00 00       	call   c0021700 <LinkedList<Device>::isEmpty()>
c001242c:	83 c4 10             	add    esp,0x10
c001242f:	83 f0 01             	xor    eax,0x1
c0012432:	84 c0                	test   al,al
c0012434:	0f 84 46 01 00 00    	je     c0012580 <ACPI::open(int, int, void*)+0x2ec>
c001243a:	83 ec 0c             	sub    esp,0xc
c001243d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012444:	50                   	push   eax
c0012445:	e8 d2 f2 00 00       	call   c002171c <LinkedList<Device>::getFirstElement()>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012454:	83 ec 0c             	sub    esp,0xc
c0012457:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001245e:	50                   	push   eax
c001245f:	e8 c0 f2 00 00       	call   c0021724 <LinkedList<Device>::removeFirst()>
c0012464:	83 c4 10             	add    esp,0x10
c0012467:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001246e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012475:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001247c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012480:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012486:	ba 09 00 00 00       	mov    edx,0x9
c001248b:	fc                   	cld    
c001248c:	89 c7                	mov    edi,eax
c001248e:	89 de                	mov    esi,ebx
c0012490:	89 d1                	mov    ecx,edx
c0012492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012494:	83 ec 08             	sub    esp,0x8
c0012497:	8d 44 24 38          	lea    eax,[esp+0x38]
c001249b:	50                   	push   eax
c001249c:	83 ec 24             	sub    esp,0x24
c001249f:	89 e0                	mov    eax,esp
c00124a1:	89 c3                	mov    ebx,eax
c00124a3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124a7:	ba 09 00 00 00       	mov    edx,0x9
c00124ac:	89 df                	mov    edi,ebx
c00124ae:	89 c6                	mov    esi,eax
c00124b0:	89 d1                	mov    ecx,edx
c00124b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124b4:	e8 37 ab 00 00       	call   c001cff0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00124b9:	83 c4 30             	add    esp,0x30
c00124bc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00124c3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00124cb:	0f 84 4b ff ff ff    	je     c001241c <ACPI::open(int, int, void*)+0x188>
c00124d1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00124dc:	83 ec 0c             	sub    esp,0xc
c00124df:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00124e6:	e8 d8 74 ff ff       	call   c00099c3 <malloc>
c00124eb:	83 c4 10             	add    esp,0x10
c00124ee:	89 c3                	mov    ebx,eax
c00124f0:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00124f5:	83 ec 04             	sub    esp,0x4
c00124f8:	50                   	push   eax
c00124f9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012500:	53                   	push   ebx
c0012501:	e8 cc aa ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012510:	83 ec 0c             	sub    esp,0xc
c0012513:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001251a:	e8 85 ad ff ff       	call   c000d2a4 <File::exists()>
c001251f:	83 c4 10             	add    esp,0x10
c0012522:	84 c0                	test   al,al
c0012524:	74 2a                	je     c0012550 <ACPI::open(int, int, void*)+0x2bc>
c0012526:	83 ec 08             	sub    esp,0x8
c0012529:	6a 01                	push   0x1
c001252b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012532:	e8 df 4f 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	83 ec 08             	sub    esp,0x8
c001253d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012544:	50                   	push   eax
c0012545:	e8 fd 51 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	8d 76 00             	lea    esi,[esi+0x0]
c0012550:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012558:	0f 84 be fe ff ff    	je     c001241c <ACPI::open(int, int, void*)+0x188>
c001255e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012565:	8b 00                	mov    eax,DWORD PTR [eax]
c0012567:	83 c0 08             	add    eax,0x8
c001256a:	8b 00                	mov    eax,DWORD PTR [eax]
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012576:	ff d0                	call   eax
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	e9 9c fe ff ff       	jmp    c001241c <ACPI::open(int, int, void*)+0x188>
c0012580:	83 ec 0c             	sub    esp,0xc
c0012583:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001258a:	50                   	push   eax
c001258b:	e8 6c f1 00 00       	call   c00216fc <LinkedList<Device>::~LinkedList()>
c0012590:	83 c4 10             	add    esp,0x10
c0012593:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c0012599:	83 ec 08             	sub    esp,0x8
c001259c:	6a 01                	push   0x1
c001259e:	68 c9 3d 02 c0       	push   0xc0023dc9
c00125a3:	e8 6e 4f 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	83 ec 08             	sub    esp,0x8
c00125ae:	53                   	push   ebx
c00125af:	50                   	push   eax
c00125b0:	e8 92 51 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c00125b5:	83 c4 10             	add    esp,0x10
c00125b8:	8b 1d c8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263c8
c00125be:	83 ec 08             	sub    esp,0x8
c00125c1:	6a 01                	push   0x1
c00125c3:	68 e6 3d 02 c0       	push   0xc0023de6
c00125c8:	e8 49 4f 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	83 ec 08             	sub    esp,0x8
c00125d3:	53                   	push   ebx
c00125d4:	50                   	push   eax
c00125d5:	e8 6d 51 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00125e2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00125e8:	83 e0 04             	and    eax,0x4
c00125eb:	84 c0                	test   al,al
c00125ed:	0f 84 15 01 00 00    	je     c0012708 <ACPI::open(int, int, void*)+0x474>
c00125f3:	83 ec 0c             	sub    esp,0xc
c00125f6:	68 03 3e 02 c0       	push   0xc0023e03
c00125fb:	e8 1d 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001260e:	83 ec 0c             	sub    esp,0xc
c0012611:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012618:	e8 a6 73 ff ff       	call   c00099c3 <malloc>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	89 c3                	mov    ebx,eax
c0012622:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0012627:	83 ec 04             	sub    esp,0x4
c001262a:	50                   	push   eax
c001262b:	68 20 3e 02 c0       	push   0xc0023e20
c0012630:	53                   	push   ebx
c0012631:	e8 9c a9 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0012636:	83 c4 10             	add    esp,0x10
c0012639:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012640:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012648:	74 1a                	je     c0012664 <ACPI::open(int, int, void*)+0x3d0>
c001264a:	83 ec 0c             	sub    esp,0xc
c001264d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012654:	e8 4b ac ff ff       	call   c000d2a4 <File::exists()>
c0012659:	83 c4 10             	add    esp,0x10
c001265c:	84 c0                	test   al,al
c001265e:	74 04                	je     c0012664 <ACPI::open(int, int, void*)+0x3d0>
c0012660:	b0 01                	mov    al,0x1
c0012662:	eb 04                	jmp    c0012668 <ACPI::open(int, int, void*)+0x3d4>
c0012664:	b0 00                	mov    al,0x0
c0012666:	66 90                	xchg   ax,ax
c0012668:	84 c0                	test   al,al
c001266a:	74 28                	je     c0012694 <ACPI::open(int, int, void*)+0x400>
c001266c:	83 ec 08             	sub    esp,0x8
c001266f:	6a 01                	push   0x1
c0012671:	68 20 3e 02 c0       	push   0xc0023e20
c0012676:	e8 9b 4e 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c001267b:	83 c4 10             	add    esp,0x10
c001267e:	83 ec 08             	sub    esp,0x8
c0012681:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012688:	50                   	push   eax
c0012689:	e8 b9 50 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	8d 76 00             	lea    esi,[esi+0x0]
c0012694:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001269c:	74 2a                	je     c00126c8 <ACPI::open(int, int, void*)+0x434>
c001269e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126a6:	74 20                	je     c00126c8 <ACPI::open(int, int, void*)+0x434>
c00126a8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00126af:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b1:	83 c0 08             	add    eax,0x8
c00126b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b6:	83 ec 0c             	sub    esp,0xc
c00126b9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126c0:	ff d0                	call   eax
c00126c2:	83 c4 10             	add    esp,0x10
c00126c5:	8d 76 00             	lea    esi,[esi+0x0]
c00126c8:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c00126cd:	83 ec 08             	sub    esp,0x8
c00126d0:	68 3d 3e 02 c0       	push   0xc0023e3d
c00126d5:	50                   	push   eax
c00126d6:	e8 cd f1 ff ff       	call   c00118a8 <findDataTable(unsigned char*, char*)>
c00126db:	83 c4 10             	add    esp,0x10
c00126de:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00126e5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00126ed:	74 19                	je     c0012708 <ACPI::open(int, int, void*)+0x474>
c00126ef:	83 ec 08             	sub    esp,0x8
c00126f2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00126f9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012700:	e8 2b fb ff ff       	call   c0012230 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012705:	83 c4 10             	add    esp,0x10
c0012708:	b8 00 00 00 00       	mov    eax,0x0
c001270d:	81 c4 70 01 00 00    	add    esp,0x170
c0012713:	5b                   	pop    ebx
c0012714:	5e                   	pop    esi
c0012715:	5f                   	pop    edi
c0012716:	c3                   	ret    
c0012717:	90                   	nop

c0012718 <CPU::close(int, int, void*)>:
c0012718:	31 c0                	xor    eax,eax
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012724:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012728:	89 ce                	mov    esi,ecx
c001272a:	89 d5                	mov    ebp,edx
c001272c:	80 f9 04             	cmp    cl,0x4
c001272f:	75 28                	jne    c0012759 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012731:	8d 42 f9             	lea    eax,[edx-0x7]
c0012734:	3c 03                	cmp    al,0x3
c0012736:	0f 86 63 01 00 00    	jbe    c001289f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001273c:	80 fa 03             	cmp    dl,0x3
c001273f:	0f 84 5a 01 00 00    	je     c001289f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012745:	8d 7a f2             	lea    edi,[edx-0xe]
c0012748:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c001274d:	89 fb                	mov    ebx,edi
c001274f:	80 fb 01             	cmp    bl,0x1
c0012752:	77 4e                	ja     c00127a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012754:	e9 52 01 00 00       	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012759:	80 f9 05             	cmp    cl,0x5
c001275c:	75 4d                	jne    c00127ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001275e:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012763:	80 fa 03             	cmp    dl,0x3
c0012766:	0f 86 3f 01 00 00    	jbe    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001276c:	8d 7a fa             	lea    edi,[edx-0x6]
c001276f:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012774:	89 fb                	mov    ebx,edi
c0012776:	80 fb 01             	cmp    bl,0x1
c0012779:	0f 86 2c 01 00 00    	jbe    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001277f:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012784:	80 fa 08             	cmp    dl,0x8
c0012787:	0f 84 1e 01 00 00    	je     c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001278d:	89 d7                	mov    edi,edx
c001278f:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012794:	83 e7 fb             	and    edi,0xfffffffb
c0012797:	89 fb                	mov    ebx,edi
c0012799:	80 fb 09             	cmp    bl,0x9
c001279c:	0f 84 09 01 00 00    	je     c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127a2:	31 c0                	xor    eax,eax
c00127a4:	89 eb                	mov    ebx,ebp
c00127a6:	0f b6 fb             	movzx  edi,bl
c00127a9:	eb 30                	jmp    c00127db <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00127ab:	31 c0                	xor    eax,eax
c00127ad:	80 f9 06             	cmp    cl,0x6
c00127b0:	75 f2                	jne    c00127a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127b2:	80 fa 0a             	cmp    dl,0xa
c00127b5:	77 ed                	ja     c00127a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127b7:	bf de 05 00 00       	mov    edi,0x5de
c00127bc:	0f a3 d7             	bt     edi,edx
c00127bf:	73 e3                	jae    c00127a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127c1:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c00127c6:	e9 e0 00 00 00       	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127cb:	39 c7                	cmp    edi,eax
c00127cd:	0f 84 d3 00 00 00    	je     c00128a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127d3:	40                   	inc    eax
c00127d4:	3d d0 00 00 00       	cmp    eax,0xd0
c00127d9:	74 09                	je     c00127e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00127db:	89 f3                	mov    ebx,esi
c00127dd:	80 fb 0f             	cmp    bl,0xf
c00127e0:	75 f1                	jne    c00127d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00127e2:	eb e7                	jmp    c00127cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00127e4:	80 f9 10             	cmp    cl,0x10
c00127e7:	75 14                	jne    c00127fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00127e9:	8d 42 fc             	lea    eax,[edx-0x4]
c00127ec:	83 e0 fb             	and    eax,0xfffffffb
c00127ef:	3c 02                	cmp    al,0x2
c00127f1:	76 34                	jbe    c0012827 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00127f3:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c00127f8:	80 fa 02             	cmp    dl,0x2
c00127fb:	eb 24                	jmp    c0012821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00127fd:	80 f9 11             	cmp    cl,0x11
c0012800:	75 13                	jne    c0012815 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012802:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012807:	80 fa 03             	cmp    dl,0x3
c001280a:	0f 85 9b 00 00 00    	jne    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012810:	e9 91 00 00 00       	jmp    c00128a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012815:	80 f9 12             	cmp    cl,0x12
c0012818:	75 14                	jne    c001282e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001281a:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c001281f:	fe ca                	dec    dl
c0012821:	0f 85 84 00 00 00    	jne    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012827:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c001282c:	eb 7d                	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001282e:	80 f9 14             	cmp    cl,0x14
c0012831:	75 12                	jne    c0012845 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012833:	4a                   	dec    edx
c0012834:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012839:	80 fa 01             	cmp    dl,0x1
c001283c:	77 6d                	ja     c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001283e:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012843:	eb 66                	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012845:	80 f9 15             	cmp    cl,0x15
c0012848:	75 31                	jne    c001287b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001284a:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c001284f:	80 fa 01             	cmp    dl,0x1
c0012852:	74 57                	je     c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012854:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012859:	80 fa 13             	cmp    dl,0x13
c001285c:	76 0c                	jbe    c001286a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001285e:	80 fa 30             	cmp    dl,0x30
c0012861:	75 48                	jne    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012863:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c0012868:	eb 41                	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001286a:	b9 04 00 09 00       	mov    ecx,0x90004
c001286f:	0f a3 d1             	bt     ecx,edx
c0012872:	73 37                	jae    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012874:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0012879:	eb 30                	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001287b:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012880:	80 f9 16             	cmp    cl,0x16
c0012883:	75 26                	jne    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012885:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c001288a:	84 d2                	test   dl,dl
c001288c:	74 1d                	je     c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001288e:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012893:	80 fa 30             	cmp    dl,0x30
c0012896:	75 13                	jne    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012898:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c001289d:	eb 0c                	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289f:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c00128a4:	eb 05                	jmp    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a6:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c00128ab:	5b                   	pop    ebx
c00128ac:	5e                   	pop    esi
c00128ad:	5f                   	pop    edi
c00128ae:	5d                   	pop    ebp
c00128af:	c3                   	ret    

c00128b0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00128b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b8:	80 f9 04             	cmp    cl,0x4
c00128bb:	75 6b                	jne    c0012928 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00128bd:	b8 e0 5a 02 c0       	mov    eax,0xc0025ae0
c00128c2:	80 fa 01             	cmp    dl,0x1
c00128c5:	0f 86 92 02 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128cb:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c00128d0:	80 fa 02             	cmp    dl,0x2
c00128d3:	0f 84 84 02 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d9:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c00128de:	80 fa 03             	cmp    dl,0x3
c00128e1:	0f 84 76 02 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e7:	b8 10 5b 02 c0       	mov    eax,0xc0025b10
c00128ec:	80 fa 04             	cmp    dl,0x4
c00128ef:	0f 84 68 02 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f5:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c00128fa:	80 fa 05             	cmp    dl,0x5
c00128fd:	0f 84 5a 02 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012903:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c0012908:	80 fa 07             	cmp    dl,0x7
c001290b:	0f 84 4c 02 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012911:	83 ea 08             	sub    edx,0x8
c0012914:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012919:	80 fa 01             	cmp    dl,0x1
c001291c:	0f 87 3b 02 00 00    	ja     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012922:	b8 30 5b 02 c0       	mov    eax,0xc0025b30
c0012927:	c3                   	ret    
c0012928:	80 f9 05             	cmp    cl,0x5
c001292b:	75 45                	jne    c0012972 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001292d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012930:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c0012935:	80 f9 02             	cmp    cl,0x2
c0012938:	0f 86 1f 02 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001293e:	80 fa 04             	cmp    dl,0x4
c0012941:	0f 84 f3 01 00 00    	je     c0012b3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012947:	80 fa 07             	cmp    dl,0x7
c001294a:	0f 84 0d 02 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012950:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c0012955:	80 fa 08             	cmp    dl,0x8
c0012958:	0f 84 ff 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295e:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012963:	80 fa 09             	cmp    dl,0x9
c0012966:	0f 85 f1 01 00 00    	jne    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296c:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c0012971:	c3                   	ret    
c0012972:	80 f9 06             	cmp    cl,0x6
c0012975:	0f 85 85 01 00 00    	jne    c0012b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001297b:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012980:	80 fa 01             	cmp    dl,0x1
c0012983:	0f 84 d4 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012989:	8d 42 fb             	lea    eax,[edx-0x5]
c001298c:	3c 01                	cmp    al,0x1
c001298e:	0f 86 ac 01 00 00    	jbe    c0012b40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012994:	80 fa 03             	cmp    dl,0x3
c0012997:	0f 84 a3 01 00 00    	je     c0012b40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001299d:	8d 4a f9             	lea    ecx,[edx-0x7]
c00129a0:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c00129a5:	80 f9 01             	cmp    cl,0x1
c00129a8:	0f 86 af 01 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ae:	80 fa 09             	cmp    dl,0x9
c00129b1:	0f 84 8f 01 00 00    	je     c0012b46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00129b7:	8d 4a f6             	lea    ecx,[edx-0xa]
c00129ba:	80 f9 01             	cmp    cl,0x1
c00129bd:	0f 86 9a 01 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129c3:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c00129c8:	80 fa 0d             	cmp    dl,0xd
c00129cb:	0f 84 8c 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129d1:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c00129d6:	80 fa 0e             	cmp    dl,0xe
c00129d9:	0f 84 7e 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129df:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c00129e4:	80 fa 0f             	cmp    dl,0xf
c00129e7:	0f 84 70 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ed:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c00129f2:	80 fa 15             	cmp    dl,0x15
c00129f5:	0f 84 62 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129fb:	8d 4a ea             	lea    ecx,[edx-0x16]
c00129fe:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012a03:	80 f9 01             	cmp    cl,0x1
c0012a06:	0f 86 51 01 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a0c:	80 fa 1a             	cmp    dl,0x1a
c0012a0f:	0f 84 37 01 00 00    	je     c0012b4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a15:	80 fa 1c             	cmp    dl,0x1c
c0012a18:	0f 84 34 01 00 00    	je     c0012b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a1e:	80 fa 1d             	cmp    dl,0x1d
c0012a21:	0f 84 36 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a27:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a2c:	80 fa 25             	cmp    dl,0x25
c0012a2f:	0f 84 28 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a35:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a38:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012a3d:	80 f9 01             	cmp    cl,0x1
c0012a40:	0f 86 17 01 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a46:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a4b:	80 fa 2a             	cmp    dl,0x2a
c0012a4e:	0f 84 09 01 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a54:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a59:	80 fa 2c             	cmp    dl,0x2c
c0012a5c:	0f 84 fb 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a62:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a67:	80 fa 2d             	cmp    dl,0x2d
c0012a6a:	0f 84 ed 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a70:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012a75:	80 fa 2e             	cmp    dl,0x2e
c0012a78:	0f 84 df 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a7e:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012a83:	80 fa 2f             	cmp    dl,0x2f
c0012a86:	0f 84 d1 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a8c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a8f:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012a94:	80 f9 01             	cmp    cl,0x1
c0012a97:	0f 86 c0 00 00 00    	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a9d:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012aa2:	80 fa 37             	cmp    dl,0x37
c0012aa5:	0f 84 b2 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aab:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012ab0:	80 fa 3a             	cmp    dl,0x3a
c0012ab3:	0f 84 a4 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab9:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012abe:	80 fa 3c             	cmp    dl,0x3c
c0012ac1:	0f 84 96 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ac7:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012acc:	80 fa 3d             	cmp    dl,0x3d
c0012acf:	0f 84 88 00 00 00    	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ad5:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012ada:	80 fa 3e             	cmp    dl,0x3e
c0012add:	74 7e                	je     c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012adf:	8d 42 bb             	lea    eax,[edx-0x45]
c0012ae2:	3c 01                	cmp    al,0x1
c0012ae4:	76 72                	jbe    c0012b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012ae6:	80 fa 3f             	cmp    dl,0x3f
c0012ae9:	74 6d                	je     c0012b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012aeb:	80 fa 4a             	cmp    dl,0x4a
c0012aee:	74 0a                	je     c0012afa <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012af0:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012af5:	80 fa 4d             	cmp    dl,0x4d
c0012af8:	75 63                	jne    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012afa:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012aff:	c3                   	ret    
c0012b00:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012b05:	80 f9 0b             	cmp    cl,0xb
c0012b08:	75 0a                	jne    c0012b14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b0a:	fe ca                	dec    dl
c0012b0c:	75 4f                	jne    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b0e:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012b13:	c3                   	ret    
c0012b14:	80 f9 0f             	cmp    cl,0xf
c0012b17:	75 44                	jne    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b19:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012b1e:	80 fa 02             	cmp    dl,0x2
c0012b21:	76 3a                	jbe    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b23:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b26:	3c 01                	cmp    al,0x1
c0012b28:	76 0a                	jbe    c0012b34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b2a:	b8 c5 3f 02 c0       	mov    eax,0xc0023fc5
c0012b2f:	80 fa 06             	cmp    dl,0x6
c0012b32:	75 29                	jne    c0012b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b34:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012b39:	c3                   	ret    
c0012b3a:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c0012b3f:	c3                   	ret    
c0012b40:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c0012b45:	c3                   	ret    
c0012b46:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012b4b:	c3                   	ret    
c0012b4c:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012b51:	c3                   	ret    
c0012b52:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012b57:	c3                   	ret    
c0012b58:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012b5d:	c3                   	ret    

c0012b5e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012b5e:	60                   	pusha  
c0012b5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b6b:	9c                   	pushf  
c0012b6c:	fa                   	cli    
c0012b6d:	0f 09                	wbinvd 
c0012b6f:	0f 30                	wrmsr  
c0012b71:	9d                   	popf   
c0012b72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b76:	89 02                	mov    DWORD PTR [edx],eax
c0012b78:	61                   	popa   
c0012b79:	c3                   	ret    

c0012b7a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012b7a:	60                   	pusha  
c0012b7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b7f:	9c                   	pushf  
c0012b80:	fa                   	cli    
c0012b81:	0f 09                	wbinvd 
c0012b83:	31 c0                	xor    eax,eax
c0012b85:	31 d2                	xor    edx,edx
c0012b87:	0f 32                	rdmsr  
c0012b89:	9d                   	popf   
c0012b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b8e:	89 02                	mov    DWORD PTR [edx],eax
c0012b90:	61                   	popa   
c0012b91:	c3                   	ret    

c0012b92 <CPU::AMD_K6_writeback(int, int, int)>:
c0012b92:	56                   	push   esi
c0012b93:	53                   	push   ebx
c0012b94:	83 ec 10             	sub    esp,0x10
c0012b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b9b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012ba0:	75 5d                	jne    c0012bff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012ba2:	83 f8 08             	cmp    eax,0x8
c0012ba5:	75 09                	jne    c0012bb0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012ba7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012bac:	7e 13                	jle    c0012bc1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bae:	eb 30                	jmp    c0012be0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bb0:	83 f8 06             	cmp    eax,0x6
c0012bb3:	7c 4a                	jl     c0012bff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bb5:	83 f8 07             	cmp    eax,0x7
c0012bb8:	7e 07                	jle    c0012bc1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bba:	83 f8 09             	cmp    eax,0x9
c0012bbd:	74 21                	je     c0012be0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bbf:	eb 3e                	jmp    c0012bff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bc1:	89 e6                	mov    esi,esp
c0012bc3:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c0012bc9:	56                   	push   esi
c0012bca:	c1 eb 15             	shr    ebx,0x15
c0012bcd:	68 82 00 00 c0       	push   0xc0000082
c0012bd2:	83 e3 7e             	and    ebx,0x7e
c0012bd5:	e8 a0 ff ff ff       	call   c0012b7a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bda:	56                   	push   esi
c0012bdb:	6a 00                	push   0x0
c0012bdd:	53                   	push   ebx
c0012bde:	eb 12                	jmp    c0012bf2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012be0:	89 e3                	mov    ebx,esp
c0012be2:	53                   	push   ebx
c0012be3:	68 82 00 00 c0       	push   0xc0000082
c0012be8:	e8 8d ff ff ff       	call   c0012b7a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bed:	53                   	push   ebx
c0012bee:	6a 00                	push   0x0
c0012bf0:	6a 00                	push   0x0
c0012bf2:	68 82 00 00 c0       	push   0xc0000082
c0012bf7:	e8 62 ff ff ff       	call   c0012b5e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012bfc:	83 c4 18             	add    esp,0x18
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	5b                   	pop    ebx
c0012c03:	5e                   	pop    esi
c0012c04:	c3                   	ret    
c0012c05:	90                   	nop

c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c06:	55                   	push   ebp
c0012c07:	57                   	push   edi
c0012c08:	56                   	push   esi
c0012c09:	53                   	push   ebx
c0012c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c0e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c16:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c1a:	39 05 80 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d80,eax
c0012c20:	75 23                	jne    c0012c45 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c22:	a1 cc 6e 02 c0       	mov    eax,ds:0xc0026ecc
c0012c27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c2b:	89 06                	mov    DWORD PTR [esi],eax
c0012c2d:	a1 c8 6e 02 c0       	mov    eax,ds:0xc0026ec8
c0012c32:	89 07                	mov    DWORD PTR [edi],eax
c0012c34:	a1 c4 6e 02 c0       	mov    eax,ds:0xc0026ec4
c0012c39:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c3c:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0012c41:	89 02                	mov    DWORD PTR [edx],eax
c0012c43:	eb 3f                	jmp    c0012c84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c45:	31 c9                	xor    ecx,ecx
c0012c47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c4b:	0f a2                	cpuid  
c0012c4d:	89 06                	mov    DWORD PTR [esi],eax
c0012c4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0012c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c55:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012c58:	89 10                	mov    DWORD PTR [eax],edx
c0012c5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c5e:	a3 80 5d 02 c0       	mov    ds:0xc0025d80,eax
c0012c63:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c65:	a3 cc 6e 02 c0       	mov    ds:0xc0026ecc,eax
c0012c6a:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c6c:	a3 c8 6e 02 c0       	mov    ds:0xc0026ec8,eax
c0012c71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c74:	a3 c4 6e 02 c0       	mov    ds:0xc0026ec4,eax
c0012c79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c7f:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c0012c84:	5b                   	pop    ebx
c0012c85:	5e                   	pop    esi
c0012c86:	5f                   	pop    edi
c0012c87:	5d                   	pop    ebp
c0012c88:	c3                   	ret    
c0012c89:	90                   	nop

c0012c8a <CPU::cpuidCheckEDX(unsigned int)>:
c0012c8a:	83 ec 10             	sub    esp,0x10
c0012c8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c91:	50                   	push   eax
c0012c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c96:	50                   	push   eax
c0012c97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9b:	50                   	push   eax
c0012c9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca0:	50                   	push   eax
c0012ca1:	6a 01                	push   0x1
c0012ca3:	e8 5e ff ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012ca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cac:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012cb0:	0f 95 c0             	setne  al
c0012cb3:	83 c4 24             	add    esp,0x24
c0012cb6:	c3                   	ret    
c0012cb7:	90                   	nop

c0012cb8 <CPU::cpuidCheckECX(unsigned int)>:
c0012cb8:	83 ec 10             	sub    esp,0x10
c0012cbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cbf:	50                   	push   eax
c0012cc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cc4:	50                   	push   eax
c0012cc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cc9:	50                   	push   eax
c0012cca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cce:	50                   	push   eax
c0012ccf:	6a 01                	push   0x1
c0012cd1:	e8 30 ff ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cda:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cde:	0f 95 c0             	setne  al
c0012ce1:	83 c4 24             	add    esp,0x24
c0012ce4:	c3                   	ret    
c0012ce5:	90                   	nop

c0012ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012ce6:	83 ec 10             	sub    esp,0x10
c0012ce9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ced:	50                   	push   eax
c0012cee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf2:	50                   	push   eax
c0012cf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf7:	50                   	push   eax
c0012cf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cfc:	50                   	push   eax
c0012cfd:	6a 07                	push   0x7
c0012cff:	e8 02 ff ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d08:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d0c:	0f 95 c0             	setne  al
c0012d0f:	83 c4 24             	add    esp,0x24
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d14:	83 ec 10             	sub    esp,0x10
c0012d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d1b:	50                   	push   eax
c0012d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d20:	50                   	push   eax
c0012d21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d25:	50                   	push   eax
c0012d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d2a:	50                   	push   eax
c0012d2b:	6a 07                	push   0x7
c0012d2d:	e8 d4 fe ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d36:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d3a:	0f 95 c0             	setne  al
c0012d3d:	83 c4 24             	add    esp,0x24
c0012d40:	c3                   	ret    
c0012d41:	90                   	nop

c0012d42 <CPU::CPU()>:
c0012d42:	83 ec 0c             	sub    esp,0xc
c0012d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d49:	83 ec 08             	sub    esp,0x8
c0012d4c:	68 c5 3f 02 c0       	push   0xc0023fc5
c0012d51:	50                   	push   eax
c0012d52:	e8 5b b3 ff ff       	call   c000e0b2 <Device::Device(char const*)>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	ba e8 41 02 c0       	mov    edx,0xc00241e8
c0012d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d63:	89 10                	mov    DWORD PTR [eax],edx
c0012d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d69:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d77:	05 78 01 00 00       	add    eax,0x178
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	50                   	push   eax
c0012d80:	e8 d5 64 ff ff       	call   c000925a <GDT::GDT()>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8c:	05 7c 09 00 00       	add    eax,0x97c
c0012d91:	83 ec 0c             	sub    esp,0xc
c0012d94:	50                   	push   eax
c0012d95:	e8 16 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da1:	05 7c 11 00 00       	add    eax,0x117c
c0012da6:	83 ec 0c             	sub    esp,0xc
c0012da9:	50                   	push   eax
c0012daa:	e8 29 82 ff ff       	call   c000afd8 <TSS::TSS()>
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012dcb:	90                   	nop
c0012dcc:	83 c4 0c             	add    esp,0xc
c0012dcf:	c3                   	ret    

c0012dd0 <CPU::displayFeatures()>:
c0012dd0:	c3                   	ret    
c0012dd1:	90                   	nop

c0012dd2 <CPU::detectFeatures()>:
c0012dd2:	55                   	push   ebp
c0012dd3:	57                   	push   edi
c0012dd4:	56                   	push   esi
c0012dd5:	53                   	push   ebx
c0012dd6:	83 ec 50             	sub    esp,0x50
c0012dd9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012ddd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012de7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012dee:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012df4:	6a 0d                	push   0xd
c0012df6:	6a 00                	push   0x0
c0012df8:	55                   	push   ebp
c0012df9:	e8 86 d8 fe ff       	call   c0000684 <memset>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0012e06:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e0d:	0f 84 22 09 00 00    	je     c0013735 <CPU::detectFeatures()+0x963>
c0012e13:	83 ec 0c             	sub    esp,0xc
c0012e16:	89 ef                	mov    edi,ebp
c0012e18:	6a 10                	push   0x10
c0012e1a:	e8 6b fe ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012e1f:	83 e0 01             	and    eax,0x1
c0012e22:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e25:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e2b:	83 e0 fd             	and    eax,0xfffffffd
c0012e2e:	09 d0                	or     eax,edx
c0012e30:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e36:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e3d:	e8 48 fe ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012e42:	83 e0 01             	and    eax,0x1
c0012e45:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e4c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e52:	83 e0 fb             	and    eax,0xfffffffb
c0012e55:	09 d0                	or     eax,edx
c0012e57:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e5d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e64:	e8 21 fe ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012e69:	83 e0 01             	and    eax,0x1
c0012e6c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e73:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e79:	83 e0 f7             	and    eax,0xfffffff7
c0012e7c:	09 d0                	or     eax,edx
c0012e7e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e84:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e8b:	e8 fa fd ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012e90:	83 e0 01             	and    eax,0x1
c0012e93:	c1 e0 04             	shl    eax,0x4
c0012e96:	88 c2                	mov    dl,al
c0012e98:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e9e:	83 e0 ef             	and    eax,0xffffffef
c0012ea1:	09 d0                	or     eax,edx
c0012ea3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ea9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012eb0:	e8 d5 fd ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012eb5:	83 e0 01             	and    eax,0x1
c0012eb8:	c1 e0 05             	shl    eax,0x5
c0012ebb:	88 c2                	mov    dl,al
c0012ebd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ec3:	83 e0 df             	and    eax,0xffffffdf
c0012ec6:	09 d0                	or     eax,edx
c0012ec8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ece:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012ed5:	e8 b0 fd ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012eda:	83 e0 01             	and    eax,0x1
c0012edd:	8d 14 00             	lea    edx,[eax+eax*1]
c0012ee0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012ee6:	83 e0 fd             	and    eax,0xfffffffd
c0012ee9:	09 d0                	or     eax,edx
c0012eeb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012ef1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012ef8:	e8 8d fd ff ff       	call   c0012c8a <CPU::cpuidCheckEDX(unsigned int)>
c0012efd:	83 e0 01             	and    eax,0x1
c0012f00:	c1 e0 06             	shl    eax,0x6
c0012f03:	88 c2                	mov    dl,al
c0012f05:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f0b:	83 e0 bf             	and    eax,0xffffffbf
c0012f0e:	09 d0                	or     eax,edx
c0012f10:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f16:	58                   	pop    eax
c0012f17:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f1b:	50                   	push   eax
c0012f1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f20:	50                   	push   eax
c0012f21:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f25:	56                   	push   esi
c0012f26:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f2a:	50                   	push   eax
c0012f2b:	6a 00                	push   0x0
c0012f2d:	e8 d4 fc ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f32:	b8 04 00 00 00       	mov    eax,0x4
c0012f37:	89 c1                	mov    ecx,eax
c0012f39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f3b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f41:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f45:	89 c1                	mov    ecx,eax
c0012f47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f49:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012f4f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012f53:	89 c1                	mov    ecx,eax
c0012f55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f57:	83 c4 18             	add    esp,0x18
c0012f5a:	68 70 3e 02 c0       	push   0xc0023e70
c0012f5f:	55                   	push   ebp
c0012f60:	e8 67 d8 fe ff       	call   c00007cc <strcmp>
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	85 c0                	test   eax,eax
c0012f6a:	75 0f                	jne    c0012f7b <CPU::detectFeatures()+0x1a9>
c0012f6c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012f76:	e9 22 02 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0012f7b:	50                   	push   eax
c0012f7c:	50                   	push   eax
c0012f7d:	68 7d 3e 02 c0       	push   0xc0023e7d
c0012f82:	55                   	push   ebp
c0012f83:	e8 44 d8 fe ff       	call   c00007cc <strcmp>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	85 c0                	test   eax,eax
c0012f8d:	74 dd                	je     c0012f6c <CPU::detectFeatures()+0x19a>
c0012f8f:	50                   	push   eax
c0012f90:	50                   	push   eax
c0012f91:	68 8a 3e 02 c0       	push   0xc0023e8a
c0012f96:	55                   	push   ebp
c0012f97:	e8 30 d8 fe ff       	call   c00007cc <strcmp>
c0012f9c:	83 c4 10             	add    esp,0x10
c0012f9f:	85 c0                	test   eax,eax
c0012fa1:	74 2a                	je     c0012fcd <CPU::detectFeatures()+0x1fb>
c0012fa3:	50                   	push   eax
c0012fa4:	50                   	push   eax
c0012fa5:	68 97 3e 02 c0       	push   0xc0023e97
c0012faa:	55                   	push   ebp
c0012fab:	e8 1c d8 fe ff       	call   c00007cc <strcmp>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	85 c0                	test   eax,eax
c0012fb5:	74 16                	je     c0012fcd <CPU::detectFeatures()+0x1fb>
c0012fb7:	50                   	push   eax
c0012fb8:	50                   	push   eax
c0012fb9:	68 a4 3e 02 c0       	push   0xc0023ea4
c0012fbe:	55                   	push   ebp
c0012fbf:	e8 08 d8 fe ff       	call   c00007cc <strcmp>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	85 c0                	test   eax,eax
c0012fc9:	74 48                	je     c0013013 <CPU::detectFeatures()+0x241>
c0012fcb:	eb 0f                	jmp    c0012fdc <CPU::detectFeatures()+0x20a>
c0012fcd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012fd7:	e9 c1 01 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0012fdc:	50                   	push   eax
c0012fdd:	50                   	push   eax
c0012fde:	68 b1 3e 02 c0       	push   0xc0023eb1
c0012fe3:	55                   	push   ebp
c0012fe4:	e8 e3 d7 fe ff       	call   c00007cc <strcmp>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	85 c0                	test   eax,eax
c0012fee:	74 23                	je     c0013013 <CPU::detectFeatures()+0x241>
c0012ff0:	57                   	push   edi
c0012ff1:	57                   	push   edi
c0012ff2:	68 be 3e 02 c0       	push   0xc0023ebe
c0012ff7:	55                   	push   ebp
c0012ff8:	e8 cf d7 fe ff       	call   c00007cc <strcmp>
c0012ffd:	83 c4 10             	add    esp,0x10
c0013000:	85 c0                	test   eax,eax
c0013002:	75 1e                	jne    c0013022 <CPU::detectFeatures()+0x250>
c0013004:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001300e:	e9 8a 01 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013013:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001301d:	e9 7b 01 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013022:	56                   	push   esi
c0013023:	56                   	push   esi
c0013024:	68 cb 3e 02 c0       	push   0xc0023ecb
c0013029:	55                   	push   ebp
c001302a:	e8 9d d7 fe ff       	call   c00007cc <strcmp>
c001302f:	83 c4 10             	add    esp,0x10
c0013032:	85 c0                	test   eax,eax
c0013034:	75 0f                	jne    c0013045 <CPU::detectFeatures()+0x273>
c0013036:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013040:	e9 58 01 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013045:	51                   	push   ecx
c0013046:	51                   	push   ecx
c0013047:	68 8a 3e 02 c0       	push   0xc0023e8a
c001304c:	55                   	push   ebp
c001304d:	e8 7a d7 fe ff       	call   c00007cc <strcmp>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	85 c0                	test   eax,eax
c0013057:	75 0f                	jne    c0013068 <CPU::detectFeatures()+0x296>
c0013059:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013063:	e9 35 01 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013068:	52                   	push   edx
c0013069:	52                   	push   edx
c001306a:	68 d8 3e 02 c0       	push   0xc0023ed8
c001306f:	55                   	push   ebp
c0013070:	e8 57 d7 fe ff       	call   c00007cc <strcmp>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	85 c0                	test   eax,eax
c001307a:	75 0f                	jne    c001308b <CPU::detectFeatures()+0x2b9>
c001307c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013086:	e9 12 01 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c001308b:	50                   	push   eax
c001308c:	50                   	push   eax
c001308d:	68 e5 3e 02 c0       	push   0xc0023ee5
c0013092:	55                   	push   ebp
c0013093:	e8 34 d7 fe ff       	call   c00007cc <strcmp>
c0013098:	83 c4 10             	add    esp,0x10
c001309b:	85 c0                	test   eax,eax
c001309d:	75 0f                	jne    c00130ae <CPU::detectFeatures()+0x2dc>
c001309f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00130a9:	e9 ef 00 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c00130ae:	50                   	push   eax
c00130af:	50                   	push   eax
c00130b0:	68 f2 3e 02 c0       	push   0xc0023ef2
c00130b5:	55                   	push   ebp
c00130b6:	e8 11 d7 fe ff       	call   c00007cc <strcmp>
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	85 c0                	test   eax,eax
c00130c0:	75 0f                	jne    c00130d1 <CPU::detectFeatures()+0x2ff>
c00130c2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00130cc:	e9 cc 00 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c00130d1:	50                   	push   eax
c00130d2:	50                   	push   eax
c00130d3:	68 ff 3e 02 c0       	push   0xc0023eff
c00130d8:	55                   	push   ebp
c00130d9:	e8 ee d6 fe ff       	call   c00007cc <strcmp>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	85 c0                	test   eax,eax
c00130e3:	75 0f                	jne    c00130f4 <CPU::detectFeatures()+0x322>
c00130e5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00130ef:	e9 a9 00 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c00130f4:	50                   	push   eax
c00130f5:	50                   	push   eax
c00130f6:	68 0c 3f 02 c0       	push   0xc0023f0c
c00130fb:	55                   	push   ebp
c00130fc:	e8 cb d6 fe ff       	call   c00007cc <strcmp>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	85 c0                	test   eax,eax
c0013106:	75 0f                	jne    c0013117 <CPU::detectFeatures()+0x345>
c0013108:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013112:	e9 86 00 00 00       	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013117:	50                   	push   eax
c0013118:	50                   	push   eax
c0013119:	68 19 3f 02 c0       	push   0xc0023f19
c001311e:	55                   	push   ebp
c001311f:	e8 a8 d6 fe ff       	call   c00007cc <strcmp>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	85 c0                	test   eax,eax
c0013129:	75 0c                	jne    c0013137 <CPU::detectFeatures()+0x365>
c001312b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013135:	eb 66                	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013137:	50                   	push   eax
c0013138:	50                   	push   eax
c0013139:	68 26 3f 02 c0       	push   0xc0023f26
c001313e:	55                   	push   ebp
c001313f:	e8 88 d6 fe ff       	call   c00007cc <strcmp>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	85 c0                	test   eax,eax
c0013149:	75 0c                	jne    c0013157 <CPU::detectFeatures()+0x385>
c001314b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013155:	eb 46                	jmp    c001319d <CPU::detectFeatures()+0x3cb>
c0013157:	57                   	push   edi
c0013158:	57                   	push   edi
c0013159:	68 33 3f 02 c0       	push   0xc0023f33
c001315e:	55                   	push   ebp
c001315f:	e8 68 d6 fe ff       	call   c00007cc <strcmp>
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	85 c0                	test   eax,eax
c0013169:	74 e0                	je     c001314b <CPU::detectFeatures()+0x379>
c001316b:	56                   	push   esi
c001316c:	56                   	push   esi
c001316d:	68 40 3f 02 c0       	push   0xc0023f40
c0013172:	55                   	push   ebp
c0013173:	e8 54 d6 fe ff       	call   c00007cc <strcmp>
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	85 c0                	test   eax,eax
c001317d:	74 cc                	je     c001314b <CPU::detectFeatures()+0x379>
c001317f:	51                   	push   ecx
c0013180:	51                   	push   ecx
c0013181:	68 4d 3f 02 c0       	push   0xc0023f4d
c0013186:	55                   	push   ebp
c0013187:	e8 40 d6 fe ff       	call   c00007cc <strcmp>
c001318c:	83 c4 10             	add    esp,0x10
c001318f:	85 c0                	test   eax,eax
c0013191:	74 b8                	je     c001314b <CPU::detectFeatures()+0x379>
c0013193:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001319d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00131a2:	0f 86 be 00 00 00    	jbe    c0013266 <CPU::detectFeatures()+0x494>
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	68 80 00 00 00       	push   0x80
c00131b0:	e8 31 fb ff ff       	call   c0012ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131b5:	83 e0 01             	and    eax,0x1
c00131b8:	c1 e0 06             	shl    eax,0x6
c00131bb:	88 c2                	mov    dl,al
c00131bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131c3:	83 e0 bf             	and    eax,0xffffffbf
c00131c6:	09 d0                	or     eax,edx
c00131c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131ce:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00131d5:	e8 0c fb ff ff       	call   c0012ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131da:	83 e0 01             	and    eax,0x1
c00131dd:	c1 e0 04             	shl    eax,0x4
c00131e0:	88 c2                	mov    dl,al
c00131e2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131e8:	83 e0 ef             	and    eax,0xffffffef
c00131eb:	09 d0                	or     eax,edx
c00131ed:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131f3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00131fa:	e8 e7 fa ff ff       	call   c0012ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131ff:	c1 e0 07             	shl    eax,0x7
c0013202:	88 c2                	mov    dl,al
c0013204:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001320a:	83 e0 7f             	and    eax,0x7f
c001320d:	09 d0                	or     eax,edx
c001320f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013215:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001321c:	e8 f3 fa ff ff       	call   c0012d14 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013221:	83 e0 01             	and    eax,0x1
c0013224:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001322b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013231:	83 e0 f7             	and    eax,0xfffffff7
c0013234:	09 d0                	or     eax,edx
c0013236:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001323c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013243:	e8 cc fa ff ff       	call   c0012d14 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	83 e0 01             	and    eax,0x1
c001324e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013255:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001325b:	83 e0 fb             	and    eax,0xfffffffb
c001325e:	09 d0                	or     eax,edx
c0013260:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013266:	83 ec 0c             	sub    esp,0xc
c0013269:	8d 44 24 28          	lea    eax,[esp+0x28]
c001326d:	50                   	push   eax
c001326e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013272:	50                   	push   eax
c0013273:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013277:	56                   	push   esi
c0013278:	8d 44 24 28          	lea    eax,[esp+0x28]
c001327c:	50                   	push   eax
c001327d:	6a 01                	push   0x1
c001327f:	e8 82 f9 ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013284:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013288:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001328e:	88 ca                	mov    dl,cl
c0013290:	83 e0 f0             	and    eax,0xfffffff0
c0013293:	83 e2 0f             	and    edx,0xf
c0013296:	09 d0                	or     eax,edx
c0013298:	88 ca                	mov    dl,cl
c001329a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00132a0:	c0 ea 04             	shr    dl,0x4
c00132a3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00132a7:	0f b6 c2             	movzx  eax,dl
c00132aa:	83 c4 20             	add    esp,0x20
c00132ad:	c1 e0 06             	shl    eax,0x6
c00132b0:	89 c7                	mov    edi,eax
c00132b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00132b8:	66 25 3f c0          	and    ax,0xc03f
c00132bc:	09 f8                	or     eax,edi
c00132be:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00132c5:	89 c8                	mov    eax,ecx
c00132c7:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00132ce:	c1 e8 08             	shr    eax,0x8
c00132d1:	83 e5 3f             	and    ebp,0x3f
c00132d4:	83 e0 0f             	and    eax,0xf
c00132d7:	89 c7                	mov    edi,eax
c00132d9:	c1 e7 06             	shl    edi,0x6
c00132dc:	09 ef                	or     edi,ebp
c00132de:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00132e5:	89 fa                	mov    edx,edi
c00132e7:	83 e5 c0             	and    ebp,0xffffffc0
c00132ea:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00132f0:	88 c2                	mov    dl,al
c00132f2:	c0 ea 02             	shr    dl,0x2
c00132f5:	89 d7                	mov    edi,edx
c00132f7:	09 ef                	or     edi,ebp
c00132f9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00132ff:	89 fa                	mov    edx,edi
c0013301:	83 e5 cf             	and    ebp,0xffffffcf
c0013304:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001330a:	89 cf                	mov    edi,ecx
c001330c:	c1 ef 0c             	shr    edi,0xc
c001330f:	83 e7 03             	and    edi,0x3
c0013312:	c1 e7 04             	shl    edi,0x4
c0013315:	09 ef                	or     edi,ebp
c0013317:	3c 06                	cmp    al,0x6
c0013319:	89 fa                	mov    edx,edi
c001331b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013321:	74 04                	je     c0013327 <CPU::detectFeatures()+0x555>
c0013323:	3c 0f                	cmp    al,0xf
c0013325:	75 5c                	jne    c0013383 <CPU::detectFeatures()+0x5b1>
c0013327:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001332b:	89 cf                	mov    edi,ecx
c001332d:	c1 ef 10             	shr    edi,0x10
c0013330:	c1 e7 04             	shl    edi,0x4
c0013333:	09 fa                	or     edx,edi
c0013335:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001333b:	0f b6 d2             	movzx  edx,dl
c001333e:	66 81 e7 3f c0       	and    di,0xc03f
c0013343:	c1 e2 06             	shl    edx,0x6
c0013346:	09 fa                	or     edx,edi
c0013348:	3c 0f                	cmp    al,0xf
c001334a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013351:	75 30                	jne    c0013383 <CPU::detectFeatures()+0x5b1>
c0013353:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013359:	c1 e9 14             	shr    ecx,0x14
c001335c:	83 e0 3f             	and    eax,0x3f
c001335f:	83 c1 0f             	add    ecx,0xf
c0013362:	88 ca                	mov    dl,cl
c0013364:	c0 e9 02             	shr    cl,0x2
c0013367:	c1 e2 06             	shl    edx,0x6
c001336a:	09 d0                	or     eax,edx
c001336c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013372:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013378:	83 e0 c0             	and    eax,0xffffffc0
c001337b:	09 c1                	or     ecx,eax
c001337d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013383:	83 ec 0c             	sub    esp,0xc
c0013386:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001338d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013391:	50                   	push   eax
c0013392:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013396:	55                   	push   ebp
c0013397:	56                   	push   esi
c0013398:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001339c:	57                   	push   edi
c001339d:	68 00 00 00 80       	push   0x80000000
c00133a2:	e8 5f f8 ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133a7:	83 c4 20             	add    esp,0x20
c00133aa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00133b2:	76 22                	jbe    c00133d6 <CPU::detectFeatures()+0x604>
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133bb:	50                   	push   eax
c00133bc:	55                   	push   ebp
c00133bd:	56                   	push   esi
c00133be:	57                   	push   edi
c00133bf:	68 01 00 00 80       	push   0x80000001
c00133c4:	e8 3d f8 ff ff       	call   c0012c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133c9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00133d3:	83 c4 20             	add    esp,0x20
c00133d6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00133dc:	83 f8 01             	cmp    eax,0x1
c00133df:	75 6f                	jne    c0013450 <CPU::detectFeatures()+0x67e>
c00133e1:	51                   	push   ecx
c00133e2:	51                   	push   ecx
c00133e3:	68 59 3f 02 c0       	push   0xc0023f59
c00133e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133ec:	56                   	push   esi
c00133ed:	e8 4e d3 fe ff       	call   c0000740 <strcpy>
c00133f2:	5f                   	pop    edi
c00133f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133f9:	5d                   	pop    ebp
c00133fa:	66 c1 e8 06          	shr    ax,0x6
c00133fe:	0f b6 c0             	movzx  eax,al
c0013401:	50                   	push   eax
c0013402:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013408:	c1 e8 0e             	shr    eax,0xe
c001340b:	0f b6 c0             	movzx  eax,al
c001340e:	50                   	push   eax
c001340f:	e8 9c f4 ff ff       	call   c00128b0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013414:	5a                   	pop    edx
c0013415:	59                   	pop    ecx
c0013416:	50                   	push   eax
c0013417:	56                   	push   esi
c0013418:	e8 63 d4 fe ff       	call   c0000880 <strcat>
c001341d:	5f                   	pop    edi
c001341e:	5d                   	pop    ebp
c001341f:	56                   	push   esi
c0013420:	53                   	push   ebx
c0013421:	e8 7e ac ff ff       	call   c000e0a4 <Device::setName(char const*)>
c0013426:	58                   	pop    eax
c0013427:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001342d:	5a                   	pop    edx
c001342e:	68 60 3f 02 c0       	push   0xc0023f60
c0013433:	50                   	push   eax
c0013434:	e8 93 d3 fe ff       	call   c00007cc <strcmp>
c0013439:	83 c4 10             	add    esp,0x10
c001343c:	85 c0                	test   eax,eax
c001343e:	0f 85 71 03 00 00    	jne    c00137b5 <CPU::detectFeatures()+0x9e3>
c0013444:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001344b:	e9 65 03 00 00       	jmp    c00137b5 <CPU::detectFeatures()+0x9e3>
c0013450:	83 f8 02             	cmp    eax,0x2
c0013453:	0f 85 b5 00 00 00    	jne    c001350e <CPU::detectFeatures()+0x73c>
c0013459:	57                   	push   edi
c001345a:	57                   	push   edi
c001345b:	68 72 3f 02 c0       	push   0xc0023f72
c0013460:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013464:	56                   	push   esi
c0013465:	e8 d6 d2 fe ff       	call   c0000740 <strcpy>
c001346a:	5d                   	pop    ebp
c001346b:	58                   	pop    eax
c001346c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013472:	66 c1 e8 06          	shr    ax,0x6
c0013476:	0f b6 c0             	movzx  eax,al
c0013479:	50                   	push   eax
c001347a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013480:	c1 e8 0e             	shr    eax,0xe
c0013483:	0f b6 c0             	movzx  eax,al
c0013486:	50                   	push   eax
c0013487:	e8 90 f2 ff ff       	call   c001271c <CPU::lookupAMDName(unsigned char, unsigned char)>
c001348c:	5a                   	pop    edx
c001348d:	59                   	pop    ecx
c001348e:	50                   	push   eax
c001348f:	56                   	push   esi
c0013490:	e8 eb d3 fe ff       	call   c0000880 <strcat>
c0013495:	5f                   	pop    edi
c0013496:	5d                   	pop    ebp
c0013497:	56                   	push   esi
c0013498:	53                   	push   ebx
c0013499:	e8 06 ac ff ff       	call   c000e0a4 <Device::setName(char const*)>
c001349e:	58                   	pop    eax
c001349f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134a5:	5a                   	pop    edx
c00134a6:	68 77 3f 02 c0       	push   0xc0023f77
c00134ab:	50                   	push   eax
c00134ac:	e8 1b d3 fe ff       	call   c00007cc <strcmp>
c00134b1:	83 c4 10             	add    esp,0x10
c00134b4:	85 c0                	test   eax,eax
c00134b6:	75 20                	jne    c00134d8 <CPU::detectFeatures()+0x706>
c00134b8:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c00134be:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00134c4:	a8 01                	test   al,0x1
c00134c6:	74 10                	je     c00134d8 <CPU::detectFeatures()+0x706>
c00134c8:	83 e0 fe             	and    eax,0xfffffffe
c00134cb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00134d1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00134d8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134de:	c1 e8 0e             	shr    eax,0xe
c00134e1:	3c 05                	cmp    al,0x5
c00134e3:	0f 85 cc 02 00 00    	jne    c00137b5 <CPU::detectFeatures()+0x9e3>
c00134e9:	56                   	push   esi
c00134ea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00134f0:	83 e0 0f             	and    eax,0xf
c00134f3:	50                   	push   eax
c00134f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134fa:	66 c1 e8 06          	shr    ax,0x6
c00134fe:	0f b6 c0             	movzx  eax,al
c0013501:	50                   	push   eax
c0013502:	6a 05                	push   0x5
c0013504:	e8 89 f6 ff ff       	call   c0012b92 <CPU::AMD_K6_writeback(int, int, int)>
c0013509:	e9 1f 02 00 00       	jmp    c001372d <CPU::detectFeatures()+0x95b>
c001350e:	8d 50 fd             	lea    edx,[eax-0x3]
c0013511:	83 fa 01             	cmp    edx,0x1
c0013514:	76 09                	jbe    c001351f <CPU::detectFeatures()+0x74d>
c0013516:	83 f8 06             	cmp    eax,0x6
c0013519:	0f 85 91 01 00 00    	jne    c00136b0 <CPU::detectFeatures()+0x8de>
c001351f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013525:	c1 ea 0e             	shr    edx,0xe
c0013528:	80 fa 05             	cmp    dl,0x5
c001352b:	75 7b                	jne    c00135a8 <CPU::detectFeatures()+0x7d6>
c001352d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013533:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013538:	66 81 fa 00 01       	cmp    dx,0x100
c001353d:	75 0c                	jne    c001354b <CPU::detectFeatures()+0x779>
c001353f:	51                   	push   ecx
c0013540:	51                   	push   ecx
c0013541:	68 7e 3f 02 c0       	push   0xc0023f7e
c0013546:	e9 dc 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c001354b:	66 81 fa 00 02       	cmp    dx,0x200
c0013550:	75 0c                	jne    c001355e <CPU::detectFeatures()+0x78c>
c0013552:	52                   	push   edx
c0013553:	52                   	push   edx
c0013554:	68 91 3f 02 c0       	push   0xc0023f91
c0013559:	e9 c9 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c001355e:	66 81 fa 40 02       	cmp    dx,0x240
c0013563:	75 0c                	jne    c0013571 <CPU::detectFeatures()+0x79f>
c0013565:	50                   	push   eax
c0013566:	50                   	push   eax
c0013567:	68 a3 3f 02 c0       	push   0xc0023fa3
c001356c:	e9 b6 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013571:	83 f8 06             	cmp    eax,0x6
c0013574:	75 0c                	jne    c0013582 <CPU::detectFeatures()+0x7b0>
c0013576:	50                   	push   eax
c0013577:	50                   	push   eax
c0013578:	68 b5 3f 02 c0       	push   0xc0023fb5
c001357d:	e9 a5 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013582:	83 f8 04             	cmp    eax,0x4
c0013585:	75 0c                	jne    c0013593 <CPU::detectFeatures()+0x7c1>
c0013587:	50                   	push   eax
c0013588:	50                   	push   eax
c0013589:	68 c1 3f 02 c0       	push   0xc0023fc1
c001358e:	e9 94 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013593:	83 f8 03             	cmp    eax,0x3
c0013596:	0f 85 19 02 00 00    	jne    c00137b5 <CPU::detectFeatures()+0x9e3>
c001359c:	50                   	push   eax
c001359d:	50                   	push   eax
c001359e:	68 c9 3f 02 c0       	push   0xc0023fc9
c00135a3:	e9 7f 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00135a8:	80 fa 06             	cmp    dl,0x6
c00135ab:	0f 85 db 00 00 00    	jne    c001368c <CPU::detectFeatures()+0x8ba>
c00135b1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135b7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00135bc:	66 81 fa 80 01       	cmp    dx,0x180
c00135c1:	75 0c                	jne    c00135cf <CPU::detectFeatures()+0x7fd>
c00135c3:	50                   	push   eax
c00135c4:	50                   	push   eax
c00135c5:	68 d4 3f 02 c0       	push   0xc0023fd4
c00135ca:	e9 58 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00135cf:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00135d5:	66 f7 c1 80 ff       	test   cx,0xff80
c00135da:	75 0c                	jne    c00135e8 <CPU::detectFeatures()+0x816>
c00135dc:	50                   	push   eax
c00135dd:	50                   	push   eax
c00135de:	68 e4 3f 02 c0       	push   0xc0023fe4
c00135e3:	e9 3f 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00135e8:	66 81 fa 40 02       	cmp    dx,0x240
c00135ed:	75 0c                	jne    c00135fb <CPU::detectFeatures()+0x829>
c00135ef:	55                   	push   ebp
c00135f0:	55                   	push   ebp
c00135f1:	68 eb 3f 02 c0       	push   0xc0023feb
c00135f6:	e9 2c 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00135fb:	66 81 fa 80 02       	cmp    dx,0x280
c0013600:	75 0c                	jne    c001360e <CPU::detectFeatures()+0x83c>
c0013602:	57                   	push   edi
c0013603:	57                   	push   edi
c0013604:	68 f4 3f 02 c0       	push   0xc0023ff4
c0013609:	e9 19 01 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c001360e:	66 81 fa 40 03       	cmp    dx,0x340
c0013613:	74 ed                	je     c0013602 <CPU::detectFeatures()+0x830>
c0013615:	66 81 fa c0 03       	cmp    dx,0x3c0
c001361a:	75 0c                	jne    c0013628 <CPU::detectFeatures()+0x856>
c001361c:	56                   	push   esi
c001361d:	56                   	push   esi
c001361e:	68 fb 3f 02 c0       	push   0xc0023ffb
c0013623:	e9 ff 00 00 00       	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013628:	83 f8 06             	cmp    eax,0x6
c001362b:	0f 84 45 ff ff ff    	je     c0013576 <CPU::detectFeatures()+0x7a4>
c0013631:	83 f8 04             	cmp    eax,0x4
c0013634:	0f 84 4d ff ff ff    	je     c0013587 <CPU::detectFeatures()+0x7b5>
c001363a:	83 f8 03             	cmp    eax,0x3
c001363d:	0f 85 72 01 00 00    	jne    c00137b5 <CPU::detectFeatures()+0x9e3>
c0013643:	51                   	push   ecx
c0013644:	51                   	push   ecx
c0013645:	68 04 40 02 c0       	push   0xc0024004
c001364a:	53                   	push   ebx
c001364b:	e8 54 aa ff ff       	call   c000e0a4 <Device::setName(char const*)>
c0013650:	b1 c1                	mov    cl,0xc1
c0013652:	88 c8                	mov    al,cl
c0013654:	e6 22                	out    0x22,al
c0013656:	e4 23                	in     al,0x23
c0013658:	88 c2                	mov    dl,al
c001365a:	88 c8                	mov    al,cl
c001365c:	e6 22                	out    0x22,al
c001365e:	88 d0                	mov    al,dl
c0013660:	83 c8 10             	or     eax,0x10
c0013663:	e6 23                	out    0x23,al
c0013665:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001366c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001366f:	89 d0                	mov    eax,edx
c0013671:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013677:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001367b:	40                   	inc    eax
c001367c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013682:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013687:	e9 a1 00 00 00       	jmp    c001372d <CPU::detectFeatures()+0x95b>
c001368c:	83 f8 06             	cmp    eax,0x6
c001368f:	0f 84 e1 fe ff ff    	je     c0013576 <CPU::detectFeatures()+0x7a4>
c0013695:	83 f8 04             	cmp    eax,0x4
c0013698:	0f 84 e9 fe ff ff    	je     c0013587 <CPU::detectFeatures()+0x7b5>
c001369e:	83 f8 03             	cmp    eax,0x3
c00136a1:	0f 85 0e 01 00 00    	jne    c00137b5 <CPU::detectFeatures()+0x9e3>
c00136a7:	52                   	push   edx
c00136a8:	52                   	push   edx
c00136a9:	68 0f 40 02 c0       	push   0xc002400f
c00136ae:	eb 77                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00136b0:	83 f8 07             	cmp    eax,0x7
c00136b3:	75 09                	jne    c00136be <CPU::detectFeatures()+0x8ec>
c00136b5:	50                   	push   eax
c00136b6:	50                   	push   eax
c00136b7:	68 19 40 02 c0       	push   0xc0024019
c00136bc:	eb 69                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00136be:	83 f8 0a             	cmp    eax,0xa
c00136c1:	75 09                	jne    c00136cc <CPU::detectFeatures()+0x8fa>
c00136c3:	50                   	push   eax
c00136c4:	50                   	push   eax
c00136c5:	68 24 40 02 c0       	push   0xc0024024
c00136ca:	eb 5b                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00136cc:	83 f8 0b             	cmp    eax,0xb
c00136cf:	75 09                	jne    c00136da <CPU::detectFeatures()+0x908>
c00136d1:	50                   	push   eax
c00136d2:	50                   	push   eax
c00136d3:	68 2c 40 02 c0       	push   0xc002402c
c00136d8:	eb 4d                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00136da:	83 f8 08             	cmp    eax,0x8
c00136dd:	75 09                	jne    c00136e8 <CPU::detectFeatures()+0x916>
c00136df:	50                   	push   eax
c00136e0:	50                   	push   eax
c00136e1:	68 35 40 02 c0       	push   0xc0024035
c00136e6:	eb 3f                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00136e8:	83 f8 09             	cmp    eax,0x9
c00136eb:	75 09                	jne    c00136f6 <CPU::detectFeatures()+0x924>
c00136ed:	50                   	push   eax
c00136ee:	50                   	push   eax
c00136ef:	68 3d 40 02 c0       	push   0xc002403d
c00136f4:	eb 31                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c00136f6:	83 f8 05             	cmp    eax,0x5
c00136f9:	75 09                	jne    c0013704 <CPU::detectFeatures()+0x932>
c00136fb:	50                   	push   eax
c00136fc:	50                   	push   eax
c00136fd:	68 45 40 02 c0       	push   0xc0024045
c0013702:	eb 23                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013704:	83 f8 0c             	cmp    eax,0xc
c0013707:	75 09                	jne    c0013712 <CPU::detectFeatures()+0x940>
c0013709:	55                   	push   ebp
c001370a:	55                   	push   ebp
c001370b:	68 53 40 02 c0       	push   0xc0024053
c0013710:	eb 15                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013712:	83 f8 0d             	cmp    eax,0xd
c0013715:	75 09                	jne    c0013720 <CPU::detectFeatures()+0x94e>
c0013717:	57                   	push   edi
c0013718:	57                   	push   edi
c0013719:	68 5e 40 02 c0       	push   0xc002405e
c001371e:	eb 07                	jmp    c0013727 <CPU::detectFeatures()+0x955>
c0013720:	56                   	push   esi
c0013721:	56                   	push   esi
c0013722:	68 72 40 02 c0       	push   0xc0024072
c0013727:	53                   	push   ebx
c0013728:	e8 77 a9 ff ff       	call   c000e0a4 <Device::setName(char const*)>
c001372d:	83 c4 10             	add    esp,0x10
c0013730:	e9 80 00 00 00       	jmp    c00137b5 <CPU::detectFeatures()+0x9e3>
c0013735:	51                   	push   ecx
c0013736:	51                   	push   ecx
c0013737:	68 be 3e 02 c0       	push   0xc0023ebe
c001373c:	55                   	push   ebp
c001373d:	e8 fe cf fe ff       	call   c0000740 <strcpy>
c0013742:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001374c:	e8 92 ca fe ff       	call   c00001e3 <is486>
c0013751:	83 c4 10             	add    esp,0x10
c0013754:	85 c0                	test   eax,eax
c0013756:	74 2b                	je     c0013783 <CPU::detectFeatures()+0x9b1>
c0013758:	52                   	push   edx
c0013759:	52                   	push   edx
c001375a:	68 7e 40 02 c0       	push   0xc002407e
c001375f:	53                   	push   ebx
c0013760:	e8 3f a9 ff ff       	call   c000e0a4 <Device::setName(char const*)>
c0013765:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001376c:	0f 20 c0             	mov    eax,cr0
c001376f:	83 e0 14             	and    eax,0x14
c0013772:	83 c4 10             	add    esp,0x10
c0013775:	83 f8 04             	cmp    eax,0x4
c0013778:	75 1f                	jne    c0013799 <CPU::detectFeatures()+0x9c7>
c001377a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013781:	eb 32                	jmp    c00137b5 <CPU::detectFeatures()+0x9e3>
c0013783:	50                   	push   eax
c0013784:	50                   	push   eax
c0013785:	68 89 40 02 c0       	push   0xc0024089
c001378a:	53                   	push   ebx
c001378b:	e8 14 a9 ff ff       	call   c000e0a4 <Device::setName(char const*)>
c0013790:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013797:	eb d3                	jmp    c001376c <CPU::detectFeatures()+0x99a>
c0013799:	e8 20 ca fe ff       	call   c00001be <hasLegacyFPU>
c001379e:	83 e0 01             	and    eax,0x1
c00137a1:	8d 14 00             	lea    edx,[eax+eax*1]
c00137a4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00137aa:	83 e0 fd             	and    eax,0xfffffffd
c00137ad:	09 d0                	or     eax,edx
c00137af:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00137b5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00137bc:	83 c4 4c             	add    esp,0x4c
c00137bf:	5b                   	pop    ebx
c00137c0:	5e                   	pop    esi
c00137c1:	5f                   	pop    edi
c00137c2:	5d                   	pop    ebp
c00137c3:	c3                   	ret    

c00137c4 <CPU::setupSMEP()>:
c00137c4:	0f 20 e0             	mov    eax,cr4
c00137c7:	0d 00 00 10 00       	or     eax,0x100000
c00137cc:	0f 22 e0             	mov    cr4,eax
c00137cf:	c3                   	ret    

c00137d0 <CPU::setupUMIP()>:
c00137d0:	0f 20 e0             	mov    eax,cr4
c00137d3:	80 cc 08             	or     ah,0x8
c00137d6:	0f 22 e0             	mov    cr4,eax
c00137d9:	c3                   	ret    

c00137da <CPU::setupTSC()>:
c00137da:	0f 20 e0             	mov    eax,cr4
c00137dd:	83 c8 04             	or     eax,0x4
c00137e0:	0f 22 e0             	mov    cr4,eax
c00137e3:	c3                   	ret    

c00137e4 <CPU::setupLargePages()>:
c00137e4:	0f 20 e0             	mov    eax,cr4
c00137e7:	83 c8 10             	or     eax,0x10
c00137ea:	0f 22 e0             	mov    cr4,eax
c00137ed:	c3                   	ret    

c00137ee <CPU::setupPAT()>:
c00137ee:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00137f3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00137fa:	74 2c                	je     c0013828 <CPU::setupPAT()+0x3a>
c00137fc:	53                   	push   ebx
c00137fd:	83 ec 10             	sub    esp,0x10
c0013800:	68 77 02 00 00       	push   0x277
c0013805:	50                   	push   eax
c0013806:	e8 19 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001380b:	83 e2 f8             	and    edx,0xfffffff8
c001380e:	83 ca 01             	or     edx,0x1
c0013811:	52                   	push   edx
c0013812:	50                   	push   eax
c0013813:	68 77 02 00 00       	push   0x277
c0013818:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c001381e:	e8 2d 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013823:	83 c4 28             	add    esp,0x28
c0013826:	5b                   	pop    ebx
c0013827:	c3                   	ret    
c0013828:	c3                   	ret    
c0013829:	90                   	nop

c001382a <CPU::setupMTRR()>:
c001382a:	c3                   	ret    
c001382b:	90                   	nop

c001382c <CPU::setupGlobalPages()>:
c001382c:	0f 20 e0             	mov    eax,cr4
c001382f:	0c 80                	or     al,0x80
c0013831:	0f 22 e0             	mov    cr4,eax
c0013834:	c3                   	ret    
c0013835:	90                   	nop

c0013836 <CPU::allowUsermodeDataAccess()>:
c0013836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001383a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013841:	74 03                	je     c0013846 <CPU::allowUsermodeDataAccess()+0x10>
c0013843:	0f 01 cb             	stac   
c0013846:	c3                   	ret    
c0013847:	90                   	nop

c0013848 <CPU::prohibitUsermodeDataAccess()>:
c0013848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001384c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013853:	74 03                	je     c0013858 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013855:	0f 01 ca             	clac   
c0013858:	c3                   	ret    
c0013859:	90                   	nop

c001385a <CPU::setupSMAP()>:
c001385a:	0f 20 e0             	mov    eax,cr4
c001385d:	0d 00 00 20 00       	or     eax,0x200000
c0013862:	0f 22 e0             	mov    cr4,eax
c0013865:	eb e1                	jmp    c0013848 <CPU::prohibitUsermodeDataAccess()>
c0013867:	90                   	nop

c0013868 <CPU::setupFeatures()>:
c0013868:	83 ec 0c             	sub    esp,0xc
c001386b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001386f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0013876:	74 07                	je     c001387f <CPU::setupFeatures()+0x17>
c0013878:	52                   	push   edx
c0013879:	e8 46 ff ff ff       	call   c00137c4 <CPU::setupSMEP()>
c001387e:	58                   	pop    eax
c001387f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0013886:	74 07                	je     c001388f <CPU::setupFeatures()+0x27>
c0013888:	52                   	push   edx
c0013889:	e8 cc ff ff ff       	call   c001385a <CPU::setupSMAP()>
c001388e:	58                   	pop    eax
c001388f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0013896:	74 07                	je     c001389f <CPU::setupFeatures()+0x37>
c0013898:	52                   	push   edx
c0013899:	e8 32 ff ff ff       	call   c00137d0 <CPU::setupUMIP()>
c001389e:	58                   	pop    eax
c001389f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00138a6:	74 07                	je     c00138af <CPU::setupFeatures()+0x47>
c00138a8:	52                   	push   edx
c00138a9:	e8 2c ff ff ff       	call   c00137da <CPU::setupTSC()>
c00138ae:	58                   	pop    eax
c00138af:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00138b6:	74 07                	je     c00138bf <CPU::setupFeatures()+0x57>
c00138b8:	52                   	push   edx
c00138b9:	e8 26 ff ff ff       	call   c00137e4 <CPU::setupLargePages()>
c00138be:	59                   	pop    ecx
c00138bf:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00138c6:	74 07                	je     c00138cf <CPU::setupFeatures()+0x67>
c00138c8:	52                   	push   edx
c00138c9:	e8 5e ff ff ff       	call   c001382c <CPU::setupGlobalPages()>
c00138ce:	58                   	pop    eax
c00138cf:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00138d6:	74 0c                	je     c00138e4 <CPU::setupFeatures()+0x7c>
c00138d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138dc:	83 c4 0c             	add    esp,0xc
c00138df:	e9 0a ff ff ff       	jmp    c00137ee <CPU::setupPAT()>
c00138e4:	83 c4 0c             	add    esp,0xc
c00138e7:	c3                   	ret    

c00138e8 <CPU::open(int, int, void*)>:
c00138e8:	57                   	push   edi
c00138e9:	56                   	push   esi
c00138ea:	53                   	push   ebx
c00138eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138f3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138f9:	83 ec 0c             	sub    esp,0xc
c00138fc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013902:	68 94 40 02 c0       	push   0xc0024094
c0013907:	e8 11 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001390c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013912:	89 04 24             	mov    DWORD PTR [esp],eax
c0013915:	e8 a2 59 ff ff       	call   c00092bc <GDT::setup()>
c001391a:	c7 04 24 a6 40 02 c0 	mov    DWORD PTR [esp],0xc00240a6
c0013921:	e8 f7 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013926:	83 c4 0c             	add    esp,0xc
c0013929:	6a 00                	push   0x0
c001392b:	68 ef be ad de       	push   0xdeadbeef
c0013930:	57                   	push   edi
c0013931:	e8 e6 76 ff ff       	call   c000b01c <TSS::setup(unsigned long, unsigned long)>
c0013936:	c7 04 24 b8 40 02 c0 	mov    DWORD PTR [esp],0xc00240b8
c001393d:	e8 db 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013942:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013945:	e8 b2 76 ff ff       	call   c000affc <TSS::flush()>
c001394a:	c7 04 24 cc 40 02 c0 	mov    DWORD PTR [esp],0xc00240cc
c0013951:	e8 c7 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013956:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001395c:	89 04 24             	mov    DWORD PTR [esp],eax
c001395f:	e8 c2 5b ff ff       	call   c0009526 <IDT::setup()>
c0013964:	c7 04 24 de 40 02 c0 	mov    DWORD PTR [esp],0xc00240de
c001396b:	e8 ad 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013970:	b8 00 04 00 00       	mov    eax,0x400
c0013975:	0f 23 f8             	mov    db7,eax
c0013978:	c7 04 24 fc 40 02 c0 	mov    DWORD PTR [esp],0xc00240fc
c001397f:	e8 99 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013984:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001398e:	e8 57 64 ff ff       	call   c0009dea <Phys::allocatePage()>
c0013993:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013999:	89 30                	mov    DWORD PTR [eax],esi
c001399b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00139a1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00139a4:	c7 04 24 1e 41 02 c0 	mov    DWORD PTR [esp],0xc002411e
c00139ab:	e8 6d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139b0:	58                   	pop    eax
c00139b1:	5a                   	pop    edx
c00139b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00139b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00139bc:	e8 55 86 ff ff       	call   c000c016 <VAS::setCPUSpecific(unsigned long)>
c00139c1:	c7 04 24 46 41 02 c0 	mov    DWORD PTR [esp],0xc0024146
c00139c8:	e8 50 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139d0:	e8 fd f3 ff ff       	call   c0012dd2 <CPU::detectFeatures()>
c00139d5:	c7 04 24 69 41 02 c0 	mov    DWORD PTR [esp],0xc0024169
c00139dc:	e8 3c 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139e1:	e8 cc b8 ff ff       	call   c000f2b2 <setupInterruptController()>
c00139e6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139ec:	c7 04 24 8d 41 02 c0 	mov    DWORD PTR [esp],0xc002418d
c00139f3:	e8 25 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139f8:	a1 e0 63 02 c0       	mov    eax,ds:0xc00263e0
c00139fd:	83 e0 10             	and    eax,0x10
c0013a00:	83 f8 01             	cmp    eax,0x1
c0013a03:	19 c0                	sbb    eax,eax
c0013a05:	83 e0 46             	and    eax,0x46
c0013a08:	83 c0 1e             	add    eax,0x1e
c0013a0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a0e:	e8 89 ce ff ff       	call   c001089c <setupTimer(int)>
c0013a13:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a19:	c7 04 24 a8 41 02 c0 	mov    DWORD PTR [esp],0xc00241a8
c0013a20:	e8 f8 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a28:	e8 3b fe ff ff       	call   c0013868 <CPU::setupFeatures()>
c0013a2d:	c7 04 24 c3 41 02 c0 	mov    DWORD PTR [esp],0xc00241c3
c0013a34:	e8 e4 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a39:	83 c4 10             	add    esp,0x10
c0013a3c:	31 c0                	xor    eax,eax
c0013a3e:	5b                   	pop    ebx
c0013a3f:	5e                   	pop    esi
c0013a40:	5f                   	pop    edi
c0013a41:	c3                   	ret    

c0013a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a42:	57                   	push   edi
c0013a43:	56                   	push   esi
c0013a44:	53                   	push   ebx
c0013a45:	51                   	push   ecx
c0013a46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a4a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a4d:	0f 02 c0             	lar    eax,ax
c0013a50:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a53:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a57:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a5a:	88 ca                	mov    dl,cl
c0013a5c:	c0 ea 06             	shr    dl,0x6
c0013a5f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a63:	89 ca                	mov    edx,ecx
c0013a65:	66 c1 ea 03          	shr    dx,0x3
c0013a69:	83 e2 07             	and    edx,0x7
c0013a6c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a71:	88 17                	mov    BYTE PTR [edi],dl
c0013a73:	0f 84 a6 01 00 00    	je     c0013c1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a79:	83 e1 07             	and    ecx,0x7
c0013a7c:	80 f9 04             	cmp    cl,0x4
c0013a7f:	0f 84 98 00 00 00    	je     c0013b1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a85:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a8a:	0f 95 c0             	setne  al
c0013a8d:	80 f9 05             	cmp    cl,0x5
c0013a90:	0f 95 c2             	setne  dl
c0013a93:	08 c2                	or     dl,al
c0013a95:	74 79                	je     c0013b10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a97:	84 c9                	test   cl,cl
c0013a99:	75 05                	jne    c0013aa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a9b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013a9e:	eb 3c                	jmp    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aa0:	80 f9 01             	cmp    cl,0x1
c0013aa3:	75 05                	jne    c0013aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013aa5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013aa8:	eb 32                	jmp    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aaa:	80 f9 02             	cmp    cl,0x2
c0013aad:	75 05                	jne    c0013ab4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013aaf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013ab2:	eb 28                	jmp    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab4:	31 c0                	xor    eax,eax
c0013ab6:	80 f9 03             	cmp    cl,0x3
c0013ab9:	75 05                	jne    c0013ac0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013abb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013abe:	eb 1c                	jmp    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ac0:	80 f9 05             	cmp    cl,0x5
c0013ac3:	75 05                	jne    c0013aca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013ac5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ac8:	eb 12                	jmp    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aca:	80 f9 06             	cmp    cl,0x6
c0013acd:	75 05                	jne    c0013ad4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013acf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ad2:	eb 08                	jmp    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ad4:	80 f9 07             	cmp    cl,0x7
c0013ad7:	75 03                	jne    c0013adc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ad9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013adc:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013ae1:	75 10                	jne    c0013af3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013ae3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013ae7:	b9 03 00 00 00       	mov    ecx,0x3
c0013aec:	01 d0                	add    eax,edx
c0013aee:	e9 37 01 00 00       	jmp    c0013c2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013af3:	b9 02 00 00 00       	mov    ecx,0x2
c0013af8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013afd:	0f 85 27 01 00 00    	jne    c0013c2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b03:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b06:	b9 06 00 00 00       	mov    ecx,0x6
c0013b0b:	e9 1a 01 00 00       	jmp    c0013c2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b10:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b13:	b9 06 00 00 00       	mov    ecx,0x6
c0013b18:	e9 0f 01 00 00       	jmp    c0013c2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b1d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b20:	88 ca                	mov    dl,cl
c0013b22:	c0 ea 06             	shr    dl,0x6
c0013b25:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b29:	89 ca                	mov    edx,ecx
c0013b2b:	66 c1 ea 03          	shr    dx,0x3
c0013b2f:	83 e2 07             	and    edx,0x7
c0013b32:	80 e1 07             	and    cl,0x7
c0013b35:	75 05                	jne    c0013b3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b37:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b3a:	eb 4c                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b3c:	80 f9 01             	cmp    cl,0x1
c0013b3f:	75 05                	jne    c0013b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b41:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b44:	eb 42                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b46:	80 f9 02             	cmp    cl,0x2
c0013b49:	75 05                	jne    c0013b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b4b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b4e:	eb 38                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b50:	80 f9 03             	cmp    cl,0x3
c0013b53:	75 05                	jne    c0013b5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b55:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b58:	eb 2e                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b5a:	80 f9 04             	cmp    cl,0x4
c0013b5d:	75 12                	jne    c0013b71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b5f:	f6 c4 60             	test   ah,0x60
c0013b62:	75 08                	jne    c0013b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b64:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b67:	8d 78 14             	lea    edi,[eax+0x14]
c0013b6a:	eb 1c                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b6c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b6f:	eb 17                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b71:	80 f9 05             	cmp    cl,0x5
c0013b74:	75 05                	jne    c0013b7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b76:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b79:	eb 0d                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b7b:	80 f9 06             	cmp    cl,0x6
c0013b7e:	75 05                	jne    c0013b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b80:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b83:	eb 03                	jmp    c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b85:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b88:	84 d2                	test   dl,dl
c0013b8a:	75 05                	jne    c0013b91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b8c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b8f:	eb 3c                	jmp    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b91:	80 fa 01             	cmp    dl,0x1
c0013b94:	75 05                	jne    c0013b9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b96:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b99:	eb 32                	jmp    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b9b:	80 fa 02             	cmp    dl,0x2
c0013b9e:	75 05                	jne    c0013ba5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013ba0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013ba3:	eb 28                	jmp    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba5:	80 fa 03             	cmp    dl,0x3
c0013ba8:	75 05                	jne    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013baa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013bad:	eb 1e                	jmp    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013baf:	31 c0                	xor    eax,eax
c0013bb1:	80 fa 04             	cmp    dl,0x4
c0013bb4:	74 17                	je     c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bb6:	80 fa 05             	cmp    dl,0x5
c0013bb9:	75 05                	jne    c0013bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013bbb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013bbe:	eb 0d                	jmp    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bc0:	80 fa 06             	cmp    dl,0x6
c0013bc3:	75 05                	jne    c0013bca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013bc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bc8:	eb 03                	jmp    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013bcd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bd2:	0f 94 c2             	sete   dl
c0013bd5:	80 f9 05             	cmp    cl,0x5
c0013bd8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013bdc:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013be1:	d3 e0                	shl    eax,cl
c0013be3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013be7:	74 0a                	je     c0013bf3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013be9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bec:	b9 07 00 00 00       	mov    ecx,0x7
c0013bf1:	eb 37                	jmp    c0013c2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bf3:	01 f8                	add    eax,edi
c0013bf5:	b9 03 00 00 00       	mov    ecx,0x3
c0013bfa:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bff:	74 2b                	je     c0013c2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c01:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c06:	75 0d                	jne    c0013c15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c08:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c0c:	01 c8                	add    eax,ecx
c0013c0e:	b9 04 00 00 00       	mov    ecx,0x4
c0013c13:	eb 17                	jmp    c0013c2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c15:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c18:	b9 07 00 00 00       	mov    ecx,0x7
c0013c1d:	eb 0d                	jmp    c0013c2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c1f:	b9 02 00 00 00       	mov    ecx,0x2
c0013c24:	b2 01                	mov    dl,0x1
c0013c26:	31 c0                	xor    eax,eax
c0013c28:	eb 02                	jmp    c0013c2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c2a:	31 d2                	xor    edx,edx
c0013c2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c30:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c32:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c36:	88 11                	mov    BYTE PTR [ecx],dl
c0013c38:	5a                   	pop    edx
c0013c39:	5b                   	pop    ebx
c0013c3a:	5e                   	pop    esi
c0013c3b:	5f                   	pop    edi
c0013c3c:	c3                   	ret    

c0013c3d <Krnl::smpEntry()>:
c0013c3d:	eb fe                	jmp    c0013c3d <Krnl::smpEntry()>

c0013c3f <Krnl::startCPU(int)>:
c0013c3f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0013c44:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c4b:	0f 84 36 01 00 00    	je     c0013d87 <Krnl::startCPU(int)+0x148>
c0013c51:	53                   	push   ebx
c0013c52:	83 ec 10             	sub    esp,0x10
c0013c55:	fa                   	cli    
c0013c56:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0013c5c:	6a 1b                	push   0x1b
c0013c5e:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c0013c64:	e8 bb 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c6e:	89 c3                	mov    ebx,eax
c0013c70:	58                   	pop    eax
c0013c71:	5a                   	pop    edx
c0013c72:	53                   	push   ebx
c0013c73:	68 0c 42 02 c0       	push   0xc002420c
c0013c78:	e8 ea 8d ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0013c7d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c95:	c1 e0 18             	shl    eax,0x18
c0013c98:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013ca7:	09 c2                	or     edx,eax
c0013ca9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013caf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013cb5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cbb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cc1:	80 cd c5             	or     ch,0xc5
c0013cc4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cca:	f3 90                	pause  
c0013ccc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cce:	0f ba e1 0c          	bt     ecx,0xc
c0013cd2:	72 f6                	jb     c0013cca <Krnl::startCPU(int)+0x8b>
c0013cd4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cda:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013ce0:	09 c1                	or     ecx,eax
c0013ce2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013ce8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cee:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cf4:	80 cd 85             	or     ch,0x85
c0013cf7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cfd:	f3 90                	pause  
c0013cff:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d01:	0f ba e1 0c          	bt     ecx,0xc
c0013d05:	72 f6                	jb     c0013cfd <Krnl::startCPU(int)+0xbe>
c0013d07:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d11:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d17:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d1d:	09 c1                	or     ecx,eax
c0013d1f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d25:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d2b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d31:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d37:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d3d:	f3 90                	pause  
c0013d3f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d41:	0f ba e1 0c          	bt     ecx,0xc
c0013d45:	72 f6                	jb     c0013d3d <Krnl::startCPU(int)+0xfe>
c0013d47:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d51:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d57:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d5d:	09 c8                	or     eax,ecx
c0013d5f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d65:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d6b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d70:	0d 02 06 00 00       	or     eax,0x602
c0013d75:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d7b:	f3 90                	pause  
c0013d7d:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d7f:	0f ba e0 0c          	bt     eax,0xc
c0013d83:	72 f6                	jb     c0013d7b <Krnl::startCPU(int)+0x13c>
c0013d85:	eb fe                	jmp    c0013d85 <Krnl::startCPU(int)+0x146>
c0013d87:	c3                   	ret    

c0013d88 <Krnl::startCPUs()>:
c0013d88:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0013d8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d93:	88 c2                	mov    dl,al
c0013d95:	83 e2 0a             	and    edx,0xa
c0013d98:	80 fa 0a             	cmp    dl,0xa
c0013d9b:	75 09                	jne    c0013da6 <Krnl::startCPUs()+0x1e>
c0013d9d:	a8 01                	test   al,0x1
c0013d9f:	74 05                	je     c0013da6 <Krnl::startCPUs()+0x1e>
c0013da1:	e9 f5 c3 fe ff       	jmp    c000019b <prepareTramp>
c0013da6:	c3                   	ret    
c0013da7:	90                   	nop

c0013da8 <EnvVarContainer::getEnv(char const*)>:
c0013da8:	57                   	push   edi
c0013da9:	56                   	push   esi
c0013daa:	53                   	push   ebx
c0013dab:	31 db                	xor    ebx,ebx
c0013dad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013db1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013db3:	7e 2b                	jle    c0013de0 <EnvVarContainer::getEnv(char const*)+0x38>
c0013db5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013dbc:	50                   	push   eax
c0013dbd:	50                   	push   eax
c0013dbe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dc1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013dc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dc8:	e8 ff c9 fe ff       	call   c00007cc <strcmp>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	85 c0                	test   eax,eax
c0013dd2:	75 09                	jne    c0013ddd <EnvVarContainer::getEnv(char const*)+0x35>
c0013dd4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dd7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013ddb:	eb 05                	jmp    c0013de2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013ddd:	43                   	inc    ebx
c0013dde:	eb d1                	jmp    c0013db1 <EnvVarContainer::getEnv(char const*)+0x9>
c0013de0:	31 c0                	xor    eax,eax
c0013de2:	5b                   	pop    ebx
c0013de3:	5e                   	pop    esi
c0013de4:	5f                   	pop    edi
c0013de5:	c3                   	ret    

c0013de6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013de6:	55                   	push   ebp
c0013de7:	57                   	push   edi
c0013de8:	56                   	push   esi
c0013de9:	53                   	push   ebx
c0013dea:	83 ec 28             	sub    esp,0x28
c0013ded:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013df1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013df5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013df9:	56                   	push   esi
c0013dfa:	e8 a1 c8 fe ff       	call   c00006a0 <strlen>
c0013dff:	40                   	inc    eax
c0013e00:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e03:	e8 bb 5b ff ff       	call   c00099c3 <malloc>
c0013e08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e0f:	e8 8c c8 fe ff       	call   c00006a0 <strlen>
c0013e14:	40                   	inc    eax
c0013e15:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e18:	e8 a6 5b ff ff       	call   c00099c3 <malloc>
c0013e1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e24:	e8 77 c8 fe ff       	call   c00006a0 <strlen>
c0013e29:	83 c4 0c             	add    esp,0xc
c0013e2c:	40                   	inc    eax
c0013e2d:	50                   	push   eax
c0013e2e:	6a 00                	push   0x0
c0013e30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e34:	e8 4b c8 fe ff       	call   c0000684 <memset>
c0013e39:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e3c:	e8 5f c8 fe ff       	call   c00006a0 <strlen>
c0013e41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e45:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e4d:	89 de                	mov    esi,ebx
c0013e4f:	e8 4c c8 fe ff       	call   c00006a0 <strlen>
c0013e54:	83 c4 0c             	add    esp,0xc
c0013e57:	40                   	inc    eax
c0013e58:	50                   	push   eax
c0013e59:	6a 00                	push   0x0
c0013e5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e5f:	e8 20 c8 fe ff       	call   c0000684 <memset>
c0013e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e67:	e8 34 c8 fe ff       	call   c00006a0 <strlen>
c0013e6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e70:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e78:	40                   	inc    eax
c0013e79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e7c:	c1 e0 03             	shl    eax,0x3
c0013e7f:	5a                   	pop    edx
c0013e80:	59                   	pop    ecx
c0013e81:	50                   	push   eax
c0013e82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e85:	e8 25 5b ff ff       	call   c00099af <realloc>
c0013e8a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e8e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e91:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e94:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e98:	b9 08 00 00 00       	mov    ecx,0x8
c0013e9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e9f:	83 c4 2c             	add    esp,0x2c
c0013ea2:	5b                   	pop    ebx
c0013ea3:	5e                   	pop    esi
c0013ea4:	5f                   	pop    edi
c0013ea5:	5d                   	pop    ebp
c0013ea6:	c3                   	ret    
c0013ea7:	90                   	nop

c0013ea8 <EnvVarContainer::deleteEnv(char const*)>:
c0013ea8:	c3                   	ret    
c0013ea9:	90                   	nop

c0013eaa <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013eaa:	55                   	push   ebp
c0013eab:	57                   	push   edi
c0013eac:	56                   	push   esi
c0013ead:	53                   	push   ebx
c0013eae:	81 ec 38 01 00 00    	sub    esp,0x138
c0013eb4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013ebb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ec2:	68 14 01 00 00       	push   0x114
c0013ec7:	e8 f7 5a ff ff       	call   c00099c3 <malloc>
c0013ecc:	83 c4 0c             	add    esp,0xc
c0013ecf:	89 c3                	mov    ebx,eax
c0013ed1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013ed4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013edb:	50                   	push   eax
c0013edc:	e8 f1 90 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0013ee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee4:	e8 bb 93 ff ff       	call   c000d2a4 <File::exists()>
c0013ee9:	83 c4 10             	add    esp,0x10
c0013eec:	84 c0                	test   al,al
c0013eee:	75 31                	jne    c0013f21 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013ef0:	50                   	push   eax
c0013ef1:	50                   	push   eax
c0013ef2:	6a 12                	push   0x12
c0013ef4:	53                   	push   ebx
c0013ef5:	e8 3c 91 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0013efa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013efc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013eff:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f02:	e8 99 c7 fe ff       	call   c00006a0 <strlen>
c0013f07:	5a                   	pop    edx
c0013f08:	31 d2                	xor    edx,edx
c0013f0a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f0e:	51                   	push   ecx
c0013f0f:	56                   	push   esi
c0013f10:	52                   	push   edx
c0013f11:	50                   	push   eax
c0013f12:	53                   	push   ebx
c0013f13:	ff d7                	call   edi
c0013f15:	83 c4 14             	add    esp,0x14
c0013f18:	53                   	push   ebx
c0013f19:	e8 76 91 ff ff       	call   c000d094 <File::close()>
c0013f1e:	83 c4 10             	add    esp,0x10
c0013f21:	56                   	push   esi
c0013f22:	31 f6                	xor    esi,esi
c0013f24:	68 00 01 00 00       	push   0x100
c0013f29:	6a 00                	push   0x0
c0013f2b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f2f:	50                   	push   eax
c0013f30:	e8 4f c7 fe ff       	call   c0000684 <memset>
c0013f35:	5f                   	pop    edi
c0013f36:	58                   	pop    eax
c0013f37:	6a 01                	push   0x1
c0013f39:	53                   	push   ebx
c0013f3a:	e8 f7 90 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0013f3f:	83 c4 10             	add    esp,0x10
c0013f42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f4f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f53:	51                   	push   ecx
c0013f54:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f58:	52                   	push   edx
c0013f59:	6a 00                	push   0x0
c0013f5b:	6a 01                	push   0x1
c0013f5d:	53                   	push   ebx
c0013f5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f61:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f65:	83 c4 20             	add    esp,0x20
c0013f68:	3c 0d                	cmp    al,0xd
c0013f6a:	0f 84 09 01 00 00    	je     c0014079 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f75:	0f 84 ef 00 00 00    	je     c001406a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f7b:	3c 0a                	cmp    al,0xa
c0013f7d:	74 13                	je     c0013f92 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f84:	74 0c                	je     c0013f92 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f86:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f8c:	0f 8e d8 00 00 00    	jle    c001406a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f96:	83 ec 0c             	sub    esp,0xc
c0013f99:	8d 78 01             	lea    edi,[eax+0x1]
c0013f9c:	57                   	push   edi
c0013f9d:	e8 21 5a ff ff       	call   c00099c3 <malloc>
c0013fa2:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013fa6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013faa:	8d 56 04             	lea    edx,[esi+0x4]
c0013fad:	89 14 24             	mov    DWORD PTR [esp],edx
c0013fb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013fb4:	e8 0a 5a ff ff       	call   c00099c3 <malloc>
c0013fb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013fbd:	83 c4 0c             	add    esp,0xc
c0013fc0:	57                   	push   edi
c0013fc1:	6a 00                	push   0x0
c0013fc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013fc7:	e8 b8 c6 fe ff       	call   c0000684 <memset>
c0013fcc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fd0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fd4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fda:	83 c4 0c             	add    esp,0xc
c0013fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fe1:	52                   	push   edx
c0013fe2:	6a 00                	push   0x0
c0013fe4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fe8:	e8 97 c6 fe ff       	call   c0000684 <memset>
c0013fed:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013ff1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ff5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ff8:	e8 a3 c6 fe ff       	call   c00006a0 <strlen>
c0013ffd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014001:	89 c1                	mov    ecx,eax
c0014003:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014005:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014008:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001400b:	40                   	inc    eax
c001400c:	83 c4 10             	add    esp,0x10
c001400f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014012:	85 d2                	test   edx,edx
c0014014:	75 0c                	jne    c0014022 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	6a 08                	push   0x8
c001401b:	e8 a3 59 ff ff       	call   c00099c3 <malloc>
c0014020:	eb 0c                	jmp    c001402e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014022:	c1 e0 03             	shl    eax,0x3
c0014025:	51                   	push   ecx
c0014026:	51                   	push   ecx
c0014027:	50                   	push   eax
c0014028:	52                   	push   edx
c0014029:	e8 81 59 ff ff       	call   c00099af <realloc>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014034:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014037:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001403a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001403e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014042:	b9 08 00 00 00       	mov    ecx,0x8
c0014047:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014049:	31 f6                	xor    esi,esi
c001404b:	50                   	push   eax
c001404c:	68 00 01 00 00       	push   0x100
c0014051:	6a 00                	push   0x0
c0014053:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014057:	50                   	push   eax
c0014058:	e8 27 c6 fe ff       	call   c0000684 <memset>
c001405d:	83 c4 10             	add    esp,0x10
c0014060:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014068:	eb 0f                	jmp    c0014079 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001406a:	3c 3d                	cmp    al,0x3d
c001406c:	74 07                	je     c0014075 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001406e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014072:	46                   	inc    esi
c0014073:	eb 04                	jmp    c0014079 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014075:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014079:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001407e:	0f 85 c6 fe ff ff    	jne    c0013f4a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014084:	81 c4 2c 01 00 00    	add    esp,0x12c
c001408a:	5b                   	pop    ebx
c001408b:	5e                   	pop    esi
c001408c:	5f                   	pop    edi
c001408d:	5d                   	pop    ebp
c001408e:	c3                   	ret    
c001408f:	90                   	nop

c0014090 <EnvVarContainer::__loadSystem()>:
c0014090:	83 ec 10             	sub    esp,0x10
c0014093:	68 a0 5d 02 c0       	push   0xc0025da0
c0014098:	68 1d 42 02 c0       	push   0xc002421d
c001409d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a1:	e8 04 fe ff ff       	call   c0013eaa <EnvVarContainer::loadFrom(char const*, char const*)>
c00140a6:	83 c4 1c             	add    esp,0x1c
c00140a9:	c3                   	ret    

c00140aa <EnvVarContainer::__loadUser()>:
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <EnvVarContainer::EnvVarContainer(Process*)>:
c00140ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00140c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140cc:	90                   	nop
c00140cd:	c3                   	ret    

c00140ce <EnvVarContainer::~EnvVarContainer()>:
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140d8:	85 c0                	test   eax,eax
c00140da:	74 1d                	je     c00140f9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00140e2:	85 c0                	test   eax,eax
c00140e4:	74 13                	je     c00140f9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140ed:	83 ec 0c             	sub    esp,0xc
c00140f0:	50                   	push   eax
c00140f1:	e8 dd 58 ff ff       	call   c00099d3 <free>
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	90                   	nop
c00140fa:	83 c4 0c             	add    esp,0xc
c00140fd:	c3                   	ret    

c00140fe <Krnl::getEnv(Process*, char const*)>:
c00140fe:	53                   	push   ebx
c00140ff:	83 ec 08             	sub    esp,0x8
c0014102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014106:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001410a:	39 05 f0 78 02 c0    	cmp    DWORD PTR ds:0xc00278f0,eax
c0014110:	74 04                	je     c0014116 <Krnl::getEnv(Process*, char const*)+0x18>
c0014112:	85 c0                	test   eax,eax
c0014114:	75 0b                	jne    c0014121 <Krnl::getEnv(Process*, char const*)+0x23>
c0014116:	a1 d4 6e 02 c0       	mov    eax,ds:0xc0026ed4
c001411b:	85 c0                	test   eax,eax
c001411d:	75 19                	jne    c0014138 <Krnl::getEnv(Process*, char const*)+0x3a>
c001411f:	eb 27                	jmp    c0014148 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014121:	52                   	push   edx
c0014122:	52                   	push   edx
c0014123:	53                   	push   ebx
c0014124:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001412a:	e8 79 fc ff ff       	call   c0013da8 <EnvVarContainer::getEnv(char const*)>
c001412f:	83 c4 10             	add    esp,0x10
c0014132:	85 c0                	test   eax,eax
c0014134:	75 28                	jne    c001415e <Krnl::getEnv(Process*, char const*)+0x60>
c0014136:	eb de                	jmp    c0014116 <Krnl::getEnv(Process*, char const*)+0x18>
c0014138:	52                   	push   edx
c0014139:	52                   	push   edx
c001413a:	53                   	push   ebx
c001413b:	50                   	push   eax
c001413c:	e8 67 fc ff ff       	call   c0013da8 <EnvVarContainer::getEnv(char const*)>
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	85 c0                	test   eax,eax
c0014146:	75 16                	jne    c001415e <Krnl::getEnv(Process*, char const*)+0x60>
c0014148:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001414c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0014151:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014155:	83 c4 08             	add    esp,0x8
c0014158:	5b                   	pop    ebx
c0014159:	e9 4a fc ff ff       	jmp    c0013da8 <EnvVarContainer::getEnv(char const*)>
c001415e:	83 c4 08             	add    esp,0x8
c0014161:	5b                   	pop    ebx
c0014162:	c3                   	ret    

c0014163 <Krnl::setEnvSystem(char const*, char const*)>:
c0014163:	83 ec 10             	sub    esp,0x10
c0014166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001416a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001416e:	ff 35 d8 6e 02 c0    	push   DWORD PTR ds:0xc0026ed8
c0014174:	e8 6d fc ff ff       	call   c0013de6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014179:	83 c4 1c             	add    esp,0x1c
c001417c:	c3                   	ret    

c001417d <Krnl::setEnvUser(char const*, char const*)>:
c001417d:	a1 d4 6e 02 c0       	mov    eax,ds:0xc0026ed4
c0014182:	85 c0                	test   eax,eax
c0014184:	74 15                	je     c001419b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014186:	83 ec 10             	sub    esp,0x10
c0014189:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001418d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014191:	50                   	push   eax
c0014192:	e8 4f fc ff ff       	call   c0013de6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014197:	83 c4 1c             	add    esp,0x1c
c001419a:	c3                   	ret    
c001419b:	c3                   	ret    

c001419c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001419c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141a0:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00141a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141aa:	e9 37 fc ff ff       	jmp    c0013de6 <EnvVarContainer::setEnv(char const*, char const*)>

c00141af <Krnl::deleteEnvSystem(char const*)>:
c00141af:	c3                   	ret    

c00141b0 <Krnl::deleteEnvUser(char const*)>:
c00141b0:	c3                   	ret    

c00141b1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00141b1:	c3                   	ret    

c00141b2 <Krnl::newProcessEnv(Process*)>:
c00141b2:	83 ec 28             	sub    esp,0x28
c00141b5:	6a 0c                	push   0xc
c00141b7:	e8 07 58 ff ff       	call   c00099c3 <malloc>
c00141bc:	5a                   	pop    edx
c00141bd:	59                   	pop    ecx
c00141be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141c2:	50                   	push   eax
c00141c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141c7:	e8 e0 fe ff ff       	call   c00140ac <EnvVarContainer::EnvVarContainer(Process*)>
c00141cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141d0:	83 c4 2c             	add    esp,0x2c
c00141d3:	c3                   	ret    

c00141d4 <Krnl::copyProcessEnv(Process*, Process*)>:
c00141d4:	57                   	push   edi
c00141d5:	56                   	push   esi
c00141d6:	53                   	push   ebx
c00141d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141db:	83 ec 0c             	sub    esp,0xc
c00141de:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141e4:	6a 0c                	push   0xc
c00141e6:	e8 d8 57 ff ff       	call   c00099c3 <malloc>
c00141eb:	89 c3                	mov    ebx,eax
c00141ed:	58                   	pop    eax
c00141ee:	5a                   	pop    edx
c00141ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f3:	53                   	push   ebx
c00141f4:	e8 b3 fe ff ff       	call   c00140ac <EnvVarContainer::EnvVarContainer(Process*)>
c00141f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00141fb:	89 03                	mov    DWORD PTR [ebx],eax
c00141fd:	c1 e0 03             	shl    eax,0x3
c0014200:	89 04 24             	mov    DWORD PTR [esp],eax
c0014203:	e8 bb 57 ff ff       	call   c00099c3 <malloc>
c0014208:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001420b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001420d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014210:	c1 e1 03             	shl    ecx,0x3
c0014213:	89 c7                	mov    edi,eax
c0014215:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014217:	83 c4 10             	add    esp,0x10
c001421a:	89 d8                	mov    eax,ebx
c001421c:	5b                   	pop    ebx
c001421d:	5e                   	pop    esi
c001421e:	5f                   	pop    edi
c001421f:	c3                   	ret    

c0014220 <Krnl::loadSystemEnv()>:
c0014220:	53                   	push   ebx
c0014221:	83 ec 14             	sub    esp,0x14
c0014224:	6a 0c                	push   0xc
c0014226:	e8 98 57 ff ff       	call   c00099c3 <malloc>
c001422b:	89 c3                	mov    ebx,eax
c001422d:	58                   	pop    eax
c001422e:	5a                   	pop    edx
c001422f:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014235:	53                   	push   ebx
c0014236:	e8 71 fe ff ff       	call   c00140ac <EnvVarContainer::EnvVarContainer(Process*)>
c001423b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001423e:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0014244:	e8 47 fe ff ff       	call   c0014090 <EnvVarContainer::__loadSystem()>
c0014249:	83 c4 18             	add    esp,0x18
c001424c:	5b                   	pop    ebx
c001424d:	c3                   	ret    

c001424e <Krnl::loadUserEnv()>:
c001424e:	53                   	push   ebx
c001424f:	83 ec 14             	sub    esp,0x14
c0014252:	6a 0c                	push   0xc
c0014254:	e8 6a 57 ff ff       	call   c00099c3 <malloc>
c0014259:	89 c3                	mov    ebx,eax
c001425b:	58                   	pop    eax
c001425c:	5a                   	pop    edx
c001425d:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014263:	53                   	push   ebx
c0014264:	e8 43 fe ff ff       	call   c00140ac <EnvVarContainer::EnvVarContainer(Process*)>
c0014269:	89 1d d4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed4,ebx
c001426f:	83 c4 18             	add    esp,0x18
c0014272:	5b                   	pop    ebx
c0014273:	c3                   	ret    

c0014274 <Krnl::flushEnv()>:
c0014274:	c3                   	ret    

c0014275 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014279:	8b 15 d4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ed4
c001427f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014285:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c001428a:	8b 00                	mov    eax,DWORD PTR [eax]
c001428c:	03 01                	add    eax,DWORD PTR [ecx]
c001428e:	85 d2                	test   edx,edx
c0014290:	74 02                	je     c0014294 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014292:	03 02                	add    eax,DWORD PTR [edx]
c0014294:	c3                   	ret    

c0014295 <Krnl::getProcessEnvPair(Process*, int)>:
c0014295:	57                   	push   edi
c0014296:	56                   	push   esi
c0014297:	8b 35 d4 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed4
c001429d:	53                   	push   ebx
c001429e:	85 f6                	test   esi,esi
c00142a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142a8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00142b4:	75 16                	jne    c00142cc <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00142b6:	39 c2                	cmp    edx,eax
c00142b8:	7c 16                	jl     c00142d0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142ba:	8b 0d d8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ed8
c00142c0:	8b 31                	mov    esi,DWORD PTR [ecx]
c00142c2:	01 c6                	add    esi,eax
c00142c4:	39 d6                	cmp    esi,edx
c00142c6:	7e 3c                	jle    c0014304 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142c8:	29 c2                	sub    edx,eax
c00142ca:	eb 04                	jmp    c00142d0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142cc:	39 c2                	cmp    edx,eax
c00142ce:	7d 05                	jge    c00142d5 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142d0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142d3:	eb 20                	jmp    c00142f5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142d5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142d7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142da:	39 d1                	cmp    ecx,edx
c00142dc:	7e 04                	jle    c00142e2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142de:	29 c2                	sub    edx,eax
c00142e0:	eb 10                	jmp    c00142f2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142e2:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c00142e8:	03 0e                	add    ecx,DWORD PTR [esi]
c00142ea:	39 d1                	cmp    ecx,edx
c00142ec:	7e 16                	jle    c0014304 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142ee:	29 c2                	sub    edx,eax
c00142f0:	29 fa                	sub    edx,edi
c00142f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142f5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00142fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00142fd:	89 03                	mov    DWORD PTR [ebx],eax
c00142ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014302:	eb 1d                	jmp    c0014321 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	68 3f 42 02 c0       	push   0xc002423f
c001430c:	e8 18 00 00 00       	call   c0014329 <Krnl::panic(char const*)>
c0014311:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014317:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	89 d8                	mov    eax,ebx
c0014323:	5b                   	pop    ebx
c0014324:	5e                   	pop    esi
c0014325:	5f                   	pop    edi
c0014326:	c2 04 00             	ret    0x4

c0014329 <Krnl::panic(char const*)>:
c0014329:	55                   	push   ebp
c001432a:	89 e5                	mov    ebp,esp
c001432c:	53                   	push   ebx
c001432d:	83 ec 10             	sub    esp,0x10
c0014330:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014333:	fa                   	cli    
c0014334:	c6 05 e4 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ee4,0x1
c001433b:	53                   	push   ebx
c001433c:	e8 dc 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014341:	58                   	pop    eax
c0014342:	c6 05 a0 57 02 c0 00 	mov    BYTE PTR ds:0xc00257a0,0x0
c0014349:	5a                   	pop    edx
c001434a:	53                   	push   ebx
c001434b:	68 59 42 02 c0       	push   0xc0024259
c0014350:	e8 12 87 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0014355:	59                   	pop    ecx
c0014356:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001435b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014361:	e8 5f 64 ff ff       	call   c000a7c5 <setActiveTerminal(VgaText*)>
c0014366:	83 c4 0c             	add    esp,0xc
c0014369:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001436e:	6a 01                	push   0x1
c0014370:	6a 0f                	push   0xf
c0014372:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014378:	e8 a7 62 ff ff       	call   c000a624 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001437d:	58                   	pop    eax
c001437e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014383:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014389:	e8 b8 67 ff ff       	call   c000ab46 <VgaText::clearScreen()>
c001438e:	58                   	pop    eax
c001438f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014394:	5a                   	pop    edx
c0014395:	68 72 42 02 c0       	push   0xc0024272
c001439a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143a0:	e8 2d 69 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00143a5:	59                   	pop    ecx
c00143a6:	58                   	pop    eax
c00143a7:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143ac:	68 18 43 02 c0       	push   0xc0024318
c00143b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143b7:	e8 16 69 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00143bc:	58                   	pop    eax
c00143bd:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143c2:	5a                   	pop    edx
c00143c3:	68 8e 42 02 c0       	push   0xc002428e
c00143c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143ce:	e8 ff 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00143d3:	59                   	pop    ecx
c00143d4:	58                   	pop    eax
c00143d5:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143da:	53                   	push   ebx
c00143db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143e1:	e8 ec 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00143e6:	58                   	pop    eax
c00143e7:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143ec:	5a                   	pop    edx
c00143ed:	68 ae 42 02 c0       	push   0xc00242ae
c00143f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143f8:	e8 d5 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00143fd:	a1 e0 6e 02 c0       	mov    eax,ds:0xc0026ee0
c0014402:	83 c4 10             	add    esp,0x10
c0014405:	85 c0                	test   eax,eax
c0014407:	74 02                	je     c001440b <Krnl::panic(char const*)+0xe2>
c0014409:	ff d0                	call   eax
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014411:	e8 af 30 00 00       	call   c00174c5 <Thr::getDriverNameFromAddress(unsigned long)>
c0014416:	83 c4 10             	add    esp,0x10
c0014419:	89 c3                	mov    ebx,eax
c001441b:	85 c0                	test   eax,eax
c001441d:	0f 84 4e 02 00 00    	je     c0014671 <Krnl::panic(char const*)+0x348>
c0014423:	83 ec 08             	sub    esp,0x8
c0014426:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001442b:	68 54 43 02 c0       	push   0xc0024354
c0014430:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014436:	e8 97 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c001443b:	58                   	pop    eax
c001443c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014441:	5a                   	pop    edx
c0014442:	68 8e 42 02 c0       	push   0xc002428e
c0014447:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001444d:	e8 80 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014452:	59                   	pop    ecx
c0014453:	58                   	pop    eax
c0014454:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014459:	53                   	push   ebx
c001445a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014460:	e8 6d 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	83 ec 08             	sub    esp,0x8
c001446b:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014470:	68 ad 42 02 c0       	push   0xc00242ad
c0014475:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001447b:	e8 52 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014480:	58                   	pop    eax
c0014481:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014486:	5a                   	pop    edx
c0014487:	68 ac 43 02 c0       	push   0xc00243ac
c001448c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014492:	e8 3b 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014497:	59                   	pop    ecx
c0014498:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001449d:	5b                   	pop    ebx
c001449e:	68 ec 43 02 c0       	push   0xc00243ec
c00144a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144a9:	e8 24 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00144ae:	58                   	pop    eax
c00144af:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00144b4:	5a                   	pop    edx
c00144b5:	68 99 42 02 c0       	push   0xc0024299
c00144ba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144c0:	e8 0d 68 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00144c5:	59                   	pop    ecx
c00144c6:	5b                   	pop    ebx
c00144c7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144ca:	68 b1 42 02 c0       	push   0xc00242b1
c00144cf:	e8 93 85 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00144d4:	58                   	pop    eax
c00144d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144d8:	5a                   	pop    edx
c00144d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144dc:	68 ba 42 02 c0       	push   0xc00242ba
c00144e1:	e8 81 85 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00144e6:	59                   	pop    ecx
c00144e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144ea:	5b                   	pop    ebx
c00144eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00144ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144f0:	68 c3 42 02 c0       	push   0xc00242c3
c00144f5:	e8 6d 85 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00144fa:	58                   	pop    eax
c00144fb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014500:	5a                   	pop    edx
c0014501:	68 30 44 02 c0       	push   0xc0024430
c0014506:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001450c:	e8 c1 67 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014511:	59                   	pop    ecx
c0014512:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014517:	5b                   	pop    ebx
c0014518:	68 cc 42 02 c0       	push   0xc00242cc
c001451d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014523:	e8 aa 67 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014528:	0f 20 c0             	mov    eax,cr0
c001452b:	5a                   	pop    edx
c001452c:	59                   	pop    ecx
c001452d:	50                   	push   eax
c001452e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014533:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014539:	e8 4e 67 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c001453e:	5b                   	pop    ebx
c001453f:	58                   	pop    eax
c0014540:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014545:	68 d6 42 02 c0       	push   0xc00242d6
c001454a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014550:	e8 7d 67 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014555:	0f 20 d0             	mov    eax,cr2
c0014558:	5a                   	pop    edx
c0014559:	59                   	pop    ecx
c001455a:	50                   	push   eax
c001455b:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014560:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014566:	e8 21 67 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c001456b:	5b                   	pop    ebx
c001456c:	58                   	pop    eax
c001456d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014572:	68 e0 42 02 c0       	push   0xc00242e0
c0014577:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001457d:	e8 50 67 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014582:	0f 20 d8             	mov    eax,cr3
c0014585:	5a                   	pop    edx
c0014586:	59                   	pop    ecx
c0014587:	50                   	push   eax
c0014588:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001458d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014593:	e8 f4 66 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c0014598:	5b                   	pop    ebx
c0014599:	58                   	pop    eax
c001459a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001459f:	68 f3 42 02 c0       	push   0xc00242f3
c00145a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145aa:	e8 23 67 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00145af:	0f 20 e0             	mov    eax,cr4
c00145b2:	5a                   	pop    edx
c00145b3:	59                   	pop    ecx
c00145b4:	50                   	push   eax
c00145b5:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145ba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145c0:	e8 c7 66 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c00145c5:	5b                   	pop    ebx
c00145c6:	58                   	pop    eax
c00145c7:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145cc:	68 fd 42 02 c0       	push   0xc00242fd
c00145d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145d7:	e8 f6 66 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00145dc:	5a                   	pop    edx
c00145dd:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145e2:	59                   	pop    ecx
c00145e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145ec:	50                   	push   eax
c00145ed:	e8 9a 66 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c00145f2:	5b                   	pop    ebx
c00145f3:	58                   	pop    eax
c00145f4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145f9:	68 14 43 02 c0       	push   0xc0024314
c00145fe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014604:	e8 c9 66 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014609:	5a                   	pop    edx
c001460a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001460f:	59                   	pop    ecx
c0014610:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014616:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014619:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001461c:	50                   	push   eax
c001461d:	e8 6a 66 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c0014622:	5b                   	pop    ebx
c0014623:	58                   	pop    eax
c0014624:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014629:	68 14 43 02 c0       	push   0xc0024314
c001462e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014634:	e8 99 66 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014639:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001463e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014641:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014647:	8b 12                	mov    edx,DWORD PTR [edx]
c0014649:	59                   	pop    ecx
c001464a:	5b                   	pop    ebx
c001464b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001464e:	50                   	push   eax
c001464f:	e8 38 66 ff ff       	call   c000ac8c <VgaText::putx(unsigned int)>
c0014654:	83 c4 10             	add    esp,0x10
c0014657:	b2 fe                	mov    dl,0xfe
c0014659:	e4 60                	in     al,0x60
c001465b:	3c 1c                	cmp    al,0x1c
c001465d:	74 04                	je     c0014663 <Krnl::panic(char const*)+0x33a>
c001465f:	3c 5a                	cmp    al,0x5a
c0014661:	75 f6                	jne    c0014659 <Krnl::panic(char const*)+0x330>
c0014663:	e4 64                	in     al,0x64
c0014665:	a8 02                	test   al,0x2
c0014667:	75 fa                	jne    c0014663 <Krnl::panic(char const*)+0x33a>
c0014669:	88 d0                	mov    al,dl
c001466b:	e6 64                	out    0x64,al
c001466d:	fa                   	cli    
c001466e:	f4                   	hlt    
c001466f:	eb e8                	jmp    c0014659 <Krnl::panic(char const*)+0x330>
c0014671:	50                   	push   eax
c0014672:	50                   	push   eax
c0014673:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014678:	68 80 43 02 c0       	push   0xc0024380
c001467d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014683:	e8 4a 66 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c0014688:	58                   	pop    eax
c0014689:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001468e:	5a                   	pop    edx
c001468f:	68 8e 42 02 c0       	push   0xc002428e
c0014694:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001469a:	e8 33 66 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c001469f:	59                   	pop    ecx
c00146a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a5:	5b                   	pop    ebx
c00146a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146a9:	83 c0 0c             	add    eax,0xc
c00146ac:	50                   	push   eax
c00146ad:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00146b2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146b8:	e8 15 66 ff ff       	call   c000acd2 <VgaText::puts(char const*)>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	e9 a3 fd ff ff       	jmp    c0014468 <Krnl::panic(char const*)+0x13f>
c00146c5:	66 90                	xchg   ax,ax
c00146c7:	90                   	nop

c00146c8 <Net::switchEndian16(unsigned short)>:
c00146c8:	83 ec 04             	sub    esp,0x4
c00146cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146d3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146d7:	c1 f8 08             	sar    eax,0x8
c00146da:	89 c2                	mov    edx,eax
c00146dc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146e0:	c1 e0 08             	shl    eax,0x8
c00146e3:	09 d0                	or     eax,edx
c00146e5:	83 c4 04             	add    esp,0x4
c00146e8:	c3                   	ret    
c00146e9:	8d 76 00             	lea    esi,[esi+0x0]

c00146ec <Net::switchEndian32(unsigned int)>:
c00146ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146f0:	c1 e8 18             	shr    eax,0x18
c00146f3:	89 c2                	mov    edx,eax
c00146f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146f9:	c1 e0 08             	shl    eax,0x8
c00146fc:	25 00 00 ff 00       	and    eax,0xff0000
c0014701:	09 c2                	or     edx,eax
c0014703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014707:	c1 e8 08             	shr    eax,0x8
c001470a:	25 00 ff 00 00       	and    eax,0xff00
c001470f:	09 c2                	or     edx,eax
c0014711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014715:	c1 e0 18             	shl    eax,0x18
c0014718:	09 d0                	or     eax,edx
c001471a:	c3                   	ret    
c001471b:	90                   	nop

c001471c <Net::crc32Calc(unsigned char*, int)>:
c001471c:	83 ec 10             	sub    esp,0x10
c001471f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014724:	75 0a                	jne    c0014730 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014726:	b8 00 00 00 00       	mov    eax,0x0
c001472b:	e9 8c 00 00 00       	jmp    c00147bc <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014730:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014735:	7f 09                	jg     c0014740 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014737:	b8 00 00 00 00       	mov    eax,0x0
c001473c:	eb 7e                	jmp    c00147bc <Net::crc32Calc(unsigned char*, int)+0xa0>
c001473e:	66 90                	xchg   ax,ax
c0014740:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014748:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014750:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014754:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014758:	7d 5a                	jge    c00147b4 <Net::crc32Calc(unsigned char*, int)+0x98>
c001475a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001475e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014762:	01 d0                	add    eax,edx
c0014764:	8a 00                	mov    al,BYTE PTR [eax]
c0014766:	0f b6 c0             	movzx  eax,al
c0014769:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001476d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014775:	8d 76 00             	lea    esi,[esi+0x0]
c0014778:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001477d:	7f 2d                	jg     c00147ac <Net::crc32Calc(unsigned char*, int)+0x90>
c001477f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014783:	83 e0 01             	and    eax,0x1
c0014786:	74 10                	je     c0014798 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001478c:	d1 e8                	shr    eax,1
c001478e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014793:	eb 0b                	jmp    c00147a0 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014795:	8d 76 00             	lea    esi,[esi+0x0]
c0014798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001479c:	d1 e8                	shr    eax,1
c001479e:	66 90                	xchg   ax,ax
c00147a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00147a8:	eb ce                	jmp    c0014778 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00147aa:	66 90                	xchg   ax,ax
c00147ac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147b0:	eb 9e                	jmp    c0014750 <Net::crc32Calc(unsigned char*, int)+0x34>
c00147b2:	66 90                	xchg   ax,ax
c00147b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147b8:	f7 d0                	not    eax
c00147ba:	66 90                	xchg   ax,ax
c00147bc:	83 c4 10             	add    esp,0x10
c00147bf:	c3                   	ret    

c00147c0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00147c0:	57                   	push   edi
c00147c1:	56                   	push   esi
c00147c2:	53                   	push   ebx
c00147c3:	83 ec 60             	sub    esp,0x60
c00147c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147cd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147d1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147d9:	8d 76 00             	lea    esi,[esi+0x0]
c00147dc:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147e1:	7f 1d                	jg     c0014800 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147e3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ea:	8d 50 01             	lea    edx,[eax+0x1]
c00147ed:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147f4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147f7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147fb:	eb df                	jmp    c00147dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00147fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014800:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014807:	8d 50 01             	lea    edx,[eax+0x1]
c001480a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014811:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014814:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001481b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001481f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014823:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014827:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001482f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001483b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001483f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014843:	89 c6                	mov    esi,eax
c0014845:	89 d7                	mov    edi,edx
c0014847:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014849:	89 c8                	mov    eax,ecx
c001484b:	89 fa                	mov    edx,edi
c001484d:	89 f3                	mov    ebx,esi
c001484f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014853:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014857:	89 04 24             	mov    DWORD PTR [esp],eax
c001485a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014862:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014869:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001486d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014871:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014875:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001487d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014889:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001488d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014891:	89 c6                	mov    esi,eax
c0014893:	89 d7                	mov    edi,edx
c0014895:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014897:	89 c8                	mov    eax,ecx
c0014899:	89 fa                	mov    edx,edi
c001489b:	89 f3                	mov    ebx,esi
c001489d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00148a1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00148a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148b1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00148b8:	0f b7 c0             	movzx  eax,ax
c00148bb:	c1 f8 08             	sar    eax,0x8
c00148be:	89 c1                	mov    ecx,eax
c00148c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c7:	8d 50 01             	lea    edx,[eax+0x1]
c00148ca:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148d1:	88 ca                	mov    dl,cl
c00148d3:	88 10                	mov    BYTE PTR [eax],dl
c00148d5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148e3:	8d 48 01             	lea    ecx,[eax+0x1]
c00148e6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148ed:	88 10                	mov    BYTE PTR [eax],dl
c00148ef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148f3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148f7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00148fe:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014902:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014906:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001490a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001490e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014912:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014916:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001491a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001491e:	89 c6                	mov    esi,eax
c0014920:	89 d7                	mov    edi,edx
c0014922:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014924:	89 c8                	mov    eax,ecx
c0014926:	89 fa                	mov    edx,edi
c0014928:	89 f3                	mov    ebx,esi
c001492a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001492e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014932:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014936:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001493a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014941:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014948:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001494c:	50                   	push   eax
c001494d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014951:	e8 c6 fd ff ff       	call   c001471c <Net::crc32Calc(unsigned char*, int)>
c0014956:	83 c4 08             	add    esp,0x8
c0014959:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001495d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014961:	c1 e8 18             	shr    eax,0x18
c0014964:	89 c1                	mov    ecx,eax
c0014966:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001496d:	8d 50 01             	lea    edx,[eax+0x1]
c0014970:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014977:	88 ca                	mov    dl,cl
c0014979:	88 10                	mov    BYTE PTR [eax],dl
c001497b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001497f:	c1 e8 10             	shr    eax,0x10
c0014982:	89 c1                	mov    ecx,eax
c0014984:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001498b:	8d 50 01             	lea    edx,[eax+0x1]
c001498e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014995:	88 ca                	mov    dl,cl
c0014997:	88 10                	mov    BYTE PTR [eax],dl
c0014999:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001499d:	c1 e8 08             	shr    eax,0x8
c00149a0:	89 c1                	mov    ecx,eax
c00149a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149a9:	8d 50 01             	lea    edx,[eax+0x1]
c00149ac:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149b3:	88 ca                	mov    dl,cl
c00149b5:	88 10                	mov    BYTE PTR [eax],dl
c00149b7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149be:	8d 50 01             	lea    edx,[eax+0x1]
c00149c1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149c8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149cc:	88 10                	mov    BYTE PTR [eax],dl
c00149ce:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149d2:	83 c4 60             	add    esp,0x60
c00149d5:	5b                   	pop    ebx
c00149d6:	5e                   	pop    esi
c00149d7:	5f                   	pop    edi
c00149d8:	c3                   	ret    
c00149d9:	8d 76 00             	lea    esi,[esi+0x0]

c00149dc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149dc:	57                   	push   edi
c00149dd:	56                   	push   esi
c00149de:	53                   	push   ebx
c00149df:	83 ec 70             	sub    esp,0x70
c00149e2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149e9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149ed:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149f5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00149fc:	83 c0 0e             	add    eax,0xe
c00149ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a03:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a0e:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a26:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a2a:	89 c6                	mov    esi,eax
c0014a2c:	89 d7                	mov    edi,edx
c0014a2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a30:	89 c8                	mov    eax,ecx
c0014a32:	89 fa                	mov    edx,edi
c0014a34:	89 f3                	mov    ebx,esi
c0014a36:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a3a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a42:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a4a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a51:	83 c0 08             	add    eax,0x8
c0014a54:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a63:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a6b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a6f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a77:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a7b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a7f:	89 c6                	mov    esi,eax
c0014a81:	89 d7                	mov    edi,edx
c0014a83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a85:	89 c8                	mov    eax,ecx
c0014a87:	89 fa                	mov    edx,edi
c0014a89:	89 f3                	mov    ebx,esi
c0014a8b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a97:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014aa6:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ab0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab2:	0f b6 c0             	movzx  eax,al
c0014ab5:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014aba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ac1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014acb:	8a 00                	mov    al,BYTE PTR [eax]
c0014acd:	0f b6 c0             	movzx  eax,al
c0014ad0:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014ad5:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014ada:	c1 e0 08             	shl    eax,0x8
c0014add:	89 c2                	mov    edx,eax
c0014adf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014ae3:	09 d0                	or     eax,edx
c0014ae5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014aec:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014af0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014af8:	75 46                	jne    c0014b40 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014afa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b01:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b04:	66 3d dc 05          	cmp    ax,0x5dc
c0014b08:	77 16                	ja     c0014b20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b11:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b14:	0f b7 c0             	movzx  eax,ax
c0014b17:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b1e:	eb 20                	jmp    c0014b40 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	68 58 44 02 c0       	push   0xc0024458
c0014b28:	e8 3a 7f ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b37:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b3b:	e9 18 01 00 00       	jmp    c0014c58 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b47:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b4e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b50:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b5b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b77:	89 c6                	mov    esi,eax
c0014b79:	89 d7                	mov    edi,edx
c0014b7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b7d:	89 c8                	mov    eax,ecx
c0014b7f:	89 fa                	mov    edx,edi
c0014b81:	89 f3                	mov    ebx,esi
c0014b83:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b8e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b95:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014b9c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ba3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bad:	8a 00                	mov    al,BYTE PTR [eax]
c0014baf:	0f b6 c0             	movzx  eax,al
c0014bb2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014bb6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bbd:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc9:	0f b6 c0             	movzx  eax,al
c0014bcc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014bd0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bda:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014be1:	8a 00                	mov    al,BYTE PTR [eax]
c0014be3:	0f b6 c0             	movzx  eax,al
c0014be6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014bea:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bf1:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfd:	0f b6 c0             	movzx  eax,al
c0014c00:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c04:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c08:	c1 e0 18             	shl    eax,0x18
c0014c0b:	89 c2                	mov    edx,eax
c0014c0d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c11:	c1 e0 10             	shl    eax,0x10
c0014c14:	09 c2                	or     edx,eax
c0014c16:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c1a:	c1 e0 08             	shl    eax,0x8
c0014c1d:	09 d0                	or     eax,edx
c0014c1f:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c23:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c2e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c32:	83 e8 04             	sub    eax,0x4
c0014c35:	83 ec 08             	sub    esp,0x8
c0014c38:	50                   	push   eax
c0014c39:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c3d:	e8 da fa ff ff       	call   c001471c <Net::crc32Calc(unsigned char*, int)>
c0014c42:	83 c4 10             	add    esp,0x10
c0014c45:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c49:	0f 94 c2             	sete   dl
c0014c4c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c53:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c56:	90                   	nop
c0014c57:	90                   	nop
c0014c58:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c5f:	83 c4 70             	add    esp,0x70
c0014c62:	5b                   	pop    ebx
c0014c63:	5e                   	pop    esi
c0014c64:	5f                   	pop    edi
c0014c65:	c2 04 00             	ret    0x4

c0014c68 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c68:	55                   	push   ebp
c0014c69:	57                   	push   edi
c0014c6a:	56                   	push   esi
c0014c6b:	53                   	push   ebx
c0014c6c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c72:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c79:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c7b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c7e:	80 fb 40             	cmp    bl,0x40
c0014c81:	75 1b                	jne    c0014c9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c83:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c85:	84 d2                	test   dl,dl
c0014c87:	0f 84 f1 00 00 00    	je     c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c8d:	8d 46 01             	lea    eax,[esi+0x1]
c0014c90:	80 fa 3a             	cmp    dl,0x3a
c0014c93:	74 04                	je     c0014c99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c95:	89 c6                	mov    esi,eax
c0014c97:	eb ea                	jmp    c0014c83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c99:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014c9c:	89 c6                	mov    esi,eax
c0014c9e:	50                   	push   eax
c0014c9f:	6a 40                	push   0x40
c0014ca1:	6a 00                	push   0x0
c0014ca3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014ca7:	50                   	push   eax
c0014ca8:	e8 d7 b9 fe ff       	call   c0000684 <memset>
c0014cad:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cb4:	31 c0                	xor    eax,eax
c0014cb6:	83 c4 10             	add    esp,0x10
c0014cb9:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cbb:	84 c9                	test   cl,cl
c0014cbd:	0f 84 bb 00 00 00    	je     c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cc3:	3d c7 00 00 00       	cmp    eax,0xc7
c0014cc8:	0f 8f b0 00 00 00    	jg     c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cce:	80 f9 0a             	cmp    cl,0xa
c0014cd1:	0f 85 98 00 00 00    	jne    c0014d6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cd7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014cdc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014ce0:	a8 df                	test   al,0xdf
c0014ce2:	0f 94 c1             	sete   cl
c0014ce5:	3c 23                	cmp    al,0x23
c0014ce7:	0f 94 c2             	sete   dl
c0014cea:	08 d1                	or     cl,dl
c0014cec:	75 4a                	jne    c0014d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cee:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cf1:	80 fa 01             	cmp    dl,0x1
c0014cf4:	76 42                	jbe    c0014d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cf6:	3c 5b                	cmp    al,0x5b
c0014cf8:	75 42                	jne    c0014d3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cfa:	80 fb 40             	cmp    bl,0x40
c0014cfd:	75 39                	jne    c0014d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cff:	83 ec 0c             	sub    esp,0xc
c0014d02:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d06:	52                   	push   edx
c0014d07:	e8 94 b9 fe ff       	call   c00006a0 <strlen>
c0014d0c:	83 c4 10             	add    esp,0x10
c0014d0f:	83 f8 3f             	cmp    eax,0x3f
c0014d12:	77 6a                	ja     c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d14:	50                   	push   eax
c0014d15:	50                   	push   eax
c0014d16:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d1a:	52                   	push   edx
c0014d1b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d1f:	52                   	push   edx
c0014d20:	e8 1b ba fe ff       	call   c0000740 <strcpy>
c0014d25:	58                   	pop    eax
c0014d26:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d2a:	52                   	push   edx
c0014d2b:	e8 70 b9 fe ff       	call   c00006a0 <strlen>
c0014d30:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d35:	83 c4 10             	add    esp,0x10
c0014d38:	31 d2                	xor    edx,edx
c0014d3a:	eb 3a                	jmp    c0014d76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d3c:	80 fb 40             	cmp    bl,0x40
c0014d3f:	74 06                	je     c0014d47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d45:	eb 20                	jmp    c0014d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d47:	50                   	push   eax
c0014d48:	50                   	push   eax
c0014d49:	55                   	push   ebp
c0014d4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d4e:	50                   	push   eax
c0014d4f:	e8 78 ba fe ff       	call   c00007cc <strcmp>
c0014d54:	83 c4 10             	add    esp,0x10
c0014d57:	85 c0                	test   eax,eax
c0014d59:	75 dd                	jne    c0014d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d5b:	eb e4                	jmp    c0014d41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d5d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d60:	80 f9 3d             	cmp    cl,0x3d
c0014d63:	74 1d                	je     c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d65:	89 d0                	mov    eax,edx
c0014d67:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d69:	84 c9                	test   cl,cl
c0014d6b:	75 f0                	jne    c0014d5d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d6d:	eb 0f                	jmp    c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d6f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d72:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d76:	47                   	inc    edi
c0014d77:	89 d0                	mov    eax,edx
c0014d79:	e9 3b ff ff ff       	jmp    c0014cb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d7e:	31 c0                	xor    eax,eax
c0014d80:	eb 33                	jmp    c0014db5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d89:	50                   	push   eax
c0014d8a:	50                   	push   eax
c0014d8b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d8f:	50                   	push   eax
c0014d90:	56                   	push   esi
c0014d91:	e8 36 ba fe ff       	call   c00007cc <strcmp>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	85 c0                	test   eax,eax
c0014d9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d9f:	75 97                	jne    c0014d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014da1:	51                   	push   ecx
c0014da2:	51                   	push   ecx
c0014da3:	52                   	push   edx
c0014da4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014dab:	e8 90 b9 fe ff       	call   c0000740 <strcpy>
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	b0 01                	mov    al,0x1
c0014db5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dbb:	5b                   	pop    ebx
c0014dbc:	5e                   	pop    esi
c0014dbd:	5f                   	pop    edi
c0014dbe:	5d                   	pop    ebp
c0014dbf:	c3                   	ret    

c0014dc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dc0:	57                   	push   edi
c0014dc1:	56                   	push   esi
c0014dc2:	53                   	push   ebx
c0014dc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014dc9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014dd0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014dd7:	53                   	push   ebx
c0014dd8:	e8 c3 b8 fe ff       	call   c00006a0 <strlen>
c0014ddd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014de0:	89 c7                	mov    edi,eax
c0014de2:	e8 b9 b8 fe ff       	call   c00006a0 <strlen>
c0014de7:	83 c4 10             	add    esp,0x10
c0014dea:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dee:	3d ff 00 00 00       	cmp    eax,0xff
c0014df3:	0f 87 d3 00 00 00    	ja     c0014ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014df9:	57                   	push   edi
c0014dfa:	57                   	push   edi
c0014dfb:	56                   	push   esi
c0014dfc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e00:	56                   	push   esi
c0014e01:	e8 3a b9 fe ff       	call   c0000740 <strcpy>
c0014e06:	58                   	pop    eax
c0014e07:	5a                   	pop    edx
c0014e08:	68 fa 47 02 c0       	push   0xc00247fa
c0014e0d:	56                   	push   esi
c0014e0e:	e8 6d ba fe ff       	call   c0000880 <strcat>
c0014e13:	59                   	pop    ecx
c0014e14:	5f                   	pop    edi
c0014e15:	53                   	push   ebx
c0014e16:	56                   	push   esi
c0014e17:	e8 64 ba fe ff       	call   c0000880 <strcat>
c0014e1c:	58                   	pop    eax
c0014e1d:	5a                   	pop    edx
c0014e1e:	68 a4 44 02 c0       	push   0xc00244a4
c0014e23:	56                   	push   esi
c0014e24:	e8 57 ba fe ff       	call   c0000880 <strcat>
c0014e29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e30:	e8 8e 4b ff ff       	call   c00099c3 <malloc>
c0014e35:	83 c4 0c             	add    esp,0xc
c0014e38:	89 c3                	mov    ebx,eax
c0014e3a:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014e40:	56                   	push   esi
c0014e41:	50                   	push   eax
c0014e42:	e8 8b 81 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0014e47:	83 c4 10             	add    esp,0x10
c0014e4a:	85 db                	test   ebx,ebx
c0014e4c:	74 7e                	je     c0014ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e4e:	51                   	push   ecx
c0014e4f:	51                   	push   ecx
c0014e50:	6a 01                	push   0x1
c0014e52:	53                   	push   ebx
c0014e53:	e8 de 81 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	85 c0                	test   eax,eax
c0014e5d:	74 08                	je     c0014e67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e5f:	83 ec 0c             	sub    esp,0xc
c0014e62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e64:	53                   	push   ebx
c0014e65:	eb 5f                	jmp    c0014ec6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e67:	52                   	push   edx
c0014e68:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e6c:	50                   	push   eax
c0014e6d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e71:	50                   	push   eax
c0014e72:	53                   	push   ebx
c0014e73:	e8 6a 84 ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c0014e78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	89 c1                	mov    ecx,eax
c0014e81:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e85:	74 31                	je     c0014eb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e87:	83 ec 0c             	sub    esp,0xc
c0014e8a:	50                   	push   eax
c0014e8b:	e8 33 4b ff ff       	call   c00099c3 <malloc>
c0014e90:	89 c6                	mov    esi,eax
c0014e92:	58                   	pop    eax
c0014e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e95:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e99:	52                   	push   edx
c0014e9a:	56                   	push   esi
c0014e9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014ea3:	53                   	push   ebx
c0014ea4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ea7:	83 c4 20             	add    esp,0x20
c0014eaa:	85 c0                	test   eax,eax
c0014eac:	75 0a                	jne    c0014eb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014eae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eb2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014eb6:	74 18                	je     c0014ed0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	53                   	push   ebx
c0014ebc:	e8 d3 81 ff ff       	call   c000d094 <File::close()>
c0014ec1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ec6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec9:	83 c4 10             	add    esp,0x10
c0014ecc:	31 c0                	xor    eax,eax
c0014ece:	eb 3b                	jmp    c0014f0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014ed0:	83 ec 0c             	sub    esp,0xc
c0014ed3:	53                   	push   ebx
c0014ed4:	e8 bb 81 ff ff       	call   c000d094 <File::close()>
c0014ed9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014edb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ede:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ee1:	83 c4 0c             	add    esp,0xc
c0014ee4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014eeb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ef2:	56                   	push   esi
c0014ef3:	e8 70 fd ff ff       	call   c0014c68 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014ef8:	89 34 24             	mov    DWORD PTR [esp],esi
c0014efb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014eff:	e8 cf 4a ff ff       	call   c00099d3 <free>
c0014f04:	83 c4 10             	add    esp,0x10
c0014f07:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f0b:	81 c4 20 01 00 00    	add    esp,0x120
c0014f11:	5b                   	pop    ebx
c0014f12:	5e                   	pop    esi
c0014f13:	5f                   	pop    edi
c0014f14:	c3                   	ret    

c0014f15 <Reg::getLine(char*, char*, char*)>:
c0014f15:	57                   	push   edi
c0014f16:	56                   	push   esi
c0014f17:	53                   	push   ebx
c0014f18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f24:	57                   	push   edi
c0014f25:	56                   	push   esi
c0014f26:	53                   	push   ebx
c0014f27:	68 a9 44 02 c0       	push   0xc00244a9
c0014f2c:	e8 8f fe ff ff       	call   c0014dc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f31:	83 c4 10             	add    esp,0x10
c0014f34:	84 c0                	test   al,al
c0014f36:	75 10                	jne    c0014f48 <Reg::getLine(char*, char*, char*)+0x33>
c0014f38:	57                   	push   edi
c0014f39:	56                   	push   esi
c0014f3a:	53                   	push   ebx
c0014f3b:	68 ce 44 02 c0       	push   0xc00244ce
c0014f40:	e8 7b fe ff ff       	call   c0014dc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	5b                   	pop    ebx
c0014f49:	5e                   	pop    esi
c0014f4a:	5f                   	pop    edi
c0014f4b:	c3                   	ret    

c0014f4c <Reg::readInt(char*, char*, int*)>:
c0014f4c:	55                   	push   ebp
c0014f4d:	57                   	push   edi
c0014f4e:	56                   	push   esi
c0014f4f:	53                   	push   ebx
c0014f50:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f56:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f5a:	57                   	push   edi
c0014f5b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f62:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f69:	e8 a7 ff ff ff       	call   c0014f15 <Reg::getLine(char*, char*, char*)>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	84 c0                	test   al,al
c0014f73:	0f 84 b3 00 00 00    	je     c001502c <Reg::readInt(char*, char*, int*)+0xe0>
c0014f79:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f7d:	80 fa 2b             	cmp    dl,0x2b
c0014f80:	74 0c                	je     c0014f8e <Reg::readInt(char*, char*, int*)+0x42>
c0014f82:	80 fa 2d             	cmp    dl,0x2d
c0014f85:	75 0e                	jne    c0014f95 <Reg::readInt(char*, char*, int*)+0x49>
c0014f87:	ba 01 00 00 00       	mov    edx,0x1
c0014f8c:	eb 0b                	jmp    c0014f99 <Reg::readInt(char*, char*, int*)+0x4d>
c0014f8e:	ba 01 00 00 00       	mov    edx,0x1
c0014f93:	eb 02                	jmp    c0014f97 <Reg::readInt(char*, char*, int*)+0x4b>
c0014f95:	31 d2                	xor    edx,edx
c0014f97:	31 c0                	xor    eax,eax
c0014f99:	be 0a 00 00 00       	mov    esi,0xa
c0014f9e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014fa3:	75 20                	jne    c0014fc5 <Reg::readInt(char*, char*, int*)+0x79>
c0014fa5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fa9:	80 f9 78             	cmp    cl,0x78
c0014fac:	75 0a                	jne    c0014fb8 <Reg::readInt(char*, char*, int*)+0x6c>
c0014fae:	83 c2 02             	add    edx,0x2
c0014fb1:	be 10 00 00 00       	mov    esi,0x10
c0014fb6:	eb 0d                	jmp    c0014fc5 <Reg::readInt(char*, char*, int*)+0x79>
c0014fb8:	80 f9 62             	cmp    cl,0x62
c0014fbb:	75 08                	jne    c0014fc5 <Reg::readInt(char*, char*, int*)+0x79>
c0014fbd:	83 c2 02             	add    edx,0x2
c0014fc0:	be 02 00 00 00       	mov    esi,0x2
c0014fc5:	01 d7                	add    edi,edx
c0014fc7:	31 d2                	xor    edx,edx
c0014fc9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fcb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fcf:	80 fb 0d             	cmp    bl,0xd
c0014fd2:	0f 94 c3             	sete   bl
c0014fd5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fda:	0f 94 c1             	sete   cl
c0014fdd:	08 cb                	or     bl,cl
c0014fdf:	75 3a                	jne    c001501b <Reg::readInt(char*, char*, int*)+0xcf>
c0014fe1:	0f af d6             	imul   edx,esi
c0014fe4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fe9:	83 fe 10             	cmp    esi,0x10
c0014fec:	75 26                	jne    c0015014 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014ff2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014ff5:	89 e9                	mov    ecx,ebp
c0014ff7:	80 f9 05             	cmp    cl,0x5
c0014ffa:	77 06                	ja     c0015002 <Reg::readInt(char*, char*, int*)+0xb6>
c0014ffc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015000:	eb 16                	jmp    c0015018 <Reg::readInt(char*, char*, int*)+0xcc>
c0015002:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015006:	83 e9 61             	sub    ecx,0x61
c0015009:	80 f9 05             	cmp    cl,0x5
c001500c:	77 06                	ja     c0015014 <Reg::readInt(char*, char*, int*)+0xc8>
c001500e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015012:	eb 04                	jmp    c0015018 <Reg::readInt(char*, char*, int*)+0xcc>
c0015014:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015018:	47                   	inc    edi
c0015019:	eb ae                	jmp    c0014fc9 <Reg::readInt(char*, char*, int*)+0x7d>
c001501b:	84 c0                	test   al,al
c001501d:	74 02                	je     c0015021 <Reg::readInt(char*, char*, int*)+0xd5>
c001501f:	f7 da                	neg    edx
c0015021:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015028:	89 10                	mov    DWORD PTR [eax],edx
c001502a:	88 d8                	mov    al,bl
c001502c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015032:	5b                   	pop    ebx
c0015033:	5e                   	pop    esi
c0015034:	5f                   	pop    edi
c0015035:	5d                   	pop    ebp
c0015036:	c3                   	ret    

c0015037 <Reg::readString(char*, char*, char*, int)>:
c0015037:	57                   	push   edi
c0015038:	56                   	push   esi
c0015039:	53                   	push   ebx
c001503a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015040:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015047:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001504b:	57                   	push   edi
c001504c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015053:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001505a:	e8 b6 fe ff ff       	call   c0014f15 <Reg::getLine(char*, char*, char*)>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	89 c6                	mov    esi,eax
c0015064:	84 c0                	test   al,al
c0015066:	74 44                	je     c00150ac <Reg::readString(char*, char*, char*, int)+0x75>
c0015068:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001506f:	31 c0                	xor    eax,eax
c0015071:	4a                   	dec    edx
c0015072:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015075:	84 c9                	test   cl,cl
c0015077:	74 0f                	je     c0015088 <Reg::readString(char*, char*, char*, int)+0x51>
c0015079:	39 c2                	cmp    edx,eax
c001507b:	7e 0b                	jle    c0015088 <Reg::readString(char*, char*, char*, int)+0x51>
c001507d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015080:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015085:	40                   	inc    eax
c0015086:	eb ea                	jmp    c0015072 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015088:	83 ec 0c             	sub    esp,0xc
c001508b:	53                   	push   ebx
c001508c:	e8 0f b6 fe ff       	call   c00006a0 <strlen>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015099:	75 11                	jne    c00150ac <Reg::readString(char*, char*, char*, int)+0x75>
c001509b:	83 ec 0c             	sub    esp,0xc
c001509e:	53                   	push   ebx
c001509f:	e8 fc b5 fe ff       	call   c00006a0 <strlen>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150ac:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150b2:	89 f0                	mov    eax,esi
c00150b4:	5b                   	pop    ebx
c00150b5:	5e                   	pop    esi
c00150b6:	5f                   	pop    edi
c00150b7:	c3                   	ret    

c00150b8 <Reg::readBool(char*, char*, bool*)>:
c00150b8:	83 ec 20             	sub    esp,0x20
c00150bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150bf:	50                   	push   eax
c00150c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c8:	e8 7f fe ff ff       	call   c0014f4c <Reg::readInt(char*, char*, int*)>
c00150cd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150d6:	0f 95 02             	setne  BYTE PTR [edx]
c00150d9:	83 c4 2c             	add    esp,0x2c
c00150dc:	c3                   	ret    

c00150dd <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150dd:	53                   	push   ebx
c00150de:	83 ec 1c             	sub    esp,0x1c
c00150e1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150e5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150e9:	50                   	push   eax
c00150ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150f2:	e8 c1 ff ff ff       	call   c00150b8 <Reg::readBool(char*, char*, bool*)>
c00150f7:	83 c4 10             	add    esp,0x10
c00150fa:	84 c0                	test   al,al
c00150fc:	74 04                	je     c0015102 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00150fe:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015102:	88 d8                	mov    al,bl
c0015104:	83 c4 18             	add    esp,0x18
c0015107:	5b                   	pop    ebx
c0015108:	c3                   	ret    

c0015109 <Reg::readIntWithDefault(char*, char*, int)>:
c0015109:	53                   	push   ebx
c001510a:	83 ec 1c             	sub    esp,0x1c
c001510d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015111:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015115:	50                   	push   eax
c0015116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001511a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001511e:	e8 29 fe ff ff       	call   c0014f4c <Reg::readInt(char*, char*, int*)>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	84 c0                	test   al,al
c0015128:	74 04                	je     c001512e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001512a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001512e:	89 d8                	mov    eax,ebx
c0015130:	83 c4 18             	add    esp,0x18
c0015133:	5b                   	pop    ebx
c0015134:	c3                   	ret    

c0015135 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015135:	57                   	push   edi
c0015136:	56                   	push   esi
c0015137:	56                   	push   esi
c0015138:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001513c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015140:	56                   	push   esi
c0015141:	57                   	push   edi
c0015142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001514a:	e8 e8 fe ff ff       	call   c0015037 <Reg::readString(char*, char*, char*, int)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	84 c0                	test   al,al
c0015154:	75 1a                	jne    c0015170 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015156:	51                   	push   ecx
c0015157:	56                   	push   esi
c0015158:	6a 00                	push   0x0
c001515a:	57                   	push   edi
c001515b:	e8 24 b5 fe ff       	call   c0000684 <memset>
c0015160:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015163:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015167:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015170:	89 f8                	mov    eax,edi
c0015172:	5a                   	pop    edx
c0015173:	5e                   	pop    esi
c0015174:	5f                   	pop    edi
c0015175:	c3                   	ret    

c0015176 <Sys::eject(regs*)>:
c0015176:	83 ec 0c             	sub    esp,0xc
c0015179:	83 ca ff             	or     edx,0xffffffff
c001517c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015180:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015183:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015188:	83 e9 41             	sub    ecx,0x41
c001518b:	83 f9 19             	cmp    ecx,0x19
c001518e:	77 18                	ja     c00151a8 <Sys::eject(regs*)+0x32>
c0015190:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c0015197:	85 c9                	test   ecx,ecx
c0015199:	74 0d                	je     c00151a8 <Sys::eject(regs*)+0x32>
c001519b:	83 ec 0c             	sub    esp,0xc
c001519e:	51                   	push   ecx
c001519f:	e8 76 af ff ff       	call   c001011a <LogicalDisk::eject()>
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	99                   	cdq    
c00151a8:	83 c4 0c             	add    esp,0xc
c00151ab:	c3                   	ret    

c00151ac <Sys::exit(regs*)>:
c00151ac:	83 ec 18             	sub    esp,0x18
c00151af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151b6:	e8 59 36 00 00       	call   c0018814 <terminateTask(int)>
c00151bb:	83 c8 ff             	or     eax,0xffffffff
c00151be:	83 c4 1c             	add    esp,0x1c
c00151c1:	89 c2                	mov    edx,eax
c00151c3:	c3                   	ret    

c00151c4 <Sys::getCwd(regs*)>:
c00151c4:	83 ec 10             	sub    esp,0x10
c00151c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151cb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151d9:	e8 f6 7b ff ff       	call   c000cdd4 <Fs::getcwd(Process*, char*, int)>
c00151de:	83 c4 1c             	add    esp,0x1c
c00151e1:	99                   	cdq    
c00151e2:	c3                   	ret    

c00151e3 <Sys::getPID(regs*)>:
c00151e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ed:	99                   	cdq    
c00151ee:	c3                   	ret    

c00151ef <Sys::getRAMData(regs*)>:
c00151ef:	8b 0d 14 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026414
c00151f5:	69 05 10 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026410,0xc8
c00151ff:	99                   	cdq    
c0015200:	f7 f9                	idiv   ecx
c0015202:	c1 e0 18             	shl    eax,0x18
c0015205:	09 c8                	or     eax,ecx
c0015207:	99                   	cdq    
c0015208:	c3                   	ret    

c0015209 <Sys::getVGAPtr(regs*)>:
c0015209:	55                   	push   ebp
c001520a:	57                   	push   edi
c001520b:	56                   	push   esi
c001520c:	53                   	push   ebx
c001520d:	83 ec 18             	sub    esp,0x18
c0015210:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015214:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015217:	e8 fc 30 00 00       	call   c0018318 <Thr::processFromPID(int)>
c001521c:	83 c4 10             	add    esp,0x10
c001521f:	89 c1                	mov    ecx,eax
c0015221:	b8 01 00 00 00       	mov    eax,0x1
c0015226:	85 c9                	test   ecx,ecx
c0015228:	74 59                	je     c0015283 <Sys::getVGAPtr(regs*)+0x7a>
c001522a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015230:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015234:	74 0c                	je     c0015242 <Sys::getVGAPtr(regs*)+0x39>
c0015236:	83 ec 0c             	sub    esp,0xc
c0015239:	53                   	push   ebx
c001523a:	e8 86 55 ff ff       	call   c000a7c5 <setActiveTerminal(VgaText*)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015245:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015248:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001524d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001524f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015252:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015255:	81 c3 82 00 00 00    	add    ebx,0x82
c001525b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015261:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015264:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015267:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001526d:	50                   	push   eax
c001526e:	50                   	push   eax
c001526f:	53                   	push   ebx
c0015270:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015273:	05 a8 0f 00 00       	add    eax,0xfa8
c0015278:	50                   	push   eax
c0015279:	e8 c2 b4 fe ff       	call   c0000740 <strcpy>
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	31 c0                	xor    eax,eax
c0015283:	83 c4 0c             	add    esp,0xc
c0015286:	31 d2                	xor    edx,edx
c0015288:	5b                   	pop    ebx
c0015289:	5e                   	pop    esi
c001528a:	5f                   	pop    edi
c001528b:	5d                   	pop    ebp
c001528c:	c3                   	ret    

c001528d <Sys::loadDLL(regs*)>:
c001528d:	56                   	push   esi
c001528e:	53                   	push   ebx
c001528f:	31 d2                	xor    edx,edx
c0015291:	51                   	push   ecx
c0015292:	b8 01 00 00 00       	mov    eax,0x1
c0015297:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001529b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001529f:	0f 84 8c 00 00 00    	je     c0015331 <Sys::loadDLL(regs*)+0xa4>
c00152a5:	83 ec 0c             	sub    esp,0xc
c00152a8:	68 14 01 00 00       	push   0x114
c00152ad:	e8 11 47 ff ff       	call   c00099c3 <malloc>
c00152b2:	83 c4 0c             	add    esp,0xc
c00152b5:	89 c3                	mov    ebx,eax
c00152b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152bc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00152bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152c2:	53                   	push   ebx
c00152c3:	e8 0a 7d ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	31 d2                	xor    edx,edx
c00152cd:	b8 02 00 00 00       	mov    eax,0x2
c00152d2:	85 db                	test   ebx,ebx
c00152d4:	74 5b                	je     c0015331 <Sys::loadDLL(regs*)+0xa4>
c00152d6:	83 ec 0c             	sub    esp,0xc
c00152d9:	53                   	push   ebx
c00152da:	e8 c5 7f ff ff       	call   c000d2a4 <File::exists()>
c00152df:	83 c4 10             	add    esp,0x10
c00152e2:	84 c0                	test   al,al
c00152e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152e6:	75 11                	jne    c00152f9 <Sys::loadDLL(regs*)+0x6c>
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	53                   	push   ebx
c00152ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152ef:	83 c4 10             	add    esp,0x10
c00152f2:	b8 03 00 00 00       	mov    eax,0x3
c00152f7:	eb 36                	jmp    c001532f <Sys::loadDLL(regs*)+0xa2>
c00152f9:	83 ec 0c             	sub    esp,0xc
c00152fc:	53                   	push   ebx
c00152fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015300:	58                   	pop    eax
c0015301:	5a                   	pop    edx
c0015302:	6a 00                	push   0x0
c0015304:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015307:	e8 0a 22 00 00       	call   c0017516 <Thr::loadDLL(char const*, bool)>
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	89 c1                	mov    ecx,eax
c0015311:	31 d2                	xor    edx,edx
c0015313:	b8 04 00 00 00       	mov    eax,0x4
c0015318:	85 c9                	test   ecx,ecx
c001531a:	74 15                	je     c0015331 <Sys::loadDLL(regs*)+0xa4>
c001531c:	53                   	push   ebx
c001531d:	53                   	push   ebx
c001531e:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c0015324:	51                   	push   ecx
c0015325:	e8 1d 24 00 00       	call   c0017747 <Thr::executeDLL(unsigned long, void*)>
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	31 c0                	xor    eax,eax
c001532f:	31 d2                	xor    edx,edx
c0015331:	59                   	pop    ecx
c0015332:	5b                   	pop    ebx
c0015333:	5e                   	pop    esi
c0015334:	c3                   	ret    

c0015335 <Sys::read(regs*)>:
c0015335:	57                   	push   edi
c0015336:	56                   	push   esi
c0015337:	53                   	push   ebx
c0015338:	83 ec 10             	sub    esp,0x10
c001533b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001533f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015342:	83 f8 02             	cmp    eax,0x2
c0015345:	77 10                	ja     c0015357 <Sys::read(regs*)+0x22>
c0015347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001534c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001534f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015355:	eb 0e                	jmp    c0015365 <Sys::read(regs*)+0x30>
c0015357:	83 ec 0c             	sub    esp,0xc
c001535a:	50                   	push   eax
c001535b:	e8 df 61 ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015360:	83 c4 10             	add    esp,0x10
c0015363:	89 c1                	mov    ecx,eax
c0015365:	83 c8 ff             	or     eax,0xffffffff
c0015368:	85 c9                	test   ecx,ecx
c001536a:	89 c2                	mov    edx,eax
c001536c:	74 28                	je     c0015396 <Sys::read(regs*)+0x61>
c001536e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015376:	31 ff                	xor    edi,edi
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001537d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015381:	52                   	push   edx
c0015382:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015385:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015388:	57                   	push   edi
c0015389:	56                   	push   esi
c001538a:	51                   	push   ecx
c001538b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001538e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015392:	83 c4 20             	add    esp,0x20
c0015395:	99                   	cdq    
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	5b                   	pop    ebx
c001539a:	5e                   	pop    esi
c001539b:	5f                   	pop    edi
c001539c:	c3                   	ret    

c001539d <Sys::sbrk(regs*)>:
c001539d:	56                   	push   esi
c001539e:	53                   	push   ebx
c001539f:	50                   	push   eax
c00153a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ac:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00153af:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00153b5:	85 db                	test   ebx,ebx
c00153b7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00153ba:	74 02                	je     c00153be <Sys::sbrk(regs*)+0x21>
c00153bc:	79 06                	jns    c00153c4 <Sys::sbrk(regs*)+0x27>
c00153be:	89 f0                	mov    eax,esi
c00153c0:	31 d2                	xor    edx,edx
c00153c2:	eb 2a                	jmp    c00153ee <Sys::sbrk(regs*)+0x51>
c00153c4:	83 c8 ff             	or     eax,0xffffffff
c00153c7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153cd:	89 c2                	mov    edx,eax
c00153cf:	77 1d                	ja     c00153ee <Sys::sbrk(regs*)+0x51>
c00153d1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153d7:	50                   	push   eax
c00153d8:	c1 ea 0c             	shr    edx,0xc
c00153db:	68 07 0c 00 00       	push   0xc07
c00153e0:	52                   	push   edx
c00153e1:	51                   	push   ecx
c00153e2:	e8 57 6a ff ff       	call   c000be3e <VAS::allocatePages(int, int)>
c00153e7:	89 f0                	mov    eax,esi
c00153e9:	31 d2                	xor    edx,edx
c00153eb:	83 c4 10             	add    esp,0x10
c00153ee:	59                   	pop    ecx
c00153ef:	5b                   	pop    ebx
c00153f0:	5e                   	pop    esi
c00153f1:	c3                   	ret    

c00153f2 <Sys::setCwd(regs*)>:
c00153f2:	83 ec 14             	sub    esp,0x14
c00153f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015401:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015404:	e8 3a 7f ff ff       	call   c000d343 <Fs::setcwd(Process*, char*)>
c0015409:	83 c4 1c             	add    esp,0x1c
c001540c:	99                   	cdq    
c001540d:	c3                   	ret    

c001540e <Sys::setTime(regs*)>:
c001540e:	55                   	push   ebp
c001540f:	31 c9                	xor    ecx,ecx
c0015411:	57                   	push   edi
c0015412:	bd 0c 00 00 00       	mov    ebp,0xc
c0015417:	56                   	push   esi
c0015418:	53                   	push   ebx
c0015419:	31 db                	xor    ebx,ebx
c001541b:	83 ec 10             	sub    esp,0x10
c001541e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015422:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015425:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015428:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001542b:	89 c2                	mov    edx,eax
c001542d:	66 81 ef 6c 07       	sub    di,0x76c
c0015432:	83 e2 1f             	and    edx,0x1f
c0015435:	c1 e7 10             	shl    edi,0x10
c0015438:	42                   	inc    edx
c0015439:	c1 e8 05             	shr    eax,0x5
c001543c:	88 d1                	mov    cl,dl
c001543e:	31 d2                	xor    edx,edx
c0015440:	f7 f5                	div    ebp
c0015442:	89 dd                	mov    ebp,ebx
c0015444:	88 d5                	mov    ch,dl
c0015446:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001544c:	0f b7 c1             	movzx  eax,cx
c001544f:	31 d2                	xor    edx,edx
c0015451:	09 f8                	or     eax,edi
c0015453:	bf 3c 00 00 00       	mov    edi,0x3c
c0015458:	89 c1                	mov    ecx,eax
c001545a:	89 f0                	mov    eax,esi
c001545c:	f7 f7                	div    edi
c001545e:	c1 e2 10             	shl    edx,0x10
c0015461:	09 d5                	or     ebp,edx
c0015463:	31 d2                	xor    edx,edx
c0015465:	89 eb                	mov    ebx,ebp
c0015467:	f7 f7                	div    edi
c0015469:	bf 10 0e 00 00       	mov    edi,0xe10
c001546e:	88 d7                	mov    bh,dl
c0015470:	89 f0                	mov    eax,esi
c0015472:	31 d2                	xor    edx,edx
c0015474:	f7 f7                	div    edi
c0015476:	bf 18 00 00 00       	mov    edi,0x18
c001547b:	31 d2                	xor    edx,edx
c001547d:	f7 f7                	div    edi
c001547f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0015484:	88 d3                	mov    bl,dl
c0015486:	53                   	push   ebx
c0015487:	51                   	push   ecx
c0015488:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001548e:	e8 fb 86 ff ff       	call   c000db8e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015493:	83 c4 1c             	add    esp,0x1c
c0015496:	83 f0 01             	xor    eax,0x1
c0015499:	5b                   	pop    ebx
c001549a:	0f b6 c0             	movzx  eax,al
c001549d:	5e                   	pop    esi
c001549e:	31 d2                	xor    edx,edx
c00154a0:	5f                   	pop    edi
c00154a1:	5d                   	pop    ebp
c00154a2:	c3                   	ret    

c00154a3 <Sys::timezone(regs*)>:
c00154a3:	53                   	push   ebx
c00154a4:	83 ec 08             	sub    esp,0x8
c00154a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154ab:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00154af:	75 17                	jne    c00154c8 <Sys::timezone(regs*)+0x25>
c00154b1:	83 ec 0c             	sub    esp,0xc
c00154b4:	68 e9 44 02 c0       	push   0xc00244e9
c00154b9:	e8 a9 75 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00154be:	83 c8 ff             	or     eax,0xffffffff
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	89 c2                	mov    edx,eax
c00154c6:	eb 20                	jmp    c00154e8 <Sys::timezone(regs*)+0x45>
c00154c8:	83 ec 0c             	sub    esp,0xc
c00154cb:	68 fe 44 02 c0       	push   0xc00244fe
c00154d0:	e8 92 75 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00154d5:	58                   	pop    eax
c00154d6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154d9:	e8 12 84 ff ff       	call   c000d8f0 <User::loadClockSettings(int)>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	b8 01 00 00 00       	mov    eax,0x1
c00154e6:	31 d2                	xor    edx,edx
c00154e8:	83 c4 08             	add    esp,0x8
c00154eb:	5b                   	pop    ebx
c00154ec:	c3                   	ret    

c00154ed <Sys::write(regs*)>:
c00154ed:	57                   	push   edi
c00154ee:	56                   	push   esi
c00154ef:	53                   	push   ebx
c00154f0:	83 ec 10             	sub    esp,0x10
c00154f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154fa:	83 f8 02             	cmp    eax,0x2
c00154fd:	77 10                	ja     c001550f <Sys::write(regs*)+0x22>
c00154ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015504:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015507:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001550d:	eb 0e                	jmp    c001551d <Sys::write(regs*)+0x30>
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	50                   	push   eax
c0015513:	e8 27 60 ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	89 c1                	mov    ecx,eax
c001551d:	83 c8 ff             	or     eax,0xffffffff
c0015520:	85 c9                	test   ecx,ecx
c0015522:	89 c2                	mov    edx,eax
c0015524:	74 28                	je     c001554e <Sys::write(regs*)+0x61>
c0015526:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001552e:	31 ff                	xor    edi,edi
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015535:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015539:	52                   	push   edx
c001553a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001553d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015540:	57                   	push   edi
c0015541:	56                   	push   esi
c0015542:	51                   	push   ecx
c0015543:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015546:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001554a:	83 c4 20             	add    esp,0x20
c001554d:	99                   	cdq    
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	5b                   	pop    ebx
c0015552:	5e                   	pop    esi
c0015553:	5f                   	pop    edi
c0015554:	c3                   	ret    

c0015555 <Sys::wsbe(regs*)>:
c0015555:	57                   	push   edi
c0015556:	b9 0b 00 00 00       	mov    ecx,0xb
c001555b:	56                   	push   esi
c001555c:	be 3d 45 02 c0       	mov    esi,0xc002453d
c0015561:	53                   	push   ebx
c0015562:	83 ec 30             	sub    esp,0x30
c0015565:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015569:	fc                   	cld    
c001556a:	83 ec 0c             	sub    esp,0xc
c001556d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001556f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015573:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015578:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001557b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015581:	8b 06                	mov    eax,DWORD PTR [esi]
c0015583:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015586:	57                   	push   edi
c0015587:	e8 14 b1 fe ff       	call   c00006a0 <strlen>
c001558c:	5a                   	pop    edx
c001558d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015591:	52                   	push   edx
c0015592:	31 d2                	xor    edx,edx
c0015594:	57                   	push   edi
c0015595:	52                   	push   edx
c0015596:	50                   	push   eax
c0015597:	56                   	push   esi
c0015598:	ff d3                	call   ebx
c001559a:	83 c4 14             	add    esp,0x14
c001559d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155a1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00155a4:	e8 6b 32 00 00       	call   c0018814 <terminateTask(int)>
c00155a9:	83 c4 40             	add    esp,0x40
c00155ac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00155b1:	5b                   	pop    ebx
c00155b2:	31 d2                	xor    edx,edx
c00155b4:	5e                   	pop    esi
c00155b5:	5f                   	pop    edi
c00155b6:	c3                   	ret    

c00155b7 <Sys::yield(regs*)>:
c00155b7:	83 ec 0c             	sub    esp,0xc
c00155ba:	fa                   	cli    
c00155bb:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00155c1:	e8 36 29 00 00       	call   c0017efc <schedule()>
c00155c6:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00155cb:	48                   	dec    eax
c00155cc:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00155d1:	75 01                	jne    c00155d4 <Sys::yield(regs*)+0x1d>
c00155d3:	fb                   	sti    
c00155d4:	8b 15 2c 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a2c
c00155da:	83 c4 0c             	add    esp,0xc
c00155dd:	89 d0                	mov    eax,edx
c00155df:	c1 ea 11             	shr    edx,0x11
c00155e2:	c1 e0 07             	shl    eax,0x7
c00155e5:	25 80 30 0f 00       	and    eax,0xf3080
c00155ea:	31 d0                	xor    eax,edx
c00155ec:	31 d2                	xor    edx,edx
c00155ee:	c3                   	ret    

c00155ef <sysCallSeekDir(regs*)>:
c00155ef:	31 c0                	xor    eax,eax
c00155f1:	31 d2                	xor    edx,edx
c00155f3:	c3                   	ret    

c00155f4 <sysCallTellDir(regs*)>:
c00155f4:	31 c0                	xor    eax,eax
c00155f6:	31 d2                	xor    edx,edx
c00155f8:	c3                   	ret    

c00155f9 <sysCallVerify(regs*)>:
c00155f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155fd:	31 d2                	xor    edx,edx
c00155ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015602:	c3                   	ret    

c0015603 <sysCallGetArgc(regs*)>:
c0015603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015608:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001560b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015611:	99                   	cdq    
c0015612:	c3                   	ret    

c0015613 <sysFormatDisk(regs*)>:
c0015613:	56                   	push   esi
c0015614:	53                   	push   ebx
c0015615:	53                   	push   ebx
c0015616:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001561a:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c0015620:	eb 25                	jmp    c0015647 <sysFormatDisk(regs*)+0x34>
c0015622:	83 ec 0c             	sub    esp,0xc
c0015625:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015628:	8b 13                	mov    edx,DWORD PTR [ebx]
c001562a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001562d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015630:	50                   	push   eax
c0015631:	ff 34 85 c0 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd9640]
c0015638:	53                   	push   ebx
c0015639:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001563c:	83 c4 20             	add    esp,0x20
c001563f:	83 f8 08             	cmp    eax,0x8
c0015642:	75 12                	jne    c0015656 <sysFormatDisk(regs*)+0x43>
c0015644:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015647:	85 db                	test   ebx,ebx
c0015649:	75 d7                	jne    c0015622 <sysFormatDisk(regs*)+0xf>
c001564b:	59                   	pop    ecx
c001564c:	b8 03 00 00 00       	mov    eax,0x3
c0015651:	31 d2                	xor    edx,edx
c0015653:	5b                   	pop    ebx
c0015654:	5e                   	pop    esi
c0015655:	c3                   	ret    
c0015656:	85 c0                	test   eax,eax
c0015658:	74 1b                	je     c0015675 <sysFormatDisk(regs*)+0x62>
c001565a:	83 f8 09             	cmp    eax,0x9
c001565d:	74 0b                	je     c001566a <sysFormatDisk(regs*)+0x57>
c001565f:	59                   	pop    ecx
c0015660:	b8 02 00 00 00       	mov    eax,0x2
c0015665:	31 d2                	xor    edx,edx
c0015667:	5b                   	pop    ebx
c0015668:	5e                   	pop    esi
c0015669:	c3                   	ret    
c001566a:	59                   	pop    ecx
c001566b:	b8 01 00 00 00       	mov    eax,0x1
c0015670:	31 d2                	xor    edx,edx
c0015672:	5b                   	pop    ebx
c0015673:	5e                   	pop    esi
c0015674:	c3                   	ret    
c0015675:	59                   	pop    ecx
c0015676:	31 c0                	xor    eax,eax
c0015678:	31 d2                	xor    edx,edx
c001567a:	5b                   	pop    ebx
c001567b:	5e                   	pop    esi
c001567c:	c3                   	ret    

c001567d <sysSetDiskVolumeLabel(regs*)>:
c001567d:	56                   	push   esi
c001567e:	53                   	push   ebx
c001567f:	53                   	push   ebx
c0015680:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015684:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015687:	83 f8 19             	cmp    eax,0x19
c001568a:	77 2d                	ja     c00156b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001568c:	8b 0c 85 c0 69 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9640]
c0015693:	85 c9                	test   ecx,ecx
c0015695:	74 22                	je     c00156b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015697:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001569a:	85 db                	test   ebx,ebx
c001569c:	74 1b                	je     c00156b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001569e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00156a4:	85 d2                	test   edx,edx
c00156a6:	74 11                	je     c00156b9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156a8:	8b 32                	mov    esi,DWORD PTR [edx]
c00156aa:	53                   	push   ebx
c00156ab:	50                   	push   eax
c00156ac:	51                   	push   ecx
c00156ad:	52                   	push   edx
c00156ae:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	99                   	cdq    
c00156b5:	59                   	pop    ecx
c00156b6:	5b                   	pop    ebx
c00156b7:	5e                   	pop    esi
c00156b8:	c3                   	ret    
c00156b9:	59                   	pop    ecx
c00156ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156c4:	5b                   	pop    ebx
c00156c5:	5e                   	pop    esi
c00156c6:	c3                   	ret    

c00156c7 <sysGetDiskVolumeLabel(regs*)>:
c00156c7:	57                   	push   edi
c00156c8:	56                   	push   esi
c00156c9:	53                   	push   ebx
c00156ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156d1:	83 fa 19             	cmp    edx,0x19
c00156d4:	77 38                	ja     c001570e <sysGetDiskVolumeLabel(regs*)+0x47>
c00156d6:	8b 0c 95 c0 69 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9640]
c00156dd:	85 c9                	test   ecx,ecx
c00156df:	74 2d                	je     c001570e <sysGetDiskVolumeLabel(regs*)+0x47>
c00156e1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156e4:	85 db                	test   ebx,ebx
c00156e6:	74 26                	je     c001570e <sysGetDiskVolumeLabel(regs*)+0x47>
c00156e8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156eb:	85 f6                	test   esi,esi
c00156ed:	74 1f                	je     c001570e <sysGetDiskVolumeLabel(regs*)+0x47>
c00156ef:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156f5:	85 c0                	test   eax,eax
c00156f7:	74 15                	je     c001570e <sysGetDiskVolumeLabel(regs*)+0x47>
c00156f9:	83 ec 0c             	sub    esp,0xc
c00156fc:	8b 38                	mov    edi,DWORD PTR [eax]
c00156fe:	56                   	push   esi
c00156ff:	53                   	push   ebx
c0015700:	52                   	push   edx
c0015701:	51                   	push   ecx
c0015702:	50                   	push   eax
c0015703:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015706:	83 c4 20             	add    esp,0x20
c0015709:	99                   	cdq    
c001570a:	5b                   	pop    ebx
c001570b:	5e                   	pop    esi
c001570c:	5f                   	pop    edi
c001570d:	c3                   	ret    
c001570e:	5b                   	pop    ebx
c001570f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015714:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015719:	5e                   	pop    esi
c001571a:	5f                   	pop    edi
c001571b:	c3                   	ret    

c001571c <sysShutdown(regs*)>:
c001571c:	83 ec 0c             	sub    esp,0xc
c001571f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015723:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015726:	85 c0                	test   eax,eax
c0015728:	74 18                	je     c0015742 <sysShutdown(regs*)+0x26>
c001572a:	83 f8 01             	cmp    eax,0x1
c001572d:	74 38                	je     c0015767 <sysShutdown(regs*)+0x4b>
c001572f:	83 f8 02             	cmp    eax,0x2
c0015732:	74 24                	je     c0015758 <sysShutdown(regs*)+0x3c>
c0015734:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015739:	ba ff ff ff ff       	mov    edx,0xffffffff
c001573e:	83 c4 0c             	add    esp,0xc
c0015741:	c3                   	ret    
c0015742:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0015747:	8b 10                	mov    edx,DWORD PTR [eax]
c0015749:	6a 00                	push   0x0
c001574b:	6a 00                	push   0x0
c001574d:	6a 00                	push   0x0
c001574f:	50                   	push   eax
c0015750:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015753:	83 c4 10             	add    esp,0x10
c0015756:	eb dc                	jmp    c0015734 <sysShutdown(regs*)+0x18>
c0015758:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001575d:	8b 10                	mov    edx,DWORD PTR [eax]
c001575f:	6a 00                	push   0x0
c0015761:	6a 00                	push   0x0
c0015763:	6a 01                	push   0x1
c0015765:	eb e8                	jmp    c001574f <sysShutdown(regs*)+0x33>
c0015767:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c001576c:	85 c0                	test   eax,eax
c001576e:	74 02                	je     c0015772 <sysShutdown(regs*)+0x56>
c0015770:	ff d0                	call   eax
c0015772:	31 c0                	xor    eax,eax
c0015774:	31 d2                	xor    edx,edx
c0015776:	83 c4 0c             	add    esp,0xc
c0015779:	c3                   	ret    

c001577a <sysCallRealpath(regs*)>:
c001577a:	83 ec 0c             	sub    esp,0xc
c001577d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015781:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015784:	85 d2                	test   edx,edx
c0015786:	74 07                	je     c001578f <sysCallRealpath(regs*)+0x15>
c0015788:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001578b:	85 c0                	test   eax,eax
c001578d:	75 0b                	jne    c001579a <sysCallRealpath(regs*)+0x20>
c001578f:	b8 01 00 00 00       	mov    eax,0x1
c0015794:	31 d2                	xor    edx,edx
c0015796:	83 c4 0c             	add    esp,0xc
c0015799:	c3                   	ret    
c001579a:	51                   	push   ecx
c001579b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157a1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00157a4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00157aa:	51                   	push   ecx
c00157ab:	52                   	push   edx
c00157ac:	50                   	push   eax
c00157ad:	e8 76 76 ff ff       	call   c000ce28 <Fs::standardiseFiles(char*, char const*, char const*)>
c00157b2:	83 c4 10             	add    esp,0x10
c00157b5:	31 c0                	xor    eax,eax
c00157b7:	31 d2                	xor    edx,edx
c00157b9:	83 c4 0c             	add    esp,0xc
c00157bc:	c3                   	ret    

c00157bd <sysCallReadDir(regs*)>:
c00157bd:	53                   	push   ebx
c00157be:	83 ec 18             	sub    esp,0x18
c00157c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157c8:	83 f8 02             	cmp    eax,0x2
c00157cb:	76 60                	jbe    c001582d <sysCallReadDir(regs*)+0x70>
c00157cd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157d4:	77 48                	ja     c001581e <sysCallReadDir(regs*)+0x61>
c00157d6:	83 ec 0c             	sub    esp,0xc
c00157d9:	50                   	push   eax
c00157da:	e8 60 5d ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c00157df:	83 c4 10             	add    esp,0x10
c00157e2:	85 c0                	test   eax,eax
c00157e4:	74 38                	je     c001581e <sysCallReadDir(regs*)+0x61>
c00157e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157ee:	83 ec 0c             	sub    esp,0xc
c00157f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00157f3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157f7:	51                   	push   ecx
c00157f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157fb:	6a 00                	push   0x0
c00157fd:	68 10 01 00 00       	push   0x110
c0015802:	50                   	push   eax
c0015803:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015806:	83 c4 20             	add    esp,0x20
c0015809:	85 c0                	test   eax,eax
c001580b:	74 29                	je     c0015836 <sysCallReadDir(regs*)+0x79>
c001580d:	83 f8 07             	cmp    eax,0x7
c0015810:	74 1b                	je     c001582d <sysCallReadDir(regs*)+0x70>
c0015812:	b8 02 00 00 00       	mov    eax,0x2
c0015817:	31 d2                	xor    edx,edx
c0015819:	83 c4 18             	add    esp,0x18
c001581c:	5b                   	pop    ebx
c001581d:	c3                   	ret    
c001581e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015823:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015828:	83 c4 18             	add    esp,0x18
c001582b:	5b                   	pop    ebx
c001582c:	c3                   	ret    
c001582d:	b8 01 00 00 00       	mov    eax,0x1
c0015832:	31 d2                	xor    edx,edx
c0015834:	eb e3                	jmp    c0015819 <sysCallReadDir(regs*)+0x5c>
c0015836:	31 c0                	xor    eax,eax
c0015838:	31 d2                	xor    edx,edx
c001583a:	eb dd                	jmp    c0015819 <sysCallReadDir(regs*)+0x5c>

c001583c <sysCallIsATTY(regs*)>:
c001583c:	83 ec 0c             	sub    esp,0xc
c001583f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015843:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015846:	83 f8 02             	cmp    eax,0x2
c0015849:	76 07                	jbe    c0015852 <sysCallIsATTY(regs*)+0x16>
c001584b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015850:	75 26                	jne    c0015878 <sysCallIsATTY(regs*)+0x3c>
c0015852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015857:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015860:	85 c0                	test   eax,eax
c0015862:	74 24                	je     c0015888 <sysCallIsATTY(regs*)+0x4c>
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	8b 10                	mov    edx,DWORD PTR [eax]
c0015869:	50                   	push   eax
c001586a:	ff 12                	call   DWORD PTR [edx]
c001586c:	31 d2                	xor    edx,edx
c001586e:	0f b6 c0             	movzx  eax,al
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	83 c4 0c             	add    esp,0xc
c0015877:	c3                   	ret    
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	50                   	push   eax
c001587c:	e8 be 5c ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	85 c0                	test   eax,eax
c0015886:	75 dc                	jne    c0015864 <sysCallIsATTY(regs*)+0x28>
c0015888:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001588d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015892:	83 c4 0c             	add    esp,0xc
c0015895:	c3                   	ret    

c0015896 <sysCallSeek(regs*)>:
c0015896:	53                   	push   ebx
c0015897:	83 ec 08             	sub    esp,0x8
c001589a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001589e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158a1:	8d 50 fd             	lea    edx,[eax-0x3]
c00158a4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00158aa:	77 32                	ja     c00158de <sysCallSeek(regs*)+0x48>
c00158ac:	83 ec 0c             	sub    esp,0xc
c00158af:	50                   	push   eax
c00158b0:	e8 8a 5c ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c00158b5:	83 c4 0c             	add    esp,0xc
c00158b8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00158bb:	31 db                	xor    ebx,ebx
c00158bd:	53                   	push   ebx
c00158be:	51                   	push   ecx
c00158bf:	50                   	push   eax
c00158c0:	e8 2f 78 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c00158c5:	83 c4 10             	add    esp,0x10
c00158c8:	85 c0                	test   eax,eax
c00158ca:	0f 95 c0             	setne  al
c00158cd:	31 d2                	xor    edx,edx
c00158cf:	0f b6 c0             	movzx  eax,al
c00158d2:	f7 d8                	neg    eax
c00158d4:	83 d2 00             	adc    edx,0x0
c00158d7:	83 c4 08             	add    esp,0x8
c00158da:	f7 da                	neg    edx
c00158dc:	5b                   	pop    ebx
c00158dd:	c3                   	ret    
c00158de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158e8:	83 c4 08             	add    esp,0x8
c00158eb:	5b                   	pop    ebx
c00158ec:	c3                   	ret    

c00158ed <sysCallTell(regs*)>:
c00158ed:	53                   	push   ebx
c00158ee:	83 ec 08             	sub    esp,0x8
c00158f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158f8:	83 f8 02             	cmp    eax,0x2
c00158fb:	76 4d                	jbe    c001594a <sysCallTell(regs*)+0x5d>
c00158fd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015902:	76 19                	jbe    c001591d <sysCallTell(regs*)+0x30>
c0015904:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015907:	31 d2                	xor    edx,edx
c0015909:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001590f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015916:	31 c0                	xor    eax,eax
c0015918:	83 c4 08             	add    esp,0x8
c001591b:	5b                   	pop    ebx
c001591c:	c3                   	ret    
c001591d:	83 ec 0c             	sub    esp,0xc
c0015920:	50                   	push   eax
c0015921:	e8 19 5c ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015926:	5a                   	pop    edx
c0015927:	59                   	pop    ecx
c0015928:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001592b:	50                   	push   eax
c001592c:	e8 19 78 ff ff       	call   c000d14a <File::tell(unsigned long long*)>
c0015931:	83 c4 10             	add    esp,0x10
c0015934:	85 c0                	test   eax,eax
c0015936:	0f 95 c0             	setne  al
c0015939:	31 d2                	xor    edx,edx
c001593b:	0f b6 c0             	movzx  eax,al
c001593e:	f7 d8                	neg    eax
c0015940:	83 d2 00             	adc    edx,0x0
c0015943:	83 c4 08             	add    esp,0x8
c0015946:	f7 da                	neg    edx
c0015948:	5b                   	pop    ebx
c0015949:	c3                   	ret    
c001594a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001594f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015954:	83 c4 08             	add    esp,0x8
c0015957:	5b                   	pop    ebx
c0015958:	c3                   	ret    

c0015959 <sysCallSize(regs*)>:
c0015959:	53                   	push   ebx
c001595a:	83 ec 18             	sub    esp,0x18
c001595d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015961:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015964:	83 f8 02             	cmp    eax,0x2
c0015967:	76 53                	jbe    c00159bc <sysCallSize(regs*)+0x63>
c0015969:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001596e:	76 19                	jbe    c0015989 <sysCallSize(regs*)+0x30>
c0015970:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015973:	31 d2                	xor    edx,edx
c0015975:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001597b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015982:	31 c0                	xor    eax,eax
c0015984:	83 c4 18             	add    esp,0x18
c0015987:	5b                   	pop    ebx
c0015988:	c3                   	ret    
c0015989:	83 ec 0c             	sub    esp,0xc
c001598c:	50                   	push   eax
c001598d:	e8 ad 5b ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015992:	83 c4 0c             	add    esp,0xc
c0015995:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015999:	52                   	push   edx
c001599a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001599d:	50                   	push   eax
c001599e:	e8 3f 79 ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c00159a3:	83 c4 10             	add    esp,0x10
c00159a6:	85 c0                	test   eax,eax
c00159a8:	0f 95 c0             	setne  al
c00159ab:	31 d2                	xor    edx,edx
c00159ad:	0f b6 c0             	movzx  eax,al
c00159b0:	f7 d8                	neg    eax
c00159b2:	83 d2 00             	adc    edx,0x0
c00159b5:	83 c4 18             	add    esp,0x18
c00159b8:	f7 da                	neg    edx
c00159ba:	5b                   	pop    ebx
c00159bb:	c3                   	ret    
c00159bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159c6:	83 c4 18             	add    esp,0x18
c00159c9:	5b                   	pop    ebx
c00159ca:	c3                   	ret    

c00159cb <sysCallSizeFromFilename(regs*)>:
c00159cb:	57                   	push   edi
c00159cc:	56                   	push   esi
c00159cd:	53                   	push   ebx
c00159ce:	83 ec 20             	sub    esp,0x20
c00159d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159d5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159d8:	83 fb 02             	cmp    ebx,0x2
c00159db:	0f 86 88 00 00 00    	jbe    c0015a69 <sysCallSizeFromFilename(regs*)+0x9e>
c00159e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159e7:	76 1b                	jbe    c0015a04 <sysCallSizeFromFilename(regs*)+0x39>
c00159e9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159ec:	31 d2                	xor    edx,edx
c00159ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159fb:	83 c4 20             	add    esp,0x20
c00159fe:	31 c0                	xor    eax,eax
c0015a00:	5b                   	pop    ebx
c0015a01:	5e                   	pop    esi
c0015a02:	5f                   	pop    edi
c0015a03:	c3                   	ret    
c0015a04:	83 ec 0c             	sub    esp,0xc
c0015a07:	68 14 01 00 00       	push   0x114
c0015a0c:	e8 b2 3f ff ff       	call   c00099c3 <malloc>
c0015a11:	83 c4 0c             	add    esp,0xc
c0015a14:	89 c7                	mov    edi,eax
c0015a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a1b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a1e:	53                   	push   ebx
c0015a1f:	57                   	push   edi
c0015a20:	e8 ad 75 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0015a25:	83 c4 0c             	add    esp,0xc
c0015a28:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a2c:	50                   	push   eax
c0015a2d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a30:	57                   	push   edi
c0015a31:	e8 ac 78 ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c0015a36:	83 c4 10             	add    esp,0x10
c0015a39:	85 ff                	test   edi,edi
c0015a3b:	74 14                	je     c0015a51 <sysCallSizeFromFilename(regs*)+0x86>
c0015a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a41:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a43:	83 ec 0c             	sub    esp,0xc
c0015a46:	57                   	push   edi
c0015a47:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a51:	85 c0                	test   eax,eax
c0015a53:	0f 95 c0             	setne  al
c0015a56:	31 d2                	xor    edx,edx
c0015a58:	0f b6 c0             	movzx  eax,al
c0015a5b:	f7 d8                	neg    eax
c0015a5d:	83 d2 00             	adc    edx,0x0
c0015a60:	83 c4 20             	add    esp,0x20
c0015a63:	f7 da                	neg    edx
c0015a65:	5b                   	pop    ebx
c0015a66:	5e                   	pop    esi
c0015a67:	5f                   	pop    edi
c0015a68:	c3                   	ret    
c0015a69:	83 c4 20             	add    esp,0x20
c0015a6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a71:	5b                   	pop    ebx
c0015a72:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a77:	5e                   	pop    esi
c0015a78:	5f                   	pop    edi
c0015a79:	c3                   	ret    

c0015a7a <sysCallClose(regs*)>:
c0015a7a:	53                   	push   ebx
c0015a7b:	83 ec 08             	sub    esp,0x8
c0015a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a85:	83 f8 02             	cmp    eax,0x2
c0015a88:	76 41                	jbe    c0015acb <sysCallClose(regs*)+0x51>
c0015a8a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a90:	83 fa 01             	cmp    edx,0x1
c0015a93:	76 2d                	jbe    c0015ac2 <sysCallClose(regs*)+0x48>
c0015a95:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a9a:	77 2f                	ja     c0015acb <sysCallClose(regs*)+0x51>
c0015a9c:	83 ec 0c             	sub    esp,0xc
c0015a9f:	50                   	push   eax
c0015aa0:	e8 9a 5a ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015aa5:	89 c3                	mov    ebx,eax
c0015aa7:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aaa:	e8 e5 75 ff ff       	call   c000d094 <File::close()>
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	85 db                	test   ebx,ebx
c0015ab4:	74 0c                	je     c0015ac2 <sysCallClose(regs*)+0x48>
c0015ab6:	83 ec 0c             	sub    esp,0xc
c0015ab9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015abb:	53                   	push   ebx
c0015abc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015abf:	83 c4 10             	add    esp,0x10
c0015ac2:	31 c0                	xor    eax,eax
c0015ac4:	31 d2                	xor    edx,edx
c0015ac6:	83 c4 08             	add    esp,0x8
c0015ac9:	5b                   	pop    ebx
c0015aca:	c3                   	ret    
c0015acb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ad0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ad5:	83 c4 08             	add    esp,0x8
c0015ad8:	5b                   	pop    ebx
c0015ad9:	c3                   	ret    

c0015ada <sysCallOpenDir(regs*)>:
c0015ada:	56                   	push   esi
c0015adb:	53                   	push   ebx
c0015adc:	53                   	push   ebx
c0015add:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ae1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ae4:	85 f6                	test   esi,esi
c0015ae6:	74 59                	je     c0015b41 <sysCallOpenDir(regs*)+0x67>
c0015ae8:	83 ec 0c             	sub    esp,0xc
c0015aeb:	68 14 01 00 00       	push   0x114
c0015af0:	e8 ce 3e ff ff       	call   c00099c3 <malloc>
c0015af5:	83 c4 0c             	add    esp,0xc
c0015af8:	89 c6                	mov    esi,eax
c0015afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aff:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b02:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b05:	56                   	push   esi
c0015b06:	e8 73 79 ff ff       	call   c000d47e <Directory::Directory(char const*, Process*)>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	85 f6                	test   esi,esi
c0015b10:	74 2f                	je     c0015b41 <sysCallOpenDir(regs*)+0x67>
c0015b12:	83 ec 0c             	sub    esp,0xc
c0015b15:	56                   	push   esi
c0015b16:	e8 c7 79 ff ff       	call   c000d4e2 <Directory::open()>
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	85 c0                	test   eax,eax
c0015b20:	75 1f                	jne    c0015b41 <sysCallOpenDir(regs*)+0x67>
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	56                   	push   esi
c0015b26:	e8 1f 57 ff ff       	call   c000b24a <UnixFile::getFileDescriptor()>
c0015b2b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b2e:	83 c4 10             	add    esp,0x10
c0015b31:	89 02                	mov    DWORD PTR [edx],eax
c0015b33:	c1 f8 1f             	sar    eax,0x1f
c0015b36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b39:	31 c0                	xor    eax,eax
c0015b3b:	59                   	pop    ecx
c0015b3c:	31 d2                	xor    edx,edx
c0015b3e:	5b                   	pop    ebx
c0015b3f:	5e                   	pop    esi
c0015b40:	c3                   	ret    
c0015b41:	59                   	pop    ecx
c0015b42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b4c:	5b                   	pop    ebx
c0015b4d:	5e                   	pop    esi
c0015b4e:	c3                   	ret    

c0015b4f <sysCallCloseDir(regs*)>:
c0015b4f:	53                   	push   ebx
c0015b50:	83 ec 08             	sub    esp,0x8
c0015b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b5a:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b5d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b63:	77 2f                	ja     c0015b94 <sysCallCloseDir(regs*)+0x45>
c0015b65:	83 ec 0c             	sub    esp,0xc
c0015b68:	50                   	push   eax
c0015b69:	e8 d1 59 ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015b6e:	89 c3                	mov    ebx,eax
c0015b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b73:	e8 c6 79 ff ff       	call   c000d53e <Directory::close()>
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	85 db                	test   ebx,ebx
c0015b7d:	74 0c                	je     c0015b8b <sysCallCloseDir(regs*)+0x3c>
c0015b7f:	83 ec 0c             	sub    esp,0xc
c0015b82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b84:	53                   	push   ebx
c0015b85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	31 c0                	xor    eax,eax
c0015b8d:	31 d2                	xor    edx,edx
c0015b8f:	83 c4 08             	add    esp,0x8
c0015b92:	5b                   	pop    ebx
c0015b93:	c3                   	ret    
c0015b94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b9e:	83 c4 08             	add    esp,0x8
c0015ba1:	5b                   	pop    ebx
c0015ba2:	c3                   	ret    

c0015ba3 <sysCallMakeDir(regs*)>:
c0015ba3:	56                   	push   esi
c0015ba4:	53                   	push   ebx
c0015ba5:	83 ec 10             	sub    esp,0x10
c0015ba8:	68 14 01 00 00       	push   0x114
c0015bad:	e8 11 3e ff ff       	call   c00099c3 <malloc>
c0015bb2:	83 c4 0c             	add    esp,0xc
c0015bb5:	89 c3                	mov    ebx,eax
c0015bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bbc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bc3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015bc6:	53                   	push   ebx
c0015bc7:	e8 b2 78 ff ff       	call   c000d47e <Directory::Directory(char const*, Process*)>
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	85 db                	test   ebx,ebx
c0015bd1:	74 32                	je     c0015c05 <sysCallMakeDir(regs*)+0x62>
c0015bd3:	83 ec 0c             	sub    esp,0xc
c0015bd6:	53                   	push   ebx
c0015bd7:	e8 e6 7a ff ff       	call   c000d6c2 <Directory::create()>
c0015bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bdf:	89 c6                	mov    esi,eax
c0015be1:	e8 58 79 ff ff       	call   c000d53e <Directory::close()>
c0015be6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015be8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015beb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	31 c0                	xor    eax,eax
c0015bf3:	59                   	pop    ecx
c0015bf4:	85 f6                	test   esi,esi
c0015bf6:	5b                   	pop    ebx
c0015bf7:	0f 95 c0             	setne  al
c0015bfa:	5e                   	pop    esi
c0015bfb:	31 d2                	xor    edx,edx
c0015bfd:	f7 d8                	neg    eax
c0015bff:	83 d2 00             	adc    edx,0x0
c0015c02:	f7 da                	neg    edx
c0015c04:	c3                   	ret    
c0015c05:	59                   	pop    ecx
c0015c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c10:	5b                   	pop    ebx
c0015c11:	5e                   	pop    esi
c0015c12:	c3                   	ret    

c0015c13 <sysCallWait(regs*)>:
c0015c13:	83 ec 10             	sub    esp,0x10
c0015c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c1a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c1d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c20:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c23:	e8 fc 24 00 00       	call   c0018124 <waitTask(int, int*, int)>
c0015c28:	83 c4 1c             	add    esp,0x1c
c0015c2b:	99                   	cdq    
c0015c2c:	c3                   	ret    

c0015c2d <sysCallNotImpl(regs*)>:
c0015c2d:	83 ec 18             	sub    esp,0x18
c0015c30:	68 69 45 02 c0       	push   0xc0024569
c0015c35:	e8 ef e6 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0015c3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c44:	83 c4 1c             	add    esp,0x1c
c0015c47:	c3                   	ret    

c0015c48 <sysPanic(regs*)>:
c0015c48:	83 ec 18             	sub    esp,0x18
c0015c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c4f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c52:	e8 d2 e6 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0015c57:	b8 01 00 00 00       	mov    eax,0x1
c0015c5c:	31 d2                	xor    edx,edx
c0015c5e:	83 c4 1c             	add    esp,0x1c
c0015c61:	c3                   	ret    

c0015c62 <sysCallRmdir(regs*)>:
c0015c62:	56                   	push   esi
c0015c63:	53                   	push   ebx
c0015c64:	83 ec 20             	sub    esp,0x20
c0015c67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c6e:	68 14 01 00 00       	push   0x114
c0015c73:	e8 4b 3d ff ff       	call   c00099c3 <malloc>
c0015c78:	83 c4 0c             	add    esp,0xc
c0015c7b:	89 c3                	mov    ebx,eax
c0015c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c82:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c85:	56                   	push   esi
c0015c86:	53                   	push   ebx
c0015c87:	e8 46 73 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0015c8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c8f:	e8 1a 75 ff ff       	call   c000d1ae <File::unlink()>
c0015c94:	83 c4 10             	add    esp,0x10
c0015c97:	85 db                	test   ebx,ebx
c0015c99:	74 14                	je     c0015caf <sysCallRmdir(regs*)+0x4d>
c0015c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ca1:	83 ec 0c             	sub    esp,0xc
c0015ca4:	53                   	push   ebx
c0015ca5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015caf:	85 c0                	test   eax,eax
c0015cb1:	0f 95 c0             	setne  al
c0015cb4:	31 d2                	xor    edx,edx
c0015cb6:	0f b6 c0             	movzx  eax,al
c0015cb9:	f7 d8                	neg    eax
c0015cbb:	83 d2 00             	adc    edx,0x0
c0015cbe:	83 c4 14             	add    esp,0x14
c0015cc1:	f7 da                	neg    edx
c0015cc3:	5b                   	pop    ebx
c0015cc4:	5e                   	pop    esi
c0015cc5:	c3                   	ret    

c0015cc6 <sysCallUnlink(regs*)>:
c0015cc6:	56                   	push   esi
c0015cc7:	53                   	push   ebx
c0015cc8:	83 ec 20             	sub    esp,0x20
c0015ccb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ccf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cd2:	68 14 01 00 00       	push   0x114
c0015cd7:	e8 e7 3c ff ff       	call   c00099c3 <malloc>
c0015cdc:	83 c4 0c             	add    esp,0xc
c0015cdf:	89 c3                	mov    ebx,eax
c0015ce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ce9:	56                   	push   esi
c0015cea:	53                   	push   ebx
c0015ceb:	e8 e2 72 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0015cf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cf3:	e8 b6 74 ff ff       	call   c000d1ae <File::unlink()>
c0015cf8:	83 c4 10             	add    esp,0x10
c0015cfb:	85 db                	test   ebx,ebx
c0015cfd:	74 14                	je     c0015d13 <sysCallUnlink(regs*)+0x4d>
c0015cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d03:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d05:	83 ec 0c             	sub    esp,0xc
c0015d08:	53                   	push   ebx
c0015d09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d13:	85 c0                	test   eax,eax
c0015d15:	0f 95 c0             	setne  al
c0015d18:	31 d2                	xor    edx,edx
c0015d1a:	0f b6 c0             	movzx  eax,al
c0015d1d:	f7 d8                	neg    eax
c0015d1f:	83 d2 00             	adc    edx,0x0
c0015d22:	83 c4 14             	add    esp,0x14
c0015d25:	f7 da                	neg    edx
c0015d27:	5b                   	pop    ebx
c0015d28:	5e                   	pop    esi
c0015d29:	c3                   	ret    

c0015d2a <sysCallGetArgv(regs*)>:
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d31:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d34:	85 c0                	test   eax,eax
c0015d36:	78 2b                	js     c0015d63 <sysCallGetArgv(regs*)+0x39>
c0015d38:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d3e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d41:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d47:	7d 1a                	jge    c0015d63 <sysCallGetArgv(regs*)+0x39>
c0015d49:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d50:	85 c0                	test   eax,eax
c0015d52:	74 17                	je     c0015d6b <sysCallGetArgv(regs*)+0x41>
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	50                   	push   eax
c0015d58:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d5b:	e8 e0 a9 fe ff       	call   c0000740 <strcpy>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	31 c0                	xor    eax,eax
c0015d65:	31 d2                	xor    edx,edx
c0015d67:	83 c4 0c             	add    esp,0xc
c0015d6a:	c3                   	ret    
c0015d6b:	b8 01 00 00 00       	mov    eax,0x1
c0015d70:	31 d2                	xor    edx,edx
c0015d72:	83 c4 0c             	add    esp,0xc
c0015d75:	c3                   	ret    

c0015d76 <sysCallTTYName(regs*)>:
c0015d76:	56                   	push   esi
c0015d77:	53                   	push   ebx
c0015d78:	53                   	push   ebx
c0015d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d7d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d80:	85 c0                	test   eax,eax
c0015d82:	74 5f                	je     c0015de3 <sysCallTTYName(regs*)+0x6d>
c0015d84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d87:	83 f8 02             	cmp    eax,0x2
c0015d8a:	77 3e                	ja     c0015dca <sysCallTTYName(regs*)+0x54>
c0015d8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d94:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015d9a:	85 db                	test   ebx,ebx
c0015d9c:	74 45                	je     c0015de3 <sysCallTTYName(regs*)+0x6d>
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015da3:	53                   	push   ebx
c0015da4:	ff 10                	call   DWORD PTR [eax]
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	84 c0                	test   al,al
c0015dab:	74 41                	je     c0015dee <sysCallTTYName(regs*)+0x78>
c0015dad:	83 ec 08             	sub    esp,0x8
c0015db0:	81 c3 82 00 00 00    	add    ebx,0x82
c0015db6:	53                   	push   ebx
c0015db7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015dba:	e8 81 a9 fe ff       	call   c0000740 <strcpy>
c0015dbf:	83 c4 10             	add    esp,0x10
c0015dc2:	31 c0                	xor    eax,eax
c0015dc4:	59                   	pop    ecx
c0015dc5:	31 d2                	xor    edx,edx
c0015dc7:	5b                   	pop    ebx
c0015dc8:	5e                   	pop    esi
c0015dc9:	c3                   	ret    
c0015dca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015dcf:	74 bb                	je     c0015d8c <sysCallTTYName(regs*)+0x16>
c0015dd1:	83 ec 0c             	sub    esp,0xc
c0015dd4:	50                   	push   eax
c0015dd5:	e8 65 57 ff ff       	call   c000b53f <getFromFileDescriptor(int)>
c0015dda:	83 c4 10             	add    esp,0x10
c0015ddd:	89 c3                	mov    ebx,eax
c0015ddf:	85 db                	test   ebx,ebx
c0015de1:	75 bb                	jne    c0015d9e <sysCallTTYName(regs*)+0x28>
c0015de3:	59                   	pop    ecx
c0015de4:	b8 01 00 00 00       	mov    eax,0x1
c0015de9:	31 d2                	xor    edx,edx
c0015deb:	5b                   	pop    ebx
c0015dec:	5e                   	pop    esi
c0015ded:	c3                   	ret    
c0015dee:	59                   	pop    ecx
c0015def:	b8 02 00 00 00       	mov    eax,0x2
c0015df4:	31 d2                	xor    edx,edx
c0015df6:	5b                   	pop    ebx
c0015df7:	5e                   	pop    esi
c0015df8:	c3                   	ret    

c0015df9 <sysCallUSleep(regs*)>:
c0015df9:	83 ec 1c             	sub    esp,0x1c
c0015dfc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e00:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e03:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e06:	6a 00                	push   0x0
c0015e08:	6a 64                	push   0x64
c0015e0a:	52                   	push   edx
c0015e0b:	50                   	push   eax
c0015e0c:	e8 13 b1 00 00       	call   c0020f24 <__udivdi3>
c0015e11:	83 c4 14             	add    esp,0x14
c0015e14:	50                   	push   eax
c0015e15:	e8 da 23 00 00       	call   c00181f4 <milliTenthSleep(unsigned int)>
c0015e1a:	31 c0                	xor    eax,eax
c0015e1c:	31 d2                	xor    edx,edx
c0015e1e:	83 c4 1c             	add    esp,0x1c
c0015e21:	c3                   	ret    

c0015e22 <sysCallSpawn(regs*)>:
c0015e22:	56                   	push   esi
c0015e23:	53                   	push   ebx
c0015e24:	50                   	push   eax
c0015e25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e29:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e2c:	85 c0                	test   eax,eax
c0015e2e:	75 08                	jne    c0015e38 <sysCallSpawn(regs*)+0x16>
c0015e30:	59                   	pop    ecx
c0015e31:	31 c0                	xor    eax,eax
c0015e33:	31 d2                	xor    edx,edx
c0015e35:	5b                   	pop    ebx
c0015e36:	5e                   	pop    esi
c0015e37:	c3                   	ret    
c0015e38:	83 ec 0c             	sub    esp,0xc
c0015e3b:	68 1f 07 00 00       	push   0x71f
c0015e40:	e8 7e 3b ff ff       	call   c00099c3 <malloc>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	89 c6                	mov    esi,eax
c0015e4a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e50:	85 c0                	test   eax,eax
c0015e52:	75 32                	jne    c0015e86 <sysCallSpawn(regs*)+0x64>
c0015e54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e5c:	52                   	push   edx
c0015e5d:	50                   	push   eax
c0015e5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e61:	56                   	push   esi
c0015e62:	e8 85 1a 00 00       	call   c00178ec <Process::Process(char const*, Process*, char**)>
c0015e67:	83 c4 10             	add    esp,0x10
c0015e6a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e71:	75 bd                	jne    c0015e30 <sysCallSpawn(regs*)+0xe>
c0015e73:	83 ec 0c             	sub    esp,0xc
c0015e76:	56                   	push   esi
c0015e77:	e8 5c 1f 00 00       	call   c0017dd8 <Process::createUserThread()>
c0015e7c:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	99                   	cdq    
c0015e82:	59                   	pop    ecx
c0015e83:	5b                   	pop    ebx
c0015e84:	5e                   	pop    esi
c0015e85:	c3                   	ret    
c0015e86:	31 c0                	xor    eax,eax
c0015e88:	eb d2                	jmp    c0015e5c <sysCallSpawn(regs*)+0x3a>

c0015e8a <sysCallGetEnv(regs*)>:
c0015e8a:	57                   	push   edi
c0015e8b:	56                   	push   esi
c0015e8c:	53                   	push   ebx
c0015e8d:	83 ec 1c             	sub    esp,0x1c
c0015e90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e99:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015e9c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e9f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ea2:	e8 ce e3 ff ff       	call   c0014275 <Krnl::getProcessTotalEnvCount(Process*)>
c0015ea7:	83 c4 10             	add    esp,0x10
c0015eaa:	39 c7                	cmp    edi,eax
c0015eac:	7c 14                	jl     c0015ec2 <sysCallGetEnv(regs*)+0x38>
c0015eae:	85 f6                	test   esi,esi
c0015eb0:	75 0b                	jne    c0015ebd <sysCallGetEnv(regs*)+0x33>
c0015eb2:	83 c4 10             	add    esp,0x10
c0015eb5:	31 c0                	xor    eax,eax
c0015eb7:	5b                   	pop    ebx
c0015eb8:	31 d2                	xor    edx,edx
c0015eba:	5e                   	pop    esi
c0015ebb:	5f                   	pop    edi
c0015ebc:	c3                   	ret    
c0015ebd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ec0:	eb f0                	jmp    c0015eb2 <sysCallGetEnv(regs*)+0x28>
c0015ec2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ec6:	52                   	push   edx
c0015ec7:	57                   	push   edi
c0015ec8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ece:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015ed1:	50                   	push   eax
c0015ed2:	e8 be e3 ff ff       	call   c0014295 <Krnl::getProcessEnvPair(Process*, int)>
c0015ed7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015eda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ede:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ee2:	83 c4 0c             	add    esp,0xc
c0015ee5:	85 c9                	test   ecx,ecx
c0015ee7:	75 23                	jne    c0015f0c <sysCallGetEnv(regs*)+0x82>
c0015ee9:	83 ec 0c             	sub    esp,0xc
c0015eec:	50                   	push   eax
c0015eed:	e8 ae a7 fe ff       	call   c00006a0 <strlen>
c0015ef2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ef5:	89 c3                	mov    ebx,eax
c0015ef7:	e8 a4 a7 fe ff       	call   c00006a0 <strlen>
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	31 d2                	xor    edx,edx
c0015f08:	5b                   	pop    ebx
c0015f09:	5e                   	pop    esi
c0015f0a:	5f                   	pop    edi
c0015f0b:	c3                   	ret    
c0015f0c:	83 ec 08             	sub    esp,0x8
c0015f0f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f12:	50                   	push   eax
c0015f13:	56                   	push   esi
c0015f14:	e8 27 a8 fe ff       	call   c0000740 <strcpy>
c0015f19:	58                   	pop    eax
c0015f1a:	5a                   	pop    edx
c0015f1b:	68 83 45 02 c0       	push   0xc0024583
c0015f20:	56                   	push   esi
c0015f21:	e8 5a a9 fe ff       	call   c0000880 <strcat>
c0015f26:	59                   	pop    ecx
c0015f27:	5b                   	pop    ebx
c0015f28:	57                   	push   edi
c0015f29:	56                   	push   esi
c0015f2a:	e8 51 a9 fe ff       	call   c0000880 <strcat>
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	e9 7b ff ff ff       	jmp    c0015eb2 <sysCallGetEnv(regs*)+0x28>

c0015f37 <sysAppSettings(regs*)>:
c0015f37:	57                   	push   edi
c0015f38:	56                   	push   esi
c0015f39:	56                   	push   esi
c0015f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f41:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f47:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f4c:	66 3d c0 09          	cmp    ax,0x9c0
c0015f50:	75 2e                	jne    c0015f80 <sysAppSettings(regs*)+0x49>
c0015f52:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f58:	83 e0 1f             	and    eax,0x1f
c0015f5b:	3c 01                	cmp    al,0x1
c0015f5d:	74 2c                	je     c0015f8b <sysAppSettings(regs*)+0x54>
c0015f5f:	3c 07                	cmp    al,0x7
c0015f61:	0f 84 b3 00 00 00    	je     c001601a <sysAppSettings(regs*)+0xe3>
c0015f67:	84 c0                	test   al,al
c0015f69:	0f 84 d2 00 00 00    	je     c0016041 <sysAppSettings(regs*)+0x10a>
c0015f6f:	3c 08                	cmp    al,0x8
c0015f71:	74 63                	je     c0015fd6 <sysAppSettings(regs*)+0x9f>
c0015f73:	59                   	pop    ecx
c0015f74:	0f b6 c0             	movzx  eax,al
c0015f77:	5e                   	pop    esi
c0015f78:	05 e8 03 00 00       	add    eax,0x3e8
c0015f7d:	5f                   	pop    edi
c0015f7e:	99                   	cdq    
c0015f7f:	c3                   	ret    
c0015f80:	b8 01 00 00 00       	mov    eax,0x1
c0015f85:	59                   	pop    ecx
c0015f86:	31 d2                	xor    edx,edx
c0015f88:	5e                   	pop    esi
c0015f89:	5f                   	pop    edi
c0015f8a:	c3                   	ret    
c0015f8b:	50                   	push   eax
c0015f8c:	68 00 01 00 00       	push   0x100
c0015f91:	6a 00                	push   0x0
c0015f93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f9b:	83 c0 0c             	add    eax,0xc
c0015f9e:	50                   	push   eax
c0015f9f:	e8 e0 a6 fe ff       	call   c0000684 <memset>
c0015fa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa9:	b9 ff 00 00 00       	mov    ecx,0xff
c0015fae:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015fb1:	83 c7 0c             	add    edi,0xc
c0015fb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fbb:	5a                   	pop    edx
c0015fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fbf:	59                   	pop    ecx
c0015fc0:	8d 50 0c             	lea    edx,[eax+0xc]
c0015fc3:	52                   	push   edx
c0015fc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fca:	e8 95 46 ff ff       	call   c000a664 <VgaText::setTitle(char*)>
c0015fcf:	83 c4 10             	add    esp,0x10
c0015fd2:	31 c0                	xor    eax,eax
c0015fd4:	eb af                	jmp    c0015f85 <sysAppSettings(regs*)+0x4e>
c0015fd6:	83 ec 08             	sub    esp,0x8
c0015fd9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fdf:	83 e0 0f             	and    eax,0xf
c0015fe2:	50                   	push   eax
c0015fe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015feb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015ff1:	e8 5e 46 ff ff       	call   c000a654 <VgaText::setTitleColour(VgaColour)>
c0015ff6:	5f                   	pop    edi
c0015ff7:	58                   	pop    eax
c0015ff8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015ffe:	c1 e8 04             	shr    eax,0x4
c0016001:	83 e0 0f             	and    eax,0xf
c0016004:	50                   	push   eax
c0016005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001600a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001600d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016013:	e8 2c 46 ff ff       	call   c000a644 <VgaText::setTitleTextColour(VgaColour)>
c0016018:	eb b5                	jmp    c0015fcf <sysAppSettings(regs*)+0x98>
c001601a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001601f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016022:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016028:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001602e:	c0 e8 06             	shr    al,0x6
c0016031:	83 e0 01             	and    eax,0x1
c0016034:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001603a:	31 c0                	xor    eax,eax
c001603c:	e9 44 ff ff ff       	jmp    c0015f85 <sysAppSettings(regs*)+0x4e>
c0016041:	b8 02 00 00 00       	mov    eax,0x2
c0016046:	e9 3a ff ff ff       	jmp    c0015f85 <sysAppSettings(regs*)+0x4e>

c001604b <sysSetFatAttrib(regs*)>:
c001604b:	57                   	push   edi
c001604c:	56                   	push   esi
c001604d:	53                   	push   ebx
c001604e:	83 ec 1c             	sub    esp,0x1c
c0016051:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016055:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016058:	68 14 01 00 00       	push   0x114
c001605d:	e8 61 39 ff ff       	call   c00099c3 <malloc>
c0016062:	83 c4 0c             	add    esp,0xc
c0016065:	89 c3                	mov    ebx,eax
c0016067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001606c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001606f:	57                   	push   edi
c0016070:	53                   	push   ebx
c0016071:	e8 5c 6f ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0016076:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016079:	83 c4 0c             	add    esp,0xc
c001607c:	0f b6 d4             	movzx  edx,ah
c001607f:	0f b6 c0             	movzx  eax,al
c0016082:	52                   	push   edx
c0016083:	50                   	push   eax
c0016084:	53                   	push   ebx
c0016085:	e8 be 71 ff ff       	call   c000d248 <File::chfatattr(unsigned char, unsigned char)>
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	85 db                	test   ebx,ebx
c001608f:	74 14                	je     c00160a5 <sysSetFatAttrib(regs*)+0x5a>
c0016091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016095:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016097:	83 ec 0c             	sub    esp,0xc
c001609a:	53                   	push   ebx
c001609b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a5:	85 c0                	test   eax,eax
c00160a7:	0f 95 c0             	setne  al
c00160aa:	31 d2                	xor    edx,edx
c00160ac:	0f b6 c0             	movzx  eax,al
c00160af:	f7 d8                	neg    eax
c00160b1:	83 d2 00             	adc    edx,0x0
c00160b4:	83 c4 10             	add    esp,0x10
c00160b7:	f7 da                	neg    edx
c00160b9:	5b                   	pop    ebx
c00160ba:	5e                   	pop    esi
c00160bb:	5f                   	pop    edi
c00160bc:	c3                   	ret    

c00160bd <sysPipe(regs*)>:
c00160bd:	57                   	push   edi
c00160be:	56                   	push   esi
c00160bf:	53                   	push   ebx
c00160c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c4:	83 ec 0c             	sub    esp,0xc
c00160c7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00160ca:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160cd:	6a 20                	push   0x20
c00160cf:	e8 ef 38 ff ff       	call   c00099c3 <malloc>
c00160d4:	89 c3                	mov    ebx,eax
c00160d6:	58                   	pop    eax
c00160d7:	5a                   	pop    edx
c00160d8:	68 00 50 00 00       	push   0x5000
c00160dd:	53                   	push   ebx
c00160de:	e8 f9 42 ff ff       	call   c000a3dc <Pipe::Pipe(int)>
c00160e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160e6:	e8 5f 51 ff ff       	call   c000b24a <UnixFile::getFileDescriptor()>
c00160eb:	89 07                	mov    DWORD PTR [edi],eax
c00160ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160f0:	e8 55 51 ff ff       	call   c000b24a <UnixFile::getFileDescriptor()>
c00160f5:	83 c4 10             	add    esp,0x10
c00160f8:	89 06                	mov    DWORD PTR [esi],eax
c00160fa:	31 d2                	xor    edx,edx
c00160fc:	5b                   	pop    ebx
c00160fd:	31 c0                	xor    eax,eax
c00160ff:	5e                   	pop    esi
c0016100:	5f                   	pop    edi
c0016101:	c3                   	ret    

c0016102 <sysGetUnixTime(regs*)>:
c0016102:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0016107:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001610d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016111:	e9 b0 78 ff ff       	jmp    c000d9c6 <Clock::timeInSecondsLocal()>

c0016116 <string_ends_with(char const*, char const*)>:
c0016116:	57                   	push   edi
c0016117:	56                   	push   esi
c0016118:	53                   	push   ebx
c0016119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001611d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016121:	83 ec 0c             	sub    esp,0xc
c0016124:	53                   	push   ebx
c0016125:	e8 76 a5 fe ff       	call   c00006a0 <strlen>
c001612a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001612d:	89 c6                	mov    esi,eax
c001612f:	e8 6c a5 fe ff       	call   c00006a0 <strlen>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	39 c6                	cmp    esi,eax
c0016139:	7d 06                	jge    c0016141 <string_ends_with(char const*, char const*)+0x2b>
c001613b:	5b                   	pop    ebx
c001613c:	31 c0                	xor    eax,eax
c001613e:	5e                   	pop    esi
c001613f:	5f                   	pop    edi
c0016140:	c3                   	ret    
c0016141:	83 ec 08             	sub    esp,0x8
c0016144:	29 c6                	sub    esi,eax
c0016146:	57                   	push   edi
c0016147:	01 f3                	add    ebx,esi
c0016149:	53                   	push   ebx
c001614a:	e8 7d a6 fe ff       	call   c00007cc <strcmp>
c001614f:	83 c4 10             	add    esp,0x10
c0016152:	85 c0                	test   eax,eax
c0016154:	5b                   	pop    ebx
c0016155:	0f 94 c0             	sete   al
c0016158:	5e                   	pop    esi
c0016159:	0f b6 c0             	movzx  eax,al
c001615c:	5f                   	pop    edi
c001615d:	c3                   	ret    

c001615e <sysCallOpen(regs*)>:
c001615e:	56                   	push   esi
c001615f:	53                   	push   ebx
c0016160:	81 ec 04 01 00 00    	sub    esp,0x104
c0016166:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001616d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016170:	85 c9                	test   ecx,ecx
c0016172:	0f 84 ad 01 00 00    	je     c0016325 <sysCallOpen(regs*)+0x1c7>
c0016178:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001617b:	85 c0                	test   eax,eax
c001617d:	0f 84 a2 01 00 00    	je     c0016325 <sysCallOpen(regs*)+0x1c7>
c0016183:	52                   	push   edx
c0016184:	68 85 45 02 c0       	push   0xc0024585
c0016189:	50                   	push   eax
c001618a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001618e:	56                   	push   esi
c001618f:	e8 94 6c ff ff       	call   c000ce28 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016194:	89 34 24             	mov    DWORD PTR [esp],esi
c0016197:	e8 04 a5 fe ff       	call   c00006a0 <strlen>
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	48                   	dec    eax
c00161a0:	74 1d                	je     c00161bf <sysCallOpen(regs*)+0x61>
c00161a2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00161a5:	eb 0f                	jmp    c00161b6 <sysCallOpen(regs*)+0x58>
c00161a7:	80 fa 3a             	cmp    dl,0x3a
c00161aa:	74 0f                	je     c00161bb <sysCallOpen(regs*)+0x5d>
c00161ac:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00161b0:	48                   	dec    eax
c00161b1:	74 0c                	je     c00161bf <sysCallOpen(regs*)+0x61>
c00161b3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00161b6:	80 fa 2e             	cmp    dl,0x2e
c00161b9:	75 ec                	jne    c00161a7 <sysCallOpen(regs*)+0x49>
c00161bb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00161bf:	83 ec 08             	sub    esp,0x8
c00161c2:	68 89 45 02 c0       	push   0xc0024589
c00161c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161ca:	e8 47 ff ff ff       	call   c0016116 <string_ends_with(char const*, char const*)>
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	85 c0                	test   eax,eax
c00161d4:	74 1d                	je     c00161f3 <sysCallOpen(regs*)+0x95>
c00161d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161d9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161e6:	81 c4 04 01 00 00    	add    esp,0x104
c00161ec:	31 c0                	xor    eax,eax
c00161ee:	31 d2                	xor    edx,edx
c00161f0:	5b                   	pop    ebx
c00161f1:	5e                   	pop    esi
c00161f2:	c3                   	ret    
c00161f3:	83 ec 08             	sub    esp,0x8
c00161f6:	68 8e 45 02 c0       	push   0xc002458e
c00161fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161fe:	e8 13 ff ff ff       	call   c0016116 <string_ends_with(char const*, char const*)>
c0016203:	83 c4 10             	add    esp,0x10
c0016206:	85 c0                	test   eax,eax
c0016208:	75 cc                	jne    c00161d6 <sysCallOpen(regs*)+0x78>
c001620a:	83 ec 08             	sub    esp,0x8
c001620d:	68 8a 45 02 c0       	push   0xc002458a
c0016212:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016215:	e8 b2 a5 fe ff       	call   c00007cc <strcmp>
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	85 c0                	test   eax,eax
c001621f:	74 b5                	je     c00161d6 <sysCallOpen(regs*)+0x78>
c0016221:	83 ec 08             	sub    esp,0x8
c0016224:	68 89 45 02 c0       	push   0xc0024589
c0016229:	56                   	push   esi
c001622a:	e8 e7 fe ff ff       	call   c0016116 <string_ends_with(char const*, char const*)>
c001622f:	83 c4 10             	add    esp,0x10
c0016232:	85 c0                	test   eax,eax
c0016234:	75 a0                	jne    c00161d6 <sysCallOpen(regs*)+0x78>
c0016236:	83 ec 08             	sub    esp,0x8
c0016239:	68 93 45 02 c0       	push   0xc0024593
c001623e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016241:	e8 d0 fe ff ff       	call   c0016116 <string_ends_with(char const*, char const*)>
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	85 c0                	test   eax,eax
c001624b:	0f 85 e7 00 00 00    	jne    c0016338 <sysCallOpen(regs*)+0x1da>
c0016251:	83 ec 08             	sub    esp,0x8
c0016254:	68 98 45 02 c0       	push   0xc0024598
c0016259:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001625c:	e8 b5 fe ff ff       	call   c0016116 <string_ends_with(char const*, char const*)>
c0016261:	83 c4 10             	add    esp,0x10
c0016264:	85 c0                	test   eax,eax
c0016266:	0f 85 cc 00 00 00    	jne    c0016338 <sysCallOpen(regs*)+0x1da>
c001626c:	83 ec 08             	sub    esp,0x8
c001626f:	68 94 45 02 c0       	push   0xc0024594
c0016274:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016277:	e8 50 a5 fe ff       	call   c00007cc <strcmp>
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	85 c0                	test   eax,eax
c0016281:	0f 84 b1 00 00 00    	je     c0016338 <sysCallOpen(regs*)+0x1da>
c0016287:	83 ec 08             	sub    esp,0x8
c001628a:	68 93 45 02 c0       	push   0xc0024593
c001628f:	56                   	push   esi
c0016290:	e8 81 fe ff ff       	call   c0016116 <string_ends_with(char const*, char const*)>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	85 c0                	test   eax,eax
c001629a:	0f 85 98 00 00 00    	jne    c0016338 <sysCallOpen(regs*)+0x1da>
c00162a0:	83 ec 0c             	sub    esp,0xc
c00162a3:	68 14 01 00 00       	push   0x114
c00162a8:	e8 16 37 ff ff       	call   c00099c3 <malloc>
c00162ad:	83 c4 0c             	add    esp,0xc
c00162b0:	89 c6                	mov    esi,eax
c00162b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162bd:	56                   	push   esi
c00162be:	e8 0f 6d ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c00162c3:	83 c4 10             	add    esp,0x10
c00162c6:	85 f6                	test   esi,esi
c00162c8:	74 5b                	je     c0016325 <sysCallOpen(regs*)+0x1c7>
c00162ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162cd:	0f b6 c2             	movzx  eax,dl
c00162d0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162d3:	89 d0                	mov    eax,edx
c00162d5:	83 e0 01             	and    eax,0x1
c00162d8:	f6 c2 02             	test   dl,0x2
c00162db:	74 03                	je     c00162e0 <sysCallOpen(regs*)+0x182>
c00162dd:	83 c8 02             	or     eax,0x2
c00162e0:	f6 c2 04             	test   dl,0x4
c00162e3:	74 03                	je     c00162e8 <sysCallOpen(regs*)+0x18a>
c00162e5:	83 c8 04             	or     eax,0x4
c00162e8:	f6 c2 08             	test   dl,0x8
c00162eb:	74 03                	je     c00162f0 <sysCallOpen(regs*)+0x192>
c00162ed:	83 c8 0a             	or     eax,0xa
c00162f0:	83 e2 10             	and    edx,0x10
c00162f3:	74 03                	je     c00162f8 <sysCallOpen(regs*)+0x19a>
c00162f5:	83 c8 12             	or     eax,0x12
c00162f8:	83 ec 08             	sub    esp,0x8
c00162fb:	50                   	push   eax
c00162fc:	56                   	push   esi
c00162fd:	e8 34 6d ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0016302:	83 c4 10             	add    esp,0x10
c0016305:	85 c0                	test   eax,eax
c0016307:	75 1c                	jne    c0016325 <sysCallOpen(regs*)+0x1c7>
c0016309:	83 ec 0c             	sub    esp,0xc
c001630c:	56                   	push   esi
c001630d:	e8 38 4f ff ff       	call   c000b24a <UnixFile::getFileDescriptor()>
c0016312:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	89 02                	mov    DWORD PTR [edx],eax
c001631a:	c1 f8 1f             	sar    eax,0x1f
c001631d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016320:	e9 c1 fe ff ff       	jmp    c00161e6 <sysCallOpen(regs*)+0x88>
c0016325:	81 c4 04 01 00 00    	add    esp,0x104
c001632b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016330:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016335:	5b                   	pop    ebx
c0016336:	5e                   	pop    esi
c0016337:	c3                   	ret    
c0016338:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001633b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016341:	e9 99 fe ff ff       	jmp    c00161df <sysCallOpen(regs*)+0x81>

c0016346 <Sys::loadSyscalls()>:
c0016346:	c7 05 00 6f 02 c0 b7 55 01 c0 	mov    DWORD PTR ds:0xc0026f00,0xc00155b7
c0016350:	c7 05 04 6f 02 c0 ac 51 01 c0 	mov    DWORD PTR ds:0xc0026f04,0xc00151ac
c001635a:	c7 05 08 6f 02 c0 9d 53 01 c0 	mov    DWORD PTR ds:0xc0026f08,0xc001539d
c0016364:	c7 05 0c 6f 02 c0 ed 54 01 c0 	mov    DWORD PTR ds:0xc0026f0c,0xc00154ed
c001636e:	c7 05 10 6f 02 c0 35 53 01 c0 	mov    DWORD PTR ds:0xc0026f10,0xc0015335
c0016378:	c7 05 14 6f 02 c0 e3 51 01 c0 	mov    DWORD PTR ds:0xc0026f14,0xc00151e3
c0016382:	c7 05 18 6f 02 c0 c4 51 01 c0 	mov    DWORD PTR ds:0xc0026f18,0xc00151c4
c001638c:	c7 05 1c 6f 02 c0 f2 53 01 c0 	mov    DWORD PTR ds:0xc0026f1c,0xc00153f2
c0016396:	c7 05 24 6f 02 c0 7a 5a 01 c0 	mov    DWORD PTR ds:0xc0026f24,0xc0015a7a
c00163a0:	c7 05 20 6f 02 c0 5e 61 01 c0 	mov    DWORD PTR ds:0xc0026f20,0xc001615e
c00163aa:	c7 05 28 6f 02 c0 da 5a 01 c0 	mov    DWORD PTR ds:0xc0026f28,0xc0015ada
c00163b4:	c7 05 2c 6f 02 c0 bd 57 01 c0 	mov    DWORD PTR ds:0xc0026f2c,0xc00157bd
c00163be:	c7 05 30 6f 02 c0 ef 55 01 c0 	mov    DWORD PTR ds:0xc0026f30,0xc00155ef
c00163c8:	c7 05 34 6f 02 c0 f4 55 01 c0 	mov    DWORD PTR ds:0xc0026f34,0xc00155f4
c00163d2:	c7 05 38 6f 02 c0 a3 5b 01 c0 	mov    DWORD PTR ds:0xc0026f38,0xc0015ba3
c00163dc:	c7 05 3c 6f 02 c0 4f 5b 01 c0 	mov    DWORD PTR ds:0xc0026f3c,0xc0015b4f
c00163e6:	c7 05 40 6f 02 c0 96 58 01 c0 	mov    DWORD PTR ds:0xc0026f40,0xc0015896
c00163f0:	c7 05 44 6f 02 c0 ed 58 01 c0 	mov    DWORD PTR ds:0xc0026f44,0xc00158ed
c00163fa:	c7 05 48 6f 02 c0 59 59 01 c0 	mov    DWORD PTR ds:0xc0026f48,0xc0015959
c0016404:	c7 05 4c 6f 02 c0 f9 55 01 c0 	mov    DWORD PTR ds:0xc0026f4c,0xc00155f9
c001640e:	c7 05 50 6f 02 c0 13 5c 01 c0 	mov    DWORD PTR ds:0xc0026f50,0xc0015c13
c0016418:	c7 05 54 6f 02 c0 2d 5c 01 c0 	mov    DWORD PTR ds:0xc0026f54,0xc0015c2d
c0016422:	c7 05 58 6f 02 c0 2d 5c 01 c0 	mov    DWORD PTR ds:0xc0026f58,0xc0015c2d
c001642c:	c7 05 5c 6f 02 c0 62 5c 01 c0 	mov    DWORD PTR ds:0xc0026f5c,0xc0015c62
c0016436:	c7 05 60 6f 02 c0 c6 5c 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc0015cc6
c0016440:	c7 05 64 6f 02 c0 03 56 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc0015603
c001644a:	c7 05 68 6f 02 c0 2a 5d 01 c0 	mov    DWORD PTR ds:0xc0026f68,0xc0015d2a
c0016454:	c7 05 6c 6f 02 c0 7a 57 01 c0 	mov    DWORD PTR ds:0xc0026f6c,0xc001577a
c001645e:	c7 05 70 6f 02 c0 76 5d 01 c0 	mov    DWORD PTR ds:0xc0026f70,0xc0015d76
c0016468:	c7 05 74 6f 02 c0 3c 58 01 c0 	mov    DWORD PTR ds:0xc0026f74,0xc001583c
c0016472:	c7 05 78 6f 02 c0 f9 5d 01 c0 	mov    DWORD PTR ds:0xc0026f78,0xc0015df9
c001647c:	c7 05 7c 6f 02 c0 cb 59 01 c0 	mov    DWORD PTR ds:0xc0026f7c,0xc00159cb
c0016486:	c7 05 80 6f 02 c0 22 5e 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc0015e22
c0016490:	c7 05 84 6f 02 c0 8a 5e 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015e8a
c001649a:	c7 05 88 6f 02 c0 37 5f 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015f37
c00164a4:	c7 05 8c 6f 02 c0 13 56 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc0015613
c00164ae:	c7 05 90 6f 02 c0 7d 56 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc001567d
c00164b8:	c7 05 94 6f 02 c0 c7 56 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc00156c7
c00164c2:	c7 05 98 6f 02 c0 4b 60 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc001604b
c00164cc:	c7 05 9c 6f 02 c0 48 5c 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc0015c48
c00164d6:	c7 05 a0 6f 02 c0 1c 57 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc001571c
c00164e0:	c7 05 a4 6f 02 c0 bd 60 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc00160bd
c00164ea:	c7 05 a8 6f 02 c0 02 61 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0016102
c00164f4:	c7 05 ac 6f 02 c0 8d 52 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc001528d
c00164fe:	c7 05 b0 6f 02 c0 0e 54 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc001540e
c0016508:	c7 05 b4 6f 02 c0 a3 54 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc00154a3
c0016512:	c7 05 b8 6f 02 c0 76 51 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015176
c001651c:	c7 05 bc 6f 02 c0 55 55 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015555
c0016526:	c7 05 c0 6f 02 c0 ef 51 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc00151ef
c0016530:	c7 05 c4 6f 02 c0 09 52 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc0015209
c001653a:	c3                   	ret    

c001653b <Sys::systemCall(regs*, void*)>:
c001653b:	53                   	push   ebx
c001653c:	83 ec 08             	sub    esp,0x8
c001653f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016543:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016546:	83 f8 7f             	cmp    eax,0x7f
c0016549:	77 16                	ja     c0016561 <Sys::systemCall(regs*, void*)+0x26>
c001654b:	8b 14 85 00 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9100]
c0016552:	85 d2                	test   edx,edx
c0016554:	74 0b                	je     c0016561 <Sys::systemCall(regs*, void*)+0x26>
c0016556:	83 ec 0c             	sub    esp,0xc
c0016559:	53                   	push   ebx
c001655a:	ff d2                	call   edx
c001655c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001655f:	eb 0d                	jmp    c001656e <Sys::systemCall(regs*, void*)+0x33>
c0016561:	52                   	push   edx
c0016562:	52                   	push   edx
c0016563:	50                   	push   eax
c0016564:	68 9d 45 02 c0       	push   0xc002459d
c0016569:	e8 f9 64 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001656e:	83 c4 10             	add    esp,0x10
c0016571:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016576:	31 d2                	xor    edx,edx
c0016578:	83 c4 08             	add    esp,0x8
c001657b:	5b                   	pop    ebx
c001657c:	c3                   	ret    

c001657d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001657d:	55                   	push   ebp
c001657e:	57                   	push   edi
c001657f:	56                   	push   esi
c0016580:	53                   	push   ebx
c0016581:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016587:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001658e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016595:	85 c0                	test   eax,eax
c0016597:	0f 95 c1             	setne  cl
c001659a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00165a2:	0f 94 c2             	sete   dl
c00165a5:	84 d1                	test   cl,dl
c00165a7:	74 23                	je     c00165cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165a9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00165af:	74 1b                	je     c00165cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165b7:	89 da                	mov    edx,ebx
c00165b9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00165bf:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00165c5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165cc:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165d3:	05 ff 0f 00 00       	add    eax,0xfff
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165df:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165e5:	c1 e8 0c             	shr    eax,0xc
c00165e8:	89 fe                	mov    esi,edi
c00165ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165ee:	c1 ee 0c             	shr    esi,0xc
c00165f1:	6a 01                	push   0x1
c00165f3:	e8 9d 50 ff ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c00165f8:	89 c5                	mov    ebp,eax
c00165fa:	58                   	pop    eax
c00165fb:	5a                   	pop    edx
c00165fc:	56                   	push   esi
c00165fd:	68 b1 45 02 c0       	push   0xc00245b1
c0016602:	e8 60 64 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0016607:	59                   	pop    ecx
c0016608:	58                   	pop    eax
c0016609:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001660d:	68 c3 45 02 c0       	push   0xc00245c3
c0016612:	e8 50 64 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016620:	0f 86 31 01 00 00    	jbe    c0016757 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016626:	c1 e6 0c             	shl    esi,0xc
c0016629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001662c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001662f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016633:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001663a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001663d:	01 df                	add    edi,ebx
c001663f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016642:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016646:	0f 84 08 01 00 00    	je     c0016754 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001664c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016652:	76 05                	jbe    c0016659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016654:	bf 00 10 00 00       	mov    edi,0x1000
c0016659:	83 ec 0c             	sub    esp,0xc
c001665c:	31 d2                	xor    edx,edx
c001665e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016665:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016667:	8d 44 24 28          	lea    eax,[esp+0x28]
c001666b:	50                   	push   eax
c001666c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016670:	56                   	push   esi
c0016671:	52                   	push   edx
c0016672:	57                   	push   edi
c0016673:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001667a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001667d:	83 c4 20             	add    esp,0x20
c0016680:	85 c0                	test   eax,eax
c0016682:	74 0a                	je     c001668e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016684:	53                   	push   ebx
c0016685:	53                   	push   ebx
c0016686:	50                   	push   eax
c0016687:	68 d5 45 02 c0       	push   0xc00245d5
c001668c:	eb 0f                	jmp    c001669d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001668e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016692:	74 20                	je     c00166b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016694:	51                   	push   ecx
c0016695:	51                   	push   ecx
c0016696:	6a 00                	push   0x0
c0016698:	68 00 46 02 c0       	push   0xc0024600
c001669d:	e8 c5 63 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00166a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166a5:	e8 1b 53 ff ff       	call   c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	31 c0                	xor    eax,eax
c00166af:	e9 68 01 00 00       	jmp    c001681c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00166b4:	fa                   	cli    
c00166b5:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00166bb:	e8 2a 37 ff ff       	call   c0009dea <Phys::allocatePage()>
c00166c0:	6a 07                	push   0x7
c00166c2:	89 c7                	mov    edi,eax
c00166c4:	55                   	push   ebp
c00166c5:	50                   	push   eax
c00166c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166d4:	e8 63 56 ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c00166d9:	83 c4 0c             	add    esp,0xc
c00166dc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166e9:	6a 00                	push   0x0
c00166eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166f9:	e8 98 54 ff ff       	call   c000bb96 <VAS::mapOtherVASIn(bool, VAS*)>
c00166fe:	58                   	pop    eax
c00166ff:	5a                   	pop    edx
c0016700:	68 07 0c 00 00       	push   0xc07
c0016705:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016709:	57                   	push   edi
c001670a:	89 ef                	mov    edi,ebp
c001670c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016713:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016719:	6a 00                	push   0x0
c001671b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016720:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016723:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016729:	e8 ca 59 ff ff       	call   c000c0f8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001672e:	b9 00 10 00 00       	mov    ecx,0x1000
c0016733:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016735:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001673a:	83 c4 20             	add    esp,0x20
c001673d:	48                   	dec    eax
c001673e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0016743:	85 c0                	test   eax,eax
c0016745:	75 01                	jne    c0016748 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016747:	fb                   	sti    
c0016748:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001674f:	e9 df fe ff ff       	jmp    c0016633 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016754:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016757:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001675f:	0f 86 a9 00 00 00    	jbe    c001680e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016765:	fa                   	cli    
c0016766:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001676c:	51                   	push   ecx
c001676d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016774:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001677a:	6a 00                	push   0x0
c001677c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016784:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001678a:	e8 07 54 ff ff       	call   c000bb96 <VAS::mapOtherVASIn(bool, VAS*)>
c001678f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016793:	c1 e6 0c             	shl    esi,0xc
c0016796:	01 de                	add    esi,ebx
c0016798:	83 c4 10             	add    esp,0x10
c001679b:	39 de                	cmp    esi,ebx
c001679d:	74 61                	je     c0016800 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001679f:	e8 46 36 ff ff       	call   c0009dea <Phys::allocatePage()>
c00167a4:	6a 07                	push   0x7
c00167a6:	89 c7                	mov    edi,eax
c00167a8:	55                   	push   ebp
c00167a9:	50                   	push   eax
c00167aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167b8:	e8 7f 55 ff ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c00167bd:	58                   	pop    eax
c00167be:	5a                   	pop    edx
c00167bf:	68 07 0c 00 00       	push   0xc07
c00167c4:	53                   	push   ebx
c00167c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167cb:	57                   	push   edi
c00167cc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167d9:	6a 00                	push   0x0
c00167db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167e9:	e8 0a 59 ff ff       	call   c000c0f8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167ee:	83 c4 1c             	add    esp,0x1c
c00167f1:	68 00 10 00 00       	push   0x1000
c00167f6:	6a 00                	push   0x0
c00167f8:	55                   	push   ebp
c00167f9:	e8 86 9e fe ff       	call   c0000684 <memset>
c00167fe:	eb 98                	jmp    c0016798 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016800:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0016805:	48                   	dec    eax
c0016806:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001680b:	75 01                	jne    c001680e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001680d:	fb                   	sti    
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	55                   	push   ebp
c0016812:	e8 ae 51 ff ff       	call   c000b9c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	b0 01                	mov    al,0x1
c001681c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016822:	5b                   	pop    ebx
c0016823:	5e                   	pop    esi
c0016824:	5f                   	pop    edi
c0016825:	5d                   	pop    ebp
c0016826:	c3                   	ret    

c0016827 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016827:	55                   	push   ebp
c0016828:	57                   	push   edi
c0016829:	56                   	push   esi
c001682a:	53                   	push   ebx
c001682b:	83 ec 48             	sub    esp,0x48
c001682e:	68 14 01 00 00       	push   0x114
c0016833:	e8 8b 31 ff ff       	call   c00099c3 <malloc>
c0016838:	83 c4 0c             	add    esp,0xc
c001683b:	89 c6                	mov    esi,eax
c001683d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016841:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016845:	50                   	push   eax
c0016846:	e8 87 67 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c001684b:	58                   	pop    eax
c001684c:	5a                   	pop    edx
c001684d:	6a 01                	push   0x1
c001684f:	56                   	push   esi
c0016850:	e8 e1 67 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	85 c0                	test   eax,eax
c001685a:	0f 85 47 01 00 00    	jne    c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016860:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016868:	83 ec 0c             	sub    esp,0xc
c001686b:	6a 34                	push   0x34
c001686d:	e8 51 31 ff ff       	call   c00099c3 <malloc>
c0016872:	89 c3                	mov    ebx,eax
c0016874:	58                   	pop    eax
c0016875:	8b 06                	mov    eax,DWORD PTR [esi]
c0016877:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001687b:	57                   	push   edi
c001687c:	53                   	push   ebx
c001687d:	6a 00                	push   0x0
c001687f:	6a 34                	push   0x34
c0016881:	56                   	push   esi
c0016882:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016885:	83 c4 20             	add    esp,0x20
c0016888:	85 c0                	test   eax,eax
c001688a:	0f 85 17 01 00 00    	jne    c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016890:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016896:	0f 85 0b 01 00 00    	jne    c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001689c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001689f:	85 c0                	test   eax,eax
c00168a1:	0f 84 00 01 00 00    	je     c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168a7:	31 d2                	xor    edx,edx
c00168a9:	55                   	push   ebp
c00168aa:	52                   	push   edx
c00168ab:	50                   	push   eax
c00168ac:	56                   	push   esi
c00168ad:	e8 42 68 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c00168b2:	83 c4 10             	add    esp,0x10
c00168b5:	85 c0                	test   eax,eax
c00168b7:	0f 85 ea 00 00 00    	jne    c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168bd:	83 ec 0c             	sub    esp,0xc
c00168c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00168c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168cb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168cf:	0f af c2             	imul   eax,edx
c00168d2:	50                   	push   eax
c00168d3:	e8 eb 30 ff ff       	call   c00099c3 <malloc>
c00168d8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168e5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168e9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168ed:	0f af c2             	imul   eax,edx
c00168f0:	99                   	cdq    
c00168f1:	52                   	push   edx
c00168f2:	50                   	push   eax
c00168f3:	56                   	push   esi
c00168f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168f7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168fa:	83 c4 20             	add    esp,0x20
c00168fd:	85 c0                	test   eax,eax
c00168ff:	0f 84 a2 00 00 00    	je     c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016905:	31 d2                	xor    edx,edx
c0016907:	51                   	push   ecx
c0016908:	52                   	push   edx
c0016909:	50                   	push   eax
c001690a:	56                   	push   esi
c001690b:	e8 e4 67 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016910:	83 c4 10             	add    esp,0x10
c0016913:	85 c0                	test   eax,eax
c0016915:	0f 85 8c 00 00 00    	jne    c00169a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001691b:	83 ec 0c             	sub    esp,0xc
c001691e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016922:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016926:	31 ed                	xor    ebp,ebp
c0016928:	0f af c2             	imul   eax,edx
c001692b:	50                   	push   eax
c001692c:	e8 92 30 ff ff       	call   c00099c3 <malloc>
c0016931:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016937:	89 3c 24             	mov    DWORD PTR [esp],edi
c001693a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016942:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016946:	0f af c2             	imul   eax,edx
c0016949:	99                   	cdq    
c001694a:	52                   	push   edx
c001694b:	50                   	push   eax
c001694c:	56                   	push   esi
c001694d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016950:	83 c4 20             	add    esp,0x20
c0016953:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001695b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001695f:	0f 86 80 00 00 00    	jbe    c00169e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016965:	0f b7 fd             	movzx  edi,bp
c0016968:	c1 e7 05             	shl    edi,0x5
c001696b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001696f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016972:	75 6b                	jne    c00169df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016974:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016977:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001697b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001697e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016982:	52                   	push   edx
c0016983:	31 d2                	xor    edx,edx
c0016985:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016988:	52                   	push   edx
c0016989:	50                   	push   eax
c001698a:	56                   	push   esi
c001698b:	e8 64 67 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016990:	83 c4 10             	add    esp,0x10
c0016993:	85 c0                	test   eax,eax
c0016995:	74 17                	je     c00169ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016997:	83 ec 0c             	sub    esp,0xc
c001699a:	68 2c 46 02 c0       	push   0xc002462c
c001699f:	e8 c3 60 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	31 c0                	xor    eax,eax
c00169a9:	e9 87 00 00 00       	jmp    c0016a35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00169ae:	83 ec 0c             	sub    esp,0xc
c00169b1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00169b4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00169b7:	50                   	push   eax
c00169b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169c0:	56                   	push   esi
c00169c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00169c5:	e8 b3 fb ff ff       	call   c001657d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00169ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169ce:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169d2:	83 c4 20             	add    esp,0x20
c00169d5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169d9:	73 04                	jae    c00169df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169df:	45                   	inc    ebp
c00169e0:	e9 76 ff ff ff       	jmp    c001695b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169e5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169f1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00169f7:	83 ec 0c             	sub    esp,0xc
c00169fa:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a00:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a05:	05 00 10 00 00       	add    eax,0x1000
c0016a0a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a11:	e8 bd 2f ff ff       	call   c00099d3 <free>
c0016a16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a19:	e8 b5 2f ff ff       	call   c00099d3 <free>
c0016a1e:	58                   	pop    eax
c0016a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a23:	e8 ab 2f ff ff       	call   c00099d3 <free>
c0016a28:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a2b:	e8 64 66 ff ff       	call   c000d094 <File::close()>
c0016a30:	83 c4 10             	add    esp,0x10
c0016a33:	b0 01                	mov    al,0x1
c0016a35:	83 c4 3c             	add    esp,0x3c
c0016a38:	5b                   	pop    ebx
c0016a39:	5e                   	pop    esi
c0016a3a:	5f                   	pop    edi
c0016a3b:	5d                   	pop    ebp
c0016a3c:	c3                   	ret    

c0016a3d <Thr::runtimeReferenceHelper()>:
c0016a3d:	83 ec 18             	sub    esp,0x18
c0016a40:	68 34 46 02 c0       	push   0xc0024634
c0016a45:	e8 1d 60 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0016a4a:	fa                   	cli    
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	eb fe                	jmp    c0016a4e <Thr::runtimeReferenceHelper()+0x11>

c0016a50 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a50:	57                   	push   edi
c0016a51:	56                   	push   esi
c0016a52:	53                   	push   ebx
c0016a53:	31 db                	xor    ebx,ebx
c0016a55:	39 1d a0 78 02 c0    	cmp    DWORD PTR ds:0xc00278a0,ebx
c0016a5b:	7e 3c                	jle    c0016a99 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a5d:	8b 34 9d 20 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd87e0]
c0016a64:	31 ff                	xor    edi,edi
c0016a66:	39 3c 9d 20 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd88e0],edi
c0016a6d:	7e 27                	jle    c0016a96 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a6f:	50                   	push   eax
c0016a70:	50                   	push   eax
c0016a71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a75:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a77:	03 04 9d a0 77 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8860]
c0016a7e:	50                   	push   eax
c0016a7f:	e8 48 9d fe ff       	call   c00007cc <strcmp>
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	85 c0                	test   eax,eax
c0016a89:	75 05                	jne    c0016a90 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a8b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a8e:	eb 0b                	jmp    c0016a9b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a90:	83 c6 10             	add    esi,0x10
c0016a93:	47                   	inc    edi
c0016a94:	eb d0                	jmp    c0016a66 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a96:	43                   	inc    ebx
c0016a97:	eb bc                	jmp    c0016a55 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a99:	31 c0                	xor    eax,eax
c0016a9b:	5b                   	pop    ebx
c0016a9c:	5e                   	pop    esi
c0016a9d:	5f                   	pop    edi
c0016a9e:	c3                   	ret    

c0016a9f <Thr::loadKernelSymbolTable(char const*)>:
c0016a9f:	55                   	push   ebp
c0016aa0:	57                   	push   edi
c0016aa1:	56                   	push   esi
c0016aa2:	53                   	push   ebx
c0016aa3:	83 ec 68             	sub    esp,0x68
c0016aa6:	8b 35 f0 78 02 c0    	mov    esi,DWORD PTR ds:0xc00278f0
c0016aac:	68 14 01 00 00       	push   0x114
c0016ab1:	e8 0d 2f ff ff       	call   c00099c3 <malloc>
c0016ab6:	83 c4 0c             	add    esp,0xc
c0016ab9:	89 c3                	mov    ebx,eax
c0016abb:	56                   	push   esi
c0016abc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016ac0:	50                   	push   eax
c0016ac1:	e8 0c 65 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0016ac6:	5e                   	pop    esi
c0016ac7:	5f                   	pop    edi
c0016ac8:	6a 01                	push   0x1
c0016aca:	53                   	push   ebx
c0016acb:	e8 66 65 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0016ad0:	83 c4 10             	add    esp,0x10
c0016ad3:	85 c0                	test   eax,eax
c0016ad5:	74 0a                	je     c0016ae1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016ad7:	83 ec 0c             	sub    esp,0xc
c0016ada:	68 56 46 02 c0       	push   0xc0024656
c0016adf:	eb 34                	jmp    c0016b15 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016ae1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016ae9:	83 ec 0c             	sub    esp,0xc
c0016aec:	6a 34                	push   0x34
c0016aee:	e8 d0 2e ff ff       	call   c00099c3 <malloc>
c0016af3:	59                   	pop    ecx
c0016af4:	89 c7                	mov    edi,eax
c0016af6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016afa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016afc:	56                   	push   esi
c0016afd:	57                   	push   edi
c0016afe:	6a 00                	push   0x0
c0016b00:	6a 34                	push   0x34
c0016b02:	53                   	push   ebx
c0016b03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b06:	83 c4 20             	add    esp,0x20
c0016b09:	85 c0                	test   eax,eax
c0016b0b:	74 17                	je     c0016b24 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	68 6d 46 02 c0       	push   0xc002466d
c0016b15:	e8 0f d8 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	31 c0                	xor    eax,eax
c0016b1f:	e9 31 02 00 00       	jmp    c0016d55 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b24:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b2a:	75 e1                	jne    c0016b0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b2c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b2f:	85 c0                	test   eax,eax
c0016b31:	74 da                	je     c0016b0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b33:	52                   	push   edx
c0016b34:	31 d2                	xor    edx,edx
c0016b36:	52                   	push   edx
c0016b37:	50                   	push   eax
c0016b38:	53                   	push   ebx
c0016b39:	e8 b6 65 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	85 c0                	test   eax,eax
c0016b43:	75 c8                	jne    c0016b0d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b45:	83 ec 0c             	sub    esp,0xc
c0016b48:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b4c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b50:	31 ed                	xor    ebp,ebp
c0016b52:	0f af c2             	imul   eax,edx
c0016b55:	50                   	push   eax
c0016b56:	e8 68 2e ff ff       	call   c00099c3 <malloc>
c0016b5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b61:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b68:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b6c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b70:	0f af c2             	imul   eax,edx
c0016b73:	99                   	cdq    
c0016b74:	52                   	push   edx
c0016b75:	50                   	push   eax
c0016b76:	53                   	push   ebx
c0016b77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b7a:	83 c4 20             	add    esp,0x20
c0016b7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b9d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016ba1:	0f 86 aa 00 00 00    	jbe    c0016c51 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016ba7:	0f b7 f5             	movzx  esi,bp
c0016baa:	6b f6 28             	imul   esi,esi,0x28
c0016bad:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016bb1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016bb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bb8:	50                   	push   eax
c0016bb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bbd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016bc1:	8b 16                	mov    edx,DWORD PTR [esi]
c0016bc3:	6b c0 28             	imul   eax,eax,0x28
c0016bc6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016bca:	89 d0                	mov    eax,edx
c0016bcc:	31 d2                	xor    edx,edx
c0016bce:	52                   	push   edx
c0016bcf:	50                   	push   eax
c0016bd0:	53                   	push   ebx
c0016bd1:	e8 1e 65 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016bd6:	83 c4 0c             	add    esp,0xc
c0016bd9:	6a 20                	push   0x20
c0016bdb:	6a 00                	push   0x0
c0016bdd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016be1:	52                   	push   edx
c0016be2:	e8 9d 9a fe ff       	call   c0000684 <memset>
c0016be7:	58                   	pop    eax
c0016be8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bea:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bee:	51                   	push   ecx
c0016bef:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bf3:	52                   	push   edx
c0016bf4:	6a 00                	push   0x0
c0016bf6:	6a 1f                	push   0x1f
c0016bf8:	53                   	push   ebx
c0016bf9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bfc:	83 c4 18             	add    esp,0x18
c0016bff:	68 84 46 02 c0       	push   0xc0024684
c0016c04:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c08:	52                   	push   edx
c0016c09:	e8 be 9b fe ff       	call   c00007cc <strcmp>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	85 c0                	test   eax,eax
c0016c13:	75 0f                	jne    c0016c24 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c15:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c24:	50                   	push   eax
c0016c25:	50                   	push   eax
c0016c26:	68 8c 46 02 c0       	push   0xc002468c
c0016c2b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c2f:	50                   	push   eax
c0016c30:	e8 97 9b fe ff       	call   c00007cc <strcmp>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	85 c0                	test   eax,eax
c0016c3a:	75 0f                	jne    c0016c4b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c4b:	45                   	inc    ebp
c0016c4c:	e9 4c ff ff ff       	jmp    c0016b9d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c51:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c56:	75 10                	jne    c0016c68 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	68 94 46 02 c0       	push   0xc0024694
c0016c60:	e8 c4 d6 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c6d:	75 10                	jne    c0016c7f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c6f:	83 ec 0c             	sub    esp,0xc
c0016c72:	68 94 46 02 c0       	push   0xc0024694
c0016c77:	e8 ad d6 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0016c7c:	83 c4 10             	add    esp,0x10
c0016c7f:	31 d2                	xor    edx,edx
c0016c81:	50                   	push   eax
c0016c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c86:	52                   	push   edx
c0016c87:	50                   	push   eax
c0016c88:	53                   	push   ebx
c0016c89:	e8 66 64 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016c8e:	5a                   	pop    edx
c0016c8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c93:	e8 2b 2d ff ff       	call   c00099c3 <malloc>
c0016c98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ca0:	31 c9                	xor    ecx,ecx
c0016ca2:	5e                   	pop    esi
c0016ca3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ca5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016ca9:	55                   	push   ebp
c0016caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cae:	51                   	push   ecx
c0016caf:	52                   	push   edx
c0016cb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cb4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016cb8:	53                   	push   ebx
c0016cb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cbc:	83 c4 14             	add    esp,0x14
c0016cbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016cc3:	e8 fb 2c ff ff       	call   c00099c3 <malloc>
c0016cc8:	89 c6                	mov    esi,eax
c0016cca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ccc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ccf:	56                   	push   esi
c0016cd0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016cd4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cd8:	51                   	push   ecx
c0016cd9:	52                   	push   edx
c0016cda:	53                   	push   ebx
c0016cdb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ce2:	8b 15 a0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278a0
c0016ce8:	83 c4 1c             	add    esp,0x1c
c0016ceb:	c1 e8 04             	shr    eax,0x4
c0016cee:	89 04 95 20 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd88e0],eax
c0016cf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cf9:	31 d2                	xor    edx,edx
c0016cfb:	52                   	push   edx
c0016cfc:	50                   	push   eax
c0016cfd:	53                   	push   ebx
c0016cfe:	e8 f1 63 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016d03:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d05:	31 d2                	xor    edx,edx
c0016d07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d0a:	56                   	push   esi
c0016d0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d0f:	52                   	push   edx
c0016d10:	50                   	push   eax
c0016d11:	53                   	push   ebx
c0016d12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d15:	83 c4 14             	add    esp,0x14
c0016d18:	53                   	push   ebx
c0016d19:	e8 76 63 ff ff       	call   c000d094 <File::close()>
c0016d1e:	5d                   	pop    ebp
c0016d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d23:	e8 ab 2c ff ff       	call   c00099d3 <free>
c0016d28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d2b:	e8 a3 2c ff ff       	call   c00099d3 <free>
c0016d30:	a1 a0 78 02 c0       	mov    eax,ds:0xc00278a0
c0016d35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d39:	8d 50 01             	lea    edx,[eax+0x1]
c0016d3c:	89 0c 85 20 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87e0],ecx
c0016d43:	89 34 85 a0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8860],esi
c0016d4a:	89 15 a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,edx
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	b0 01                	mov    al,0x1
c0016d55:	83 c4 5c             	add    esp,0x5c
c0016d58:	5b                   	pop    ebx
c0016d59:	5e                   	pop    esi
c0016d5a:	5f                   	pop    edi
c0016d5b:	5d                   	pop    ebp
c0016d5c:	c3                   	ret    

c0016d5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d5d:	55                   	push   ebp
c0016d5e:	57                   	push   edi
c0016d5f:	56                   	push   esi
c0016d60:	53                   	push   ebx
c0016d61:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d67:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d6e:	8b 1d f0 78 02 c0    	mov    ebx,DWORD PTR ds:0xc00278f0
c0016d74:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d78:	68 14 01 00 00       	push   0x114
c0016d7d:	e8 41 2c ff ff       	call   c00099c3 <malloc>
c0016d82:	83 c4 0c             	add    esp,0xc
c0016d85:	89 c5                	mov    ebp,eax
c0016d87:	53                   	push   ebx
c0016d88:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d8f:	50                   	push   eax
c0016d90:	e8 3d 62 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0016d95:	5e                   	pop    esi
c0016d96:	5f                   	pop    edi
c0016d97:	6a 01                	push   0x1
c0016d99:	55                   	push   ebp
c0016d9a:	e8 97 62 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	85 c0                	test   eax,eax
c0016da4:	0f 85 a7 06 00 00    	jne    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016daa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	6a 34                	push   0x34
c0016db7:	e8 07 2c ff ff       	call   c00099c3 <malloc>
c0016dbc:	5b                   	pop    ebx
c0016dbd:	89 c7                	mov    edi,eax
c0016dbf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016dc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dc6:	53                   	push   ebx
c0016dc7:	57                   	push   edi
c0016dc8:	6a 00                	push   0x0
c0016dca:	6a 34                	push   0x34
c0016dcc:	55                   	push   ebp
c0016dcd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dd0:	83 c4 20             	add    esp,0x20
c0016dd3:	85 c0                	test   eax,eax
c0016dd5:	0f 85 76 06 00 00    	jne    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ddb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016de1:	0f 85 6a 06 00 00    	jne    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016de7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016dea:	85 c0                	test   eax,eax
c0016dec:	0f 84 5f 06 00 00    	je     c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016df2:	31 d2                	xor    edx,edx
c0016df4:	51                   	push   ecx
c0016df5:	52                   	push   edx
c0016df6:	50                   	push   eax
c0016df7:	55                   	push   ebp
c0016df8:	e8 f7 62 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	85 c0                	test   eax,eax
c0016e02:	0f 85 49 06 00 00    	jne    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e12:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e1a:	0f af c2             	imul   eax,edx
c0016e1d:	50                   	push   eax
c0016e1e:	e8 a0 2b ff ff       	call   c00099c3 <malloc>
c0016e23:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e31:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e35:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e39:	0f af c2             	imul   eax,edx
c0016e3c:	99                   	cdq    
c0016e3d:	52                   	push   edx
c0016e3e:	50                   	push   eax
c0016e3f:	55                   	push   ebp
c0016e40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e43:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e46:	83 c4 20             	add    esp,0x20
c0016e49:	85 c0                	test   eax,eax
c0016e4b:	0f 84 00 06 00 00    	je     c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e51:	52                   	push   edx
c0016e52:	31 d2                	xor    edx,edx
c0016e54:	52                   	push   edx
c0016e55:	50                   	push   eax
c0016e56:	55                   	push   ebp
c0016e57:	e8 98 62 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016e5c:	83 c4 10             	add    esp,0x10
c0016e5f:	85 c0                	test   eax,eax
c0016e61:	0f 85 ea 05 00 00    	jne    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e67:	83 ec 0c             	sub    esp,0xc
c0016e6a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e6e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e72:	31 f6                	xor    esi,esi
c0016e74:	0f af c2             	imul   eax,edx
c0016e77:	50                   	push   eax
c0016e78:	e8 46 2b ff ff       	call   c00099c3 <malloc>
c0016e7d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e8b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e8f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e93:	0f af c2             	imul   eax,edx
c0016e96:	99                   	cdq    
c0016e97:	52                   	push   edx
c0016e98:	50                   	push   eax
c0016e99:	55                   	push   ebp
c0016e9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e9d:	83 c4 20             	add    esp,0x20
c0016ea0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016ea4:	0f 86 8a 00 00 00    	jbe    c0016f34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016eaa:	0f b7 de             	movzx  ebx,si
c0016ead:	c1 e3 05             	shl    ebx,0x5
c0016eb0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016eb4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016eb7:	75 75                	jne    c0016f2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016eb9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ebc:	31 d2                	xor    edx,edx
c0016ebe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ec2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec9:	50                   	push   eax
c0016eca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016ecd:	52                   	push   edx
c0016ece:	50                   	push   eax
c0016ecf:	55                   	push   ebp
c0016ed0:	e8 1f 62 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016ed5:	83 c4 10             	add    esp,0x10
c0016ed8:	85 c0                	test   eax,eax
c0016eda:	0f 85 71 05 00 00    	jne    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ee0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ee7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016eea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016eee:	31 d2                	xor    edx,edx
c0016ef0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ef4:	83 ec 0c             	sub    esp,0xc
c0016ef7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016efb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f02:	50                   	push   eax
c0016f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f0b:	52                   	push   edx
c0016f0c:	50                   	push   eax
c0016f0d:	55                   	push   ebp
c0016f0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f11:	83 c4 1c             	add    esp,0x1c
c0016f14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f17:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f1a:	50                   	push   eax
c0016f1b:	6a 00                	push   0x0
c0016f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f21:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f25:	50                   	push   eax
c0016f26:	e8 59 97 fe ff       	call   c0000684 <memset>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	46                   	inc    esi
c0016f2f:	e9 6c ff ff ff       	jmp    c0016ea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f34:	53                   	push   ebx
c0016f35:	31 db                	xor    ebx,ebx
c0016f37:	68 00 01 00 00       	push   0x100
c0016f3c:	6a 00                	push   0x0
c0016f3e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f42:	50                   	push   eax
c0016f43:	e8 3c 97 fe ff       	call   c0000684 <memset>
c0016f48:	83 c4 0c             	add    esp,0xc
c0016f4b:	68 00 01 00 00       	push   0x100
c0016f50:	6a 00                	push   0x0
c0016f52:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f59:	50                   	push   eax
c0016f5a:	e8 25 97 fe ff       	call   c0000684 <memset>
c0016f5f:	83 c4 10             	add    esp,0x10
c0016f62:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f72:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f8a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f8e:	0f 86 30 01 00 00    	jbe    c00170c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f94:	0f b7 f3             	movzx  esi,bx
c0016f97:	6b f6 28             	imul   esi,esi,0x28
c0016f9a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016f9e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016fa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fa5:	52                   	push   edx
c0016fa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016faa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016fae:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fb0:	6b d2 28             	imul   edx,edx,0x28
c0016fb3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016fb7:	31 d2                	xor    edx,edx
c0016fb9:	52                   	push   edx
c0016fba:	50                   	push   eax
c0016fbb:	55                   	push   ebp
c0016fbc:	e8 33 61 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c0016fc1:	83 c4 0c             	add    esp,0xc
c0016fc4:	6a 20                	push   0x20
c0016fc6:	6a 00                	push   0x0
c0016fc8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fcf:	51                   	push   ecx
c0016fd0:	e8 af 96 fe ff       	call   c0000684 <memset>
c0016fd5:	59                   	pop    ecx
c0016fd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fd9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fdd:	52                   	push   edx
c0016fde:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fe5:	51                   	push   ecx
c0016fe6:	6a 00                	push   0x0
c0016fe8:	6a 1f                	push   0x1f
c0016fea:	55                   	push   ebp
c0016feb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fee:	83 c4 1c             	add    esp,0x1c
c0016ff1:	6a 09                	push   0x9
c0016ff3:	68 ae 46 02 c0       	push   0xc00246ae
c0016ff8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fff:	51                   	push   ecx
c0017000:	e8 7b 95 fe ff       	call   c0000580 <memcmp>
c0017005:	83 c4 10             	add    esp,0x10
c0017008:	85 c0                	test   eax,eax
c001700a:	75 21                	jne    c001702d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001700c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017010:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017014:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017018:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001701c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001701f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017026:	89 d0                	mov    eax,edx
c0017028:	40                   	inc    eax
c0017029:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001702d:	50                   	push   eax
c001702e:	6a 09                	push   0x9
c0017030:	68 b8 46 02 c0       	push   0xc00246b8
c0017035:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001703c:	50                   	push   eax
c001703d:	e8 3e 95 fe ff       	call   c0000580 <memcmp>
c0017042:	83 c4 10             	add    esp,0x10
c0017045:	85 c0                	test   eax,eax
c0017047:	75 21                	jne    c001706a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001704d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017051:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017055:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017059:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001705c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017063:	89 d0                	mov    eax,edx
c0017065:	40                   	inc    eax
c0017066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001706a:	50                   	push   eax
c001706b:	50                   	push   eax
c001706c:	68 84 46 02 c0       	push   0xc0024684
c0017071:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017078:	50                   	push   eax
c0017079:	e8 4e 97 fe ff       	call   c00007cc <strcmp>
c001707e:	83 c4 10             	add    esp,0x10
c0017081:	85 c0                	test   eax,eax
c0017083:	75 0f                	jne    c0017094 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017085:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017088:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001708c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017094:	50                   	push   eax
c0017095:	50                   	push   eax
c0017096:	68 8c 46 02 c0       	push   0xc002468c
c001709b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170a2:	50                   	push   eax
c00170a3:	e8 24 97 fe ff       	call   c00007cc <strcmp>
c00170a8:	83 c4 10             	add    esp,0x10
c00170ab:	85 c0                	test   eax,eax
c00170ad:	75 0f                	jne    c00170be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00170af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170be:	43                   	inc    ebx
c00170bf:	e9 c6 fe ff ff       	jmp    c0016f8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00170c4:	31 d2                	xor    edx,edx
c00170c6:	50                   	push   eax
c00170c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170cb:	52                   	push   edx
c00170cc:	50                   	push   eax
c00170cd:	55                   	push   ebp
c00170ce:	e8 21 60 ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c00170d3:	58                   	pop    eax
c00170d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170d8:	e8 e6 28 ff ff       	call   c00099c3 <malloc>
c00170dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170e4:	31 d2                	xor    edx,edx
c00170e6:	58                   	pop    eax
c00170e7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170eb:	53                   	push   ebx
c00170ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170f4:	52                   	push   edx
c00170f5:	50                   	push   eax
c00170f6:	55                   	push   ebp
c00170f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170fa:	83 c4 14             	add    esp,0x14
c00170fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017101:	e8 bd 28 ff ff       	call   c00099c3 <malloc>
c0017106:	31 d2                	xor    edx,edx
c0017108:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001710c:	83 c4 0c             	add    esp,0xc
c001710f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017113:	52                   	push   edx
c0017114:	50                   	push   eax
c0017115:	55                   	push   ebp
c0017116:	e8 d9 5f ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c001711b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001711e:	31 d2                	xor    edx,edx
c0017120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017123:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017127:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001712b:	52                   	push   edx
c001712c:	50                   	push   eax
c001712d:	55                   	push   ebp
c001712e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017131:	83 c4 20             	add    esp,0x20
c0017134:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001713c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017140:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017144:	0f 84 0b 03 00 00    	je     c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001714a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017151:	31 d2                	xor    edx,edx
c0017153:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017157:	c1 e8 03             	shr    eax,0x3
c001715a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001715e:	51                   	push   ecx
c001715f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017163:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017167:	52                   	push   edx
c0017168:	50                   	push   eax
c0017169:	55                   	push   ebp
c001716a:	e8 85 5f ff ff       	call   c000d0f4 <File::seek(unsigned long long)>
c001716f:	5b                   	pop    ebx
c0017170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017174:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001717b:	e8 43 28 ff ff       	call   c00099c3 <malloc>
c0017180:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017187:	31 d2                	xor    edx,edx
c0017189:	5e                   	pop    esi
c001718a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001718e:	50                   	push   eax
c001718f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017193:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017197:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001719e:	52                   	push   edx
c001719f:	50                   	push   eax
c00171a0:	55                   	push   ebp
c00171a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171a4:	83 c4 20             	add    esp,0x20
c00171a7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00171af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00171b3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00171b7:	0f 8d 7c 02 00 00    	jge    c0017439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00171bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00171ca:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171cd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171d5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171d9:	89 d8                	mov    eax,ebx
c00171db:	c1 e8 08             	shr    eax,0x8
c00171de:	89 c6                	mov    esi,eax
c00171e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171e4:	c1 e6 04             	shl    esi,0x4
c00171e7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171eb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171ee:	85 d2                	test   edx,edx
c00171f0:	0f 85 bf 00 00 00    	jne    c00172b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171f6:	83 ec 0c             	sub    esp,0xc
c00171f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171fd:	03 06                	add    eax,DWORD PTR [esi]
c00171ff:	50                   	push   eax
c0017200:	e8 4b f8 ff ff       	call   c0016a50 <Thr::getAddressOfKernelSymbol(char const*)>
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	89 c2                	mov    edx,eax
c001720a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001720f:	85 c0                	test   eax,eax
c0017211:	0f 85 9e 00 00 00    	jne    c00172b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017217:	83 ec 0c             	sub    esp,0xc
c001721a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001721e:	03 06                	add    eax,DWORD PTR [esi]
c0017220:	50                   	push   eax
c0017221:	e8 ea 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	89 c2                	mov    edx,eax
c001722b:	85 c0                	test   eax,eax
c001722d:	0f 85 82 00 00 00    	jne    c00172b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017233:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017237:	50                   	push   eax
c0017238:	50                   	push   eax
c0017239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001723d:	03 06                	add    eax,DWORD PTR [esi]
c001723f:	50                   	push   eax
c0017240:	68 c2 46 02 c0       	push   0xc00246c2
c0017245:	e8 1d 58 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001724a:	58                   	pop    eax
c001724b:	5a                   	pop    edx
c001724c:	68 dc 46 02 c0       	push   0xc00246dc
c0017251:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017258:	50                   	push   eax
c0017259:	e8 e2 94 fe ff       	call   c0000740 <strcpy>
c001725e:	59                   	pop    ecx
c001725f:	58                   	pop    eax
c0017260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017264:	03 06                	add    eax,DWORD PTR [esi]
c0017266:	50                   	push   eax
c0017267:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001726e:	50                   	push   eax
c001726f:	e8 0c 96 fe ff       	call   c0000880 <strcat>
c0017274:	58                   	pop    eax
c0017275:	5a                   	pop    edx
c0017276:	68 72 47 02 c0       	push   0xc0024772
c001727b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017282:	50                   	push   eax
c0017283:	e8 f8 95 fe ff       	call   c0000880 <strcat>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017290:	0f 84 5d 01 00 00    	je     c00173f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172a0:	50                   	push   eax
c00172a1:	e8 83 d0 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00172ad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00172b5:	80 fb 01             	cmp    bl,0x1
c00172b8:	0f 85 88 00 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00172be:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00172c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172c9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172cd:	01 ce                	add    esi,ecx
c00172cf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172d5:	0f 94 c0             	sete   al
c00172d8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172de:	0f 94 c3             	sete   bl
c00172e1:	09 c3                	or     ebx,eax
c00172e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00172e5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172ea:	74 41                	je     c001732d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172ec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172ef:	84 db                	test   bl,bl
c00172f1:	75 15                	jne    c0017308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172f7:	66 83 f8 0c          	cmp    ax,0xc
c00172fb:	76 05                	jbe    c0017302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00172fd:	b8 0c 00 00 00       	mov    eax,0xc
c0017302:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017306:	76 37                	jbe    c001733f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017308:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001730c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017311:	0f 84 dc 00 00 00    	je     c00173f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017317:	83 ec 0c             	sub    esp,0xc
c001731a:	68 f3 46 02 c0       	push   0xc00246f3
c001731f:	e8 05 d0 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001732b:	eb 12                	jmp    c001733f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001732d:	01 c1                	add    ecx,eax
c001732f:	84 db                	test   bl,bl
c0017331:	75 0c                	jne    c001733f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017333:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017337:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001733b:	77 02                	ja     c001733f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001733d:	01 d1                	add    ecx,edx
c001733f:	89 0e                	mov    DWORD PTR [esi],ecx
c0017341:	e9 ea 00 00 00       	jmp    c0017430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017346:	80 fb 02             	cmp    bl,0x2
c0017349:	75 7c                	jne    c00173c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001734b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017352:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017356:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001735a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017360:	74 20                	je     c0017382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017362:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017368:	74 18                	je     c0017382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001736a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001736e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017373:	66 83 f8 0e          	cmp    ax,0xe
c0017377:	77 03                	ja     c001737c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017379:	8d 48 fc             	lea    ecx,[eax-0x4]
c001737c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017380:	76 1f                	jbe    c00173a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017382:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017386:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001738b:	74 66                	je     c00173f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001738d:	83 ec 0c             	sub    esp,0xc
c0017390:	68 0f 47 02 c0       	push   0xc002470f
c0017395:	e8 8f cf ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00173a3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00173a8:	74 13                	je     c00173bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00173aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173ae:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00173b5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00173b9:	01 c8                	add    eax,ecx
c00173bb:	eb 04                	jmp    c00173c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00173bd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00173c1:	01 c2                	add    edx,eax
c00173c3:	89 16                	mov    DWORD PTR [esi],edx
c00173c5:	eb 69                	jmp    c0017430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173c7:	0f b6 db             	movzx  ebx,bl
c00173ca:	50                   	push   eax
c00173cb:	50                   	push   eax
c00173cc:	53                   	push   ebx
c00173cd:	68 2b 47 02 c0       	push   0xc002472b
c00173d2:	e8 90 56 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00173d7:	83 c4 10             	add    esp,0x10
c00173da:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173df:	74 12                	je     c00173f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173e1:	83 ec 0c             	sub    esp,0xc
c00173e4:	68 36 47 02 c0       	push   0xc0024736
c00173e9:	e8 3b cf ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00173ee:	83 c4 10             	add    esp,0x10
c00173f1:	eb 3d                	jmp    c0017430 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173f3:	83 ec 0c             	sub    esp,0xc
c00173f6:	55                   	push   ebp
c00173f7:	e8 98 5c ff ff       	call   c000d094 <File::close()>
c00173fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017402:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017405:	59                   	pop    ecx
c0017406:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001740a:	e8 c4 25 ff ff       	call   c00099d3 <free>
c001740f:	5b                   	pop    ebx
c0017410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017414:	e8 ba 25 ff ff       	call   c00099d3 <free>
c0017419:	89 3c 24             	mov    DWORD PTR [esp],edi
c001741c:	e8 b2 25 ff ff       	call   c00099d3 <free>
c0017421:	5e                   	pop    esi
c0017422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017426:	e8 a8 25 ff ff       	call   c00099d3 <free>
c001742b:	83 c4 10             	add    esp,0x10
c001742e:	eb 21                	jmp    c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017430:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017434:	e9 76 fd ff ff       	jmp    c00171af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017439:	83 ec 0c             	sub    esp,0xc
c001743c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017440:	e8 8e 25 ff ff       	call   c00099d3 <free>
c0017445:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017449:	83 c4 10             	add    esp,0x10
c001744c:	e9 eb fc ff ff       	jmp    c001713c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017451:	31 c0                	xor    eax,eax
c0017453:	eb 33                	jmp    c0017488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017455:	83 ec 0c             	sub    esp,0xc
c0017458:	55                   	push   ebp
c0017459:	e8 36 5c ff ff       	call   c000d094 <File::close()>
c001745e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017461:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017464:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017467:	58                   	pop    eax
c0017468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001746c:	e8 62 25 ff ff       	call   c00099d3 <free>
c0017471:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017474:	e8 5a 25 ff ff       	call   c00099d3 <free>
c0017479:	5a                   	pop    edx
c001747a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747e:	e8 50 25 ff ff       	call   c00099d3 <free>
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	b0 01                	mov    al,0x1
c0017488:	81 c4 5c 03 00 00    	add    esp,0x35c
c001748e:	5b                   	pop    ebx
c001748f:	5e                   	pop    esi
c0017490:	5f                   	pop    edi
c0017491:	5d                   	pop    ebp
c0017492:	c3                   	ret    

c0017493 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017493:	56                   	push   esi
c0017494:	31 d2                	xor    edx,edx
c0017496:	53                   	push   ebx
c0017497:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c001749d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174a1:	39 d3                	cmp    ebx,edx
c00174a3:	7e 1b                	jle    c00174c0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00174a5:	8b 04 95 20 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8ce0]
c00174ac:	39 c8                	cmp    eax,ecx
c00174ae:	77 0d                	ja     c00174bd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00174b0:	8b 34 95 20 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8ee0]
c00174b7:	01 c6                	add    esi,eax
c00174b9:	39 ce                	cmp    esi,ecx
c00174bb:	77 05                	ja     c00174c2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00174bd:	42                   	inc    edx
c00174be:	eb e1                	jmp    c00174a1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00174c0:	31 c0                	xor    eax,eax
c00174c2:	5b                   	pop    ebx
c00174c3:	5e                   	pop    esi
c00174c4:	c3                   	ret    

c00174c5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00174c5:	53                   	push   ebx
c00174c6:	31 c0                	xor    eax,eax
c00174c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174cc:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c00174d2:	39 c3                	cmp    ebx,eax
c00174d4:	7e 22                	jle    c00174f8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174d6:	8b 14 85 20 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8ce0]
c00174dd:	39 ca                	cmp    edx,ecx
c00174df:	77 14                	ja     c00174f5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174e1:	03 14 85 20 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8ee0]
c00174e8:	39 ca                	cmp    edx,ecx
c00174ea:	76 09                	jbe    c00174f5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174ec:	8b 04 85 20 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ae0]
c00174f3:	eb 05                	jmp    c00174fa <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174f5:	40                   	inc    eax
c00174f6:	eb da                	jmp    c00174d2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174f8:	31 c0                	xor    eax,eax
c00174fa:	5b                   	pop    ebx
c00174fb:	c3                   	ret    

c00174fc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174fc:	53                   	push   ebx
c00174fd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017501:	53                   	push   ebx
c0017502:	e8 8c ff ff ff       	call   c0017493 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017507:	5a                   	pop    edx
c0017508:	31 d2                	xor    edx,edx
c001750a:	85 c0                	test   eax,eax
c001750c:	74 04                	je     c0017512 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001750e:	89 da                	mov    edx,ebx
c0017510:	29 c2                	sub    edx,eax
c0017512:	89 d0                	mov    eax,edx
c0017514:	5b                   	pop    ebx
c0017515:	c3                   	ret    

c0017516 <Thr::loadDLL(char const*, bool)>:
c0017516:	55                   	push   ebp
c0017517:	57                   	push   edi
c0017518:	56                   	push   esi
c0017519:	53                   	push   ebx
c001751a:	81 ec 34 01 00 00    	sub    esp,0x134
c0017520:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017527:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001752e:	56                   	push   esi
c001752f:	68 4e 47 02 c0       	push   0xc002474e
c0017534:	e8 2e 55 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0017539:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017540:	e8 7e 24 ff ff       	call   c00099c3 <malloc>
c0017545:	83 c4 0c             	add    esp,0xc
c0017548:	89 c3                	mov    ebx,eax
c001754a:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0017550:	56                   	push   esi
c0017551:	50                   	push   eax
c0017552:	e8 7b 5a ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	85 db                	test   ebx,ebx
c001755c:	75 3c                	jne    c001759a <Thr::loadDLL(char const*, bool)+0x84>
c001755e:	89 f8                	mov    eax,edi
c0017560:	84 c0                	test   al,al
c0017562:	0f 84 d2 01 00 00    	je     c001773a <Thr::loadDLL(char const*, bool)+0x224>
c0017568:	55                   	push   ebp
c0017569:	55                   	push   ebp
c001756a:	68 5f 47 02 c0       	push   0xc002475f
c001756f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017573:	55                   	push   ebp
c0017574:	e8 c7 91 fe ff       	call   c0000740 <strcpy>
c0017579:	58                   	pop    eax
c001757a:	5a                   	pop    edx
c001757b:	56                   	push   esi
c001757c:	55                   	push   ebp
c001757d:	e8 fe 92 fe ff       	call   c0000880 <strcat>
c0017582:	59                   	pop    ecx
c0017583:	58                   	pop    eax
c0017584:	68 72 47 02 c0       	push   0xc0024772
c0017589:	55                   	push   ebp
c001758a:	e8 f1 92 fe ff       	call   c0000880 <strcat>
c001758f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017592:	e8 92 cd ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	51                   	push   ecx
c001759b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001759f:	50                   	push   eax
c00175a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175a4:	50                   	push   eax
c00175a5:	53                   	push   ebx
c00175a6:	e8 37 5d ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	85 db                	test   ebx,ebx
c00175b0:	74 0c                	je     c00175be <Thr::loadDLL(char const*, bool)+0xa8>
c00175b2:	83 ec 0c             	sub    esp,0xc
c00175b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175b7:	53                   	push   ebx
c00175b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00175c3:	75 0a                	jne    c00175cf <Thr::loadDLL(char const*, bool)+0xb9>
c00175c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175c9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175cd:	75 3c                	jne    c001760b <Thr::loadDLL(char const*, bool)+0xf5>
c00175cf:	89 f8                	mov    eax,edi
c00175d1:	84 c0                	test   al,al
c00175d3:	0f 84 49 01 00 00    	je     c0017722 <Thr::loadDLL(char const*, bool)+0x20c>
c00175d9:	51                   	push   ecx
c00175da:	51                   	push   ecx
c00175db:	68 5f 47 02 c0       	push   0xc002475f
c00175e0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175e4:	53                   	push   ebx
c00175e5:	e8 56 91 fe ff       	call   c0000740 <strcpy>
c00175ea:	5d                   	pop    ebp
c00175eb:	58                   	pop    eax
c00175ec:	56                   	push   esi
c00175ed:	53                   	push   ebx
c00175ee:	e8 8d 92 fe ff       	call   c0000880 <strcat>
c00175f3:	58                   	pop    eax
c00175f4:	5a                   	pop    edx
c00175f5:	68 72 47 02 c0       	push   0xc0024772
c00175fa:	53                   	push   ebx
c00175fb:	e8 80 92 fe ff       	call   c0000880 <strcat>
c0017600:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017603:	e8 21 cd ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0017608:	83 c4 10             	add    esp,0x10
c001760b:	52                   	push   edx
c001760c:	6a 03                	push   0x3
c001760e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017612:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017616:	05 ff 0f 00 00       	add    eax,0xfff
c001761b:	83 d2 00             	adc    edx,0x0
c001761e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017622:	50                   	push   eax
c0017623:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c0017629:	e8 10 48 ff ff       	call   c000be3e <VAS::allocatePages(int, int)>
c001762e:	59                   	pop    ecx
c001762f:	89 c3                	mov    ebx,eax
c0017631:	5d                   	pop    ebp
c0017632:	50                   	push   eax
c0017633:	68 da 28 02 c0       	push   0xc00228da
c0017638:	e8 2a 54 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001763d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017640:	e8 5b 90 fe ff       	call   c00006a0 <strlen>
c0017645:	8b 2d 00 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027100
c001764b:	40                   	inc    eax
c001764c:	89 04 24             	mov    DWORD PTR [esp],eax
c001764f:	e8 6f 23 ff ff       	call   c00099c3 <malloc>
c0017654:	89 04 ad 20 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8ae0],eax
c001765b:	58                   	pop    eax
c001765c:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0017661:	5a                   	pop    edx
c0017662:	56                   	push   esi
c0017663:	ff 34 85 20 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ae0]
c001766a:	e8 d1 90 fe ff       	call   c0000740 <strcpy>
c001766f:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0017674:	8d 50 01             	lea    edx,[eax+0x1]
c0017677:	89 1c 85 20 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ce0],ebx
c001767e:	89 15 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,edx
c0017684:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017688:	83 c4 0c             	add    esp,0xc
c001768b:	89 14 85 20 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ee0],edx
c0017692:	6a 01                	push   0x1
c0017694:	53                   	push   ebx
c0017695:	56                   	push   esi
c0017696:	e8 c2 f6 ff ff       	call   c0016d5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001769b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001769f:	83 c4 10             	add    esp,0x10
c00176a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176a7:	0f 85 89 00 00 00    	jne    c0017736 <Thr::loadDLL(char const*, bool)+0x220>
c00176ad:	89 f8                	mov    eax,edi
c00176af:	84 c0                	test   al,al
c00176b1:	74 73                	je     c0017726 <Thr::loadDLL(char const*, bool)+0x210>
c00176b3:	83 ec 0c             	sub    esp,0xc
c00176b6:	68 74 47 02 c0       	push   0xc0024774
c00176bb:	e8 69 cc ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00176c0:	83 c4 10             	add    esp,0x10
c00176c3:	eb 61                	jmp    c0017726 <Thr::loadDLL(char const*, bool)+0x210>
c00176c5:	50                   	push   eax
c00176c6:	50                   	push   eax
c00176c7:	89 e8                	mov    eax,ebp
c00176c9:	c1 e0 0c             	shl    eax,0xc
c00176cc:	01 d8                	add    eax,ebx
c00176ce:	50                   	push   eax
c00176cf:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c00176d5:	e8 cc 42 ff ff       	call   c000b9a6 <VAS::getPageTableEntry(unsigned long)>
c00176da:	83 c4 10             	add    esp,0x10
c00176dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00176df:	a8 60                	test   al,0x60
c00176e1:	75 11                	jne    c00176f4 <Thr::loadDLL(char const*, bool)+0x1de>
c00176e3:	83 ec 0c             	sub    esp,0xc
c00176e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176eb:	50                   	push   eax
c00176ec:	e8 69 26 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c00176f1:	83 c4 10             	add    esp,0x10
c00176f4:	45                   	inc    ebp
c00176f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176fd:	05 ff 0f 00 00       	add    eax,0xfff
c0017702:	bf 00 00 00 00       	mov    edi,0x0
c0017707:	83 d2 00             	adc    edx,0x0
c001770a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001770e:	c1 ea 0c             	shr    edx,0xc
c0017711:	39 c5                	cmp    ebp,eax
c0017713:	89 d1                	mov    ecx,edx
c0017715:	89 f8                	mov    eax,edi
c0017717:	19 c8                	sbb    eax,ecx
c0017719:	72 aa                	jb     c00176c5 <Thr::loadDLL(char const*, bool)+0x1af>
c001771b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017720:	75 18                	jne    c001773a <Thr::loadDLL(char const*, bool)+0x224>
c0017722:	31 db                	xor    ebx,ebx
c0017724:	eb 14                	jmp    c001773a <Thr::loadDLL(char const*, bool)+0x224>
c0017726:	83 ec 0c             	sub    esp,0xc
c0017729:	68 93 47 02 c0       	push   0xc0024793
c001772e:	e8 f6 cb ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	31 ed                	xor    ebp,ebp
c0017738:	eb bb                	jmp    c00176f5 <Thr::loadDLL(char const*, bool)+0x1df>
c001773a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017740:	89 d8                	mov    eax,ebx
c0017742:	5b                   	pop    ebx
c0017743:	5e                   	pop    esi
c0017744:	5f                   	pop    edi
c0017745:	5d                   	pop    ebp
c0017746:	c3                   	ret    

c0017747 <Thr::executeDLL(unsigned long, void*)>:
c0017747:	56                   	push   esi
c0017748:	53                   	push   ebx
c0017749:	52                   	push   edx
c001774a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001774e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017752:	85 db                	test   ebx,ebx
c0017754:	75 10                	jne    c0017766 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017756:	83 ec 0c             	sub    esp,0xc
c0017759:	68 af 47 02 c0       	push   0xc00247af
c001775e:	e8 c6 cb ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	50                   	push   eax
c0017767:	50                   	push   eax
c0017768:	53                   	push   ebx
c0017769:	68 d9 47 02 c0       	push   0xc00247d9
c001776e:	e8 f4 52 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0017773:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017777:	89 d8                	mov    eax,ebx
c0017779:	83 c4 14             	add    esp,0x14
c001777c:	5b                   	pop    ebx
c001777d:	5e                   	pop    esi
c001777e:	ff e0                	jmp    eax

c0017780 <userModeEntryPoint(void*)>:
c0017780:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0017785:	48                   	dec    eax
c0017786:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001778b:	75 03                	jne    c0017790 <userModeEntryPoint(void*)+0x10>
c001778d:	fb                   	sti    
c001778e:	66 90                	xchg   ax,ax
c0017790:	fb                   	sti    
c0017791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017796:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017799:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001779f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177a3:	e9 b7 8a fe ff       	jmp    c000025f <goToUsermode>

c00177a8 <changeTSS>:
c00177a8:	83 ec 14             	sub    esp,0x14
c00177ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177b0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177b3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00177b8:	c1 e2 15             	shl    edx,0x15
c00177bb:	29 d0                	sub    eax,edx
c00177bd:	50                   	push   eax
c00177be:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00177c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177c9:	05 7c 11 00 00       	add    eax,0x117c
c00177ce:	50                   	push   eax
c00177cf:	e8 14 38 ff ff       	call   c000afe8 <TSS::setESP(unsigned long)>
c00177d4:	83 c4 1c             	add    esp,0x1c
c00177d7:	c3                   	ret    

c00177d8 <switchToThread(ThreadControlBlock*)>:
c00177d8:	57                   	push   edi
c00177d9:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00177de:	56                   	push   esi
c00177df:	85 c0                	test   eax,eax
c00177e1:	53                   	push   ebx
c00177e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177e6:	0f 85 90 00 00 00    	jne    c001787c <switchToThread(ThreadControlBlock*)+0xa4>
c00177ec:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177ef:	3c ff                	cmp    al,0xff
c00177f1:	0f 84 81 00 00 00    	je     c0017878 <switchToThread(ThreadControlBlock*)+0xa0>
c00177f7:	0f b6 d0             	movzx  edx,al
c00177fa:	b8 00 04 00 00       	mov    eax,0x400
c00177ff:	29 d0                	sub    eax,edx
c0017801:	d1 f8                	sar    eax,1
c0017803:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017806:	66 90                	xchg   ax,ax
c0017808:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001780b:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0017810:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017816:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001781d:	74 4d                	je     c001786c <switchToThread(ThreadControlBlock*)+0x94>
c001781f:	0f 31                	rdtsc  
c0017821:	a3 08 79 02 c0       	mov    ds:0xc0027908,eax
c0017826:	89 c6                	mov    esi,eax
c0017828:	89 d7                	mov    edi,edx
c001782a:	2b 35 f8 78 02 c0    	sub    esi,DWORD PTR ds:0xc00278f8
c0017830:	89 15 0c 79 02 c0    	mov    DWORD PTR ds:0xc002790c,edx
c0017836:	1b 3d fc 78 02 c0    	sbb    edi,DWORD PTR ds:0xc00278fc
c001783c:	89 35 00 79 02 c0    	mov    DWORD PTR ds:0xc0027900,esi
c0017842:	a3 f8 78 02 c0       	mov    ds:0xc00278f8,eax
c0017847:	89 3d 04 79 02 c0    	mov    DWORD PTR ds:0xc0027904,edi
c001784d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017853:	89 15 fc 78 02 c0    	mov    DWORD PTR ds:0xc00278fc,edx
c0017859:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001785c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001785f:	01 c6                	add    esi,eax
c0017861:	11 d7                	adc    edi,edx
c0017863:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017866:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017869:	8d 76 00             	lea    esi,[esi+0x0]
c001786c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017870:	5b                   	pop    ebx
c0017871:	5e                   	pop    esi
c0017872:	5f                   	pop    edi
c0017873:	e9 1f 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c0017878:	31 c0                	xor    eax,eax
c001787a:	eb 8c                	jmp    c0017808 <switchToThread(ThreadControlBlock*)+0x30>
c001787c:	5b                   	pop    ebx
c001787d:	c7 05 c0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x1
c0017887:	5e                   	pop    esi
c0017888:	5f                   	pop    edi
c0017889:	c3                   	ret    
c001788a:	66 90                	xchg   ax,ax

c001788c <Process::addArgs(char**)>:
c001788c:	57                   	push   edi
c001788d:	56                   	push   esi
c001788e:	53                   	push   ebx
c001788f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017893:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017897:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00178a1:	85 ff                	test   edi,edi
c00178a3:	74 43                	je     c00178e8 <Process::addArgs(char**)+0x5c>
c00178a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00178a7:	85 c0                	test   eax,eax
c00178a9:	74 3d                	je     c00178e8 <Process::addArgs(char**)+0x5c>
c00178ab:	31 db                	xor    ebx,ebx
c00178ad:	8d 76 00             	lea    esi,[esi+0x0]
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	50                   	push   eax
c00178b4:	e8 e7 8d fe ff       	call   c00006a0 <strlen>
c00178b9:	40                   	inc    eax
c00178ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00178bd:	e8 01 21 ff ff       	call   c00099c3 <malloc>
c00178c2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00178c9:	5a                   	pop    edx
c00178ca:	59                   	pop    ecx
c00178cb:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178ce:	43                   	inc    ebx
c00178cf:	50                   	push   eax
c00178d0:	e8 6b 8e fe ff       	call   c0000740 <strcpy>
c00178d5:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178e1:	85 c0                	test   eax,eax
c00178e3:	75 cb                	jne    c00178b0 <Process::addArgs(char**)+0x24>
c00178e5:	8d 76 00             	lea    esi,[esi+0x0]
c00178e8:	5b                   	pop    ebx
c00178e9:	5e                   	pop    esi
c00178ea:	5f                   	pop    edi
c00178eb:	c3                   	ret    

c00178ec <Process::Process(char const*, Process*, char**)>:
c00178ec:	56                   	push   esi
c00178ed:	53                   	push   ebx
c00178ee:	83 ec 14             	sub    esp,0x14
c00178f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f5:	05 0c 02 00 00       	add    eax,0x20c
c00178fa:	bb 07 00 00 00       	mov    ebx,0x7
c00178ff:	89 c6                	mov    esi,eax
c0017901:	8d 76 00             	lea    esi,[esi+0x0]
c0017904:	85 db                	test   ebx,ebx
c0017906:	78 14                	js     c001791c <Process::Process(char const*, Process*, char**)+0x30>
c0017908:	83 ec 0c             	sub    esp,0xc
c001790b:	56                   	push   esi
c001790c:	e8 1f 9f 00 00       	call   c0021830 <ThreadControlBlock::ThreadControlBlock()>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	83 c6 5f             	add    esi,0x5f
c0017917:	4b                   	dec    ebx
c0017918:	eb ea                	jmp    c0017904 <Process::Process(char const*, Process*, char**)+0x18>
c001791a:	66 90                	xchg   ax,ax
c001791c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017920:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017927:	83 ec 0c             	sub    esp,0xc
c001792a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792e:	e8 7f c8 ff ff       	call   c00141b2 <Krnl::newProcessEnv(Process*)>
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	89 c2                	mov    edx,eax
c0017938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001793c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017946:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001794f:	a1 f0 5d 02 c0       	mov    eax,ds:0xc0025df0
c0017954:	8d 50 01             	lea    edx,[eax+0x1]
c0017957:	89 15 f0 5d 02 c0    	mov    DWORD PTR ds:0xc0025df0,edx
c001795d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017961:	89 02                	mov    DWORD PTR [edx],eax
c0017963:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001796b:	83 ec 0c             	sub    esp,0xc
c001796e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017972:	e8 4c 20 ff ff       	call   c00099c3 <malloc>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	89 c3                	mov    ebx,eax
c001797c:	83 ec 08             	sub    esp,0x8
c001797f:	6a 00                	push   0x0
c0017981:	53                   	push   ebx
c0017982:	e8 5f 48 ff ff       	call   c000c1e6 <VAS::VAS(bool)>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017998:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00179a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179aa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00179b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179ba:	85 c0                	test   eax,eax
c00179bc:	74 42                	je     c0017a00 <Process::Process(char const*, Process*, char**)+0x114>
c00179be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179c8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00179ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00179d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ec:	05 0c 01 00 00       	add    eax,0x10c
c00179f1:	83 ec 08             	sub    esp,0x8
c00179f4:	52                   	push   edx
c00179f5:	50                   	push   eax
c00179f6:	e8 45 8d fe ff       	call   c0000740 <strcpy>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	eb 64                	jmp    c0017a64 <Process::Process(char const*, Process*, char**)+0x178>
c0017a00:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a0f:	e8 af 1f ff ff       	call   c00099c3 <malloc>
c0017a14:	83 c4 10             	add    esp,0x10
c0017a17:	89 c3                	mov    ebx,eax
c0017a19:	83 ec 08             	sub    esp,0x8
c0017a1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a20:	53                   	push   ebx
c0017a21:	e8 d2 32 ff ff       	call   c000acf8 <VgaText::VgaText(char const*)>
c0017a26:	83 c4 10             	add    esp,0x10
c0017a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a3d:	83 ec 0c             	sub    esp,0xc
c0017a40:	50                   	push   eax
c0017a41:	e8 71 2a ff ff       	call   c000a4b7 <addToTerminalCycle(VgaText*)>
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4d:	05 0c 01 00 00       	add    eax,0x10c
c0017a52:	83 ec 08             	sub    esp,0x8
c0017a55:	68 f8 47 02 c0       	push   0xc00247f8
c0017a5a:	50                   	push   eax
c0017a5b:	e8 e0 8c fe ff       	call   c0000740 <strcpy>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	90                   	nop
c0017a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a68:	83 c0 0c             	add    eax,0xc
c0017a6b:	83 ec 08             	sub    esp,0x8
c0017a6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a72:	50                   	push   eax
c0017a73:	e8 c8 8c fe ff       	call   c0000740 <strcpy>
c0017a78:	83 c4 10             	add    esp,0x10
c0017a7b:	83 ec 08             	sub    esp,0x8
c0017a7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a86:	e8 01 fe ff ff       	call   c001788c <Process::addArgs(char**)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	83 ec 08             	sub    esp,0x8
c0017a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a99:	e8 89 ed ff ff       	call   c0016827 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a9e:	83 c4 10             	add    esp,0x10
c0017aa1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017aa5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017aa9:	83 f0 01             	xor    eax,0x1
c0017aac:	88 c2                	mov    dl,al
c0017aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017abd:	83 ec 08             	sub    esp,0x8
c0017ac0:	50                   	push   eax
c0017ac1:	68 50 48 02 c0       	push   0xc0024850
c0017ac6:	e8 9c 4f ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	90                   	nop
c0017acf:	83 c4 14             	add    esp,0x14
c0017ad2:	5b                   	pop    ebx
c0017ad3:	5e                   	pop    esi
c0017ad4:	c3                   	ret    
c0017ad5:	90                   	nop
c0017ad6:	66 90                	xchg   ax,ax

c0017ad8 <Process::Process(bool, char const*, Process*, char**)>:
c0017ad8:	56                   	push   esi
c0017ad9:	53                   	push   ebx
c0017ada:	83 ec 24             	sub    esp,0x24
c0017add:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ae5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae9:	05 0c 02 00 00       	add    eax,0x20c
c0017aee:	bb 07 00 00 00       	mov    ebx,0x7
c0017af3:	89 c6                	mov    esi,eax
c0017af5:	8d 76 00             	lea    esi,[esi+0x0]
c0017af8:	85 db                	test   ebx,ebx
c0017afa:	78 14                	js     c0017b10 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	56                   	push   esi
c0017b00:	e8 2b 9d 00 00       	call   c0021830 <ThreadControlBlock::ThreadControlBlock()>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	83 c6 5f             	add    esi,0x5f
c0017b0b:	4b                   	dec    ebx
c0017b0c:	eb ea                	jmp    c0017af8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b0e:	66 90                	xchg   ax,ax
c0017b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b1b:	83 ec 0c             	sub    esp,0xc
c0017b1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b22:	e8 8b c6 ff ff       	call   c00141b2 <Krnl::newProcessEnv(Process*)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	89 c2                	mov    edx,eax
c0017b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b30:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b3a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b43:	a1 f0 5d 02 c0       	mov    eax,ds:0xc0025df0
c0017b48:	8d 50 01             	lea    edx,[eax+0x1]
c0017b4b:	89 15 f0 5d 02 c0    	mov    DWORD PTR ds:0xc0025df0,edx
c0017b51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b55:	89 02                	mov    DWORD PTR [edx],eax
c0017b57:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b5f:	83 ec 0c             	sub    esp,0xc
c0017b62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b66:	e8 58 1e ff ff       	call   c00099c3 <malloc>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	89 c3                	mov    ebx,eax
c0017b70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b75:	83 ec 08             	sub    esp,0x8
c0017b78:	50                   	push   eax
c0017b79:	53                   	push   ebx
c0017b7a:	e8 67 46 ff ff       	call   c000c1e6 <VAS::VAS(bool)>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b86:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b90:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ba2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017ba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bb2:	85 c0                	test   eax,eax
c0017bb4:	74 42                	je     c0017bf8 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017bb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bc0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017bc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bda:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017be0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be4:	05 0c 01 00 00       	add    eax,0x10c
c0017be9:	83 ec 08             	sub    esp,0x8
c0017bec:	52                   	push   edx
c0017bed:	50                   	push   eax
c0017bee:	e8 4d 8b fe ff       	call   c0000740 <strcpy>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	eb 64                	jmp    c0017c5c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017bf8:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c00:	83 ec 0c             	sub    esp,0xc
c0017c03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c07:	e8 b7 1d ff ff       	call   c00099c3 <malloc>
c0017c0c:	83 c4 10             	add    esp,0x10
c0017c0f:	89 c3                	mov    ebx,eax
c0017c11:	83 ec 08             	sub    esp,0x8
c0017c14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c18:	53                   	push   ebx
c0017c19:	e8 da 30 ff ff       	call   c000acf8 <VgaText::VgaText(char const*)>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c25:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c35:	83 ec 0c             	sub    esp,0xc
c0017c38:	50                   	push   eax
c0017c39:	e8 79 28 ff ff       	call   c000a4b7 <addToTerminalCycle(VgaText*)>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c45:	05 0c 01 00 00       	add    eax,0x10c
c0017c4a:	83 ec 08             	sub    esp,0x8
c0017c4d:	68 f8 47 02 c0       	push   0xc00247f8
c0017c52:	50                   	push   eax
c0017c53:	e8 e8 8a fe ff       	call   c0000740 <strcpy>
c0017c58:	83 c4 10             	add    esp,0x10
c0017c5b:	90                   	nop
c0017c5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c60:	83 c0 0c             	add    eax,0xc
c0017c63:	83 ec 08             	sub    esp,0x8
c0017c66:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c6a:	50                   	push   eax
c0017c6b:	e8 d0 8a fe ff       	call   c0000740 <strcpy>
c0017c70:	83 c4 10             	add    esp,0x10
c0017c73:	83 ec 08             	sub    esp,0x8
c0017c76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c7e:	e8 09 fc ff ff       	call   c001788c <Process::addArgs(char**)>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	90                   	nop
c0017c87:	83 c4 24             	add    esp,0x24
c0017c8a:	5b                   	pop    ebx
c0017c8b:	5e                   	pop    esi
c0017c8c:	c3                   	ret    
c0017c8d:	8d 76 00             	lea    esi,[esi+0x0]

c0017c90 <taskStartupFunction>:
c0017c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c95:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017c98:	c3                   	ret    
c0017c99:	90                   	nop
c0017c9a:	66 90                	xchg   ax,ax

c0017c9c <Semaphore::Semaphore(int)>:
c0017c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca4:	89 10                	mov    DWORD PTR [eax],edx
c0017ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017caa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cc7:	90                   	nop
c0017cc8:	c3                   	ret    
c0017cc9:	90                   	nop
c0017cca:	66 90                	xchg   ax,ax

c0017ccc <Mutex::Mutex()>:
c0017ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd0:	6a 01                	push   0x1
c0017cd2:	50                   	push   eax
c0017cd3:	e8 c4 ff ff ff       	call   c0017c9c <Semaphore::Semaphore(int)>
c0017cd8:	83 c4 08             	add    esp,0x8
c0017cdb:	90                   	nop
c0017cdc:	c3                   	ret    
c0017cdd:	90                   	nop
c0017cde:	66 90                	xchg   ax,ax

c0017ce0 <Process::createThread(void (*)(void*), void*, int)>:
c0017ce0:	57                   	push   edi
c0017ce1:	31 c9                	xor    ecx,ecx
c0017ce3:	56                   	push   esi
c0017ce4:	53                   	push   ebx
c0017ce5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ce9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cf0:	89 f2                	mov    edx,esi
c0017cf2:	66 90                	xchg   ax,ax
c0017cf4:	0f b7 c2             	movzx  eax,dx
c0017cf7:	83 e2 01             	and    edx,0x1
c0017cfa:	74 14                	je     c0017d10 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017cfc:	d1 f8                	sar    eax,1
c0017cfe:	41                   	inc    ecx
c0017cff:	89 c2                	mov    edx,eax
c0017d01:	83 f9 10             	cmp    ecx,0x10
c0017d04:	75 ee                	jne    c0017cf4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d06:	31 db                	xor    ebx,ebx
c0017d08:	89 d8                	mov    eax,ebx
c0017d0a:	5b                   	pop    ebx
c0017d0b:	5e                   	pop    esi
c0017d0c:	5f                   	pop    edi
c0017d0d:	c3                   	ret    
c0017d0e:	66 90                	xchg   ax,ax
c0017d10:	b8 01 00 00 00       	mov    eax,0x1
c0017d15:	d3 e0                	shl    eax,cl
c0017d17:	09 c6                	or     esi,eax
c0017d19:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d1c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d23:	01 c0                	add    eax,eax
c0017d25:	01 c8                	add    eax,ecx
c0017d27:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d2a:	01 d8                	add    eax,ebx
c0017d2c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d33:	75 0b                	jne    c0017d40 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d35:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d3f:	90                   	nop
c0017d40:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d46:	83 ec 08             	sub    esp,0x8
c0017d49:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d4c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d4f:	01 c0                	add    eax,eax
c0017d51:	01 c8                	add    eax,ecx
c0017d53:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d56:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d59:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d5f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d69:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d6f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d75:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d7c:	89 ca                	mov    edx,ecx
c0017d7e:	f7 da                	neg    edx
c0017d80:	c1 e2 15             	shl    edx,0x15
c0017d83:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d89:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d93:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d9d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017da3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017da7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017dad:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017db7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017dc1:	53                   	push   ebx
c0017dc2:	68 e4 78 02 c0       	push   0xc00278e4
c0017dc7:	e8 04 98 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	89 d8                	mov    eax,ebx
c0017dd1:	5b                   	pop    ebx
c0017dd2:	5e                   	pop    esi
c0017dd3:	5f                   	pop    edi
c0017dd4:	c3                   	ret    
c0017dd5:	90                   	nop
c0017dd6:	66 90                	xchg   ax,ax

c0017dd8 <Process::createUserThread()>:
c0017dd8:	83 ec 0c             	sub    esp,0xc
c0017ddb:	68 80 00 00 00       	push   0x80
c0017de0:	6a 00                	push   0x0
c0017de2:	68 80 77 01 c0       	push   0xc0017780
c0017de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017deb:	e8 f0 fe ff ff       	call   c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c0017df0:	83 c4 1c             	add    esp,0x1c
c0017df3:	c3                   	ret    

c0017df4 <setupMultitasking(void (*)())>:
c0017df4:	56                   	push   esi
c0017df5:	53                   	push   ebx
c0017df6:	51                   	push   ecx
c0017df7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dfb:	eb 13                	jmp    c0017e10 <setupMultitasking(void (*)())+0x1c>
c0017dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	68 e4 78 02 c0       	push   0xc00278e4
c0017e08:	e8 0b 97 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	68 e4 78 02 c0       	push   0xc00278e4
c0017e18:	e8 d7 96 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	84 c0                	test   al,al
c0017e22:	74 dc                	je     c0017e00 <setupMultitasking(void (*)())+0xc>
c0017e24:	83 ec 0c             	sub    esp,0xc
c0017e27:	68 1f 07 00 00       	push   0x71f
c0017e2c:	e8 92 1b ff ff       	call   c00099c3 <malloc>
c0017e31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e38:	89 c3                	mov    ebx,eax
c0017e3a:	6a 00                	push   0x0
c0017e3c:	68 fc 47 02 c0       	push   0xc00247fc
c0017e41:	6a 01                	push   0x1
c0017e43:	50                   	push   eax
c0017e44:	e8 8f fc ff ff       	call   c0017ad8 <Process::Process(bool, char const*, Process*, char**)>
c0017e49:	83 c4 14             	add    esp,0x14
c0017e4c:	89 1d f0 78 02 c0    	mov    DWORD PTR ds:0xc00278f0,ebx
c0017e52:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e58:	e8 68 29 ff ff       	call   c000a7c5 <setActiveTerminal(VgaText*)>
c0017e5d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e65:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e6f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e75:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e78:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e82:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e88:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e8e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e98:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017ea2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017eac:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017eb2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ebc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ec2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ecc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ed2:	58                   	pop    eax
c0017ed3:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ed9:	5a                   	pop    edx
c0017eda:	68 f8 47 02 c0       	push   0xc00247f8
c0017edf:	50                   	push   eax
c0017ee0:	e8 5b 88 fe ff       	call   c0000740 <strcpy>
c0017ee5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017eec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ef0:	83 c4 14             	add    esp,0x14
c0017ef3:	5b                   	pop    ebx
c0017ef4:	5e                   	pop    esi
c0017ef5:	e9 8f 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017efa:	66 90                	xchg   ax,ax

c0017efc <schedule()>:
c0017efc:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0017f01:	85 c0                	test   eax,eax
c0017f03:	74 0b                	je     c0017f10 <schedule()+0x14>
c0017f05:	c7 05 c0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x1
c0017f0f:	c3                   	ret    
c0017f10:	53                   	push   ebx
c0017f11:	83 ec 14             	sub    esp,0x14
c0017f14:	68 e4 78 02 c0       	push   0xc00278e4
c0017f19:	e8 d6 95 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	84 c0                	test   al,al
c0017f23:	75 3b                	jne    c0017f60 <schedule()+0x64>
c0017f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f2d:	4a                   	dec    edx
c0017f2e:	74 38                	je     c0017f68 <schedule()+0x6c>
c0017f30:	83 ec 0c             	sub    esp,0xc
c0017f33:	68 e4 78 02 c0       	push   0xc00278e4
c0017f38:	e8 d3 95 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f3d:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c0017f44:	89 c3                	mov    ebx,eax
c0017f46:	e8 cd 95 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f4b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f55:	e8 7e f8 ff ff       	call   c00177d8 <switchToThread(ThreadControlBlock*)>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f60:	83 c4 08             	add    esp,0x8
c0017f63:	5b                   	pop    ebx
c0017f64:	c3                   	ret    
c0017f65:	8d 76 00             	lea    esi,[esi+0x0]
c0017f68:	83 ec 08             	sub    esp,0x8
c0017f6b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f72:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f78:	68 e4 78 02 c0       	push   0xc00278e4
c0017f7d:	e8 4e 96 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	eb a9                	jmp    c0017f30 <schedule()+0x34>
c0017f87:	90                   	nop

c0017f88 <Semaphore::tryAcquire()>:
c0017f88:	53                   	push   ebx
c0017f89:	83 ec 08             	sub    esp,0x8
c0017f8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f90:	fa                   	cli    
c0017f91:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0017f96:	8d 50 01             	lea    edx,[eax+0x1]
c0017f99:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0017f9f:	8b 15 c4 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c4
c0017fa5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017fa8:	89 1d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ebx
c0017fae:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017fb1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017fb3:	7c 33                	jl     c0017fe8 <Semaphore::tryAcquire()+0x60>
c0017fb5:	89 15 c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,edx
c0017fbb:	85 d2                	test   edx,edx
c0017fbd:	75 0d                	jne    c0017fcc <Semaphore::tryAcquire()+0x44>
c0017fbf:	8b 15 c0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c0
c0017fc5:	85 d2                	test   edx,edx
c0017fc7:	75 6b                	jne    c0018034 <Semaphore::tryAcquire()+0xac>
c0017fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fcc:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0017fd1:	85 c0                	test   eax,eax
c0017fd3:	74 0b                	je     c0017fe0 <Semaphore::tryAcquire()+0x58>
c0017fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd8:	31 c0                	xor    eax,eax
c0017fda:	83 c4 08             	add    esp,0x8
c0017fdd:	5b                   	pop    ebx
c0017fde:	c3                   	ret    
c0017fdf:	90                   	nop
c0017fe0:	fb                   	sti    
c0017fe1:	83 c4 08             	add    esp,0x8
c0017fe4:	5b                   	pop    ebx
c0017fe5:	c3                   	ret    
c0017fe6:	66 90                	xchg   ax,ax
c0017fe8:	43                   	inc    ebx
c0017fe9:	89 15 c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,edx
c0017fef:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017ff2:	85 d2                	test   edx,edx
c0017ff4:	75 22                	jne    c0018018 <Semaphore::tryAcquire()+0x90>
c0017ff6:	8b 0d c0 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278c0
c0017ffc:	85 c9                	test   ecx,ecx
c0017ffe:	74 18                	je     c0018018 <Semaphore::tryAcquire()+0x90>
c0018000:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c001800a:	e8 ed fe ff ff       	call   c0017efc <schedule()>
c001800f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018014:	48                   	dec    eax
c0018015:	8d 76 00             	lea    esi,[esi+0x0]
c0018018:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001801d:	85 c0                	test   eax,eax
c001801f:	75 0b                	jne    c001802c <Semaphore::tryAcquire()+0xa4>
c0018021:	fb                   	sti    
c0018022:	b0 01                	mov    al,0x1
c0018024:	83 c4 08             	add    esp,0x8
c0018027:	5b                   	pop    ebx
c0018028:	c3                   	ret    
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	b0 01                	mov    al,0x1
c001802e:	83 c4 08             	add    esp,0x8
c0018031:	5b                   	pop    ebx
c0018032:	c3                   	ret    
c0018033:	90                   	nop
c0018034:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c001803e:	e8 b9 fe ff ff       	call   c0017efc <schedule()>
c0018043:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018048:	48                   	dec    eax
c0018049:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001804e:	85 c0                	test   eax,eax
c0018050:	75 86                	jne    c0017fd8 <Semaphore::tryAcquire()+0x50>
c0018052:	eb 8c                	jmp    c0017fe0 <Semaphore::tryAcquire()+0x58>

c0018054 <Semaphore::assertLocked(char const*)>:
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001805b:	fa                   	cli    
c001805c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018062:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018067:	8d 48 01             	lea    ecx,[eax+0x1]
c001806a:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c0018070:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018072:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018075:	7c 29                	jl     c00180a0 <Semaphore::assertLocked(char const*)+0x4c>
c0018077:	90                   	nop
c0018078:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c001807d:	85 c0                	test   eax,eax
c001807f:	75 0b                	jne    c001808c <Semaphore::assertLocked(char const*)+0x38>
c0018081:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0018086:	85 c0                	test   eax,eax
c0018088:	75 2e                	jne    c00180b8 <Semaphore::assertLocked(char const*)+0x64>
c001808a:	66 90                	xchg   ax,ax
c001808c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018091:	48                   	dec    eax
c0018092:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018097:	75 03                	jne    c001809c <Semaphore::assertLocked(char const*)+0x48>
c0018099:	fb                   	sti    
c001809a:	66 90                	xchg   ax,ax
c001809c:	83 c4 0c             	add    esp,0xc
c001809f:	c3                   	ret    
c00180a0:	83 ec 0c             	sub    esp,0xc
c00180a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180a7:	e8 7d c2 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00180ac:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	48                   	dec    eax
c00180b5:	eb c1                	jmp    c0018078 <Semaphore::assertLocked(char const*)+0x24>
c00180b7:	90                   	nop
c00180b8:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00180c2:	e8 35 fe ff ff       	call   c0017efc <schedule()>
c00180c7:	eb c3                	jmp    c001808c <Semaphore::assertLocked(char const*)+0x38>
c00180c9:	8d 76 00             	lea    esi,[esi+0x0]

c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180cc:	83 ec 0c             	sub    esp,0xc
c00180cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180db:	e8 1c fe ff ff       	call   c0017efc <schedule()>
c00180e0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00180e5:	48                   	dec    eax
c00180e6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00180eb:	75 03                	jne    c00180f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180ed:	fb                   	sti    
c00180ee:	66 90                	xchg   ax,ax
c00180f0:	83 c4 0c             	add    esp,0xc
c00180f3:	c3                   	ret    

c00180f4 <blockTask(TaskState)>:
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	fa                   	cli    
c00180f8:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00180fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018107:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001810a:	e8 ed fd ff ff       	call   c0017efc <schedule()>
c001810f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018114:	48                   	dec    eax
c0018115:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001811a:	75 04                	jne    c0018120 <blockTask(TaskState)+0x2c>
c001811c:	fb                   	sti    
c001811d:	8d 76 00             	lea    esi,[esi+0x0]
c0018120:	83 c4 0c             	add    esp,0xc
c0018123:	c3                   	ret    

c0018124 <waitTask(int, int*, int)>:
c0018124:	83 ec 18             	sub    esp,0x18
c0018127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001812c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018130:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018133:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001813c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001813f:	6a 07                	push   0x7
c0018141:	e8 ae ff ff ff       	call   c00180f4 <blockTask(TaskState)>
c0018146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018151:	85 d2                	test   edx,edx
c0018153:	74 0b                	je     c0018160 <waitTask(int, int*, int)+0x3c>
c0018155:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018158:	89 02                	mov    DWORD PTR [edx],eax
c001815a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001815f:	90                   	nop
c0018160:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018163:	83 c4 0c             	add    esp,0xc
c0018166:	c3                   	ret    
c0018167:	90                   	nop

c0018168 <milliTenthSleepUntil(unsigned int)>:
c0018168:	83 ec 0c             	sub    esp,0xc
c001816b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816f:	39 05 2c 6a 02 c0    	cmp    DWORD PTR ds:0xc0026a2c,eax
c0018175:	76 05                	jbe    c001817c <milliTenthSleepUntil(unsigned int)+0x14>
c0018177:	90                   	nop
c0018178:	83 c4 0c             	add    esp,0xc
c001817b:	c3                   	ret    
c001817c:	fa                   	cli    
c001817d:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018183:	83 ec 08             	sub    esp,0x8
c0018186:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c001818c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018192:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018195:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001819b:	68 d8 78 02 c0       	push   0xc00278d8
c00181a0:	e8 2b 94 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181a5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00181ac:	e8 43 ff ff ff       	call   c00180f4 <blockTask(TaskState)>
c00181b1:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	48                   	dec    eax
c00181ba:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00181bf:	85 c0                	test   eax,eax
c00181c1:	75 09                	jne    c00181cc <milliTenthSleepUntil(unsigned int)+0x64>
c00181c3:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c00181c8:	85 c0                	test   eax,eax
c00181ca:	75 14                	jne    c00181e0 <milliTenthSleepUntil(unsigned int)+0x78>
c00181cc:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00181d1:	48                   	dec    eax
c00181d2:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00181d7:	75 9f                	jne    c0018178 <milliTenthSleepUntil(unsigned int)+0x10>
c00181d9:	fb                   	sti    
c00181da:	83 c4 0c             	add    esp,0xc
c00181dd:	c3                   	ret    
c00181de:	66 90                	xchg   ax,ax
c00181e0:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00181ea:	e8 0d fd ff ff       	call   c0017efc <schedule()>
c00181ef:	eb db                	jmp    c00181cc <milliTenthSleepUntil(unsigned int)+0x64>
c00181f1:	8d 76 00             	lea    esi,[esi+0x0]

c00181f4 <milliTenthSleep(unsigned int)>:
c00181f4:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c00181f9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00181fd:	e9 66 ff ff ff       	jmp    c0018168 <milliTenthSleepUntil(unsigned int)>
c0018202:	66 90                	xchg   ax,ax

c0018204 <sleep(unsigned int)>:
c0018204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018208:	8d 04 80             	lea    eax,[eax+eax*4]
c001820b:	8d 04 80             	lea    eax,[eax+eax*4]
c001820e:	8d 04 80             	lea    eax,[eax+eax*4]
c0018211:	8d 04 80             	lea    eax,[eax+eax*4]
c0018214:	c1 e0 04             	shl    eax,0x4
c0018217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001821b:	eb d7                	jmp    c00181f4 <milliTenthSleep(unsigned int)>
c001821d:	90                   	nop
c001821e:	66 90                	xchg   ax,ax

c0018220 <Semaphore::acquire()>:
c0018220:	83 ec 0c             	sub    esp,0xc
c0018223:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018227:	fa                   	cli    
c0018228:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c001822d:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018233:	8d 48 01             	lea    ecx,[eax+0x1]
c0018236:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c001823c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001823f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018241:	7d 2d                	jge    c0018270 <Semaphore::acquire()+0x50>
c0018243:	41                   	inc    ecx
c0018244:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018247:	90                   	nop
c0018248:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c001824d:	85 c0                	test   eax,eax
c001824f:	75 0b                	jne    c001825c <Semaphore::acquire()+0x3c>
c0018251:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0018256:	85 c0                	test   eax,eax
c0018258:	75 62                	jne    c00182bc <Semaphore::acquire()+0x9c>
c001825a:	66 90                	xchg   ax,ax
c001825c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018261:	48                   	dec    eax
c0018262:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018267:	75 03                	jne    c001826c <Semaphore::acquire()+0x4c>
c0018269:	fb                   	sti    
c001826a:	66 90                	xchg   ax,ax
c001826c:	83 c4 0c             	add    esp,0xc
c001826f:	c3                   	ret    
c0018270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018275:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001827c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001827f:	85 c9                	test   ecx,ecx
c0018281:	74 4d                	je     c00182d0 <Semaphore::acquire()+0xb0>
c0018283:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018286:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001828c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001828f:	90                   	nop
c0018290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018295:	83 ec 0c             	sub    esp,0xc
c0018298:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001829b:	68 78 48 02 c0       	push   0xc0024878
c00182a0:	e8 c2 47 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00182a5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00182ac:	e8 43 fe ff ff       	call   c00180f4 <blockTask(TaskState)>
c00182b1:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00182b6:	83 c4 10             	add    esp,0x10
c00182b9:	48                   	dec    eax
c00182ba:	eb 8c                	jmp    c0018248 <Semaphore::acquire()+0x28>
c00182bc:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00182c6:	e8 31 fc ff ff       	call   c0017efc <schedule()>
c00182cb:	eb 8f                	jmp    c001825c <Semaphore::acquire()+0x3c>
c00182cd:	8d 76 00             	lea    esi,[esi+0x0]
c00182d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182d8:	eb b6                	jmp    c0018290 <Semaphore::acquire()+0x70>
c00182da:	66 90                	xchg   ax,ax

c00182dc <taskReturned>:
c00182dc:	83 ec 18             	sub    esp,0x18
c00182df:	68 98 48 02 c0       	push   0xc0024898
c00182e4:	e8 40 c0 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	6a 02                	push   0x2
c00182f1:	e8 fe fd ff ff       	call   c00180f4 <blockTask(TaskState)>
c00182f6:	fa                   	cli    
c00182f7:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00182fd:	e8 fa fb ff ff       	call   c0017efc <schedule()>
c0018302:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	48                   	dec    eax
c001830b:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018310:	85 c0                	test   eax,eax
c0018312:	75 d8                	jne    c00182ec <taskReturned+0x10>
c0018314:	fb                   	sti    
c0018315:	eb d5                	jmp    c00182ec <taskReturned+0x10>
c0018317:	90                   	nop

c0018318 <Thr::processFromPID(int)>:
c0018318:	57                   	push   edi
c0018319:	56                   	push   esi
c001831a:	53                   	push   ebx
c001831b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001831f:	fa                   	cli    
c0018320:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018326:	83 ec 0c             	sub    esp,0xc
c0018329:	68 e4 78 02 c0       	push   0xc00278e4
c001832e:	e8 dd 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	89 c7                	mov    edi,eax
c0018338:	eb 16                	jmp    c0018350 <Thr::processFromPID(int)+0x38>
c001833a:	66 90                	xchg   ax,ax
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	68 e4 78 02 c0       	push   0xc00278e4
c0018344:	e8 c7 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018349:	83 c4 10             	add    esp,0x10
c001834c:	39 f8                	cmp    eax,edi
c001834e:	74 4c                	je     c001839c <Thr::processFromPID(int)+0x84>
c0018350:	83 ec 0c             	sub    esp,0xc
c0018353:	68 e4 78 02 c0       	push   0xc00278e4
c0018358:	e8 b3 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001835d:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c0018364:	89 c3                	mov    ebx,eax
c0018366:	e8 ad 91 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001836b:	58                   	pop    eax
c001836c:	5a                   	pop    edx
c001836d:	53                   	push   ebx
c001836e:	68 e4 78 02 c0       	push   0xc00278e4
c0018373:	e8 58 92 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018378:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001837b:	83 c4 10             	add    esp,0x10
c001837e:	39 30                	cmp    DWORD PTR [eax],esi
c0018380:	75 ba                	jne    c001833c <Thr::processFromPID(int)+0x24>
c0018382:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018387:	48                   	dec    eax
c0018388:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001838d:	74 09                	je     c0018398 <Thr::processFromPID(int)+0x80>
c001838f:	90                   	nop
c0018390:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018393:	5b                   	pop    ebx
c0018394:	5e                   	pop    esi
c0018395:	5f                   	pop    edi
c0018396:	c3                   	ret    
c0018397:	90                   	nop
c0018398:	fb                   	sti    
c0018399:	eb f5                	jmp    c0018390 <Thr::processFromPID(int)+0x78>
c001839b:	90                   	nop
c001839c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00183a1:	48                   	dec    eax
c00183a2:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00183a7:	75 07                	jne    c00183b0 <Thr::processFromPID(int)+0x98>
c00183a9:	fb                   	sti    
c00183aa:	5b                   	pop    ebx
c00183ab:	5e                   	pop    esi
c00183ac:	5f                   	pop    edi
c00183ad:	c3                   	ret    
c00183ae:	66 90                	xchg   ax,ax
c00183b0:	5b                   	pop    ebx
c00183b1:	31 c0                	xor    eax,eax
c00183b3:	5e                   	pop    esi
c00183b4:	5f                   	pop    edi
c00183b5:	c3                   	ret    
c00183b6:	66 90                	xchg   ax,ax

c00183b8 <unblockTask(ThreadControlBlock*)>:
c00183b8:	53                   	push   ebx
c00183b9:	83 ec 08             	sub    esp,0x8
c00183bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183c0:	fa                   	cli    
c00183c1:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00183c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183ca:	85 c0                	test   eax,eax
c00183cc:	74 66                	je     c0018434 <unblockTask(ThreadControlBlock*)+0x7c>
c00183ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183d1:	48                   	dec    eax
c00183d2:	74 38                	je     c001840c <unblockTask(ThreadControlBlock*)+0x54>
c00183d4:	83 ec 0c             	sub    esp,0xc
c00183d7:	68 e4 78 02 c0       	push   0xc00278e4
c00183dc:	e8 2f 91 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183e1:	83 c4 10             	add    esp,0x10
c00183e4:	85 c0                	test   eax,eax
c00183e6:	75 1c                	jne    c0018404 <unblockTask(ThreadControlBlock*)+0x4c>
c00183e8:	eb 5e                	jmp    c0018448 <unblockTask(ThreadControlBlock*)+0x90>
c00183ea:	66 90                	xchg   ax,ax
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	50                   	push   eax
c00183f0:	68 e4 78 02 c0       	push   0xc00278e4
c00183f5:	e8 c6 94 00 00       	call   c00218c0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	85 c0                	test   eax,eax
c00183ff:	74 47                	je     c0018448 <unblockTask(ThreadControlBlock*)+0x90>
c0018401:	8d 76 00             	lea    esi,[esi+0x0]
c0018404:	39 c3                	cmp    ebx,eax
c0018406:	75 e4                	jne    c00183ec <unblockTask(ThreadControlBlock*)+0x34>
c0018408:	eb 12                	jmp    c001841c <unblockTask(ThreadControlBlock*)+0x64>
c001840a:	66 90                	xchg   ax,ax
c001840c:	83 ec 0c             	sub    esp,0xc
c001840f:	68 1a 48 02 c0       	push   0xc002481a
c0018414:	e8 4e 46 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0018419:	83 c4 10             	add    esp,0x10
c001841c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018421:	48                   	dec    eax
c0018422:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018427:	75 03                	jne    c001842c <unblockTask(ThreadControlBlock*)+0x74>
c0018429:	fb                   	sti    
c001842a:	66 90                	xchg   ax,ax
c001842c:	83 c4 08             	add    esp,0x8
c001842f:	5b                   	pop    ebx
c0018430:	c3                   	ret    
c0018431:	8d 76 00             	lea    esi,[esi+0x0]
c0018434:	83 ec 0c             	sub    esp,0xc
c0018437:	68 03 48 02 c0       	push   0xc0024803
c001843c:	e8 26 46 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	eb d6                	jmp    c001841c <unblockTask(ThreadControlBlock*)+0x64>
c0018446:	66 90                	xchg   ax,ax
c0018448:	83 ec 08             	sub    esp,0x8
c001844b:	53                   	push   ebx
c001844c:	68 e4 78 02 c0       	push   0xc00278e4
c0018451:	e8 7a 91 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018456:	83 c4 10             	add    esp,0x10
c0018459:	eb c1                	jmp    c001841c <unblockTask(ThreadControlBlock*)+0x64>
c001845b:	90                   	nop

c001845c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001845c:	55                   	push   ebp
c001845d:	57                   	push   edi
c001845e:	56                   	push   esi
c001845f:	53                   	push   ebx
c0018460:	83 ec 1c             	sub    esp,0x1c
c0018463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018467:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001846a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018470:	85 ff                	test   edi,edi
c0018472:	7e 24                	jle    c0018498 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018474:	31 f6                	xor    esi,esi
c0018476:	66 90                	xchg   ax,ax
c0018478:	83 ec 0c             	sub    esp,0xc
c001847b:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018482:	46                   	inc    esi
c0018483:	e8 4b 15 ff ff       	call   c00099d3 <free>
c0018488:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001848b:	83 c4 10             	add    esp,0x10
c001848e:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018494:	7f e2                	jg     c0018478 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018496:	66 90                	xchg   ax,ax
c0018498:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00184a2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184a7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00184aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00184ad:	d3 c0                	rol    eax,cl
c00184af:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00184b6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184b9:	89 f7                	mov    edi,esi
c00184bb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00184c3:	0f 85 73 01 00 00    	jne    c001863c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00184c9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00184cf:	85 ed                	test   ebp,ebp
c00184d1:	74 1d                	je     c00184f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184d3:	83 ec 0c             	sub    esp,0xc
c00184d6:	55                   	push   ebp
c00184d7:	e8 f2 bb ff ff       	call   c00140ce <EnvVarContainer::~EnvVarContainer()>
c00184dc:	59                   	pop    ecx
c00184dd:	5e                   	pop    esi
c00184de:	6a 0c                	push   0xc
c00184e0:	55                   	push   ebp
c00184e1:	e8 a0 44 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c00184e6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184e9:	83 c4 10             	add    esp,0x10
c00184ec:	89 f7                	mov    edi,esi
c00184ee:	66 90                	xchg   ax,ax
c00184f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184f6:	85 c0                	test   eax,eax
c00184f8:	0f 84 b2 00 00 00    	je     c00185b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184fe:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018501:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018505:	31 c9                	xor    ecx,ecx
c0018507:	eb 17                	jmp    c0018520 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018509:	8d 76 00             	lea    esi,[esi+0x0]
c001850c:	41                   	inc    ecx
c001850d:	83 f9 10             	cmp    ecx,0x10
c0018510:	0f 84 9a 00 00 00    	je     c00185b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018516:	66 90                	xchg   ax,ax
c0018518:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001851e:	66 90                	xchg   ax,ax
c0018520:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018527:	d3 fa                	sar    edx,cl
c0018529:	83 e2 01             	and    edx,0x1
c001852c:	74 de                	je     c001850c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001852e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018531:	01 d2                	add    edx,edx
c0018533:	01 ca                	add    edx,ecx
c0018535:	8d 14 92             	lea    edx,[edx+edx*4]
c0018538:	01 d0                	add    eax,edx
c001853a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018540:	83 fd 07             	cmp    ebp,0x7
c0018543:	75 c7                	jne    c001850c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018545:	05 40 02 00 00       	add    eax,0x240
c001854a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001854d:	83 fd ff             	cmp    ebp,0xffffffff
c0018550:	0f 8c ee 00 00 00    	jl     c0018644 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018556:	0f 84 ac 01 00 00    	je     c0018708 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c001855c:	85 ed                	test   ebp,ebp
c001855e:	0f 84 90 01 00 00    	je     c00186f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018564:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018566:	75 a4                	jne    c001850c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018568:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001856e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018572:	01 d0                	add    eax,edx
c0018574:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018578:	83 ec 0c             	sub    esp,0xc
c001857b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018581:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018584:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001858a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018591:	50                   	push   eax
c0018592:	e8 21 fe ff ff       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001859d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185a1:	89 f7                	mov    edi,esi
c00185a3:	41                   	inc    ecx
c00185a4:	83 f9 10             	cmp    ecx,0x10
c00185a7:	0f 85 6b ff ff ff    	jne    c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00185ad:	8d 76 00             	lea    esi,[esi+0x0]
c00185b0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00185b6:	85 c0                	test   eax,eax
c00185b8:	74 62                	je     c001861c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185ba:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00185c0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00185c6:	74 54                	je     c001861c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185c8:	83 ec 0c             	sub    esp,0xc
c00185cb:	68 e4 78 02 c0       	push   0xc00278e4
c00185d0:	e8 3b 8f 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185d5:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00185dc:	89 c7                	mov    edi,eax
c00185de:	e8 11 8f 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185e3:	83 c4 10             	add    esp,0x10
c00185e6:	84 c0                	test   al,al
c00185e8:	0f 84 ce 00 00 00    	je     c00186bc <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185ee:	66 90                	xchg   ax,ax
c00185f0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185f3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00185f9:	85 d2                	test   edx,edx
c00185fb:	74 0f                	je     c001860c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00185fd:	83 ec 0c             	sub    esp,0xc
c0018600:	8b 02                	mov    eax,DWORD PTR [edx]
c0018602:	52                   	push   edx
c0018603:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018606:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018609:	83 c4 10             	add    esp,0x10
c001860c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018616:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018619:	8d 76 00             	lea    esi,[esi+0x0]
c001861c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018622:	85 db                	test   ebx,ebx
c0018624:	74 16                	je     c001863c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018626:	83 ec 0c             	sub    esp,0xc
c0018629:	53                   	push   ebx
c001862a:	e8 91 35 ff ff       	call   c000bbc0 <VAS::~VAS()>
c001862f:	58                   	pop    eax
c0018630:	5a                   	pop    edx
c0018631:	6a 14                	push   0x14
c0018633:	53                   	push   ebx
c0018634:	e8 4d 43 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	83 c4 1c             	add    esp,0x1c
c001863f:	5b                   	pop    ebx
c0018640:	5e                   	pop    esi
c0018641:	5f                   	pop    edi
c0018642:	5d                   	pop    ebp
c0018643:	c3                   	ret    
c0018644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018648:	83 ec 0c             	sub    esp,0xc
c001864b:	68 cc 48 02 c0       	push   0xc00248cc
c0018650:	e8 d4 bc ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0018655:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018658:	83 c4 10             	add    esp,0x10
c001865b:	89 f7                	mov    edi,esi
c001865d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018661:	e9 a6 fe ff ff       	jmp    c001850c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018666:	66 90                	xchg   ax,ax
c0018668:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001866e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018674:	75 1e                	jne    c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	68 34 49 02 c0       	push   0xc0024934
c001867e:	e8 e4 43 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c0018683:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001868a:	e8 65 fa ff ff       	call   c00180f4 <blockTask(TaskState)>
c001868f:	83 c4 10             	add    esp,0x10
c0018692:	66 90                	xchg   ax,ax
c0018694:	83 ec 08             	sub    esp,0x8
c0018697:	56                   	push   esi
c0018698:	68 e4 78 02 c0       	push   0xc00278e4
c001869d:	e8 2e 8f 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186a2:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00186a9:	e8 62 8e 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	39 f8                	cmp    eax,edi
c00186b3:	0f 84 37 ff ff ff    	je     c00185f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00186b9:	8d 76 00             	lea    esi,[esi+0x0]
c00186bc:	83 ec 0c             	sub    esp,0xc
c00186bf:	68 e4 78 02 c0       	push   0xc00278e4
c00186c4:	e8 47 8e 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186c9:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00186d0:	89 c6                	mov    esi,eax
c00186d2:	e8 41 8e 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186d7:	83 c4 10             	add    esp,0x10
c00186da:	39 f3                	cmp    ebx,esi
c00186dc:	74 b6                	je     c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186de:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186e1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186e4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186ea:	75 a8                	jne    c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186ec:	e9 77 ff ff ff       	jmp    c0018668 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186f1:	8d 76 00             	lea    esi,[esi+0x0]
c00186f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186f8:	83 ec 0c             	sub    esp,0xc
c00186fb:	68 00 49 02 c0       	push   0xc0024900
c0018700:	e9 4b ff ff ff       	jmp    c0018650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018705:	8d 76 00             	lea    esi,[esi+0x0]
c0018708:	8b 36                	mov    esi,DWORD PTR [esi]
c001870a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001870e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018711:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018714:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001871a:	01 d7                	add    edi,edx
c001871c:	89 f8                	mov    eax,edi
c001871e:	e9 51 fe ff ff       	jmp    c0018574 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018723:	90                   	nop

c0018724 <cleanerTaskFunction(void*)>:
c0018724:	53                   	push   ebx
c0018725:	83 ec 08             	sub    esp,0x8
c0018728:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001872d:	48                   	dec    eax
c001872e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018733:	75 03                	jne    c0018738 <cleanerTaskFunction(void*)+0x14>
c0018735:	fb                   	sti    
c0018736:	66 90                	xchg   ax,ax
c0018738:	fa                   	cli    
c0018739:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001873e:	80 3d ac 78 02 c0 00 	cmp    BYTE PTR ds:0xc00278ac,0x0
c0018745:	8d 50 01             	lea    edx,[eax+0x1]
c0018748:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c001874e:	0f 84 ac 00 00 00    	je     c0018800 <cleanerTaskFunction(void*)+0xdc>
c0018754:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018759:	85 c0                	test   eax,eax
c001875b:	75 03                	jne    c0018760 <cleanerTaskFunction(void*)+0x3c>
c001875d:	fb                   	sti    
c001875e:	66 90                	xchg   ax,ax
c0018760:	c6 05 ac 78 02 c0 00 	mov    BYTE PTR ds:0xc00278ac,0x0
c0018767:	fa                   	cli    
c0018768:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001876e:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018774:	fa                   	cli    
c0018775:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001877b:	eb 2b                	jmp    c00187a8 <cleanerTaskFunction(void*)+0x84>
c001877d:	8d 76 00             	lea    esi,[esi+0x0]
c0018780:	83 ec 0c             	sub    esp,0xc
c0018783:	68 cc 78 02 c0       	push   0xc00278cc
c0018788:	e8 83 8d 00 00       	call   c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001878d:	c7 04 24 cc 78 02 c0 	mov    DWORD PTR [esp],0xc00278cc
c0018794:	89 c3                	mov    ebx,eax
c0018796:	e8 7d 8d 00 00       	call   c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001879b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001879e:	e8 b9 fc ff ff       	call   c001845c <cleanupTerminatedTask(ThreadControlBlock*)>
c00187a3:	83 c4 10             	add    esp,0x10
c00187a6:	66 90                	xchg   ax,ax
c00187a8:	83 ec 0c             	sub    esp,0xc
c00187ab:	68 cc 78 02 c0       	push   0xc00278cc
c00187b0:	e8 3f 8d 00 00       	call   c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	84 c0                	test   al,al
c00187ba:	74 c4                	je     c0018780 <cleanerTaskFunction(void*)+0x5c>
c00187bc:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00187c1:	48                   	dec    eax
c00187c2:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00187c7:	75 03                	jne    c00187cc <cleanerTaskFunction(void*)+0xa8>
c00187c9:	fb                   	sti    
c00187ca:	66 90                	xchg   ax,ax
c00187cc:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00187d1:	48                   	dec    eax
c00187d2:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00187d7:	0f 85 4b ff ff ff    	jne    c0018728 <cleanerTaskFunction(void*)+0x4>
c00187dd:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c00187e2:	85 c0                	test   eax,eax
c00187e4:	0f 84 3e ff ff ff    	je     c0018728 <cleanerTaskFunction(void*)+0x4>
c00187ea:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00187f4:	e8 03 f7 ff ff       	call   c0017efc <schedule()>
c00187f9:	e9 2a ff ff ff       	jmp    c0018728 <cleanerTaskFunction(void*)+0x4>
c00187fe:	66 90                	xchg   ax,ax
c0018800:	83 ec 0c             	sub    esp,0xc
c0018803:	6a 02                	push   0x2
c0018805:	e8 c2 f8 ff ff       	call   c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	e9 4e ff ff ff       	jmp    c0018760 <cleanerTaskFunction(void*)+0x3c>
c0018812:	66 90                	xchg   ax,ax

c0018814 <terminateTask(int)>:
c0018814:	83 ec 14             	sub    esp,0x14
c0018817:	fa                   	cli    
c0018818:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001881e:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018824:	fa                   	cli    
c0018825:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001882b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001882f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018834:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001883c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001883f:	50                   	push   eax
c0018840:	68 cc 78 02 c0       	push   0xc00278cc
c0018845:	e8 86 8d 00 00       	call   c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001884a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001884f:	83 c4 10             	add    esp,0x10
c0018852:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018859:	a1 a8 78 02 c0       	mov    eax,ds:0xc00278a8
c001885e:	85 c0                	test   eax,eax
c0018860:	74 5e                	je     c00188c0 <terminateTask(int)+0xac>
c0018862:	83 ec 0c             	sub    esp,0xc
c0018865:	c6 05 ac 78 02 c0 01 	mov    BYTE PTR ds:0xc00278ac,0x1
c001886c:	50                   	push   eax
c001886d:	e8 46 fb ff ff       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c0018872:	83 c4 10             	add    esp,0x10
c0018875:	8d 76 00             	lea    esi,[esi+0x0]
c0018878:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001887d:	48                   	dec    eax
c001887e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018883:	75 03                	jne    c0018888 <terminateTask(int)+0x74>
c0018885:	fb                   	sti    
c0018886:	66 90                	xchg   ax,ax
c0018888:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c001888d:	48                   	dec    eax
c001888e:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018893:	75 0b                	jne    c00188a0 <terminateTask(int)+0x8c>
c0018895:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c001889c:	75 36                	jne    c00188d4 <terminateTask(int)+0xc0>
c001889e:	66 90                	xchg   ax,ax
c00188a0:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00188a5:	48                   	dec    eax
c00188a6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00188ab:	75 03                	jne    c00188b0 <terminateTask(int)+0x9c>
c00188ad:	fb                   	sti    
c00188ae:	66 90                	xchg   ax,ax
c00188b0:	fa                   	cli    
c00188b1:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00188b7:	90                   	nop
c00188b8:	e8 3f f6 ff ff       	call   c0017efc <schedule()>
c00188bd:	eb e1                	jmp    c00188a0 <terminateTask(int)+0x8c>
c00188bf:	90                   	nop
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	68 31 48 02 c0       	push   0xc0024831
c00188c8:	e8 9a 41 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00188cd:	83 c4 10             	add    esp,0x10
c00188d0:	eb a6                	jmp    c0018878 <terminateTask(int)+0x64>
c00188d2:	66 90                	xchg   ax,ax
c00188d4:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00188de:	eb d8                	jmp    c00188b8 <terminateTask(int)+0xa4>

c00188e0 <Thr::terminateFromIRQ(int)>:
c00188e0:	83 ec 18             	sub    esp,0x18
c00188e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188e7:	e8 28 ff ff ff       	call   c0018814 <terminateTask(int)>

c00188ec <Semaphore::release()>:
c00188ec:	83 ec 0c             	sub    esp,0xc
c00188ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188f3:	fa                   	cli    
c00188f4:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00188f9:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00188ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0018902:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c0018908:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001890b:	85 c9                	test   ecx,ecx
c001890d:	74 41                	je     c0018950 <Semaphore::release()+0x64>
c001890f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018912:	83 ec 0c             	sub    esp,0xc
c0018915:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018918:	51                   	push   ecx
c0018919:	e8 9a fa ff ff       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c001891e:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018923:	83 c4 10             	add    esp,0x10
c0018926:	48                   	dec    eax
c0018927:	90                   	nop
c0018928:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c001892d:	85 c0                	test   eax,eax
c001892f:	75 0b                	jne    c001893c <Semaphore::release()+0x50>
c0018931:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0018936:	85 c0                	test   eax,eax
c0018938:	75 1e                	jne    c0018958 <Semaphore::release()+0x6c>
c001893a:	66 90                	xchg   ax,ax
c001893c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018941:	48                   	dec    eax
c0018942:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018947:	75 03                	jne    c001894c <Semaphore::release()+0x60>
c0018949:	fb                   	sti    
c001894a:	66 90                	xchg   ax,ax
c001894c:	83 c4 0c             	add    esp,0xc
c001894f:	c3                   	ret    
c0018950:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018953:	eb d3                	jmp    c0018928 <Semaphore::release()+0x3c>
c0018955:	8d 76 00             	lea    esi,[esi+0x0]
c0018958:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0018962:	e8 95 f5 ff ff       	call   c0017efc <schedule()>
c0018967:	eb d3                	jmp    c001893c <Semaphore::release()+0x50>
c0018969:	8d 76 00             	lea    esi,[esi+0x0]

c001896c <__static_initialization_and_destruction_0(int, int)>:
c001896c:	83 ec 0c             	sub    esp,0xc
c001896f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018974:	0f 85 8e 00 00 00    	jne    c0018a08 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001897a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018982:	0f 85 80 00 00 00    	jne    c0018a08 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018988:	83 ec 0c             	sub    esp,0xc
c001898b:	68 e4 78 02 c0       	push   0xc00278e4
c0018990:	e8 e7 8e 00 00       	call   c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	83 ec 04             	sub    esp,0x4
c001899b:	68 28 56 02 c0       	push   0xc0025628
c00189a0:	68 e4 78 02 c0       	push   0xc00278e4
c00189a5:	68 2c 18 02 c0       	push   0xc002182c
c00189aa:	e8 51 3f ff ff       	call   c000c900 <__cxa_atexit>
c00189af:	83 c4 10             	add    esp,0x10
c00189b2:	83 ec 0c             	sub    esp,0xc
c00189b5:	68 d8 78 02 c0       	push   0xc00278d8
c00189ba:	e8 bd 8e 00 00       	call   c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	83 ec 04             	sub    esp,0x4
c00189c5:	68 28 56 02 c0       	push   0xc0025628
c00189ca:	68 d8 78 02 c0       	push   0xc00278d8
c00189cf:	68 2c 18 02 c0       	push   0xc002182c
c00189d4:	e8 27 3f ff ff       	call   c000c900 <__cxa_atexit>
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	83 ec 0c             	sub    esp,0xc
c00189df:	68 cc 78 02 c0       	push   0xc00278cc
c00189e4:	e8 93 8e 00 00       	call   c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189e9:	83 c4 10             	add    esp,0x10
c00189ec:	83 ec 04             	sub    esp,0x4
c00189ef:	68 28 56 02 c0       	push   0xc0025628
c00189f4:	68 cc 78 02 c0       	push   0xc00278cc
c00189f9:	68 2c 18 02 c0       	push   0xc002182c
c00189fe:	e8 fd 3e ff ff       	call   c000c900 <__cxa_atexit>
c0018a03:	83 c4 10             	add    esp,0x10
c0018a06:	66 90                	xchg   ax,ax
c0018a08:	90                   	nop
c0018a09:	83 c4 0c             	add    esp,0xc
c0018a0c:	c3                   	ret    
c0018a0d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a10 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a10:	83 ec 0c             	sub    esp,0xc
c0018a13:	83 ec 08             	sub    esp,0x8
c0018a16:	68 ff ff 00 00       	push   0xffff
c0018a1b:	6a 01                	push   0x1
c0018a1d:	e8 4a ff ff ff       	call   c001896c <__static_initialization_and_destruction_0(int, int)>
c0018a22:	83 c4 10             	add    esp,0x10
c0018a25:	83 c4 0c             	add    esp,0xc
c0018a28:	c3                   	ret    

c0018a29 <Vm::inbv(unsigned short)>:
c0018a29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a2d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a32:	75 06                	jne    c0018a3a <Vm::inbv(unsigned short)+0x11>
c0018a34:	a0 2c 79 02 c0       	mov    al,ds:0xc002792c
c0018a39:	c3                   	ret    
c0018a3a:	ec                   	in     al,dx
c0018a3b:	c3                   	ret    

c0018a3c <Vm::outbv(unsigned short, unsigned char)>:
c0018a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a44:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a49:	75 25                	jne    c0018a70 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a4b:	8b 0d 2c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002792c
c0018a51:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a54:	88 81 40 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd86c0],al
c0018a5a:	89 15 2c 79 02 c0    	mov    DWORD PTR ds:0xc002792c,edx
c0018a60:	83 fa 20             	cmp    edx,0x20
c0018a63:	75 0c                	jne    c0018a71 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a65:	c7 05 2c 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x1f
c0018a6f:	c3                   	ret    
c0018a70:	ee                   	out    dx,al
c0018a71:	c3                   	ret    

c0018a72 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a72:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a7c:	c1 e0 04             	shl    eax,0x4
c0018a7f:	01 d0                	add    eax,edx
c0018a81:	c3                   	ret    

c0018a82 <Vm::getSegment(unsigned int)>:
c0018a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a86:	c1 e8 10             	shr    eax,0x10
c0018a89:	c3                   	ret    

c0018a8a <Vm::getOffset(unsigned int)>:
c0018a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8e:	c3                   	ret    

c0018a8f <Vm::mainloop2()>:
c0018a8f:	83 ec 18             	sub    esp,0x18
c0018a92:	fa                   	cli    
c0018a93:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018a99:	6a 02                	push   0x2
c0018a9b:	c6 05 25 79 02 c0 01 	mov    BYTE PTR ds:0xc0027925,0x1
c0018aa2:	e8 25 f6 ff ff       	call   c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aac:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018ab0:	52                   	push   edx
c0018ab1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018ab5:	52                   	push   edx
c0018ab6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018aba:	52                   	push   edx
c0018abb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018abf:	50                   	push   eax
c0018ac0:	e8 6a 77 fe ff       	call   c000022f <goToVM86>
c0018ac5:	83 c4 2c             	add    esp,0x2c
c0018ac8:	c3                   	ret    

c0018ac9 <Vm::mainVm8086Loop(void*)>:
c0018ac9:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018ace:	48                   	dec    eax
c0018acf:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018ad4:	75 01                	jne    c0018ad7 <Vm::mainVm8086Loop(void*)+0xe>
c0018ad6:	fb                   	sti    
c0018ad7:	eb b6                	jmp    c0018a8f <Vm::mainloop2()>

c0018ad9 <Vm::mainloop3(unsigned long)>:
c0018ad9:	83 ec 18             	sub    esp,0x18
c0018adc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ae0:	fa                   	cli    
c0018ae1:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018ae7:	6a 02                	push   0x2
c0018ae9:	c6 05 24 79 02 c0 01 	mov    BYTE PTR ds:0xc0027924,0x1
c0018af0:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c0018af5:	e8 d2 f5 ff ff       	call   c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018afa:	83 c4 1c             	add    esp,0x1c
c0018afd:	eb 90                	jmp    c0018a8f <Vm::mainloop2()>

c0018aff <Vm::initialise8086()>:
c0018aff:	83 ec 0c             	sub    esp,0xc
c0018b02:	68 80 00 00 00       	push   0x80
c0018b07:	6a 00                	push   0x0
c0018b09:	68 c9 8a 01 c0       	push   0xc0018ac9
c0018b0e:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0018b14:	e8 c7 f1 ff ff       	call   c0017ce0 <Process::createThread(void (*)(void*), void*, int)>
c0018b19:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b20:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018b25:	68 00 01 00 00       	push   0x100
c0018b2a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0018b2f:	6a 00                	push   0x0
c0018b31:	6a 00                	push   0x0
c0018b33:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b39:	e8 f4 34 ff ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b3e:	83 c4 2c             	add    esp,0x2c
c0018b41:	c3                   	ret    

c0018b42 <Vm::finish8086()>:
c0018b42:	53                   	push   ebx
c0018b43:	83 ec 08             	sub    esp,0x8
c0018b46:	fa                   	cli    
c0018b47:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018b4d:	80 3d 24 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027924,0x0
c0018b54:	75 15                	jne    c0018b6b <Vm::finish8086()+0x29>
c0018b56:	e8 a1 f3 ff ff       	call   c0017efc <schedule()>
c0018b5b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018b60:	48                   	dec    eax
c0018b61:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018b66:	75 de                	jne    c0018b46 <Vm::finish8086()+0x4>
c0018b68:	fb                   	sti    
c0018b69:	eb db                	jmp    c0018b46 <Vm::finish8086()+0x4>
c0018b6b:	83 ec 0c             	sub    esp,0xc
c0018b6e:	8b 1d 20 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027920
c0018b74:	ff 35 28 79 02 c0    	push   DWORD PTR ds:0xc0027928
c0018b7a:	c6 05 24 79 02 c0 00 	mov    BYTE PTR ds:0xc0027924,0x0
c0018b81:	e8 32 f8 ff ff       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c0018b86:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b91:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0018b97:	85 d2                	test   edx,edx
c0018b99:	75 01                	jne    c0018b9c <Vm::finish8086()+0x5a>
c0018b9b:	fb                   	sti    
c0018b9c:	89 d8                	mov    eax,ebx
c0018b9e:	83 c4 08             	add    esp,0x8
c0018ba1:	5b                   	pop    ebx
c0018ba2:	c3                   	ret    

c0018ba3 <Vm::getOutput8086(unsigned char*)>:
c0018ba3:	57                   	push   edi
c0018ba4:	8b 0d 2c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002792c
c0018baa:	56                   	push   esi
c0018bab:	be 40 79 02 c0       	mov    esi,0xc0027940
c0018bb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018bb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bb6:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c0018bbb:	5e                   	pop    esi
c0018bbc:	c7 05 2c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x0
c0018bc6:	5f                   	pop    edi
c0018bc7:	c3                   	ret    

c0018bc8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018bc8:	55                   	push   ebp
c0018bc9:	57                   	push   edi
c0018bca:	56                   	push   esi
c0018bcb:	53                   	push   ebx
c0018bcc:	83 ec 2c             	sub    esp,0x2c
c0018bcf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018bd3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018bd7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018bdb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018bdf:	fa                   	cli    
c0018be0:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018be6:	0f b6 35 25 79 02 c0 	movzx  esi,BYTE PTR ds:0xc0027925
c0018bed:	89 f0                	mov    eax,esi
c0018bef:	84 c0                	test   al,al
c0018bf1:	75 1d                	jne    c0018c10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bf7:	e8 00 f3 ff ff       	call   c0017efc <schedule()>
c0018bfc:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018c01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c05:	48                   	dec    eax
c0018c06:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018c0b:	75 d2                	jne    c0018bdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c0d:	fb                   	sti    
c0018c0e:	eb cf                	jmp    c0018bdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c10:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018c15:	c7 05 2c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x0
c0018c1f:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c23:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c27:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c2b:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c2f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c33:	50                   	push   eax
c0018c34:	6a 20                	push   0x20
c0018c36:	6a 00                	push   0x0
c0018c38:	68 40 79 02 c0       	push   0xc0027940
c0018c3d:	e8 42 7a fe ff       	call   c0000684 <memset>
c0018c42:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c49:	e8 75 0d ff ff       	call   c00099c3 <malloc>
c0018c4e:	83 c4 0c             	add    esp,0xc
c0018c51:	89 c3                	mov    ebx,eax
c0018c53:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0018c59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c5d:	50                   	push   eax
c0018c5e:	e8 6f 43 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	85 db                	test   ebx,ebx
c0018c68:	75 0a                	jne    c0018c74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c6a:	83 ec 0c             	sub    esp,0xc
c0018c6d:	68 5c 49 02 c0       	push   0xc002495c
c0018c72:	eb 3e                	jmp    c0018cb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c74:	50                   	push   eax
c0018c75:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c79:	50                   	push   eax
c0018c7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c7e:	50                   	push   eax
c0018c7f:	53                   	push   ebx
c0018c80:	e8 5d 46 ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c0018c85:	83 c4 10             	add    esp,0x10
c0018c88:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c8d:	74 0a                	je     c0018c99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c8f:	83 ec 0c             	sub    esp,0xc
c0018c92:	68 70 49 02 c0       	push   0xc0024970
c0018c97:	eb 19                	jmp    c0018cb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c99:	51                   	push   ecx
c0018c9a:	51                   	push   ecx
c0018c9b:	6a 01                	push   0x1
c0018c9d:	53                   	push   ebx
c0018c9e:	e8 93 43 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	85 c0                	test   eax,eax
c0018ca8:	74 24                	je     c0018cce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018caa:	83 ec 0c             	sub    esp,0xc
c0018cad:	68 89 49 02 c0       	push   0xc0024989
c0018cb2:	e8 72 b6 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0018cb7:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018cbc:	83 c4 10             	add    esp,0x10
c0018cbf:	48                   	dec    eax
c0018cc0:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018cc5:	85 c0                	test   eax,eax
c0018cc7:	75 01                	jne    c0018cca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018cc9:	fb                   	sti    
c0018cca:	31 f6                	xor    esi,esi
c0018ccc:	eb 58                	jmp    c0018d26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018cce:	0f b7 ed             	movzx  ebp,bp
c0018cd1:	50                   	push   eax
c0018cd2:	0f b7 ff             	movzx  edi,di
c0018cd5:	50                   	push   eax
c0018cd6:	55                   	push   ebp
c0018cd7:	57                   	push   edi
c0018cd8:	e8 95 fd ff ff       	call   c0018a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0018cdd:	5a                   	pop    edx
c0018cde:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ce0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018ce4:	51                   	push   ecx
c0018ce5:	50                   	push   eax
c0018ce6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cee:	53                   	push   ebx
c0018cef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cf2:	83 c4 14             	add    esp,0x14
c0018cf5:	53                   	push   ebx
c0018cf6:	e8 99 43 ff ff       	call   c000d094 <File::close()>
c0018cfb:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018d00:	83 c4 10             	add    esp,0x10
c0018d03:	48                   	dec    eax
c0018d04:	c6 05 25 79 02 c0 00 	mov    BYTE PTR ds:0xc0027925,0x0
c0018d0b:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018d10:	85 c0                	test   eax,eax
c0018d12:	75 01                	jne    c0018d15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d14:	fb                   	sti    
c0018d15:	83 ec 0c             	sub    esp,0xc
c0018d18:	ff 35 28 79 02 c0    	push   DWORD PTR ds:0xc0027928
c0018d1e:	e8 95 f6 ff ff       	call   c00183b8 <unblockTask(ThreadControlBlock*)>
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	83 c4 2c             	add    esp,0x2c
c0018d29:	89 f0                	mov    eax,esi
c0018d2b:	5b                   	pop    ebx
c0018d2c:	5e                   	pop    esi
c0018d2d:	5f                   	pop    edi
c0018d2e:	5d                   	pop    ebp
c0018d2f:	c3                   	ret    

c0018d30 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d30:	57                   	push   edi
c0018d31:	56                   	push   esi
c0018d32:	53                   	push   ebx
c0018d33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d3f:	83 e8 06             	sub    eax,0x6
c0018d42:	0f b7 c0             	movzx  eax,ax
c0018d45:	50                   	push   eax
c0018d46:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d4b:	50                   	push   eax
c0018d4c:	e8 21 fd ff ff       	call   c0018a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d51:	5a                   	pop    edx
c0018d52:	5e                   	pop    esi
c0018d53:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d56:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d59:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d5f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d62:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d65:	83 c2 02             	add    edx,0x2
c0018d68:	66 89 10             	mov    WORD PTR [eax],dx
c0018d6b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d6e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d72:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d75:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d79:	89 d6                	mov    esi,edx
c0018d7b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d81:	66 81 e6 ff fd       	and    si,0xfdff
c0018d86:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d8a:	74 07                	je     c0018d93 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d8c:	89 d6                	mov    esi,edx
c0018d8e:	66 81 ce 00 02       	or     si,0x200
c0018d93:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018d97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d9c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018da0:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018da8:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018dab:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018db3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018db6:	5b                   	pop    ebx
c0018db7:	5e                   	pop    esi
c0018db8:	5f                   	pop    edi
c0018db9:	c3                   	ret    

c0018dba <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018dba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dbf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dc4:	c1 e0 04             	shl    eax,0x4
c0018dc7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018dca:	c3                   	ret    

c0018dcb <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018dcb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dd0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dd5:	c1 e0 04             	shl    eax,0x4
c0018dd8:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018ddc:	c3                   	ret    

c0018ddd <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018ddd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018de2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018de7:	c1 e0 04             	shl    eax,0x4
c0018dea:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018ded:	c3                   	ret    

c0018dee <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018dee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018df3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018df8:	c1 e0 04             	shl    eax,0x4
c0018dfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dff:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e02:	c3                   	ret    

c0018e03 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e03:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e08:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e0d:	c1 e0 04             	shl    eax,0x4
c0018e10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e14:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e18:	c3                   	ret    

c0018e19 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e19:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e1e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e23:	c1 e0 04             	shl    eax,0x4
c0018e26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e2a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e2d:	c3                   	ret    

c0018e2e <Vm::faultHandler(regs*)>:
c0018e2e:	55                   	push   ebp
c0018e2f:	57                   	push   edi
c0018e30:	56                   	push   esi
c0018e31:	53                   	push   ebx
c0018e32:	83 ec 1c             	sub    esp,0x1c
c0018e35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e3c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e40:	0f b7 f8             	movzx  edi,ax
c0018e43:	52                   	push   edx
c0018e44:	0f b7 c0             	movzx  eax,ax
c0018e47:	50                   	push   eax
c0018e48:	e8 25 fc ff ff       	call   c0018a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e4d:	5a                   	pop    edx
c0018e4e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e51:	59                   	pop    ecx
c0018e52:	89 c1                	mov    ecx,eax
c0018e54:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e5b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e64:	0f b7 c5             	movzx  eax,bp
c0018e67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e6b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e73:	e8 fa fb ff ff       	call   c0018a72 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e78:	5e                   	pop    esi
c0018e79:	be 06 00 00 00       	mov    esi,0x6
c0018e7e:	5a                   	pop    edx
c0018e7f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e84:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e89:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e8c:	80 fa 9d             	cmp    dl,0x9d
c0018e8f:	0f 84 2c 02 00 00    	je     c00190c1 <Vm::faultHandler(regs*)+0x293>
c0018e95:	0f 87 91 00 00 00    	ja     c0018f2c <Vm::faultHandler(regs*)+0xfe>
c0018e9b:	80 fa 66             	cmp    dl,0x66
c0018e9e:	0f 84 98 01 00 00    	je     c001903c <Vm::faultHandler(regs*)+0x20e>
c0018ea4:	77 47                	ja     c0018eed <Vm::faultHandler(regs*)+0xbf>
c0018ea6:	80 fa 36             	cmp    dl,0x36
c0018ea9:	0f 84 80 01 00 00    	je     c001902f <Vm::faultHandler(regs*)+0x201>
c0018eaf:	77 1a                	ja     c0018ecb <Vm::faultHandler(regs*)+0x9d>
c0018eb1:	80 fa 26             	cmp    dl,0x26
c0018eb4:	0f 84 4e 01 00 00    	je     c0019008 <Vm::faultHandler(regs*)+0x1da>
c0018eba:	80 fa 2e             	cmp    dl,0x2e
c0018ebd:	0f 85 e2 05 00 00    	jne    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018ec3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ec6:	31 f6                	xor    esi,esi
c0018ec8:	41                   	inc    ecx
c0018ec9:	eb be                	jmp    c0018e89 <Vm::faultHandler(regs*)+0x5b>
c0018ecb:	80 fa 64             	cmp    dl,0x64
c0018ece:	0f 84 41 01 00 00    	je     c0019015 <Vm::faultHandler(regs*)+0x1e7>
c0018ed4:	0f 87 48 01 00 00    	ja     c0019022 <Vm::faultHandler(regs*)+0x1f4>
c0018eda:	80 fa 3e             	cmp    dl,0x3e
c0018edd:	0f 85 c2 05 00 00    	jne    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018ee3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ee6:	be 01 00 00 00       	mov    esi,0x1
c0018eeb:	eb db                	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c0018eed:	80 fa 6d             	cmp    dl,0x6d
c0018ef0:	0f 84 ec 02 00 00    	je     c00191e2 <Vm::faultHandler(regs*)+0x3b4>
c0018ef6:	77 17                	ja     c0018f0f <Vm::faultHandler(regs*)+0xe1>
c0018ef8:	80 fa 67             	cmp    dl,0x67
c0018efb:	0f 84 48 01 00 00    	je     c0019049 <Vm::faultHandler(regs*)+0x21b>
c0018f01:	80 fa 6c             	cmp    dl,0x6c
c0018f04:	0f 84 69 02 00 00    	je     c0019173 <Vm::faultHandler(regs*)+0x345>
c0018f0a:	e9 96 05 00 00       	jmp    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018f0f:	80 fa 6f             	cmp    dl,0x6f
c0018f12:	0f 84 f4 03 00 00    	je     c001930c <Vm::faultHandler(regs*)+0x4de>
c0018f18:	0f 82 59 03 00 00    	jb     c0019277 <Vm::faultHandler(regs*)+0x449>
c0018f1e:	80 fa 9c             	cmp    dl,0x9c
c0018f21:	0f 84 2f 01 00 00    	je     c0019056 <Vm::faultHandler(regs*)+0x228>
c0018f27:	e9 79 05 00 00       	jmp    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018f2c:	80 fa ec             	cmp    dl,0xec
c0018f2f:	0f 84 14 05 00 00    	je     c0019449 <Vm::faultHandler(regs*)+0x61b>
c0018f35:	77 7b                	ja     c0018fb2 <Vm::faultHandler(regs*)+0x184>
c0018f37:	80 fa e4             	cmp    dl,0xe4
c0018f3a:	0f 84 93 04 00 00    	je     c00193d3 <Vm::faultHandler(regs*)+0x5a5>
c0018f40:	77 53                	ja     c0018f95 <Vm::faultHandler(regs*)+0x167>
c0018f42:	80 fa cd             	cmp    dl,0xcd
c0018f45:	0f 84 d9 01 00 00    	je     c0019124 <Vm::faultHandler(regs*)+0x2f6>
c0018f4b:	80 fa cf             	cmp    dl,0xcf
c0018f4e:	0f 85 51 05 00 00    	jne    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018f54:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f57:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f5a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f5e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f61:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f65:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f6b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f6e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f72:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f78:	66 c1 e8 09          	shr    ax,0x9
c0018f7c:	83 e0 01             	and    eax,0x1
c0018f7f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f82:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f85:	83 c0 06             	add    eax,0x6
c0018f88:	25 ff ff 00 00       	and    eax,0xffff
c0018f8d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f90:	e9 0c 05 00 00       	jmp    c00194a1 <Vm::faultHandler(regs*)+0x673>
c0018f95:	80 fa e6             	cmp    dl,0xe6
c0018f98:	0f 84 7f 04 00 00    	je     c001941d <Vm::faultHandler(regs*)+0x5ef>
c0018f9e:	0f 82 4b 04 00 00    	jb     c00193ef <Vm::faultHandler(regs*)+0x5c1>
c0018fa4:	80 fa e7             	cmp    dl,0xe7
c0018fa7:	0f 84 87 04 00 00    	je     c0019434 <Vm::faultHandler(regs*)+0x606>
c0018fad:	e9 f3 04 00 00       	jmp    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018fb2:	80 fa ef             	cmp    dl,0xef
c0018fb5:	0f 84 d1 04 00 00    	je     c001948c <Vm::faultHandler(regs*)+0x65e>
c0018fbb:	77 28                	ja     c0018fe5 <Vm::faultHandler(regs*)+0x1b7>
c0018fbd:	80 fa ed             	cmp    dl,0xed
c0018fc0:	0f 84 9f 04 00 00    	je     c0019465 <Vm::faultHandler(regs*)+0x637>
c0018fc6:	80 fa ee             	cmp    dl,0xee
c0018fc9:	0f 85 d6 04 00 00    	jne    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0018fcf:	50                   	push   eax
c0018fd0:	50                   	push   eax
c0018fd1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018fd5:	50                   	push   eax
c0018fd6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fda:	50                   	push   eax
c0018fdb:	e8 5c fa ff ff       	call   c0018a3c <Vm::outbv(unsigned short, unsigned char)>
c0018fe0:	e9 9f 04 00 00       	jmp    c0019484 <Vm::faultHandler(regs*)+0x656>
c0018fe5:	80 fa fa             	cmp    dl,0xfa
c0018fe8:	0f 84 69 01 00 00    	je     c0019157 <Vm::faultHandler(regs*)+0x329>
c0018fee:	80 fa fb             	cmp    dl,0xfb
c0018ff1:	0f 84 6e 01 00 00    	je     c0019165 <Vm::faultHandler(regs*)+0x337>
c0018ff7:	80 fa f3             	cmp    dl,0xf3
c0018ffa:	0f 85 a5 04 00 00    	jne    c00194a5 <Vm::faultHandler(regs*)+0x677>
c0019000:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019003:	e9 c0 fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c0019008:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001900b:	be 02 00 00 00       	mov    esi,0x2
c0019010:	e9 b3 fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c0019015:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019018:	be 03 00 00 00       	mov    esi,0x3
c001901d:	e9 a6 fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c0019022:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019025:	be 04 00 00 00       	mov    esi,0x4
c001902a:	e9 99 fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c001902f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019032:	be 05 00 00 00       	mov    esi,0x5
c0019037:	e9 8c fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c001903c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001903f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019044:	e9 7f fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c0019049:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001904c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019051:	e9 72 fe ff ff       	jmp    c0018ec8 <Vm::faultHandler(regs*)+0x9a>
c0019056:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019059:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001905d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019062:	74 30                	je     c0019094 <Vm::faultHandler(regs*)+0x266>
c0019064:	83 e9 04             	sub    ecx,0x4
c0019067:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001906d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019073:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019076:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019079:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001907f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019083:	0f 84 15 04 00 00    	je     c001949e <Vm::faultHandler(regs*)+0x670>
c0019089:	80 ce 02             	or     dh,0x2
c001908c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001908f:	e9 0a 04 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c0019094:	83 e9 02             	sub    ecx,0x2
c0019097:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001909d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190a0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190aa:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190ae:	74 05                	je     c00190b5 <Vm::faultHandler(regs*)+0x287>
c00190b0:	80 ce 02             	or     dh,0x2
c00190b3:	eb 03                	jmp    c00190b8 <Vm::faultHandler(regs*)+0x28a>
c00190b5:	80 e6 fd             	and    dh,0xfd
c00190b8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190bc:	e9 dd 03 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c00190c1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190c6:	74 2a                	je     c00190f2 <Vm::faultHandler(regs*)+0x2c4>
c00190c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00190ca:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190d0:	81 ca 00 02 02 00    	or     edx,0x20200
c00190d6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00190db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190e1:	c1 e8 09             	shr    eax,0x9
c00190e4:	83 e0 01             	and    eax,0x1
c00190e7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190ea:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190ed:	83 c0 04             	add    eax,0x4
c00190f0:	eb 25                	jmp    c0019117 <Vm::faultHandler(regs*)+0x2e9>
c00190f2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00190f5:	81 ca 00 02 02 00    	or     edx,0x20200
c00190fb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190fe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019101:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019107:	66 c1 e8 09          	shr    ax,0x9
c001910b:	83 e0 01             	and    eax,0x1
c001910e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019111:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019114:	83 c0 02             	add    eax,0x2
c0019117:	25 ff ff 00 00       	and    eax,0xffff
c001911c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001911f:	e9 7a 03 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c0019124:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019128:	3c ee                	cmp    al,0xee
c001912a:	75 10                	jne    c001913c <Vm::faultHandler(regs*)+0x30e>
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019132:	e8 a2 f9 ff ff       	call   c0018ad9 <Vm::mainloop3(unsigned long)>
c0019137:	e9 4b 03 00 00       	jmp    c0019487 <Vm::faultHandler(regs*)+0x659>
c001913c:	83 ec 0c             	sub    esp,0xc
c001913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019147:	51                   	push   ecx
c0019148:	50                   	push   eax
c0019149:	53                   	push   ebx
c001914a:	e8 e1 fb ff ff       	call   c0018d30 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001914f:	83 c4 20             	add    esp,0x20
c0019152:	e9 4a 03 00 00       	jmp    c00194a1 <Vm::faultHandler(regs*)+0x673>
c0019157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001915c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019160:	e9 39 03 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c0019165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001916a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001916e:	e9 2b 03 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c0019173:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019176:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001917b:	74 2b                	je     c00191a8 <Vm::faultHandler(regs*)+0x37a>
c001917d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019184:	76 22                	jbe    c00191a8 <Vm::faultHandler(regs*)+0x37a>
c0019186:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001918a:	50                   	push   eax
c001918b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001918f:	50                   	push   eax
c0019190:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019194:	50                   	push   eax
c0019195:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019199:	50                   	push   eax
c001919a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001919e:	50                   	push   eax
c001919f:	6a 6c                	push   0x6c
c00191a1:	6a 6c                	push   0x6c
c00191a3:	e9 b9 01 00 00       	jmp    c0019361 <Vm::faultHandler(regs*)+0x533>
c00191a8:	83 ec 0c             	sub    esp,0xc
c00191ab:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191af:	0f b7 f6             	movzx  esi,si
c00191b2:	50                   	push   eax
c00191b3:	e8 71 f8 ff ff       	call   c0018a29 <Vm::inbv(unsigned short)>
c00191b8:	83 c4 0c             	add    esp,0xc
c00191bb:	0f b6 c0             	movzx  eax,al
c00191be:	50                   	push   eax
c00191bf:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00191c3:	50                   	push   eax
c00191c4:	56                   	push   esi
c00191c5:	e8 24 fc ff ff       	call   c0018dee <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00191ca:	83 c4 10             	add    esp,0x10
c00191cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191d0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191d4:	74 03                	je     c00191d9 <Vm::faultHandler(regs*)+0x3ab>
c00191d6:	48                   	dec    eax
c00191d7:	eb 01                	jmp    c00191da <Vm::faultHandler(regs*)+0x3ac>
c00191d9:	40                   	inc    eax
c00191da:	0f b7 c0             	movzx  eax,ax
c00191dd:	e9 8d 00 00 00       	jmp    c001926f <Vm::faultHandler(regs*)+0x441>
c00191e2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191e8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191ed:	74 29                	je     c0019218 <Vm::faultHandler(regs*)+0x3ea>
c00191ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00191f4:	76 22                	jbe    c0019218 <Vm::faultHandler(regs*)+0x3ea>
c00191f6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191fa:	50                   	push   eax
c00191fb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191ff:	50                   	push   eax
c0019200:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019204:	50                   	push   eax
c0019205:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019209:	50                   	push   eax
c001920a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001920e:	50                   	push   eax
c001920f:	6a 6d                	push   0x6d
c0019211:	6a 6d                	push   0x6d
c0019213:	e9 49 01 00 00       	jmp    c0019361 <Vm::faultHandler(regs*)+0x533>
c0019218:	0f b7 c8             	movzx  ecx,ax
c001921b:	0f b7 f6             	movzx  esi,si
c001921e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019221:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019226:	74 20                	je     c0019248 <Vm::faultHandler(regs*)+0x41a>
c0019228:	ed                   	in     eax,dx
c0019229:	55                   	push   ebp
c001922a:	50                   	push   eax
c001922b:	51                   	push   ecx
c001922c:	56                   	push   esi
c001922d:	e8 e7 fb ff ff       	call   c0018e19 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019238:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001923c:	74 05                	je     c0019243 <Vm::faultHandler(regs*)+0x415>
c001923e:	83 e8 04             	sub    eax,0x4
c0019241:	eb 27                	jmp    c001926a <Vm::faultHandler(regs*)+0x43c>
c0019243:	83 c0 04             	add    eax,0x4
c0019246:	eb 22                	jmp    c001926a <Vm::faultHandler(regs*)+0x43c>
c0019248:	66 ed                	in     ax,dx
c001924a:	0f b7 c0             	movzx  eax,ax
c001924d:	57                   	push   edi
c001924e:	50                   	push   eax
c001924f:	51                   	push   ecx
c0019250:	56                   	push   esi
c0019251:	e8 ad fb ff ff       	call   c0018e03 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019256:	83 c4 10             	add    esp,0x10
c0019259:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001925c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019260:	74 05                	je     c0019267 <Vm::faultHandler(regs*)+0x439>
c0019262:	83 e8 02             	sub    eax,0x2
c0019265:	eb 03                	jmp    c001926a <Vm::faultHandler(regs*)+0x43c>
c0019267:	83 c0 02             	add    eax,0x2
c001926a:	25 ff ff 00 00       	and    eax,0xffff
c001926f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019272:	e9 27 02 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c0019277:	8d 46 ff             	lea    eax,[esi-0x1]
c001927a:	3c 05                	cmp    al,0x5
c001927c:	77 24                	ja     c00192a2 <Vm::faultHandler(regs*)+0x474>
c001927e:	0f b6 c0             	movzx  eax,al
c0019281:	ff 24 85 fc 49 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb604]
c0019288:	0f b7 fd             	movzx  edi,bp
c001928b:	eb 15                	jmp    c00192a2 <Vm::faultHandler(regs*)+0x474>
c001928d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019291:	eb 0f                	jmp    c00192a2 <Vm::faultHandler(regs*)+0x474>
c0019293:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019297:	eb 09                	jmp    c00192a2 <Vm::faultHandler(regs*)+0x474>
c0019299:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001929d:	eb 03                	jmp    c00192a2 <Vm::faultHandler(regs*)+0x474>
c001929f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00192a2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192a5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00192aa:	74 29                	je     c00192d5 <Vm::faultHandler(regs*)+0x4a7>
c00192ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00192b1:	76 22                	jbe    c00192d5 <Vm::faultHandler(regs*)+0x4a7>
c00192b3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00192b7:	50                   	push   eax
c00192b8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00192bc:	50                   	push   eax
c00192bd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00192c1:	50                   	push   eax
c00192c2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00192c6:	50                   	push   eax
c00192c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192cb:	50                   	push   eax
c00192cc:	6a 6e                	push   0x6e
c00192ce:	6a 6e                	push   0x6e
c00192d0:	e9 8c 00 00 00       	jmp    c0019361 <Vm::faultHandler(regs*)+0x533>
c00192d5:	0f b7 c0             	movzx  eax,ax
c00192d8:	52                   	push   edx
c00192d9:	52                   	push   edx
c00192da:	50                   	push   eax
c00192db:	57                   	push   edi
c00192dc:	e8 d9 fa ff ff       	call   c0018dba <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192e1:	59                   	pop    ecx
c00192e2:	0f b6 c0             	movzx  eax,al
c00192e5:	5e                   	pop    esi
c00192e6:	50                   	push   eax
c00192e7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192eb:	50                   	push   eax
c00192ec:	e8 4b f7 ff ff       	call   c0018a3c <Vm::outbv(unsigned short, unsigned char)>
c00192f1:	83 c4 10             	add    esp,0x10
c00192f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192f7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192fb:	74 03                	je     c0019300 <Vm::faultHandler(regs*)+0x4d2>
c00192fd:	48                   	dec    eax
c00192fe:	eb 01                	jmp    c0019301 <Vm::faultHandler(regs*)+0x4d3>
c0019300:	40                   	inc    eax
c0019301:	0f b7 c0             	movzx  eax,ax
c0019304:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019307:	e9 92 01 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c001930c:	8d 46 ff             	lea    eax,[esi-0x1]
c001930f:	3c 05                	cmp    al,0x5
c0019311:	77 1f                	ja     c0019332 <Vm::faultHandler(regs*)+0x504>
c0019313:	0f b6 c0             	movzx  eax,al
c0019316:	ff 24 85 14 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5ec]
c001931d:	89 ef                	mov    edi,ebp
c001931f:	eb 11                	jmp    c0019332 <Vm::faultHandler(regs*)+0x504>
c0019321:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019324:	eb 0c                	jmp    c0019332 <Vm::faultHandler(regs*)+0x504>
c0019326:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019329:	eb 07                	jmp    c0019332 <Vm::faultHandler(regs*)+0x504>
c001932b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001932e:	eb 02                	jmp    c0019332 <Vm::faultHandler(regs*)+0x504>
c0019330:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019332:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019335:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001933a:	74 37                	je     c0019373 <Vm::faultHandler(regs*)+0x545>
c001933c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019342:	76 2f                	jbe    c0019373 <Vm::faultHandler(regs*)+0x545>
c0019344:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019348:	50                   	push   eax
c0019349:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001934d:	50                   	push   eax
c001934e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019352:	50                   	push   eax
c0019353:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019357:	50                   	push   eax
c0019358:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001935c:	50                   	push   eax
c001935d:	6a 6f                	push   0x6f
c001935f:	6a 6f                	push   0x6f
c0019361:	68 a2 49 02 c0       	push   0xc00249a2
c0019366:	e8 fc 36 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001936b:	83 c4 20             	add    esp,0x20
c001936e:	e9 86 01 00 00       	jmp    c00194f9 <Vm::faultHandler(regs*)+0x6cb>
c0019373:	0f b7 d7             	movzx  edx,di
c0019376:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019379:	0f b7 c6             	movzx  eax,si
c001937c:	81 e1 00 04 00 00    	and    ecx,0x400
c0019382:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019385:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001938a:	74 1d                	je     c00193a9 <Vm::faultHandler(regs*)+0x57b>
c001938c:	55                   	push   ebp
c001938d:	55                   	push   ebp
c001938e:	50                   	push   eax
c001938f:	52                   	push   edx
c0019390:	e8 48 fa ff ff       	call   c0018ddd <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	89 fa                	mov    edx,edi
c001939a:	ef                   	out    dx,eax
c001939b:	85 c9                	test   ecx,ecx
c001939d:	74 05                	je     c00193a4 <Vm::faultHandler(regs*)+0x576>
c001939f:	83 ee 04             	sub    esi,0x4
c00193a2:	eb 21                	jmp    c00193c5 <Vm::faultHandler(regs*)+0x597>
c00193a4:	83 c6 04             	add    esi,0x4
c00193a7:	eb 1c                	jmp    c00193c5 <Vm::faultHandler(regs*)+0x597>
c00193a9:	55                   	push   ebp
c00193aa:	55                   	push   ebp
c00193ab:	50                   	push   eax
c00193ac:	52                   	push   edx
c00193ad:	e8 19 fa ff ff       	call   c0018dcb <Vm::readWordFromReal(unsigned short, unsigned short)>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	89 fa                	mov    edx,edi
c00193b7:	66 ef                	out    dx,ax
c00193b9:	85 c9                	test   ecx,ecx
c00193bb:	74 05                	je     c00193c2 <Vm::faultHandler(regs*)+0x594>
c00193bd:	83 ee 02             	sub    esi,0x2
c00193c0:	eb 03                	jmp    c00193c5 <Vm::faultHandler(regs*)+0x597>
c00193c2:	83 c6 02             	add    esi,0x2
c00193c5:	81 e6 ff ff 00 00    	and    esi,0xffff
c00193cb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193ce:	e9 cb 00 00 00       	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c00193d3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193da:	83 ec 0c             	sub    esp,0xc
c00193dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193e1:	50                   	push   eax
c00193e2:	e8 42 f6 ff ff       	call   c0018a29 <Vm::inbv(unsigned short)>
c00193e7:	0f b6 c0             	movzx  eax,al
c00193ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193ed:	eb 3f                	jmp    c001942e <Vm::faultHandler(regs*)+0x600>
c00193ef:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193f4:	74 07                	je     c00193fd <Vm::faultHandler(regs*)+0x5cf>
c00193f6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193fa:	ed                   	in     eax,dx
c00193fb:	eb 14                	jmp    c0019411 <Vm::faultHandler(regs*)+0x5e3>
c00193fd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019400:	66 31 f6             	xor    si,si
c0019403:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019406:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001940a:	66 ed                	in     ax,dx
c001940c:	0f b7 c0             	movzx  eax,ax
c001940f:	09 f0                	or     eax,esi
c0019411:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019414:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019418:	e9 84 00 00 00       	jmp    c00194a1 <Vm::faultHandler(regs*)+0x673>
c001941d:	52                   	push   edx
c001941e:	52                   	push   edx
c001941f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019423:	50                   	push   eax
c0019424:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019428:	50                   	push   eax
c0019429:	e8 0e f6 ff ff       	call   c0018a3c <Vm::outbv(unsigned short, unsigned char)>
c001942e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019432:	eb 53                	jmp    c0019487 <Vm::faultHandler(regs*)+0x659>
c0019434:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019437:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001943b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019440:	74 03                	je     c0019445 <Vm::faultHandler(regs*)+0x617>
c0019442:	ef                   	out    dx,eax
c0019443:	eb cf                	jmp    c0019414 <Vm::faultHandler(regs*)+0x5e6>
c0019445:	66 ef                	out    dx,ax
c0019447:	eb cb                	jmp    c0019414 <Vm::faultHandler(regs*)+0x5e6>
c0019449:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019450:	83 ec 0c             	sub    esp,0xc
c0019453:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019457:	50                   	push   eax
c0019458:	e8 cc f5 ff ff       	call   c0018a29 <Vm::inbv(unsigned short)>
c001945d:	0f b6 c0             	movzx  eax,al
c0019460:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019463:	eb 1f                	jmp    c0019484 <Vm::faultHandler(regs*)+0x656>
c0019465:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019468:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001946d:	74 03                	je     c0019472 <Vm::faultHandler(regs*)+0x644>
c001946f:	ed                   	in     eax,dx
c0019470:	eb 0d                	jmp    c001947f <Vm::faultHandler(regs*)+0x651>
c0019472:	66 ed                	in     ax,dx
c0019474:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019477:	0f b7 c0             	movzx  eax,ax
c001947a:	66 31 d2             	xor    dx,dx
c001947d:	09 d0                	or     eax,edx
c001947f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019482:	eb 1a                	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c0019484:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019487:	83 c4 10             	add    esp,0x10
c001948a:	eb 15                	jmp    c00194a1 <Vm::faultHandler(regs*)+0x673>
c001948c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001948f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019492:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019497:	74 03                	je     c001949c <Vm::faultHandler(regs*)+0x66e>
c0019499:	ef                   	out    dx,eax
c001949a:	eb 02                	jmp    c001949e <Vm::faultHandler(regs*)+0x670>
c001949c:	66 ef                	out    dx,ax
c001949e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194a1:	b0 01                	mov    al,0x1
c00194a3:	eb 56                	jmp    c00194fb <Vm::faultHandler(regs*)+0x6cd>
c00194a5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00194a9:	50                   	push   eax
c00194aa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00194ae:	50                   	push   eax
c00194af:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00194b3:	50                   	push   eax
c00194b4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00194b8:	50                   	push   eax
c00194b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194bd:	50                   	push   eax
c00194be:	52                   	push   edx
c00194bf:	52                   	push   edx
c00194c0:	68 cf 49 02 c0       	push   0xc00249cf
c00194c5:	e8 9d 35 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c00194ca:	83 c4 20             	add    esp,0x20
c00194cd:	83 ec 0c             	sub    esp,0xc
c00194d0:	6a 60                	push   0x60
c00194d2:	e8 52 f5 ff ff       	call   c0018a29 <Vm::inbv(unsigned short)>
c00194d7:	83 c4 10             	add    esp,0x10
c00194da:	3c 1c                	cmp    al,0x1c
c00194dc:	74 04                	je     c00194e2 <Vm::faultHandler(regs*)+0x6b4>
c00194de:	3c 5a                	cmp    al,0x5a
c00194e0:	75 eb                	jne    c00194cd <Vm::faultHandler(regs*)+0x69f>
c00194e2:	3c 5a                	cmp    al,0x5a
c00194e4:	74 04                	je     c00194ea <Vm::faultHandler(regs*)+0x6bc>
c00194e6:	3c 1c                	cmp    al,0x1c
c00194e8:	75 0f                	jne    c00194f9 <Vm::faultHandler(regs*)+0x6cb>
c00194ea:	83 ec 0c             	sub    esp,0xc
c00194ed:	6a 60                	push   0x60
c00194ef:	e8 35 f5 ff ff       	call   c0018a29 <Vm::inbv(unsigned short)>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	eb e9                	jmp    c00194e2 <Vm::faultHandler(regs*)+0x6b4>
c00194f9:	31 c0                	xor    eax,eax
c00194fb:	83 c4 1c             	add    esp,0x1c
c00194fe:	5b                   	pop    ebx
c00194ff:	5e                   	pop    esi
c0019500:	5f                   	pop    edi
c0019501:	5d                   	pop    ebp
c0019502:	c3                   	ret    
c0019503:	90                   	nop

c0019504 <Vm::fpuInternalTo32(unsigned long long)>:
c0019504:	57                   	push   edi
c0019505:	56                   	push   esi
c0019506:	53                   	push   ebx
c0019507:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001950b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001950f:	89 d6                	mov    esi,edx
c0019511:	89 d7                	mov    edi,edx
c0019513:	89 c1                	mov    ecx,eax
c0019515:	c1 ef 14             	shr    edi,0x14
c0019518:	89 d3                	mov    ebx,edx
c001951a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019520:	31 d2                	xor    edx,edx
c0019522:	89 f8                	mov    eax,edi
c0019524:	81 e6 00 00 00 80    	and    esi,0x80000000
c001952a:	bf ff 00 00 00       	mov    edi,0xff
c001952f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019534:	83 d2 ff             	adc    edx,0xffffffff
c0019537:	39 c7                	cmp    edi,eax
c0019539:	bf 00 00 00 00       	mov    edi,0x0
c001953e:	19 d7                	sbb    edi,edx
c0019540:	72 16                	jb     c0019558 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019542:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019546:	c1 e0 17             	shl    eax,0x17
c0019549:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001954f:	09 f1                	or     ecx,esi
c0019551:	09 c1                	or     ecx,eax
c0019553:	89 cf                	mov    edi,ecx
c0019555:	eb 05                	jmp    c001955c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019557:	90                   	nop
c0019558:	31 ff                	xor    edi,edi
c001955a:	66 90                	xchg   ax,ax
c001955c:	89 f8                	mov    eax,edi
c001955e:	5b                   	pop    ebx
c001955f:	5e                   	pop    esi
c0019560:	5f                   	pop    edi
c0019561:	c3                   	ret    

c0019562 <Vm::fpuInternalTo64(unsigned long long)>:
c0019562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001956a:	c3                   	ret    

c001956b <Vm::fpu32ToInternal(unsigned int)>:
c001956b:	57                   	push   edi
c001956c:	31 ff                	xor    edi,edi
c001956e:	56                   	push   esi
c001956f:	53                   	push   ebx
c0019570:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019574:	89 cb                	mov    ebx,ecx
c0019576:	89 ce                	mov    esi,ecx
c0019578:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001957e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019584:	c1 e9 17             	shr    ecx,0x17
c0019587:	89 f0                	mov    eax,esi
c0019589:	0f b6 d1             	movzx  edx,cl
c001958c:	81 c2 80 03 00 00    	add    edx,0x380
c0019592:	89 d1                	mov    ecx,edx
c0019594:	89 fa                	mov    edx,edi
c0019596:	c1 e1 14             	shl    ecx,0x14
c0019599:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001959d:	c1 e0 1d             	shl    eax,0x1d
c00195a0:	89 d7                	mov    edi,edx
c00195a2:	89 c6                	mov    esi,eax
c00195a4:	89 ca                	mov    edx,ecx
c00195a6:	89 f0                	mov    eax,esi
c00195a8:	09 fa                	or     edx,edi
c00195aa:	09 da                	or     edx,ebx
c00195ac:	5b                   	pop    ebx
c00195ad:	5e                   	pop    esi
c00195ae:	5f                   	pop    edi
c00195af:	c3                   	ret    

c00195b0 <Vm::fpu64ToInternal(unsigned long long)>:
c00195b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195b8:	c3                   	ret    

c00195b9 <Vm::fpuFloatToLong(unsigned long long)>:
c00195b9:	57                   	push   edi
c00195ba:	31 c0                	xor    eax,eax
c00195bc:	56                   	push   esi
c00195bd:	31 d2                	xor    edx,edx
c00195bf:	53                   	push   ebx
c00195c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195c8:	89 d9                	mov    ecx,ebx
c00195ca:	c1 e9 14             	shr    ecx,0x14
c00195cd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195d3:	89 cf                	mov    edi,ecx
c00195d5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195db:	78 37                	js     c0019614 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195dd:	89 d9                	mov    ecx,ebx
c00195df:	89 f0                	mov    eax,esi
c00195e1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195e7:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195ed:	89 ca                	mov    edx,ecx
c00195ef:	b9 34 00 00 00       	mov    ecx,0x34
c00195f4:	29 f9                	sub    ecx,edi
c00195f6:	0f ad d0             	shrd   eax,edx,cl
c00195f9:	d3 fa                	sar    edx,cl
c00195fb:	f6 c1 20             	test   cl,0x20
c00195fe:	74 08                	je     c0019608 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019600:	89 d0                	mov    eax,edx
c0019602:	c1 fa 1f             	sar    edx,0x1f
c0019605:	8d 76 00             	lea    esi,[esi+0x0]
c0019608:	85 db                	test   ebx,ebx
c001960a:	79 08                	jns    c0019614 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001960c:	f7 d8                	neg    eax
c001960e:	83 d2 00             	adc    edx,0x0
c0019611:	f7 da                	neg    edx
c0019613:	90                   	nop
c0019614:	5b                   	pop    ebx
c0019615:	5e                   	pop    esi
c0019616:	5f                   	pop    edi
c0019617:	c3                   	ret    

c0019618 <Vm::fpuULongToFloat(unsigned long long)>:
c0019618:	57                   	push   edi
c0019619:	31 c9                	xor    ecx,ecx
c001961b:	56                   	push   esi
c001961c:	53                   	push   ebx
c001961d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019621:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019625:	8d 76 00             	lea    esi,[esi+0x0]
c0019628:	0f ba e7 14          	bt     edi,0x14
c001962c:	72 0a                	jb     c0019638 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001962e:	01 f6                	add    esi,esi
c0019630:	11 ff                	adc    edi,edi
c0019632:	41                   	inc    ecx
c0019633:	eb f3                	jmp    c0019628 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	89 fa                	mov    edx,edi
c001963a:	89 f0                	mov    eax,esi
c001963c:	bb 33 04 00 00       	mov    ebx,0x433
c0019641:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019647:	29 cb                	sub    ebx,ecx
c0019649:	89 d9                	mov    ecx,ebx
c001964b:	5b                   	pop    ebx
c001964c:	c1 e1 14             	shl    ecx,0x14
c001964f:	5e                   	pop    esi
c0019650:	09 ca                	or     edx,ecx
c0019652:	5f                   	pop    edi
c0019653:	c3                   	ret    

c0019654 <Vm::fpuLongToFloat(long long)>:
c0019654:	56                   	push   esi
c0019655:	31 c0                	xor    eax,eax
c0019657:	53                   	push   ebx
c0019658:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001965c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019660:	39 c8                	cmp    eax,ecx
c0019662:	19 d8                	sbb    eax,ebx
c0019664:	7d 06                	jge    c001966c <Vm::fpuLongToFloat(long long)+0x18>
c0019666:	31 f6                	xor    esi,esi
c0019668:	eb 0e                	jmp    c0019678 <Vm::fpuLongToFloat(long long)+0x24>
c001966a:	66 90                	xchg   ax,ax
c001966c:	f7 d9                	neg    ecx
c001966e:	be 01 00 00 00       	mov    esi,0x1
c0019673:	83 d3 00             	adc    ebx,0x0
c0019676:	f7 db                	neg    ebx
c0019678:	31 c0                	xor    eax,eax
c001967a:	66 90                	xchg   ax,ax
c001967c:	0f ba e3 14          	bt     ebx,0x14
c0019680:	72 0a                	jb     c001968c <Vm::fpuLongToFloat(long long)+0x38>
c0019682:	01 c9                	add    ecx,ecx
c0019684:	11 db                	adc    ebx,ebx
c0019686:	40                   	inc    eax
c0019687:	eb f3                	jmp    c001967c <Vm::fpuLongToFloat(long long)+0x28>
c0019689:	8d 76 00             	lea    esi,[esi+0x0]
c001968c:	ba 33 04 00 00       	mov    edx,0x433
c0019691:	29 c2                	sub    edx,eax
c0019693:	89 c8                	mov    eax,ecx
c0019695:	c1 e2 14             	shl    edx,0x14
c0019698:	89 d9                	mov    ecx,ebx
c001969a:	89 f3                	mov    ebx,esi
c001969c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00196a2:	09 ca                	or     edx,ecx
c00196a4:	84 db                	test   bl,bl
c00196a6:	74 08                	je     c00196b0 <Vm::fpuLongToFloat(long long)+0x5c>
c00196a8:	81 ca 00 00 00 80    	or     edx,0x80000000
c00196ae:	66 90                	xchg   ax,ax
c00196b0:	5b                   	pop    ebx
c00196b1:	5e                   	pop    esi
c00196b2:	c3                   	ret    

c00196b3 <Vm::fpuGet0()>:
c00196b3:	31 c0                	xor    eax,eax
c00196b5:	31 d2                	xor    edx,edx
c00196b7:	c3                   	ret    

c00196b8 <Vm::fpuGet1()>:
c00196b8:	b8 01 00 00 00       	mov    eax,0x1
c00196bd:	31 d2                	xor    edx,edx
c00196bf:	c3                   	ret    

c00196c0 <Vm::fpuGetPi()>:
c00196c0:	b8 03 00 00 00       	mov    eax,0x3
c00196c5:	31 d2                	xor    edx,edx
c00196c7:	c3                   	ret    

c00196c8 <Vm::fpuGetLog2E()>:
c00196c8:	83 ec 18             	sub    esp,0x18
c00196cb:	68 2c 4a 02 c0       	push   0xc0024a2c
c00196d0:	e8 54 ac ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00196d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196da:	31 d2                	xor    edx,edx
c00196dc:	83 c4 1c             	add    esp,0x1c
c00196df:	c3                   	ret    

c00196e0 <Vm::fpuGetLogE2()>:
c00196e0:	83 ec 18             	sub    esp,0x18
c00196e3:	68 38 4a 02 c0       	push   0xc0024a38
c00196e8:	e8 3c ac ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00196ed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196f2:	31 d2                	xor    edx,edx
c00196f4:	83 c4 1c             	add    esp,0x1c
c00196f7:	c3                   	ret    

c00196f8 <Vm::fpuGetLog210()>:
c00196f8:	83 ec 18             	sub    esp,0x18
c00196fb:	68 44 4a 02 c0       	push   0xc0024a44
c0019700:	e8 24 ac ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0019705:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001970a:	31 d2                	xor    edx,edx
c001970c:	83 c4 1c             	add    esp,0x1c
c001970f:	c3                   	ret    

c0019710 <Vm::fpuGetLog102()>:
c0019710:	83 ec 18             	sub    esp,0x18
c0019713:	68 51 4a 02 c0       	push   0xc0024a51
c0019718:	e8 0c ac ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001971d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019722:	31 d2                	xor    edx,edx
c0019724:	83 c4 1c             	add    esp,0x1c
c0019727:	c3                   	ret    

c0019728 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001972c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019734:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019738:	0f 92 c0             	setb   al
c001973b:	c3                   	ret    

c001973c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001973c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019744:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019748:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001974c:	09 c2                	or     edx,eax
c001974e:	0f 94 c0             	sete   al
c0019751:	c3                   	ret    

c0019752 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019752:	57                   	push   edi
c0019753:	56                   	push   esi
c0019754:	53                   	push   ebx
c0019755:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019759:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001975d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019761:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019765:	57                   	push   edi
c0019766:	56                   	push   esi
c0019767:	53                   	push   ebx
c0019768:	51                   	push   ecx
c0019769:	e8 ce ff ff ff       	call   c001973c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001976e:	83 c4 10             	add    esp,0x10
c0019771:	88 c2                	mov    dl,al
c0019773:	31 c0                	xor    eax,eax
c0019775:	84 d2                	test   dl,dl
c0019777:	75 0f                	jne    c0019788 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019779:	57                   	push   edi
c001977a:	56                   	push   esi
c001977b:	53                   	push   ebx
c001977c:	51                   	push   ecx
c001977d:	e8 a6 ff ff ff       	call   c0019728 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019782:	83 c4 10             	add    esp,0x10
c0019785:	8d 76 00             	lea    esi,[esi+0x0]
c0019788:	83 e0 01             	and    eax,0x1
c001978b:	5b                   	pop    ebx
c001978c:	88 c1                	mov    cl,al
c001978e:	83 e2 01             	and    edx,0x1
c0019791:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c0019796:	c1 e2 06             	shl    edx,0x6
c0019799:	83 e0 ba             	and    eax,0xffffffba
c001979c:	5e                   	pop    esi
c001979d:	09 c8                	or     eax,ecx
c001979f:	5f                   	pop    edi
c00197a0:	09 d0                	or     eax,edx
c00197a2:	a2 61 79 02 c0       	mov    ds:0xc0027961,al
c00197a7:	c3                   	ret    

c00197a8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00197a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197b0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00197b4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00197b8:	c3                   	ret    

c00197b9 <Vm::fpuAbs(unsigned long long)>:
c00197b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197c1:	c3                   	ret    

c00197c2 <Vm::fpuChs(unsigned long long)>:
c00197c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197ca:	f7 d8                	neg    eax
c00197cc:	83 d2 00             	adc    edx,0x0
c00197cf:	f7 da                	neg    edx
c00197d1:	c3                   	ret    

c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197d2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197d6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197db:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197df:	eb c7                	jmp    c00197a8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197e1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197e1:	53                   	push   ebx
c00197e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197f2:	0f af ca             	imul   ecx,edx
c00197f5:	0f af d8             	imul   ebx,eax
c00197f8:	f7 e2                	mul    edx
c00197fa:	01 d9                	add    ecx,ebx
c00197fc:	5b                   	pop    ebx
c00197fd:	01 ca                	add    edx,ecx
c00197ff:	c3                   	ret    

c0019800 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019807:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001980b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001980f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019813:	e8 0c 77 00 00       	call   c0020f24 <__udivdi3>
c0019818:	83 c4 1c             	add    esp,0x1c
c001981b:	c3                   	ret    

c001981c <Vm::fpuSquare(unsigned long long)>:
c001981c:	50                   	push   eax
c001981d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019821:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019825:	52                   	push   edx
c0019826:	50                   	push   eax
c0019827:	52                   	push   edx
c0019828:	50                   	push   eax
c0019829:	e8 b3 ff ff ff       	call   c00197e1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001982e:	83 c4 14             	add    esp,0x14
c0019831:	c3                   	ret    

c0019832 <Vm::fpuGetReg(int)>:
c0019832:	83 ec 0c             	sub    esp,0xc
c0019835:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001983a:	76 10                	jbe    c001984c <Vm::fpuGetReg(int)+0x1a>
c001983c:	83 ec 0c             	sub    esp,0xc
c001983f:	68 5e 4a 02 c0       	push   0xc0024a5e
c0019844:	e8 e0 aa ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0019849:	83 c4 10             	add    esp,0x10
c001984c:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c0019851:	b9 08 00 00 00       	mov    ecx,0x8
c0019856:	c0 e8 03             	shr    al,0x3
c0019859:	83 e0 07             	and    eax,0x7
c001985c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019860:	99                   	cdq    
c0019861:	f7 f9                	idiv   ecx
c0019863:	8b 04 d5 64 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd869c]
c001986a:	8b 14 d5 68 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8698]
c0019871:	83 c4 0c             	add    esp,0xc
c0019874:	c3                   	ret    

c0019875 <Vm::fpuSetReg(int, unsigned long long)>:
c0019875:	57                   	push   edi
c0019876:	56                   	push   esi
c0019877:	52                   	push   edx
c0019878:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001987c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019880:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019885:	76 11                	jbe    c0019898 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019887:	83 ec 0c             	sub    esp,0xc
c001988a:	68 71 4a 02 c0       	push   0xc0024a71
c001988f:	e8 95 aa ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	90                   	nop
c0019898:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c001989d:	b9 08 00 00 00       	mov    ecx,0x8
c00198a2:	c0 e8 03             	shr    al,0x3
c00198a5:	83 e0 07             	and    eax,0x7
c00198a8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198ac:	99                   	cdq    
c00198ad:	f7 f9                	idiv   ecx
c00198af:	89 34 d5 64 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd869c],esi
c00198b6:	89 3c d5 68 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8698],edi
c00198bd:	58                   	pop    eax
c00198be:	5e                   	pop    esi
c00198bf:	5f                   	pop    edi
c00198c0:	c3                   	ret    

c00198c1 <Vm::fpuPush(unsigned long long)>:
c00198c1:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c00198c6:	c0 e8 03             	shr    al,0x3
c00198c9:	83 e0 07             	and    eax,0x7
c00198cc:	83 c0 07             	add    eax,0x7
c00198cf:	88 c2                	mov    dl,al
c00198d1:	83 e0 07             	and    eax,0x7
c00198d4:	83 e2 07             	and    edx,0x7
c00198d7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198de:	8a 15 61 79 02 c0    	mov    dl,BYTE PTR ds:0xc0027961
c00198e4:	83 e2 c7             	and    edx,0xffffffc7
c00198e7:	09 ca                	or     edx,ecx
c00198e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198ed:	88 15 61 79 02 c0    	mov    BYTE PTR ds:0xc0027961,dl
c00198f3:	89 0c c5 68 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8698],ecx
c00198fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198fe:	89 14 c5 64 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd869c],edx
c0019905:	a1 a4 79 02 c0       	mov    eax,ds:0xc00279a4
c001990a:	83 f8 08             	cmp    eax,0x8
c001990d:	75 09                	jne    c0019918 <Vm::fpuPush(unsigned long long)+0x57>
c001990f:	80 0d 60 79 02 c0 40 	or     BYTE PTR ds:0xc0027960,0x40
c0019916:	c3                   	ret    
c0019917:	90                   	nop
c0019918:	40                   	inc    eax
c0019919:	a3 a4 79 02 c0       	mov    ds:0xc00279a4,eax
c001991e:	c3                   	ret    

c001991f <Vm::fpuPop()>:
c001991f:	8a 0d 61 79 02 c0    	mov    cl,BYTE PTR ds:0xc0027961
c0019925:	53                   	push   ebx
c0019926:	c0 e9 03             	shr    cl,0x3
c0019929:	8a 1d 61 79 02 c0    	mov    bl,BYTE PTR ds:0xc0027961
c001992f:	83 e1 07             	and    ecx,0x7
c0019932:	83 e3 c7             	and    ebx,0xffffffc7
c0019935:	8b 04 cd 64 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd869c]
c001993c:	8b 14 cd 68 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8698]
c0019943:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001994a:	83 e1 38             	and    ecx,0x38
c001994d:	09 d9                	or     ecx,ebx
c001994f:	88 0d 61 79 02 c0    	mov    BYTE PTR ds:0xc0027961,cl
c0019955:	8b 0d a4 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279a4
c001995b:	85 c9                	test   ecx,ecx
c001995d:	74 09                	je     c0019968 <Vm::fpuPop()+0x49>
c001995f:	49                   	dec    ecx
c0019960:	89 0d a4 79 02 c0    	mov    DWORD PTR ds:0xc00279a4,ecx
c0019966:	eb 08                	jmp    c0019970 <Vm::fpuPop()+0x51>
c0019968:	80 0d 60 79 02 c0 40 	or     BYTE PTR ds:0xc0027960,0x40
c001996f:	90                   	nop
c0019970:	5b                   	pop    ebx
c0019971:	c3                   	ret    

c0019972 <Vm::x87Handler(regs*)>:
c0019972:	55                   	push   ebp
c0019973:	57                   	push   edi
c0019974:	56                   	push   esi
c0019975:	53                   	push   ebx
c0019976:	83 ec 1c             	sub    esp,0x1c
c0019979:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001997d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019982:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019985:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001998d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019991:	50                   	push   eax
c0019992:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019996:	50                   	push   eax
c0019997:	8d 44 24 14          	lea    eax,[esp+0x14]
c001999b:	50                   	push   eax
c001999c:	53                   	push   ebx
c001999d:	e8 a0 a0 ff ff       	call   c0013a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00199a2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00199a5:	83 c4 10             	add    esp,0x10
c00199a8:	89 c6                	mov    esi,eax
c00199aa:	80 fa d9             	cmp    dl,0xd9
c00199ad:	0f 85 79 01 00 00    	jne    c0019b2c <Vm::x87Handler(regs*)+0x1ba>
c00199b3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00199b7:	8d 50 20             	lea    edx,[eax+0x20]
c00199ba:	80 fa 0e             	cmp    dl,0xe
c00199bd:	0f 87 a5 00 00 00    	ja     c0019a68 <Vm::x87Handler(regs*)+0xf6>
c00199c3:	0f b6 d2             	movzx  edx,dl
c00199c6:	ff 24 95 84 4a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb57c]
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	e8 de fc ff ff       	call   c00196b3 <Vm::fpuGet0()>
c00199d5:	eb 09                	jmp    c00199e0 <Vm::x87Handler(regs*)+0x6e>
c00199d7:	90                   	nop
c00199d8:	e8 db fc ff ff       	call   c00196b8 <Vm::fpuGet1()>
c00199dd:	8d 76 00             	lea    esi,[esi+0x0]
c00199e0:	57                   	push   edi
c00199e1:	57                   	push   edi
c00199e2:	66 90                	xchg   ax,ax
c00199e4:	52                   	push   edx
c00199e5:	50                   	push   eax
c00199e6:	e8 d6 fe ff ff       	call   c00198c1 <Vm::fpuPush(unsigned long long)>
c00199eb:	90                   	nop
c00199ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199f0:	83 c4 10             	add    esp,0x10
c00199f3:	90                   	nop
c00199f4:	b0 01                	mov    al,0x1
c00199f6:	e9 89 0a 00 00       	jmp    c001a484 <Vm::x87Handler(regs*)+0xb12>
c00199fb:	90                   	nop
c00199fc:	83 ec 0c             	sub    esp,0xc
c00199ff:	6a 00                	push   0x0
c0019a01:	e8 2c fe ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019a06:	59                   	pop    ecx
c0019a07:	5e                   	pop    esi
c0019a08:	52                   	push   edx
c0019a09:	50                   	push   eax
c0019a0a:	e8 b3 fd ff ff       	call   c00197c2 <Vm::fpuChs(unsigned long long)>
c0019a0f:	eb 17                	jmp    c0019a28 <Vm::x87Handler(regs*)+0xb6>
c0019a11:	8d 76 00             	lea    esi,[esi+0x0]
c0019a14:	83 ec 0c             	sub    esp,0xc
c0019a17:	6a 00                	push   0x0
c0019a19:	e8 14 fe ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019a1e:	5f                   	pop    edi
c0019a1f:	5d                   	pop    ebp
c0019a20:	52                   	push   edx
c0019a21:	50                   	push   eax
c0019a22:	e8 92 fd ff ff       	call   c00197b9 <Vm::fpuAbs(unsigned long long)>
c0019a27:	90                   	nop
c0019a28:	83 c4 0c             	add    esp,0xc
c0019a2b:	90                   	nop
c0019a2c:	52                   	push   edx
c0019a2d:	50                   	push   eax
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	6a 00                	push   0x0
c0019a32:	66 90                	xchg   ax,ax
c0019a34:	e8 3c fe ff ff       	call   c0019875 <Vm::fpuSetReg(int, unsigned long long)>
c0019a39:	eb b1                	jmp    c00199ec <Vm::x87Handler(regs*)+0x7a>
c0019a3b:	90                   	nop
c0019a3c:	e8 b7 fc ff ff       	call   c00196f8 <Vm::fpuGetLog210()>
c0019a41:	eb 9d                	jmp    c00199e0 <Vm::x87Handler(regs*)+0x6e>
c0019a43:	90                   	nop
c0019a44:	e8 7f fc ff ff       	call   c00196c8 <Vm::fpuGetLog2E()>
c0019a49:	eb 95                	jmp    c00199e0 <Vm::x87Handler(regs*)+0x6e>
c0019a4b:	90                   	nop
c0019a4c:	e8 6f fc ff ff       	call   c00196c0 <Vm::fpuGetPi()>
c0019a51:	eb 8d                	jmp    c00199e0 <Vm::x87Handler(regs*)+0x6e>
c0019a53:	90                   	nop
c0019a54:	e8 b7 fc ff ff       	call   c0019710 <Vm::fpuGetLog102()>
c0019a59:	eb 85                	jmp    c00199e0 <Vm::x87Handler(regs*)+0x6e>
c0019a5b:	90                   	nop
c0019a5c:	e8 7f fc ff ff       	call   c00196e0 <Vm::fpuGetLogE2()>
c0019a61:	e9 7a ff ff ff       	jmp    c00199e0 <Vm::x87Handler(regs*)+0x6e>
c0019a66:	66 90                	xchg   ax,ax
c0019a68:	8d 50 40             	lea    edx,[eax+0x40]
c0019a6b:	80 fa 07             	cmp    dl,0x7
c0019a6e:	77 18                	ja     c0019a88 <Vm::x87Handler(regs*)+0x116>
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	2d c0 00 00 00       	sub    eax,0xc0
c0019a78:	50                   	push   eax
c0019a79:	e8 b4 fd ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019a7e:	59                   	pop    ecx
c0019a7f:	5e                   	pop    esi
c0019a80:	e9 5f ff ff ff       	jmp    c00199e4 <Vm::x87Handler(regs*)+0x72>
c0019a85:	8d 76 00             	lea    esi,[esi+0x0]
c0019a88:	8d 50 38             	lea    edx,[eax+0x38]
c0019a8b:	80 fa 07             	cmp    dl,0x7
c0019a8e:	77 3c                	ja     c0019acc <Vm::x87Handler(regs*)+0x15a>
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	2d c8 00 00 00       	sub    eax,0xc8
c0019a98:	50                   	push   eax
c0019a99:	e8 94 fd ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019a9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019aa5:	89 c6                	mov    esi,eax
c0019aa7:	89 d7                	mov    edi,edx
c0019aa9:	e8 84 fd ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019aae:	83 c4 0c             	add    esp,0xc
c0019ab1:	52                   	push   edx
c0019ab2:	50                   	push   eax
c0019ab3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ab7:	2d c8 00 00 00       	sub    eax,0xc8
c0019abc:	50                   	push   eax
c0019abd:	e8 b3 fd ff ff       	call   c0019875 <Vm::fpuSetReg(int, unsigned long long)>
c0019ac2:	83 c4 0c             	add    esp,0xc
c0019ac5:	57                   	push   edi
c0019ac6:	56                   	push   esi
c0019ac7:	e9 64 ff ff ff       	jmp    c0019a30 <Vm::x87Handler(regs*)+0xbe>
c0019acc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019ad0:	84 d2                	test   dl,dl
c0019ad2:	75 10                	jne    c0019ae4 <Vm::x87Handler(regs*)+0x172>
c0019ad4:	83 ec 0c             	sub    esp,0xc
c0019ad7:	ff 36                	push   DWORD PTR [esi]
c0019ad9:	e8 8d fa ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c0019ade:	e9 c9 00 00 00       	jmp    c0019bac <Vm::x87Handler(regs*)+0x23a>
c0019ae3:	90                   	nop
c0019ae4:	80 fa 03             	cmp    dl,0x3
c0019ae7:	75 13                	jne    c0019afc <Vm::x87Handler(regs*)+0x18a>
c0019ae9:	e8 31 fe ff ff       	call   c001991f <Vm::fpuPop()>
c0019aee:	55                   	push   ebp
c0019aef:	55                   	push   ebp
c0019af0:	52                   	push   edx
c0019af1:	50                   	push   eax
c0019af2:	e8 0d fa ff ff       	call   c0019504 <Vm::fpuInternalTo32(unsigned long long)>
c0019af7:	e9 90 00 00 00       	jmp    c0019b8c <Vm::x87Handler(regs*)+0x21a>
c0019afc:	80 fa 05             	cmp    dl,0x5
c0019aff:	75 0f                	jne    c0019b10 <Vm::x87Handler(regs*)+0x19e>
c0019b01:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b04:	66 a3 62 79 02 c0    	mov    ds:0xc0027962,ax
c0019b0a:	e9 ed 00 00 00       	jmp    c0019bfc <Vm::x87Handler(regs*)+0x28a>
c0019b0f:	90                   	nop
c0019b10:	31 c0                	xor    eax,eax
c0019b12:	80 fa 07             	cmp    dl,0x7
c0019b15:	0f 85 69 09 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c0019b1b:	66 a1 62 79 02 c0    	mov    ax,ds:0xc0027962
c0019b21:	66 89 06             	mov    WORD PTR [esi],ax
c0019b24:	e9 d3 00 00 00       	jmp    c0019bfc <Vm::x87Handler(regs*)+0x28a>
c0019b29:	8d 76 00             	lea    esi,[esi+0x0]
c0019b2c:	80 fa d8             	cmp    dl,0xd8
c0019b2f:	0f 84 d3 00 00 00    	je     c0019c08 <Vm::x87Handler(regs*)+0x296>
c0019b35:	80 fa dc             	cmp    dl,0xdc
c0019b38:	0f 84 2a 02 00 00    	je     c0019d68 <Vm::x87Handler(regs*)+0x3f6>
c0019b3e:	80 fa de             	cmp    dl,0xde
c0019b41:	0f 84 f1 02 00 00    	je     c0019e38 <Vm::x87Handler(regs*)+0x4c6>
c0019b47:	80 fa dd             	cmp    dl,0xdd
c0019b4a:	0f 84 94 04 00 00    	je     c0019fe4 <Vm::x87Handler(regs*)+0x672>
c0019b50:	80 fa da             	cmp    dl,0xda
c0019b53:	0f 84 5f 05 00 00    	je     c001a0b8 <Vm::x87Handler(regs*)+0x746>
c0019b59:	80 fa df             	cmp    dl,0xdf
c0019b5c:	0f 84 aa 05 00 00    	je     c001a10c <Vm::x87Handler(regs*)+0x79a>
c0019b62:	31 c0                	xor    eax,eax
c0019b64:	80 fa db             	cmp    dl,0xdb
c0019b67:	0f 85 17 09 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c0019b6d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b71:	80 fa 03             	cmp    dl,0x3
c0019b74:	0f 85 c2 06 00 00    	jne    c001a23c <Vm::x87Handler(regs*)+0x8ca>
c0019b7a:	e8 a0 fd ff ff       	call   c001991f <Vm::fpuPop()>
c0019b7f:	55                   	push   ebp
c0019b80:	55                   	push   ebp
c0019b81:	8d 76 00             	lea    esi,[esi+0x0]
c0019b84:	52                   	push   edx
c0019b85:	50                   	push   eax
c0019b86:	e8 2e fa ff ff       	call   c00195b9 <Vm::fpuFloatToLong(unsigned long long)>
c0019b8b:	90                   	nop
c0019b8c:	83 c4 10             	add    esp,0x10
c0019b8f:	89 06                	mov    DWORD PTR [esi],eax
c0019b91:	eb 69                	jmp    c0019bfc <Vm::x87Handler(regs*)+0x28a>
c0019b93:	90                   	nop
c0019b94:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b98:	84 d2                	test   dl,dl
c0019b9a:	0f 85 2c 06 00 00    	jne    c001a1cc <Vm::x87Handler(regs*)+0x85a>
c0019ba0:	57                   	push   edi
c0019ba1:	57                   	push   edi
c0019ba2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ba5:	ff 36                	push   DWORD PTR [esi]
c0019ba7:	e8 04 fa ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c0019bac:	5e                   	pop    esi
c0019bad:	5f                   	pop    edi
c0019bae:	52                   	push   edx
c0019baf:	50                   	push   eax
c0019bb0:	e8 0c fd ff ff       	call   c00198c1 <Vm::fpuPush(unsigned long long)>
c0019bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bbc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bbf:	e9 2c fe ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x7e>
c0019bc4:	80 fa 03             	cmp    dl,0x3
c0019bc7:	0f 85 2b 07 00 00    	jne    c001a2f8 <Vm::x87Handler(regs*)+0x986>
c0019bcd:	57                   	push   edi
c0019bce:	57                   	push   edi
c0019bcf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bd2:	ff 36                	push   DWORD PTR [esi]
c0019bd4:	e8 d7 f9 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c0019bd9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019be0:	89 c6                	mov    esi,eax
c0019be2:	89 d7                	mov    edi,edx
c0019be4:	e8 49 fc ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019be9:	57                   	push   edi
c0019bea:	56                   	push   esi
c0019beb:	52                   	push   edx
c0019bec:	50                   	push   eax
c0019bed:	e8 60 fb ff ff       	call   c0019752 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bf2:	83 c4 20             	add    esp,0x20
c0019bf5:	e8 25 fd ff ff       	call   c001991f <Vm::fpuPop()>
c0019bfa:	66 90                	xchg   ax,ax
c0019bfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c00:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c03:	e9 ec fd ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0x82>
c0019c08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c0c:	8d 50 40             	lea    edx,[eax+0x40]
c0019c0f:	80 fa 07             	cmp    dl,0x7
c0019c12:	77 2c                	ja     c0019c40 <Vm::x87Handler(regs*)+0x2ce>
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	2d c0 00 00 00       	sub    eax,0xc0
c0019c1c:	50                   	push   eax
c0019c1d:	e8 10 fc ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019c22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c29:	89 c6                	mov    esi,eax
c0019c2b:	89 d7                	mov    edi,edx
c0019c2d:	e8 00 fc ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019c32:	57                   	push   edi
c0019c33:	56                   	push   esi
c0019c34:	52                   	push   edx
c0019c35:	50                   	push   eax
c0019c36:	e8 6d fb ff ff       	call   c00197a8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c3b:	eb 33                	jmp    c0019c70 <Vm::x87Handler(regs*)+0x2fe>
c0019c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c40:	8d 50 38             	lea    edx,[eax+0x38]
c0019c43:	80 fa 07             	cmp    dl,0x7
c0019c46:	77 30                	ja     c0019c78 <Vm::x87Handler(regs*)+0x306>
c0019c48:	83 ec 0c             	sub    esp,0xc
c0019c4b:	2d c8 00 00 00       	sub    eax,0xc8
c0019c50:	50                   	push   eax
c0019c51:	e8 dc fb ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019c56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c5d:	89 c6                	mov    esi,eax
c0019c5f:	89 d7                	mov    edi,edx
c0019c61:	e8 cc fb ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019c66:	57                   	push   edi
c0019c67:	56                   	push   esi
c0019c68:	52                   	push   edx
c0019c69:	50                   	push   eax
c0019c6a:	e8 72 fb ff ff       	call   c00197e1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c6f:	90                   	nop
c0019c70:	83 c4 1c             	add    esp,0x1c
c0019c73:	e9 b4 fd ff ff       	jmp    c0019a2c <Vm::x87Handler(regs*)+0xba>
c0019c78:	8d 50 30             	lea    edx,[eax+0x30]
c0019c7b:	80 fa 07             	cmp    dl,0x7
c0019c7e:	77 10                	ja     c0019c90 <Vm::x87Handler(regs*)+0x31e>
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	2d d0 00 00 00       	sub    eax,0xd0
c0019c88:	e9 c3 03 00 00       	jmp    c001a050 <Vm::x87Handler(regs*)+0x6de>
c0019c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c90:	8d 50 28             	lea    edx,[eax+0x28]
c0019c93:	80 fa 07             	cmp    dl,0x7
c0019c96:	77 10                	ja     c0019ca8 <Vm::x87Handler(regs*)+0x336>
c0019c98:	83 ec 0c             	sub    esp,0xc
c0019c9b:	2d d8 00 00 00       	sub    eax,0xd8
c0019ca0:	e9 e7 03 00 00       	jmp    c001a08c <Vm::x87Handler(regs*)+0x71a>
c0019ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca8:	8d 50 20             	lea    edx,[eax+0x20]
c0019cab:	80 fa 07             	cmp    dl,0x7
c0019cae:	77 1c                	ja     c0019ccc <Vm::x87Handler(regs*)+0x35a>
c0019cb0:	83 ec 0c             	sub    esp,0xc
c0019cb3:	2d e0 00 00 00       	sub    eax,0xe0
c0019cb8:	50                   	push   eax
c0019cb9:	e8 74 fb ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cc5:	89 c6                	mov    esi,eax
c0019cc7:	89 d7                	mov    edi,edx
c0019cc9:	eb 25                	jmp    c0019cf0 <Vm::x87Handler(regs*)+0x37e>
c0019ccb:	90                   	nop
c0019ccc:	8d 50 18             	lea    edx,[eax+0x18]
c0019ccf:	80 fa 07             	cmp    dl,0x7
c0019cd2:	77 30                	ja     c0019d04 <Vm::x87Handler(regs*)+0x392>
c0019cd4:	83 ec 0c             	sub    esp,0xc
c0019cd7:	6a 00                	push   0x0
c0019cd9:	e8 54 fb ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019cde:	89 c6                	mov    esi,eax
c0019ce0:	89 d7                	mov    edi,edx
c0019ce2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ce6:	2d e8 00 00 00       	sub    eax,0xe8
c0019ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cee:	66 90                	xchg   ax,ax
c0019cf0:	e8 3d fb ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019cf5:	57                   	push   edi
c0019cf6:	56                   	push   esi
c0019cf7:	52                   	push   edx
c0019cf8:	50                   	push   eax
c0019cf9:	e8 d4 fa ff ff       	call   c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019cfe:	e9 6d ff ff ff       	jmp    c0019c70 <Vm::x87Handler(regs*)+0x2fe>
c0019d03:	90                   	nop
c0019d04:	8d 50 10             	lea    edx,[eax+0x10]
c0019d07:	80 fa 07             	cmp    dl,0x7
c0019d0a:	77 1c                	ja     c0019d28 <Vm::x87Handler(regs*)+0x3b6>
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	2d f0 00 00 00       	sub    eax,0xf0
c0019d14:	50                   	push   eax
c0019d15:	e8 18 fb ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019d1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d21:	89 c6                	mov    esi,eax
c0019d23:	89 d7                	mov    edi,edx
c0019d25:	eb 25                	jmp    c0019d4c <Vm::x87Handler(regs*)+0x3da>
c0019d27:	90                   	nop
c0019d28:	3c f7                	cmp    al,0xf7
c0019d2a:	0f 86 00 04 00 00    	jbe    c001a130 <Vm::x87Handler(regs*)+0x7be>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	6a 00                	push   0x0
c0019d35:	e8 f8 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019d3a:	89 c6                	mov    esi,eax
c0019d3c:	89 d7                	mov    edi,edx
c0019d3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d42:	2d f8 00 00 00       	sub    eax,0xf8
c0019d47:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d4a:	66 90                	xchg   ax,ax
c0019d4c:	e8 e1 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019d51:	57                   	push   edi
c0019d52:	56                   	push   esi
c0019d53:	52                   	push   edx
c0019d54:	50                   	push   eax
c0019d55:	e8 a6 fa ff ff       	call   c0019800 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d5a:	83 c4 1c             	add    esp,0x1c
c0019d5d:	52                   	push   edx
c0019d5e:	50                   	push   eax
c0019d5f:	6a 00                	push   0x0
c0019d61:	e9 6a 02 00 00       	jmp    c0019fd0 <Vm::x87Handler(regs*)+0x65e>
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d6c:	8d 50 40             	lea    edx,[eax+0x40]
c0019d6f:	80 fa 07             	cmp    dl,0x7
c0019d72:	77 38                	ja     c0019dac <Vm::x87Handler(regs*)+0x43a>
c0019d74:	83 ec 0c             	sub    esp,0xc
c0019d77:	2d c0 00 00 00       	sub    eax,0xc0
c0019d7c:	50                   	push   eax
c0019d7d:	e8 b0 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019d82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d89:	89 c6                	mov    esi,eax
c0019d8b:	89 d7                	mov    edi,edx
c0019d8d:	e8 a0 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019d92:	57                   	push   edi
c0019d93:	56                   	push   esi
c0019d94:	52                   	push   edx
c0019d95:	50                   	push   eax
c0019d96:	e8 0d fa ff ff       	call   c00197a8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019d9b:	83 c4 1c             	add    esp,0x1c
c0019d9e:	52                   	push   edx
c0019d9f:	50                   	push   eax
c0019da0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019da4:	2d c0 00 00 00       	sub    eax,0xc0
c0019da9:	eb 41                	jmp    c0019dec <Vm::x87Handler(regs*)+0x47a>
c0019dab:	90                   	nop
c0019dac:	8d 50 38             	lea    edx,[eax+0x38]
c0019daf:	80 fa 07             	cmp    dl,0x7
c0019db2:	77 40                	ja     c0019df4 <Vm::x87Handler(regs*)+0x482>
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	2d c8 00 00 00       	sub    eax,0xc8
c0019dbc:	50                   	push   eax
c0019dbd:	e8 70 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019dc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019dc9:	89 c6                	mov    esi,eax
c0019dcb:	89 d7                	mov    edi,edx
c0019dcd:	e8 60 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019dd2:	57                   	push   edi
c0019dd3:	56                   	push   esi
c0019dd4:	52                   	push   edx
c0019dd5:	50                   	push   eax
c0019dd6:	e8 06 fa ff ff       	call   c00197e1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019ddb:	83 c4 1c             	add    esp,0x1c
c0019dde:	52                   	push   edx
c0019ddf:	50                   	push   eax
c0019de0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019de4:	2d c8 00 00 00       	sub    eax,0xc8
c0019de9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dec:	50                   	push   eax
c0019ded:	e9 42 fc ff ff       	jmp    c0019a34 <Vm::x87Handler(regs*)+0xc2>
c0019df2:	66 90                	xchg   ax,ax
c0019df4:	83 c0 18             	add    eax,0x18
c0019df7:	3c 07                	cmp    al,0x7
c0019df9:	0f 87 6d 04 00 00    	ja     c001a26c <Vm::x87Handler(regs*)+0x8fa>
c0019dff:	83 ec 0c             	sub    esp,0xc
c0019e02:	6a 00                	push   0x0
c0019e04:	e8 29 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019e09:	89 c6                	mov    esi,eax
c0019e0b:	89 d7                	mov    edi,edx
c0019e0d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e11:	2d e8 00 00 00       	sub    eax,0xe8
c0019e16:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e19:	e8 14 fa ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019e1e:	57                   	push   edi
c0019e1f:	56                   	push   esi
c0019e20:	52                   	push   edx
c0019e21:	50                   	push   eax
c0019e22:	e8 ab f9 ff ff       	call   c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e27:	83 c4 1c             	add    esp,0x1c
c0019e2a:	52                   	push   edx
c0019e2b:	50                   	push   eax
c0019e2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e30:	2d e8 00 00 00       	sub    eax,0xe8
c0019e35:	eb b5                	jmp    c0019dec <Vm::x87Handler(regs*)+0x47a>
c0019e37:	90                   	nop
c0019e38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e3c:	8d 50 40             	lea    edx,[eax+0x40]
c0019e3f:	80 fa 07             	cmp    dl,0x7
c0019e42:	77 3c                	ja     c0019e80 <Vm::x87Handler(regs*)+0x50e>
c0019e44:	83 ec 0c             	sub    esp,0xc
c0019e47:	2d c0 00 00 00       	sub    eax,0xc0
c0019e4c:	50                   	push   eax
c0019e4d:	e8 e0 f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019e52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e59:	89 c6                	mov    esi,eax
c0019e5b:	89 d7                	mov    edi,edx
c0019e5d:	e8 d0 f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019e62:	57                   	push   edi
c0019e63:	56                   	push   esi
c0019e64:	52                   	push   edx
c0019e65:	50                   	push   eax
c0019e66:	e8 3d f9 ff ff       	call   c00197a8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e6b:	83 c4 1c             	add    esp,0x1c
c0019e6e:	52                   	push   edx
c0019e6f:	50                   	push   eax
c0019e70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e74:	2d c0 00 00 00       	sub    eax,0xc0
c0019e79:	e9 b2 01 00 00       	jmp    c001a030 <Vm::x87Handler(regs*)+0x6be>
c0019e7e:	66 90                	xchg   ax,ax
c0019e80:	8d 50 20             	lea    edx,[eax+0x20]
c0019e83:	80 fa 07             	cmp    dl,0x7
c0019e86:	77 3c                	ja     c0019ec4 <Vm::x87Handler(regs*)+0x552>
c0019e88:	83 ec 0c             	sub    esp,0xc
c0019e8b:	2d e0 00 00 00       	sub    eax,0xe0
c0019e90:	50                   	push   eax
c0019e91:	e8 9c f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019e96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e9d:	89 c6                	mov    esi,eax
c0019e9f:	89 d7                	mov    edi,edx
c0019ea1:	e8 8c f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019ea6:	57                   	push   edi
c0019ea7:	56                   	push   esi
c0019ea8:	52                   	push   edx
c0019ea9:	50                   	push   eax
c0019eaa:	e8 23 f9 ff ff       	call   c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019eaf:	83 c4 1c             	add    esp,0x1c
c0019eb2:	52                   	push   edx
c0019eb3:	50                   	push   eax
c0019eb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eb8:	2d e0 00 00 00       	sub    eax,0xe0
c0019ebd:	e9 6e 01 00 00       	jmp    c001a030 <Vm::x87Handler(regs*)+0x6be>
c0019ec2:	66 90                	xchg   ax,ax
c0019ec4:	8d 50 18             	lea    edx,[eax+0x18]
c0019ec7:	80 fa 07             	cmp    dl,0x7
c0019eca:	77 3c                	ja     c0019f08 <Vm::x87Handler(regs*)+0x596>
c0019ecc:	83 ec 0c             	sub    esp,0xc
c0019ecf:	6a 00                	push   0x0
c0019ed1:	e8 5c f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019ed6:	89 c6                	mov    esi,eax
c0019ed8:	89 d7                	mov    edi,edx
c0019eda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ede:	2d e8 00 00 00       	sub    eax,0xe8
c0019ee3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee6:	e8 47 f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019eeb:	57                   	push   edi
c0019eec:	56                   	push   esi
c0019eed:	52                   	push   edx
c0019eee:	50                   	push   eax
c0019eef:	e8 de f8 ff ff       	call   c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ef4:	83 c4 1c             	add    esp,0x1c
c0019ef7:	52                   	push   edx
c0019ef8:	50                   	push   eax
c0019ef9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019efd:	2d e8 00 00 00       	sub    eax,0xe8
c0019f02:	e9 29 01 00 00       	jmp    c001a030 <Vm::x87Handler(regs*)+0x6be>
c0019f07:	90                   	nop
c0019f08:	8d 50 38             	lea    edx,[eax+0x38]
c0019f0b:	80 fa 07             	cmp    dl,0x7
c0019f0e:	77 3c                	ja     c0019f4c <Vm::x87Handler(regs*)+0x5da>
c0019f10:	83 ec 0c             	sub    esp,0xc
c0019f13:	2d c8 00 00 00       	sub    eax,0xc8
c0019f18:	50                   	push   eax
c0019f19:	e8 14 f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019f1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f25:	89 c6                	mov    esi,eax
c0019f27:	89 d7                	mov    edi,edx
c0019f29:	e8 04 f9 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019f2e:	57                   	push   edi
c0019f2f:	56                   	push   esi
c0019f30:	52                   	push   edx
c0019f31:	50                   	push   eax
c0019f32:	e8 aa f8 ff ff       	call   c00197e1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f37:	83 c4 1c             	add    esp,0x1c
c0019f3a:	52                   	push   edx
c0019f3b:	50                   	push   eax
c0019f3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f40:	2d c8 00 00 00       	sub    eax,0xc8
c0019f45:	e9 82 00 00 00       	jmp    c0019fcc <Vm::x87Handler(regs*)+0x65a>
c0019f4a:	66 90                	xchg   ax,ax
c0019f4c:	3c f7                	cmp    al,0xf7
c0019f4e:	76 38                	jbe    c0019f88 <Vm::x87Handler(regs*)+0x616>
c0019f50:	83 ec 0c             	sub    esp,0xc
c0019f53:	6a 00                	push   0x0
c0019f55:	e8 d8 f8 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019f5a:	89 c6                	mov    esi,eax
c0019f5c:	89 d7                	mov    edi,edx
c0019f5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f62:	2d f8 00 00 00       	sub    eax,0xf8
c0019f67:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f6a:	e8 c3 f8 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019f6f:	57                   	push   edi
c0019f70:	56                   	push   esi
c0019f71:	52                   	push   edx
c0019f72:	50                   	push   eax
c0019f73:	e8 88 f8 ff ff       	call   c0019800 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f78:	83 c4 1c             	add    esp,0x1c
c0019f7b:	52                   	push   edx
c0019f7c:	50                   	push   eax
c0019f7d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f81:	2d f8 00 00 00       	sub    eax,0xf8
c0019f86:	eb 44                	jmp    c0019fcc <Vm::x87Handler(regs*)+0x65a>
c0019f88:	8d 50 10             	lea    edx,[eax+0x10]
c0019f8b:	80 fa 07             	cmp    dl,0x7
c0019f8e:	0f 87 6c 01 00 00    	ja     c001a100 <Vm::x87Handler(regs*)+0x78e>
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	2d f0 00 00 00       	sub    eax,0xf0
c0019f9c:	50                   	push   eax
c0019f9d:	e8 90 f8 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019fa2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fa9:	89 c6                	mov    esi,eax
c0019fab:	89 d7                	mov    edi,edx
c0019fad:	e8 80 f8 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019fb2:	57                   	push   edi
c0019fb3:	56                   	push   esi
c0019fb4:	52                   	push   edx
c0019fb5:	50                   	push   eax
c0019fb6:	e8 45 f8 ff ff       	call   c0019800 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fbb:	83 c4 1c             	add    esp,0x1c
c0019fbe:	52                   	push   edx
c0019fbf:	50                   	push   eax
c0019fc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fc4:	2d f0 00 00 00       	sub    eax,0xf0
c0019fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fcc:	50                   	push   eax
c0019fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd0:	e8 a0 f8 ff ff       	call   c0019875 <Vm::fpuSetReg(int, unsigned long long)>
c0019fd5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019fd9:	e8 41 f9 ff ff       	call   c001991f <Vm::fpuPop()>
c0019fde:	e9 0d fa ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x7e>
c0019fe3:	90                   	nop
c0019fe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fe8:	8d 50 30             	lea    edx,[eax+0x30]
c0019feb:	80 fa 07             	cmp    dl,0x7
c0019fee:	77 20                	ja     c001a010 <Vm::x87Handler(regs*)+0x69e>
c0019ff0:	83 ec 0c             	sub    esp,0xc
c0019ff3:	6a 00                	push   0x0
c0019ff5:	e8 38 f8 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c0019ffa:	83 c4 0c             	add    esp,0xc
c0019ffd:	52                   	push   edx
c0019ffe:	50                   	push   eax
c0019fff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a003:	2d d0 00 00 00       	sub    eax,0xd0
c001a008:	e9 df fd ff ff       	jmp    c0019dec <Vm::x87Handler(regs*)+0x47a>
c001a00d:	8d 76 00             	lea    esi,[esi+0x0]
c001a010:	8d 50 28             	lea    edx,[eax+0x28]
c001a013:	80 fa 07             	cmp    dl,0x7
c001a016:	77 28                	ja     c001a040 <Vm::x87Handler(regs*)+0x6ce>
c001a018:	83 ec 0c             	sub    esp,0xc
c001a01b:	6a 00                	push   0x0
c001a01d:	e8 10 f8 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a022:	83 c4 0c             	add    esp,0xc
c001a025:	52                   	push   edx
c001a026:	50                   	push   eax
c001a027:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a02b:	2d d8 00 00 00       	sub    eax,0xd8
c001a030:	50                   	push   eax
c001a031:	e8 3f f8 ff ff       	call   c0019875 <Vm::fpuSetReg(int, unsigned long long)>
c001a036:	e8 e4 f8 ff ff       	call   c001991f <Vm::fpuPop()>
c001a03b:	e9 ac f9 ff ff       	jmp    c00199ec <Vm::x87Handler(regs*)+0x7a>
c001a040:	8d 50 20             	lea    edx,[eax+0x20]
c001a043:	80 fa 07             	cmp    dl,0x7
c001a046:	77 30                	ja     c001a078 <Vm::x87Handler(regs*)+0x706>
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	2d e0 00 00 00       	sub    eax,0xe0
c001a050:	50                   	push   eax
c001a051:	e8 dc f7 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a056:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a05d:	89 c6                	mov    esi,eax
c001a05f:	89 d7                	mov    edi,edx
c001a061:	e8 cc f7 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a066:	57                   	push   edi
c001a067:	56                   	push   esi
c001a068:	52                   	push   edx
c001a069:	50                   	push   eax
c001a06a:	e8 e3 f6 ff ff       	call   c0019752 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a06f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a073:	e9 78 02 00 00       	jmp    c001a2f0 <Vm::x87Handler(regs*)+0x97e>
c001a078:	8d 50 18             	lea    edx,[eax+0x18]
c001a07b:	80 fa 07             	cmp    dl,0x7
c001a07e:	0f 87 10 fb ff ff    	ja     c0019b94 <Vm::x87Handler(regs*)+0x222>
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	2d e8 00 00 00       	sub    eax,0xe8
c001a08c:	50                   	push   eax
c001a08d:	e8 a0 f7 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a092:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a099:	89 c6                	mov    esi,eax
c001a09b:	89 d7                	mov    edi,edx
c001a09d:	e8 90 f7 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a0a2:	57                   	push   edi
c001a0a3:	56                   	push   esi
c001a0a4:	52                   	push   edx
c001a0a5:	50                   	push   eax
c001a0a6:	e8 a7 f6 ff ff       	call   c0019752 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0ab:	83 c4 20             	add    esp,0x20
c001a0ae:	e8 6c f8 ff ff       	call   c001991f <Vm::fpuPop()>
c001a0b3:	eb 6f                	jmp    c001a124 <Vm::x87Handler(regs*)+0x7b2>
c001a0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a0bc:	0f 85 22 01 00 00    	jne    c001a1e4 <Vm::x87Handler(regs*)+0x872>
c001a0c2:	66 90                	xchg   ax,ax
c001a0c4:	83 ec 0c             	sub    esp,0xc
c001a0c7:	6a 01                	push   0x1
c001a0c9:	e8 64 f7 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a0ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0d5:	89 c6                	mov    esi,eax
c001a0d7:	89 d7                	mov    edi,edx
c001a0d9:	e8 54 f7 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a0de:	57                   	push   edi
c001a0df:	56                   	push   esi
c001a0e0:	52                   	push   edx
c001a0e1:	50                   	push   eax
c001a0e2:	e8 6b f6 ff ff       	call   c0019752 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0e7:	83 c4 20             	add    esp,0x20
c001a0ea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0ee:	e8 2c f8 ff ff       	call   c001991f <Vm::fpuPop()>
c001a0f3:	e8 27 f8 ff ff       	call   c001991f <Vm::fpuPop()>
c001a0f8:	e9 f7 f8 ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0x82>
c001a0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a100:	3c d9                	cmp    al,0xd9
c001a102:	0f 85 e8 02 00 00    	jne    c001a3f0 <Vm::x87Handler(regs*)+0xa7e>
c001a108:	eb ba                	jmp    c001a0c4 <Vm::x87Handler(regs*)+0x752>
c001a10a:	66 90                	xchg   ax,ax
c001a10c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a110:	0f 85 2a 03 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xace>
c001a116:	0f b7 05 60 79 02 c0 	movzx  eax,WORD PTR ds:0xc0027960
c001a11d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a121:	8d 76 00             	lea    esi,[esi+0x0]
c001a124:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a128:	e9 c7 f8 ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0x82>
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a134:	84 d2                	test   dl,dl
c001a136:	75 10                	jne    c001a148 <Vm::x87Handler(regs*)+0x7d6>
c001a138:	83 ec 0c             	sub    esp,0xc
c001a13b:	ff 36                	push   DWORD PTR [esi]
c001a13d:	e8 29 f4 ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c001a142:	e9 39 01 00 00       	jmp    c001a280 <Vm::x87Handler(regs*)+0x90e>
c001a147:	90                   	nop
c001a148:	80 fa 01             	cmp    dl,0x1
c001a14b:	75 0f                	jne    c001a15c <Vm::x87Handler(regs*)+0x7ea>
c001a14d:	83 ec 0c             	sub    esp,0xc
c001a150:	ff 36                	push   DWORD PTR [esi]
c001a152:	e8 14 f4 ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c001a157:	e9 b4 02 00 00       	jmp    c001a410 <Vm::x87Handler(regs*)+0xa9e>
c001a15c:	80 fa 04             	cmp    dl,0x4
c001a15f:	75 0f                	jne    c001a170 <Vm::x87Handler(regs*)+0x7fe>
c001a161:	83 ec 0c             	sub    esp,0xc
c001a164:	ff 36                	push   DWORD PTR [esi]
c001a166:	e8 00 f4 ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c001a16b:	e9 9c 01 00 00       	jmp    c001a30c <Vm::x87Handler(regs*)+0x99a>
c001a170:	80 fa 05             	cmp    dl,0x5
c001a173:	75 1b                	jne    c001a190 <Vm::x87Handler(regs*)+0x81e>
c001a175:	83 ec 0c             	sub    esp,0xc
c001a178:	6a 00                	push   0x0
c001a17a:	e8 b3 f6 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a17f:	89 c7                	mov    edi,eax
c001a181:	89 d5                	mov    ebp,edx
c001a183:	58                   	pop    eax
c001a184:	ff 36                	push   DWORD PTR [esi]
c001a186:	e8 e0 f3 ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c001a18b:	e9 bc 01 00 00       	jmp    c001a34c <Vm::x87Handler(regs*)+0x9da>
c001a190:	80 fa 06             	cmp    dl,0x6
c001a193:	75 0f                	jne    c001a1a4 <Vm::x87Handler(regs*)+0x832>
c001a195:	83 ec 0c             	sub    esp,0xc
c001a198:	ff 36                	push   DWORD PTR [esi]
c001a19a:	e8 cc f3 ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c001a19f:	e9 cc 01 00 00       	jmp    c001a370 <Vm::x87Handler(regs*)+0x9fe>
c001a1a4:	31 c0                	xor    eax,eax
c001a1a6:	80 fa 07             	cmp    dl,0x7
c001a1a9:	0f 85 d5 02 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a1af:	83 ec 0c             	sub    esp,0xc
c001a1b2:	6a 00                	push   0x0
c001a1b4:	e8 79 f6 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a1b9:	89 c7                	mov    edi,eax
c001a1bb:	89 d5                	mov    ebp,edx
c001a1bd:	58                   	pop    eax
c001a1be:	ff 36                	push   DWORD PTR [esi]
c001a1c0:	e8 a6 f3 ff ff       	call   c001956b <Vm::fpu32ToInternal(unsigned int)>
c001a1c5:	e9 ee 01 00 00       	jmp    c001a3b8 <Vm::x87Handler(regs*)+0xa46>
c001a1ca:	66 90                	xchg   ax,ax
c001a1cc:	80 fa 03             	cmp    dl,0x3
c001a1cf:	0f 85 f7 01 00 00    	jne    c001a3cc <Vm::x87Handler(regs*)+0xa5a>
c001a1d5:	e8 45 f7 ff ff       	call   c001991f <Vm::fpuPop()>
c001a1da:	51                   	push   ecx
c001a1db:	51                   	push   ecx
c001a1dc:	e9 03 02 00 00       	jmp    c001a3e4 <Vm::x87Handler(regs*)+0xa72>
c001a1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1e8:	80 fa 01             	cmp    dl,0x1
c001a1eb:	75 0b                	jne    c001a1f8 <Vm::x87Handler(regs*)+0x886>
c001a1ed:	57                   	push   edi
c001a1ee:	57                   	push   edi
c001a1ef:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1f1:	e9 0e 02 00 00       	jmp    c001a404 <Vm::x87Handler(regs*)+0xa92>
c001a1f6:	66 90                	xchg   ax,ax
c001a1f8:	80 fa 04             	cmp    dl,0x4
c001a1fb:	75 13                	jne    c001a210 <Vm::x87Handler(regs*)+0x89e>
c001a1fd:	31 d2                	xor    edx,edx
c001a1ff:	51                   	push   ecx
c001a200:	51                   	push   ecx
c001a201:	8b 06                	mov    eax,DWORD PTR [esi]
c001a203:	52                   	push   edx
c001a204:	50                   	push   eax
c001a205:	e8 4a f4 ff ff       	call   c0019654 <Vm::fpuLongToFloat(long long)>
c001a20a:	e9 fd 00 00 00       	jmp    c001a30c <Vm::x87Handler(regs*)+0x99a>
c001a20f:	90                   	nop
c001a210:	31 c0                	xor    eax,eax
c001a212:	80 fa 07             	cmp    dl,0x7
c001a215:	0f 85 69 02 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	6a 00                	push   0x0
c001a220:	e8 0d f6 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a225:	89 c7                	mov    edi,eax
c001a227:	89 d5                	mov    ebp,edx
c001a229:	58                   	pop    eax
c001a22a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a22c:	5a                   	pop    edx
c001a22d:	31 d2                	xor    edx,edx
c001a22f:	52                   	push   edx
c001a230:	50                   	push   eax
c001a231:	e8 1e f4 ff ff       	call   c0019654 <Vm::fpuLongToFloat(long long)>
c001a236:	e9 7d 01 00 00       	jmp    c001a3b8 <Vm::x87Handler(regs*)+0xa46>
c001a23b:	90                   	nop
c001a23c:	84 d2                	test   dl,dl
c001a23e:	75 10                	jne    c001a250 <Vm::x87Handler(regs*)+0x8de>
c001a240:	31 d2                	xor    edx,edx
c001a242:	55                   	push   ebp
c001a243:	55                   	push   ebp
c001a244:	8b 06                	mov    eax,DWORD PTR [esi]
c001a246:	52                   	push   edx
c001a247:	50                   	push   eax
c001a248:	e9 03 02 00 00       	jmp    c001a450 <Vm::x87Handler(regs*)+0xade>
c001a24d:	8d 76 00             	lea    esi,[esi+0x0]
c001a250:	31 c0                	xor    eax,eax
c001a252:	80 fa 02             	cmp    dl,0x2
c001a255:	0f 85 29 02 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a25b:	83 ec 0c             	sub    esp,0xc
c001a25e:	6a 00                	push   0x0
c001a260:	e8 cd f5 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a265:	59                   	pop    ecx
c001a266:	5f                   	pop    edi
c001a267:	e9 18 f9 ff ff       	jmp    c0019b84 <Vm::x87Handler(regs*)+0x212>
c001a26c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a270:	84 d2                	test   dl,dl
c001a272:	75 2c                	jne    c001a2a0 <Vm::x87Handler(regs*)+0x92e>
c001a274:	50                   	push   eax
c001a275:	50                   	push   eax
c001a276:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a279:	ff 36                	push   DWORD PTR [esi]
c001a27b:	e8 30 f3 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a280:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a287:	89 c6                	mov    esi,eax
c001a289:	89 d7                	mov    edi,edx
c001a28b:	e8 a2 f5 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a290:	57                   	push   edi
c001a291:	56                   	push   esi
c001a292:	52                   	push   edx
c001a293:	50                   	push   eax
c001a294:	e8 0f f5 ff ff       	call   c00197a8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a299:	e9 8e 01 00 00       	jmp    c001a42c <Vm::x87Handler(regs*)+0xaba>
c001a29e:	66 90                	xchg   ax,ax
c001a2a0:	80 fa 01             	cmp    dl,0x1
c001a2a3:	75 13                	jne    c001a2b8 <Vm::x87Handler(regs*)+0x946>
c001a2a5:	50                   	push   eax
c001a2a6:	50                   	push   eax
c001a2a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2aa:	ff 36                	push   DWORD PTR [esi]
c001a2ac:	e8 ff f2 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a2b1:	e9 5a 01 00 00       	jmp    c001a410 <Vm::x87Handler(regs*)+0xa9e>
c001a2b6:	66 90                	xchg   ax,ax
c001a2b8:	80 fa 02             	cmp    dl,0x2
c001a2bb:	0f 85 03 f9 ff ff    	jne    c0019bc4 <Vm::x87Handler(regs*)+0x252>
c001a2c1:	55                   	push   ebp
c001a2c2:	55                   	push   ebp
c001a2c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2c6:	ff 36                	push   DWORD PTR [esi]
c001a2c8:	e8 e3 f2 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a2cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d4:	89 c6                	mov    esi,eax
c001a2d6:	89 d7                	mov    edi,edx
c001a2d8:	e8 55 f5 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a2dd:	57                   	push   edi
c001a2de:	56                   	push   esi
c001a2df:	52                   	push   edx
c001a2e0:	50                   	push   eax
c001a2e1:	e8 6c f4 ff ff       	call   c0019752 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2ea:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f0:	83 c4 20             	add    esp,0x20
c001a2f3:	e9 fc f6 ff ff       	jmp    c00199f4 <Vm::x87Handler(regs*)+0x82>
c001a2f8:	80 fa 04             	cmp    dl,0x4
c001a2fb:	75 2f                	jne    c001a32c <Vm::x87Handler(regs*)+0x9ba>
c001a2fd:	51                   	push   ecx
c001a2fe:	51                   	push   ecx
c001a2ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a302:	ff 36                	push   DWORD PTR [esi]
c001a304:	e8 a7 f2 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a309:	8d 76 00             	lea    esi,[esi+0x0]
c001a30c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a313:	89 c6                	mov    esi,eax
c001a315:	89 d7                	mov    edi,edx
c001a317:	e8 16 f5 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a31c:	57                   	push   edi
c001a31d:	56                   	push   esi
c001a31e:	52                   	push   edx
c001a31f:	50                   	push   eax
c001a320:	e8 ad f4 ff ff       	call   c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a325:	e9 02 01 00 00       	jmp    c001a42c <Vm::x87Handler(regs*)+0xaba>
c001a32a:	66 90                	xchg   ax,ax
c001a32c:	80 fa 05             	cmp    dl,0x5
c001a32f:	75 2b                	jne    c001a35c <Vm::x87Handler(regs*)+0x9ea>
c001a331:	83 ec 0c             	sub    esp,0xc
c001a334:	6a 00                	push   0x0
c001a336:	e8 f7 f4 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a33b:	89 c7                	mov    edi,eax
c001a33d:	89 d5                	mov    ebp,edx
c001a33f:	58                   	pop    eax
c001a340:	5a                   	pop    edx
c001a341:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a344:	ff 36                	push   DWORD PTR [esi]
c001a346:	e8 65 f2 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a34b:	90                   	nop
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	55                   	push   ebp
c001a350:	57                   	push   edi
c001a351:	52                   	push   edx
c001a352:	50                   	push   eax
c001a353:	e8 7a f4 ff ff       	call   c00197d2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a358:	eb 6a                	jmp    c001a3c4 <Vm::x87Handler(regs*)+0xa52>
c001a35a:	66 90                	xchg   ax,ax
c001a35c:	80 fa 06             	cmp    dl,0x6
c001a35f:	75 2f                	jne    c001a390 <Vm::x87Handler(regs*)+0xa1e>
c001a361:	51                   	push   ecx
c001a362:	51                   	push   ecx
c001a363:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a366:	ff 36                	push   DWORD PTR [esi]
c001a368:	e8 43 f2 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a36d:	8d 76 00             	lea    esi,[esi+0x0]
c001a370:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a377:	89 c6                	mov    esi,eax
c001a379:	89 d7                	mov    edi,edx
c001a37b:	e8 b2 f4 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a380:	57                   	push   edi
c001a381:	56                   	push   esi
c001a382:	52                   	push   edx
c001a383:	50                   	push   eax
c001a384:	e8 77 f4 ff ff       	call   c0019800 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a389:	e9 9e 00 00 00       	jmp    c001a42c <Vm::x87Handler(regs*)+0xaba>
c001a38e:	66 90                	xchg   ax,ax
c001a390:	31 c0                	xor    eax,eax
c001a392:	80 fa 07             	cmp    dl,0x7
c001a395:	0f 85 e9 00 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a39b:	83 ec 0c             	sub    esp,0xc
c001a39e:	6a 00                	push   0x0
c001a3a0:	e8 8d f4 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a3a5:	89 c7                	mov    edi,eax
c001a3a7:	89 d5                	mov    ebp,edx
c001a3a9:	58                   	pop    eax
c001a3aa:	5a                   	pop    edx
c001a3ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3ae:	ff 36                	push   DWORD PTR [esi]
c001a3b0:	e8 fb f1 ff ff       	call   c00195b0 <Vm::fpu64ToInternal(unsigned long long)>
c001a3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	55                   	push   ebp
c001a3bc:	57                   	push   edi
c001a3bd:	52                   	push   edx
c001a3be:	50                   	push   eax
c001a3bf:	e8 3c f4 ff ff       	call   c0019800 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3c4:	83 c4 0c             	add    esp,0xc
c001a3c7:	eb 67                	jmp    c001a430 <Vm::x87Handler(regs*)+0xabe>
c001a3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3cc:	31 c0                	xor    eax,eax
c001a3ce:	80 fa 02             	cmp    dl,0x2
c001a3d1:	0f 85 ad 00 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a3d7:	83 ec 0c             	sub    esp,0xc
c001a3da:	6a 00                	push   0x0
c001a3dc:	e8 51 f4 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a3e1:	59                   	pop    ecx
c001a3e2:	5f                   	pop    edi
c001a3e3:	90                   	nop
c001a3e4:	52                   	push   edx
c001a3e5:	50                   	push   eax
c001a3e6:	e8 77 f1 ff ff       	call   c0019562 <Vm::fpuInternalTo64(unsigned long long)>
c001a3eb:	e9 84 00 00 00       	jmp    c001a474 <Vm::x87Handler(regs*)+0xb02>
c001a3f0:	31 c0                	xor    eax,eax
c001a3f2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3f7:	0f 85 87 00 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a3fd:	50                   	push   eax
c001a3fe:	50                   	push   eax
c001a3ff:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a402:	66 90                	xchg   ax,ax
c001a404:	31 d2                	xor    edx,edx
c001a406:	52                   	push   edx
c001a407:	50                   	push   eax
c001a408:	e8 47 f2 ff ff       	call   c0019654 <Vm::fpuLongToFloat(long long)>
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a417:	89 c6                	mov    esi,eax
c001a419:	89 d7                	mov    edi,edx
c001a41b:	e8 12 f4 ff ff       	call   c0019832 <Vm::fpuGetReg(int)>
c001a420:	57                   	push   edi
c001a421:	56                   	push   esi
c001a422:	52                   	push   edx
c001a423:	50                   	push   eax
c001a424:	e8 b8 f3 ff ff       	call   c00197e1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a429:	8d 76 00             	lea    esi,[esi+0x0]
c001a42c:	83 c4 1c             	add    esp,0x1c
c001a42f:	90                   	nop
c001a430:	52                   	push   edx
c001a431:	50                   	push   eax
c001a432:	6a 00                	push   0x0
c001a434:	e8 3c f4 ff ff       	call   c0019875 <Vm::fpuSetReg(int, unsigned long long)>
c001a439:	e9 7a f7 ff ff       	jmp    c0019bb8 <Vm::x87Handler(regs*)+0x246>
c001a43e:	66 90                	xchg   ax,ax
c001a440:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a444:	80 fa 05             	cmp    dl,0x5
c001a447:	75 13                	jne    c001a45c <Vm::x87Handler(regs*)+0xaea>
c001a449:	55                   	push   ebp
c001a44a:	55                   	push   ebp
c001a44b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a44e:	ff 36                	push   DWORD PTR [esi]
c001a450:	e8 c3 f1 ff ff       	call   c0019618 <Vm::fpuULongToFloat(unsigned long long)>
c001a455:	e9 52 f7 ff ff       	jmp    c0019bac <Vm::x87Handler(regs*)+0x23a>
c001a45a:	66 90                	xchg   ax,ax
c001a45c:	31 c0                	xor    eax,eax
c001a45e:	80 fa 07             	cmp    dl,0x7
c001a461:	75 21                	jne    c001a484 <Vm::x87Handler(regs*)+0xb12>
c001a463:	e8 b7 f4 ff ff       	call   c001991f <Vm::fpuPop()>
c001a468:	51                   	push   ecx
c001a469:	51                   	push   ecx
c001a46a:	52                   	push   edx
c001a46b:	50                   	push   eax
c001a46c:	e8 48 f1 ff ff       	call   c00195b9 <Vm::fpuFloatToLong(unsigned long long)>
c001a471:	8d 76 00             	lea    esi,[esi+0x0]
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	89 06                	mov    DWORD PTR [esi],eax
c001a479:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a47c:	e9 7b f7 ff ff       	jmp    c0019bfc <Vm::x87Handler(regs*)+0x28a>
c001a481:	8d 76 00             	lea    esi,[esi+0x0]
c001a484:	83 c4 1c             	add    esp,0x1c
c001a487:	5b                   	pop    ebx
c001a488:	5e                   	pop    esi
c001a489:	5f                   	pop    edi
c001a48a:	5d                   	pop    ebp
c001a48b:	c3                   	ret    

c001a48c <__static_initialization_and_destruction_0(int, int)>:
c001a48c:	83 ec 0c             	sub    esp,0xc
c001a48f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a494:	75 1a                	jne    c001a4b0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a496:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a49e:	75 10                	jne    c001a4b0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	68 60 79 02 c0       	push   0xc0027960
c001a4a8:	e8 1b 74 00 00       	call   c00218c8 <Vm::_FPUState::_FPUState()>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	90                   	nop
c001a4b1:	83 c4 0c             	add    esp,0xc
c001a4b4:	c3                   	ret    
c001a4b5:	8d 76 00             	lea    esi,[esi+0x0]

c001a4b8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a4b8:	83 ec 0c             	sub    esp,0xc
c001a4bb:	83 ec 08             	sub    esp,0x8
c001a4be:	68 ff ff 00 00       	push   0xffff
c001a4c3:	6a 01                	push   0x1
c001a4c5:	e8 c2 ff ff ff       	call   c001a48c <__static_initialization_and_destruction_0(int, int)>
c001a4ca:	83 c4 10             	add    esp,0x10
c001a4cd:	83 c4 0c             	add    esp,0xc
c001a4d0:	c3                   	ret    
c001a4d1:	66 90                	xchg   ax,ax
c001a4d3:	90                   	nop

c001a4d4 <FAT::getName()>:
c001a4d4:	b8 c0 4a 02 c0       	mov    eax,0xc0024ac0
c001a4d9:	c3                   	ret    
c001a4da:	66 90                	xchg   ax,ax

c001a4dc <FAT::tell(void*, unsigned long long*)>:
c001a4dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4e1:	75 09                	jne    c001a4ec <FAT::tell(void*, unsigned long long*)+0x10>
c001a4e3:	b8 04 00 00 00       	mov    eax,0x4
c001a4e8:	c3                   	ret    
c001a4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4f1:	75 09                	jne    c001a4fc <FAT::tell(void*, unsigned long long*)+0x20>
c001a4f3:	b8 04 00 00 00       	mov    eax,0x4
c001a4f8:	c3                   	ret    
c001a4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a500:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a503:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a506:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a50a:	89 01                	mov    DWORD PTR [ecx],eax
c001a50c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a50f:	b8 00 00 00 00       	mov    eax,0x0
c001a514:	c3                   	ret    
c001a515:	90                   	nop
c001a516:	66 90                	xchg   ax,ax

c001a518 <FAT::stat(void*, unsigned long long*)>:
c001a518:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a51d:	75 09                	jne    c001a528 <FAT::stat(void*, unsigned long long*)+0x10>
c001a51f:	b8 04 00 00 00       	mov    eax,0x4
c001a524:	c3                   	ret    
c001a525:	8d 76 00             	lea    esi,[esi+0x0]
c001a528:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a52d:	75 09                	jne    c001a538 <FAT::stat(void*, unsigned long long*)+0x20>
c001a52f:	b8 04 00 00 00       	mov    eax,0x4
c001a534:	c3                   	ret    
c001a535:	8d 76 00             	lea    esi,[esi+0x0]
c001a538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a53c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a53f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a542:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a546:	89 01                	mov    DWORD PTR [ecx],eax
c001a548:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a54b:	b8 00 00 00 00       	mov    eax,0x0
c001a550:	c3                   	ret    
c001a551:	90                   	nop
c001a552:	66 90                	xchg   ax,ax

c001a554 <FAT::~FAT()>:
c001a554:	83 ec 0c             	sub    esp,0xc
c001a557:	ba 0c 4b 02 c0       	mov    edx,0xc0024b0c
c001a55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a560:	89 10                	mov    DWORD PTR [eax],edx
c001a562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a566:	83 ec 0c             	sub    esp,0xc
c001a569:	50                   	push   eax
c001a56a:	e8 33 28 ff ff       	call   c000cda2 <Filesystem::~Filesystem()>
c001a56f:	83 c4 10             	add    esp,0x10
c001a572:	90                   	nop
c001a573:	83 c4 0c             	add    esp,0xc
c001a576:	c3                   	ret    
c001a577:	90                   	nop

c001a578 <FAT::~FAT()>:
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	83 ec 0c             	sub    esp,0xc
c001a57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a582:	e8 cd ff ff ff       	call   c001a554 <FAT::~FAT()>
c001a587:	83 c4 10             	add    esp,0x10
c001a58a:	83 ec 08             	sub    esp,0x8
c001a58d:	6a 08                	push   0x8
c001a58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a593:	e8 ee 23 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c001a598:	83 c4 10             	add    esp,0x10
c001a59b:	83 c4 0c             	add    esp,0xc
c001a59e:	c3                   	ret    
c001a59f:	90                   	nop

c001a5a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5a0:	83 ec 1c             	sub    esp,0x1c
c001a5a3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a5aa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a5af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5b3:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a5ba:	83 f8 ff             	cmp    eax,0xffffffff
c001a5bd:	75 35                	jne    c001a5f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a5bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5c3:	88 c2                	mov    dl,al
c001a5c5:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a5ca:	01 d0                	add    eax,edx
c001a5cc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5d0:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a5d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5da:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a5e1:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a5e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5ea:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a5f1:	eb 19                	jmp    c001a60c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5f3:	90                   	nop
c001a5f4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5f8:	88 c2                	mov    dl,al
c001a5fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5fe:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a605:	01 d0                	add    eax,edx
c001a607:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a60b:	90                   	nop
c001a60c:	83 ec 04             	sub    esp,0x4
c001a60f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a613:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a617:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a61b:	50                   	push   eax
c001a61c:	e8 11 c6 fe ff       	call   c0006c32 <f_getlabel>
c001a621:	83 c4 10             	add    esp,0x10
c001a624:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a628:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a62d:	75 09                	jne    c001a638 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a62f:	b8 00 00 00 00       	mov    eax,0x0
c001a634:	eb 0a                	jmp    c001a640 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a636:	66 90                	xchg   ax,ax
c001a638:	b8 01 00 00 00       	mov    eax,0x1
c001a63d:	8d 76 00             	lea    esi,[esi+0x0]
c001a640:	83 c4 1c             	add    esp,0x1c
c001a643:	c3                   	ret    

c001a644 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a644:	57                   	push   edi
c001a645:	83 ec 58             	sub    esp,0x58
c001a648:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a650:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a654:	b9 0f 00 00 00       	mov    ecx,0xf
c001a659:	b8 00 00 00 00       	mov    eax,0x0
c001a65e:	fc                   	cld    
c001a65f:	89 d7                	mov    edi,edx
c001a661:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a663:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a667:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a66e:	83 f8 ff             	cmp    eax,0xffffffff
c001a671:	75 35                	jne    c001a6a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a673:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a677:	88 c2                	mov    dl,al
c001a679:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a67e:	01 d0                	add    eax,edx
c001a680:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a684:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a68a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a68e:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a695:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a69a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a69e:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a6a5:	eb 19                	jmp    c001a6c0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a6a7:	90                   	nop
c001a6a8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6ac:	88 c2                	mov    dl,al
c001a6ae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6b2:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a6b9:	01 d0                	add    eax,edx
c001a6bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6bf:	90                   	nop
c001a6c0:	83 ec 08             	sub    esp,0x8
c001a6c3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a6c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6cb:	50                   	push   eax
c001a6cc:	e8 af 61 fe ff       	call   c0000880 <strcat>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	83 ec 0c             	sub    esp,0xc
c001a6d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6db:	50                   	push   eax
c001a6dc:	e8 3f c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6e8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6ed:	75 09                	jne    c001a6f8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6ef:	b8 00 00 00 00       	mov    eax,0x0
c001a6f4:	eb 0a                	jmp    c001a700 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a6f6:	66 90                	xchg   ax,ax
c001a6f8:	b8 01 00 00 00       	mov    eax,0x1
c001a6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a700:	83 c4 58             	add    esp,0x58
c001a703:	5f                   	pop    edi
c001a704:	c3                   	ret    
c001a705:	90                   	nop
c001a706:	66 90                	xchg   ax,ax

c001a708 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a708:	83 ec 2c             	sub    esp,0x2c
c001a70b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a713:	83 ec 08             	sub    esp,0x8
c001a716:	68 e4 4a 02 c0       	push   0xc0024ae4
c001a71b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a71f:	e8 a8 60 fe ff       	call   c00007cc <strcmp>
c001a724:	83 c4 10             	add    esp,0x10
c001a727:	85 c0                	test   eax,eax
c001a729:	0f 94 c0             	sete   al
c001a72c:	84 c0                	test   al,al
c001a72e:	74 10                	je     c001a740 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a730:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a738:	e9 b3 00 00 00       	jmp    c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a73d:	8d 76 00             	lea    esi,[esi+0x0]
c001a740:	83 ec 08             	sub    esp,0x8
c001a743:	68 d6 4a 02 c0       	push   0xc0024ad6
c001a748:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a74c:	e8 7b 60 fe ff       	call   c00007cc <strcmp>
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	85 c0                	test   eax,eax
c001a756:	0f 94 c0             	sete   al
c001a759:	84 c0                	test   al,al
c001a75b:	74 0f                	je     c001a76c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a75d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a765:	e9 86 00 00 00       	jmp    c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a76a:	66 90                	xchg   ax,ax
c001a76c:	83 ec 08             	sub    esp,0x8
c001a76f:	68 dc 4a 02 c0       	push   0xc0024adc
c001a774:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a778:	e8 4f 60 fe ff       	call   c00007cc <strcmp>
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	85 c0                	test   eax,eax
c001a782:	0f 94 c0             	sete   al
c001a785:	84 c0                	test   al,al
c001a787:	74 0b                	je     c001a794 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a789:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a791:	eb 5d                	jmp    c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a793:	90                   	nop
c001a794:	83 ec 08             	sub    esp,0x8
c001a797:	68 2c 20 02 c0       	push   0xc002202c
c001a79c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7a0:	e8 27 60 fe ff       	call   c00007cc <strcmp>
c001a7a5:	83 c4 10             	add    esp,0x10
c001a7a8:	85 c0                	test   eax,eax
c001a7aa:	0f 94 c0             	sete   al
c001a7ad:	84 c0                	test   al,al
c001a7af:	74 0b                	je     c001a7bc <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a7b1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a7b9:	eb 35                	jmp    c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7bb:	90                   	nop
c001a7bc:	83 ec 08             	sub    esp,0x8
c001a7bf:	68 e2 4a 02 c0       	push   0xc0024ae2
c001a7c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7c8:	e8 ff 5f fe ff       	call   c00007cc <strcmp>
c001a7cd:	83 c4 10             	add    esp,0x10
c001a7d0:	85 c0                	test   eax,eax
c001a7d2:	0f 94 c0             	sete   al
c001a7d5:	84 c0                	test   al,al
c001a7d7:	74 0b                	je     c001a7e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7d9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7e1:	eb 0d                	jmp    c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7e3:	90                   	nop
c001a7e4:	b8 08 00 00 00       	mov    eax,0x8
c001a7e9:	e9 ea 00 00 00       	jmp    c001a8d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7ee:	66 90                	xchg   ax,ax
c001a7f0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a7f7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a7fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a800:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a807:	83 f8 ff             	cmp    eax,0xffffffff
c001a80a:	75 34                	jne    c001a840 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a80c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a810:	88 c2                	mov    dl,al
c001a812:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a817:	01 d0                	add    eax,edx
c001a819:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a81d:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a827:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a82e:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a833:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a837:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a83e:	eb 18                	jmp    c001a858 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a840:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a844:	88 c2                	mov    dl,al
c001a846:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a84a:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a851:	01 d0                	add    eax,edx
c001a853:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a857:	90                   	nop
c001a858:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a85c:	88 04 24             	mov    BYTE PTR [esp],al
c001a85f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a867:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a86f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a874:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a87c:	83 ec 0c             	sub    esp,0xc
c001a87f:	68 00 20 00 00       	push   0x2000
c001a884:	e8 3a f1 fe ff       	call   c00099c3 <malloc>
c001a889:	83 c4 10             	add    esp,0x10
c001a88c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a890:	68 00 20 00 00       	push   0x2000
c001a895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a899:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a89d:	50                   	push   eax
c001a89e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a8a2:	50                   	push   eax
c001a8a3:	e8 f9 cb fe ff       	call   c00074a1 <f_mkfs>
c001a8a8:	83 c4 10             	add    esp,0x10
c001a8ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8b4:	75 0a                	jne    c001a8c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a8b6:	b8 00 00 00 00       	mov    eax,0x0
c001a8bb:	eb 1b                	jmp    c001a8d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a8c5:	75 09                	jne    c001a8d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a8c7:	b8 09 00 00 00       	mov    eax,0x9
c001a8cc:	eb 0a                	jmp    c001a8d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8ce:	66 90                	xchg   ax,ax
c001a8d0:	b8 01 00 00 00       	mov    eax,0x1
c001a8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d8:	83 c4 2c             	add    esp,0x2c
c001a8db:	c3                   	ret    

c001a8dc <FAT::tryMount(LogicalDisk*, int)>:
c001a8dc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8e2:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a8e7:	83 f8 14             	cmp    eax,0x14
c001a8ea:	75 18                	jne    c001a904 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	68 e8 4a 02 c0       	push   0xc0024ae8
c001a8f4:	e8 30 9a ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001a8f9:	83 c4 10             	add    esp,0x10
c001a8fc:	b0 00                	mov    al,0x0
c001a8fe:	e9 e9 01 00 00       	jmp    c001aaec <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a903:	90                   	nop
c001a904:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a90b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a911:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a917:	3d 00 02 00 00       	cmp    eax,0x200
c001a91c:	74 0a                	je     c001a928 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a91e:	b0 00                	mov    al,0x0
c001a920:	e9 c7 01 00 00       	jmp    c001aaec <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a925:	8d 76 00             	lea    esi,[esi+0x0]
c001a928:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a930:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a937:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a93e:	83 f8 ff             	cmp    eax,0xffffffff
c001a941:	74 09                	je     c001a94c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a943:	b0 01                	mov    al,0x1
c001a945:	e9 a2 01 00 00       	jmp    c001aaec <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a94a:	66 90                	xchg   ax,ax
c001a94c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a956:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a95e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a965:	88 c2                	mov    dl,al
c001a967:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a96c:	01 d0                	add    eax,edx
c001a96e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a975:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a97b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a982:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a989:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a98e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a995:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a99c:	83 ec 0c             	sub    esp,0xc
c001a99f:	68 54 02 00 00       	push   0x254
c001a9a4:	e8 1a f0 fe ff       	call   c00099c3 <malloc>
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a9b3:	83 ec 04             	sub    esp,0x4
c001a9b6:	6a 00                	push   0x0
c001a9b8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9bf:	50                   	push   eax
c001a9c0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9c7:	e8 5d a4 fe ff       	call   c0004e29 <f_mount>
c001a9cc:	83 c4 10             	add    esp,0x10
c001a9cf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9d6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9de:	74 1c                	je     c001a9fc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9e0:	83 ec 0c             	sub    esp,0xc
c001a9e3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9ea:	e8 f4 ef fe ff       	call   c00099e3 <rfree>
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	b0 00                	mov    al,0x0
c001a9f4:	e9 f3 00 00 00       	jmp    c001aaec <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9fc:	83 ec 04             	sub    esp,0x4
c001a9ff:	68 00 01 00 00       	push   0x100
c001aa04:	6a 00                	push   0x0
c001aa06:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa0d:	50                   	push   eax
c001aa0e:	e8 71 5c fe ff       	call   c0000684 <memset>
c001aa13:	83 c4 10             	add    esp,0x10
c001aa16:	83 ec 08             	sub    esp,0x8
c001aa19:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa20:	50                   	push   eax
c001aa21:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa28:	50                   	push   eax
c001aa29:	e8 52 5e fe ff       	call   c0000880 <strcat>
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	83 ec 08             	sub    esp,0x8
c001aa34:	68 f6 4a 02 c0       	push   0xc0024af6
c001aa39:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa40:	50                   	push   eax
c001aa41:	e8 3a 5e fe ff       	call   c0000880 <strcat>
c001aa46:	83 c4 10             	add    esp,0x10
c001aa49:	83 ec 04             	sub    esp,0x4
c001aa4c:	6a 01                	push   0x1
c001aa4e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa55:	50                   	push   eax
c001aa56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa5a:	50                   	push   eax
c001aa5b:	e8 2b a4 fe ff       	call   c0004e8b <f_open>
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa6a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa71:	85 c0                	test   eax,eax
c001aa73:	74 0b                	je     c001aa80 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa75:	78 31                	js     c001aaa8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa77:	83 e8 04             	sub    eax,0x4
c001aa7a:	83 f8 01             	cmp    eax,0x1
c001aa7d:	77 29                	ja     c001aaa8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa7f:	90                   	nop
c001aa80:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa8f:	50                   	push   eax
c001aa90:	e8 48 af fe ff       	call   c00059dd <f_close>
c001aa95:	83 c4 10             	add    esp,0x10
c001aa98:	90                   	nop
c001aa99:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aaa1:	74 41                	je     c001aae4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aaa3:	eb 33                	jmp    c001aad8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aaa5:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa8:	83 ec 0c             	sub    esp,0xc
c001aaab:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aab2:	e8 2c ef fe ff       	call   c00099e3 <rfree>
c001aab7:	83 c4 10             	add    esp,0x10
c001aaba:	83 ec 04             	sub    esp,0x4
c001aabd:	6a 00                	push   0x0
c001aabf:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aac6:	50                   	push   eax
c001aac7:	6a 00                	push   0x0
c001aac9:	e8 5b a3 fe ff       	call   c0004e29 <f_mount>
c001aace:	83 c4 10             	add    esp,0x10
c001aad1:	b0 00                	mov    al,0x0
c001aad3:	eb 17                	jmp    c001aaec <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aad5:	8d 76 00             	lea    esi,[esi+0x0]
c001aad8:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001aadd:	40                   	inc    eax
c001aade:	a3 c0 79 02 c0       	mov    ds:0xc00279c0,eax
c001aae3:	90                   	nop
c001aae4:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aaeb:	90                   	nop
c001aaec:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aaf2:	c3                   	ret    
c001aaf3:	90                   	nop

c001aaf4 <FAT::allocateSwapfile(char const*, int)>:
c001aaf4:	55                   	push   ebp
c001aaf5:	57                   	push   edi
c001aaf6:	56                   	push   esi
c001aaf7:	53                   	push   ebx
c001aaf8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aafe:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab09:	83 ec 0c             	sub    esp,0xc
c001ab0c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab13:	e8 ab ee fe ff       	call   c00099c3 <malloc>
c001ab18:	83 c4 10             	add    esp,0x10
c001ab1b:	89 c7                	mov    edi,eax
c001ab1d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001ab22:	83 ec 04             	sub    esp,0x4
c001ab25:	50                   	push   eax
c001ab26:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab2d:	57                   	push   edi
c001ab2e:	e8 9f 24 ff ff       	call   c000cfd2 <File::File(char const*, Process*)>
c001ab33:	83 c4 10             	add    esp,0x10
c001ab36:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab3d:	83 ec 04             	sub    esp,0x4
c001ab40:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab44:	50                   	push   eax
c001ab45:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab49:	50                   	push   eax
c001ab4a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab51:	e8 8c 27 ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab60:	c1 e0 14             	shl    eax,0x14
c001ab63:	89 c7                	mov    edi,eax
c001ab65:	89 c5                	mov    ebp,eax
c001ab67:	c1 fd 1f             	sar    ebp,0x1f
c001ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab72:	89 f9                	mov    ecx,edi
c001ab74:	31 c1                	xor    ecx,eax
c001ab76:	89 cb                	mov    ebx,ecx
c001ab78:	89 e9                	mov    ecx,ebp
c001ab7a:	31 d1                	xor    ecx,edx
c001ab7c:	89 ce                	mov    esi,ecx
c001ab7e:	89 f0                	mov    eax,esi
c001ab80:	09 d8                	or     eax,ebx
c001ab82:	0f 84 98 00 00 00    	je     c001ac20 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab88:	83 ec 0c             	sub    esp,0xc
c001ab8b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab92:	e8 17 26 ff ff       	call   c000d1ae <File::unlink()>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	83 ec 08             	sub    esp,0x8
c001ab9d:	6a 12                	push   0x12
c001ab9f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aba6:	e8 8b 24 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abb5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001abbb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abc2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abc9:	c1 e0 14             	shl    eax,0x14
c001abcc:	99                   	cdq    
c001abcd:	6a 01                	push   0x1
c001abcf:	52                   	push   edx
c001abd0:	50                   	push   eax
c001abd1:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abd8:	e8 b0 c4 fe ff       	call   c000708d <f_expand>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001abe9:	83 c0 10             	add    eax,0x10
c001abec:	8b 00                	mov    eax,DWORD PTR [eax]
c001abee:	83 ec 0c             	sub    esp,0xc
c001abf1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abf5:	52                   	push   edx
c001abf6:	8d 54 24 30          	lea    edx,[esp+0x30]
c001abfa:	52                   	push   edx
c001abfb:	6a 00                	push   0x0
c001abfd:	68 00 04 00 00       	push   0x400
c001ac02:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac09:	ff d0                	call   eax
c001ac0b:	83 c4 20             	add    esp,0x20
c001ac0e:	83 ec 0c             	sub    esp,0xc
c001ac11:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac18:	e8 77 24 ff ff       	call   c000d094 <File::close()>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	83 ec 08             	sub    esp,0x8
c001ac23:	6a 01                	push   0x1
c001ac25:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac2c:	e8 05 24 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac3d:	83 c0 0c             	add    eax,0xc
c001ac40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac42:	83 ec 0c             	sub    esp,0xc
c001ac45:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac49:	52                   	push   edx
c001ac4a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac4e:	52                   	push   edx
c001ac4f:	6a 00                	push   0x0
c001ac51:	6a 04                	push   0x4
c001ac53:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac5a:	ff d0                	call   eax
c001ac5c:	83 c4 20             	add    esp,0x20
c001ac5f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac66:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac6c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac73:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac7a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac80:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac87:	83 ec 0c             	sub    esp,0xc
c001ac8a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac91:	e8 fe 23 ff ff       	call   c000d094 <File::close()>
c001ac96:	83 c4 10             	add    esp,0x10
c001ac99:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001aca0:	ba 00 00 00 00       	mov    edx,0x0
c001aca5:	81 c4 3c 04 00 00    	add    esp,0x43c
c001acab:	5b                   	pop    ebx
c001acac:	5e                   	pop    esi
c001acad:	5f                   	pop    edi
c001acae:	5d                   	pop    ebp
c001acaf:	c3                   	ret    

c001acb0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001acb0:	57                   	push   edi
c001acb1:	56                   	push   esi
c001acb2:	53                   	push   ebx
c001acb3:	81 ec 50 02 00 00    	sub    esp,0x250
c001acb9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001acc1:	74 0d                	je     c001acd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001acc3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001accb:	75 0f                	jne    c001acdc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001accd:	8d 76 00             	lea    esi,[esi+0x0]
c001acd0:	b8 04 00 00 00       	mov    eax,0x4
c001acd5:	e9 36 01 00 00       	jmp    c001ae10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acda:	66 90                	xchg   ax,ax
c001acdc:	83 ec 08             	sub    esp,0x8
c001acdf:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ace6:	50                   	push   eax
c001ace7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acee:	e8 f4 b2 fe ff       	call   c0005fe7 <f_readdir>
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001acfd:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad0e:	83 c0 1a             	add    eax,0x1a
c001ad11:	50                   	push   eax
c001ad12:	e8 89 59 fe ff       	call   c00006a0 <strlen>
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	ba 00 00 00 00       	mov    edx,0x0
c001ad1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad27:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad2e:	0f b6 c0             	movzx  eax,al
c001ad31:	83 e0 10             	and    eax,0x10
c001ad34:	74 0a                	je     c001ad40 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad36:	b8 02 00 00 00       	mov    eax,0x2
c001ad3b:	eb 0b                	jmp    c001ad48 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad40:	b8 01 00 00 00       	mov    eax,0x1
c001ad45:	8d 76 00             	lea    esi,[esi+0x0]
c001ad48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad4c:	83 ec 08             	sub    esp,0x8
c001ad4f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad56:	83 c0 1a             	add    eax,0x1a
c001ad59:	50                   	push   eax
c001ad5a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad5e:	83 c0 10             	add    eax,0x10
c001ad61:	50                   	push   eax
c001ad62:	e8 d9 59 fe ff       	call   c0000740 <strcpy>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad71:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad78:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad7c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad83:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad8a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad91:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ad98:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ad9f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ada6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001adad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001adb4:	89 c6                	mov    esi,eax
c001adb6:	89 d7                	mov    edi,edx
c001adb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adba:	89 c8                	mov    eax,ecx
c001adbc:	89 fa                	mov    edx,edi
c001adbe:	89 f3                	mov    ebx,esi
c001adc0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001adc7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001adce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001add5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001addc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ade2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ade9:	84 c0                	test   al,al
c001adeb:	75 07                	jne    c001adf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001aded:	b8 07 00 00 00       	mov    eax,0x7
c001adf2:	eb 1c                	jmp    c001ae10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adf4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001adfb:	85 c0                	test   eax,eax
c001adfd:	75 09                	jne    c001ae08 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001adff:	b8 00 00 00 00       	mov    eax,0x0
c001ae04:	eb 0a                	jmp    c001ae10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae06:	66 90                	xchg   ax,ax
c001ae08:	b8 01 00 00 00       	mov    eax,0x1
c001ae0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae10:	81 c4 50 02 00 00    	add    esp,0x250
c001ae16:	5b                   	pop    ebx
c001ae17:	5e                   	pop    esi
c001ae18:	5f                   	pop    edi
c001ae19:	c3                   	ret    
c001ae1a:	66 90                	xchg   ax,ax

c001ae1c <FAT::read(void*, unsigned long, void*, int*)>:
c001ae1c:	83 ec 1c             	sub    esp,0x1c
c001ae1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae24:	74 0a                	je     c001ae30 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae2b:	75 0b                	jne    c001ae38 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae30:	b8 04 00 00 00       	mov    eax,0x4
c001ae35:	eb 41                	jmp    c001ae78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae37:	90                   	nop
c001ae38:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae3c:	50                   	push   eax
c001ae3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae49:	e8 79 a4 fe ff       	call   c00052c7 <f_read>
c001ae4e:	83 c4 10             	add    esp,0x10
c001ae51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae59:	89 c2                	mov    edx,eax
c001ae5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae5f:	89 10                	mov    DWORD PTR [eax],edx
c001ae61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae65:	85 c0                	test   eax,eax
c001ae67:	75 07                	jne    c001ae70 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae69:	b8 00 00 00 00       	mov    eax,0x0
c001ae6e:	eb 08                	jmp    c001ae78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae70:	b8 01 00 00 00       	mov    eax,0x1
c001ae75:	8d 76 00             	lea    esi,[esi+0x0]
c001ae78:	83 c4 1c             	add    esp,0x1c
c001ae7b:	c3                   	ret    

c001ae7c <FAT::write(void*, unsigned long, void*, int*)>:
c001ae7c:	83 ec 1c             	sub    esp,0x1c
c001ae7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae84:	74 0a                	je     c001ae90 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae86:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae8b:	75 0b                	jne    c001ae98 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae90:	b8 04 00 00 00       	mov    eax,0x4
c001ae95:	eb 41                	jmp    c001aed8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae97:	90                   	nop
c001ae98:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae9c:	50                   	push   eax
c001ae9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aea1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aea5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea9:	e8 99 a6 fe ff       	call   c0005547 <f_write>
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeb9:	89 c2                	mov    edx,eax
c001aebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aebf:	89 10                	mov    DWORD PTR [eax],edx
c001aec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aec5:	85 c0                	test   eax,eax
c001aec7:	75 07                	jne    c001aed0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001aec9:	b8 00 00 00 00       	mov    eax,0x0
c001aece:	eb 08                	jmp    c001aed8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aed0:	b8 01 00 00 00       	mov    eax,0x1
c001aed5:	8d 76 00             	lea    esi,[esi+0x0]
c001aed8:	83 c4 1c             	add    esp,0x1c
c001aedb:	c3                   	ret    

c001aedc <FAT::close(void*)>:
c001aedc:	83 ec 1c             	sub    esp,0x1c
c001aedf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aee4:	75 0a                	jne    c001aef0 <FAT::close(void*)+0x14>
c001aee6:	b8 04 00 00 00       	mov    eax,0x4
c001aeeb:	eb 3f                	jmp    c001af2c <FAT::close(void*)+0x50>
c001aeed:	8d 76 00             	lea    esi,[esi+0x0]
c001aef0:	83 ec 0c             	sub    esp,0xc
c001aef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef7:	e8 e1 aa fe ff       	call   c00059dd <f_close>
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af03:	83 ec 0c             	sub    esp,0xc
c001af06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af0a:	e8 c4 ea fe ff       	call   c00099d3 <free>
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af16:	85 c0                	test   eax,eax
c001af18:	75 0a                	jne    c001af24 <FAT::close(void*)+0x48>
c001af1a:	b8 00 00 00 00       	mov    eax,0x0
c001af1f:	eb 0b                	jmp    c001af2c <FAT::close(void*)+0x50>
c001af21:	8d 76 00             	lea    esi,[esi+0x0]
c001af24:	b8 01 00 00 00       	mov    eax,0x1
c001af29:	8d 76 00             	lea    esi,[esi+0x0]
c001af2c:	83 c4 1c             	add    esp,0x1c
c001af2f:	c3                   	ret    

c001af30 <FAT::closeDir(void*)>:
c001af30:	83 ec 1c             	sub    esp,0x1c
c001af33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af38:	75 0a                	jne    c001af44 <FAT::closeDir(void*)+0x14>
c001af3a:	b8 04 00 00 00       	mov    eax,0x4
c001af3f:	eb 3f                	jmp    c001af80 <FAT::closeDir(void*)+0x50>
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af4b:	e8 75 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af57:	83 ec 0c             	sub    esp,0xc
c001af5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af5e:	e8 70 ea fe ff       	call   c00099d3 <free>
c001af63:	83 c4 10             	add    esp,0x10
c001af66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af6a:	85 c0                	test   eax,eax
c001af6c:	75 0a                	jne    c001af78 <FAT::closeDir(void*)+0x48>
c001af6e:	b8 00 00 00 00       	mov    eax,0x0
c001af73:	eb 0b                	jmp    c001af80 <FAT::closeDir(void*)+0x50>
c001af75:	8d 76 00             	lea    esi,[esi+0x0]
c001af78:	b8 01 00 00 00       	mov    eax,0x1
c001af7d:	8d 76 00             	lea    esi,[esi+0x0]
c001af80:	83 c4 1c             	add    esp,0x1c
c001af83:	c3                   	ret    

c001af84 <FAT::seek(void*, unsigned long long)>:
c001af84:	83 ec 2c             	sub    esp,0x2c
c001af87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af97:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001af9c:	75 0a                	jne    c001afa8 <FAT::seek(void*, unsigned long long)+0x24>
c001af9e:	b8 04 00 00 00       	mov    eax,0x4
c001afa3:	eb 37                	jmp    c001afdc <FAT::seek(void*, unsigned long long)+0x58>
c001afa5:	8d 76 00             	lea    esi,[esi+0x0]
c001afa8:	83 ec 04             	sub    esp,0x4
c001afab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afb3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001afb7:	e8 50 aa fe ff       	call   c0005a0c <f_lseek>
c001afbc:	83 c4 10             	add    esp,0x10
c001afbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afc7:	85 c0                	test   eax,eax
c001afc9:	75 09                	jne    c001afd4 <FAT::seek(void*, unsigned long long)+0x50>
c001afcb:	b8 00 00 00 00       	mov    eax,0x0
c001afd0:	eb 0a                	jmp    c001afdc <FAT::seek(void*, unsigned long long)+0x58>
c001afd2:	66 90                	xchg   ax,ax
c001afd4:	b8 01 00 00 00       	mov    eax,0x1
c001afd9:	8d 76 00             	lea    esi,[esi+0x0]
c001afdc:	83 c4 2c             	add    esp,0x2c
c001afdf:	c3                   	ret    

c001afe0 <fatWrapperReadDisk>:
c001afe0:	83 ec 1c             	sub    esp,0x1c
c001afe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afe7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afef:	89 04 24             	mov    DWORD PTR [esp],eax
c001aff2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aff6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001affa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afff:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b006:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b00a:	83 ec 0c             	sub    esp,0xc
c001b00d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b011:	52                   	push   edx
c001b012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b01a:	50                   	push   eax
c001b01b:	e8 64 51 ff ff       	call   c0010184 <LogicalDisk::read(unsigned long long, int, void*)>
c001b020:	83 c4 20             	add    esp,0x20
c001b023:	83 c4 1c             	add    esp,0x1c
c001b026:	c3                   	ret    
c001b027:	90                   	nop

c001b028 <fatWrapperWriteDisk>:
c001b028:	83 ec 1c             	sub    esp,0x1c
c001b02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b02f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b037:	89 04 24             	mov    DWORD PTR [esp],eax
c001b03a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b03e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b042:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b047:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b04e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b052:	83 ec 0c             	sub    esp,0xc
c001b055:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b059:	52                   	push   edx
c001b05a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b05e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b062:	50                   	push   eax
c001b063:	e8 88 51 ff ff       	call   c00101f0 <LogicalDisk::write(unsigned long long, int, void*)>
c001b068:	83 c4 20             	add    esp,0x20
c001b06b:	83 c4 1c             	add    esp,0x1c
c001b06e:	c3                   	ret    
c001b06f:	90                   	nop

c001b070 <fatWrapperIoctl>:
c001b070:	53                   	push   ebx
c001b071:	83 ec 28             	sub    esp,0x28
c001b074:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b078:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b07c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b080:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b084:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b089:	75 31                	jne    c001b0bc <fatWrapperIoctl+0x4c>
c001b08b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b08f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b093:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b098:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b09f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0af:	66 89 02             	mov    WORD PTR [edx],ax
c001b0b2:	b8 00 00 00 00       	mov    eax,0x0
c001b0b7:	e9 bc 00 00 00       	jmp    c001b178 <fatWrapperIoctl+0x108>
c001b0bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b0c1:	75 6d                	jne    c001b130 <fatWrapperIoctl+0xc0>
c001b0c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0d0:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b0d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0dd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0e3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0e9:	89 c8                	mov    eax,ecx
c001b0eb:	89 da                	mov    edx,ebx
c001b0ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0f1:	c1 e0 0a             	shl    eax,0xa
c001b0f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b0f9:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c001b100:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b106:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b10c:	89 cb                	mov    ebx,ecx
c001b10e:	c1 fb 1f             	sar    ebx,0x1f
c001b111:	53                   	push   ebx
c001b112:	51                   	push   ecx
c001b113:	52                   	push   edx
c001b114:	50                   	push   eax
c001b115:	e8 0a 5e 00 00       	call   c0020f24 <__udivdi3>
c001b11a:	83 c4 10             	add    esp,0x10
c001b11d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b121:	89 01                	mov    DWORD PTR [ecx],eax
c001b123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b126:	b8 00 00 00 00       	mov    eax,0x0
c001b12b:	eb 4b                	jmp    c001b178 <fatWrapperIoctl+0x108>
c001b12d:	8d 76 00             	lea    esi,[esi+0x0]
c001b130:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b135:	75 09                	jne    c001b140 <fatWrapperIoctl+0xd0>
c001b137:	b8 00 00 00 00       	mov    eax,0x0
c001b13c:	eb 3a                	jmp    c001b178 <fatWrapperIoctl+0x108>
c001b13e:	66 90                	xchg   ax,ax
c001b140:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b145:	75 19                	jne    c001b160 <fatWrapperIoctl+0xf0>
c001b147:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b14b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b14f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b153:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b159:	b8 00 00 00 00       	mov    eax,0x0
c001b15e:	eb 18                	jmp    c001b178 <fatWrapperIoctl+0x108>
c001b160:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b165:	75 09                	jne    c001b170 <fatWrapperIoctl+0x100>
c001b167:	b8 00 00 00 00       	mov    eax,0x0
c001b16c:	eb 0a                	jmp    c001b178 <fatWrapperIoctl+0x108>
c001b16e:	66 90                	xchg   ax,ax
c001b170:	b8 04 00 00 00       	mov    eax,0x4
c001b175:	8d 76 00             	lea    esi,[esi+0x0]
c001b178:	83 c4 28             	add    esp,0x28
c001b17b:	5b                   	pop    ebx
c001b17c:	c3                   	ret    
c001b17d:	90                   	nop
c001b17e:	66 90                	xchg   ax,ax

c001b180 <FAT::FAT()>:
c001b180:	83 ec 1c             	sub    esp,0x1c
c001b183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b187:	83 ec 0c             	sub    esp,0xc
c001b18a:	50                   	push   eax
c001b18b:	e8 ee 1b ff ff       	call   c000cd7e <Filesystem::Filesystem()>
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	ba 0c 4b 02 c0       	mov    edx,0xc0024b0c
c001b198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b19c:	89 10                	mov    DWORD PTR [eax],edx
c001b19e:	c7 05 c0 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279c0,0x0
c001b1a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1b0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b1b5:	7f 15                	jg     c001b1cc <FAT::FAT()+0x4c>
c001b1b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1bb:	c7 04 85 e0 79 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8620],0xffffffff
c001b1c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1ca:	eb e4                	jmp    c001b1b0 <FAT::FAT()+0x30>
c001b1cc:	90                   	nop
c001b1cd:	83 c4 1c             	add    esp,0x1c
c001b1d0:	c3                   	ret    
c001b1d1:	90                   	nop
c001b1d2:	66 90                	xchg   ax,ax

c001b1d4 <FAT::fixFilepath(char*)>:
c001b1d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1d8:	8a 00                	mov    al,BYTE PTR [eax]
c001b1da:	3c 40                	cmp    al,0x40
c001b1dc:	7e 2e                	jle    c001b20c <FAT::fixFilepath(char*)+0x38>
c001b1de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1e2:	8a 00                	mov    al,BYTE PTR [eax]
c001b1e4:	83 e8 41             	sub    eax,0x41
c001b1e7:	88 c2                	mov    dl,al
c001b1e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ed:	88 10                	mov    BYTE PTR [eax],dl
c001b1ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f3:	8a 00                	mov    al,BYTE PTR [eax]
c001b1f5:	0f be c0             	movsx  eax,al
c001b1f8:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001b1ff:	83 c0 30             	add    eax,0x30
c001b202:	88 c2                	mov    dl,al
c001b204:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b208:	88 10                	mov    BYTE PTR [eax],dl
c001b20a:	66 90                	xchg   ax,ax
c001b20c:	90                   	nop
c001b20d:	c3                   	ret    
c001b20e:	66 90                	xchg   ax,ax

c001b210 <FAT::open(char const*, void**, FileOpenMode)>:
c001b210:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b216:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b21e:	74 0c                	je     c001b22c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b220:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b228:	75 0e                	jne    c001b238 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b22a:	66 90                	xchg   ax,ax
c001b22c:	b8 04 00 00 00       	mov    eax,0x4
c001b231:	e9 06 01 00 00       	jmp    c001b33c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b236:	66 90                	xchg   ax,ax
c001b238:	83 ec 08             	sub    esp,0x8
c001b23b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b242:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b246:	50                   	push   eax
c001b247:	e8 f4 54 fe ff       	call   c0000740 <strcpy>
c001b24c:	83 c4 10             	add    esp,0x10
c001b24f:	83 ec 08             	sub    esp,0x8
c001b252:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b256:	50                   	push   eax
c001b257:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b25e:	e8 71 ff ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b26e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b275:	83 e0 01             	and    eax,0x1
c001b278:	74 0a                	je     c001b284 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b27a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b282:	66 90                	xchg   ax,ax
c001b284:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b28b:	83 e0 04             	and    eax,0x4
c001b28e:	74 10                	je     c001b2a0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b290:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b298:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2a7:	83 e0 02             	and    eax,0x2
c001b2aa:	74 08                	je     c001b2b4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b2ac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2bb:	83 e0 08             	and    eax,0x8
c001b2be:	74 08                	je     c001b2c8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b2c0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b2c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2cf:	83 e0 10             	and    eax,0x10
c001b2d2:	74 08                	je     c001b2dc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2d4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2dc:	83 ec 0c             	sub    esp,0xc
c001b2df:	68 50 02 00 00       	push   0x250
c001b2e4:	e8 da e6 fe ff       	call   c00099c3 <malloc>
c001b2e9:	83 c4 10             	add    esp,0x10
c001b2ec:	89 c2                	mov    edx,eax
c001b2ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2f5:	89 10                	mov    DWORD PTR [eax],edx
c001b2f7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b2ff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b306:	8b 00                	mov    eax,DWORD PTR [eax]
c001b308:	83 ec 04             	sub    esp,0x4
c001b30b:	52                   	push   edx
c001b30c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b310:	52                   	push   edx
c001b311:	50                   	push   eax
c001b312:	e8 74 9b fe ff       	call   c0004e8b <f_open>
c001b317:	83 c4 10             	add    esp,0x10
c001b31a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b321:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b329:	74 09                	je     c001b334 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b32b:	b8 01 00 00 00       	mov    eax,0x1
c001b330:	eb 0a                	jmp    c001b33c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b332:	66 90                	xchg   ax,ax
c001b334:	b8 00 00 00 00       	mov    eax,0x0
c001b339:	8d 76 00             	lea    esi,[esi+0x0]
c001b33c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b342:	c3                   	ret    
c001b343:	90                   	nop

c001b344 <FAT::openDir(char const*, void**)>:
c001b344:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b34a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b352:	74 0c                	je     c001b360 <FAT::openDir(char const*, void**)+0x1c>
c001b354:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b35c:	75 0e                	jne    c001b36c <FAT::openDir(char const*, void**)+0x28>
c001b35e:	66 90                	xchg   ax,ax
c001b360:	b8 04 00 00 00       	mov    eax,0x4
c001b365:	e9 82 00 00 00       	jmp    c001b3ec <FAT::openDir(char const*, void**)+0xa8>
c001b36a:	66 90                	xchg   ax,ax
c001b36c:	83 ec 08             	sub    esp,0x8
c001b36f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b376:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b37a:	50                   	push   eax
c001b37b:	e8 c0 53 fe ff       	call   c0000740 <strcpy>
c001b380:	83 c4 10             	add    esp,0x10
c001b383:	83 ec 08             	sub    esp,0x8
c001b386:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b38a:	50                   	push   eax
c001b38b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b392:	e8 3d fe ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	83 ec 0c             	sub    esp,0xc
c001b39d:	6a 4c                	push   0x4c
c001b39f:	e8 1f e6 fe ff       	call   c00099c3 <malloc>
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	89 c2                	mov    edx,eax
c001b3a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3b0:	89 10                	mov    DWORD PTR [eax],edx
c001b3b2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3bb:	83 ec 08             	sub    esp,0x8
c001b3be:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b3c2:	52                   	push   edx
c001b3c3:	50                   	push   eax
c001b3c4:	e8 fa aa fe ff       	call   c0005ec3 <f_opendir>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3d3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3db:	74 07                	je     c001b3e4 <FAT::openDir(char const*, void**)+0xa0>
c001b3dd:	b8 01 00 00 00       	mov    eax,0x1
c001b3e2:	eb 08                	jmp    c001b3ec <FAT::openDir(char const*, void**)+0xa8>
c001b3e4:	b8 00 00 00 00       	mov    eax,0x0
c001b3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3f2:	c3                   	ret    
c001b3f3:	90                   	nop

c001b3f4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3fa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b402:	75 0c                	jne    c001b410 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b404:	b8 04 00 00 00       	mov    eax,0x4
c001b409:	e9 d2 00 00 00       	jmp    c001b4e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b40e:	66 90                	xchg   ax,ax
c001b410:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b418:	75 0a                	jne    c001b424 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b41a:	b8 04 00 00 00       	mov    eax,0x4
c001b41f:	e9 bc 00 00 00       	jmp    c001b4e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b424:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b42c:	75 0a                	jne    c001b438 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b42e:	b8 04 00 00 00       	mov    eax,0x4
c001b433:	e9 a8 00 00 00       	jmp    c001b4e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b438:	83 ec 08             	sub    esp,0x8
c001b43b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b442:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b449:	50                   	push   eax
c001b44a:	e8 f1 52 fe ff       	call   c0000740 <strcpy>
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	83 ec 08             	sub    esp,0x8
c001b455:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b45c:	50                   	push   eax
c001b45d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b464:	e8 6b fd ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b469:	83 c4 10             	add    esp,0x10
c001b46c:	83 ec 08             	sub    esp,0x8
c001b46f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b473:	50                   	push   eax
c001b474:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b47b:	50                   	push   eax
c001b47c:	e8 01 ac fe ff       	call   c0006082 <f_stat>
c001b481:	83 c4 10             	add    esp,0x10
c001b484:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b48b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b492:	85 c0                	test   eax,eax
c001b494:	74 0a                	je     c001b4a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b496:	83 f8 04             	cmp    eax,0x4
c001b499:	74 35                	je     c001b4d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b49b:	eb 3b                	jmp    c001b4d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b49d:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4a4:	0f b6 c0             	movzx  eax,al
c001b4a7:	83 e0 10             	and    eax,0x10
c001b4aa:	0f 95 c2             	setne  dl
c001b4ad:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b4b4:	88 10                	mov    BYTE PTR [eax],dl
c001b4b6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b4b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4bd:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b4c4:	89 01                	mov    DWORD PTR [ecx],eax
c001b4c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4c9:	b8 00 00 00 00       	mov    eax,0x0
c001b4ce:	eb 10                	jmp    c001b4e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4d0:	b8 02 00 00 00       	mov    eax,0x2
c001b4d5:	eb 09                	jmp    c001b4e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4d7:	90                   	nop
c001b4d8:	b8 01 00 00 00       	mov    eax,0x1
c001b4dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b4e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4e6:	c3                   	ret    
c001b4e7:	90                   	nop

c001b4e8 <FAT::unlink(char const*)>:
c001b4e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4f6:	75 08                	jne    c001b500 <FAT::unlink(char const*)+0x18>
c001b4f8:	b8 04 00 00 00       	mov    eax,0x4
c001b4fd:	eb 61                	jmp    c001b560 <FAT::unlink(char const*)+0x78>
c001b4ff:	90                   	nop
c001b500:	83 ec 08             	sub    esp,0x8
c001b503:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b50a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b50e:	50                   	push   eax
c001b50f:	e8 2c 52 fe ff       	call   c0000740 <strcpy>
c001b514:	83 c4 10             	add    esp,0x10
c001b517:	83 ec 08             	sub    esp,0x8
c001b51a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b51e:	50                   	push   eax
c001b51f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b526:	e8 a9 fc ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	83 ec 0c             	sub    esp,0xc
c001b531:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b535:	50                   	push   eax
c001b536:	e8 99 ae fe ff       	call   c00063d4 <f_unlink>
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b545:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b54c:	85 c0                	test   eax,eax
c001b54e:	75 08                	jne    c001b558 <FAT::unlink(char const*)+0x70>
c001b550:	b8 00 00 00 00       	mov    eax,0x0
c001b555:	eb 09                	jmp    c001b560 <FAT::unlink(char const*)+0x78>
c001b557:	90                   	nop
c001b558:	b8 01 00 00 00       	mov    eax,0x1
c001b55d:	8d 76 00             	lea    esi,[esi+0x0]
c001b560:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b566:	c3                   	ret    
c001b567:	90                   	nop

c001b568 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b568:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b56e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b575:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b57c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b580:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b584:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b58c:	75 0a                	jne    c001b598 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b58e:	b8 04 00 00 00       	mov    eax,0x4
c001b593:	e9 30 01 00 00       	jmp    c001b6c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b598:	83 ec 08             	sub    esp,0x8
c001b59b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5a6:	50                   	push   eax
c001b5a7:	e8 94 51 fe ff       	call   c0000740 <strcpy>
c001b5ac:	83 c4 10             	add    esp,0x10
c001b5af:	83 ec 08             	sub    esp,0x8
c001b5b2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b5b6:	50                   	push   eax
c001b5b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5be:	e8 11 fc ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b5c3:	83 c4 10             	add    esp,0x10
c001b5c6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5ce:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5db:	83 e0 01             	and    eax,0x1
c001b5de:	74 08                	je     c001b5e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5e0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5ed:	83 e0 02             	and    eax,0x2
c001b5f0:	74 0a                	je     c001b5fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5f2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b5fa:	66 90                	xchg   ax,ax
c001b5fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b601:	83 e0 04             	and    eax,0x4
c001b604:	74 0a                	je     c001b610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b606:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b60e:	66 90                	xchg   ax,ax
c001b610:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b615:	83 e0 08             	and    eax,0x8
c001b618:	74 0a                	je     c001b624 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b61a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b622:	66 90                	xchg   ax,ax
c001b624:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b629:	83 e0 01             	and    eax,0x1
c001b62c:	74 0a                	je     c001b638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b62e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b636:	66 90                	xchg   ax,ax
c001b638:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b63d:	83 e0 02             	and    eax,0x2
c001b640:	74 0a                	je     c001b64c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b642:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b64a:	66 90                	xchg   ax,ax
c001b64c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b651:	83 e0 04             	and    eax,0x4
c001b654:	74 0a                	je     c001b660 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b656:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b65e:	66 90                	xchg   ax,ax
c001b660:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b665:	83 e0 08             	and    eax,0x8
c001b668:	74 0a                	je     c001b674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b66a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b672:	66 90                	xchg   ax,ax
c001b674:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b67b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b682:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b68a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b692:	83 ec 04             	sub    esp,0x4
c001b695:	52                   	push   edx
c001b696:	50                   	push   eax
c001b697:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b69b:	50                   	push   eax
c001b69c:	e8 d5 b3 fe ff       	call   c0006a76 <f_chmod>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b6ab:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b6b2:	85 c0                	test   eax,eax
c001b6b4:	75 0a                	jne    c001b6c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b6b6:	b8 00 00 00 00       	mov    eax,0x0
c001b6bb:	eb 0b                	jmp    c001b6c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c0:	b8 01 00 00 00       	mov    eax,0x1
c001b6c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6ce:	c3                   	ret    
c001b6cf:	90                   	nop

c001b6d0 <FAT::rename(char const*, char const*)>:
c001b6d0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6d6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6de:	74 0c                	je     c001b6ec <FAT::rename(char const*, char const*)+0x1c>
c001b6e0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6e8:	75 0e                	jne    c001b6f8 <FAT::rename(char const*, char const*)+0x28>
c001b6ea:	66 90                	xchg   ax,ax
c001b6ec:	b8 04 00 00 00       	mov    eax,0x4
c001b6f1:	e9 9e 00 00 00       	jmp    c001b794 <FAT::rename(char const*, char const*)+0xc4>
c001b6f6:	66 90                	xchg   ax,ax
c001b6f8:	83 ec 08             	sub    esp,0x8
c001b6fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b702:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b709:	50                   	push   eax
c001b70a:	e8 31 50 fe ff       	call   c0000740 <strcpy>
c001b70f:	83 c4 10             	add    esp,0x10
c001b712:	83 ec 08             	sub    esp,0x8
c001b715:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b71c:	50                   	push   eax
c001b71d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b724:	e8 ab fa ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b729:	83 c4 10             	add    esp,0x10
c001b72c:	83 ec 08             	sub    esp,0x8
c001b72f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b736:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b73a:	50                   	push   eax
c001b73b:	e8 00 50 fe ff       	call   c0000740 <strcpy>
c001b740:	83 c4 10             	add    esp,0x10
c001b743:	83 ec 08             	sub    esp,0x8
c001b746:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b74a:	50                   	push   eax
c001b74b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b752:	e8 7d fa ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	83 ec 08             	sub    esp,0x8
c001b75d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b761:	50                   	push   eax
c001b762:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b769:	50                   	push   eax
c001b76a:	e8 14 b0 fe ff       	call   c0006783 <f_rename>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b779:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b780:	85 c0                	test   eax,eax
c001b782:	75 08                	jne    c001b78c <FAT::rename(char const*, char const*)+0xbc>
c001b784:	b8 00 00 00 00       	mov    eax,0x0
c001b789:	eb 09                	jmp    c001b794 <FAT::rename(char const*, char const*)+0xc4>
c001b78b:	90                   	nop
c001b78c:	b8 01 00 00 00       	mov    eax,0x1
c001b791:	8d 76 00             	lea    esi,[esi+0x0]
c001b794:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b79a:	c3                   	ret    
c001b79b:	90                   	nop

c001b79c <FAT::mkdir(char const*)>:
c001b79c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7aa:	75 08                	jne    c001b7b4 <FAT::mkdir(char const*)+0x18>
c001b7ac:	b8 04 00 00 00       	mov    eax,0x4
c001b7b1:	eb 61                	jmp    c001b814 <FAT::mkdir(char const*)+0x78>
c001b7b3:	90                   	nop
c001b7b4:	83 ec 08             	sub    esp,0x8
c001b7b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7be:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7c2:	50                   	push   eax
c001b7c3:	e8 78 4f fe ff       	call   c0000740 <strcpy>
c001b7c8:	83 c4 10             	add    esp,0x10
c001b7cb:	83 ec 08             	sub    esp,0x8
c001b7ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7d2:	50                   	push   eax
c001b7d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7da:	e8 f5 f9 ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	83 ec 0c             	sub    esp,0xc
c001b7e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7e9:	50                   	push   eax
c001b7ea:	e8 68 ad fe ff       	call   c0006557 <f_mkdir>
c001b7ef:	83 c4 10             	add    esp,0x10
c001b7f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b7f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b800:	85 c0                	test   eax,eax
c001b802:	75 08                	jne    c001b80c <FAT::mkdir(char const*)+0x70>
c001b804:	b8 00 00 00 00       	mov    eax,0x0
c001b809:	eb 09                	jmp    c001b814 <FAT::mkdir(char const*)+0x78>
c001b80b:	90                   	nop
c001b80c:	b8 01 00 00 00       	mov    eax,0x1
c001b811:	8d 76 00             	lea    esi,[esi+0x0]
c001b814:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b81a:	c3                   	ret    
c001b81b:	90                   	nop

c001b81c <FAT::exists(char const*)>:
c001b81c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b822:	83 ec 08             	sub    esp,0x8
c001b825:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b82c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b830:	50                   	push   eax
c001b831:	e8 0a 4f fe ff       	call   c0000740 <strcpy>
c001b836:	83 c4 10             	add    esp,0x10
c001b839:	83 ec 08             	sub    esp,0x8
c001b83c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b840:	50                   	push   eax
c001b841:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b848:	e8 87 f9 ff ff       	call   c001b1d4 <FAT::fixFilepath(char*)>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	83 ec 08             	sub    esp,0x8
c001b853:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b85a:	50                   	push   eax
c001b85b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b85f:	50                   	push   eax
c001b860:	e8 1d a8 fe ff       	call   c0006082 <f_stat>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b86f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b876:	85 c0                	test   eax,eax
c001b878:	75 06                	jne    c001b880 <FAT::exists(char const*)+0x64>
c001b87a:	b0 01                	mov    al,0x1
c001b87c:	eb 06                	jmp    c001b884 <FAT::exists(char const*)+0x68>
c001b87e:	66 90                	xchg   ax,ax
c001b880:	b0 00                	mov    al,0x0
c001b882:	66 90                	xchg   ax,ax
c001b884:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b88a:	c3                   	ret    
c001b88b:	90                   	nop

c001b88c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b88c:	b8 08 00 00 00       	mov    eax,0x8
c001b891:	c3                   	ret    

c001b892 <ISO9660::seek(void*, unsigned long long)>:
c001b892:	53                   	push   ebx
c001b893:	b8 04 00 00 00       	mov    eax,0x4
c001b898:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b89c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8a4:	85 d2                	test   edx,edx
c001b8a6:	74 17                	je     c001b8bf <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8a8:	89 c8                	mov    eax,ecx
c001b8aa:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b8ad:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b8b0:	b8 01 00 00 00       	mov    eax,0x1
c001b8b5:	73 08                	jae    c001b8bf <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8b7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b8ba:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b8bd:	31 c0                	xor    eax,eax
c001b8bf:	5b                   	pop    ebx
c001b8c0:	c3                   	ret    
c001b8c1:	90                   	nop

c001b8c2 <ISO9660::tell(void*, unsigned long long*)>:
c001b8c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8ca:	85 d2                	test   edx,edx
c001b8cc:	74 12                	je     c001b8e0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8ce:	85 c0                	test   eax,eax
c001b8d0:	74 0e                	je     c001b8e0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8d2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8d5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8d8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8db:	89 10                	mov    DWORD PTR [eax],edx
c001b8dd:	31 c0                	xor    eax,eax
c001b8df:	c3                   	ret    
c001b8e0:	b8 04 00 00 00       	mov    eax,0x4
c001b8e5:	c3                   	ret    

c001b8e6 <ISO9660::getName()>:
c001b8e6:	b8 6c 4b 02 c0       	mov    eax,0xc0024b6c
c001b8eb:	c3                   	ret    

c001b8ec <ISO9660::stat(void*, unsigned long long*)>:
c001b8ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f4:	85 d2                	test   edx,edx
c001b8f6:	74 12                	je     c001b90a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8f8:	85 c0                	test   eax,eax
c001b8fa:	74 0e                	je     c001b90a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8fc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b8ff:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b902:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b905:	89 10                	mov    DWORD PTR [eax],edx
c001b907:	31 c0                	xor    eax,eax
c001b909:	c3                   	ret    
c001b90a:	b8 04 00 00 00       	mov    eax,0x4
c001b90f:	c3                   	ret    

c001b910 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b910:	b8 01 00 00 00       	mov    eax,0x1
c001b915:	c3                   	ret    

c001b916 <ISO9660::unlink(char const*)>:
c001b916:	b8 01 00 00 00       	mov    eax,0x1
c001b91b:	c3                   	ret    

c001b91c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b91c:	b8 01 00 00 00       	mov    eax,0x1
c001b921:	c3                   	ret    

c001b922 <ISO9660::rename(char const*, char const*)>:
c001b922:	b8 01 00 00 00       	mov    eax,0x1
c001b927:	c3                   	ret    

c001b928 <ISO9660::mkdir(char const*)>:
c001b928:	b8 01 00 00 00       	mov    eax,0x1
c001b92d:	c3                   	ret    

c001b92e <ISO9660::close(void*)>:
c001b92e:	83 ec 0c             	sub    esp,0xc
c001b931:	b8 04 00 00 00       	mov    eax,0x4
c001b936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b93a:	85 d2                	test   edx,edx
c001b93c:	74 0e                	je     c001b94c <ISO9660::close(void*)+0x1e>
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	52                   	push   edx
c001b942:	e8 8c e0 fe ff       	call   c00099d3 <free>
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	31 c0                	xor    eax,eax
c001b94c:	83 c4 0c             	add    esp,0xc
c001b94f:	c3                   	ret    

c001b950 <ISO9660::closeDir(void*)>:
c001b950:	83 ec 0c             	sub    esp,0xc
c001b953:	b8 04 00 00 00       	mov    eax,0x4
c001b958:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b95c:	85 d2                	test   edx,edx
c001b95e:	74 0e                	je     c001b96e <ISO9660::closeDir(void*)+0x1e>
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	52                   	push   edx
c001b964:	e8 6a e0 fe ff       	call   c00099d3 <free>
c001b969:	83 c4 10             	add    esp,0x10
c001b96c:	31 c0                	xor    eax,eax
c001b96e:	83 c4 0c             	add    esp,0xc
c001b971:	c3                   	ret    

c001b972 <ISO9660::~ISO9660()>:
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	ba 90 4b 02 c0       	mov    edx,0xc0024b90
c001b97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97e:	89 10                	mov    DWORD PTR [eax],edx
c001b980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b984:	83 ec 0c             	sub    esp,0xc
c001b987:	50                   	push   eax
c001b988:	e8 15 14 ff ff       	call   c000cda2 <Filesystem::~Filesystem()>
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	90                   	nop
c001b991:	83 c4 0c             	add    esp,0xc
c001b994:	c3                   	ret    
c001b995:	90                   	nop

c001b996 <ISO9660::~ISO9660()>:
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	83 ec 0c             	sub    esp,0xc
c001b99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a0:	e8 cd ff ff ff       	call   c001b972 <ISO9660::~ISO9660()>
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	83 ec 08             	sub    esp,0x8
c001b9ab:	6a 08                	push   0x8
c001b9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b1:	e8 d0 0f ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c001b9b6:	83 c4 10             	add    esp,0x10
c001b9b9:	83 c4 0c             	add    esp,0xc
c001b9bc:	c3                   	ret    

c001b9bd <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b9bd:	55                   	push   ebp
c001b9be:	31 c9                	xor    ecx,ecx
c001b9c0:	57                   	push   edi
c001b9c1:	56                   	push   esi
c001b9c2:	53                   	push   ebx
c001b9c3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b9c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9cb:	89 eb                	mov    ebx,ebp
c001b9cd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9d1:	39 ce                	cmp    esi,ecx
c001b9d3:	7e 17                	jle    c001b9ec <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9d5:	31 d2                	xor    edx,edx
c001b9d7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9db:	7d 13                	jge    c001b9f0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9e1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9e4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9e7:	75 0d                	jne    c001b9f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9e9:	42                   	inc    edx
c001b9ea:	eb eb                	jmp    c001b9d7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9ec:	31 c0                	xor    eax,eax
c001b9ee:	eb 0a                	jmp    c001b9fa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9f0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b9f4:	eb 04                	jmp    c001b9fa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9f6:	41                   	inc    ecx
c001b9f7:	43                   	inc    ebx
c001b9f8:	eb d7                	jmp    c001b9d1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b9fa:	5b                   	pop    ebx
c001b9fb:	5e                   	pop    esi
c001b9fc:	5f                   	pop    edi
c001b9fd:	5d                   	pop    ebp
c001b9fe:	c3                   	ret    

c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b9ff:	57                   	push   edi
c001ba00:	56                   	push   esi
c001ba01:	53                   	push   ebx
c001ba02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba0a:	39 0d c0 7a 02 c0    	cmp    DWORD PTR ds:0xc0027ac0,ecx
c001ba10:	75 08                	jne    c001ba1a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba12:	38 05 f4 5d 02 c0    	cmp    BYTE PTR ds:0xc0025df4,al
c001ba18:	74 2b                	je     c001ba45 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba1a:	83 ec 0c             	sub    esp,0xc
c001ba1d:	a2 f4 5d 02 c0       	mov    ds:0xc0025df4,al
c001ba22:	68 e0 7a 02 c0       	push   0xc0027ae0
c001ba27:	0f be c0             	movsx  eax,al
c001ba2a:	6a 01                	push   0x1
c001ba2c:	89 0d c0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ac0,ecx
c001ba32:	31 db                	xor    ebx,ebx
c001ba34:	53                   	push   ebx
c001ba35:	51                   	push   ecx
c001ba36:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c001ba3d:	e8 42 47 ff ff       	call   c0010184 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba42:	83 c4 20             	add    esp,0x20
c001ba45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba49:	be e0 7a 02 c0       	mov    esi,0xc0027ae0
c001ba4e:	b9 00 08 00 00       	mov    ecx,0x800
c001ba53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba55:	5b                   	pop    ebx
c001ba56:	5e                   	pop    esi
c001ba57:	5f                   	pop    edi
c001ba58:	c3                   	ret    
c001ba59:	90                   	nop

c001ba5a <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba5a:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba60:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba67:	83 c0 41             	add    eax,0x41
c001ba6a:	0f be c0             	movsx  eax,al
c001ba6d:	50                   	push   eax
c001ba6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba72:	50                   	push   eax
c001ba73:	6a 10                	push   0x10
c001ba75:	e8 85 ff ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba7a:	83 c4 10             	add    esp,0x10
c001ba7d:	31 c0                	xor    eax,eax
c001ba7f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba84:	75 1d                	jne    c001baa3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba86:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba8b:	75 16                	jne    c001baa3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba8d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba92:	75 0f                	jne    c001baa3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba94:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba99:	75 08                	jne    c001baa3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba9b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001baa0:	0f 94 c0             	sete   al
c001baa3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001baa9:	c3                   	ret    

c001baaa <ISO9660::read(void*, unsigned long, void*, int*)>:
c001baaa:	55                   	push   ebp
c001baab:	57                   	push   edi
c001baac:	56                   	push   esi
c001baad:	53                   	push   ebx
c001baae:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bab4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001babb:	85 ed                	test   ebp,ebp
c001babd:	0f 84 da 01 00 00    	je     c001bc9d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bac3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bacb:	0f 84 cc 01 00 00    	je     c001bc9d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bad1:	b8 01 00 00 00       	mov    eax,0x1
c001bad6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bada:	0f 85 c2 01 00 00    	jne    c001bca2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bae0:	31 d2                	xor    edx,edx
c001bae2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bae9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001baec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001baef:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001baf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001baf5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001baf9:	01 c8                	add    eax,ecx
c001bafb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bafe:	11 da                	adc    edx,ebx
c001bb00:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb04:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb08:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb0c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb10:	19 d7                	sbb    edi,edx
c001bb12:	72 11                	jb     c001bb25 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb23:	eb 0c                	jmp    c001bb31 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb2d:	29 ce                	sub    esi,ecx
c001bb2f:	19 df                	sbb    edi,ebx
c001bb31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb34:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb37:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb3b:	c1 e0 0b             	shl    eax,0xb
c001bb3e:	01 c8                	add    eax,ecx
c001bb40:	11 da                	adc    edx,ebx
c001bb42:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb49:	51                   	push   ecx
c001bb4a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb4e:	50                   	push   eax
c001bb4f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb53:	53                   	push   ebx
c001bb54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb5c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb60:	50                   	push   eax
c001bb61:	e8 99 fe ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb66:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb69:	b8 00 08 00 00       	mov    eax,0x800
c001bb6e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb74:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb78:	29 d0                	sub    eax,edx
c001bb7a:	83 c4 10             	add    esp,0x10
c001bb7d:	89 f9                	mov    ecx,edi
c001bb7f:	39 c6                	cmp    esi,eax
c001bb81:	83 d9 00             	sbb    ecx,0x0
c001bb84:	7d 1b                	jge    c001bba1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb86:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb8b:	75 12                	jne    c001bb9f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb8d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb9a:	e9 fa 00 00 00       	jmp    c001bc99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bb9f:	89 f0                	mov    eax,esi
c001bba1:	01 d3                	add    ebx,edx
c001bba3:	31 d2                	xor    edx,edx
c001bba5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bba9:	39 c2                	cmp    edx,eax
c001bbab:	7d 14                	jge    c001bbc1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bbad:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bbb4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bbb8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bbbb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bbbe:	42                   	inc    edx
c001bbbf:	eb e8                	jmp    c001bba9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bbc1:	89 c2                	mov    edx,eax
c001bbc3:	85 c0                	test   eax,eax
c001bbc5:	79 02                	jns    c001bbc9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	01 c2                	add    edx,eax
c001bbcb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bbce:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bbd5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbd9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbdd:	99                   	cdq    
c001bbde:	01 c1                	add    ecx,eax
c001bbe0:	11 d3                	adc    ebx,edx
c001bbe2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bbe6:	29 c6                	sub    esi,eax
c001bbe8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbec:	19 d7                	sbb    edi,edx
c001bbee:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbf1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bbf5:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bbfa:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bbfd:	b8 00 00 00 00       	mov    eax,0x0
c001bc02:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc06:	7d 43                	jge    c001bc4b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc08:	52                   	push   edx
c001bc09:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc0d:	50                   	push   eax
c001bc0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc1a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc1e:	50                   	push   eax
c001bc1f:	e8 db fd ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc24:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc2c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc31:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc39:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc41:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc46:	83 c4 10             	add    esp,0x10
c001bc49:	eb aa                	jmp    c001bbf5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc4f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc52:	74 2a                	je     c001bc7e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc54:	50                   	push   eax
c001bc55:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc59:	50                   	push   eax
c001bc5a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc5e:	56                   	push   esi
c001bc5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc67:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc6b:	51                   	push   ecx
c001bc6c:	e8 8e fd ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc71:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc8d:	89 18                	mov    DWORD PTR [eax],ebx
c001bc8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc93:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc96:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc99:	31 c0                	xor    eax,eax
c001bc9b:	eb 05                	jmp    c001bca2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bc9d:	b8 04 00 00 00       	mov    eax,0x4
c001bca2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bca8:	5b                   	pop    ebx
c001bca9:	5e                   	pop    esi
c001bcaa:	5f                   	pop    edi
c001bcab:	5d                   	pop    ebp
c001bcac:	c3                   	ret    
c001bcad:	90                   	nop

c001bcae <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bcae:	55                   	push   ebp
c001bcaf:	57                   	push   edi
c001bcb0:	56                   	push   esi
c001bcb1:	53                   	push   ebx
c001bcb2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bcb8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bcbf:	85 ed                	test   ebp,ebp
c001bcc1:	0f 84 51 02 00 00    	je     c001bf18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcc7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bccf:	0f 84 43 02 00 00    	je     c001bf18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcd8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bcdb:	75 0a                	jne    c001bce7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bcdd:	b8 07 00 00 00       	mov    eax,0x7
c001bce2:	e9 36 02 00 00       	jmp    c001bf1d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bce7:	50                   	push   eax
c001bce8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcec:	50                   	push   eax
c001bced:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcf4:	53                   	push   ebx
c001bcf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bcf8:	c1 e0 0b             	shl    eax,0xb
c001bcfb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bcfe:	c1 e8 0b             	shr    eax,0xb
c001bd01:	50                   	push   eax
c001bd02:	e8 f8 fc ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd07:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	89 c1                	mov    ecx,eax
c001bd0f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd12:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd18:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd1b:	84 db                	test   bl,bl
c001bd1d:	0f 85 8b 00 00 00    	jne    c001bdae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd23:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd29:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd2c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd32:	29 c6                	sub    esi,eax
c001bd34:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd38:	89 f3                	mov    ebx,esi
c001bd3a:	89 f1                	mov    ecx,esi
c001bd3c:	c1 fb 1f             	sar    ebx,0x1f
c001bd3f:	01 f0                	add    eax,esi
c001bd41:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd44:	11 da                	adc    edx,ebx
c001bd46:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd4d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd50:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd53:	89 d8                	mov    eax,ebx
c001bd55:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd59:	ba 00 00 00 00       	mov    edx,0x0
c001bd5e:	19 f8                	sbb    eax,edi
c001bd60:	b8 00 00 00 00       	mov    eax,0x0
c001bd65:	73 08                	jae    c001bd6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd67:	89 f0                	mov    eax,esi
c001bd69:	89 fa                	mov    edx,edi
c001bd6b:	29 c8                	sub    eax,ecx
c001bd6d:	19 da                	sbb    edx,ebx
c001bd6f:	89 d7                	mov    edi,edx
c001bd71:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd74:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd77:	09 c7                	or     edi,eax
c001bd79:	0f 84 5e ff ff ff    	je     c001bcdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd7f:	57                   	push   edi
c001bd80:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd84:	50                   	push   eax
c001bd85:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd8c:	53                   	push   ebx
c001bd8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd90:	c1 e0 0b             	shl    eax,0xb
c001bd93:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd97:	c1 e8 0b             	shr    eax,0xb
c001bd9a:	50                   	push   eax
c001bd9b:	e8 5f fc ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bda0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bda3:	83 c4 10             	add    esp,0x10
c001bda6:	25 ff 07 00 00       	and    eax,0x7ff
c001bdab:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bdae:	31 ff                	xor    edi,edi
c001bdb0:	56                   	push   esi
c001bdb1:	6a 28                	push   0x28
c001bdb3:	6a 00                	push   0x0
c001bdb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdb9:	50                   	push   eax
c001bdba:	e8 c5 48 fe ff       	call   c0000684 <memset>
c001bdbf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdc2:	25 ff 07 00 00       	and    eax,0x7ff
c001bdc7:	89 c6                	mov    esi,eax
c001bdc9:	83 c6 21             	add    esi,0x21
c001bdcc:	83 d7 00             	adc    edi,0x0
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	31 c9                	xor    ecx,ecx
c001bdd4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bddb:	83 f9 28             	cmp    ecx,0x28
c001bdde:	88 04 24             	mov    BYTE PTR [esp],al
c001bde1:	0f 94 c2             	sete   dl
c001bde4:	88 d0                	mov    al,dl
c001bde6:	ba ff 07 00 00       	mov    edx,0x7ff
c001bdeb:	39 f2                	cmp    edx,esi
c001bded:	ba 00 00 00 00       	mov    edx,0x0
c001bdf2:	19 fa                	sbb    edx,edi
c001bdf4:	0f 92 c2             	setb   dl
c001bdf7:	09 c2                	or     edx,eax
c001bdf9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bdfd:	0f 94 c0             	sete   al
c001be00:	08 d0                	or     al,dl
c001be02:	75 16                	jne    c001be1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be04:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be08:	74 10                	je     c001be1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be0a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be0d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be11:	41                   	inc    ecx
c001be12:	83 c6 01             	add    esi,0x1
c001be15:	83 d7 00             	adc    edi,0x0
c001be18:	eb ba                	jmp    c001bdd4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be1a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be21:	83 ec 0c             	sub    esp,0xc
c001be24:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be28:	56                   	push   esi
c001be29:	e8 72 48 fe ff       	call   c00006a0 <strlen>
c001be2e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be35:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be39:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be41:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be44:	5a                   	pop    edx
c001be45:	25 ff 07 00 00       	and    eax,0x7ff
c001be4a:	59                   	pop    ecx
c001be4b:	01 f8                	add    eax,edi
c001be4d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be53:	83 e0 02             	and    eax,0x2
c001be56:	3c 01                	cmp    al,0x1
c001be58:	19 c0                	sbb    eax,eax
c001be5a:	83 c0 02             	add    eax,0x2
c001be5d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be61:	56                   	push   esi
c001be62:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be66:	50                   	push   eax
c001be67:	e8 d4 48 fe ff       	call   c0000740 <strcpy>
c001be6c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be70:	83 c4 10             	add    esp,0x10
c001be73:	84 c0                	test   al,al
c001be75:	75 21                	jne    c001be98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be77:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be7f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be87:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be8f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be96:	eb 28                	jmp    c001bec0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be98:	fe c8                	dec    al
c001be9a:	75 24                	jne    c001bec0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be9c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bea4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001beac:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001beb4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bebb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bec0:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bec4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001becb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bed2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bed4:	0f b6 f3             	movzx  esi,bl
c001bed7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bede:	31 db                	xor    ebx,ebx
c001bee0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bee6:	89 df                	mov    edi,ebx
c001bee8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001beeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beee:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bef1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bef4:	39 c6                	cmp    esi,eax
c001bef6:	19 d7                	sbb    edi,edx
c001bef8:	72 10                	jb     c001bf0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001befa:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf01:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf08:	eb 0a                	jmp    c001bf14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf0a:	29 f0                	sub    eax,esi
c001bf0c:	19 da                	sbb    edx,ebx
c001bf0e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf11:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf14:	31 c0                	xor    eax,eax
c001bf16:	eb 05                	jmp    c001bf1d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf18:	b8 04 00 00 00       	mov    eax,0x4
c001bf1d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf23:	5b                   	pop    ebx
c001bf24:	5e                   	pop    esi
c001bf25:	5f                   	pop    edi
c001bf26:	5d                   	pop    ebp
c001bf27:	c3                   	ret    

c001bf28 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf28:	57                   	push   edi
c001bf29:	56                   	push   esi
c001bf2a:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf30:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf38:	50                   	push   eax
c001bf39:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf3d:	50                   	push   eax
c001bf3e:	6a 10                	push   0x10
c001bf40:	e8 ba fa ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf45:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf4c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf50:	b9 22 00 00 00       	mov    ecx,0x22
c001bf55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf57:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf62:	89 10                	mov    DWORD PTR [eax],edx
c001bf64:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf6f:	89 10                	mov    DWORD PTR [eax],edx
c001bf71:	81 c4 44 08 00 00    	add    esp,0x844
c001bf77:	b0 01                	mov    al,0x1
c001bf79:	5e                   	pop    esi
c001bf7a:	5f                   	pop    edi
c001bf7b:	c3                   	ret    

c001bf7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf7c:	55                   	push   ebp
c001bf7d:	57                   	push   edi
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf86:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf8d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf98:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bf9c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bfa4:	75 03                	jne    c001bfa9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfa6:	83 c3 02             	add    ebx,0x2
c001bfa9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bfac:	75 03                	jne    c001bfb1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bfae:	43                   	inc    ebx
c001bfaf:	eb f8                	jmp    c001bfa9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfb1:	51                   	push   ecx
c001bfb2:	68 00 01 00 00       	push   0x100
c001bfb7:	6a 00                	push   0x0
c001bfb9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bfbd:	50                   	push   eax
c001bfbe:	e8 c1 46 fe ff       	call   c0000684 <memset>
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	31 d2                	xor    edx,edx
c001bfc8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bfcb:	84 c0                	test   al,al
c001bfcd:	74 21                	je     c001bff0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfcf:	3c 2f                	cmp    al,0x2f
c001bfd1:	75 0b                	jne    c001bfde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bfd3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bfd7:	bd 01 00 00 00       	mov    ebp,0x1
c001bfdc:	eb 14                	jmp    c001bff2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bfde:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfe1:	80 f9 19             	cmp    cl,0x19
c001bfe4:	77 03                	ja     c001bfe9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfe6:	83 e8 20             	sub    eax,0x20
c001bfe9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bfed:	42                   	inc    edx
c001bfee:	eb d8                	jmp    c001bfc8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bff0:	31 ed                	xor    ebp,ebp
c001bff2:	83 ec 0c             	sub    esp,0xc
c001bff5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bffc:	e8 c2 d9 fe ff       	call   c00099c3 <malloc>
c001c001:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c008:	89 c6                	mov    esi,eax
c001c00a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c010:	c1 ef 0b             	shr    edi,0xb
c001c013:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c01a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c01e:	83 c4 10             	add    esp,0x10
c001c021:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c026:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c02a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c031:	74 28                	je     c001c05b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c033:	52                   	push   edx
c001c034:	57                   	push   edi
c001c035:	50                   	push   eax
c001c036:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c03a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c041:	e8 b9 f9 ff ff       	call   c001b9ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c046:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c04a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c051:	05 00 08 00 00       	add    eax,0x800
c001c056:	83 c4 10             	add    esp,0x10
c001c059:	eb cb                	jmp    c001c026 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c05b:	83 ec 0c             	sub    esp,0xc
c001c05e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c062:	57                   	push   edi
c001c063:	e8 38 46 fe ff       	call   c00006a0 <strlen>
c001c068:	50                   	push   eax
c001c069:	57                   	push   edi
c001c06a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c071:	56                   	push   esi
c001c072:	e8 46 f9 ff ff       	call   c001b9bd <__memmem(unsigned char*, int, unsigned char*, int)>
c001c077:	83 c4 20             	add    esp,0x20
c001c07a:	85 c0                	test   eax,eax
c001c07c:	75 13                	jne    c001c091 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c07e:	83 ec 0c             	sub    esp,0xc
c001c081:	56                   	push   esi
c001c082:	e8 4c d9 fe ff       	call   c00099d3 <free>
c001c087:	83 c4 10             	add    esp,0x10
c001c08a:	31 c0                	xor    eax,eax
c001c08c:	e9 b3 00 00 00       	jmp    c001c144 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c091:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c095:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c099:	c1 e7 08             	shl    edi,0x8
c001c09c:	c1 e2 10             	shl    edx,0x10
c001c09f:	09 d7                	or     edi,edx
c001c0a1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c0a5:	09 d7                	or     edi,edx
c001c0a7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c0ab:	c1 e2 18             	shl    edx,0x18
c001c0ae:	09 d7                	or     edi,edx
c001c0b0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c0b4:	89 d1                	mov    ecx,edx
c001c0b6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c0ba:	c1 e1 08             	shl    ecx,0x8
c001c0bd:	c1 e2 10             	shl    edx,0x10
c001c0c0:	09 ca                	or     edx,ecx
c001c0c2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c0c6:	09 ca                	or     edx,ecx
c001c0c8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0cc:	c1 e1 18             	shl    ecx,0x18
c001c0cf:	09 ca                	or     edx,ecx
c001c0d1:	89 e9                	mov    ecx,ebp
c001c0d3:	84 c9                	test   cl,cl
c001c0d5:	74 3c                	je     c001c113 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0db:	83 ec 0c             	sub    esp,0xc
c001c0de:	56                   	push   esi
c001c0df:	e8 ef d8 fe ff       	call   c00099d3 <free>
c001c0e4:	83 c4 0c             	add    esp,0xc
c001c0e7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0ee:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0f3:	50                   	push   eax
c001c0f4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c102:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c106:	52                   	push   edx
c001c107:	57                   	push   edi
c001c108:	53                   	push   ebx
c001c109:	e8 6e fe ff ff       	call   c001bf7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c10e:	83 c4 20             	add    esp,0x20
c001c111:	eb 31                	jmp    c001c144 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c113:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c116:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c11d:	d0 e8                	shr    al,1
c001c11f:	89 3b                	mov    DWORD PTR [ebx],edi
c001c121:	83 e0 01             	and    eax,0x1
c001c124:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c12b:	83 ec 0c             	sub    esp,0xc
c001c12e:	89 13                	mov    DWORD PTR [ebx],edx
c001c130:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c137:	89 03                	mov    DWORD PTR [ebx],eax
c001c139:	56                   	push   esi
c001c13a:	e8 94 d8 fe ff       	call   c00099d3 <free>
c001c13f:	83 c4 10             	add    esp,0x10
c001c142:	b0 01                	mov    al,0x1
c001c144:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c14a:	5b                   	pop    ebx
c001c14b:	5e                   	pop    esi
c001c14c:	5f                   	pop    edi
c001c14d:	5d                   	pop    ebp
c001c14e:	c3                   	ret    

c001c14f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c14f:	55                   	push   ebp
c001c150:	57                   	push   edi
c001c151:	56                   	push   esi
c001c152:	53                   	push   ebx
c001c153:	83 ec 20             	sub    esp,0x20
c001c156:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c15a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c15e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c162:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c16a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c172:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c177:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c17d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c183:	57                   	push   edi
c001c184:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c188:	50                   	push   eax
c001c189:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c18d:	50                   	push   eax
c001c18e:	e8 95 fd ff ff       	call   c001bf28 <readRoot(unsigned int*, unsigned int*, char)>
c001c193:	5a                   	pop    edx
c001c194:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c198:	e8 03 45 fe ff       	call   c00006a0 <strlen>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	83 f8 03             	cmp    eax,0x3
c001c1a3:	77 17                	ja     c001c1bc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c1a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1a9:	89 03                	mov    DWORD PTR [ebx],eax
c001c1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1af:	89 06                	mov    DWORD PTR [esi],eax
c001c1b1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c1b8:	b0 01                	mov    al,0x1
c001c1ba:	eb 19                	jmp    c001c1d5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c1bc:	50                   	push   eax
c001c1bd:	55                   	push   ebp
c001c1be:	57                   	push   edi
c001c1bf:	56                   	push   esi
c001c1c0:	53                   	push   ebx
c001c1c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1cd:	e8 aa fd ff ff       	call   c001bf7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1d2:	83 c4 20             	add    esp,0x20
c001c1d5:	83 c4 1c             	add    esp,0x1c
c001c1d8:	5b                   	pop    ebx
c001c1d9:	5e                   	pop    esi
c001c1da:	5f                   	pop    edi
c001c1db:	5d                   	pop    ebp
c001c1dc:	c3                   	ret    
c001c1dd:	90                   	nop

c001c1de <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1de:	57                   	push   edi
c001c1df:	56                   	push   esi
c001c1e0:	53                   	push   ebx
c001c1e1:	83 ec 10             	sub    esp,0x10
c001c1e4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1ec:	85 ff                	test   edi,edi
c001c1ee:	0f 84 8b 00 00 00    	je     c001c27f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1f4:	85 f6                	test   esi,esi
c001c1f6:	0f 84 83 00 00 00    	je     c001c27f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1fc:	b8 03 00 00 00       	mov    eax,0x3
c001c201:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c206:	75 7c                	jne    c001c284 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c208:	83 ec 0c             	sub    esp,0xc
c001c20b:	6a 1c                	push   0x1c
c001c20d:	e8 b1 d7 fe ff       	call   c00099c3 <malloc>
c001c212:	89 07                	mov    DWORD PTR [edi],eax
c001c214:	89 c3                	mov    ebx,eax
c001c216:	58                   	pop    eax
c001c217:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c21b:	50                   	push   eax
c001c21c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c21f:	50                   	push   eax
c001c220:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c224:	50                   	push   eax
c001c225:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c229:	50                   	push   eax
c001c22a:	56                   	push   esi
c001c22b:	e8 1f ff ff ff       	call   c001c14f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c230:	83 c4 20             	add    esp,0x20
c001c233:	84 c0                	test   al,al
c001c235:	74 07                	je     c001c23e <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c237:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c23c:	74 0b                	je     c001c249 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c23e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c242:	b8 01 00 00 00       	mov    eax,0x1
c001c247:	eb 3b                	jmp    c001c284 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c24d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c251:	89 03                	mov    DWORD PTR [ebx],eax
c001c253:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c25a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c25e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c265:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c26c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c26f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c276:	8a 06                	mov    al,BYTE PTR [esi]
c001c278:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c27b:	31 c0                	xor    eax,eax
c001c27d:	eb 05                	jmp    c001c284 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c27f:	b8 04 00 00 00       	mov    eax,0x4
c001c284:	83 c4 10             	add    esp,0x10
c001c287:	5b                   	pop    ebx
c001c288:	5e                   	pop    esi
c001c289:	5f                   	pop    edi
c001c28a:	c3                   	ret    
c001c28b:	90                   	nop

c001c28c <ISO9660::exists(char const*)>:
c001c28c:	83 ec 28             	sub    esp,0x28
c001c28f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c293:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c297:	52                   	push   edx
c001c298:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c29b:	52                   	push   edx
c001c29c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2a0:	52                   	push   edx
c001c2a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2a5:	52                   	push   edx
c001c2a6:	50                   	push   eax
c001c2a7:	e8 a3 fe ff ff       	call   c001c14f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2ac:	83 c4 3c             	add    esp,0x3c
c001c2af:	c3                   	ret    

c001c2b0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c2b0:	56                   	push   esi
c001c2b1:	53                   	push   ebx
c001c2b2:	83 ec 14             	sub    esp,0x14
c001c2b5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c2b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2bd:	85 db                	test   ebx,ebx
c001c2bf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c2c3:	0f 94 c2             	sete   dl
c001c2c6:	85 f6                	test   esi,esi
c001c2c8:	0f 94 c0             	sete   al
c001c2cb:	08 c2                	or     dl,al
c001c2cd:	75 68                	jne    c001c337 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2cf:	85 c9                	test   ecx,ecx
c001c2d1:	74 64                	je     c001c337 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2d3:	83 ec 0c             	sub    esp,0xc
c001c2d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2dd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2ea:	50                   	push   eax
c001c2eb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2ee:	50                   	push   eax
c001c2ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2f3:	50                   	push   eax
c001c2f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2f8:	50                   	push   eax
c001c2f9:	51                   	push   ecx
c001c2fa:	e8 50 fe ff ff       	call   c001c14f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2ff:	83 c4 20             	add    esp,0x20
c001c302:	ba 01 00 00 00       	mov    edx,0x1
c001c307:	84 c0                	test   al,al
c001c309:	74 31                	je     c001c33c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c30b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c30f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c316:	89 03                	mov    DWORD PTR [ebx],eax
c001c318:	ba 00 00 00 00       	mov    edx,0x0
c001c31d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c321:	85 c0                	test   eax,eax
c001c323:	0f 95 06             	setne  BYTE PTR [esi]
c001c326:	74 14                	je     c001c33c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c328:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c32e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c335:	eb 05                	jmp    c001c33c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c337:	ba 04 00 00 00       	mov    edx,0x4
c001c33c:	83 c4 14             	add    esp,0x14
c001c33f:	89 d0                	mov    eax,edx
c001c341:	5b                   	pop    ebx
c001c342:	5e                   	pop    esi
c001c343:	c3                   	ret    

c001c344 <ISO9660::openDir(char const*, void**)>:
c001c344:	57                   	push   edi
c001c345:	56                   	push   esi
c001c346:	53                   	push   ebx
c001c347:	83 ec 10             	sub    esp,0x10
c001c34a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c34e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c352:	85 ff                	test   edi,edi
c001c354:	74 7b                	je     c001c3d1 <ISO9660::openDir(char const*, void**)+0x8d>
c001c356:	85 f6                	test   esi,esi
c001c358:	74 77                	je     c001c3d1 <ISO9660::openDir(char const*, void**)+0x8d>
c001c35a:	83 ec 0c             	sub    esp,0xc
c001c35d:	6a 1c                	push   0x1c
c001c35f:	e8 5f d6 fe ff       	call   c00099c3 <malloc>
c001c364:	89 07                	mov    DWORD PTR [edi],eax
c001c366:	89 c3                	mov    ebx,eax
c001c368:	58                   	pop    eax
c001c369:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c36d:	50                   	push   eax
c001c36e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c371:	50                   	push   eax
c001c372:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c376:	50                   	push   eax
c001c377:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c37b:	50                   	push   eax
c001c37c:	56                   	push   esi
c001c37d:	e8 cd fd ff ff       	call   c001c14f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c382:	83 c4 20             	add    esp,0x20
c001c385:	84 c0                	test   al,al
c001c387:	74 07                	je     c001c390 <ISO9660::openDir(char const*, void**)+0x4c>
c001c389:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c38e:	75 0b                	jne    c001c39b <ISO9660::openDir(char const*, void**)+0x57>
c001c390:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c394:	b8 01 00 00 00       	mov    eax,0x1
c001c399:	eb 3b                	jmp    c001c3d6 <ISO9660::openDir(char const*, void**)+0x92>
c001c39b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c39f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c3a3:	89 03                	mov    DWORD PTR [ebx],eax
c001c3a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c3ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c3b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3be:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c3c1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c3c8:	8a 06                	mov    al,BYTE PTR [esi]
c001c3ca:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	eb 05                	jmp    c001c3d6 <ISO9660::openDir(char const*, void**)+0x92>
c001c3d1:	b8 04 00 00 00       	mov    eax,0x4
c001c3d6:	83 c4 10             	add    esp,0x10
c001c3d9:	5b                   	pop    ebx
c001c3da:	5e                   	pop    esi
c001c3db:	5f                   	pop    edi
c001c3dc:	c3                   	ret    
c001c3dd:	90                   	nop

c001c3de <ISO9660::ISO9660()>:
c001c3de:	83 ec 0c             	sub    esp,0xc
c001c3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e5:	83 ec 0c             	sub    esp,0xc
c001c3e8:	50                   	push   eax
c001c3e9:	e8 90 09 ff ff       	call   c000cd7e <Filesystem::Filesystem()>
c001c3ee:	83 c4 10             	add    esp,0x10
c001c3f1:	ba 90 4b 02 c0       	mov    edx,0xc0024b90
c001c3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fa:	89 10                	mov    DWORD PTR [eax],edx
c001c3fc:	90                   	nop
c001c3fd:	83 c4 0c             	add    esp,0xc
c001c400:	c3                   	ret    
c001c401:	90                   	nop

c001c402 <SoundCard::beginPlayback()>:
c001c402:	c7 44 24 04 f0 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024bf0
c001c40a:	e9 1a 7f ff ff       	jmp    c0014329 <Krnl::panic(char const*)>
c001c40f:	90                   	nop

c001c410 <SoundCard::stopPlayback()>:
c001c410:	c7 44 24 04 24 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c24
c001c418:	e9 0c 7f ff ff       	jmp    c0014329 <Krnl::panic(char const*)>
c001c41d:	90                   	nop

c001c41e <SoundCard::SoundCard(char const*)>:
c001c41e:	83 ec 1c             	sub    esp,0x1c
c001c421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c425:	83 ec 08             	sub    esp,0x8
c001c428:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c42c:	50                   	push   eax
c001c42d:	e8 80 1c ff ff       	call   c000e0b2 <Device::Device(char const*)>
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	ba 30 4d 02 c0       	mov    edx,0xc0024d30
c001c43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c43e:	89 10                	mov    DWORD PTR [eax],edx
c001c440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c444:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c44b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c44f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c45d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c479:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c483:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c48b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c490:	7f 19                	jg     c001c4ab <SoundCard::SoundCard(char const*)+0x8d>
c001c492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c496:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c49a:	83 c2 54             	add    edx,0x54
c001c49d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c4a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c4a9:	eb e0                	jmp    c001c48b <SoundCard::SoundCard(char const*)+0x6d>
c001c4ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4af:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4b6:	90                   	nop
c001c4b7:	83 c4 1c             	add    esp,0x1c
c001c4ba:	c3                   	ret    
c001c4bb:	90                   	nop

c001c4bc <SoundCard::~SoundCard()>:
c001c4bc:	83 ec 0c             	sub    esp,0xc
c001c4bf:	ba 30 4d 02 c0       	mov    edx,0xc0024d30
c001c4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c8:	89 10                	mov    DWORD PTR [eax],edx
c001c4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ce:	83 ec 0c             	sub    esp,0xc
c001c4d1:	50                   	push   eax
c001c4d2:	e8 a5 18 ff ff       	call   c000dd7c <Device::~Device()>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	90                   	nop
c001c4db:	83 c4 0c             	add    esp,0xc
c001c4de:	c3                   	ret    
c001c4df:	90                   	nop

c001c4e0 <SoundCard::~SoundCard()>:
c001c4e0:	83 ec 0c             	sub    esp,0xc
c001c4e3:	83 ec 0c             	sub    esp,0xc
c001c4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ea:	e8 cd ff ff ff       	call   c001c4bc <SoundCard::~SoundCard()>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	83 ec 08             	sub    esp,0x8
c001c4f5:	68 e8 01 00 00       	push   0x1e8
c001c4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4fe:	e8 83 04 ff ff       	call   c000c986 <operator delete(void*, unsigned long)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	83 c4 0c             	add    esp,0xc
c001c509:	c3                   	ret    

c001c50a <SoundCard::configureRates(int, int, int)>:
c001c50a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c50e:	31 c0                	xor    eax,eax
c001c510:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c517:	75 20                	jne    c001c539 <SoundCard::configureRates(int, int, int)+0x2f>
c001c519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c51d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c527:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c531:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c537:	b0 01                	mov    al,0x1
c001c539:	c3                   	ret    

c001c53a <SoundCard::getSamples16(int, short*)>:
c001c53a:	55                   	push   ebp
c001c53b:	57                   	push   edi
c001c53c:	31 ff                	xor    edi,edi
c001c53e:	56                   	push   esi
c001c53f:	53                   	push   ebx
c001c540:	83 ec 28             	sub    esp,0x28
c001c543:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c547:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c54b:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c54f:	68 57 4c 02 c0       	push   0xc0024c57
c001c554:	e8 0e 05 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c559:	83 c4 0c             	add    esp,0xc
c001c55c:	53                   	push   ebx
c001c55d:	6a 00                	push   0x0
c001c55f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c563:	e8 1c 41 fe ff       	call   c0000684 <memset>
c001c568:	58                   	pop    eax
c001c569:	5a                   	pop    edx
c001c56a:	53                   	push   ebx
c001c56b:	31 db                	xor    ebx,ebx
c001c56d:	68 76 4c 02 c0       	push   0xc0024c76
c001c572:	e8 f0 04 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	52                   	push   edx
c001c57b:	52                   	push   edx
c001c57c:	53                   	push   ebx
c001c57d:	68 89 4c 02 c0       	push   0xc0024c89
c001c582:	e8 e0 04 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c587:	59                   	pop    ecx
c001c588:	58                   	pop    eax
c001c589:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c590:	68 a1 4c 02 c0       	push   0xc0024ca1
c001c595:	e8 cd 04 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c59a:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c5a1:	83 c4 10             	add    esp,0x10
c001c5a4:	85 c0                	test   eax,eax
c001c5a6:	74 44                	je     c001c5ec <SoundCard::getSamples16(int, short*)+0xb2>
c001c5a8:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5ac:	75 3e                	jne    c001c5ec <SoundCard::getSamples16(int, short*)+0xb2>
c001c5ae:	50                   	push   eax
c001c5af:	50                   	push   eax
c001c5b0:	53                   	push   ebx
c001c5b1:	68 b3 4c 02 c0       	push   0xc0024cb3
c001c5b6:	e8 ac 04 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c5bb:	56                   	push   esi
c001c5bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5c0:	55                   	push   ebp
c001c5c1:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5c8:	e8 6f 03 00 00       	call   c001c93c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c5cd:	83 c4 18             	add    esp,0x18
c001c5d0:	50                   	push   eax
c001c5d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5d5:	68 ca 4c 02 c0       	push   0xc0024cca
c001c5da:	e8 88 04 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5e6:	39 c7                	cmp    edi,eax
c001c5e8:	7d 02                	jge    c001c5ec <SoundCard::getSamples16(int, short*)+0xb2>
c001c5ea:	89 c7                	mov    edi,eax
c001c5ec:	43                   	inc    ebx
c001c5ed:	83 fb 20             	cmp    ebx,0x20
c001c5f0:	75 88                	jne    c001c57a <SoundCard::getSamples16(int, short*)+0x40>
c001c5f2:	83 c4 1c             	add    esp,0x1c
c001c5f5:	89 f8                	mov    eax,edi
c001c5f7:	5b                   	pop    ebx
c001c5f8:	5e                   	pop    esi
c001c5f9:	5f                   	pop    edi
c001c5fa:	5d                   	pop    ebp
c001c5fb:	c3                   	ret    

c001c5fc <SoundCard::getSamples32(int, int*)>:
c001c5fc:	55                   	push   ebp
c001c5fd:	57                   	push   edi
c001c5fe:	31 ff                	xor    edi,edi
c001c600:	56                   	push   esi
c001c601:	31 f6                	xor    esi,esi
c001c603:	53                   	push   ebx
c001c604:	83 ec 10             	sub    esp,0x10
c001c607:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c60b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c60f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c613:	c1 e0 02             	shl    eax,0x2
c001c616:	50                   	push   eax
c001c617:	6a 00                	push   0x0
c001c619:	55                   	push   ebp
c001c61a:	e8 65 40 fe ff       	call   c0000684 <memset>
c001c61f:	83 c4 10             	add    esp,0x10
c001c622:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c629:	85 c0                	test   eax,eax
c001c62b:	74 1b                	je     c001c648 <SoundCard::getSamples32(int, int*)+0x4c>
c001c62d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c631:	75 15                	jne    c001c648 <SoundCard::getSamples32(int, int*)+0x4c>
c001c633:	53                   	push   ebx
c001c634:	55                   	push   ebp
c001c635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c639:	50                   	push   eax
c001c63a:	e8 f9 03 00 00       	call   c001ca38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c63f:	83 c4 10             	add    esp,0x10
c001c642:	39 c6                	cmp    esi,eax
c001c644:	7d 02                	jge    c001c648 <SoundCard::getSamples32(int, int*)+0x4c>
c001c646:	89 c6                	mov    esi,eax
c001c648:	47                   	inc    edi
c001c649:	83 ff 20             	cmp    edi,0x20
c001c64c:	75 d4                	jne    c001c622 <SoundCard::getSamples32(int, int*)+0x26>
c001c64e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c654:	85 f6                	test   esi,esi
c001c656:	75 0f                	jne    c001c667 <SoundCard::getSamples32(int, int*)+0x6b>
c001c658:	84 c0                	test   al,al
c001c65a:	74 1b                	je     c001c677 <SoundCard::getSamples32(int, int*)+0x7b>
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c661:	53                   	push   ebx
c001c662:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c665:	eb 0d                	jmp    c001c674 <SoundCard::getSamples32(int, int*)+0x78>
c001c667:	84 c0                	test   al,al
c001c669:	75 0c                	jne    c001c677 <SoundCard::getSamples32(int, int*)+0x7b>
c001c66b:	83 ec 0c             	sub    esp,0xc
c001c66e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c670:	53                   	push   ebx
c001c671:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	83 c4 0c             	add    esp,0xc
c001c67a:	89 f0                	mov    eax,esi
c001c67c:	5b                   	pop    ebx
c001c67d:	5e                   	pop    esi
c001c67e:	5f                   	pop    edi
c001c67f:	5d                   	pop    ebp
c001c680:	c3                   	ret    
c001c681:	90                   	nop

c001c682 <SoundCard::addChannel(SoundPort*)>:
c001c682:	56                   	push   esi
c001c683:	53                   	push   ebx
c001c684:	53                   	push   ebx
c001c685:	31 db                	xor    ebx,ebx
c001c687:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c68b:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c693:	74 27                	je     c001c6bc <SoundCard::addChannel(SoundPort*)+0x3a>
c001c695:	43                   	inc    ebx
c001c696:	83 fb 20             	cmp    ebx,0x20
c001c699:	75 f0                	jne    c001c68b <SoundCard::addChannel(SoundPort*)+0x9>
c001c69b:	83 ec 0c             	sub    esp,0xc
c001c69e:	83 cb ff             	or     ebx,0xffffffff
c001c6a1:	68 ef 4c 02 c0       	push   0xc0024cef
c001c6a6:	e8 bc 03 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c6ab:	c7 04 24 e8 4c 02 c0 	mov    DWORD PTR [esp],0xc0024ce8
c001c6b2:	e8 72 7c ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	eb 1b                	jmp    c001c6d7 <SoundCard::addChannel(SoundPort*)+0x55>
c001c6bc:	51                   	push   ecx
c001c6bd:	51                   	push   ecx
c001c6be:	53                   	push   ebx
c001c6bf:	68 07 4d 02 c0       	push   0xc0024d07
c001c6c4:	e8 9e 03 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c6c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c6d7:	89 d8                	mov    eax,ebx
c001c6d9:	5a                   	pop    edx
c001c6da:	5b                   	pop    ebx
c001c6db:	5e                   	pop    esi
c001c6dc:	c3                   	ret    
c001c6dd:	90                   	nop

c001c6de <SoundCard::removeChannel(int)>:
c001c6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c6e6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c6f1:	c3                   	ret    
c001c6f2:	66 90                	xchg   ax,ax

c001c6f4 <SoundPort::SoundPort(int, int, int, int)>:
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c706:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c712:	89 10                	mov    DWORD PTR [eax],edx
c001c714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c718:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c71c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c723:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c727:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c72a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c72f:	75 13                	jne    c001c744 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c735:	8b 00                	mov    eax,DWORD PTR [eax]
c001c737:	05 a0 0f 00 00       	add    eax,0xfa0
c001c73c:	01 c0                	add    eax,eax
c001c73e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c742:	66 90                	xchg   ax,ax
c001c744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c748:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c74c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c753:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c761:	c1 e0 02             	shl    eax,0x2
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	50                   	push   eax
c001c768:	e8 56 d2 fe ff       	call   c00099c3 <malloc>
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	89 c2                	mov    edx,eax
c001c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c776:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c779:	90                   	nop
c001c77a:	83 c4 0c             	add    esp,0xc
c001c77d:	c3                   	ret    
c001c77e:	66 90                	xchg   ax,ax

c001c780 <SoundPort::~SoundPort()>:
c001c780:	83 ec 0c             	sub    esp,0xc
c001c783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c787:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c78a:	85 c0                	test   eax,eax
c001c78c:	74 1e                	je     c001c7ac <SoundPort::~SoundPort()+0x2c>
c001c78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c792:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	50                   	push   eax
c001c799:	e8 35 d2 fe ff       	call   c00099d3 <free>
c001c79e:	83 c4 10             	add    esp,0x10
c001c7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c7ac:	90                   	nop
c001c7ad:	83 c4 0c             	add    esp,0xc
c001c7b0:	c3                   	ret    
c001c7b1:	90                   	nop
c001c7b2:	66 90                	xchg   ax,ax

c001c7b4 <SoundPort::unpause()>:
c001c7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c7bc:	c3                   	ret    
c001c7bd:	90                   	nop
c001c7be:	66 90                	xchg   ax,ax

c001c7c0 <SoundPort::pause()>:
c001c7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c7c8:	c3                   	ret    
c001c7c9:	90                   	nop
c001c7ca:	66 90                	xchg   ax,ax

c001c7cc <SoundPort::getBufferUsed()>:
c001c7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c7d3:	c3                   	ret    

c001c7d4 <SoundPort::getBufferSize()>:
c001c7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7db:	c3                   	ret    

c001c7dc <SoundPort::buffer16(short*, int)>:
c001c7dc:	55                   	push   ebp
c001c7dd:	57                   	push   edi
c001c7de:	56                   	push   esi
c001c7df:	53                   	push   ebx
c001c7e0:	83 ec 1c             	sub    esp,0x1c
c001c7e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7e7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c7eb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c7ee:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c7f1:	0f 84 85 00 00 00    	je     c001c87c <SoundPort::buffer16(short*, int)+0xa0>
c001c7f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c7fb:	85 c9                	test   ecx,ecx
c001c7fd:	7e 7d                	jle    c001c87c <SoundPort::buffer16(short*, int)+0xa0>
c001c7ff:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c803:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c806:	c1 e1 0f             	shl    ecx,0xf
c001c809:	8d 70 01             	lea    esi,[eax+0x1]
c001c80c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c80f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c812:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c815:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c818:	74 6e                	je     c001c888 <SoundPort::buffer16(short*, int)+0xac>
c001c81a:	31 f6                	xor    esi,esi
c001c81c:	eb 22                	jmp    c001c840 <SoundPort::buffer16(short*, int)+0x64>
c001c81e:	66 90                	xchg   ax,ax
c001c820:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c825:	8d 79 01             	lea    edi,[ecx+0x1]
c001c828:	c1 e3 0f             	shl    ebx,0xf
c001c82b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c82e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c831:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c834:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c837:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c83a:	74 1c                	je     c001c858 <SoundPort::buffer16(short*, int)+0x7c>
c001c83c:	89 c6                	mov    esi,eax
c001c83e:	66 90                	xchg   ax,ax
c001c840:	8d 46 01             	lea    eax,[esi+0x1]
c001c843:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c847:	75 d7                	jne    c001c820 <SoundPort::buffer16(short*, int)+0x44>
c001c849:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c84d:	83 c4 1c             	add    esp,0x1c
c001c850:	5b                   	pop    ebx
c001c851:	5e                   	pop    esi
c001c852:	5f                   	pop    edi
c001c853:	5d                   	pop    ebp
c001c854:	c3                   	ret    
c001c855:	8d 76 00             	lea    esi,[esi+0x0]
c001c858:	8d 46 02             	lea    eax,[esi+0x2]
c001c85b:	90                   	nop
c001c85c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	68 5c 4d 02 c0       	push   0xc0024d5c
c001c868:	e8 fa 01 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c874:	83 c4 1c             	add    esp,0x1c
c001c877:	5b                   	pop    ebx
c001c878:	5e                   	pop    esi
c001c879:	5f                   	pop    edi
c001c87a:	5d                   	pop    ebp
c001c87b:	c3                   	ret    
c001c87c:	83 c4 1c             	add    esp,0x1c
c001c87f:	31 c0                	xor    eax,eax
c001c881:	5b                   	pop    ebx
c001c882:	5e                   	pop    esi
c001c883:	5f                   	pop    edi
c001c884:	5d                   	pop    ebp
c001c885:	c3                   	ret    
c001c886:	66 90                	xchg   ax,ax
c001c888:	b8 01 00 00 00       	mov    eax,0x1
c001c88d:	eb cd                	jmp    c001c85c <SoundPort::buffer16(short*, int)+0x80>
c001c88f:	90                   	nop

c001c890 <SoundPort::buffer32(int*, int)>:
c001c890:	55                   	push   ebp
c001c891:	57                   	push   edi
c001c892:	56                   	push   esi
c001c893:	53                   	push   ebx
c001c894:	83 ec 1c             	sub    esp,0x1c
c001c897:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c89b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c89f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8a2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8aa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8ad:	74 79                	je     c001c928 <SoundPort::buffer32(int*, int)+0x98>
c001c8af:	85 c0                	test   eax,eax
c001c8b1:	7e 75                	jle    c001c928 <SoundPort::buffer32(int*, int)+0x98>
c001c8b3:	8d 71 01             	lea    esi,[ecx+0x1]
c001c8b6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c8b9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c8bc:	8b 37                	mov    esi,DWORD PTR [edi]
c001c8be:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c8c1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8c4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8c7:	74 6b                	je     c001c934 <SoundPort::buffer32(int*, int)+0xa4>
c001c8c9:	31 f6                	xor    esi,esi
c001c8cb:	eb 1f                	jmp    c001c8ec <SoundPort::buffer32(int*, int)+0x5c>
c001c8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c8d3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c8d6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c8d9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c8dc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c8e0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8e3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8e6:	74 1c                	je     c001c904 <SoundPort::buffer32(int*, int)+0x74>
c001c8e8:	89 de                	mov    esi,ebx
c001c8ea:	66 90                	xchg   ax,ax
c001c8ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c8ef:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c8f3:	75 db                	jne    c001c8d0 <SoundPort::buffer32(int*, int)+0x40>
c001c8f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8f9:	83 c4 1c             	add    esp,0x1c
c001c8fc:	5b                   	pop    ebx
c001c8fd:	5e                   	pop    esi
c001c8fe:	5f                   	pop    edi
c001c8ff:	5d                   	pop    ebp
c001c900:	c3                   	ret    
c001c901:	8d 76 00             	lea    esi,[esi+0x0]
c001c904:	8d 46 02             	lea    eax,[esi+0x2]
c001c907:	90                   	nop
c001c908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c90c:	83 ec 0c             	sub    esp,0xc
c001c90f:	68 77 4d 02 c0       	push   0xc0024d77
c001c914:	e8 4e 01 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c919:	83 c4 10             	add    esp,0x10
c001c91c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c920:	83 c4 1c             	add    esp,0x1c
c001c923:	5b                   	pop    ebx
c001c924:	5e                   	pop    esi
c001c925:	5f                   	pop    edi
c001c926:	5d                   	pop    ebp
c001c927:	c3                   	ret    
c001c928:	83 c4 1c             	add    esp,0x1c
c001c92b:	31 c0                	xor    eax,eax
c001c92d:	5b                   	pop    ebx
c001c92e:	5e                   	pop    esi
c001c92f:	5f                   	pop    edi
c001c930:	5d                   	pop    ebp
c001c931:	c3                   	ret    
c001c932:	66 90                	xchg   ax,ax
c001c934:	b8 01 00 00 00       	mov    eax,0x1
c001c939:	eb cd                	jmp    c001c908 <SoundPort::buffer32(int*, int)+0x78>
c001c93b:	90                   	nop

c001c93c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c93c:	57                   	push   edi
c001c93d:	56                   	push   esi
c001c93e:	53                   	push   ebx
c001c93f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c943:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c947:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c94d:	39 03                	cmp    DWORD PTR [ebx],eax
c001c94f:	74 13                	je     c001c964 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c951:	83 ec 0c             	sub    esp,0xc
c001c954:	68 cc 4d 02 c0       	push   0xc0024dcc
c001c959:	e8 cb 79 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001c95e:	83 c4 10             	add    esp,0x10
c001c961:	8d 76 00             	lea    esi,[esi+0x0]
c001c964:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c96a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c96d:	74 11                	je     c001c980 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c96f:	83 ec 0c             	sub    esp,0xc
c001c972:	68 92 4d 02 c0       	push   0xc0024d92
c001c977:	e8 ad 79 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	90                   	nop
c001c980:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c986:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c989:	74 11                	je     c001c99c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c98b:	83 ec 0c             	sub    esp,0xc
c001c98e:	68 92 4d 02 c0       	push   0xc0024d92
c001c993:	e8 91 79 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	90                   	nop
c001c99c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c99f:	89 c6                	mov    esi,eax
c001c9a1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c9a5:	7e 05                	jle    c001c9ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c9a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c9ab:	90                   	nop
c001c9ac:	85 f6                	test   esi,esi
c001c9ae:	7e 30                	jle    c001c9e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c9b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9b4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c9b7:	31 c9                	xor    ecx,ecx
c001c9b9:	01 d7                	add    edi,edx
c001c9bb:	90                   	nop
c001c9bc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9bf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c9c2:	85 c0                	test   eax,eax
c001c9c4:	79 06                	jns    c001c9cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c9c6:	05 ff 7f 00 00       	add    eax,0x7fff
c001c9cb:	90                   	nop
c001c9cc:	c1 f8 0f             	sar    eax,0xf
c001c9cf:	83 c1 04             	add    ecx,0x4
c001c9d2:	66 01 02             	add    WORD PTR [edx],ax
c001c9d5:	83 c2 02             	add    edx,0x2
c001c9d8:	39 d7                	cmp    edi,edx
c001c9da:	75 e0                	jne    c001c9bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c9dc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9df:	90                   	nop
c001c9e0:	56                   	push   esi
c001c9e1:	89 c2                	mov    edx,eax
c001c9e3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c9ea:	29 f2                	sub    edx,esi
c001c9ec:	52                   	push   edx
c001c9ed:	50                   	push   eax
c001c9ee:	68 ec 4d 02 c0       	push   0xc0024dec
c001c9f3:	e8 6f 00 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001c9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9fb:	50                   	push   eax
c001c9fc:	01 f8                	add    eax,edi
c001c9fe:	50                   	push   eax
c001c9ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca02:	29 f0                	sub    eax,esi
c001ca04:	c1 e0 02             	shl    eax,0x2
c001ca07:	50                   	push   eax
c001ca08:	68 1c 4e 02 c0       	push   0xc0024e1c
c001ca0d:	e8 55 00 ff ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001ca12:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca15:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca18:	83 c4 1c             	add    esp,0x1c
c001ca1b:	01 d7                	add    edi,edx
c001ca1d:	29 f0                	sub    eax,esi
c001ca1f:	c1 e0 02             	shl    eax,0x2
c001ca22:	50                   	push   eax
c001ca23:	57                   	push   edi
c001ca24:	52                   	push   edx
c001ca25:	e8 92 3b fe ff       	call   c00005bc <memmove>
c001ca2a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca2d:	83 c4 10             	add    esp,0x10
c001ca30:	89 f0                	mov    eax,esi
c001ca32:	5b                   	pop    ebx
c001ca33:	5e                   	pop    esi
c001ca34:	5f                   	pop    edi
c001ca35:	c3                   	ret    
c001ca36:	66 90                	xchg   ax,ax

c001ca38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca38:	57                   	push   edi
c001ca39:	56                   	push   esi
c001ca3a:	53                   	push   ebx
c001ca3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca47:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ca4d:	39 06                	cmp    DWORD PTR [esi],eax
c001ca4f:	74 13                	je     c001ca64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ca51:	83 ec 0c             	sub    esp,0xc
c001ca54:	68 40 4e 02 c0       	push   0xc0024e40
c001ca59:	e8 cb 78 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001ca5e:	83 c4 10             	add    esp,0x10
c001ca61:	8d 76 00             	lea    esi,[esi+0x0]
c001ca64:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ca6a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ca6d:	74 11                	je     c001ca80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ca6f:	83 ec 0c             	sub    esp,0xc
c001ca72:	68 ae 4d 02 c0       	push   0xc0024dae
c001ca77:	e8 ad 78 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001ca7c:	83 c4 10             	add    esp,0x10
c001ca7f:	90                   	nop
c001ca80:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca86:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca89:	74 11                	je     c001ca9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca8b:	83 ec 0c             	sub    esp,0xc
c001ca8e:	68 ae 4d 02 c0       	push   0xc0024dae
c001ca93:	e8 91 78 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001ca98:	83 c4 10             	add    esp,0x10
c001ca9b:	90                   	nop
c001ca9c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ca9f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001caa3:	7e 07                	jle    c001caac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001caa5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001caa9:	8d 76 00             	lea    esi,[esi+0x0]
c001caac:	85 ff                	test   edi,edi
c001caae:	7e 1c                	jle    c001cacc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cab0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cab7:	31 c0                	xor    eax,eax
c001cab9:	8d 76 00             	lea    esi,[esi+0x0]
c001cabc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cabf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cac2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cac5:	83 c0 04             	add    eax,0x4
c001cac8:	39 c1                	cmp    ecx,eax
c001caca:	75 f0                	jne    c001cabc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cacc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cacf:	50                   	push   eax
c001cad0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cad3:	29 f8                	sub    eax,edi
c001cad5:	c1 e0 02             	shl    eax,0x2
c001cad8:	50                   	push   eax
c001cad9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cadc:	50                   	push   eax
c001cadd:	52                   	push   edx
c001cade:	e8 d9 3a fe ff       	call   c00005bc <memmove>
c001cae3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cae6:	83 c4 10             	add    esp,0x10
c001cae9:	89 f8                	mov    eax,edi
c001caeb:	5b                   	pop    ebx
c001caec:	5e                   	pop    esi
c001caed:	5f                   	pop    edi
c001caee:	c3                   	ret    
c001caef:	90                   	nop

c001caf0 <PCI::open(int, int, void*)>:
c001caf0:	83 ec 18             	sub    esp,0x18
c001caf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cafb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb01:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb03:	50                   	push   eax
c001cb04:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb07:	31 c0                	xor    eax,eax
c001cb09:	83 c4 1c             	add    esp,0x1c
c001cb0c:	c3                   	ret    
c001cb0d:	90                   	nop

c001cb0e <PCI::close(int, int, void*)>:
c001cb0e:	31 c0                	xor    eax,eax
c001cb10:	c3                   	ret    
c001cb11:	90                   	nop

c001cb12 <PCI::PCI()>:
c001cb12:	83 ec 0c             	sub    esp,0xc
c001cb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb19:	83 ec 08             	sub    esp,0x8
c001cb1c:	68 5f 4e 02 c0       	push   0xc0024e5f
c001cb21:	50                   	push   eax
c001cb22:	e8 ed 0b ff ff       	call   c000d714 <Bus::Bus(char const*)>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	ba 48 4f 02 c0       	mov    edx,0xc0024f48
c001cb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb33:	89 10                	mov    DWORD PTR [eax],edx
c001cb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb39:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb47:	a3 e0 82 02 c0       	mov    ds:0xc00282e0,eax
c001cb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb56:	0f b6 d0             	movzx  edx,al
c001cb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb6e:	0f b6 d0             	movzx  edx,al
c001cb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb75:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb84:	8d 50 01             	lea    edx,[eax+0x1]
c001cb87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb8b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb91:	0f b6 d0             	movzx  edx,al
c001cb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb98:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cb9c:	83 c9 c0             	or     ecx,0xffffffc0
c001cb9f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cba3:	90                   	nop
c001cba4:	83 c4 0c             	add    esp,0xc
c001cba7:	c3                   	ret    

c001cba8 <PCI::readBAR8(unsigned int, int)>:
c001cba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb0:	f6 c2 01             	test   dl,0x1
c001cbb3:	74 07                	je     c001cbbc <PCI::readBAR8(unsigned int, int)+0x14>
c001cbb5:	83 e2 fc             	and    edx,0xfffffffc
c001cbb8:	01 c2                	add    edx,eax
c001cbba:	ec                   	in     al,dx
c001cbbb:	c3                   	ret    
c001cbbc:	83 e2 f0             	and    edx,0xfffffff0
c001cbbf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cbc2:	c3                   	ret    
c001cbc3:	90                   	nop

c001cbc4 <PCI::readBAR16(unsigned int, int)>:
c001cbc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbcc:	f6 c2 01             	test   dl,0x1
c001cbcf:	74 08                	je     c001cbd9 <PCI::readBAR16(unsigned int, int)+0x15>
c001cbd1:	83 e2 fc             	and    edx,0xfffffffc
c001cbd4:	01 c2                	add    edx,eax
c001cbd6:	66 ed                	in     ax,dx
c001cbd8:	c3                   	ret    
c001cbd9:	83 e2 f0             	and    edx,0xfffffff0
c001cbdc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cbe0:	c3                   	ret    
c001cbe1:	90                   	nop

c001cbe2 <PCI::readBAR32(unsigned int, int)>:
c001cbe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbea:	f6 c2 01             	test   dl,0x1
c001cbed:	74 07                	je     c001cbf6 <PCI::readBAR32(unsigned int, int)+0x14>
c001cbef:	83 e2 fc             	and    edx,0xfffffffc
c001cbf2:	01 c2                	add    edx,eax
c001cbf4:	ed                   	in     eax,dx
c001cbf5:	c3                   	ret    
c001cbf6:	83 e2 f0             	and    edx,0xfffffff0
c001cbf9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cbfc:	c3                   	ret    
c001cbfd:	90                   	nop

c001cbfe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cbfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc0a:	f6 c2 01             	test   dl,0x1
c001cc0d:	74 07                	je     c001cc16 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc0f:	83 e2 fc             	and    edx,0xfffffffc
c001cc12:	01 ca                	add    edx,ecx
c001cc14:	ee                   	out    dx,al
c001cc15:	c3                   	ret    
c001cc16:	83 e2 f0             	and    edx,0xfffffff0
c001cc19:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc1c:	c3                   	ret    
c001cc1d:	90                   	nop

c001cc1e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc2a:	f6 c2 01             	test   dl,0x1
c001cc2d:	74 08                	je     c001cc37 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc2f:	83 e2 fc             	and    edx,0xfffffffc
c001cc32:	01 ca                	add    edx,ecx
c001cc34:	66 ef                	out    dx,ax
c001cc36:	c3                   	ret    
c001cc37:	83 e2 f0             	and    edx,0xfffffff0
c001cc3a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc3e:	c3                   	ret    
c001cc3f:	90                   	nop

c001cc40 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc4c:	f6 c2 01             	test   dl,0x1
c001cc4f:	74 07                	je     c001cc58 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cc51:	83 e2 fc             	and    edx,0xfffffffc
c001cc54:	01 ca                	add    edx,ecx
c001cc56:	ef                   	out    dx,eax
c001cc57:	c3                   	ret    
c001cc58:	83 e2 f0             	and    edx,0xfffffff0
c001cc5b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cc5e:	c3                   	ret    
c001cc5f:	90                   	nop

c001cc60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc60:	55                   	push   ebp
c001cc61:	57                   	push   edi
c001cc62:	56                   	push   esi
c001cc63:	53                   	push   ebx
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc6b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cc6f:	89 f0                	mov    eax,esi
c001cc71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc79:	3c 07                	cmp    al,0x7
c001cc7b:	76 10                	jbe    c001cc8d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc7d:	83 ec 0c             	sub    esp,0xc
c001cc80:	68 67 4e 02 c0       	push   0xc0024e67
c001cc85:	e8 9f 76 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001cc8a:	83 c4 10             	add    esp,0x10
c001cc8d:	80 fb 0f             	cmp    bl,0xf
c001cc90:	76 10                	jbe    c001cca2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc92:	83 ec 0c             	sub    esp,0xc
c001cc95:	68 97 4e 02 c0       	push   0xc0024e97
c001cc9a:	e8 8a 76 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	8d 04 36             	lea    eax,[esi+esi*1]
c001cca5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccaa:	83 c8 f0             	or     eax,0xfffffff0
c001ccad:	ee                   	out    dx,al
c001ccae:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ccb3:	89 e8                	mov    eax,ebp
c001ccb5:	ee                   	out    dx,al
c001ccb6:	83 c4 0c             	add    esp,0xc
c001ccb9:	89 d8                	mov    eax,ebx
c001ccbb:	66 81 e7 fc 00       	and    di,0xfc
c001ccc0:	5b                   	pop    ebx
c001ccc1:	c1 e0 08             	shl    eax,0x8
c001ccc4:	5e                   	pop    esi
c001ccc5:	09 f8                	or     eax,edi
c001ccc7:	5f                   	pop    edi
c001ccc8:	66 0d 00 c0          	or     ax,0xc000
c001cccc:	5d                   	pop    ebp
c001cccd:	c3                   	ret    

c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccce:	57                   	push   edi
c001cccf:	56                   	push   esi
c001ccd0:	53                   	push   ebx
c001ccd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccd9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ccdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cce3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cce7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cceb:	83 ff 01             	cmp    edi,0x1
c001ccee:	75 3e                	jne    c001cd2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ccf0:	89 de                	mov    esi,ebx
c001ccf2:	0f b6 c0             	movzx  eax,al
c001ccf5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ccfb:	c1 e0 10             	shl    eax,0x10
c001ccfe:	0f b6 c9             	movzx  ecx,cl
c001cd01:	09 f0                	or     eax,esi
c001cd03:	c1 e1 08             	shl    ecx,0x8
c001cd06:	0f b6 d2             	movzx  edx,dl
c001cd09:	09 c8                	or     eax,ecx
c001cd0b:	c1 e2 0b             	shl    edx,0xb
c001cd0e:	09 d0                	or     eax,edx
c001cd10:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd15:	0d 00 00 00 80       	or     eax,0x80000000
c001cd1a:	ef                   	out    dx,eax
c001cd1b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd20:	ed                   	in     eax,dx
c001cd21:	83 e3 02             	and    ebx,0x2
c001cd24:	0f b6 cb             	movzx  ecx,bl
c001cd27:	c1 e1 03             	shl    ecx,0x3
c001cd2a:	d3 e8                	shr    eax,cl
c001cd2c:	eb 43                	jmp    c001cd71 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd2e:	83 ff 02             	cmp    edi,0x2
c001cd31:	75 2c                	jne    c001cd5f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd33:	83 ec 0c             	sub    esp,0xc
c001cd36:	0f b6 c9             	movzx  ecx,cl
c001cd39:	0f b6 d2             	movzx  edx,dl
c001cd3c:	0f b6 fb             	movzx  edi,bl
c001cd3f:	0f b6 c0             	movzx  eax,al
c001cd42:	57                   	push   edi
c001cd43:	51                   	push   ecx
c001cd44:	52                   	push   edx
c001cd45:	50                   	push   eax
c001cd46:	56                   	push   esi
c001cd47:	e8 14 ff ff ff       	call   c001cc60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd4c:	89 c2                	mov    edx,eax
c001cd4e:	ed                   	in     eax,dx
c001cd4f:	83 e3 02             	and    ebx,0x2
c001cd52:	83 c4 20             	add    esp,0x20
c001cd55:	0f b6 cb             	movzx  ecx,bl
c001cd58:	c1 e1 03             	shl    ecx,0x3
c001cd5b:	d3 e8                	shr    eax,cl
c001cd5d:	eb 12                	jmp    c001cd71 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd5f:	83 ec 0c             	sub    esp,0xc
c001cd62:	68 c7 4e 02 c0       	push   0xc0024ec7
c001cd67:	e8 bd 75 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001cd6c:	83 c4 10             	add    esp,0x10
c001cd6f:	31 c0                	xor    eax,eax
c001cd71:	5b                   	pop    ebx
c001cd72:	5e                   	pop    esi
c001cd73:	5f                   	pop    edi
c001cd74:	c3                   	ret    
c001cd75:	90                   	nop

c001cd76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cd76:	83 ec 18             	sub    esp,0x18
c001cd79:	6a 00                	push   0x0
c001cd7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd80:	50                   	push   eax
c001cd81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd86:	50                   	push   eax
c001cd87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd8c:	50                   	push   eax
c001cd8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd91:	e8 38 ff ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd96:	83 c4 2c             	add    esp,0x2c
c001cd99:	c3                   	ret    

c001cd9a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cd9a:	83 ec 18             	sub    esp,0x18
c001cd9d:	6a 0e                	push   0xe
c001cd9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda4:	50                   	push   eax
c001cda5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdaa:	50                   	push   eax
c001cdab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdb0:	50                   	push   eax
c001cdb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdb5:	e8 14 ff ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdba:	83 c4 2c             	add    esp,0x2c
c001cdbd:	0f b6 c0             	movzx  eax,al
c001cdc0:	c3                   	ret    
c001cdc1:	90                   	nop

c001cdc2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cdc2:	55                   	push   ebp
c001cdc3:	57                   	push   edi
c001cdc4:	56                   	push   esi
c001cdc5:	53                   	push   ebx
c001cdc6:	83 ec 18             	sub    esp,0x18
c001cdc9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cdce:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cdd3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cdd8:	6a 0a                	push   0xa
c001cdda:	56                   	push   esi
c001cddb:	55                   	push   ebp
c001cddc:	57                   	push   edi
c001cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cde1:	e8 e8 fe ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cde6:	83 c4 14             	add    esp,0x14
c001cde9:	89 c3                	mov    ebx,eax
c001cdeb:	6a 0a                	push   0xa
c001cded:	0f b6 db             	movzx  ebx,bl
c001cdf0:	56                   	push   esi
c001cdf1:	55                   	push   ebp
c001cdf2:	57                   	push   edi
c001cdf3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdf7:	e8 d2 fe ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdfc:	83 c4 2c             	add    esp,0x2c
c001cdff:	25 00 ff 00 00       	and    eax,0xff00
c001ce04:	09 d8                	or     eax,ebx
c001ce06:	5b                   	pop    ebx
c001ce07:	5e                   	pop    esi
c001ce08:	5f                   	pop    edi
c001ce09:	5d                   	pop    ebp
c001ce0a:	c3                   	ret    
c001ce0b:	90                   	nop

c001ce0c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce0c:	83 ec 18             	sub    esp,0x18
c001ce0f:	6a 08                	push   0x8
c001ce11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce16:	50                   	push   eax
c001ce17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce1c:	50                   	push   eax
c001ce1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce22:	50                   	push   eax
c001ce23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce27:	e8 a2 fe ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce2c:	83 c4 2c             	add    esp,0x2c
c001ce2f:	0f b6 c4             	movzx  eax,ah
c001ce32:	c3                   	ret    
c001ce33:	90                   	nop

c001ce34 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce34:	83 ec 18             	sub    esp,0x18
c001ce37:	6a 08                	push   0x8
c001ce39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce3e:	50                   	push   eax
c001ce3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce44:	50                   	push   eax
c001ce45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce4a:	50                   	push   eax
c001ce4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce4f:	e8 7a fe ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce54:	83 c4 2c             	add    esp,0x2c
c001ce57:	c3                   	ret    

c001ce58 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ce58:	83 ec 18             	sub    esp,0x18
c001ce5b:	6a 3c                	push   0x3c
c001ce5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce62:	50                   	push   eax
c001ce63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce68:	50                   	push   eax
c001ce69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce6e:	50                   	push   eax
c001ce6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce73:	e8 56 fe ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce78:	83 c4 2c             	add    esp,0x2c
c001ce7b:	c3                   	ret    

c001ce7c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce7c:	83 ec 18             	sub    esp,0x18
c001ce7f:	6a 18                	push   0x18
c001ce81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce86:	50                   	push   eax
c001ce87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce8c:	50                   	push   eax
c001ce8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce92:	50                   	push   eax
c001ce93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce97:	e8 32 fe ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce9c:	83 c4 2c             	add    esp,0x2c
c001ce9f:	0f b6 c4             	movzx  eax,ah
c001cea2:	c3                   	ret    
c001cea3:	90                   	nop

c001cea4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cea4:	55                   	push   ebp
c001cea5:	57                   	push   edi
c001cea6:	56                   	push   esi
c001cea7:	53                   	push   ebx
c001cea8:	83 ec 28             	sub    esp,0x28
c001ceab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ceaf:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ceb4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ceb9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cebe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cec5:	8d 43 12             	lea    eax,[ebx+0x12]
c001cec8:	83 c3 10             	add    ebx,0x10
c001cecb:	0f b6 c0             	movzx  eax,al
c001cece:	0f b6 db             	movzx  ebx,bl
c001ced1:	50                   	push   eax
c001ced2:	51                   	push   ecx
c001ced3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ced7:	57                   	push   edi
c001ced8:	55                   	push   ebp
c001ced9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cedd:	e8 ec fd ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cee2:	83 c4 14             	add    esp,0x14
c001cee5:	89 c6                	mov    esi,eax
c001cee7:	53                   	push   ebx
c001cee8:	c1 e6 10             	shl    esi,0x10
c001ceeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ceef:	51                   	push   ecx
c001cef0:	57                   	push   edi
c001cef1:	55                   	push   ebp
c001cef2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cef6:	e8 d3 fd ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cefb:	83 c4 3c             	add    esp,0x3c
c001cefe:	0f b7 c0             	movzx  eax,ax
c001cf01:	5b                   	pop    ebx
c001cf02:	09 f0                	or     eax,esi
c001cf04:	5e                   	pop    esi
c001cf05:	5f                   	pop    edi
c001cf06:	5d                   	pop    ebp
c001cf07:	c3                   	ret    

c001cf08 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf08:	55                   	push   ebp
c001cf09:	57                   	push   edi
c001cf0a:	56                   	push   esi
c001cf0b:	53                   	push   ebx
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf17:	89 f5                	mov    ebp,esi
c001cf19:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf2f:	83 f9 01             	cmp    ecx,0x1
c001cf32:	75 5d                	jne    c001cf91 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf34:	0f b6 c8             	movzx  ecx,al
c001cf37:	0f b6 d2             	movzx  edx,dl
c001cf3a:	c1 e1 10             	shl    ecx,0x10
c001cf3d:	c1 e2 0b             	shl    edx,0xb
c001cf40:	89 f0                	mov    eax,esi
c001cf42:	25 fc 00 00 00       	and    eax,0xfc
c001cf47:	09 c1                	or     ecx,eax
c001cf49:	89 e8                	mov    eax,ebp
c001cf4b:	0f b6 c0             	movzx  eax,al
c001cf4e:	c1 e0 08             	shl    eax,0x8
c001cf51:	09 c1                	or     ecx,eax
c001cf53:	09 d1                	or     ecx,edx
c001cf55:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf5a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cf60:	89 c8                	mov    eax,ecx
c001cf62:	ef                   	out    dx,eax
c001cf63:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf68:	ed                   	in     eax,dx
c001cf69:	0f b7 db             	movzx  ebx,bx
c001cf6c:	83 e6 02             	and    esi,0x2
c001cf6f:	74 0a                	je     c001cf7b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cf71:	0f b7 d0             	movzx  edx,ax
c001cf74:	c1 e3 10             	shl    ebx,0x10
c001cf77:	09 d3                	or     ebx,edx
c001cf79:	eb 05                	jmp    c001cf80 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf7b:	66 31 c0             	xor    ax,ax
c001cf7e:	09 c3                	or     ebx,eax
c001cf80:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf85:	89 c8                	mov    eax,ecx
c001cf87:	ef                   	out    dx,eax
c001cf88:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf8d:	89 d8                	mov    eax,ebx
c001cf8f:	eb 41                	jmp    c001cfd2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf91:	83 f9 02             	cmp    ecx,0x2
c001cf94:	75 45                	jne    c001cfdb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cf96:	83 ec 0c             	sub    esp,0xc
c001cf99:	0f b6 d2             	movzx  edx,dl
c001cf9c:	89 f1                	mov    ecx,esi
c001cf9e:	0f b6 c0             	movzx  eax,al
c001cfa1:	0f b6 f1             	movzx  esi,cl
c001cfa4:	89 e9                	mov    ecx,ebp
c001cfa6:	56                   	push   esi
c001cfa7:	0f b6 c9             	movzx  ecx,cl
c001cfaa:	51                   	push   ecx
c001cfab:	52                   	push   edx
c001cfac:	50                   	push   eax
c001cfad:	57                   	push   edi
c001cfae:	e8 ad fc ff ff       	call   c001cc60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cfb3:	89 c2                	mov    edx,eax
c001cfb5:	ed                   	in     eax,dx
c001cfb6:	83 c4 20             	add    esp,0x20
c001cfb9:	0f b7 db             	movzx  ebx,bx
c001cfbc:	f6 c2 02             	test   dl,0x2
c001cfbf:	74 0c                	je     c001cfcd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cfc1:	0f b7 c8             	movzx  ecx,ax
c001cfc4:	89 d8                	mov    eax,ebx
c001cfc6:	c1 e0 10             	shl    eax,0x10
c001cfc9:	09 c8                	or     eax,ecx
c001cfcb:	eb 05                	jmp    c001cfd2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfcd:	66 31 c0             	xor    ax,ax
c001cfd0:	09 d8                	or     eax,ebx
c001cfd2:	ef                   	out    dx,eax
c001cfd3:	83 c4 0c             	add    esp,0xc
c001cfd6:	5b                   	pop    ebx
c001cfd7:	5e                   	pop    esi
c001cfd8:	5f                   	pop    edi
c001cfd9:	5d                   	pop    ebp
c001cfda:	c3                   	ret    
c001cfdb:	c7 44 24 20 c7 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024ec7
c001cfe3:	83 c4 0c             	add    esp,0xc
c001cfe6:	5b                   	pop    ebx
c001cfe7:	5e                   	pop    esi
c001cfe8:	5f                   	pop    edi
c001cfe9:	5d                   	pop    ebp
c001cfea:	e9 3a 73 ff ff       	jmp    c0014329 <Krnl::panic(char const*)>
c001cfef:	90                   	nop

c001cff0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cff0:	55                   	push   ebp
c001cff1:	57                   	push   edi
c001cff2:	56                   	push   esi
c001cff3:	53                   	push   ebx
c001cff4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cffa:	80 3d ec 82 02 c0 00 	cmp    BYTE PTR ds:0xc00282ec,0x0
c001d001:	0f 85 84 00 00 00    	jne    c001d08b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d007:	83 ec 0c             	sub    esp,0xc
c001d00a:	68 14 01 00 00       	push   0x114
c001d00f:	e8 af c9 fe ff       	call   c00099c3 <malloc>
c001d014:	83 c4 0c             	add    esp,0xc
c001d017:	89 c3                	mov    ebx,eax
c001d019:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c001d01f:	68 cd 4e 02 c0       	push   0xc0024ecd
c001d024:	50                   	push   eax
c001d025:	e8 a8 ff fe ff       	call   c000cfd2 <File::File(char const*, Process*)>
c001d02a:	5a                   	pop    edx
c001d02b:	59                   	pop    ecx
c001d02c:	6a 01                	push   0x1
c001d02e:	53                   	push   ebx
c001d02f:	e8 02 00 ff ff       	call   c000d036 <File::open(FileOpenMode)>
c001d034:	83 c4 0c             	add    esp,0xc
c001d037:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d03b:	50                   	push   eax
c001d03c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d040:	50                   	push   eax
c001d041:	53                   	push   ebx
c001d042:	e8 9b 02 ff ff       	call   c000d2e2 <File::stat(unsigned long long*, bool*)>
c001d047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d04b:	40                   	inc    eax
c001d04c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d04f:	e8 6f c9 fe ff       	call   c00099c3 <malloc>
c001d054:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d058:	a3 e8 82 02 c0       	mov    ds:0xc00282e8,eax
c001d05d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d061:	5e                   	pop    esi
c001d062:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d064:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d068:	51                   	push   ecx
c001d069:	50                   	push   eax
c001d06a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d06e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d072:	53                   	push   ebx
c001d073:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d076:	83 c4 14             	add    esp,0x14
c001d079:	53                   	push   ebx
c001d07a:	e8 15 00 ff ff       	call   c000d094 <File::close()>
c001d07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d083:	83 c4 10             	add    esp,0x10
c001d086:	a3 e4 82 02 c0       	mov    ds:0xc00282e4,eax
c001d08b:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c001d090:	8b 15 e8 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282e8
c001d096:	89 04 24             	mov    DWORD PTR [esp],eax
c001d099:	31 ff                	xor    edi,edi
c001d09b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d0a3:	31 f6                	xor    esi,esi
c001d0a5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d0aa:	31 db                	xor    ebx,ebx
c001d0ac:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d0b4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d0b9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d0c0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d0c4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d0cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d0cf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d0d2:	0f 8e 6b 01 00 00    	jle    c001d243 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d0d8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d0db:	d4 40                	aam    0x40
c001d0dd:	d5 39                	aad    0x39
c001d0df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0e3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d0e7:	d4 40                	aam    0x40
c001d0e9:	d5 39                	aad    0x39
c001d0eb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d0ef:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d0f3:	d4 40                	aam    0x40
c001d0f5:	d5 39                	aad    0x39
c001d0f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d0fb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d0ff:	d4 40                	aam    0x40
c001d101:	d5 39                	aad    0x39
c001d103:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d107:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d10b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d10f:	3c 56                	cmp    al,0x56
c001d111:	74 45                	je     c001d158 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d113:	d4 40                	aam    0x40
c001d115:	d5 39                	aad    0x39
c001d117:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d11a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d11e:	0f b6 c9             	movzx  ecx,cl
c001d121:	c1 e1 04             	shl    ecx,0x4
c001d124:	d4 40                	aam    0x40
c001d126:	d5 39                	aad    0x39
c001d128:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d12b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d12f:	0f b6 db             	movzx  ebx,bl
c001d132:	09 cb                	or     ebx,ecx
c001d134:	c1 e3 04             	shl    ebx,0x4
c001d137:	d4 40                	aam    0x40
c001d139:	d5 39                	aad    0x39
c001d13b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d13e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d142:	0f b6 c9             	movzx  ecx,cl
c001d145:	09 cb                	or     ebx,ecx
c001d147:	c1 e3 04             	shl    ebx,0x4
c001d14a:	89 d9                	mov    ecx,ebx
c001d14c:	d4 40                	aam    0x40
c001d14e:	d5 39                	aad    0x39
c001d150:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d153:	0f b6 db             	movzx  ebx,bl
c001d156:	09 cb                	or     ebx,ecx
c001d158:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d15c:	80 f9 44             	cmp    cl,0x44
c001d15f:	74 47                	je     c001d1a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d161:	88 c8                	mov    al,cl
c001d163:	d4 40                	aam    0x40
c001d165:	d5 39                	aad    0x39
c001d167:	83 e8 30             	sub    eax,0x30
c001d16a:	0f b6 e8             	movzx  ebp,al
c001d16d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d171:	c1 e5 04             	shl    ebp,0x4
c001d174:	d4 40                	aam    0x40
c001d176:	d5 39                	aad    0x39
c001d178:	83 e8 30             	sub    eax,0x30
c001d17b:	0f b6 f0             	movzx  esi,al
c001d17e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d182:	09 ee                	or     esi,ebp
c001d184:	c1 e6 04             	shl    esi,0x4
c001d187:	d4 40                	aam    0x40
c001d189:	d5 39                	aad    0x39
c001d18b:	83 e8 30             	sub    eax,0x30
c001d18e:	0f b6 e8             	movzx  ebp,al
c001d191:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d195:	09 ee                	or     esi,ebp
c001d197:	c1 e6 04             	shl    esi,0x4
c001d19a:	89 f5                	mov    ebp,esi
c001d19c:	d4 40                	aam    0x40
c001d19e:	d5 39                	aad    0x39
c001d1a0:	83 e8 30             	sub    eax,0x30
c001d1a3:	0f b6 f0             	movzx  esi,al
c001d1a6:	09 ee                	or     esi,ebp
c001d1a8:	83 c7 10             	add    edi,0x10
c001d1ab:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d1af:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d1b2:	3c 0a                	cmp    al,0xa
c001d1b4:	74 09                	je     c001d1bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d1b6:	45                   	inc    ebp
c001d1b7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d1ba:	75 16                	jne    c001d1d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d1bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d1bf:	3c 0a                	cmp    al,0xa
c001d1c1:	0f 94 c0             	sete   al
c001d1c4:	0f b6 c0             	movzx  eax,al
c001d1c7:	01 c7                	add    edi,eax
c001d1c9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d1ce:	75 0c                	jne    c001d1dc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d1d0:	eb 15                	jmp    c001d1e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d1d2:	47                   	inc    edi
c001d1d3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d1d6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d1da:	eb d3                	jmp    c001d1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d1dc:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d1e1:	0f 85 e8 fe ff ff    	jne    c001d0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1e7:	80 f9 44             	cmp    cl,0x44
c001d1ea:	74 0b                	je     c001d1f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d1ec:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d1f1:	0f 85 d8 fe ff ff    	jne    c001d0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1f7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d1fb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d1ff:	c1 e1 04             	shl    ecx,0x4
c001d202:	83 e8 30             	sub    eax,0x30
c001d205:	09 c8                	or     eax,ecx
c001d207:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d20b:	0f 85 be fe ff ff    	jne    c001d0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d211:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d215:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d219:	c1 e1 04             	shl    ecx,0x4
c001d21c:	83 e8 30             	sub    eax,0x30
c001d21f:	09 c8                	or     eax,ecx
c001d221:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d225:	0f 85 a4 fe ff ff    	jne    c001d0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d22b:	50                   	push   eax
c001d22c:	50                   	push   eax
c001d22d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d231:	50                   	push   eax
c001d232:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d239:	e8 02 35 fe ff       	call   c0000740 <strcpy>
c001d23e:	83 c4 10             	add    esp,0x10
c001d241:	eb 15                	jmp    c001d258 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d243:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d24a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d255:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d258:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d25f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d265:	5b                   	pop    ebx
c001d266:	5e                   	pop    esi
c001d267:	5f                   	pop    edi
c001d268:	5d                   	pop    ebp
c001d269:	c3                   	ret    

c001d26a <PCI::checkBus(unsigned char)>:
c001d26a:	56                   	push   esi
c001d26b:	53                   	push   ebx
c001d26c:	31 db                	xor    ebx,ebx
c001d26e:	51                   	push   ecx
c001d26f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d274:	52                   	push   edx
c001d275:	53                   	push   ebx
c001d276:	43                   	inc    ebx
c001d277:	56                   	push   esi
c001d278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d27c:	e8 37 03 00 00       	call   c001d5b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001d281:	83 c4 10             	add    esp,0x10
c001d284:	83 fb 20             	cmp    ebx,0x20
c001d287:	75 eb                	jne    c001d274 <PCI::checkBus(unsigned char)+0xa>
c001d289:	58                   	pop    eax
c001d28a:	5b                   	pop    ebx
c001d28b:	5e                   	pop    esi
c001d28c:	c3                   	ret    
c001d28d:	90                   	nop

c001d28e <PCI::foundDevice(PCIDeviceInfo)>:
c001d28e:	55                   	push   ebp
c001d28f:	57                   	push   edi
c001d290:	56                   	push   esi
c001d291:	53                   	push   ebx
c001d292:	83 ec 1c             	sub    esp,0x1c
c001d295:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d299:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d29f:	0f 84 52 01 00 00    	je     c001d3f7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2a5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d2a9:	66 81 f9 06 04       	cmp    cx,0x406
c001d2ae:	75 2c                	jne    c001d2dc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d2b0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d2b5:	50                   	push   eax
c001d2b6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d2bb:	50                   	push   eax
c001d2bc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d2c1:	50                   	push   eax
c001d2c2:	56                   	push   esi
c001d2c3:	e8 b4 fb ff ff       	call   c001ce7c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d2c8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d2cc:	0f b6 c0             	movzx  eax,al
c001d2cf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2d3:	83 c4 2c             	add    esp,0x2c
c001d2d6:	5b                   	pop    ebx
c001d2d7:	5e                   	pop    esi
c001d2d8:	5f                   	pop    edi
c001d2d9:	5d                   	pop    ebp
c001d2da:	eb 8e                	jmp    c001d26a <PCI::checkBus(unsigned char)>
c001d2dc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2e0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d2e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d2ea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2ee:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d2f2:	88 d3                	mov    bl,dl
c001d2f4:	85 c0                	test   eax,eax
c001d2f6:	74 33                	je     c001d32b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d2f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2fb:	85 d2                	test   edx,edx
c001d2fd:	74 28                	je     c001d327 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d2ff:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d305:	31 ef                	xor    edi,ebp
c001d307:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d30d:	75 18                	jne    c001d327 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d30f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d313:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d319:	75 0c                	jne    c001d327 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d31b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d321:	0f 84 d0 00 00 00    	je     c001d3f7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d327:	8b 00                	mov    eax,DWORD PTR [eax]
c001d329:	eb c9                	jmp    c001d2f4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d32b:	66 81 f9 01 06       	cmp    cx,0x601
c001d330:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d334:	75 19                	jne    c001d34f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d336:	83 ec 0c             	sub    esp,0xc
c001d339:	68 64 01 00 00       	push   0x164
c001d33e:	e8 80 c6 fe ff       	call   c00099c3 <malloc>
c001d343:	89 c5                	mov    ebp,eax
c001d345:	89 04 24             	mov    DWORD PTR [esp],eax
c001d348:	e8 7b 0e 00 00       	call   c001e1c8 <SATABus::SATABus()>
c001d34d:	eb 1e                	jmp    c001d36d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d34f:	66 81 f9 01 01       	cmp    cx,0x101
c001d354:	75 60                	jne    c001d3b6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d356:	83 ec 0c             	sub    esp,0xc
c001d359:	68 70 02 00 00       	push   0x270
c001d35e:	e8 60 c6 fe ff       	call   c00099c3 <malloc>
c001d363:	89 c5                	mov    ebp,eax
c001d365:	89 04 24             	mov    DWORD PTR [esp],eax
c001d368:	e8 0f 03 00 00       	call   c001d67c <IDE::IDE()>
c001d36d:	58                   	pop    eax
c001d36e:	5a                   	pop    edx
c001d36f:	55                   	push   ebp
c001d370:	56                   	push   esi
c001d371:	e8 38 0b ff ff       	call   c000deae <Device::addChild(Device*)>
c001d376:	83 ec 1c             	sub    esp,0x1c
c001d379:	b9 09 00 00 00       	mov    ecx,0x9
c001d37e:	fc                   	cld    
c001d37f:	89 e7                	mov    edi,esp
c001d381:	89 de                	mov    esi,ebx
c001d383:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d385:	55                   	push   ebp
c001d386:	e8 35 0a ff ff       	call   c000ddc0 <Device::preOpenPCI(PCIDeviceInfo)>
c001d38b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d38e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d392:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d39a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d3a2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d3aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d3ad:	83 c4 4c             	add    esp,0x4c
c001d3b0:	5b                   	pop    ebx
c001d3b1:	5e                   	pop    esi
c001d3b2:	5f                   	pop    edi
c001d3b3:	5d                   	pop    ebp
c001d3b4:	ff e0                	jmp    eax
c001d3b6:	83 ec 0c             	sub    esp,0xc
c001d3b9:	68 58 01 00 00       	push   0x158
c001d3be:	e8 00 c6 fe ff       	call   c00099c3 <malloc>
c001d3c3:	89 c5                	mov    ebp,eax
c001d3c5:	58                   	pop    eax
c001d3c6:	5a                   	pop    edx
c001d3c7:	68 e6 4e 02 c0       	push   0xc0024ee6
c001d3cc:	55                   	push   ebp
c001d3cd:	e8 e6 0d ff ff       	call   c000e1b8 <DriverlessDevice::DriverlessDevice(char const*)>
c001d3d2:	59                   	pop    ecx
c001d3d3:	5f                   	pop    edi
c001d3d4:	55                   	push   ebp
c001d3d5:	56                   	push   esi
c001d3d6:	e8 d3 0a ff ff       	call   c000deae <Device::addChild(Device*)>
c001d3db:	b9 09 00 00 00       	mov    ecx,0x9
c001d3e0:	fc                   	cld    
c001d3e1:	89 df                	mov    edi,ebx
c001d3e3:	89 de                	mov    esi,ebx
c001d3e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3e7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d3eb:	83 c4 2c             	add    esp,0x2c
c001d3ee:	5b                   	pop    ebx
c001d3ef:	5e                   	pop    esi
c001d3f0:	5f                   	pop    edi
c001d3f1:	5d                   	pop    ebp
c001d3f2:	e9 c9 09 ff ff       	jmp    c000ddc0 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3f7:	83 c4 1c             	add    esp,0x1c
c001d3fa:	5b                   	pop    ebx
c001d3fb:	5e                   	pop    esi
c001d3fc:	5f                   	pop    edi
c001d3fd:	5d                   	pop    ebp
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d400:	55                   	push   ebp
c001d401:	57                   	push   edi
c001d402:	56                   	push   esi
c001d403:	53                   	push   ebx
c001d404:	83 ec 68             	sub    esp,0x68
c001d407:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d40b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d416:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d41d:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d422:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d426:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d42d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d432:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d436:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d43b:	6a 0c                	push   0xc
c001d43d:	57                   	push   edi
c001d43e:	53                   	push   ebx
c001d43f:	56                   	push   esi
c001d440:	55                   	push   ebp
c001d441:	e8 88 f8 ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d446:	83 c4 20             	add    esp,0x20
c001d449:	57                   	push   edi
c001d44a:	53                   	push   ebx
c001d44b:	56                   	push   esi
c001d44c:	55                   	push   ebp
c001d44d:	e8 70 f9 ff ff       	call   c001cdc2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d452:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d457:	57                   	push   edi
c001d458:	53                   	push   ebx
c001d459:	56                   	push   esi
c001d45a:	55                   	push   ebp
c001d45b:	e8 f8 f9 ff ff       	call   c001ce58 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d460:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d464:	83 c4 14             	add    esp,0x14
c001d467:	6a 3c                	push   0x3c
c001d469:	57                   	push   edi
c001d46a:	53                   	push   ebx
c001d46b:	56                   	push   esi
c001d46c:	55                   	push   ebp
c001d46d:	e8 5c f8 ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d472:	0f b6 c4             	movzx  eax,ah
c001d475:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d479:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d47d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d481:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001d486:	83 c4 20             	add    esp,0x20
c001d489:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d48f:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d496:	74 7c                	je     c001d514 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d498:	31 c0                	xor    eax,eax
c001d49a:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c001d4a0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4a6:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d4ac:	7e 66                	jle    c001d514 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4ae:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d4b1:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d4b8:	39 cb                	cmp    ebx,ecx
c001d4ba:	75 55                	jne    c001d511 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4bc:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d4c3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d4c7:	75 48                	jne    c001d511 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	68 00 4f 02 c0       	push   0xc0024f00
c001d4d5:	e8 8d f5 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001d4da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4de:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c001d4e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4e8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4ee:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d4f6:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d4fa:	52                   	push   edx
c001d4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ff:	53                   	push   ebx
c001d500:	68 25 4f 02 c0       	push   0xc0024f25
c001d505:	e8 5d f5 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001d50a:	83 c4 20             	add    esp,0x20
c001d50d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d511:	40                   	inc    eax
c001d512:	eb 86                	jmp    c001d49a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d514:	31 d2                	xor    edx,edx
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	57                   	push   edi
c001d51a:	53                   	push   ebx
c001d51b:	56                   	push   esi
c001d51c:	52                   	push   edx
c001d51d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d521:	55                   	push   ebp
c001d522:	e8 7d f9 ff ff       	call   c001cea4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d52b:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d52f:	42                   	inc    edx
c001d530:	83 c4 20             	add    esp,0x20
c001d533:	83 fa 06             	cmp    edx,0x6
c001d536:	75 de                	jne    c001d516 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d538:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d53d:	83 ec 0c             	sub    esp,0xc
c001d540:	86 e0                	xchg   al,ah
c001d542:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d547:	6a 02                	push   0x2
c001d549:	57                   	push   edi
c001d54a:	53                   	push   ebx
c001d54b:	56                   	push   esi
c001d54c:	55                   	push   ebp
c001d54d:	e8 7c f7 ff ff       	call   c001ccce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d552:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d557:	83 c4 20             	add    esp,0x20
c001d55a:	57                   	push   edi
c001d55b:	53                   	push   ebx
c001d55c:	56                   	push   esi
c001d55d:	55                   	push   ebp
c001d55e:	e8 a9 f8 ff ff       	call   c001ce0c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d563:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d567:	57                   	push   edi
c001d568:	53                   	push   ebx
c001d569:	56                   	push   esi
c001d56a:	55                   	push   ebp
c001d56b:	e8 06 f8 ff ff       	call   c001cd76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d570:	b9 09 00 00 00       	mov    ecx,0x9
c001d575:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d57a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d57e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d582:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d586:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d58a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d58e:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d592:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d596:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	fc                   	cld    
c001d59e:	89 e7                	mov    edi,esp
c001d5a0:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d5a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5a6:	55                   	push   ebp
c001d5a7:	e8 e2 fc ff ff       	call   c001d28e <PCI::foundDevice(PCIDeviceInfo)>
c001d5ac:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d5b2:	5b                   	pop    ebx
c001d5b3:	5e                   	pop    esi
c001d5b4:	5f                   	pop    edi
c001d5b5:	5d                   	pop    ebp
c001d5b6:	c3                   	ret    
c001d5b7:	90                   	nop

c001d5b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d5b8:	55                   	push   ebp
c001d5b9:	57                   	push   edi
c001d5ba:	56                   	push   esi
c001d5bb:	53                   	push   ebx
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d5c3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d5c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d5cd:	6a 00                	push   0x0
c001d5cf:	56                   	push   esi
c001d5d0:	57                   	push   edi
c001d5d1:	55                   	push   ebp
c001d5d2:	e8 9f f7 ff ff       	call   c001cd76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5d7:	6a 00                	push   0x0
c001d5d9:	56                   	push   esi
c001d5da:	57                   	push   edi
c001d5db:	55                   	push   ebp
c001d5dc:	e8 1f fe ff ff       	call   c001d400 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5e1:	83 c4 20             	add    esp,0x20
c001d5e4:	6a 00                	push   0x0
c001d5e6:	56                   	push   esi
c001d5e7:	57                   	push   edi
c001d5e8:	55                   	push   ebp
c001d5e9:	e8 ac f7 ff ff       	call   c001cd9a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	84 c0                	test   al,al
c001d5f3:	79 27                	jns    c001d61c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d5f5:	bb 01 00 00 00       	mov    ebx,0x1
c001d5fa:	53                   	push   ebx
c001d5fb:	56                   	push   esi
c001d5fc:	57                   	push   edi
c001d5fd:	55                   	push   ebp
c001d5fe:	e8 73 f7 ff ff       	call   c001cd76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d603:	83 c4 10             	add    esp,0x10
c001d606:	66 40                	inc    ax
c001d608:	74 0c                	je     c001d616 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d60a:	53                   	push   ebx
c001d60b:	56                   	push   esi
c001d60c:	57                   	push   edi
c001d60d:	55                   	push   ebp
c001d60e:	e8 ed fd ff ff       	call   c001d400 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d613:	83 c4 10             	add    esp,0x10
c001d616:	43                   	inc    ebx
c001d617:	83 fb 08             	cmp    ebx,0x8
c001d61a:	75 de                	jne    c001d5fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d61c:	83 c4 0c             	add    esp,0xc
c001d61f:	5b                   	pop    ebx
c001d620:	5e                   	pop    esi
c001d621:	5f                   	pop    edi
c001d622:	5d                   	pop    ebp
c001d623:	c3                   	ret    

c001d624 <PCI::detect()>:
c001d624:	56                   	push   esi
c001d625:	53                   	push   ebx
c001d626:	53                   	push   ebx
c001d627:	31 db                	xor    ebx,ebx
c001d629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d62d:	6a 00                	push   0x0
c001d62f:	6a 00                	push   0x0
c001d631:	6a 00                	push   0x0
c001d633:	56                   	push   esi
c001d634:	e8 61 f7 ff ff       	call   c001cd9a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	a8 80                	test   al,0x80
c001d63e:	75 21                	jne    c001d661 <PCI::detect()+0x3d>
c001d640:	51                   	push   ecx
c001d641:	51                   	push   ecx
c001d642:	6a 00                	push   0x0
c001d644:	56                   	push   esi
c001d645:	e8 20 fc ff ff       	call   c001d26a <PCI::checkBus(unsigned char)>
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	eb 24                	jmp    c001d673 <PCI::detect()+0x4f>
c001d64f:	52                   	push   edx
c001d650:	52                   	push   edx
c001d651:	53                   	push   ebx
c001d652:	43                   	inc    ebx
c001d653:	56                   	push   esi
c001d654:	e8 11 fc ff ff       	call   c001d26a <PCI::checkBus(unsigned char)>
c001d659:	83 c4 10             	add    esp,0x10
c001d65c:	83 fb 08             	cmp    ebx,0x8
c001d65f:	74 12                	je     c001d673 <PCI::detect()+0x4f>
c001d661:	53                   	push   ebx
c001d662:	6a 00                	push   0x0
c001d664:	6a 00                	push   0x0
c001d666:	56                   	push   esi
c001d667:	e8 0a f7 ff ff       	call   c001cd76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d66c:	83 c4 10             	add    esp,0x10
c001d66f:	66 40                	inc    ax
c001d671:	74 dc                	je     c001d64f <PCI::detect()+0x2b>
c001d673:	58                   	pop    eax
c001d674:	5b                   	pop    ebx
c001d675:	5e                   	pop    esi
c001d676:	c3                   	ret    
c001d677:	90                   	nop

c001d678 <IDE::close(int, int, void*)>:
c001d678:	83 c8 ff             	or     eax,0xffffffff
c001d67b:	c3                   	ret    

c001d67c <IDE::IDE()>:
c001d67c:	83 ec 0c             	sub    esp,0xc
c001d67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d683:	83 ec 08             	sub    esp,0x8
c001d686:	68 6c 4f 02 c0       	push   0xc0024f6c
c001d68b:	50                   	push   eax
c001d68c:	e8 cb 0b ff ff       	call   c000e25c <HardDiskController::HardDiskController(char const*)>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	ba fc 4f 02 c0       	mov    edx,0xc0024ffc
c001d699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d69d:	89 10                	mov    DWORD PTR [eax],edx
c001d69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d6aa:	90                   	nop
c001d6ab:	83 c4 0c             	add    esp,0xc
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <IDE::prepareInterrupt(unsigned char)>:
c001d6b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6b9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d6c1:	c3                   	ret    

c001d6c2 <selectDrive(unsigned char, unsigned char)>:
c001d6c2:	c3                   	ret    
c001d6c3:	90                   	nop

c001d6c4 <IDE::getBase(unsigned char)>:
c001d6c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d6c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6cd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d6d5:	c3                   	ret    

c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d6d6:	55                   	push   ebp
c001d6d7:	57                   	push   edi
c001d6d8:	56                   	push   esi
c001d6d9:	53                   	push   ebx
c001d6da:	83 ec 1c             	sub    esp,0x1c
c001d6dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6e5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d6e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6f0:	80 f9 03             	cmp    cl,0x3
c001d6f3:	77 51                	ja     c001d746 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d6f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6f9:	0f b6 f2             	movzx  esi,dl
c001d6fc:	0f b6 db             	movzx  ebx,bl
c001d6ff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d702:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d706:	83 ca 80             	or     edx,0xffffff80
c001d709:	0f b6 d2             	movzx  edx,dl
c001d70c:	52                   	push   edx
c001d70d:	6a 0c                	push   0xc
c001d70f:	56                   	push   esi
c001d710:	57                   	push   edi
c001d711:	e8 c0 ff ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d716:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d71b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d71f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d723:	ee                   	out    dx,al
c001d724:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d729:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d72d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d731:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d735:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d73d:	83 c4 2c             	add    esp,0x2c
c001d740:	5b                   	pop    ebx
c001d741:	5e                   	pop    esi
c001d742:	5f                   	pop    edi
c001d743:	5d                   	pop    ebp
c001d744:	eb 90                	jmp    c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d746:	80 fb 07             	cmp    bl,0x7
c001d749:	77 12                	ja     c001d75d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d74b:	0f b6 d2             	movzx  edx,dl
c001d74e:	0f b6 db             	movzx  ebx,bl
c001d751:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d759:	89 da                	mov    edx,ebx
c001d75b:	eb 2f                	jmp    c001d78c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d75d:	80 fb 0d             	cmp    bl,0xd
c001d760:	77 13                	ja     c001d775 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d762:	0f b6 d2             	movzx  edx,dl
c001d765:	0f b6 db             	movzx  ebx,bl
c001d768:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d76f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d773:	eb 17                	jmp    c001d78c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d775:	80 fb 15             	cmp    bl,0x15
c001d778:	77 13                	ja     c001d78d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d77a:	0f b6 d2             	movzx  edx,dl
c001d77d:	0f b6 db             	movzx  ebx,bl
c001d780:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d788:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d78c:	ee                   	out    dx,al
c001d78d:	83 c4 1c             	add    esp,0x1c
c001d790:	5b                   	pop    ebx
c001d791:	5e                   	pop    esi
c001d792:	5f                   	pop    edi
c001d793:	5d                   	pop    ebp
c001d794:	c3                   	ret    
c001d795:	90                   	nop

c001d796 <IDE::read(unsigned char, unsigned char)>:
c001d796:	55                   	push   ebp
c001d797:	57                   	push   edi
c001d798:	56                   	push   esi
c001d799:	53                   	push   ebx
c001d79a:	83 ec 1c             	sub    esp,0x1c
c001d79d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7a5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d7a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d7ac:	3c 03                	cmp    al,0x3
c001d7ae:	77 43                	ja     c001d7f3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d7b0:	0f b6 f2             	movzx  esi,dl
c001d7b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d7b6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d7ba:	83 c8 80             	or     eax,0xffffff80
c001d7bd:	0f b6 c0             	movzx  eax,al
c001d7c0:	50                   	push   eax
c001d7c1:	6a 0c                	push   0xc
c001d7c3:	56                   	push   esi
c001d7c4:	57                   	push   edi
c001d7c5:	e8 0c ff ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d7cf:	0f b6 c3             	movzx  eax,bl
c001d7d2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d7d6:	ec                   	in     al,dx
c001d7d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d7db:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d7e0:	52                   	push   edx
c001d7e1:	6a 0c                	push   0xc
c001d7e3:	56                   	push   esi
c001d7e4:	57                   	push   edi
c001d7e5:	e8 ec fe ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ea:	83 c4 20             	add    esp,0x20
c001d7ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d7f1:	eb 49                	jmp    c001d83c <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7f3:	80 fb 07             	cmp    bl,0x7
c001d7f6:	77 12                	ja     c001d80a <IDE::read(unsigned char, unsigned char)+0x74>
c001d7f8:	0f b6 d2             	movzx  edx,dl
c001d7fb:	0f b6 c3             	movzx  eax,bl
c001d7fe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d806:	89 c2                	mov    edx,eax
c001d808:	eb 31                	jmp    c001d83b <IDE::read(unsigned char, unsigned char)+0xa5>
c001d80a:	80 fb 0d             	cmp    bl,0xd
c001d80d:	77 13                	ja     c001d822 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d80f:	0f b6 d2             	movzx  edx,dl
c001d812:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d819:	0f b6 d3             	movzx  edx,bl
c001d81c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d820:	eb 19                	jmp    c001d83b <IDE::read(unsigned char, unsigned char)+0xa5>
c001d822:	31 c0                	xor    eax,eax
c001d824:	80 fb 15             	cmp    bl,0x15
c001d827:	77 13                	ja     c001d83c <IDE::read(unsigned char, unsigned char)+0xa6>
c001d829:	0f b6 d2             	movzx  edx,dl
c001d82c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d834:	0f b6 d3             	movzx  edx,bl
c001d837:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d83b:	ec                   	in     al,dx
c001d83c:	83 c4 1c             	add    esp,0x1c
c001d83f:	5b                   	pop    ebx
c001d840:	5e                   	pop    esi
c001d841:	5f                   	pop    edi
c001d842:	5d                   	pop    ebp
c001d843:	c3                   	ret    

c001d844 <IDE::waitInterrupt(unsigned char)>:
c001d844:	55                   	push   ebp
c001d845:	57                   	push   edi
c001d846:	56                   	push   esi
c001d847:	53                   	push   ebx
c001d848:	31 db                	xor    ebx,ebx
c001d84a:	83 ec 0c             	sub    esp,0xc
c001d84d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d851:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d856:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d85e:	89 e8                	mov    eax,ebp
c001d860:	84 c0                	test   al,al
c001d862:	75 30                	jne    c001d894 <IDE::waitInterrupt(unsigned char)+0x50>
c001d864:	50                   	push   eax
c001d865:	6a 0c                	push   0xc
c001d867:	56                   	push   esi
c001d868:	57                   	push   edi
c001d869:	e8 28 ff ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	a8 01                	test   al,0x1
c001d873:	75 27                	jne    c001d89c <IDE::waitInterrupt(unsigned char)+0x58>
c001d875:	f6 c3 04             	test   bl,0x4
c001d878:	75 12                	jne    c001d88c <IDE::waitInterrupt(unsigned char)+0x48>
c001d87a:	83 fb 32             	cmp    ebx,0x32
c001d87d:	7e 0d                	jle    c001d88c <IDE::waitInterrupt(unsigned char)+0x48>
c001d87f:	83 ec 0c             	sub    esp,0xc
c001d882:	6a 64                	push   0x64
c001d884:	e8 6b a9 ff ff       	call   c00181f4 <milliTenthSleep(unsigned int)>
c001d889:	83 c4 10             	add    esp,0x10
c001d88c:	83 fb 3c             	cmp    ebx,0x3c
c001d88f:	74 0b                	je     c001d89c <IDE::waitInterrupt(unsigned char)+0x58>
c001d891:	43                   	inc    ebx
c001d892:	eb c2                	jmp    c001d856 <IDE::waitInterrupt(unsigned char)+0x12>
c001d894:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d89c:	83 c4 0c             	add    esp,0xc
c001d89f:	89 e8                	mov    eax,ebp
c001d8a1:	5b                   	pop    ebx
c001d8a2:	5e                   	pop    esi
c001d8a3:	5f                   	pop    edi
c001d8a4:	5d                   	pop    ebp
c001d8a5:	c3                   	ret    

c001d8a6 <ideChannel0IRQHandler(regs*, void*)>:
c001d8a6:	83 ec 10             	sub    esp,0x10
c001d8a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d8b4:	6a 07                	push   0x7
c001d8b6:	6a 00                	push   0x0
c001d8b8:	50                   	push   eax
c001d8b9:	e8 d8 fe ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001d8be:	83 c4 1c             	add    esp,0x1c
c001d8c1:	c3                   	ret    

c001d8c2 <ideChannel1IRQHandler(regs*, void*)>:
c001d8c2:	83 ec 10             	sub    esp,0x10
c001d8c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8c9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d8d0:	6a 07                	push   0x7
c001d8d2:	6a 01                	push   0x1
c001d8d4:	50                   	push   eax
c001d8d5:	e8 bc fe ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001d8da:	83 c4 1c             	add    esp,0x1c
c001d8dd:	c3                   	ret    

c001d8de <IDE::enableIRQs(unsigned char, bool)>:
c001d8de:	57                   	push   edi
c001d8df:	56                   	push   esi
c001d8e0:	be 04 00 00 00       	mov    esi,0x4
c001d8e5:	53                   	push   ebx
c001d8e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d8eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8ef:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d8f4:	0f 94 c0             	sete   al
c001d8f7:	d1 e0                	shl    eax,1
c001d8f9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d900:	0f b6 c0             	movzx  eax,al
c001d903:	50                   	push   eax
c001d904:	6a 0c                	push   0xc
c001d906:	57                   	push   edi
c001d907:	53                   	push   ebx
c001d908:	e8 c9 fd ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d90d:	83 c4 10             	add    esp,0x10
c001d910:	50                   	push   eax
c001d911:	6a 0c                	push   0xc
c001d913:	57                   	push   edi
c001d914:	53                   	push   ebx
c001d915:	e8 7c fe ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	4e                   	dec    esi
c001d91e:	75 f0                	jne    c001d910 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d920:	5b                   	pop    ebx
c001d921:	5e                   	pop    esi
c001d922:	5f                   	pop    edi
c001d923:	c3                   	ret    

c001d924 <IDE::open(int, int, void*)>:
c001d924:	55                   	push   ebp
c001d925:	57                   	push   edi
c001d926:	56                   	push   esi
c001d927:	53                   	push   ebx
c001d928:	83 ec 1c             	sub    esp,0x1c
c001d92b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d92f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d938:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d941:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d948:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d94f:	0f 85 b0 02 00 00    	jne    c001dc05 <IDE::open(int, int, void*)+0x2e1>
c001d955:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d95b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d95f:	83 e0 7f             	and    eax,0x7f
c001d962:	3c 05                	cmp    al,0x5
c001d964:	74 04                	je     c001d96a <IDE::open(int, int, void*)+0x46>
c001d966:	3c 0f                	cmp    al,0xf
c001d968:	75 32                	jne    c001d99c <IDE::open(int, int, void*)+0x78>
c001d96a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d970:	83 e0 fc             	and    eax,0xfffffffc
c001d973:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d97a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d980:	83 e0 fc             	and    eax,0xfffffffc
c001d983:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d98a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d990:	83 e0 fc             	and    eax,0xfffffffc
c001d993:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d99a:	eb 14                	jmp    c001d9b0 <IDE::open(int, int, void*)+0x8c>
c001d99c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d9a6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d9b0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d9b7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d9be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9c2:	89 c6                	mov    esi,eax
c001d9c4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d9c9:	c1 e6 10             	shl    esi,0x10
c001d9cc:	89 e8                	mov    eax,ebp
c001d9ce:	89 fa                	mov    edx,edi
c001d9d0:	c1 e0 0b             	shl    eax,0xb
c001d9d3:	09 f0                	or     eax,esi
c001d9d5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d9dc:	c1 e6 08             	shl    esi,0x8
c001d9df:	09 c6                	or     esi,eax
c001d9e1:	89 f0                	mov    eax,esi
c001d9e3:	0d 08 00 00 80       	or     eax,0x80000008
c001d9e8:	ef                   	out    dx,eax
c001d9e9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d9ee:	89 ca                	mov    edx,ecx
c001d9f0:	ed                   	in     eax,dx
c001d9f1:	c1 e8 10             	shr    eax,0x10
c001d9f4:	3d ff ff 00 00       	cmp    eax,0xffff
c001d9f9:	0f 84 f5 00 00 00    	je     c001daf4 <IDE::open(int, int, void*)+0x1d0>
c001d9ff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da05:	89 fa                	mov    edx,edi
c001da07:	89 f0                	mov    eax,esi
c001da09:	ef                   	out    dx,eax
c001da0a:	b0 fe                	mov    al,0xfe
c001da0c:	89 ca                	mov    edx,ecx
c001da0e:	ee                   	out    dx,al
c001da0f:	89 f0                	mov    eax,esi
c001da11:	89 fa                	mov    edx,edi
c001da13:	ef                   	out    dx,eax
c001da14:	89 ca                	mov    edx,ecx
c001da16:	ed                   	in     eax,dx
c001da17:	3c fe                	cmp    al,0xfe
c001da19:	0f 85 a9 00 00 00    	jne    c001dac8 <IDE::open(int, int, void*)+0x1a4>
c001da1f:	8b 15 c8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263c8
c001da25:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da2c:	74 33                	je     c001da61 <IDE::open(int, int, void*)+0x13d>
c001da2e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da34:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da38:	40                   	inc    eax
c001da39:	83 ec 0c             	sub    esp,0xc
c001da3c:	0f b6 c0             	movzx  eax,al
c001da3f:	50                   	push   eax
c001da40:	55                   	push   ebp
c001da41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da45:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001da4b:	51                   	push   ecx
c001da4c:	e8 0f 44 ff ff       	call   c0011e60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001da51:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001da56:	83 c4 1c             	add    esp,0x1c
c001da59:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da5f:	eb 0a                	jmp    c001da6b <IDE::open(int, int, void*)+0x147>
c001da61:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da6b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da72:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da79:	c1 e1 10             	shl    ecx,0x10
c001da7c:	c1 e0 08             	shl    eax,0x8
c001da7f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da84:	09 c1                	or     ecx,eax
c001da86:	89 fa                	mov    edx,edi
c001da88:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da8f:	c1 e0 0b             	shl    eax,0xb
c001da92:	09 c1                	or     ecx,eax
c001da94:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da9a:	89 c8                	mov    eax,ecx
c001da9c:	ef                   	out    dx,eax
c001da9d:	be fc 0c 00 00       	mov    esi,0xcfc
c001daa2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001daa8:	89 f2                	mov    edx,esi
c001daaa:	ee                   	out    dx,al
c001daab:	89 c8                	mov    eax,ecx
c001daad:	89 fa                	mov    edx,edi
c001daaf:	ef                   	out    dx,eax
c001dab0:	89 f2                	mov    edx,esi
c001dab2:	ed                   	in     eax,dx
c001dab3:	0f b6 c0             	movzx  eax,al
c001dab6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dabc:	74 46                	je     c001db04 <IDE::open(int, int, void*)+0x1e0>
c001dabe:	83 ec 0c             	sub    esp,0xc
c001dac1:	68 84 4f 02 c0       	push   0xc0024f84
c001dac6:	eb 34                	jmp    c001dafc <IDE::open(int, int, void*)+0x1d8>
c001dac8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001dad1:	75 17                	jne    c001daea <IDE::open(int, int, void*)+0x1c6>
c001dad3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001dad8:	74 07                	je     c001dae1 <IDE::open(int, int, void*)+0x1bd>
c001dada:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001dadf:	75 09                	jne    c001daea <IDE::open(int, int, void*)+0x1c6>
c001dae1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dae8:	eb 1a                	jmp    c001db04 <IDE::open(int, int, void*)+0x1e0>
c001daea:	83 ec 0c             	sub    esp,0xc
c001daed:	68 8c 4f 02 c0       	push   0xc0024f8c
c001daf2:	eb 08                	jmp    c001dafc <IDE::open(int, int, void*)+0x1d8>
c001daf4:	83 ec 0c             	sub    esp,0xc
c001daf7:	68 bd 4f 02 c0       	push   0xc0024fbd
c001dafc:	e8 28 68 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001db01:	83 c4 10             	add    esp,0x10
c001db04:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db0b:	79 1a                	jns    c001db27 <IDE::open(int, int, void*)+0x203>
c001db0d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db13:	83 e0 fc             	and    eax,0xfffffffc
c001db16:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db1d:	83 c0 08             	add    eax,0x8
c001db20:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db27:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db2d:	89 c2                	mov    edx,eax
c001db2f:	83 e2 0f             	and    edx,0xf
c001db32:	66 83 fa 08          	cmp    dx,0x8
c001db36:	75 0a                	jne    c001db42 <IDE::open(int, int, void*)+0x21e>
c001db38:	83 e8 02             	sub    eax,0x2
c001db3b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db42:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001db48:	89 c2                	mov    edx,eax
c001db4a:	83 e2 0f             	and    edx,0xf
c001db4d:	66 83 fa 08          	cmp    dx,0x8
c001db51:	75 0a                	jne    c001db5d <IDE::open(int, int, void*)+0x239>
c001db53:	83 e8 02             	sub    eax,0x2
c001db56:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db5d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001db64:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db6b:	89 d0                	mov    eax,edx
c001db6d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db70:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db74:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db78:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db7b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db80:	0f b6 c9             	movzx  ecx,cl
c001db83:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db8a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db8d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db91:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db95:	8d 50 02             	lea    edx,[eax+0x2]
c001db98:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db9d:	0f b6 d2             	movzx  edx,dl
c001dba0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dba6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dba9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbad:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dbb1:	8d 48 03             	lea    ecx,[eax+0x3]
c001dbb4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbb9:	0f b6 c9             	movzx  ecx,cl
c001dbbc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dbc2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbc5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbc9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dbcd:	8d 50 04             	lea    edx,[eax+0x4]
c001dbd0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dbd6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbdb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dbe2:	66 85 f6             	test   si,si
c001dbe5:	74 5b                	je     c001dc42 <IDE::open(int, int, void*)+0x31e>
c001dbe7:	0f b6 d2             	movzx  edx,dl
c001dbea:	83 c0 05             	add    eax,0x5
c001dbed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbf0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbf4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dbf8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dbfe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc03:	eb 3d                	jmp    c001dc42 <IDE::open(int, int, void*)+0x31e>
c001dc05:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc0b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc12:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc19:	66 05 06 02          	add    ax,0x206
c001dc1d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc24:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc2b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc32:	66 05 06 02          	add    ax,0x206
c001dc36:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc3d:	e9 e5 fe ff ff       	jmp    c001db27 <IDE::open(int, int, void*)+0x203>
c001dc42:	50                   	push   eax
c001dc43:	50                   	push   eax
c001dc44:	6a 00                	push   0x0
c001dc46:	53                   	push   ebx
c001dc47:	e8 64 fa ff ff       	call   c001d6b0 <IDE::prepareInterrupt(unsigned char)>
c001dc4c:	5a                   	pop    edx
c001dc4d:	59                   	pop    ecx
c001dc4e:	6a 01                	push   0x1
c001dc50:	53                   	push   ebx
c001dc51:	e8 5a fa ff ff       	call   c001d6b0 <IDE::prepareInterrupt(unsigned char)>
c001dc56:	83 c4 0c             	add    esp,0xc
c001dc59:	6a 00                	push   0x0
c001dc5b:	6a 00                	push   0x0
c001dc5d:	53                   	push   ebx
c001dc5e:	e8 7b fc ff ff       	call   c001d8de <IDE::enableIRQs(unsigned char, bool)>
c001dc63:	83 c4 0c             	add    esp,0xc
c001dc66:	6a 00                	push   0x0
c001dc68:	6a 01                	push   0x1
c001dc6a:	53                   	push   ebx
c001dc6b:	e8 6e fc ff ff       	call   c001d8de <IDE::enableIRQs(unsigned char, bool)>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc7a:	74 34                	je     c001dcb0 <IDE::open(int, int, void*)+0x38c>
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	53                   	push   ebx
c001dc80:	6a 01                	push   0x1
c001dc82:	68 a6 d8 01 c0       	push   0xc001d8a6
c001dc87:	6a 0e                	push   0xe
c001dc89:	53                   	push   ebx
c001dc8a:	e8 97 01 ff ff       	call   c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc8f:	83 c4 14             	add    esp,0x14
c001dc92:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc98:	53                   	push   ebx
c001dc99:	6a 01                	push   0x1
c001dc9b:	68 c2 d8 01 c0       	push   0xc001d8c2
c001dca0:	6a 0f                	push   0xf
c001dca2:	53                   	push   ebx
c001dca3:	e8 7e 01 ff ff       	call   c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dca8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dcae:	eb 38                	jmp    c001dce8 <IDE::open(int, int, void*)+0x3c4>
c001dcb0:	83 ec 0c             	sub    esp,0xc
c001dcb3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dcbd:	53                   	push   ebx
c001dcbe:	6a 00                	push   0x0
c001dcc0:	68 a6 d8 01 c0       	push   0xc001d8a6
c001dcc5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dccb:	53                   	push   ebx
c001dccc:	e8 55 01 ff ff       	call   c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcd1:	83 c4 14             	add    esp,0x14
c001dcd4:	53                   	push   ebx
c001dcd5:	6a 00                	push   0x0
c001dcd7:	68 c2 d8 01 c0       	push   0xc001d8c2
c001dcdc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dce2:	53                   	push   ebx
c001dce3:	e8 3e 01 ff ff       	call   c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dce8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dcea:	83 c4 20             	add    esp,0x20
c001dced:	83 ec 0c             	sub    esp,0xc
c001dcf0:	53                   	push   ebx
c001dcf1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dcf4:	83 c4 0c             	add    esp,0xc
c001dcf7:	6a 07                	push   0x7
c001dcf9:	6a 00                	push   0x0
c001dcfb:	53                   	push   ebx
c001dcfc:	e8 95 fa ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001dd01:	83 c4 0c             	add    esp,0xc
c001dd04:	6a 07                	push   0x7
c001dd06:	6a 01                	push   0x1
c001dd08:	53                   	push   ebx
c001dd09:	e8 88 fa ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001dd0e:	83 c4 0c             	add    esp,0xc
c001dd11:	6a 01                	push   0x1
c001dd13:	6a 00                	push   0x0
c001dd15:	53                   	push   ebx
c001dd16:	e8 c3 fb ff ff       	call   c001d8de <IDE::enableIRQs(unsigned char, bool)>
c001dd1b:	83 c4 0c             	add    esp,0xc
c001dd1e:	6a 01                	push   0x1
c001dd20:	6a 01                	push   0x1
c001dd22:	53                   	push   ebx
c001dd23:	e8 b6 fb ff ff       	call   c001d8de <IDE::enableIRQs(unsigned char, bool)>
c001dd28:	83 c4 2c             	add    esp,0x2c
c001dd2b:	31 c0                	xor    eax,eax
c001dd2d:	5b                   	pop    ebx
c001dd2e:	5e                   	pop    esi
c001dd2f:	5f                   	pop    edi
c001dd30:	5d                   	pop    ebp
c001dd31:	c3                   	ret    

c001dd32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd32:	55                   	push   ebp
c001dd33:	57                   	push   edi
c001dd34:	56                   	push   esi
c001dd35:	53                   	push   ebx
c001dd36:	83 ec 1c             	sub    esp,0x1c
c001dd39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd41:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd48:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd50:	80 fa 03             	cmp    dl,0x3
c001dd53:	77 5d                	ja     c001ddb2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dd55:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd5d:	0f b6 db             	movzx  ebx,bl
c001dd60:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd63:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dd67:	83 ca 80             	or     edx,0xffffff80
c001dd6a:	0f b6 d2             	movzx  edx,dl
c001dd6d:	52                   	push   edx
c001dd6e:	6a 0c                	push   0xc
c001dd70:	53                   	push   ebx
c001dd71:	56                   	push   esi
c001dd72:	e8 5f f9 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd77:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dd7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd84:	0f b6 c0             	movzx  eax,al
c001dd87:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd8b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd8d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd92:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd96:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd9e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dda6:	83 c4 2c             	add    esp,0x2c
c001dda9:	5b                   	pop    ebx
c001ddaa:	5e                   	pop    esi
c001ddab:	5f                   	pop    edi
c001ddac:	5d                   	pop    ebp
c001ddad:	e9 24 f9 ff ff       	jmp    c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddb2:	3c 07                	cmp    al,0x7
c001ddb4:	77 10                	ja     c001ddc6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ddb6:	0f b6 db             	movzx  ebx,bl
c001ddb9:	0f b6 d0             	movzx  edx,al
c001ddbc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ddc4:	eb 2d                	jmp    c001ddf3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ddc6:	3c 0d                	cmp    al,0xd
c001ddc8:	77 13                	ja     c001dddd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ddca:	0f b6 db             	movzx  ebx,bl
c001ddcd:	0f b6 c0             	movzx  eax,al
c001ddd0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ddd7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dddb:	eb 16                	jmp    c001ddf3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dddd:	3c 15                	cmp    al,0x15
c001dddf:	77 14                	ja     c001ddf5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dde1:	0f b6 db             	movzx  ebx,bl
c001dde4:	0f b6 c0             	movzx  eax,al
c001dde7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ddef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ddf3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ddf5:	83 c4 1c             	add    esp,0x1c
c001ddf8:	5b                   	pop    ebx
c001ddf9:	5e                   	pop    esi
c001ddfa:	5f                   	pop    edi
c001ddfb:	5d                   	pop    ebp
c001ddfc:	c3                   	ret    
c001ddfd:	90                   	nop

c001ddfe <IDE::detect()>:
c001ddfe:	55                   	push   ebp
c001ddff:	57                   	push   edi
c001de00:	56                   	push   esi
c001de01:	53                   	push   ebx
c001de02:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de08:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de0f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de16:	0f 85 97 02 00 00    	jne    c001e0b3 <IDE::detect()+0x2b5>
c001de1c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de23:	31 f6                	xor    esi,esi
c001de25:	31 ed                	xor    ebp,ebp
c001de27:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de2f:	89 e8                	mov    eax,ebp
c001de31:	c1 e0 06             	shl    eax,0x6
c001de34:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de3c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de44:	c1 e0 04             	shl    eax,0x4
c001de47:	83 c8 a0             	or     eax,0xffffffa0
c001de4a:	0f b6 c0             	movzx  eax,al
c001de4d:	50                   	push   eax
c001de4e:	6a 06                	push   0x6
c001de50:	56                   	push   esi
c001de51:	53                   	push   ebx
c001de52:	e8 7f f8 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de57:	83 c4 0c             	add    esp,0xc
c001de5a:	6a 0c                	push   0xc
c001de5c:	56                   	push   esi
c001de5d:	53                   	push   ebx
c001de5e:	e8 33 f9 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001de63:	83 c4 0c             	add    esp,0xc
c001de66:	6a 0c                	push   0xc
c001de68:	56                   	push   esi
c001de69:	53                   	push   ebx
c001de6a:	e8 27 f9 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001de6f:	83 c4 0c             	add    esp,0xc
c001de72:	6a 0c                	push   0xc
c001de74:	56                   	push   esi
c001de75:	53                   	push   ebx
c001de76:	e8 1b f9 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001de7b:	83 c4 0c             	add    esp,0xc
c001de7e:	6a 0c                	push   0xc
c001de80:	56                   	push   esi
c001de81:	53                   	push   ebx
c001de82:	e8 0f f9 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001de87:	68 ec 00 00 00       	push   0xec
c001de8c:	6a 07                	push   0x7
c001de8e:	56                   	push   esi
c001de8f:	53                   	push   ebx
c001de90:	e8 41 f8 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de95:	83 c4 1c             	add    esp,0x1c
c001de98:	6a 0c                	push   0xc
c001de9a:	56                   	push   esi
c001de9b:	53                   	push   ebx
c001de9c:	e8 f5 f8 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001dea1:	83 c4 0c             	add    esp,0xc
c001dea4:	6a 0c                	push   0xc
c001dea6:	56                   	push   esi
c001dea7:	53                   	push   ebx
c001dea8:	e8 e9 f8 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001dead:	83 c4 0c             	add    esp,0xc
c001deb0:	6a 0c                	push   0xc
c001deb2:	56                   	push   esi
c001deb3:	53                   	push   ebx
c001deb4:	e8 dd f8 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001deb9:	83 c4 0c             	add    esp,0xc
c001debc:	6a 0c                	push   0xc
c001debe:	56                   	push   esi
c001debf:	53                   	push   ebx
c001dec0:	e8 d1 f8 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001dec5:	83 c4 0c             	add    esp,0xc
c001dec8:	6a 0c                	push   0xc
c001deca:	56                   	push   esi
c001decb:	53                   	push   ebx
c001decc:	e8 c5 f8 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001ded1:	83 c4 10             	add    esp,0x10
c001ded4:	84 c0                	test   al,al
c001ded6:	0f 84 5f 01 00 00    	je     c001e03b <IDE::detect()+0x23d>
c001dedc:	31 ff                	xor    edi,edi
c001dede:	50                   	push   eax
c001dedf:	6a 0c                	push   0xc
c001dee1:	56                   	push   esi
c001dee2:	53                   	push   ebx
c001dee3:	e8 ae f8 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001dee8:	83 c4 10             	add    esp,0x10
c001deeb:	a8 01                	test   al,0x1
c001deed:	0f 85 69 01 00 00    	jne    c001e05c <IDE::detect()+0x25e>
c001def3:	84 c0                	test   al,al
c001def5:	78 04                	js     c001defb <IDE::detect()+0xfd>
c001def7:	a8 08                	test   al,0x8
c001def9:	75 23                	jne    c001df1e <IDE::detect()+0x120>
c001defb:	47                   	inc    edi
c001defc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df02:	7e da                	jle    c001dede <IDE::detect()+0xe0>
c001df04:	83 ec 0c             	sub    esp,0xc
c001df07:	6a 32                	push   0x32
c001df09:	e8 e6 a2 ff ff       	call   c00181f4 <milliTenthSleep(unsigned int)>
c001df0e:	83 c4 10             	add    esp,0x10
c001df11:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df17:	75 c5                	jne    c001dede <IDE::detect()+0xe0>
c001df19:	e9 3e 01 00 00       	jmp    c001e05c <IDE::detect()+0x25e>
c001df1e:	31 c9                	xor    ecx,ecx
c001df20:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df24:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df28:	83 ec 0c             	sub    esp,0xc
c001df2b:	68 80 00 00 00       	push   0x80
c001df30:	57                   	push   edi
c001df31:	6a 00                	push   0x0
c001df33:	56                   	push   esi
c001df34:	53                   	push   ebx
c001df35:	e8 f8 fd ff ff       	call   c001dd32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df3a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df3f:	89 e8                	mov    eax,ebp
c001df41:	89 d1                	mov    ecx,edx
c001df43:	c1 e0 06             	shl    eax,0x6
c001df46:	01 d8                	add    eax,ebx
c001df48:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001df4f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001df56:	89 f2                	mov    edx,esi
c001df58:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001df5e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001df62:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001df68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df6c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001df73:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001df7b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001df82:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df8a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df90:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001df97:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001df9d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dfa1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dfa5:	83 c4 20             	add    esp,0x20
c001dfa8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001dfab:	83 c0 02             	add    eax,0x2
c001dfae:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001dfb4:	83 c7 02             	add    edi,0x2
c001dfb7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001dfba:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001dfc0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001dfc4:	75 e2                	jne    c001dfa8 <IDE::detect()+0x1aa>
c001dfc6:	89 e8                	mov    eax,ebp
c001dfc8:	c1 e0 06             	shl    eax,0x6
c001dfcb:	01 d8                	add    eax,ebx
c001dfcd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001dfd3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001dfda:	66 c1 ea 09          	shr    dx,0x9
c001dfde:	83 e2 01             	and    edx,0x1
c001dfe1:	84 c9                	test   cl,cl
c001dfe3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001dfe9:	75 22                	jne    c001e00d <IDE::detect()+0x20f>
c001dfeb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001dff2:	74 46                	je     c001e03a <IDE::detect()+0x23c>
c001dff4:	83 ec 0c             	sub    esp,0xc
c001dff7:	68 7c 01 00 00       	push   0x17c
c001dffc:	e8 c2 b9 fe ff       	call   c00099c3 <malloc>
c001e001:	89 c7                	mov    edi,eax
c001e003:	89 04 24             	mov    DWORD PTR [esp],eax
c001e006:	e8 13 05 00 00       	call   c001e51e <ATA::ATA()>
c001e00b:	eb 17                	jmp    c001e024 <IDE::detect()+0x226>
c001e00d:	83 ec 0c             	sub    esp,0xc
c001e010:	68 80 01 00 00       	push   0x180
c001e015:	e8 a9 b9 fe ff       	call   c00099c3 <malloc>
c001e01a:	89 c7                	mov    edi,eax
c001e01c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e01f:	e8 82 0b 00 00       	call   c001eba6 <ATAPI::ATAPI()>
c001e024:	5a                   	pop    edx
c001e025:	59                   	pop    ecx
c001e026:	57                   	push   edi
c001e027:	53                   	push   ebx
c001e028:	e8 81 fe fe ff       	call   c000deae <Device::addChild(Device*)>
c001e02d:	8b 07                	mov    eax,DWORD PTR [edi]
c001e02f:	53                   	push   ebx
c001e030:	55                   	push   ebp
c001e031:	6a 00                	push   0x0
c001e033:	57                   	push   edi
c001e034:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e037:	83 c4 20             	add    esp,0x20
c001e03a:	45                   	inc    ebp
c001e03b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e040:	74 0d                	je     c001e04f <IDE::detect()+0x251>
c001e042:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e04a:	e9 e0 fd ff ff       	jmp    c001de2f <IDE::detect()+0x31>
c001e04f:	4e                   	dec    esi
c001e050:	74 61                	je     c001e0b3 <IDE::detect()+0x2b5>
c001e052:	be 01 00 00 00       	mov    esi,0x1
c001e057:	e9 cb fd ff ff       	jmp    c001de27 <IDE::detect()+0x29>
c001e05c:	50                   	push   eax
c001e05d:	6a 04                	push   0x4
c001e05f:	56                   	push   esi
c001e060:	53                   	push   ebx
c001e061:	e8 30 f7 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001e066:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e06a:	83 c4 0c             	add    esp,0xc
c001e06d:	6a 05                	push   0x5
c001e06f:	56                   	push   esi
c001e070:	53                   	push   ebx
c001e071:	e8 20 f7 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001e076:	83 c4 10             	add    esp,0x10
c001e079:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e07d:	80 fa 14             	cmp    dl,0x14
c001e080:	75 04                	jne    c001e086 <IDE::detect()+0x288>
c001e082:	3c eb                	cmp    al,0xeb
c001e084:	eb 07                	jmp    c001e08d <IDE::detect()+0x28f>
c001e086:	3c 96                	cmp    al,0x96
c001e088:	75 b1                	jne    c001e03b <IDE::detect()+0x23d>
c001e08a:	80 fa 69             	cmp    dl,0x69
c001e08d:	75 ac                	jne    c001e03b <IDE::detect()+0x23d>
c001e08f:	68 a1 00 00 00       	push   0xa1
c001e094:	6a 07                	push   0x7
c001e096:	56                   	push   esi
c001e097:	53                   	push   ebx
c001e098:	e8 39 f6 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e09d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e0a4:	e8 4b a1 ff ff       	call   c00181f4 <milliTenthSleep(unsigned int)>
c001e0a9:	83 c4 10             	add    esp,0x10
c001e0ac:	b1 01                	mov    cl,0x1
c001e0ae:	e9 6d fe ff ff       	jmp    c001df20 <IDE::detect()+0x122>
c001e0b3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e0b9:	5b                   	pop    ebx
c001e0ba:	5e                   	pop    esi
c001e0bb:	5f                   	pop    edi
c001e0bc:	5d                   	pop    ebp
c001e0bd:	c3                   	ret    

c001e0be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e0be:	55                   	push   ebp
c001e0bf:	57                   	push   edi
c001e0c0:	56                   	push   esi
c001e0c1:	53                   	push   ebx
c001e0c2:	83 ec 1c             	sub    esp,0x1c
c001e0c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0cd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e0d5:	88 c3                	mov    bl,al
c001e0d7:	84 c0                	test   al,al
c001e0d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0dd:	0f 84 81 00 00 00    	je     c001e164 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0e3:	83 ec 0c             	sub    esp,0xc
c001e0e6:	68 e7 4f 02 c0       	push   0xc0024fe7
c001e0eb:	e8 77 e9 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e0f0:	83 c4 10             	add    esp,0x10
c001e0f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0f7:	3c 01                	cmp    al,0x1
c001e0f9:	74 63                	je     c001e15e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e0fb:	3c 02                	cmp    al,0x2
c001e0fd:	75 53                	jne    c001e152 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e0ff:	d1 e6                	shl    esi,1
c001e101:	09 ee                	or     esi,ebp
c001e103:	50                   	push   eax
c001e104:	89 f0                	mov    eax,esi
c001e106:	6a 01                	push   0x1
c001e108:	0f b6 f0             	movzx  esi,al
c001e10b:	c1 e6 06             	shl    esi,0x6
c001e10e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e116:	50                   	push   eax
c001e117:	57                   	push   edi
c001e118:	e8 79 f6 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	a8 01                	test   al,0x1
c001e122:	74 02                	je     c001e126 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e124:	b3 07                	mov    bl,0x7
c001e126:	a8 02                	test   al,0x2
c001e128:	74 02                	je     c001e12c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e12a:	b3 03                	mov    bl,0x3
c001e12c:	a8 04                	test   al,0x4
c001e12e:	74 02                	je     c001e132 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e130:	b3 14                	mov    bl,0x14
c001e132:	a8 08                	test   al,0x8
c001e134:	74 02                	je     c001e138 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e136:	b3 03                	mov    bl,0x3
c001e138:	a8 10                	test   al,0x10
c001e13a:	74 02                	je     c001e13e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e13c:	b3 15                	mov    bl,0x15
c001e13e:	a8 20                	test   al,0x20
c001e140:	74 02                	je     c001e144 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e142:	b3 03                	mov    bl,0x3
c001e144:	a8 40                	test   al,0x40
c001e146:	74 02                	je     c001e14a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e148:	b3 16                	mov    bl,0x16
c001e14a:	84 c0                	test   al,al
c001e14c:	79 16                	jns    c001e164 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e14e:	b3 0d                	mov    bl,0xd
c001e150:	eb 12                	jmp    c001e164 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e152:	3c 03                	cmp    al,0x3
c001e154:	74 0c                	je     c001e162 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e156:	3c 04                	cmp    al,0x4
c001e158:	75 0a                	jne    c001e164 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15a:	b3 08                	mov    bl,0x8
c001e15c:	eb 06                	jmp    c001e164 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15e:	b3 13                	mov    bl,0x13
c001e160:	eb 02                	jmp    c001e164 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e162:	b3 17                	mov    bl,0x17
c001e164:	83 c4 1c             	add    esp,0x1c
c001e167:	88 d8                	mov    al,bl
c001e169:	5b                   	pop    ebx
c001e16a:	5e                   	pop    esi
c001e16b:	5f                   	pop    edi
c001e16c:	5d                   	pop    ebp
c001e16d:	c3                   	ret    

c001e16e <IDE::polling(unsigned char, unsigned int)>:
c001e16e:	57                   	push   edi
c001e16f:	56                   	push   esi
c001e170:	53                   	push   ebx
c001e171:	bb 04 00 00 00       	mov    ebx,0x4
c001e176:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e17a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e17f:	52                   	push   edx
c001e180:	6a 0c                	push   0xc
c001e182:	56                   	push   esi
c001e183:	57                   	push   edi
c001e184:	e8 0d f6 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001e189:	83 c4 10             	add    esp,0x10
c001e18c:	4b                   	dec    ebx
c001e18d:	75 f0                	jne    c001e17f <IDE::polling(unsigned char, unsigned int)+0x11>
c001e18f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e194:	50                   	push   eax
c001e195:	6a 0c                	push   0xc
c001e197:	56                   	push   esi
c001e198:	57                   	push   edi
c001e199:	e8 f8 f5 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001e19e:	83 c4 10             	add    esp,0x10
c001e1a1:	a8 01                	test   al,0x1
c001e1a3:	75 17                	jne    c001e1bc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1a5:	a8 20                	test   al,0x20
c001e1a7:	75 0f                	jne    c001e1b8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e1a9:	4b                   	dec    ebx
c001e1aa:	74 10                	je     c001e1bc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1ac:	84 c0                	test   al,al
c001e1ae:	78 e4                	js     c001e194 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1b0:	a8 08                	test   al,0x8
c001e1b2:	74 e0                	je     c001e194 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1b4:	31 c0                	xor    eax,eax
c001e1b6:	eb 06                	jmp    c001e1be <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1b8:	b0 01                	mov    al,0x1
c001e1ba:	eb 02                	jmp    c001e1be <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1bc:	b0 02                	mov    al,0x2
c001e1be:	5b                   	pop    ebx
c001e1bf:	5e                   	pop    esi
c001e1c0:	5f                   	pop    edi
c001e1c1:	c3                   	ret    

c001e1c2 <SATABus::close(int, int, void*)>:
c001e1c2:	31 c0                	xor    eax,eax
c001e1c4:	c3                   	ret    
c001e1c5:	90                   	nop

c001e1c6 <SATABus::detect()>:
c001e1c6:	c3                   	ret    
c001e1c7:	90                   	nop

c001e1c8 <SATABus::SATABus()>:
c001e1c8:	83 ec 0c             	sub    esp,0xc
c001e1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cf:	83 ec 08             	sub    esp,0x8
c001e1d2:	68 20 50 02 c0       	push   0xc0025020
c001e1d7:	50                   	push   eax
c001e1d8:	e8 7f 00 ff ff       	call   c000e25c <HardDiskController::HardDiskController(char const*)>
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	ba 74 50 02 c0       	mov    edx,0xc0025074
c001e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e9:	89 10                	mov    DWORD PTR [eax],edx
c001e1eb:	83 ec 0c             	sub    esp,0xc
c001e1ee:	6a 50                	push   0x50
c001e1f0:	e8 e0 bc fe ff       	call   c0009ed5 <Phys::allocateContiguousPages(int)>
c001e1f5:	83 c4 10             	add    esp,0x10
c001e1f8:	89 c2                	mov    edx,eax
c001e1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e204:	83 ec 0c             	sub    esp,0xc
c001e207:	6a 50                	push   0x50
c001e209:	e8 87 d4 fe ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c001e20e:	83 c4 10             	add    esp,0x10
c001e211:	89 c2                	mov    edx,eax
c001e213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e217:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e21d:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c001e222:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e226:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e22c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e230:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	6a 03                	push   0x3
c001e23b:	6a 50                	push   0x50
c001e23d:	51                   	push   ecx
c001e23e:	52                   	push   edx
c001e23f:	50                   	push   eax
c001e240:	e8 ed dd fe ff       	call   c000c032 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e245:	83 c4 20             	add    esp,0x20
c001e248:	90                   	nop
c001e249:	83 c4 0c             	add    esp,0xc
c001e24c:	c3                   	ret    
c001e24d:	90                   	nop

c001e24e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e255:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e258:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e25b:	09 c2                	or     edx,eax
c001e25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e261:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e267:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e269:	31 c0                	xor    eax,eax
c001e26b:	c1 e9 08             	shr    ecx,0x8
c001e26e:	83 e1 0f             	and    ecx,0xf
c001e271:	39 c8                	cmp    eax,ecx
c001e273:	74 0a                	je     c001e27f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e275:	f6 c2 01             	test   dl,0x1
c001e278:	74 18                	je     c001e292 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e27a:	d1 ea                	shr    edx,1
c001e27c:	40                   	inc    eax
c001e27d:	eb f2                	jmp    c001e271 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e27f:	83 ec 0c             	sub    esp,0xc
c001e282:	68 44 50 02 c0       	push   0xc0025044
c001e287:	e8 9d 60 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001e28c:	83 c4 10             	add    esp,0x10
c001e28f:	83 c8 ff             	or     eax,0xffffffff
c001e292:	83 c4 0c             	add    esp,0xc
c001e295:	c3                   	ret    

c001e296 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e296:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e29a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e29d:	89 c2                	mov    edx,eax
c001e29f:	c1 ea 08             	shr    edx,0x8
c001e2a2:	83 e2 0f             	and    edx,0xf
c001e2a5:	fe ca                	dec    dl
c001e2a7:	75 31                	jne    c001e2da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2a9:	83 e0 0f             	and    eax,0xf
c001e2ac:	3c 03                	cmp    al,0x3
c001e2ae:	75 2a                	jne    c001e2da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2b0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e2b3:	b8 02 00 00 00       	mov    eax,0x2
c001e2b8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e2be:	74 1c                	je     c001e2dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2c0:	b8 04 00 00 00       	mov    eax,0x4
c001e2c5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e2cb:	74 0f                	je     c001e2dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2cd:	31 c0                	xor    eax,eax
c001e2cf:	83 fa 03             	cmp    edx,0x3
c001e2d2:	0f 94 c0             	sete   al
c001e2d5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e2d9:	c3                   	ret    
c001e2da:	31 c0                	xor    eax,eax
c001e2dc:	c3                   	ret    
c001e2dd:	90                   	nop

c001e2de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2e5:	0f ba e2 0f          	bt     edx,0xf
c001e2e9:	72 f7                	jb     c001e2e2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e2eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2ee:	83 ca 10             	or     edx,0x10
c001e2f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2f7:	83 ca 01             	or     edx,0x1
c001e2fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2fd:	c3                   	ret    

c001e2fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e302:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e305:	83 e2 fe             	and    edx,0xfffffffe
c001e308:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e30b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e30e:	83 e2 ef             	and    edx,0xffffffef
c001e311:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e314:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e317:	0f ba e2 0e          	bt     edx,0xe
c001e31b:	72 f7                	jb     c001e314 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e31d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e320:	0f ba e2 0f          	bt     edx,0xf
c001e324:	72 ee                	jb     c001e314 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e326:	c3                   	ret    
c001e327:	90                   	nop

c001e328 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e328:	55                   	push   ebp
c001e329:	57                   	push   edi
c001e32a:	56                   	push   esi
c001e32b:	53                   	push   ebx
c001e32c:	83 ec 1c             	sub    esp,0x1c
c001e32f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e333:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e337:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e33b:	53                   	push   ebx
c001e33c:	89 fd                	mov    ebp,edi
c001e33e:	56                   	push   esi
c001e33f:	c1 e5 0a             	shl    ebp,0xa
c001e342:	e8 b7 ff ff ff       	call   c001e2fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e347:	83 ec 0c             	sub    esp,0xc
c001e34a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e350:	01 e8                	add    eax,ebp
c001e352:	89 03                	mov    DWORD PTR [ebx],eax
c001e354:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e356:	68 00 04 00 00       	push   0x400
c001e35b:	6a 00                	push   0x0
c001e35d:	50                   	push   eax
c001e35e:	e8 21 23 fe ff       	call   c0000684 <memset>
c001e363:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e369:	89 fa                	mov    edx,edi
c001e36b:	01 e8                	add    eax,ebp
c001e36d:	c1 e7 0d             	shl    edi,0xd
c001e370:	89 03                	mov    DWORD PTR [ebx],eax
c001e372:	c1 e2 08             	shl    edx,0x8
c001e375:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e37c:	81 c2 00 80 00 00    	add    edx,0x8000
c001e382:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e386:	89 d0                	mov    eax,edx
c001e388:	83 c4 1c             	add    esp,0x1c
c001e38b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e391:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e394:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e397:	68 00 01 00 00       	push   0x100
c001e39c:	6a 00                	push   0x0
c001e39e:	50                   	push   eax
c001e39f:	e8 e0 22 fe ff       	call   c0000684 <memset>
c001e3a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3a8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e3ae:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e3b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3b8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e3bb:	83 c4 10             	add    esp,0x10
c001e3be:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e3c5:	31 ff                	xor    edi,edi
c001e3c7:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e3cd:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e3d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3d7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3dd:	83 c5 20             	add    ebp,0x20
c001e3e0:	01 f8                	add    eax,edi
c001e3e2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e3e5:	52                   	push   edx
c001e3e6:	68 00 01 00 00       	push   0x100
c001e3eb:	6a 00                	push   0x0
c001e3ed:	50                   	push   eax
c001e3ee:	e8 91 22 fe ff       	call   c0000684 <memset>
c001e3f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3f7:	83 c4 10             	add    esp,0x10
c001e3fa:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e400:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e407:	01 f8                	add    eax,edi
c001e409:	81 c7 00 01 00 00    	add    edi,0x100
c001e40f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e412:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e418:	75 b3                	jne    c001e3cd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e41a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e41e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e422:	83 c4 1c             	add    esp,0x1c
c001e425:	5b                   	pop    ebx
c001e426:	5e                   	pop    esi
c001e427:	5f                   	pop    edi
c001e428:	5d                   	pop    ebp
c001e429:	e9 b0 fe ff ff       	jmp    c001e2de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e42e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e42e:	55                   	push   ebp
c001e42f:	57                   	push   edi
c001e430:	56                   	push   esi
c001e431:	53                   	push   ebx
c001e432:	31 db                	xor    ebx,ebx
c001e434:	83 ec 0c             	sub    esp,0xc
c001e437:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e43b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e43f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e442:	f7 c7 01 00 00 00    	test   edi,0x1
c001e448:	74 7a                	je     c001e4c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e44a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e44e:	89 d8                	mov    eax,ebx
c001e450:	c1 e0 07             	shl    eax,0x7
c001e453:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e45a:	55                   	push   ebp
c001e45b:	56                   	push   esi
c001e45c:	e8 35 fe ff ff       	call   c001e296 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e461:	5a                   	pop    edx
c001e462:	83 f8 01             	cmp    eax,0x1
c001e465:	59                   	pop    ecx
c001e466:	75 21                	jne    c001e489 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e468:	50                   	push   eax
c001e469:	53                   	push   ebx
c001e46a:	55                   	push   ebp
c001e46b:	56                   	push   esi
c001e46c:	e8 b7 fe ff ff       	call   c001e328 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e471:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e478:	e8 46 b5 fe ff       	call   c00099c3 <malloc>
c001e47d:	89 c5                	mov    ebp,eax
c001e47f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e482:	e8 7f 0d 00 00       	call   c001f206 <SATA::SATA()>
c001e487:	eb 24                	jmp    c001e4ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e489:	83 f8 04             	cmp    eax,0x4
c001e48c:	75 36                	jne    c001e4c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e48e:	51                   	push   ecx
c001e48f:	53                   	push   ebx
c001e490:	55                   	push   ebp
c001e491:	56                   	push   esi
c001e492:	e8 91 fe ff ff       	call   c001e328 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e497:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e49e:	e8 20 b5 fe ff       	call   c00099c3 <malloc>
c001e4a3:	89 c5                	mov    ebp,eax
c001e4a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4a8:	e8 cf 10 00 00       	call   c001f57c <SATAPI::SATAPI()>
c001e4ad:	58                   	pop    eax
c001e4ae:	5a                   	pop    edx
c001e4af:	55                   	push   ebp
c001e4b0:	56                   	push   esi
c001e4b1:	e8 f8 f9 fe ff       	call   c000deae <Device::addChild(Device*)>
c001e4b6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e4b9:	56                   	push   esi
c001e4ba:	6a 00                	push   0x0
c001e4bc:	53                   	push   ebx
c001e4bd:	55                   	push   ebp
c001e4be:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e4c1:	83 c4 20             	add    esp,0x20
c001e4c4:	d1 ef                	shr    edi,1
c001e4c6:	43                   	inc    ebx
c001e4c7:	83 fb 20             	cmp    ebx,0x20
c001e4ca:	0f 85 72 ff ff ff    	jne    c001e442 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e4d0:	83 c4 0c             	add    esp,0xc
c001e4d3:	5b                   	pop    ebx
c001e4d4:	5e                   	pop    esi
c001e4d5:	5f                   	pop    edi
c001e4d6:	5d                   	pop    ebp
c001e4d7:	c3                   	ret    

c001e4d8 <SATABus::open(int, int, void*)>:
c001e4d8:	83 ec 14             	sub    esp,0x14
c001e4db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e4df:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e4e5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e4eb:	52                   	push   edx
c001e4ec:	50                   	push   eax
c001e4ed:	e8 3c ff ff ff       	call   c001e42e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e4f2:	31 c0                	xor    eax,eax
c001e4f4:	83 c4 1c             	add    esp,0x1c
c001e4f7:	c3                   	ret    

c001e4f8 <ATA::close(int, int, void*)>:
c001e4f8:	83 ec 0c             	sub    esp,0xc
c001e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e505:	85 c0                	test   eax,eax
c001e507:	74 0c                	je     c001e515 <ATA::close(int, int, void*)+0x1d>
c001e509:	83 ec 0c             	sub    esp,0xc
c001e50c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e50e:	50                   	push   eax
c001e50f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e512:	83 c4 10             	add    esp,0x10
c001e515:	31 c0                	xor    eax,eax
c001e517:	83 c4 0c             	add    esp,0xc
c001e51a:	c3                   	ret    
c001e51b:	90                   	nop

c001e51c <ATA::powerSaving(PowerSavingLevel)>:
c001e51c:	c3                   	ret    
c001e51d:	90                   	nop

c001e51e <ATA::ATA()>:
c001e51e:	83 ec 0c             	sub    esp,0xc
c001e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e525:	83 ec 04             	sub    esp,0x4
c001e528:	68 00 02 00 00       	push   0x200
c001e52d:	68 69 51 02 c0       	push   0xc0025169
c001e532:	50                   	push   eax
c001e533:	e8 ae fd fe ff       	call   c000e2e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e538:	83 c4 10             	add    esp,0x10
c001e53b:	ba ec 50 02 c0       	mov    edx,0xc00250ec
c001e540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e544:	89 10                	mov    DWORD PTR [eax],edx
c001e546:	90                   	nop
c001e547:	83 c4 0c             	add    esp,0xc
c001e54a:	c3                   	ret    
c001e54b:	90                   	nop

c001e54c <ATA::flush(bool)>:
c001e54c:	53                   	push   ebx
c001e54d:	83 ec 08             	sub    esp,0x8
c001e550:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e555:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e559:	19 c0                	sbb    eax,eax
c001e55b:	83 e0 fd             	and    eax,0xfffffffd
c001e55e:	05 ea 00 00 00       	add    eax,0xea
c001e563:	50                   	push   eax
c001e564:	6a 07                	push   0x7
c001e566:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e56d:	50                   	push   eax
c001e56e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e574:	e8 5d f1 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e579:	83 c4 0c             	add    esp,0xc
c001e57c:	6a 00                	push   0x0
c001e57e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e585:	50                   	push   eax
c001e586:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e58c:	e8 dd fb ff ff       	call   c001e16e <IDE::polling(unsigned char, unsigned int)>
c001e591:	83 c4 18             	add    esp,0x18
c001e594:	5b                   	pop    ebx
c001e595:	c3                   	ret    

c001e596 <ATA::readyForCommand()>:
c001e596:	56                   	push   esi
c001e597:	53                   	push   ebx
c001e598:	53                   	push   ebx
c001e599:	31 db                	xor    ebx,ebx
c001e59b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e59f:	51                   	push   ecx
c001e5a0:	6a 0c                	push   0xc
c001e5a2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e5a9:	50                   	push   eax
c001e5aa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e5b0:	e8 e1 f1 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001e5b5:	83 c4 10             	add    esp,0x10
c001e5b8:	a8 88                	test   al,0x88
c001e5ba:	74 1f                	je     c001e5db <ATA::readyForCommand()+0x45>
c001e5bc:	43                   	inc    ebx
c001e5bd:	83 fb 63             	cmp    ebx,0x63
c001e5c0:	7e dd                	jle    c001e59f <ATA::readyForCommand()+0x9>
c001e5c2:	83 ec 0c             	sub    esp,0xc
c001e5c5:	6a 0a                	push   0xa
c001e5c7:	e8 28 9c ff ff       	call   c00181f4 <milliTenthSleep(unsigned int)>
c001e5cc:	83 c4 10             	add    esp,0x10
c001e5cf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e5d5:	75 c8                	jne    c001e59f <ATA::readyForCommand()+0x9>
c001e5d7:	31 c0                	xor    eax,eax
c001e5d9:	eb 02                	jmp    c001e5dd <ATA::readyForCommand()+0x47>
c001e5db:	b0 01                	mov    al,0x1
c001e5dd:	5a                   	pop    edx
c001e5de:	5b                   	pop    ebx
c001e5df:	5e                   	pop    esi
c001e5e0:	c3                   	ret    
c001e5e1:	90                   	nop

c001e5e2 <ATA::access(unsigned long long, int, void*, bool)>:
c001e5e2:	55                   	push   ebp
c001e5e3:	57                   	push   edi
c001e5e4:	56                   	push   esi
c001e5e5:	53                   	push   ebx
c001e5e6:	83 ec 38             	sub    esp,0x38
c001e5e9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e5ed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e5f1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e5f9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e5fd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e601:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e605:	68 98 50 02 c0       	push   0xc0025098
c001e60a:	e8 58 e4 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e60f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e615:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e619:	83 c4 10             	add    esp,0x10
c001e61c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e622:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e626:	c1 e0 06             	shl    eax,0x6
c001e629:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e631:	74 5d                	je     c001e690 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e633:	89 fa                	mov    edx,edi
c001e635:	89 f0                	mov    eax,esi
c001e637:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e63b:	c1 ea 1c             	shr    edx,0x1c
c001e63e:	89 d1                	mov    ecx,edx
c001e640:	09 c1                	or     ecx,eax
c001e642:	74 25                	je     c001e669 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e644:	31 ed                	xor    ebp,ebp
c001e646:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e64d:	89 fa                	mov    edx,edi
c001e64f:	89 f0                	mov    eax,esi
c001e651:	0f ad d0             	shrd   eax,edx,cl
c001e654:	d3 ea                	shr    edx,cl
c001e656:	f6 c1 20             	test   cl,0x20
c001e659:	74 02                	je     c001e65d <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e65b:	89 d0                	mov    eax,edx
c001e65d:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e661:	45                   	inc    ebp
c001e662:	83 fd 06             	cmp    ebp,0x6
c001e665:	75 df                	jne    c001e646 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e667:	eb 76                	jmp    c001e6df <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e669:	89 f0                	mov    eax,esi
c001e66b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e670:	89 fa                	mov    edx,edi
c001e672:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e679:	0f ac d0 10          	shrd   eax,edx,0x10
c001e67d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e682:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e686:	c1 ee 18             	shr    esi,0x18
c001e689:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e68e:	eb 56                	jmp    c001e6e6 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e690:	6a 00                	push   0x0
c001e692:	6a 3f                	push   0x3f
c001e694:	57                   	push   edi
c001e695:	56                   	push   esi
c001e696:	e8 89 29 00 00       	call   c0021024 <__umoddi3>
c001e69b:	83 c4 10             	add    esp,0x10
c001e69e:	40                   	inc    eax
c001e69f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e6a3:	6a 00                	push   0x0
c001e6a5:	68 f0 03 00 00       	push   0x3f0
c001e6aa:	57                   	push   edi
c001e6ab:	56                   	push   esi
c001e6ac:	e8 73 28 00 00       	call   c0020f24 <__udivdi3>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e6b9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6c5:	6a 00                	push   0x0
c001e6c7:	6a 3f                	push   0x3f
c001e6c9:	57                   	push   edi
c001e6ca:	56                   	push   esi
c001e6cb:	e8 54 28 00 00       	call   c0020f24 <__udivdi3>
c001e6d0:	83 c4 10             	add    esp,0x10
c001e6d3:	89 c6                	mov    esi,eax
c001e6d5:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e6da:	83 e6 0f             	and    esi,0xf
c001e6dd:	eb 07                	jmp    c001e6e6 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6df:	31 f6                	xor    esi,esi
c001e6e1:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e6e6:	bf 01 00 00 00       	mov    edi,0x1
c001e6eb:	50                   	push   eax
c001e6ec:	6a 00                	push   0x0
c001e6ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6f5:	50                   	push   eax
c001e6f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e6fa:	e8 df f1 ff ff       	call   c001d8de <IDE::enableIRQs(unsigned char, bool)>
c001e6ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e702:	e8 8f fe ff ff       	call   c001e596 <ATA::readyForCommand()>
c001e707:	83 c4 10             	add    esp,0x10
c001e70a:	84 c0                	test   al,al
c001e70c:	0f 84 bc 02 00 00    	je     c001e9ce <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e712:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e718:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e71e:	c1 e0 04             	shl    eax,0x4
c001e721:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e728:	09 c6                	or     esi,eax
c001e72a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e72f:	75 05                	jne    c001e736 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e731:	83 ce a0             	or     esi,0xffffffa0
c001e734:	eb 03                	jmp    c001e739 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e736:	83 ce e0             	or     esi,0xffffffe0
c001e739:	89 f0                	mov    eax,esi
c001e73b:	0f b6 f0             	movzx  esi,al
c001e73e:	56                   	push   esi
c001e73f:	6a 06                	push   0x6
c001e741:	51                   	push   ecx
c001e742:	52                   	push   edx
c001e743:	e8 8e ef ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e748:	83 c4 10             	add    esp,0x10
c001e74b:	6a 00                	push   0x0
c001e74d:	6a 01                	push   0x1
c001e74f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e756:	50                   	push   eax
c001e757:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e75d:	e8 74 ef ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e762:	83 c4 10             	add    esp,0x10
c001e765:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e76a:	75 6e                	jne    c001e7da <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e76c:	6a 00                	push   0x0
c001e76e:	6a 08                	push   0x8
c001e770:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e777:	50                   	push   eax
c001e778:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e77e:	e8 53 ef ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e783:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e788:	50                   	push   eax
c001e789:	6a 09                	push   0x9
c001e78b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e792:	50                   	push   eax
c001e793:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e799:	e8 38 ef ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e79e:	83 c4 20             	add    esp,0x20
c001e7a1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7a6:	50                   	push   eax
c001e7a7:	6a 0a                	push   0xa
c001e7a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7b0:	50                   	push   eax
c001e7b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b7:	e8 1a ef ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7bc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e7c1:	50                   	push   eax
c001e7c2:	6a 0b                	push   0xb
c001e7c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7cb:	50                   	push   eax
c001e7cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7d2:	e8 ff ee ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d7:	83 c4 20             	add    esp,0x20
c001e7da:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e7df:	50                   	push   eax
c001e7e0:	6a 02                	push   0x2
c001e7e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7e9:	50                   	push   eax
c001e7ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f0:	e8 e1 ee ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e7fa:	50                   	push   eax
c001e7fb:	6a 03                	push   0x3
c001e7fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e804:	50                   	push   eax
c001e805:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e80b:	e8 c6 ee ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e810:	83 c4 20             	add    esp,0x20
c001e813:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e818:	50                   	push   eax
c001e819:	6a 04                	push   0x4
c001e81b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e822:	50                   	push   eax
c001e823:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e829:	e8 a8 ee ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e82e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e833:	50                   	push   eax
c001e834:	6a 05                	push   0x5
c001e836:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e83d:	50                   	push   eax
c001e83e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e844:	e8 8d ee ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e849:	83 c4 20             	add    esp,0x20
c001e84c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e851:	0f 94 c0             	sete   al
c001e854:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e859:	74 09                	je     c001e864 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e85b:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e862:	eb 07                	jmp    c001e86b <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e864:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e86b:	0f b6 c0             	movzx  eax,al
c001e86e:	50                   	push   eax
c001e86f:	6a 07                	push   0x7
c001e871:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e878:	50                   	push   eax
c001e879:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e87f:	e8 52 ee ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e884:	c7 04 24 a5 50 02 c0 	mov    DWORD PTR [esp],0xc00250a5
c001e88b:	e8 d7 e1 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e890:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e894:	83 c4 10             	add    esp,0x10
c001e897:	85 f6                	test   esi,esi
c001e899:	0f 84 f7 00 00 00    	je     c001e996 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e89f:	83 ec 0c             	sub    esp,0xc
c001e8a2:	68 a8 50 02 c0       	push   0xc00250a8
c001e8a7:	e8 bb e1 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e8ac:	83 c4 0c             	add    esp,0xc
c001e8af:	6a 01                	push   0x1
c001e8b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8b8:	50                   	push   eax
c001e8b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8bf:	e8 aa f8 ff ff       	call   c001e16e <IDE::polling(unsigned char, unsigned int)>
c001e8c4:	c7 04 24 ab 50 02 c0 	mov    DWORD PTR [esp],0xc00250ab
c001e8cb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8cf:	e8 93 e1 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e8d4:	83 c4 10             	add    esp,0x10
c001e8d7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e8db:	84 c0                	test   al,al
c001e8dd:	74 2b                	je     c001e90a <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e8df:	0f b6 f8             	movzx  edi,al
c001e8e2:	57                   	push   edi
c001e8e3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e8ea:	50                   	push   eax
c001e8eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8f2:	50                   	push   eax
c001e8f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8f9:	e8 c0 f7 ff ff       	call   c001e0be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e8fe:	c7 04 24 ae 50 02 c0 	mov    DWORD PTR [esp],0xc00250ae
c001e905:	e9 bc 00 00 00       	jmp    c001e9c6 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e90a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e90f:	74 50                	je     c001e961 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e911:	83 ec 0c             	sub    esp,0xc
c001e914:	31 ed                	xor    ebp,ebp
c001e916:	68 b9 50 02 c0       	push   0xc00250b9
c001e91b:	e8 47 e1 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e927:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e92b:	50                   	push   eax
c001e92c:	50                   	push   eax
c001e92d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e934:	50                   	push   eax
c001e935:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e93b:	e8 84 ed ff ff       	call   c001d6c4 <IDE::getBase(unsigned char)>
c001e940:	89 c2                	mov    edx,eax
c001e942:	89 f8                	mov    eax,edi
c001e944:	66 ef                	out    dx,ax
c001e946:	45                   	inc    ebp
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e950:	75 d1                	jne    c001e923 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e952:	83 ec 0c             	sub    esp,0xc
c001e955:	68 bc 50 02 c0       	push   0xc00250bc
c001e95a:	e8 08 e1 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e95f:	eb 24                	jmp    c001e985 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e961:	51                   	push   ecx
c001e962:	51                   	push   ecx
c001e963:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e96a:	50                   	push   eax
c001e96b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e971:	e8 4e ed ff ff       	call   c001d6c4 <IDE::getBase(unsigned char)>
c001e976:	b9 00 01 00 00       	mov    ecx,0x100
c001e97b:	89 c2                	mov    edx,eax
c001e97d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e981:	fc                   	cld    
c001e982:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	4e                   	dec    esi
c001e989:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e991:	e9 01 ff ff ff       	jmp    c001e897 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e996:	31 ff                	xor    edi,edi
c001e998:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e99d:	74 2f                	je     c001e9ce <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e99f:	83 ec 0c             	sub    esp,0xc
c001e9a2:	68 bf 50 02 c0       	push   0xc00250bf
c001e9a7:	e8 bb e0 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e9ac:	58                   	pop    eax
c001e9ad:	31 c0                	xor    eax,eax
c001e9af:	5a                   	pop    edx
c001e9b0:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e9b5:	0f 94 c0             	sete   al
c001e9b8:	50                   	push   eax
c001e9b9:	53                   	push   ebx
c001e9ba:	e8 8d fb ff ff       	call   c001e54c <ATA::flush(bool)>
c001e9bf:	c7 04 24 c2 50 02 c0 	mov    DWORD PTR [esp],0xc00250c2
c001e9c6:	e8 9c e0 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	83 c4 2c             	add    esp,0x2c
c001e9d1:	89 f8                	mov    eax,edi
c001e9d3:	5b                   	pop    ebx
c001e9d4:	5e                   	pop    esi
c001e9d5:	5f                   	pop    edi
c001e9d6:	5d                   	pop    ebp
c001e9d7:	c3                   	ret    

c001e9d8 <ATA::read(unsigned long long, int, void*)>:
c001e9d8:	57                   	push   edi
c001e9d9:	b8 04 00 00 00       	mov    eax,0x4
c001e9de:	56                   	push   esi
c001e9df:	53                   	push   ebx
c001e9e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9e8:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9f3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e9f9:	77 25                	ja     c001ea20 <ATA::read(unsigned long long, int, void*)+0x48>
c001e9fb:	b8 06 00 00 00       	mov    eax,0x6
c001ea00:	85 f6                	test   esi,esi
c001ea02:	74 1c                	je     c001ea20 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea04:	50                   	push   eax
c001ea05:	50                   	push   eax
c001ea06:	6a 00                	push   0x0
c001ea08:	56                   	push   esi
c001ea09:	52                   	push   edx
c001ea0a:	53                   	push   ebx
c001ea0b:	51                   	push   ecx
c001ea0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea10:	e8 cd fb ff ff       	call   c001e5e2 <ATA::access(unsigned long long, int, void*, bool)>
c001ea15:	83 c4 20             	add    esp,0x20
c001ea18:	85 c0                	test   eax,eax
c001ea1a:	0f 95 c0             	setne  al
c001ea1d:	0f b6 c0             	movzx  eax,al
c001ea20:	5b                   	pop    ebx
c001ea21:	5e                   	pop    esi
c001ea22:	5f                   	pop    edi
c001ea23:	c3                   	ret    

c001ea24 <ATA::write(unsigned long long, int, void*)>:
c001ea24:	55                   	push   ebp
c001ea25:	57                   	push   edi
c001ea26:	56                   	push   esi
c001ea27:	53                   	push   ebx
c001ea28:	83 ec 18             	sub    esp,0x18
c001ea2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea33:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea37:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea3b:	68 c5 50 02 c0       	push   0xc00250c5
c001ea40:	e8 22 e0 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001ea45:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ea48:	83 c4 10             	add    esp,0x10
c001ea4b:	b8 04 00 00 00       	mov    eax,0x4
c001ea50:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ea56:	77 25                	ja     c001ea7d <ATA::write(unsigned long long, int, void*)+0x59>
c001ea58:	b8 06 00 00 00       	mov    eax,0x6
c001ea5d:	85 f6                	test   esi,esi
c001ea5f:	74 1c                	je     c001ea7d <ATA::write(unsigned long long, int, void*)+0x59>
c001ea61:	50                   	push   eax
c001ea62:	50                   	push   eax
c001ea63:	6a 01                	push   0x1
c001ea65:	56                   	push   esi
c001ea66:	53                   	push   ebx
c001ea67:	55                   	push   ebp
c001ea68:	57                   	push   edi
c001ea69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea6d:	e8 70 fb ff ff       	call   c001e5e2 <ATA::access(unsigned long long, int, void*, bool)>
c001ea72:	83 c4 20             	add    esp,0x20
c001ea75:	85 c0                	test   eax,eax
c001ea77:	0f 95 c0             	setne  al
c001ea7a:	0f b6 c0             	movzx  eax,al
c001ea7d:	83 c4 0c             	add    esp,0xc
c001ea80:	5b                   	pop    ebx
c001ea81:	5e                   	pop    esi
c001ea82:	5f                   	pop    edi
c001ea83:	5d                   	pop    ebp
c001ea84:	c3                   	ret    
c001ea85:	90                   	nop

c001ea86 <ATA::detectCHS()>:
c001ea86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea8a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea90:	c1 e0 06             	shl    eax,0x6
c001ea93:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea99:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eaa3:	c7 44 24 04 d1 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc00250d1
c001eaab:	e9 79 58 ff ff       	jmp    c0014329 <Krnl::panic(char const*)>

c001eab0 <ATA::open(int, int, void*)>:
c001eab0:	53                   	push   ebx
c001eab1:	83 ec 08             	sub    esp,0x8
c001eab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eab8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eabc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eac0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eac6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eacc:	c1 e0 06             	shl    eax,0x6
c001eacf:	01 d0                	add    eax,edx
c001ead1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ead8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eade:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eae5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eaef:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eaf5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eafc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb03:	75 0c                	jne    c001eb11 <ATA::open(int, int, void*)+0x61>
c001eb05:	83 ec 0c             	sub    esp,0xc
c001eb08:	53                   	push   ebx
c001eb09:	e8 78 ff ff ff       	call   c001ea86 <ATA::detectCHS()>
c001eb0e:	83 c4 10             	add    esp,0x10
c001eb11:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb17:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb1d:	c1 e0 06             	shl    eax,0x6
c001eb20:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb27:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb31:	d1 e8                	shr    eax,1
c001eb33:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb39:	6a 04                	push   0x4
c001eb3b:	6a 0c                	push   0xc
c001eb3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb44:	50                   	push   eax
c001eb45:	52                   	push   edx
c001eb46:	e8 8b eb ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb4b:	90                   	nop
c001eb4c:	90                   	nop
c001eb4d:	6a 00                	push   0x0
c001eb4f:	6a 0c                	push   0xc
c001eb51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb58:	50                   	push   eax
c001eb59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb5f:	e8 72 eb ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb64:	83 c4 14             	add    esp,0x14
c001eb67:	53                   	push   ebx
c001eb68:	e8 e1 f7 fe ff       	call   c000e34e <PhysicalDisk::startCache()>
c001eb6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb70:	e8 15 18 ff ff       	call   c001038a <createPartitionsForDisk(PhysicalDisk*)>
c001eb75:	31 c0                	xor    eax,eax
c001eb77:	83 c4 18             	add    esp,0x18
c001eb7a:	5b                   	pop    ebx
c001eb7b:	c3                   	ret    

c001eb7c <ATAPI::write(unsigned long long, int, void*)>:
c001eb7c:	b8 03 00 00 00       	mov    eax,0x3
c001eb81:	c3                   	ret    

c001eb82 <ATAPI::close(int, int, void*)>:
c001eb82:	83 ec 0c             	sub    esp,0xc
c001eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb8f:	85 c0                	test   eax,eax
c001eb91:	74 0c                	je     c001eb9f <ATAPI::close(int, int, void*)+0x1d>
c001eb93:	83 ec 0c             	sub    esp,0xc
c001eb96:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb98:	50                   	push   eax
c001eb99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	31 c0                	xor    eax,eax
c001eba1:	83 c4 0c             	add    esp,0xc
c001eba4:	c3                   	ret    
c001eba5:	90                   	nop

c001eba6 <ATAPI::ATAPI()>:
c001eba6:	83 ec 0c             	sub    esp,0xc
c001eba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebad:	83 ec 04             	sub    esp,0x4
c001ebb0:	68 00 08 00 00       	push   0x800
c001ebb5:	68 09 52 02 c0       	push   0xc0025209
c001ebba:	50                   	push   eax
c001ebbb:	e8 26 f7 fe ff       	call   c000e2e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ebc0:	83 c4 10             	add    esp,0x10
c001ebc3:	ba 24 51 02 c0       	mov    edx,0xc0025124
c001ebc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcc:	89 10                	mov    DWORD PTR [eax],edx
c001ebce:	90                   	nop
c001ebcf:	83 c4 0c             	add    esp,0xc
c001ebd2:	c3                   	ret    
c001ebd3:	90                   	nop

c001ebd4 <ATAPI::readyForCommand()>:
c001ebd4:	56                   	push   esi
c001ebd5:	53                   	push   ebx
c001ebd6:	53                   	push   ebx
c001ebd7:	31 db                	xor    ebx,ebx
c001ebd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ebdd:	51                   	push   ecx
c001ebde:	6a 0c                	push   0xc
c001ebe0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ebe7:	50                   	push   eax
c001ebe8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ebee:	e8 a3 eb ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	a8 88                	test   al,0x88
c001ebf8:	74 1f                	je     c001ec19 <ATAPI::readyForCommand()+0x45>
c001ebfa:	43                   	inc    ebx
c001ebfb:	83 fb 63             	cmp    ebx,0x63
c001ebfe:	7e dd                	jle    c001ebdd <ATAPI::readyForCommand()+0x9>
c001ec00:	83 ec 0c             	sub    esp,0xc
c001ec03:	6a 0a                	push   0xa
c001ec05:	e8 ea 95 ff ff       	call   c00181f4 <milliTenthSleep(unsigned int)>
c001ec0a:	83 c4 10             	add    esp,0x10
c001ec0d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec13:	75 c8                	jne    c001ebdd <ATAPI::readyForCommand()+0x9>
c001ec15:	31 c0                	xor    eax,eax
c001ec17:	eb 02                	jmp    c001ec1b <ATAPI::readyForCommand()+0x47>
c001ec19:	b0 01                	mov    al,0x1
c001ec1b:	5a                   	pop    edx
c001ec1c:	5b                   	pop    ebx
c001ec1d:	5e                   	pop    esi
c001ec1e:	c3                   	ret    
c001ec1f:	90                   	nop

c001ec20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec20:	55                   	push   ebp
c001ec21:	57                   	push   edi
c001ec22:	56                   	push   esi
c001ec23:	53                   	push   ebx
c001ec24:	83 ec 20             	sub    esp,0x20
c001ec27:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec2b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec2f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec37:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec3b:	6a 01                	push   0x1
c001ec3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec44:	50                   	push   eax
c001ec45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec4b:	e8 8e ec ff ff       	call   c001d8de <IDE::enableIRQs(unsigned char, bool)>
c001ec50:	5e                   	pop    esi
c001ec51:	58                   	pop    eax
c001ec52:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec59:	50                   	push   eax
c001ec5a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec60:	e8 4b ea ff ff       	call   c001d6b0 <IDE::prepareInterrupt(unsigned char)>
c001ec65:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec68:	e8 67 ff ff ff       	call   c001ebd4 <ATAPI::readyForCommand()>
c001ec6d:	83 c4 10             	add    esp,0x10
c001ec70:	84 c0                	test   al,al
c001ec72:	75 0a                	jne    c001ec7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ec74:	bb 01 00 00 00       	mov    ebx,0x1
c001ec79:	e9 57 02 00 00       	jmp    c001eed5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec7e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec84:	c1 e0 04             	shl    eax,0x4
c001ec87:	0f b6 c0             	movzx  eax,al
c001ec8a:	50                   	push   eax
c001ec8b:	6a 06                	push   0x6
c001ec8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec94:	50                   	push   eax
c001ec95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec9b:	e8 36 ea ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca0:	6a 00                	push   0x0
c001eca2:	6a 01                	push   0x1
c001eca4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecab:	50                   	push   eax
c001ecac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecb2:	e8 1f ea ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb7:	83 c4 20             	add    esp,0x20
c001ecba:	0f b6 c3             	movzx  eax,bl
c001ecbd:	0f b6 df             	movzx  ebx,bh
c001ecc0:	50                   	push   eax
c001ecc1:	6a 04                	push   0x4
c001ecc3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecca:	50                   	push   eax
c001eccb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecd1:	e8 00 ea ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecd6:	53                   	push   ebx
c001ecd7:	6a 05                	push   0x5
c001ecd9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ece0:	50                   	push   eax
c001ece1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ece7:	e8 ea e9 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecec:	83 c4 20             	add    esp,0x20
c001ecef:	68 a0 00 00 00       	push   0xa0
c001ecf4:	6a 07                	push   0x7
c001ecf6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecfd:	50                   	push   eax
c001ecfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed04:	e8 cd e9 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed09:	83 c4 0c             	add    esp,0xc
c001ed0c:	6a 01                	push   0x1
c001ed0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed15:	50                   	push   eax
c001ed16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed1c:	e8 4d f4 ff ff       	call   c001e16e <IDE::polling(unsigned char, unsigned int)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed2a:	84 c0                	test   al,al
c001ed2c:	74 23                	je     c001ed51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed2e:	0f b6 d8             	movzx  ebx,al
c001ed31:	0f b6 d2             	movzx  edx,dl
c001ed34:	53                   	push   ebx
c001ed35:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed3c:	50                   	push   eax
c001ed3d:	52                   	push   edx
c001ed3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed44:	e8 75 f3 ff ff       	call   c001e0be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	e9 84 01 00 00       	jmp    c001eed5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed51:	0f b6 d2             	movzx  edx,dl
c001ed54:	53                   	push   ebx
c001ed55:	53                   	push   ebx
c001ed56:	52                   	push   edx
c001ed57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed5d:	e8 62 e9 ff ff       	call   c001d6c4 <IDE::getBase(unsigned char)>
c001ed62:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed66:	b9 06 00 00 00       	mov    ecx,0x6
c001ed6b:	89 c2                	mov    edx,eax
c001ed6d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ed70:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed74:	83 c4 10             	add    esp,0x10
c001ed77:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed7d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed84:	85 db                	test   ebx,ebx
c001ed86:	0f 84 ec 00 00 00    	je     c001ee78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed8c:	51                   	push   ecx
c001ed8d:	51                   	push   ecx
c001ed8e:	52                   	push   edx
c001ed8f:	50                   	push   eax
c001ed90:	e8 af ea ff ff       	call   c001d844 <IDE::waitInterrupt(unsigned char)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	84 c0                	test   al,al
c001ed9a:	0f 84 d4 fe ff ff    	je     c001ec74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eda0:	56                   	push   esi
c001eda1:	56                   	push   esi
c001eda2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eda9:	50                   	push   eax
c001edaa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edb0:	e8 fb e8 ff ff       	call   c001d6b0 <IDE::prepareInterrupt(unsigned char)>
c001edb5:	83 c4 0c             	add    esp,0xc
c001edb8:	6a 04                	push   0x4
c001edba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edc1:	50                   	push   eax
c001edc2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edc8:	e8 c9 e9 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001edcd:	83 c4 0c             	add    esp,0xc
c001edd0:	89 c6                	mov    esi,eax
c001edd2:	6a 05                	push   0x5
c001edd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eddb:	50                   	push   eax
c001eddc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ede2:	e8 af e9 ff ff       	call   c001d796 <IDE::read(unsigned char, unsigned char)>
c001ede7:	89 f1                	mov    ecx,esi
c001ede9:	0f b6 c0             	movzx  eax,al
c001edec:	0f b6 f1             	movzx  esi,cl
c001edef:	c1 e0 08             	shl    eax,0x8
c001edf2:	09 c6                	or     esi,eax
c001edf4:	d1 fe                	sar    esi,1
c001edf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001edfa:	83 c4 10             	add    esp,0x10
c001edfd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee02:	74 41                	je     c001ee45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee04:	31 c9                	xor    ecx,ecx
c001ee06:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee0c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee13:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee17:	75 0a                	jne    c001ee23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee19:	01 c9                	add    ecx,ecx
c001ee1b:	01 cd                	add    ebp,ecx
c001ee1d:	4b                   	dec    ebx
c001ee1e:	e9 54 ff ff ff       	jmp    c001ed77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee23:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee2c:	51                   	push   ecx
c001ee2d:	51                   	push   ecx
c001ee2e:	52                   	push   edx
c001ee2f:	50                   	push   eax
c001ee30:	e8 8f e8 ff ff       	call   c001d6c4 <IDE::getBase(unsigned char)>
c001ee35:	89 c2                	mov    edx,eax
c001ee37:	89 f0                	mov    eax,esi
c001ee39:	66 ef                	out    dx,ax
c001ee3b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee3f:	83 c4 10             	add    esp,0x10
c001ee42:	41                   	inc    ecx
c001ee43:	eb c1                	jmp    c001ee06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee45:	31 f6                	xor    esi,esi
c001ee47:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee4d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee54:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ee58:	75 06                	jne    c001ee60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ee5a:	01 f6                	add    esi,esi
c001ee5c:	01 f5                	add    ebp,esi
c001ee5e:	eb bd                	jmp    c001ee1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ee60:	51                   	push   ecx
c001ee61:	51                   	push   ecx
c001ee62:	52                   	push   edx
c001ee63:	50                   	push   eax
c001ee64:	e8 5b e8 ff ff       	call   c001d6c4 <IDE::getBase(unsigned char)>
c001ee69:	89 c2                	mov    edx,eax
c001ee6b:	66 ed                	in     ax,dx
c001ee6d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ee72:	83 c4 10             	add    esp,0x10
c001ee75:	46                   	inc    esi
c001ee76:	eb cf                	jmp    c001ee47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ee78:	51                   	push   ecx
c001ee79:	51                   	push   ecx
c001ee7a:	52                   	push   edx
c001ee7b:	50                   	push   eax
c001ee7c:	e8 c3 e9 ff ff       	call   c001d844 <IDE::waitInterrupt(unsigned char)>
c001ee81:	83 c4 10             	add    esp,0x10
c001ee84:	84 c0                	test   al,al
c001ee86:	0f 84 e8 fd ff ff    	je     c001ec74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee8c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee91:	52                   	push   edx
c001ee92:	52                   	push   edx
c001ee93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee9a:	50                   	push   eax
c001ee9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eea1:	e8 0a e8 ff ff       	call   c001d6b0 <IDE::prepareInterrupt(unsigned char)>
c001eea6:	83 c4 10             	add    esp,0x10
c001eea9:	50                   	push   eax
c001eeaa:	50                   	push   eax
c001eeab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eeb2:	50                   	push   eax
c001eeb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eeb9:	e8 06 e8 ff ff       	call   c001d6c4 <IDE::getBase(unsigned char)>
c001eebe:	8d 50 07             	lea    edx,[eax+0x7]
c001eec1:	ec                   	in     al,dx
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	a8 88                	test   al,0x88
c001eec7:	74 0a                	je     c001eed3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001eec9:	4b                   	dec    ebx
c001eeca:	75 dd                	jne    c001eea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001eecc:	bb 02 00 00 00       	mov    ebx,0x2
c001eed1:	eb 02                	jmp    c001eed5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eed3:	31 db                	xor    ebx,ebx
c001eed5:	83 c4 1c             	add    esp,0x1c
c001eed8:	89 d8                	mov    eax,ebx
c001eeda:	5b                   	pop    ebx
c001eedb:	5e                   	pop    esi
c001eedc:	5f                   	pop    edi
c001eedd:	5d                   	pop    ebp
c001eede:	c3                   	ret    
c001eedf:	90                   	nop

c001eee0 <ATAPI::diskRemoved()>:
c001eee0:	83 ec 18             	sub    esp,0x18
c001eee3:	68 15 52 02 c0       	push   0xc0025215
c001eee8:	e8 7a db fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001eeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eef1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001eef8:	83 c4 1c             	add    esp,0x1c
c001eefb:	c3                   	ret    

c001eefc <ATAPI::eject()>:
c001eefc:	57                   	push   edi
c001eefd:	b9 03 00 00 00       	mov    ecx,0x3
c001ef02:	53                   	push   ebx
c001ef03:	83 ec 14             	sub    esp,0x14
c001ef06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef0a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef0e:	fc                   	cld    
c001ef0f:	31 c0                	xor    eax,eax
c001ef11:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef13:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef18:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef1d:	50                   	push   eax
c001ef1e:	50                   	push   eax
c001ef1f:	6a 00                	push   0x0
c001ef21:	6a 00                	push   0x0
c001ef23:	6a 00                	push   0x0
c001ef25:	6a 02                	push   0x2
c001ef27:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef2b:	50                   	push   eax
c001ef2c:	53                   	push   ebx
c001ef2d:	e8 ee fc ff ff       	call   c001ec20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef32:	83 c4 14             	add    esp,0x14
c001ef35:	53                   	push   ebx
c001ef36:	e8 a5 ff ff ff       	call   c001eee0 <ATAPI::diskRemoved()>
c001ef3b:	83 c4 24             	add    esp,0x24
c001ef3e:	31 c0                	xor    eax,eax
c001ef40:	5b                   	pop    ebx
c001ef41:	5f                   	pop    edi
c001ef42:	c3                   	ret    
c001ef43:	90                   	nop

c001ef44 <ATAPI::diskInserted()>:
c001ef44:	53                   	push   ebx
c001ef45:	83 ec 14             	sub    esp,0x14
c001ef48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ef4c:	68 2c 52 02 c0       	push   0xc002522c
c001ef51:	e8 11 db fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001ef56:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ef5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef60:	e8 e9 f3 fe ff       	call   c000e34e <PhysicalDisk::startCache()>
c001ef65:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ef69:	83 c4 18             	add    esp,0x18
c001ef6c:	5b                   	pop    ebx
c001ef6d:	e9 18 14 ff ff       	jmp    c001038a <createPartitionsForDisk(PhysicalDisk*)>

c001ef72 <ATAPI::detectMedia()>:
c001ef72:	56                   	push   esi
c001ef73:	53                   	push   ebx
c001ef74:	83 ec 28             	sub    esp,0x28
c001ef77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef7b:	6a 0c                	push   0xc
c001ef7d:	6a 00                	push   0x0
c001ef7f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ef83:	56                   	push   esi
c001ef84:	e8 fb 16 fe ff       	call   c0000684 <memset>
c001ef89:	58                   	pop    eax
c001ef8a:	5a                   	pop    edx
c001ef8b:	6a 00                	push   0x0
c001ef8d:	6a 00                	push   0x0
c001ef8f:	6a 00                	push   0x0
c001ef91:	6a 00                	push   0x0
c001ef93:	56                   	push   esi
c001ef94:	53                   	push   ebx
c001ef95:	e8 86 fc ff ff       	call   c001ec20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef9a:	83 c4 1c             	add    esp,0x1c
c001ef9d:	6a 0c                	push   0xc
c001ef9f:	6a 00                	push   0x0
c001efa1:	56                   	push   esi
c001efa2:	e8 dd 16 fe ff       	call   c0000684 <memset>
c001efa7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001efac:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001efb1:	59                   	pop    ecx
c001efb2:	58                   	pop    eax
c001efb3:	6a 01                	push   0x1
c001efb5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001efb9:	50                   	push   eax
c001efba:	6a 00                	push   0x0
c001efbc:	6a 12                	push   0x12
c001efbe:	56                   	push   esi
c001efbf:	53                   	push   ebx
c001efc0:	e8 5b fc ff ff       	call   c001ec20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efc5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001efc9:	83 c4 20             	add    esp,0x20
c001efcc:	83 e0 7f             	and    eax,0x7f
c001efcf:	3c 70                	cmp    al,0x70
c001efd1:	74 15                	je     c001efe8 <ATAPI::detectMedia()+0x76>
c001efd3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efda:	75 0c                	jne    c001efe8 <ATAPI::detectMedia()+0x76>
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	53                   	push   ebx
c001efe0:	e8 5f ff ff ff       	call   c001ef44 <ATAPI::diskInserted()>
c001efe5:	83 c4 10             	add    esp,0x10
c001efe8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001efec:	83 e0 0f             	and    eax,0xf
c001efef:	3c 02                	cmp    al,0x2
c001eff1:	75 1b                	jne    c001f00e <ATAPI::detectMedia()+0x9c>
c001eff3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001eff8:	75 2d                	jne    c001f027 <ATAPI::detectMedia()+0xb5>
c001effa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f001:	74 24                	je     c001f027 <ATAPI::detectMedia()+0xb5>
c001f003:	83 ec 0c             	sub    esp,0xc
c001f006:	53                   	push   ebx
c001f007:	e8 d4 fe ff ff       	call   c001eee0 <ATAPI::diskRemoved()>
c001f00c:	eb 16                	jmp    c001f024 <ATAPI::detectMedia()+0xb2>
c001f00e:	84 c0                	test   al,al
c001f010:	75 15                	jne    c001f027 <ATAPI::detectMedia()+0xb5>
c001f012:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f019:	75 0c                	jne    c001f027 <ATAPI::detectMedia()+0xb5>
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	53                   	push   ebx
c001f01f:	e8 20 ff ff ff       	call   c001ef44 <ATAPI::diskInserted()>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	83 c4 24             	add    esp,0x24
c001f02a:	5b                   	pop    ebx
c001f02b:	5e                   	pop    esi
c001f02c:	c3                   	ret    
c001f02d:	90                   	nop

c001f02e <ATAPI::open(int, int, void*)>:
c001f02e:	53                   	push   ebx
c001f02f:	83 ec 08             	sub    esp,0x8
c001f032:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f036:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f03a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f03e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f044:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f04a:	c1 e0 06             	shl    eax,0x6
c001f04d:	01 d0                	add    eax,edx
c001f04f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f056:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f05c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f063:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f06d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f073:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f07a:	6a 04                	push   0x4
c001f07c:	6a 0c                	push   0xc
c001f07e:	51                   	push   ecx
c001f07f:	52                   	push   edx
c001f080:	e8 51 e6 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f085:	90                   	nop
c001f086:	90                   	nop
c001f087:	6a 00                	push   0x0
c001f089:	6a 0c                	push   0xc
c001f08b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f092:	50                   	push   eax
c001f093:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f099:	e8 38 e6 ff ff       	call   c001d6d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f09e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f0a5:	83 c4 14             	add    esp,0x14
c001f0a8:	53                   	push   ebx
c001f0a9:	e8 c4 fe ff ff       	call   c001ef72 <ATAPI::detectMedia()>
c001f0ae:	31 c0                	xor    eax,eax
c001f0b0:	83 c4 18             	add    esp,0x18
c001f0b3:	5b                   	pop    ebx
c001f0b4:	c3                   	ret    
c001f0b5:	90                   	nop

c001f0b6 <ATAPI::read(unsigned long long, int, void*)>:
c001f0b6:	55                   	push   ebp
c001f0b7:	57                   	push   edi
c001f0b8:	56                   	push   esi
c001f0b9:	53                   	push   ebx
c001f0ba:	83 ec 1c             	sub    esp,0x1c
c001f0bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0c5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f0c9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0d0:	74 41                	je     c001f113 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f0d2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f0d6:	b9 03 00 00 00       	mov    ecx,0x3
c001f0db:	fc                   	cld    
c001f0dc:	31 c0                	xor    eax,eax
c001f0de:	86 fb                	xchg   bl,bh
c001f0e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f0e2:	c1 c3 10             	rol    ebx,0x10
c001f0e5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f0ea:	89 e8                	mov    eax,ebp
c001f0ec:	86 fb                	xchg   bl,bh
c001f0ee:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f0f2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f0f6:	50                   	push   eax
c001f0f7:	50                   	push   eax
c001f0f8:	55                   	push   ebp
c001f0f9:	c1 e5 0b             	shl    ebp,0xb
c001f0fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f100:	6a 00                	push   0x0
c001f102:	55                   	push   ebp
c001f103:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f107:	50                   	push   eax
c001f108:	56                   	push   esi
c001f109:	e8 12 fb ff ff       	call   c001ec20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f10e:	83 c4 20             	add    esp,0x20
c001f111:	eb 1a                	jmp    c001f12d <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f113:	83 ec 0c             	sub    esp,0xc
c001f116:	56                   	push   esi
c001f117:	e8 56 fe ff ff       	call   c001ef72 <ATAPI::detectMedia()>
c001f11c:	83 c4 10             	add    esp,0x10
c001f11f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f126:	75 aa                	jne    c001f0d2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f128:	b8 02 00 00 00       	mov    eax,0x2
c001f12d:	83 c4 1c             	add    esp,0x1c
c001f130:	5b                   	pop    ebx
c001f131:	5e                   	pop    esi
c001f132:	5f                   	pop    edi
c001f133:	5d                   	pop    ebp
c001f134:	c3                   	ret    
c001f135:	90                   	nop

c001f136 <SATA::close(int, int, void*)>:
c001f136:	83 ec 0c             	sub    esp,0xc
c001f139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f143:	85 c0                	test   eax,eax
c001f145:	74 0c                	je     c001f153 <SATA::close(int, int, void*)+0x1d>
c001f147:	83 ec 0c             	sub    esp,0xc
c001f14a:	8b 10                	mov    edx,DWORD PTR [eax]
c001f14c:	50                   	push   eax
c001f14d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f150:	83 c4 10             	add    esp,0x10
c001f153:	31 c0                	xor    eax,eax
c001f155:	83 c4 0c             	add    esp,0xc
c001f158:	c3                   	ret    
c001f159:	90                   	nop

c001f15a <SATA::powerSaving(PowerSavingLevel)>:
c001f15a:	c3                   	ret    
c001f15b:	90                   	nop

c001f15c <SATA::open(int, int, void*)>:
c001f15c:	56                   	push   esi
c001f15d:	53                   	push   ebx
c001f15e:	50                   	push   eax
c001f15f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f167:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f171:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f177:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f181:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f185:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f18f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f195:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f19c:	e8 49 ac fe ff       	call   c0009dea <Phys::allocatePage()>
c001f1a1:	89 c6                	mov    esi,eax
c001f1a3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f1a9:	81 c6 00 10 00 00    	add    esi,0x1000
c001f1af:	e8 36 ac fe ff       	call   c0009dea <Phys::allocatePage()>
c001f1b4:	39 c6                	cmp    esi,eax
c001f1b6:	74 10                	je     c001f1c8 <SATA::open(int, int, void*)+0x6c>
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	68 54 51 02 c0       	push   0xc0025154
c001f1c0:	e8 64 51 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f1c5:	83 c4 10             	add    esp,0x10
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	6a 02                	push   0x2
c001f1cd:	e8 c3 c4 fe ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c001f1d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f1d8:	6a 03                	push   0x3
c001f1da:	50                   	push   eax
c001f1db:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f1e1:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001f1e7:	e8 50 cb fe ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c001f1ec:	83 c4 14             	add    esp,0x14
c001f1ef:	53                   	push   ebx
c001f1f0:	e8 59 f1 fe ff       	call   c000e34e <PhysicalDisk::startCache()>
c001f1f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1f8:	e8 8d 11 ff ff       	call   c001038a <createPartitionsForDisk(PhysicalDisk*)>
c001f1fd:	83 c4 14             	add    esp,0x14
c001f200:	31 c0                	xor    eax,eax
c001f202:	5b                   	pop    ebx
c001f203:	5e                   	pop    esi
c001f204:	c3                   	ret    
c001f205:	90                   	nop

c001f206 <SATA::SATA()>:
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20d:	83 ec 04             	sub    esp,0x4
c001f210:	68 00 02 00 00       	push   0x200
c001f215:	68 68 51 02 c0       	push   0xc0025168
c001f21a:	50                   	push   eax
c001f21b:	e8 c6 f0 fe ff       	call   c000e2e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f220:	83 c4 10             	add    esp,0x10
c001f223:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c001f228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22c:	89 10                	mov    DWORD PTR [eax],edx
c001f22e:	90                   	nop
c001f22f:	83 c4 0c             	add    esp,0xc
c001f232:	c3                   	ret    
c001f233:	90                   	nop

c001f234 <SATA::access(unsigned long long, int, void*, bool)>:
c001f234:	55                   	push   ebp
c001f235:	57                   	push   edi
c001f236:	56                   	push   esi
c001f237:	53                   	push   ebx
c001f238:	83 ec 2c             	sub    esp,0x2c
c001f23b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f23f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f247:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f24b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f24f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f254:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f258:	7e 10                	jle    c001f26a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f25a:	83 ec 0c             	sub    esp,0xc
c001f25d:	68 78 51 02 c0       	push   0xc0025178
c001f262:	e8 c2 50 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f267:	83 c4 10             	add    esp,0x10
c001f26a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f270:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f276:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f27c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f280:	89 d0                	mov    eax,edx
c001f282:	c1 e0 07             	shl    eax,0x7
c001f285:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f289:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f293:	51                   	push   ecx
c001f294:	8d 42 02             	lea    eax,[edx+0x2]
c001f297:	51                   	push   ecx
c001f298:	c1 e0 07             	shl    eax,0x7
c001f29b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f29f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2a3:	50                   	push   eax
c001f2a4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f2aa:	e8 9f ef ff ff       	call   c001e24e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f2af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	b8 01 00 00 00       	mov    eax,0x1
c001f2bb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f2c0:	0f 84 cb 01 00 00    	je     c001f491 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f2c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f2ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2ce:	c1 e0 09             	shl    eax,0x9
c001f2d1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f2d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f2da:	74 0e                	je     c001f2ea <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f2dc:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f2e2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f2e6:	89 c1                	mov    ecx,eax
c001f2e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2ee:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f2f4:	8d 42 02             	lea    eax,[edx+0x2]
c001f2f7:	c1 e0 07             	shl    eax,0x7
c001f2fa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f2fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001f300:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f306:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f30c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f310:	c1 e1 05             	shl    ecx,0x5
c001f313:	01 c8                	add    eax,ecx
c001f315:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f319:	83 e1 01             	and    ecx,0x1
c001f31c:	89 ce                	mov    esi,ecx
c001f31e:	8a 08                	mov    cl,BYTE PTR [eax]
c001f320:	c1 e6 06             	shl    esi,0x6
c001f323:	83 e1 bf             	and    ecx,0xffffffbf
c001f326:	09 f1                	or     ecx,esi
c001f328:	88 08                	mov    BYTE PTR [eax],cl
c001f32a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f32c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f332:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f338:	89 08                	mov    DWORD PTR [eax],ecx
c001f33a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f340:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f346:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f34c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f34f:	50                   	push   eax
c001f350:	68 90 00 00 00       	push   0x90
c001f355:	6a 00                	push   0x0
c001f357:	56                   	push   esi
c001f358:	e8 27 13 fe ff       	call   c0000684 <memset>
c001f35d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f363:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f367:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f36d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f371:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f375:	83 c4 10             	add    esp,0x10
c001f378:	48                   	dec    eax
c001f379:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f37e:	89 c1                	mov    ecx,eax
c001f380:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f386:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f38b:	09 c8                	or     eax,ecx
c001f38d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f393:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f396:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f39d:	66 25 00 7f          	and    ax,0x7f00
c001f3a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3a5:	66 0d 27 80          	or     ax,0x8027
c001f3a9:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f3ae:	66 89 06             	mov    WORD PTR [esi],ax
c001f3b1:	19 c0                	sbb    eax,eax
c001f3b3:	83 e0 f0             	and    eax,0xfffffff0
c001f3b6:	83 c0 35             	add    eax,0x35
c001f3b9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f3bc:	89 e8                	mov    eax,ebp
c001f3be:	c1 e8 10             	shr    eax,0x10
c001f3c1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f3c4:	89 e8                	mov    eax,ebp
c001f3c6:	c1 e8 18             	shr    eax,0x18
c001f3c9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f3cc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f3d0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f3d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f3d7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f3da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f3de:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f3e2:	89 d6                	mov    esi,edx
c001f3e4:	31 c0                	xor    eax,eax
c001f3e6:	c1 e6 07             	shl    esi,0x7
c001f3e9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f3ed:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f3f3:	80 e1 88             	and    cl,0x88
c001f3f6:	74 0a                	je     c001f402 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f3f8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f3fd:	74 0a                	je     c001f409 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f3ff:	40                   	inc    eax
c001f400:	eb eb                	jmp    c001f3ed <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f402:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f407:	75 0a                	jne    c001f413 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f409:	83 ec 0c             	sub    esp,0xc
c001f40c:	68 b1 51 02 c0       	push   0xc00251b1
c001f411:	eb 56                	jmp    c001f469 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f413:	b8 01 00 00 00       	mov    eax,0x1
c001f418:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f41c:	c1 e2 07             	shl    edx,0x7
c001f41f:	d3 e0                	shl    eax,cl
c001f421:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f425:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f42b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f431:	85 c8                	test   eax,ecx
c001f433:	74 20                	je     c001f455 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f435:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f43b:	0f ba e1 1e          	bt     ecx,0x1e
c001f43f:	73 ea                	jae    c001f42b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f441:	83 ec 0c             	sub    esp,0xc
c001f444:	68 bf 51 02 c0       	push   0xc00251bf
c001f449:	e8 db 4e ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f44e:	83 c4 10             	add    esp,0x10
c001f451:	31 c0                	xor    eax,eax
c001f453:	eb 3c                	jmp    c001f491 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f455:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f45b:	0f ba e0 1e          	bt     eax,0x1e
c001f45f:	73 17                	jae    c001f478 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f461:	83 ec 0c             	sub    esp,0xc
c001f464:	68 bf 51 02 c0       	push   0xc00251bf
c001f469:	e8 bb 4e ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f46e:	83 c4 10             	add    esp,0x10
c001f471:	b8 01 00 00 00       	mov    eax,0x1
c001f476:	eb 19                	jmp    c001f491 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f478:	31 c0                	xor    eax,eax
c001f47a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f47f:	75 10                	jne    c001f491 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f481:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f487:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f48b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f48f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f491:	83 c4 2c             	add    esp,0x2c
c001f494:	5b                   	pop    ebx
c001f495:	5e                   	pop    esi
c001f496:	5f                   	pop    edi
c001f497:	5d                   	pop    ebp
c001f498:	c3                   	ret    
c001f499:	90                   	nop

c001f49a <SATA::read(unsigned long long, int, void*)>:
c001f49a:	57                   	push   edi
c001f49b:	b8 04 00 00 00       	mov    eax,0x4
c001f4a0:	56                   	push   esi
c001f4a1:	53                   	push   ebx
c001f4a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4aa:	8d 7a ff             	lea    edi,[edx-0x1]
c001f4ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f4b5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f4bb:	77 25                	ja     c001f4e2 <SATA::read(unsigned long long, int, void*)+0x48>
c001f4bd:	b8 06 00 00 00       	mov    eax,0x6
c001f4c2:	85 f6                	test   esi,esi
c001f4c4:	74 1c                	je     c001f4e2 <SATA::read(unsigned long long, int, void*)+0x48>
c001f4c6:	50                   	push   eax
c001f4c7:	50                   	push   eax
c001f4c8:	6a 00                	push   0x0
c001f4ca:	56                   	push   esi
c001f4cb:	52                   	push   edx
c001f4cc:	53                   	push   ebx
c001f4cd:	51                   	push   ecx
c001f4ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f4d2:	e8 5d fd ff ff       	call   c001f234 <SATA::access(unsigned long long, int, void*, bool)>
c001f4d7:	83 c4 20             	add    esp,0x20
c001f4da:	85 c0                	test   eax,eax
c001f4dc:	0f 95 c0             	setne  al
c001f4df:	0f b6 c0             	movzx  eax,al
c001f4e2:	5b                   	pop    ebx
c001f4e3:	5e                   	pop    esi
c001f4e4:	5f                   	pop    edi
c001f4e5:	c3                   	ret    

c001f4e6 <SATA::write(unsigned long long, int, void*)>:
c001f4e6:	55                   	push   ebp
c001f4e7:	b8 04 00 00 00       	mov    eax,0x4
c001f4ec:	57                   	push   edi
c001f4ed:	56                   	push   esi
c001f4ee:	53                   	push   ebx
c001f4ef:	83 ec 0c             	sub    esp,0xc
c001f4f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f4f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f4fa:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f4fd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f501:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f505:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f50b:	77 3d                	ja     c001f54a <SATA::write(unsigned long long, int, void*)+0x64>
c001f50d:	b8 06 00 00 00       	mov    eax,0x6
c001f512:	85 ed                	test   ebp,ebp
c001f514:	74 34                	je     c001f54a <SATA::write(unsigned long long, int, void*)+0x64>
c001f516:	c1 e3 09             	shl    ebx,0x9
c001f519:	01 eb                	add    ebx,ebp
c001f51b:	89 d6                	mov    esi,edx
c001f51d:	89 cf                	mov    edi,ecx
c001f51f:	83 c6 01             	add    esi,0x1
c001f522:	83 d7 00             	adc    edi,0x0
c001f525:	50                   	push   eax
c001f526:	50                   	push   eax
c001f527:	6a 01                	push   0x1
c001f529:	55                   	push   ebp
c001f52a:	81 c5 00 02 00 00    	add    ebp,0x200
c001f530:	6a 01                	push   0x1
c001f532:	51                   	push   ecx
c001f533:	52                   	push   edx
c001f534:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f538:	e8 f7 fc ff ff       	call   c001f234 <SATA::access(unsigned long long, int, void*, bool)>
c001f53d:	83 c4 20             	add    esp,0x20
c001f540:	89 f2                	mov    edx,esi
c001f542:	89 f9                	mov    ecx,edi
c001f544:	39 dd                	cmp    ebp,ebx
c001f546:	75 d3                	jne    c001f51b <SATA::write(unsigned long long, int, void*)+0x35>
c001f548:	31 c0                	xor    eax,eax
c001f54a:	83 c4 0c             	add    esp,0xc
c001f54d:	5b                   	pop    ebx
c001f54e:	5e                   	pop    esi
c001f54f:	5f                   	pop    edi
c001f550:	5d                   	pop    ebp
c001f551:	c3                   	ret    

c001f552 <SATAPI::write(unsigned long long, int, void*)>:
c001f552:	b8 03 00 00 00       	mov    eax,0x3
c001f557:	c3                   	ret    

c001f558 <SATAPI::close(int, int, void*)>:
c001f558:	83 ec 0c             	sub    esp,0xc
c001f55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f565:	85 c0                	test   eax,eax
c001f567:	74 0c                	je     c001f575 <SATAPI::close(int, int, void*)+0x1d>
c001f569:	83 ec 0c             	sub    esp,0xc
c001f56c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f56e:	50                   	push   eax
c001f56f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f572:	83 c4 10             	add    esp,0x10
c001f575:	31 c0                	xor    eax,eax
c001f577:	83 c4 0c             	add    esp,0xc
c001f57a:	c3                   	ret    
c001f57b:	90                   	nop

c001f57c <SATAPI::SATAPI()>:
c001f57c:	83 ec 0c             	sub    esp,0xc
c001f57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f583:	83 ec 04             	sub    esp,0x4
c001f586:	68 00 08 00 00       	push   0x800
c001f58b:	68 08 52 02 c0       	push   0xc0025208
c001f590:	50                   	push   eax
c001f591:	e8 50 ed fe ff       	call   c000e2e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f596:	83 c4 10             	add    esp,0x10
c001f599:	ba b4 52 02 c0       	mov    edx,0xc00252b4
c001f59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a2:	89 10                	mov    DWORD PTR [eax],edx
c001f5a4:	90                   	nop
c001f5a5:	83 c4 0c             	add    esp,0xc
c001f5a8:	c3                   	ret    
c001f5a9:	90                   	nop

c001f5aa <SATAPI::diskRemoved()>:
c001f5aa:	83 ec 18             	sub    esp,0x18
c001f5ad:	68 14 52 02 c0       	push   0xc0025214
c001f5b2:	e8 b0 d4 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001f5b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5bb:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f5c2:	83 c4 1c             	add    esp,0x1c
c001f5c5:	c3                   	ret    

c001f5c6 <SATAPI::diskInserted()>:
c001f5c6:	53                   	push   ebx
c001f5c7:	83 ec 14             	sub    esp,0x14
c001f5ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f5ce:	68 2b 52 02 c0       	push   0xc002522b
c001f5d3:	e8 8f d4 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001f5d8:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f5df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f5e2:	e8 67 ed fe ff       	call   c000e34e <PhysicalDisk::startCache()>
c001f5e7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f5eb:	83 c4 18             	add    esp,0x18
c001f5ee:	5b                   	pop    ebx
c001f5ef:	e9 96 0d ff ff       	jmp    c001038a <createPartitionsForDisk(PhysicalDisk*)>

c001f5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f5f4:	55                   	push   ebp
c001f5f5:	57                   	push   edi
c001f5f6:	56                   	push   esi
c001f5f7:	53                   	push   ebx
c001f5f8:	83 ec 34             	sub    esp,0x34
c001f5fb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f5ff:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f603:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f607:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f60b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f60f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f615:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f61b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f61f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f625:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f629:	c1 e0 07             	shl    eax,0x7
c001f62c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f630:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f634:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f63e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f642:	8d 58 02             	lea    ebx,[eax+0x2]
c001f645:	c1 e3 07             	shl    ebx,0x7
c001f648:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f64c:	53                   	push   ebx
c001f64d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f653:	e8 f6 eb ff ff       	call   c001e24e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f658:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f65c:	83 c4 10             	add    esp,0x10
c001f65f:	b8 01 00 00 00       	mov    eax,0x1
c001f664:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f669:	0f 84 85 01 00 00    	je     c001f7f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f66f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f675:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f677:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f67d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f683:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f687:	c1 e1 05             	shl    ecx,0x5
c001f68a:	01 c8                	add    eax,ecx
c001f68c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f68e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f694:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f69a:	89 08                	mov    DWORD PTR [eax],ecx
c001f69c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6a2:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f6a8:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f6ae:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f6b1:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f6b4:	50                   	push   eax
c001f6b5:	68 90 00 00 00       	push   0x90
c001f6ba:	6a 00                	push   0x0
c001f6bc:	53                   	push   ebx
c001f6bd:	e8 c2 0f fe ff       	call   c0000684 <memset>
c001f6c2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f6c6:	b9 0c 00 00 00       	mov    ecx,0xc
c001f6cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f6cd:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f6d3:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f6d7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f6dd:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f6e1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f6e5:	48                   	dec    eax
c001f6e6:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f6eb:	89 c1                	mov    ecx,eax
c001f6ed:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f6f3:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f6f8:	09 c8                	or     eax,ecx
c001f6fa:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f700:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f703:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f70a:	66 25 00 7f          	and    ax,0x7f00
c001f70e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f712:	66 0d 27 80          	or     ax,0x8027
c001f716:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f71a:	66 89 03             	mov    WORD PTR [ebx],ax
c001f71d:	89 d0                	mov    eax,edx
c001f71f:	c1 ea 18             	shr    edx,0x18
c001f722:	c1 e8 10             	shr    eax,0x10
c001f725:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f728:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f72b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f72f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f736:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f739:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f73d:	83 c4 10             	add    esp,0x10
c001f740:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f744:	31 c0                	xor    eax,eax
c001f746:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f74a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f750:	80 e2 88             	and    dl,0x88
c001f753:	74 0a                	je     c001f75f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f755:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f75a:	74 0a                	je     c001f766 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f75c:	40                   	inc    eax
c001f75d:	eb eb                	jmp    c001f74a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f75f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f764:	75 0f                	jne    c001f775 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f766:	83 ec 0c             	sub    esp,0xc
c001f769:	68 b1 51 02 c0       	push   0xc00251b1
c001f76e:	e8 b6 4b ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f773:	eb 3f                	jmp    c001f7b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f775:	ba 01 00 00 00       	mov    edx,0x1
c001f77a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f77e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f782:	d3 e2                	shl    edx,cl
c001f784:	c1 e0 07             	shl    eax,0x7
c001f787:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f78d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f791:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f797:	85 ca                	test   edx,ecx
c001f799:	74 23                	je     c001f7be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f79b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f7a1:	0f ba e1 1e          	bt     ecx,0x1e
c001f7a5:	73 ea                	jae    c001f791 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f7a7:	83 ec 0c             	sub    esp,0xc
c001f7aa:	68 43 52 02 c0       	push   0xc0025243
c001f7af:	e8 b3 d2 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c001f7b4:	83 c4 10             	add    esp,0x10
c001f7b7:	b8 01 00 00 00       	mov    eax,0x1
c001f7bc:	eb 36                	jmp    c001f7f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f7be:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f7c4:	0f ba e0 1e          	bt     eax,0x1e
c001f7c8:	73 0a                	jae    c001f7d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f7ca:	83 ec 0c             	sub    esp,0xc
c001f7cd:	68 56 52 02 c0       	push   0xc0025256
c001f7d2:	eb db                	jmp    c001f7af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f7d4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f7d9:	74 17                	je     c001f7f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7db:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f7e0:	74 10                	je     c001f7f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7e2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f7e8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f7ec:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f7f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f7f2:	31 c0                	xor    eax,eax
c001f7f4:	83 c4 2c             	add    esp,0x2c
c001f7f7:	5b                   	pop    ebx
c001f7f8:	5e                   	pop    esi
c001f7f9:	5f                   	pop    edi
c001f7fa:	5d                   	pop    ebp
c001f7fb:	c3                   	ret    

c001f7fc <SATAPI::eject()>:
c001f7fc:	57                   	push   edi
c001f7fd:	b9 03 00 00 00       	mov    ecx,0x3
c001f802:	53                   	push   ebx
c001f803:	83 ec 14             	sub    esp,0x14
c001f806:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f80a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f80e:	fc                   	cld    
c001f80f:	31 c0                	xor    eax,eax
c001f811:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f813:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f818:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f81d:	50                   	push   eax
c001f81e:	6a 00                	push   0x0
c001f820:	6a 00                	push   0x0
c001f822:	6a 00                	push   0x0
c001f824:	6a 00                	push   0x0
c001f826:	6a 02                	push   0x2
c001f828:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f82c:	50                   	push   eax
c001f82d:	53                   	push   ebx
c001f82e:	e8 c1 fd ff ff       	call   c001f5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f833:	83 c4 14             	add    esp,0x14
c001f836:	53                   	push   ebx
c001f837:	e8 6e fd ff ff       	call   c001f5aa <SATAPI::diskRemoved()>
c001f83c:	83 c4 24             	add    esp,0x24
c001f83f:	31 c0                	xor    eax,eax
c001f841:	5b                   	pop    ebx
c001f842:	5f                   	pop    edi
c001f843:	c3                   	ret    

c001f844 <SATAPI::detectMedia()>:
c001f844:	56                   	push   esi
c001f845:	53                   	push   ebx
c001f846:	83 ec 28             	sub    esp,0x28
c001f849:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f84d:	6a 0c                	push   0xc
c001f84f:	6a 00                	push   0x0
c001f851:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f855:	56                   	push   esi
c001f856:	e8 29 0e fe ff       	call   c0000684 <memset>
c001f85b:	83 c4 0c             	add    esp,0xc
c001f85e:	6a 00                	push   0x0
c001f860:	6a 00                	push   0x0
c001f862:	6a 00                	push   0x0
c001f864:	6a 00                	push   0x0
c001f866:	6a 00                	push   0x0
c001f868:	56                   	push   esi
c001f869:	53                   	push   ebx
c001f86a:	e8 85 fd ff ff       	call   c001f5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f86f:	83 c4 1c             	add    esp,0x1c
c001f872:	6a 0c                	push   0xc
c001f874:	6a 00                	push   0x0
c001f876:	56                   	push   esi
c001f877:	e8 08 0e fe ff       	call   c0000684 <memset>
c001f87c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f881:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f886:	83 c4 0c             	add    esp,0xc
c001f889:	6a 01                	push   0x1
c001f88b:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f88f:	50                   	push   eax
c001f890:	6a 00                	push   0x0
c001f892:	6a 00                	push   0x0
c001f894:	6a 12                	push   0x12
c001f896:	56                   	push   esi
c001f897:	53                   	push   ebx
c001f898:	e8 57 fd ff ff       	call   c001f5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f89d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f8a1:	83 c4 20             	add    esp,0x20
c001f8a4:	83 e0 7f             	and    eax,0x7f
c001f8a7:	3c 70                	cmp    al,0x70
c001f8a9:	74 15                	je     c001f8c0 <SATAPI::detectMedia()+0x7c>
c001f8ab:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8b2:	75 0c                	jne    c001f8c0 <SATAPI::detectMedia()+0x7c>
c001f8b4:	83 ec 0c             	sub    esp,0xc
c001f8b7:	53                   	push   ebx
c001f8b8:	e8 09 fd ff ff       	call   c001f5c6 <SATAPI::diskInserted()>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f8c4:	83 e0 0f             	and    eax,0xf
c001f8c7:	3c 02                	cmp    al,0x2
c001f8c9:	75 1b                	jne    c001f8e6 <SATAPI::detectMedia()+0xa2>
c001f8cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f8d0:	75 2d                	jne    c001f8ff <SATAPI::detectMedia()+0xbb>
c001f8d2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8d9:	74 24                	je     c001f8ff <SATAPI::detectMedia()+0xbb>
c001f8db:	83 ec 0c             	sub    esp,0xc
c001f8de:	53                   	push   ebx
c001f8df:	e8 c6 fc ff ff       	call   c001f5aa <SATAPI::diskRemoved()>
c001f8e4:	eb 16                	jmp    c001f8fc <SATAPI::detectMedia()+0xb8>
c001f8e6:	84 c0                	test   al,al
c001f8e8:	75 15                	jne    c001f8ff <SATAPI::detectMedia()+0xbb>
c001f8ea:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8f1:	75 0c                	jne    c001f8ff <SATAPI::detectMedia()+0xbb>
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	53                   	push   ebx
c001f8f7:	e8 ca fc ff ff       	call   c001f5c6 <SATAPI::diskInserted()>
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	83 c4 24             	add    esp,0x24
c001f902:	5b                   	pop    ebx
c001f903:	5e                   	pop    esi
c001f904:	c3                   	ret    
c001f905:	90                   	nop

c001f906 <SATAPI::open(int, int, void*)>:
c001f906:	56                   	push   esi
c001f907:	53                   	push   ebx
c001f908:	50                   	push   eax
c001f909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f90d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f911:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f91b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f921:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f92b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f92f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f939:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f93f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f946:	e8 9f a4 fe ff       	call   c0009dea <Phys::allocatePage()>
c001f94b:	89 c6                	mov    esi,eax
c001f94d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f953:	81 c6 00 10 00 00    	add    esi,0x1000
c001f959:	e8 8c a4 fe ff       	call   c0009dea <Phys::allocatePage()>
c001f95e:	39 c6                	cmp    esi,eax
c001f960:	74 10                	je     c001f972 <SATAPI::open(int, int, void*)+0x6c>
c001f962:	83 ec 0c             	sub    esp,0xc
c001f965:	68 6b 52 02 c0       	push   0xc002526b
c001f96a:	e8 ba 49 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f96f:	83 c4 10             	add    esp,0x10
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	6a 02                	push   0x2
c001f977:	e8 19 bd fe ff       	call   c000b695 <Virt::allocateKernelVirtualPages(int)>
c001f97c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f982:	6a 03                	push   0x3
c001f984:	50                   	push   eax
c001f985:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f98b:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001f991:	e8 a6 c3 fe ff       	call   c000bd3c <VAS::mapPage(unsigned long, unsigned long, int)>
c001f996:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f99d:	83 c4 14             	add    esp,0x14
c001f9a0:	53                   	push   ebx
c001f9a1:	e8 9e fe ff ff       	call   c001f844 <SATAPI::detectMedia()>
c001f9a6:	83 c4 14             	add    esp,0x14
c001f9a9:	31 c0                	xor    eax,eax
c001f9ab:	5b                   	pop    ebx
c001f9ac:	5e                   	pop    esi
c001f9ad:	c3                   	ret    

c001f9ae <SATAPI::read(unsigned long long, int, void*)>:
c001f9ae:	55                   	push   ebp
c001f9af:	57                   	push   edi
c001f9b0:	56                   	push   esi
c001f9b1:	53                   	push   ebx
c001f9b2:	83 ec 1c             	sub    esp,0x1c
c001f9b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f9b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f9c1:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9c8:	74 19                	je     c001f9e3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f9ca:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f9cf:	7e 2e                	jle    c001f9ff <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9d1:	83 ec 0c             	sub    esp,0xc
c001f9d4:	68 81 52 02 c0       	push   0xc0025281
c001f9d9:	e8 4b 49 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c001f9de:	83 c4 10             	add    esp,0x10
c001f9e1:	eb 1c                	jmp    c001f9ff <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9e3:	83 ec 0c             	sub    esp,0xc
c001f9e6:	55                   	push   ebp
c001f9e7:	e8 58 fe ff ff       	call   c001f844 <SATAPI::detectMedia()>
c001f9ec:	83 c4 10             	add    esp,0x10
c001f9ef:	b8 02 00 00 00       	mov    eax,0x2
c001f9f4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9fb:	75 cd                	jne    c001f9ca <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f9fd:	eb 49                	jmp    c001fa48 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f9ff:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa03:	b9 03 00 00 00       	mov    ecx,0x3
c001fa08:	fc                   	cld    
c001fa09:	31 c0                	xor    eax,eax
c001fa0b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa0d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa12:	89 d8                	mov    eax,ebx
c001fa14:	86 e0                	xchg   al,ah
c001fa16:	c1 c0 10             	rol    eax,0x10
c001fa19:	86 e0                	xchg   al,ah
c001fa1b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa1f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa23:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa27:	50                   	push   eax
c001fa28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa30:	56                   	push   esi
c001fa31:	53                   	push   ebx
c001fa32:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa36:	c1 e0 0b             	shl    eax,0xb
c001fa39:	50                   	push   eax
c001fa3a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa3e:	50                   	push   eax
c001fa3f:	55                   	push   ebp
c001fa40:	e8 af fb ff ff       	call   c001f5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa45:	83 c4 20             	add    esp,0x20
c001fa48:	83 c4 1c             	add    esp,0x1c
c001fa4b:	5b                   	pop    ebx
c001fa4c:	5e                   	pop    esi
c001fa4d:	5f                   	pop    edi
c001fa4e:	5d                   	pop    ebp
c001fa4f:	c3                   	ret    

c001fa50 <AVX::open(int, int, void*)>:
c001fa50:	83 ec 0c             	sub    esp,0xc
c001fa53:	e8 30 11 00 00       	call   c0020b88 <avxInit>
c001fa58:	b8 00 00 00 00       	mov    eax,0x0
c001fa5d:	83 c4 0c             	add    esp,0xc
c001fa60:	c3                   	ret    
c001fa61:	90                   	nop
c001fa62:	66 90                	xchg   ax,ax

c001fa64 <AVX::close(int, int, void*)>:
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	e8 1d 11 00 00       	call   c0020b89 <avxClose>
c001fa6c:	b8 00 00 00 00       	mov    eax,0x0
c001fa71:	83 c4 0c             	add    esp,0xc
c001fa74:	c3                   	ret    
c001fa75:	90                   	nop
c001fa76:	66 90                	xchg   ax,ax

c001fa78 <AVX::available()>:
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	e8 00 11 00 00       	call   c0020b80 <avxDetect>
c001fa80:	85 c0                	test   eax,eax
c001fa82:	0f 95 c0             	setne  al
c001fa85:	83 c4 0c             	add    esp,0xc
c001fa88:	c3                   	ret    
c001fa89:	90                   	nop
c001fa8a:	66 90                	xchg   ax,ax

c001fa8c <AVX::save(void*)>:
c001fa8c:	83 ec 0c             	sub    esp,0xc
c001fa8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa93:	83 ec 0c             	sub    esp,0xc
c001fa96:	50                   	push   eax
c001fa97:	e8 ea 10 00 00       	call   c0020b86 <avxSave>
c001fa9c:	83 c4 10             	add    esp,0x10
c001fa9f:	90                   	nop
c001faa0:	83 c4 0c             	add    esp,0xc
c001faa3:	c3                   	ret    

c001faa4 <AVX::load(void*)>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faab:	83 ec 0c             	sub    esp,0xc
c001faae:	50                   	push   eax
c001faaf:	e8 d3 10 00 00       	call   c0020b87 <avxLoad>
c001fab4:	83 c4 10             	add    esp,0x10
c001fab7:	90                   	nop
c001fab8:	83 c4 0c             	add    esp,0xc
c001fabb:	c3                   	ret    

c001fabc <AVX::AVX()>:
c001fabc:	83 ec 0c             	sub    esp,0xc
c001fabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac3:	83 ec 08             	sub    esp,0x8
c001fac6:	68 e4 52 02 c0       	push   0xc00252e4
c001facb:	50                   	push   eax
c001facc:	e8 f3 e8 fe ff       	call   c000e3c4 <FPU::FPU(char const*)>
c001fad1:	83 c4 10             	add    esp,0x10
c001fad4:	ba f4 52 02 c0       	mov    edx,0xc00252f4
c001fad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadd:	89 10                	mov    DWORD PTR [eax],edx
c001fadf:	90                   	nop
c001fae0:	83 c4 0c             	add    esp,0xc
c001fae3:	c3                   	ret    

c001fae4 <MMX::available()>:
c001fae4:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001fae9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001faef:	83 e0 20             	and    eax,0x20
c001faf2:	84 c0                	test   al,al
c001faf4:	0f 95 c0             	setne  al
c001faf7:	c3                   	ret    

c001faf8 <MMX::open(int, int, void*)>:
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	e8 12 11 00 00       	call   c0020c12 <x87Init>
c001fb00:	b8 00 00 00 00       	mov    eax,0x0
c001fb05:	83 c4 0c             	add    esp,0xc
c001fb08:	c3                   	ret    
c001fb09:	90                   	nop
c001fb0a:	66 90                	xchg   ax,ax

c001fb0c <MMX::close(int, int, void*)>:
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	e8 18 11 00 00       	call   c0020c2c <x87Close>
c001fb14:	b8 00 00 00 00       	mov    eax,0x0
c001fb19:	83 c4 0c             	add    esp,0xc
c001fb1c:	c3                   	ret    
c001fb1d:	90                   	nop
c001fb1e:	66 90                	xchg   ax,ax

c001fb20 <MMX::save(void*)>:
c001fb20:	83 ec 0c             	sub    esp,0xc
c001fb23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb27:	83 ec 0c             	sub    esp,0xc
c001fb2a:	50                   	push   eax
c001fb2b:	e8 d1 10 00 00       	call   c0020c01 <x87Save>
c001fb30:	83 c4 10             	add    esp,0x10
c001fb33:	90                   	nop
c001fb34:	83 c4 0c             	add    esp,0xc
c001fb37:	c3                   	ret    

c001fb38 <MMX::load(void*)>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	50                   	push   eax
c001fb43:	e8 c2 10 00 00       	call   c0020c0a <x87Load>
c001fb48:	83 c4 10             	add    esp,0x10
c001fb4b:	90                   	nop
c001fb4c:	83 c4 0c             	add    esp,0xc
c001fb4f:	c3                   	ret    

c001fb50 <MMX::MMX()>:
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb57:	83 ec 08             	sub    esp,0x8
c001fb5a:	68 24 53 02 c0       	push   0xc0025324
c001fb5f:	50                   	push   eax
c001fb60:	e8 5f e8 fe ff       	call   c000e3c4 <FPU::FPU(char const*)>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	ba 34 53 02 c0       	mov    edx,0xc0025334
c001fb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb71:	89 10                	mov    DWORD PTR [eax],edx
c001fb73:	90                   	nop
c001fb74:	83 c4 0c             	add    esp,0xc
c001fb77:	c3                   	ret    

c001fb78 <SSE::open(int, int, void*)>:
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	e8 44 10 00 00       	call   c0020bc4 <sseInit>
c001fb80:	b8 00 00 00 00       	mov    eax,0x0
c001fb85:	83 c4 0c             	add    esp,0xc
c001fb88:	c3                   	ret    
c001fb89:	90                   	nop
c001fb8a:	66 90                	xchg   ax,ax

c001fb8c <SSE::close(int, int, void*)>:
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	e8 40 10 00 00       	call   c0020bd4 <sseClose>
c001fb94:	b8 00 00 00 00       	mov    eax,0x0
c001fb99:	83 c4 0c             	add    esp,0xc
c001fb9c:	c3                   	ret    
c001fb9d:	90                   	nop
c001fb9e:	66 90                	xchg   ax,ax

c001fba0 <SSE::available()>:
c001fba0:	83 ec 1c             	sub    esp,0x1c
c001fba3:	e8 f8 0f 00 00       	call   c0020ba0 <absolutelyNoChanceInHell>
c001fba8:	85 c0                	test   eax,eax
c001fbaa:	0f 95 c0             	setne  al
c001fbad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fbb5:	83 c4 1c             	add    esp,0x1c
c001fbb8:	c3                   	ret    
c001fbb9:	90                   	nop
c001fbba:	66 90                	xchg   ax,ax

c001fbbc <SSE::save(void*)>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbc3:	83 ec 0c             	sub    esp,0xc
c001fbc6:	50                   	push   eax
c001fbc7:	e8 ec 0f 00 00       	call   c0020bb8 <sseSave>
c001fbcc:	83 c4 10             	add    esp,0x10
c001fbcf:	90                   	nop
c001fbd0:	83 c4 0c             	add    esp,0xc
c001fbd3:	c3                   	ret    

c001fbd4 <SSE::load(void*)>:
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbdb:	83 ec 0c             	sub    esp,0xc
c001fbde:	50                   	push   eax
c001fbdf:	e8 da 0f 00 00       	call   c0020bbe <sseLoad>
c001fbe4:	83 c4 10             	add    esp,0x10
c001fbe7:	90                   	nop
c001fbe8:	83 c4 0c             	add    esp,0xc
c001fbeb:	c3                   	ret    

c001fbec <SSE::SSE()>:
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf3:	83 ec 08             	sub    esp,0x8
c001fbf6:	68 64 53 02 c0       	push   0xc0025364
c001fbfb:	50                   	push   eax
c001fbfc:	e8 c3 e7 fe ff       	call   c000e3c4 <FPU::FPU(char const*)>
c001fc01:	83 c4 10             	add    esp,0x10
c001fc04:	ba 74 53 02 c0       	mov    edx,0xc0025374
c001fc09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0d:	89 10                	mov    DWORD PTR [eax],edx
c001fc0f:	90                   	nop
c001fc10:	83 c4 0c             	add    esp,0xc
c001fc13:	c3                   	ret    

c001fc14 <x87::open(int, int, void*)>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	e8 f6 0f 00 00       	call   c0020c12 <x87Init>
c001fc1c:	b8 00 00 00 00       	mov    eax,0x0
c001fc21:	83 c4 0c             	add    esp,0xc
c001fc24:	c3                   	ret    
c001fc25:	90                   	nop
c001fc26:	66 90                	xchg   ax,ax

c001fc28 <x87::close(int, int, void*)>:
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	e8 fc 0f 00 00       	call   c0020c2c <x87Close>
c001fc30:	b8 00 00 00 00       	mov    eax,0x0
c001fc35:	83 c4 0c             	add    esp,0xc
c001fc38:	c3                   	ret    
c001fc39:	90                   	nop
c001fc3a:	66 90                	xchg   ax,ax

c001fc3c <x87::available()>:
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	e8 a2 0f 00 00       	call   c0020be6 <x87Detect>
c001fc44:	85 c0                	test   eax,eax
c001fc46:	0f 95 c0             	setne  al
c001fc49:	83 c4 0c             	add    esp,0xc
c001fc4c:	c3                   	ret    
c001fc4d:	90                   	nop
c001fc4e:	66 90                	xchg   ax,ax

c001fc50 <x87::save(void*)>:
c001fc50:	83 ec 0c             	sub    esp,0xc
c001fc53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc57:	83 ec 0c             	sub    esp,0xc
c001fc5a:	50                   	push   eax
c001fc5b:	e8 a1 0f 00 00       	call   c0020c01 <x87Save>
c001fc60:	83 c4 10             	add    esp,0x10
c001fc63:	90                   	nop
c001fc64:	83 c4 0c             	add    esp,0xc
c001fc67:	c3                   	ret    

c001fc68 <x87::load(void*)>:
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc6f:	83 ec 0c             	sub    esp,0xc
c001fc72:	50                   	push   eax
c001fc73:	e8 92 0f 00 00       	call   c0020c0a <x87Load>
c001fc78:	83 c4 10             	add    esp,0x10
c001fc7b:	90                   	nop
c001fc7c:	83 c4 0c             	add    esp,0xc
c001fc7f:	c3                   	ret    

c001fc80 <x87::x87()>:
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc87:	83 ec 08             	sub    esp,0x8
c001fc8a:	68 a4 53 02 c0       	push   0xc00253a4
c001fc8f:	50                   	push   eax
c001fc90:	e8 2f e7 fe ff       	call   c000e3c4 <FPU::FPU(char const*)>
c001fc95:	83 c4 10             	add    esp,0x10
c001fc98:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	89 10                	mov    DWORD PTR [eax],edx
c001fca3:	90                   	nop
c001fca4:	83 c4 0c             	add    esp,0xc
c001fca7:	c3                   	ret    

c001fca8 <APIC::disable()>:
c001fca8:	90                   	nop
c001fca9:	c3                   	ret    

c001fcaa <APIC::close(int, int, void*)>:
c001fcaa:	55                   	push   ebp
c001fcab:	89 e5                	mov    ebp,esp
c001fcad:	83 ec 08             	sub    esp,0x8
c001fcb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb5:	83 c0 3c             	add    eax,0x3c
c001fcb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcba:	83 ec 0c             	sub    esp,0xc
c001fcbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcc0:	ff d0                	call   eax
c001fcc2:	83 c4 10             	add    esp,0x10
c001fcc5:	b8 00 00 00 00       	mov    eax,0x0
c001fcca:	c9                   	leave  
c001fccb:	c3                   	ret    

c001fccc <IOAPIC::close(int, int, void*)>:
c001fccc:	b8 00 00 00 00       	mov    eax,0x0
c001fcd1:	c3                   	ret    

c001fcd2 <APIC::io_wait()>:
c001fcd2:	eb 00                	jmp    c001fcd4 <APIC::io_wait()+0x2>
c001fcd4:	eb 00                	jmp    c001fcd6 <APIC::io_wait()+0x4>
c001fcd6:	90                   	nop
c001fcd7:	c3                   	ret    

c001fcd8 <APIC::getBase()>:
c001fcd8:	55                   	push   ebp
c001fcd9:	89 e5                	mov    ebp,esp
c001fcdb:	83 ec 18             	sub    esp,0x18
c001fcde:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001fce3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fce9:	83 e0 08             	and    eax,0x8
c001fcec:	84 c0                	test   al,al
c001fcee:	75 07                	jne    c001fcf7 <APIC::getBase()+0x1f>
c001fcf0:	b8 00 00 00 00       	mov    eax,0x0
c001fcf5:	eb 21                	jmp    c001fd18 <APIC::getBase()+0x40>
c001fcf7:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001fcfc:	83 ec 08             	sub    esp,0x8
c001fcff:	6a 1b                	push   0x1b
c001fd01:	50                   	push   eax
c001fd02:	e8 1d 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd13:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd18:	c9                   	leave  
c001fd19:	c3                   	ret    

c001fd1a <APIC::eoi(unsigned char)>:
c001fd1a:	55                   	push   ebp
c001fd1b:	89 e5                	mov    ebp,esp
c001fd1d:	83 ec 28             	sub    esp,0x28
c001fd20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd23:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd2c:	e8 a7 ff ff ff       	call   c001fcd8 <APIC::getBase()>
c001fd31:	83 c4 10             	add    esp,0x10
c001fd34:	05 b0 00 00 00       	add    eax,0xb0
c001fd39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd3f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd45:	90                   	nop
c001fd46:	c9                   	leave  
c001fd47:	c3                   	ret    

c001fd48 <APIC::open(int, int, void*)>:
c001fd48:	55                   	push   ebp
c001fd49:	89 e5                	mov    ebp,esp
c001fd4b:	57                   	push   edi
c001fd4c:	56                   	push   esi
c001fd4d:	53                   	push   ebx
c001fd4e:	83 ec 2c             	sub    esp,0x2c
c001fd51:	83 ec 0c             	sub    esp,0xc
c001fd54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd57:	e8 7c ff ff ff       	call   c001fcd8 <APIC::getBase()>
c001fd5c:	83 c4 10             	add    esp,0x10
c001fd5f:	89 c2                	mov    edx,eax
c001fd61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd64:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd6a:	0f b6 f8             	movzx  edi,al
c001fd6d:	89 d0                	mov    eax,edx
c001fd6f:	ba 00 00 00 00       	mov    edx,0x0
c001fd74:	89 c1                	mov    ecx,eax
c001fd76:	80 e5 ff             	and    ch,0xff
c001fd79:	89 cb                	mov    ebx,ecx
c001fd7b:	0f b6 f2             	movzx  esi,dl
c001fd7e:	89 d8                	mov    eax,ebx
c001fd80:	89 f2                	mov    edx,esi
c001fd82:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd85:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd88:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd8c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd90:	83 e0 00             	and    eax,0x0
c001fd93:	09 d0                	or     eax,edx
c001fd95:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd9c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fda2:	8d 50 01             	lea    edx,[eax+0x1]
c001fda5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fda8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fdae:	0f b6 d0             	movzx  edx,al
c001fdb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdb4:	83 c2 08             	add    edx,0x8
c001fdb7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fdbb:	0f b6 c9             	movzx  ecx,cl
c001fdbe:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fdc4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdce:	e8 05 ff ff ff       	call   c001fcd8 <APIC::getBase()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	05 f0 00 00 00       	add    eax,0xf0
c001fddb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fdde:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fde1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fde6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fded:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fdf4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fdf7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fdfa:	89 10                	mov    DWORD PTR [eax],edx
c001fdfc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe03:	a1 70 6c 02 c0       	mov    eax,ds:0xc0026c70
c001fe08:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe0b:	7d 7c                	jge    c001fe89 <APIC::open(int, int, void*)+0x141>
c001fe0d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe10:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe17:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe1a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe1d:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe24:	c1 e8 08             	shr    eax,0x8
c001fe27:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe2e:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe35:	c1 e8 18             	shr    eax,0x18
c001fe38:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe3b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe3f:	75 40                	jne    c001fe81 <APIC::open(int, int, void*)+0x139>
c001fe41:	83 ec 0c             	sub    esp,0xc
c001fe44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe47:	e8 8c fe ff ff       	call   c001fcd8 <APIC::getBase()>
c001fe4c:	83 c4 10             	add    esp,0x10
c001fe4f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fe53:	75 07                	jne    c001fe5c <APIC::open(int, int, void*)+0x114>
c001fe55:	ba 60 03 00 00       	mov    edx,0x360
c001fe5a:	eb 05                	jmp    c001fe61 <APIC::open(int, int, void*)+0x119>
c001fe5c:	ba 50 03 00 00       	mov    edx,0x350
c001fe61:	01 d0                	add    eax,edx
c001fe63:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fe66:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe69:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe6b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fe6e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fe75:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fe79:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe7c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fe7f:	89 10                	mov    DWORD PTR [eax],edx
c001fe81:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe84:	e9 7a ff ff ff       	jmp    c001fe03 <APIC::open(int, int, void*)+0xbb>
c001fe89:	b8 00 00 00 00       	mov    eax,0x0
c001fe8e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe91:	5b                   	pop    ebx
c001fe92:	5e                   	pop    esi
c001fe93:	5f                   	pop    edi
c001fe94:	5d                   	pop    ebp
c001fe95:	c3                   	ret    

c001fe96 <IOAPIC::IOAPIC()>:
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9d:	83 ec 08             	sub    esp,0x8
c001fea0:	68 e4 53 02 c0       	push   0xc00253e4
c001fea5:	50                   	push   eax
c001fea6:	e8 07 e2 fe ff       	call   c000e0b2 <Device::Device(char const*)>
c001feab:	83 c4 10             	add    esp,0x10
c001feae:	ba 0c 55 02 c0       	mov    edx,0xc002550c
c001feb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb7:	89 10                	mov    DWORD PTR [eax],edx
c001feb9:	90                   	nop
c001feba:	83 c4 0c             	add    esp,0xc
c001febd:	c3                   	ret    

c001febe <APIC::APIC()>:
c001febe:	53                   	push   ebx
c001febf:	83 ec 18             	sub    esp,0x18
c001fec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fec6:	83 ec 08             	sub    esp,0x8
c001fec9:	68 ec 53 02 c0       	push   0xc00253ec
c001fece:	50                   	push   eax
c001fecf:	e8 56 e9 fe ff       	call   c000e82a <InterruptController::InterruptController(char const*)>
c001fed4:	83 c4 10             	add    esp,0x10
c001fed7:	ba c4 54 02 c0       	mov    edx,0xc00254c4
c001fedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fee0:	89 10                	mov    DWORD PTR [eax],edx
c001fee2:	a0 40 83 02 c0       	mov    al,ds:0xc0028340
c001fee7:	83 f0 01             	xor    eax,0x1
c001feea:	84 c0                	test   al,al
c001feec:	0f 84 a1 00 00 00    	je     c001ff93 <APIC::APIC()+0xd5>
c001fef2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fef7:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c001fefc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff00:	0f 83 86 00 00 00    	jae    c001ff8c <APIC::APIC()+0xce>
c001ff06:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff15:	e8 a9 9a fe ff       	call   c00099c3 <malloc>
c001ff1a:	83 c4 10             	add    esp,0x10
c001ff1d:	89 c3                	mov    ebx,eax
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	53                   	push   ebx
c001ff23:	e8 6e ff ff ff       	call   c001fe96 <IOAPIC::IOAPIC()>
c001ff28:	83 c4 10             	add    esp,0x10
c001ff2b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff2f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff38:	89 14 85 20 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ce0],edx
c001ff3f:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c001ff44:	40                   	inc    eax
c001ff45:	a3 00 83 02 c0       	mov    ds:0xc0028300,eax
c001ff4a:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c001ff4f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ff55:	83 ec 08             	sub    esp,0x8
c001ff58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff5c:	50                   	push   eax
c001ff5d:	e8 4c df fe ff       	call   c000deae <Device::addChild(Device*)>
c001ff62:	83 c4 10             	add    esp,0x10
c001ff65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff69:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6b:	83 c0 08             	add    eax,0x8
c001ff6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff70:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ff75:	6a 00                	push   0x0
c001ff77:	6a 00                	push   0x0
c001ff79:	52                   	push   edx
c001ff7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff7e:	ff d0                	call   eax
c001ff80:	83 c4 10             	add    esp,0x10
c001ff83:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff87:	e9 6b ff ff ff       	jmp    c001fef7 <APIC::APIC()+0x39>
c001ff8c:	c6 05 40 83 02 c0 01 	mov    BYTE PTR ds:0xc0028340,0x1
c001ff93:	90                   	nop
c001ff94:	83 c4 18             	add    esp,0x18
c001ff97:	5b                   	pop    ebx
c001ff98:	c3                   	ret    
c001ff99:	90                   	nop

c001ff9a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ff9a:	55                   	push   ebp
c001ff9b:	89 e5                	mov    ebp,esp
c001ff9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffa0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffa6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffa9:	72 1d                	jb     c001ffc8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffae:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ffb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ffbd:	01 d0                	add    eax,edx
c001ffbf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffc2:	73 04                	jae    c001ffc8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffc4:	b0 01                	mov    al,0x1
c001ffc6:	eb 02                	jmp    c001ffca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ffc8:	b0 00                	mov    al,0x0
c001ffca:	5d                   	pop    ebp
c001ffcb:	c3                   	ret    

c001ffcc <IOAPIC::read(int)>:
c001ffcc:	55                   	push   ebp
c001ffcd:	89 e5                	mov    ebp,esp
c001ffcf:	83 ec 10             	sub    esp,0x10
c001ffd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ffdb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ffde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffe1:	0f b6 d0             	movzx  edx,al
c001ffe4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffe7:	89 10                	mov    DWORD PTR [eax],edx
c001ffe9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffec:	83 c0 10             	add    eax,0x10
c001ffef:	8b 00                	mov    eax,DWORD PTR [eax]
c001fff1:	c9                   	leave  
c001fff2:	c3                   	ret    
c001fff3:	90                   	nop

c001fff4 <IOAPIC::open(int, int, void*)>:
c001fff4:	55                   	push   ebp
c001fff5:	89 e5                	mov    ebp,esp
c001fff7:	57                   	push   edi
c001fff8:	56                   	push   esi
c001fff9:	53                   	push   ebx
c001fffa:	83 ec 0c             	sub    esp,0xc
c001fffd:	83 ec 0c             	sub    esp,0xc
c0020000:	68 17 54 02 c0       	push   0xc0025417
c0020005:	e8 5d ca fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c002000a:	83 c4 10             	add    esp,0x10
c002000d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020010:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020013:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002001c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020022:	8b 14 85 60 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd92a0]
c0020029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002002c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020035:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002003b:	8b 14 85 e0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9220]
c0020042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020045:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002004b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002004e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020057:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002005d:	0f b6 f8             	movzx  edi,al
c0020060:	89 d0                	mov    eax,edx
c0020062:	ba 00 00 00 00       	mov    edx,0x0
c0020067:	89 c1                	mov    ecx,eax
c0020069:	80 e5 ff             	and    ch,0xff
c002006c:	89 cb                	mov    ebx,ecx
c002006e:	0f b6 f2             	movzx  esi,dl
c0020071:	89 d8                	mov    eax,ebx
c0020073:	89 f2                	mov    edx,esi
c0020075:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020078:	8d 5f 08             	lea    ebx,[edi+0x8]
c002007b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002007f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020083:	83 e0 00             	and    eax,0x0
c0020086:	09 d0                	or     eax,edx
c0020088:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002008c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002008f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020095:	8d 50 01             	lea    edx,[eax+0x1]
c0020098:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002009b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00200a1:	0f b6 d0             	movzx  edx,al
c00200a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a7:	83 c2 08             	add    edx,0x8
c00200aa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00200ae:	0f b6 c9             	movzx  ecx,cl
c00200b1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00200b7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00200bb:	83 ec 08             	sub    esp,0x8
c00200be:	6a 01                	push   0x1
c00200c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200c3:	e8 04 ff ff ff       	call   c001ffcc <IOAPIC::read(int)>
c00200c8:	83 c4 10             	add    esp,0x10
c00200cb:	c1 f8 10             	sar    eax,0x10
c00200ce:	0f b6 c0             	movzx  eax,al
c00200d1:	8d 50 01             	lea    edx,[eax+0x1]
c00200d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200d7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00200dd:	b8 00 00 00 00       	mov    eax,0x0
c00200e2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200e5:	5b                   	pop    ebx
c00200e6:	5e                   	pop    esi
c00200e7:	5f                   	pop    edi
c00200e8:	5d                   	pop    ebp
c00200e9:	c3                   	ret    

c00200ea <IOAPIC::write(int, int)>:
c00200ea:	55                   	push   ebp
c00200eb:	89 e5                	mov    ebp,esp
c00200ed:	83 ec 10             	sub    esp,0x10
c00200f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00200fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200ff:	0f b6 d0             	movzx  edx,al
c0020102:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020105:	89 10                	mov    DWORD PTR [eax],edx
c0020107:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002010a:	8d 50 10             	lea    edx,[eax+0x10]
c002010d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020110:	89 02                	mov    DWORD PTR [edx],eax
c0020112:	90                   	nop
c0020113:	c9                   	leave  
c0020114:	c3                   	ret    
c0020115:	90                   	nop

c0020116 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020116:	55                   	push   ebp
c0020117:	89 e5                	mov    ebp,esp
c0020119:	53                   	push   ebx
c002011a:	83 ec 2c             	sub    esp,0x2c
c002011d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020120:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020123:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020126:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020129:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002012c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002012f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020132:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020135:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020138:	88 d8                	mov    al,bl
c002013a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002013d:	88 c8                	mov    al,cl
c002013f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020142:	88 d0                	mov    al,dl
c0020144:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020147:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002014b:	83 c0 08             	add    eax,0x8
c002014e:	01 c0                	add    eax,eax
c0020150:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020153:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020157:	83 c0 08             	add    eax,0x8
c002015a:	01 c0                	add    eax,eax
c002015c:	40                   	inc    eax
c002015d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020160:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020163:	50                   	push   eax
c0020164:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020167:	e8 60 fe ff ff       	call   c001ffcc <IOAPIC::read(int)>
c002016c:	83 c4 08             	add    esp,0x8
c002016f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020172:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020179:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002017c:	c1 e0 18             	shl    eax,0x18
c002017f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020182:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020185:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020188:	52                   	push   edx
c0020189:	50                   	push   eax
c002018a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002018d:	e8 58 ff ff ff       	call   c00200ea <IOAPIC::write(int, int)>
c0020192:	83 c4 0c             	add    esp,0xc
c0020195:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020198:	50                   	push   eax
c0020199:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002019c:	e8 2b fe ff ff       	call   c001ffcc <IOAPIC::read(int)>
c00201a1:	83 c4 08             	add    esp,0x8
c00201a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201a7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00201ae:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00201b5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00201bc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201c0:	74 09                	je     c00201cb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00201c2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00201c9:	eb 07                	jmp    c00201d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00201cb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00201d2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00201d6:	74 09                	je     c00201e1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00201d8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00201df:	eb 07                	jmp    c00201e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00201e1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00201e8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00201ef:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00201f3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00201f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00201f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201fc:	52                   	push   edx
c00201fd:	50                   	push   eax
c00201fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020201:	e8 e4 fe ff ff       	call   c00200ea <IOAPIC::write(int, int)>
c0020206:	83 c4 0c             	add    esp,0xc
c0020209:	90                   	nop
c002020a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002020d:	c9                   	leave  
c002020e:	c3                   	ret    
c002020f:	90                   	nop

c0020210 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0020210:	55                   	push   ebp
c0020211:	89 e5                	mov    ebp,esp
c0020213:	57                   	push   edi
c0020214:	56                   	push   esi
c0020215:	53                   	push   ebx
c0020216:	83 ec 2c             	sub    esp,0x2c
c0020219:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002021c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002021f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020223:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0020227:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002022b:	74 5a                	je     c0020287 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002022d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0020231:	7f 44                	jg     c0020277 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0020233:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020236:	05 c0 5a 02 c0       	add    eax,0xc0025ac0
c002023b:	8a 00                	mov    al,BYTE PTR [eax]
c002023d:	0f b6 c0             	movzx  eax,al
c0020240:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0020243:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020246:	66 8b 84 00 00 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9300]
c002024e:	0f b7 c0             	movzx  eax,ax
c0020251:	83 e0 02             	and    eax,0x2
c0020254:	85 c0                	test   eax,eax
c0020256:	74 04                	je     c002025c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0020258:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002025c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002025f:	66 8b 84 00 00 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9300]
c0020267:	0f b7 c0             	movzx  eax,ax
c002026a:	83 e0 08             	and    eax,0x8
c002026d:	85 c0                	test   eax,eax
c002026f:	74 16                	je     c0020287 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020271:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020275:	eb 10                	jmp    c0020287 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020277:	83 ec 0c             	sub    esp,0xc
c002027a:	68 28 54 02 c0       	push   0xc0025428
c002027f:	e8 a5 40 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0020284:	83 c4 10             	add    esp,0x10
c0020287:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002028b:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c0020290:	83 ec 08             	sub    esp,0x8
c0020293:	50                   	push   eax
c0020294:	68 60 54 02 c0       	push   0xc0025460
c0020299:	e8 c9 c7 fe ff       	call   c000ca67 <Dbg::kprintf(char const*, ...)>
c002029e:	83 c4 10             	add    esp,0x10
c00202a1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00202a8:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c00202ad:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00202b0:	7d 67                	jge    c0020319 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00202b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202b5:	8b 04 85 20 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce0]
c00202bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202bf:	83 ec 08             	sub    esp,0x8
c00202c2:	52                   	push   edx
c00202c3:	50                   	push   eax
c00202c4:	e8 d1 fc ff ff       	call   c001ff9a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	84 c0                	test   al,al
c00202ce:	74 44                	je     c0020314 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00202d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202d3:	8b 1c 85 20 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7ce0]
c00202da:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00202de:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00202e1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00202e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202e8:	83 c0 20             	add    eax,0x20
c00202eb:	0f b6 f0             	movzx  esi,al
c00202ee:	b8 00 00 00 00       	mov    eax,0x0
c00202f3:	99                   	cdq    
c00202f4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00202f7:	0f b6 c9             	movzx  ecx,cl
c00202fa:	83 ec 04             	sub    esp,0x4
c00202fd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020300:	57                   	push   edi
c0020301:	56                   	push   esi
c0020302:	52                   	push   edx
c0020303:	50                   	push   eax
c0020304:	51                   	push   ecx
c0020305:	53                   	push   ebx
c0020306:	e8 0b fe ff ff       	call   c0020116 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002030b:	83 c4 20             	add    esp,0x20
c002030e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0020312:	eb 05                	jmp    c0020319 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020314:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0020317:	eb 8f                	jmp    c00202a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020319:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002031c:	83 f0 01             	xor    eax,0x1
c002031f:	84 c0                	test   al,al
c0020321:	74 10                	je     c0020333 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0020323:	83 ec 0c             	sub    esp,0xc
c0020326:	68 77 54 02 c0       	push   0xc0025477
c002032b:	e8 f9 3f ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0020330:	83 c4 10             	add    esp,0x10
c0020333:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0020337:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002033e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0020342:	7f 65                	jg     c00203a9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020347:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002034a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020351:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020354:	01 ca                	add    edx,ecx
c0020356:	83 c2 54             	add    edx,0x54
c0020359:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002035d:	85 c0                	test   eax,eax
c002035f:	75 43                	jne    c00203a4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0020361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020364:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020367:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002036e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020371:	01 ca                	add    edx,ecx
c0020373:	8d 4a 54             	lea    ecx,[edx+0x54]
c0020376:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020379:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002037d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020380:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020383:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002038a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002038d:	01 ca                	add    edx,ecx
c002038f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020395:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020398:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002039c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002039f:	83 e8 20             	sub    eax,0x20
c00203a2:	eb 1a                	jmp    c00203be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00203a4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00203a7:	eb 95                	jmp    c002033e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00203a9:	83 ec 0c             	sub    esp,0xc
c00203ac:	68 84 54 02 c0       	push   0xc0025484
c00203b1:	e8 73 3f ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00203b6:	83 c4 10             	add    esp,0x10
c00203b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00203be:	8d 65 f4             	lea    esp,[ebp-0xc]
c00203c1:	5b                   	pop    ebx
c00203c2:	5e                   	pop    esi
c00203c3:	5f                   	pop    edi
c00203c4:	5d                   	pop    ebp
c00203c5:	c3                   	ret    

c00203c6 <PIC::disable()>:
c00203c6:	55                   	push   ebp
c00203c7:	89 e5                	mov    ebp,esp
c00203c9:	83 ec 10             	sub    esp,0x10
c00203cc:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00203d2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00203d6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00203d9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00203dd:	ee                   	out    dx,al
c00203de:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00203e4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00203e8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00203eb:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00203ef:	ee                   	out    dx,al
c00203f0:	90                   	nop
c00203f1:	c9                   	leave  
c00203f2:	c3                   	ret    
c00203f3:	90                   	nop

c00203f4 <PIC::close(int, int, void*)>:
c00203f4:	55                   	push   ebp
c00203f5:	89 e5                	mov    ebp,esp
c00203f7:	83 ec 08             	sub    esp,0x8
c00203fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00203ff:	83 c0 3c             	add    eax,0x3c
c0020402:	8b 00                	mov    eax,DWORD PTR [eax]
c0020404:	83 ec 0c             	sub    esp,0xc
c0020407:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002040a:	ff d0                	call   eax
c002040c:	83 c4 10             	add    esp,0x10
c002040f:	b8 00 00 00 00       	mov    eax,0x0
c0020414:	c9                   	leave  
c0020415:	c3                   	ret    

c0020416 <PIC::PIC()>:
c0020416:	83 ec 0c             	sub    esp,0xc
c0020419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041d:	83 ec 08             	sub    esp,0x8
c0020420:	68 30 55 02 c0       	push   0xc0025530
c0020425:	50                   	push   eax
c0020426:	e8 ff e3 fe ff       	call   c000e82a <InterruptController::InterruptController(char const*)>
c002042b:	83 c4 10             	add    esp,0x10
c002042e:	ba 5c 55 02 c0       	mov    edx,0xc002555c
c0020433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020437:	89 10                	mov    DWORD PTR [eax],edx
c0020439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020443:	0f b6 d0             	movzx  edx,al
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0020451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020455:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002045b:	0f b6 d0             	movzx  edx,al
c002045e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020462:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020471:	8d 50 01             	lea    edx,[eax+0x1]
c0020474:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020478:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002047e:	0f b6 d0             	movzx  edx,al
c0020481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020485:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020489:	83 e1 3f             	and    ecx,0x3f
c002048c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020494:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002049a:	0f b6 d0             	movzx  edx,al
c002049d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00204a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204b2:	0f b6 d0             	movzx  edx,al
c00204b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204c8:	8d 50 01             	lea    edx,[eax+0x1]
c00204cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204cf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204d5:	0f b6 d0             	movzx  edx,al
c00204d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204dc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204e0:	83 e1 3f             	and    ecx,0x3f
c00204e3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204e7:	90                   	nop
c00204e8:	83 c4 0c             	add    esp,0xc
c00204eb:	c3                   	ret    

c00204ec <PIC::ioWait()>:
c00204ec:	eb 00                	jmp    c00204ee <PIC::ioWait()+0x2>
c00204ee:	eb 00                	jmp    c00204f0 <PIC::ioWait()+0x4>
c00204f0:	90                   	nop
c00204f1:	c3                   	ret    

c00204f2 <PIC::getIRQReg(int)>:
c00204f2:	55                   	push   ebp
c00204f3:	89 e5                	mov    ebp,esp
c00204f5:	83 ec 10             	sub    esp,0x10
c00204f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204fb:	0f b6 c0             	movzx  eax,al
c00204fe:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020504:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0020507:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002050a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002050e:	ee                   	out    dx,al
c002050f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020512:	0f b6 c0             	movzx  eax,al
c0020515:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002051b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002051e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020521:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020525:	ee                   	out    dx,al
c0020526:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002052c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0020530:	89 c2                	mov    edx,eax
c0020532:	ec                   	in     al,dx
c0020533:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0020536:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020539:	0f b6 c0             	movzx  eax,al
c002053c:	c1 e0 08             	shl    eax,0x8
c002053f:	89 c1                	mov    ecx,eax
c0020541:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0020547:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002054b:	89 c2                	mov    edx,eax
c002054d:	ec                   	in     al,dx
c002054e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0020551:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020554:	0f b6 c0             	movzx  eax,al
c0020557:	09 c8                	or     eax,ecx
c0020559:	c9                   	leave  
c002055a:	c3                   	ret    
c002055b:	90                   	nop

c002055c <PIC::eoi(unsigned char)>:
c002055c:	55                   	push   ebp
c002055d:	89 e5                	mov    ebp,esp
c002055f:	83 ec 14             	sub    esp,0x14
c0020562:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020565:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0020568:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002056c:	75 1e                	jne    c002058c <PIC::eoi(unsigned char)+0x30>
c002056e:	6a 0b                	push   0xb
c0020570:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020573:	e8 7a ff ff ff       	call   c00204f2 <PIC::getIRQReg(int)>
c0020578:	83 c4 08             	add    esp,0x8
c002057b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002057f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0020583:	25 80 00 00 00       	and    eax,0x80
c0020588:	85 c0                	test   eax,eax
c002058a:	74 5f                	je     c00205eb <PIC::eoi(unsigned char)+0x8f>
c002058c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0020590:	75 2d                	jne    c00205bf <PIC::eoi(unsigned char)+0x63>
c0020592:	6a 0b                	push   0xb
c0020594:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020597:	e8 56 ff ff ff       	call   c00204f2 <PIC::getIRQReg(int)>
c002059c:	83 c4 08             	add    esp,0x8
c002059f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00205a3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00205a6:	66 85 c0             	test   ax,ax
c00205a9:	78 14                	js     c00205bf <PIC::eoi(unsigned char)+0x63>
c00205ab:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00205b1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00205b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205b8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00205bc:	ee                   	out    dx,al
c00205bd:	eb 2d                	jmp    c00205ec <PIC::eoi(unsigned char)+0x90>
c00205bf:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205c3:	76 12                	jbe    c00205d7 <PIC::eoi(unsigned char)+0x7b>
c00205c5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00205cb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00205cf:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00205d2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00205d6:	ee                   	out    dx,al
c00205d7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00205dd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00205e1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00205e4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00205e8:	ee                   	out    dx,al
c00205e9:	eb 01                	jmp    c00205ec <PIC::eoi(unsigned char)+0x90>
c00205eb:	90                   	nop
c00205ec:	c9                   	leave  
c00205ed:	c3                   	ret    

c00205ee <PIC::remap()>:
c00205ee:	55                   	push   ebp
c00205ef:	89 e5                	mov    ebp,esp
c00205f1:	83 ec 48             	sub    esp,0x48
c00205f4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00205fb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0020602:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020608:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002060b:	89 c2                	mov    edx,eax
c002060d:	ec                   	in     al,dx
c002060e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0020611:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020614:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0020617:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002061d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0020620:	89 c2                	mov    edx,eax
c0020622:	ec                   	in     al,dx
c0020623:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0020626:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0020629:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002062c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0020632:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0020636:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0020639:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002063c:	ee                   	out    dx,al
c002063d:	83 ec 0c             	sub    esp,0xc
c0020640:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020643:	e8 a4 fe ff ff       	call   c00204ec <PIC::ioWait()>
c0020648:	83 c4 10             	add    esp,0x10
c002064b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0020651:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020655:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0020658:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002065b:	ee                   	out    dx,al
c002065c:	83 ec 0c             	sub    esp,0xc
c002065f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020662:	e8 85 fe ff ff       	call   c00204ec <PIC::ioWait()>
c0020667:	83 c4 10             	add    esp,0x10
c002066a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002066d:	0f b6 c0             	movzx  eax,al
c0020670:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0020676:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020679:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002067c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002067f:	ee                   	out    dx,al
c0020680:	83 ec 0c             	sub    esp,0xc
c0020683:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020686:	e8 61 fe ff ff       	call   c00204ec <PIC::ioWait()>
c002068b:	83 c4 10             	add    esp,0x10
c002068e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020691:	0f b6 c0             	movzx  eax,al
c0020694:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002069a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002069d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00206a0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00206a3:	ee                   	out    dx,al
c00206a4:	83 ec 0c             	sub    esp,0xc
c00206a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206aa:	e8 3d fe ff ff       	call   c00204ec <PIC::ioWait()>
c00206af:	83 c4 10             	add    esp,0x10
c00206b2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00206b8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00206bc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00206bf:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00206c2:	ee                   	out    dx,al
c00206c3:	83 ec 0c             	sub    esp,0xc
c00206c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206c9:	e8 1e fe ff ff       	call   c00204ec <PIC::ioWait()>
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00206d7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00206db:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00206de:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00206e1:	ee                   	out    dx,al
c00206e2:	83 ec 0c             	sub    esp,0xc
c00206e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206e8:	e8 ff fd ff ff       	call   c00204ec <PIC::ioWait()>
c00206ed:	83 c4 10             	add    esp,0x10
c00206f0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00206f6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00206fa:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00206fd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020700:	ee                   	out    dx,al
c0020701:	83 ec 0c             	sub    esp,0xc
c0020704:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020707:	e8 e0 fd ff ff       	call   c00204ec <PIC::ioWait()>
c002070c:	83 c4 10             	add    esp,0x10
c002070f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020715:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020719:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002071c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002071f:	ee                   	out    dx,al
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020726:	e8 c1 fd ff ff       	call   c00204ec <PIC::ioWait()>
c002072b:	83 c4 10             	add    esp,0x10
c002072e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0020732:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0020738:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002073b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002073e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020741:	ee                   	out    dx,al
c0020742:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0020746:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002074c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002074f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0020752:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020755:	ee                   	out    dx,al
c0020756:	90                   	nop
c0020757:	c9                   	leave  
c0020758:	c3                   	ret    
c0020759:	90                   	nop

c002075a <PIC::open(int, int, void*)>:
c002075a:	55                   	push   ebp
c002075b:	89 e5                	mov    ebp,esp
c002075d:	83 ec 18             	sub    esp,0x18
c0020760:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0020766:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002076a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002076d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020771:	ee                   	out    dx,al
c0020772:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020778:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002077c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002077f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020783:	ee                   	out    dx,al
c0020784:	83 ec 0c             	sub    esp,0xc
c0020787:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002078a:	e8 5f fe ff ff       	call   c00205ee <PIC::remap()>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	b8 00 00 00 00       	mov    eax,0x0
c0020797:	c9                   	leave  
c0020798:	c3                   	ret    
c0020799:	66 90                	xchg   ax,ax
c002079b:	90                   	nop

c002079c <APICTimer::close(int, int, void*)>:
c002079c:	b8 00 00 00 00       	mov    eax,0x0
c00207a1:	c3                   	ret    
c00207a2:	66 90                	xchg   ax,ax

c00207a4 <apicTimerHandler(regs*, void*)>:
c00207a4:	83 ec 0c             	sub    esp,0xc
c00207a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00207ad:	b8 10 27 00 00       	mov    eax,0x2710
c00207b2:	ba 00 00 00 00       	mov    edx,0x0
c00207b7:	f7 f1                	div    ecx
c00207b9:	83 ec 0c             	sub    esp,0xc
c00207bc:	50                   	push   eax
c00207bd:	e8 73 ff fe ff       	call   c0010735 <timerHandler(unsigned int)>
c00207c2:	83 c4 10             	add    esp,0x10
c00207c5:	90                   	nop
c00207c6:	83 c4 0c             	add    esp,0xc
c00207c9:	c3                   	ret    
c00207ca:	66 90                	xchg   ax,ax

c00207cc <APICTimer::write(int)>:
c00207cc:	83 ec 1c             	sub    esp,0x1c
c00207cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00207d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00207dd:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00207e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207e8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00207ee:	83 ec 0c             	sub    esp,0xc
c00207f1:	50                   	push   eax
c00207f2:	e8 e1 f4 ff ff       	call   c001fcd8 <APIC::getBase()>
c00207f7:	83 c4 10             	add    esp,0x10
c00207fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207fe:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0020803:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002080b:	05 e0 03 00 00       	add    eax,0x3e0
c0020810:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002081a:	05 80 03 00 00       	add    eax,0x380
c002081f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0020825:	fb                   	sti    
c0020826:	66 90                	xchg   ax,ax
c0020828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002082c:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0020832:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0020837:	39 c2                	cmp    edx,eax
c0020839:	76 05                	jbe    c0020840 <APICTimer::write(int)+0x74>
c002083b:	eb eb                	jmp    c0020828 <APICTimer::write(int)+0x5c>
c002083d:	8d 76 00             	lea    esi,[esi+0x0]
c0020840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020844:	05 20 03 00 00       	add    eax,0x320
c0020849:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002084f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020853:	05 90 03 00 00       	add    eax,0x390
c0020858:	8b 00                	mov    eax,DWORD PTR [eax]
c002085a:	f7 d0                	not    eax
c002085c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020860:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020868:	ba 00 00 00 00       	mov    edx,0x0
c002086d:	f7 f1                	div    ecx
c002086f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020876:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002087c:	0d 00 00 02 00       	or     eax,0x20000
c0020881:	89 c2                	mov    edx,eax
c0020883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020887:	05 20 03 00 00       	add    eax,0x320
c002088c:	89 10                	mov    DWORD PTR [eax],edx
c002088e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020892:	05 e0 03 00 00       	add    eax,0x3e0
c0020897:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002089d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208a1:	05 80 03 00 00       	add    eax,0x380
c00208a6:	89 c2                	mov    edx,eax
c00208a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00208ab:	89 02                	mov    DWORD PTR [edx],eax
c00208ad:	90                   	nop
c00208ae:	83 c4 1c             	add    esp,0x1c
c00208b1:	c3                   	ret    
c00208b2:	66 90                	xchg   ax,ax

c00208b4 <APICTimer::open(int, int, void*)>:
c00208b4:	57                   	push   edi
c00208b5:	56                   	push   esi
c00208b6:	53                   	push   ebx
c00208b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00208bd:	83 c0 24             	add    eax,0x24
c00208c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00208c2:	83 ec 08             	sub    esp,0x8
c00208c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208cd:	ff d0                	call   eax
c00208cf:	83 c4 10             	add    esp,0x10
c00208d2:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c00208d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00208dd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00208e3:	83 ec 0c             	sub    esp,0xc
c00208e6:	50                   	push   eax
c00208e7:	e8 ec f3 ff ff       	call   c001fcd8 <APIC::getBase()>
c00208ec:	83 c4 10             	add    esp,0x10
c00208ef:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00208f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00208ff:	0f b6 f8             	movzx  edi,al
c0020902:	89 d0                	mov    eax,edx
c0020904:	ba 00 00 00 00       	mov    edx,0x0
c0020909:	89 c1                	mov    ecx,eax
c002090b:	80 e5 ff             	and    ch,0xff
c002090e:	89 cb                	mov    ebx,ecx
c0020910:	0f b6 f2             	movzx  esi,dl
c0020913:	89 d8                	mov    eax,ebx
c0020915:	89 f2                	mov    edx,esi
c0020917:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002091b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002091e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020922:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020926:	83 e0 00             	and    eax,0x0
c0020929:	09 d0                	or     eax,edx
c002092b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020933:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020939:	8d 50 01             	lea    edx,[eax+0x1]
c002093c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020940:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020946:	0f b6 d0             	movzx  edx,al
c0020949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002094d:	83 c2 08             	add    edx,0x8
c0020950:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020954:	0f b6 c9             	movzx  ecx,cl
c0020957:	81 c9 00 00 01 00    	or     ecx,0x10000
c002095d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020965:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020969:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002096f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020977:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002097d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020981:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020987:	83 ec 0c             	sub    esp,0xc
c002098a:	51                   	push   ecx
c002098b:	6a 01                	push   0x1
c002098d:	68 a4 07 02 c0       	push   0xc00207a4
c0020992:	52                   	push   edx
c0020993:	50                   	push   eax
c0020994:	e8 8d d4 fe ff       	call   c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020999:	83 c4 20             	add    esp,0x20
c002099c:	89 c2                	mov    edx,eax
c002099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00209a8:	b8 00 00 00 00       	mov    eax,0x0
c00209ad:	5b                   	pop    ebx
c00209ae:	5e                   	pop    esi
c00209af:	5f                   	pop    edi
c00209b0:	c3                   	ret    
c00209b1:	90                   	nop
c00209b2:	66 90                	xchg   ax,ax

c00209b4 <APICTimer::APICTimer()>:
c00209b4:	83 ec 0c             	sub    esp,0xc
c00209b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bb:	83 ec 08             	sub    esp,0x8
c00209be:	68 9c 55 02 c0       	push   0xc002559c
c00209c3:	50                   	push   eax
c00209c4:	e8 db fc fe ff       	call   c00106a4 <Timer::Timer(char const*)>
c00209c9:	83 c4 10             	add    esp,0x10
c00209cc:	ba b0 55 02 c0       	mov    edx,0xc00255b0
c00209d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d5:	89 10                	mov    DWORD PTR [eax],edx
c00209d7:	90                   	nop
c00209d8:	83 c4 0c             	add    esp,0xc
c00209db:	c3                   	ret    

c00209dc <PIT::write(int)>:
c00209dc:	83 ec 10             	sub    esp,0x10
c00209df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00209ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209f1:	a3 44 83 02 c0       	mov    ds:0xc0028344,eax
c00209f6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00209fb:	99                   	cdq    
c00209fc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a04:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a0b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a19:	ee                   	out    dx,al
c0020a1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a1e:	0f b6 c0             	movzx  eax,al
c0020a21:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a28:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a2c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a30:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a35:	ee                   	out    dx,al
c0020a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a3a:	c1 f8 08             	sar    eax,0x8
c0020a3d:	0f b6 c0             	movzx  eax,al
c0020a40:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020a47:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020a4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020a54:	ee                   	out    dx,al
c0020a55:	90                   	nop
c0020a56:	83 c4 10             	add    esp,0x10
c0020a59:	c3                   	ret    
c0020a5a:	66 90                	xchg   ax,ax

c0020a5c <pitHandler(regs*, void*)>:
c0020a5c:	83 ec 0c             	sub    esp,0xc
c0020a5f:	8b 0d 44 83 02 c0    	mov    ecx,DWORD PTR ds:0xc0028344
c0020a65:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020a6a:	99                   	cdq    
c0020a6b:	f7 f9                	idiv   ecx
c0020a6d:	83 ec 0c             	sub    esp,0xc
c0020a70:	50                   	push   eax
c0020a71:	e8 bf fc fe ff       	call   c0010735 <timerHandler(unsigned int)>
c0020a76:	83 c4 10             	add    esp,0x10
c0020a79:	90                   	nop
c0020a7a:	83 c4 0c             	add    esp,0xc
c0020a7d:	c3                   	ret    
c0020a7e:	66 90                	xchg   ax,ax

c0020a80 <PIT::open(int, int, void*)>:
c0020a80:	83 ec 0c             	sub    esp,0xc
c0020a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a87:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a89:	83 c0 24             	add    eax,0x24
c0020a8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a8e:	83 ec 08             	sub    esp,0x8
c0020a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a99:	ff d0                	call   eax
c0020a9b:	83 c4 10             	add    esp,0x10
c0020a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aa2:	83 ec 0c             	sub    esp,0xc
c0020aa5:	6a 00                	push   0x0
c0020aa7:	6a 01                	push   0x1
c0020aa9:	68 5c 0a 02 c0       	push   0xc0020a5c
c0020aae:	6a 00                	push   0x0
c0020ab0:	50                   	push   eax
c0020ab1:	e8 70 d3 fe ff       	call   c000de26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ab6:	83 c4 20             	add    esp,0x20
c0020ab9:	89 c2                	mov    edx,eax
c0020abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020abf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020ac5:	b8 00 00 00 00       	mov    eax,0x0
c0020aca:	83 c4 0c             	add    esp,0xc
c0020acd:	c3                   	ret    
c0020ace:	66 90                	xchg   ax,ax

c0020ad0 <PIT::close(int, int, void*)>:
c0020ad0:	83 ec 0c             	sub    esp,0xc
c0020ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ad7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae5:	6a 01                	push   0x1
c0020ae7:	68 5c 0a 02 c0       	push   0xc0020a5c
c0020aec:	6a 00                	push   0x0
c0020aee:	50                   	push   eax
c0020aef:	e8 7c d3 fe ff       	call   c000de70 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020af4:	83 c4 10             	add    esp,0x10
c0020af7:	b8 00 00 00 00       	mov    eax,0x0
c0020afc:	83 c4 0c             	add    esp,0xc
c0020aff:	c3                   	ret    

c0020b00 <PIT::PIT()>:
c0020b00:	83 ec 0c             	sub    esp,0xc
c0020b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b07:	83 ec 08             	sub    esp,0x8
c0020b0a:	68 d8 55 02 c0       	push   0xc00255d8
c0020b0f:	50                   	push   eax
c0020b10:	e8 8f fb fe ff       	call   c00106a4 <Timer::Timer(char const*)>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	ba 00 56 02 c0       	mov    edx,0xc0025600
c0020b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b21:	89 10                	mov    DWORD PTR [eax],edx
c0020b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b2d:	0f b6 d0             	movzx  edx,al
c0020b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b34:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b45:	0f b6 d0             	movzx  edx,al
c0020b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b55:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0020b5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b62:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020b68:	0f b6 d0             	movzx  edx,al
c0020b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020b73:	83 e1 3f             	and    ecx,0x3f
c0020b76:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020b7a:	90                   	nop
c0020b7b:	83 c4 0c             	add    esp,0xc
c0020b7e:	c3                   	ret    
c0020b7f:	90                   	nop

c0020b80 <avxDetect>:
c0020b80:	b8 00 00 00 00       	mov    eax,0x0
c0020b85:	c3                   	ret    

c0020b86 <avxSave>:
c0020b86:	c3                   	ret    

c0020b87 <avxLoad>:
c0020b87:	c3                   	ret    

c0020b88 <avxInit>:
c0020b88:	c3                   	ret    

c0020b89 <avxClose>:
c0020b89:	c3                   	ret    

c0020b8a <wouldSheSayYes>:
c0020b8a:	c3                   	ret    
c0020b8b:	49                   	dec    ecx
c0020b8c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020b90:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020b94:	75 20                	jne    c0020bb6 <sseDetect.noSSE+0x1>
c0020b96:	4e                   	dec    esi
c0020b97:	79 61                	jns    c0020bfa <x87Detect+0x14>
c0020b99:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020b9e:	66 90                	xchg   ax,ax

c0020ba0 <absolutelyNoChanceInHell>:
c0020ba0:	b8 01 00 00 00       	mov    eax,0x1
c0020ba5:	0f a2                	cpuid  
c0020ba7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020bad:	74 06                	je     c0020bb5 <sseDetect.noSSE>
c0020baf:	b8 01 00 00 00       	mov    eax,0x1
c0020bb4:	c3                   	ret    

c0020bb5 <sseDetect.noSSE>:
c0020bb5:	31 c0                	xor    eax,eax
c0020bb7:	c3                   	ret    

c0020bb8 <sseSave>:
c0020bb8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020bbd:	c3                   	ret    

c0020bbe <sseLoad>:
c0020bbe:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020bc3:	c3                   	ret    

c0020bc4 <sseInit>:
c0020bc4:	e8 49 00 00 00       	call   c0020c12 <x87Init>
c0020bc9:	0f 20 e0             	mov    eax,cr4
c0020bcc:	66 0d 00 06          	or     ax,0x600
c0020bd0:	0f 22 e0             	mov    cr4,eax
c0020bd3:	c3                   	ret    

c0020bd4 <sseClose>:
c0020bd4:	c3                   	ret    
c0020bd5:	66 90                	xchg   ax,ax
c0020bd7:	66 90                	xchg   ax,ax
c0020bd9:	66 90                	xchg   ax,ax
c0020bdb:	66 90                	xchg   ax,ax
c0020bdd:	66 90                	xchg   ax,ax
c0020bdf:	90                   	nop

c0020be0 <value_37F>:
c0020be0:	7f 03                	jg     c0020be5 <value_37A+0x1>

c0020be2 <value_37E>:
c0020be2:	7e 03                	jle    c0020be7 <x87Detect+0x1>

c0020be4 <value_37A>:
c0020be4:	7a 03                	jp     c0020be9 <x87Detect+0x3>

c0020be6 <x87Detect>:
c0020be6:	b8 01 00 00 00       	mov    eax,0x1
c0020beb:	0f a2                	cpuid  
c0020bed:	f7 c2 01 00 00 00    	test   edx,0x1
c0020bf3:	74 06                	je     c0020bfb <x87Detect.nox87>
c0020bf5:	b8 01 00 00 00       	mov    eax,0x1
c0020bfa:	c3                   	ret    

c0020bfb <x87Detect.nox87>:
c0020bfb:	b8 00 00 00 00       	mov    eax,0x0
c0020c00:	c3                   	ret    

c0020c01 <x87Save>:
c0020c01:	55                   	push   ebp
c0020c02:	89 e5                	mov    ebp,esp
c0020c04:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c08:	c9                   	leave  
c0020c09:	c3                   	ret    

c0020c0a <x87Load>:
c0020c0a:	55                   	push   ebp
c0020c0b:	89 e5                	mov    ebp,esp
c0020c0d:	dd 65 08             	frstor [ebp+0x8]
c0020c10:	c9                   	leave  
c0020c11:	c3                   	ret    

c0020c12 <x87Init>:
c0020c12:	9b db e3             	finit  
c0020c15:	0f 20 c0             	mov    eax,cr0
c0020c18:	66 25 fb ff          	and    ax,0xfffb
c0020c1c:	66 0d 22 00          	or     ax,0x22
c0020c20:	0f 22 c0             	mov    cr0,eax
c0020c23:	0f 06                	clts   
c0020c25:	d9 2d e4 0b 02 c0    	fldcw  WORD PTR ds:0xc0020be4
c0020c2b:	c3                   	ret    

c0020c2c <x87Close>:
c0020c2c:	c3                   	ret    
c0020c2d:	66 90                	xchg   ax,ax
c0020c2f:	90                   	nop

c0020c30 <__do_global_ctors_aux>:
c0020c30:	a1 cc 1d 02 c0       	mov    eax,ds:0xc0021dcc
c0020c35:	83 f8 ff             	cmp    eax,0xffffffff
c0020c38:	74 1a                	je     c0020c54 <__do_global_ctors_aux+0x24>
c0020c3a:	55                   	push   ebp
c0020c3b:	89 e5                	mov    ebp,esp
c0020c3d:	53                   	push   ebx
c0020c3e:	52                   	push   edx
c0020c3f:	bb cc 1d 02 c0       	mov    ebx,0xc0021dcc
c0020c44:	ff d0                	call   eax
c0020c46:	83 eb 04             	sub    ebx,0x4
c0020c49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c4b:	83 f8 ff             	cmp    eax,0xffffffff
c0020c4e:	75 f4                	jne    c0020c44 <__do_global_ctors_aux+0x14>
c0020c50:	58                   	pop    eax
c0020c51:	5b                   	pop    ebx
c0020c52:	5d                   	pop    ebp
c0020c53:	c3                   	ret    
c0020c54:	c3                   	ret    
c0020c55:	66 90                	xchg   ax,ax
c0020c57:	90                   	nop

c0020c58 <__divdi3>:
c0020c58:	55                   	push   ebp
c0020c59:	57                   	push   edi
c0020c5a:	56                   	push   esi
c0020c5b:	53                   	push   ebx
c0020c5c:	83 ec 1c             	sub    esp,0x1c
c0020c5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020c63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020c6a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020c6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c76:	85 db                	test   ebx,ebx
c0020c78:	0f 88 8e 00 00 00    	js     c0020d0c <__divdi3+0xb4>
c0020c7e:	89 dd                	mov    ebp,ebx
c0020c80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c88:	89 d3                	mov    ebx,edx
c0020c8a:	85 d2                	test   edx,edx
c0020c8c:	79 0d                	jns    c0020c9b <__divdi3+0x43>
c0020c8e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020c92:	f7 d8                	neg    eax
c0020c94:	83 d2 00             	adc    edx,0x0
c0020c97:	f7 da                	neg    edx
c0020c99:	89 d3                	mov    ebx,edx
c0020c9b:	89 c7                	mov    edi,eax
c0020c9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ca0:	85 db                	test   ebx,ebx
c0020ca2:	75 48                	jne    c0020cec <__divdi3+0x94>
c0020ca4:	39 ef                	cmp    edi,ebp
c0020ca6:	76 24                	jbe    c0020ccc <__divdi3+0x74>
c0020ca8:	89 ea                	mov    edx,ebp
c0020caa:	f7 f7                	div    edi
c0020cac:	89 c1                	mov    ecx,eax
c0020cae:	31 f6                	xor    esi,esi
c0020cb0:	89 c8                	mov    eax,ecx
c0020cb2:	89 f2                	mov    edx,esi
c0020cb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020cb8:	85 c9                	test   ecx,ecx
c0020cba:	74 07                	je     c0020cc3 <__divdi3+0x6b>
c0020cbc:	f7 d8                	neg    eax
c0020cbe:	83 d2 00             	adc    edx,0x0
c0020cc1:	f7 da                	neg    edx
c0020cc3:	83 c4 1c             	add    esp,0x1c
c0020cc6:	5b                   	pop    ebx
c0020cc7:	5e                   	pop    esi
c0020cc8:	5f                   	pop    edi
c0020cc9:	5d                   	pop    ebp
c0020cca:	c3                   	ret    
c0020ccb:	90                   	nop
c0020ccc:	85 ff                	test   edi,edi
c0020cce:	75 0b                	jne    c0020cdb <__divdi3+0x83>
c0020cd0:	b8 01 00 00 00       	mov    eax,0x1
c0020cd5:	31 d2                	xor    edx,edx
c0020cd7:	f7 f3                	div    ebx
c0020cd9:	89 c7                	mov    edi,eax
c0020cdb:	31 d2                	xor    edx,edx
c0020cdd:	89 e8                	mov    eax,ebp
c0020cdf:	f7 f7                	div    edi
c0020ce1:	89 c6                	mov    esi,eax
c0020ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ce6:	f7 f7                	div    edi
c0020ce8:	89 c1                	mov    ecx,eax
c0020cea:	eb c4                	jmp    c0020cb0 <__divdi3+0x58>
c0020cec:	39 eb                	cmp    ebx,ebp
c0020cee:	77 3c                	ja     c0020d2c <__divdi3+0xd4>
c0020cf0:	0f bd f3             	bsr    esi,ebx
c0020cf3:	83 f6 1f             	xor    esi,0x1f
c0020cf6:	75 40                	jne    c0020d38 <__divdi3+0xe0>
c0020cf8:	39 eb                	cmp    ebx,ebp
c0020cfa:	72 09                	jb     c0020d05 <__divdi3+0xad>
c0020cfc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020cff:	0f 87 97 00 00 00    	ja     c0020d9c <__divdi3+0x144>
c0020d05:	b9 01 00 00 00       	mov    ecx,0x1
c0020d0a:	eb a4                	jmp    c0020cb0 <__divdi3+0x58>
c0020d0c:	f7 d9                	neg    ecx
c0020d0e:	83 d3 00             	adc    ebx,0x0
c0020d11:	f7 db                	neg    ebx
c0020d13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d1a:	89 dd                	mov    ebp,ebx
c0020d1c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d24:	e9 5f ff ff ff       	jmp    c0020c88 <__divdi3+0x30>
c0020d29:	8d 76 00             	lea    esi,[esi+0x0]
c0020d2c:	31 f6                	xor    esi,esi
c0020d2e:	31 c9                	xor    ecx,ecx
c0020d30:	e9 7b ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020d35:	8d 76 00             	lea    esi,[esi+0x0]
c0020d38:	b8 20 00 00 00       	mov    eax,0x20
c0020d3d:	29 f0                	sub    eax,esi
c0020d3f:	89 f1                	mov    ecx,esi
c0020d41:	d3 e3                	shl    ebx,cl
c0020d43:	89 fa                	mov    edx,edi
c0020d45:	88 c1                	mov    cl,al
c0020d47:	d3 ea                	shr    edx,cl
c0020d49:	09 da                	or     edx,ebx
c0020d4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d4f:	89 f1                	mov    ecx,esi
c0020d51:	d3 e7                	shl    edi,cl
c0020d53:	89 eb                	mov    ebx,ebp
c0020d55:	88 c1                	mov    cl,al
c0020d57:	d3 eb                	shr    ebx,cl
c0020d59:	89 f1                	mov    ecx,esi
c0020d5b:	d3 e5                	shl    ebp,cl
c0020d5d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020d60:	88 c1                	mov    cl,al
c0020d62:	d3 ea                	shr    edx,cl
c0020d64:	09 d5                	or     ebp,edx
c0020d66:	89 e8                	mov    eax,ebp
c0020d68:	89 da                	mov    edx,ebx
c0020d6a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020d6e:	89 d3                	mov    ebx,edx
c0020d70:	89 c5                	mov    ebp,eax
c0020d72:	f7 e7                	mul    edi
c0020d74:	39 d3                	cmp    ebx,edx
c0020d76:	72 18                	jb     c0020d90 <__divdi3+0x138>
c0020d78:	74 0a                	je     c0020d84 <__divdi3+0x12c>
c0020d7a:	89 e9                	mov    ecx,ebp
c0020d7c:	31 f6                	xor    esi,esi
c0020d7e:	e9 2d ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020d83:	90                   	nop
c0020d84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d87:	89 f1                	mov    ecx,esi
c0020d89:	d3 e7                	shl    edi,cl
c0020d8b:	39 c7                	cmp    edi,eax
c0020d8d:	73 eb                	jae    c0020d7a <__divdi3+0x122>
c0020d8f:	90                   	nop
c0020d90:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020d93:	31 f6                	xor    esi,esi
c0020d95:	e9 16 ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020d9a:	66 90                	xchg   ax,ax
c0020d9c:	31 c9                	xor    ecx,ecx
c0020d9e:	e9 0d ff ff ff       	jmp    c0020cb0 <__divdi3+0x58>
c0020da3:	90                   	nop

c0020da4 <__moddi3>:
c0020da4:	55                   	push   ebp
c0020da5:	57                   	push   edi
c0020da6:	56                   	push   esi
c0020da7:	53                   	push   ebx
c0020da8:	83 ec 2c             	sub    esp,0x2c
c0020dab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020daf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020db3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020db7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020dbb:	85 db                	test   ebx,ebx
c0020dbd:	0f 88 85 00 00 00    	js     c0020e48 <__moddi3+0xa4>
c0020dc3:	89 de                	mov    esi,ebx
c0020dc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020dcd:	89 d7                	mov    edi,edx
c0020dcf:	85 d2                	test   edx,edx
c0020dd1:	79 09                	jns    c0020ddc <__moddi3+0x38>
c0020dd3:	f7 d8                	neg    eax
c0020dd5:	83 d2 00             	adc    edx,0x0
c0020dd8:	f7 da                	neg    edx
c0020dda:	89 d7                	mov    edi,edx
c0020ddc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020de0:	89 cd                	mov    ebp,ecx
c0020de2:	85 ff                	test   edi,edi
c0020de4:	75 52                	jne    c0020e38 <__moddi3+0x94>
c0020de6:	89 c3                	mov    ebx,eax
c0020de8:	39 f0                	cmp    eax,esi
c0020dea:	76 24                	jbe    c0020e10 <__moddi3+0x6c>
c0020dec:	89 c8                	mov    eax,ecx
c0020dee:	89 f2                	mov    edx,esi
c0020df0:	f7 f3                	div    ebx
c0020df2:	89 d6                	mov    esi,edx
c0020df4:	89 f0                	mov    eax,esi
c0020df6:	31 d2                	xor    edx,edx
c0020df8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020dfc:	85 c9                	test   ecx,ecx
c0020dfe:	74 07                	je     c0020e07 <__moddi3+0x63>
c0020e00:	f7 d8                	neg    eax
c0020e02:	83 d2 00             	adc    edx,0x0
c0020e05:	f7 da                	neg    edx
c0020e07:	83 c4 2c             	add    esp,0x2c
c0020e0a:	5b                   	pop    ebx
c0020e0b:	5e                   	pop    esi
c0020e0c:	5f                   	pop    edi
c0020e0d:	5d                   	pop    ebp
c0020e0e:	c3                   	ret    
c0020e0f:	90                   	nop
c0020e10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e14:	85 db                	test   ebx,ebx
c0020e16:	75 0d                	jne    c0020e25 <__moddi3+0x81>
c0020e18:	b8 01 00 00 00       	mov    eax,0x1
c0020e1d:	31 d2                	xor    edx,edx
c0020e1f:	f7 f7                	div    edi
c0020e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e25:	89 f0                	mov    eax,esi
c0020e27:	31 d2                	xor    edx,edx
c0020e29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e2d:	f7 f7                	div    edi
c0020e2f:	89 e8                	mov    eax,ebp
c0020e31:	f7 f7                	div    edi
c0020e33:	89 d6                	mov    esi,edx
c0020e35:	eb bd                	jmp    c0020df4 <__moddi3+0x50>
c0020e37:	90                   	nop
c0020e38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e3c:	39 f7                	cmp    edi,esi
c0020e3e:	76 20                	jbe    c0020e60 <__moddi3+0xbc>
c0020e40:	89 c8                	mov    eax,ecx
c0020e42:	89 f2                	mov    edx,esi
c0020e44:	eb b2                	jmp    c0020df8 <__moddi3+0x54>
c0020e46:	66 90                	xchg   ax,ax
c0020e48:	f7 d9                	neg    ecx
c0020e4a:	83 d3 00             	adc    ebx,0x0
c0020e4d:	f7 db                	neg    ebx
c0020e4f:	89 de                	mov    esi,ebx
c0020e51:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020e59:	e9 6f ff ff ff       	jmp    c0020dcd <__moddi3+0x29>
c0020e5e:	66 90                	xchg   ax,ax
c0020e60:	0f bd c7             	bsr    eax,edi
c0020e63:	83 f0 1f             	xor    eax,0x1f
c0020e66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e6a:	75 24                	jne    c0020e90 <__moddi3+0xec>
c0020e6c:	39 f7                	cmp    edi,esi
c0020e6e:	72 06                	jb     c0020e76 <__moddi3+0xd2>
c0020e70:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020e74:	77 0c                	ja     c0020e82 <__moddi3+0xde>
c0020e76:	89 e9                	mov    ecx,ebp
c0020e78:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020e7c:	19 fe                	sbb    esi,edi
c0020e7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e86:	89 f2                	mov    edx,esi
c0020e88:	e9 6b ff ff ff       	jmp    c0020df8 <__moddi3+0x54>
c0020e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0020e90:	b8 20 00 00 00       	mov    eax,0x20
c0020e95:	89 c2                	mov    edx,eax
c0020e97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e9b:	29 da                	sub    edx,ebx
c0020e9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020ea1:	88 d9                	mov    cl,bl
c0020ea3:	d3 e7                	shl    edi,cl
c0020ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ea9:	88 d1                	mov    cl,dl
c0020eab:	d3 e8                	shr    eax,cl
c0020ead:	09 c7                	or     edi,eax
c0020eaf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020eb3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020eb7:	89 d8                	mov    eax,ebx
c0020eb9:	88 d9                	mov    cl,bl
c0020ebb:	d3 e7                	shl    edi,cl
c0020ebd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020ec1:	89 f3                	mov    ebx,esi
c0020ec3:	88 d1                	mov    cl,dl
c0020ec5:	d3 eb                	shr    ebx,cl
c0020ec7:	89 c7                	mov    edi,eax
c0020ec9:	88 c1                	mov    cl,al
c0020ecb:	d3 e6                	shl    esi,cl
c0020ecd:	89 e8                	mov    eax,ebp
c0020ecf:	88 d1                	mov    cl,dl
c0020ed1:	d3 e8                	shr    eax,cl
c0020ed3:	09 f0                	or     eax,esi
c0020ed5:	89 f9                	mov    ecx,edi
c0020ed7:	d3 e5                	shl    ebp,cl
c0020ed9:	89 da                	mov    edx,ebx
c0020edb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020edf:	89 d3                	mov    ebx,edx
c0020ee1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ee5:	89 c6                	mov    esi,eax
c0020ee7:	89 d1                	mov    ecx,edx
c0020ee9:	39 d3                	cmp    ebx,edx
c0020eeb:	72 27                	jb     c0020f14 <__moddi3+0x170>
c0020eed:	74 21                	je     c0020f10 <__moddi3+0x16c>
c0020eef:	29 f5                	sub    ebp,esi
c0020ef1:	19 cb                	sbb    ebx,ecx
c0020ef3:	89 de                	mov    esi,ebx
c0020ef5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020ef9:	d3 e6                	shl    esi,cl
c0020efb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020eff:	89 f9                	mov    ecx,edi
c0020f01:	d3 ed                	shr    ebp,cl
c0020f03:	09 ee                	or     esi,ebp
c0020f05:	89 f0                	mov    eax,esi
c0020f07:	d3 eb                	shr    ebx,cl
c0020f09:	89 da                	mov    edx,ebx
c0020f0b:	e9 e8 fe ff ff       	jmp    c0020df8 <__moddi3+0x54>
c0020f10:	39 c5                	cmp    ebp,eax
c0020f12:	73 db                	jae    c0020eef <__moddi3+0x14b>
c0020f14:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f18:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f1c:	89 d1                	mov    ecx,edx
c0020f1e:	89 c6                	mov    esi,eax
c0020f20:	eb cd                	jmp    c0020eef <__moddi3+0x14b>
c0020f22:	66 90                	xchg   ax,ax

c0020f24 <__udivdi3>:
c0020f24:	55                   	push   ebp
c0020f25:	57                   	push   edi
c0020f26:	56                   	push   esi
c0020f27:	53                   	push   ebx
c0020f28:	83 ec 1c             	sub    esp,0x1c
c0020f2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f2f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f33:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f37:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020f3b:	85 d2                	test   edx,edx
c0020f3d:	75 41                	jne    c0020f80 <__udivdi3+0x5c>
c0020f3f:	39 f7                	cmp    edi,esi
c0020f41:	76 15                	jbe    c0020f58 <__udivdi3+0x34>
c0020f43:	89 e8                	mov    eax,ebp
c0020f45:	89 f2                	mov    edx,esi
c0020f47:	f7 f7                	div    edi
c0020f49:	31 db                	xor    ebx,ebx
c0020f4b:	89 da                	mov    edx,ebx
c0020f4d:	83 c4 1c             	add    esp,0x1c
c0020f50:	5b                   	pop    ebx
c0020f51:	5e                   	pop    esi
c0020f52:	5f                   	pop    edi
c0020f53:	5d                   	pop    ebp
c0020f54:	c3                   	ret    
c0020f55:	8d 76 00             	lea    esi,[esi+0x0]
c0020f58:	89 f9                	mov    ecx,edi
c0020f5a:	85 ff                	test   edi,edi
c0020f5c:	75 0b                	jne    c0020f69 <__udivdi3+0x45>
c0020f5e:	b8 01 00 00 00       	mov    eax,0x1
c0020f63:	31 d2                	xor    edx,edx
c0020f65:	f7 f7                	div    edi
c0020f67:	89 c1                	mov    ecx,eax
c0020f69:	31 d2                	xor    edx,edx
c0020f6b:	89 f0                	mov    eax,esi
c0020f6d:	f7 f1                	div    ecx
c0020f6f:	89 c3                	mov    ebx,eax
c0020f71:	89 e8                	mov    eax,ebp
c0020f73:	f7 f1                	div    ecx
c0020f75:	89 da                	mov    edx,ebx
c0020f77:	83 c4 1c             	add    esp,0x1c
c0020f7a:	5b                   	pop    ebx
c0020f7b:	5e                   	pop    esi
c0020f7c:	5f                   	pop    edi
c0020f7d:	5d                   	pop    ebp
c0020f7e:	c3                   	ret    
c0020f7f:	90                   	nop
c0020f80:	39 f2                	cmp    edx,esi
c0020f82:	77 1c                	ja     c0020fa0 <__udivdi3+0x7c>
c0020f84:	0f bd da             	bsr    ebx,edx
c0020f87:	83 f3 1f             	xor    ebx,0x1f
c0020f8a:	75 24                	jne    c0020fb0 <__udivdi3+0x8c>
c0020f8c:	39 f2                	cmp    edx,esi
c0020f8e:	72 08                	jb     c0020f98 <__udivdi3+0x74>
c0020f90:	39 ef                	cmp    edi,ebp
c0020f92:	0f 87 84 00 00 00    	ja     c002101c <__udivdi3+0xf8>
c0020f98:	b8 01 00 00 00       	mov    eax,0x1
c0020f9d:	eb ac                	jmp    c0020f4b <__udivdi3+0x27>
c0020f9f:	90                   	nop
c0020fa0:	31 db                	xor    ebx,ebx
c0020fa2:	31 c0                	xor    eax,eax
c0020fa4:	89 da                	mov    edx,ebx
c0020fa6:	83 c4 1c             	add    esp,0x1c
c0020fa9:	5b                   	pop    ebx
c0020faa:	5e                   	pop    esi
c0020fab:	5f                   	pop    edi
c0020fac:	5d                   	pop    ebp
c0020fad:	c3                   	ret    
c0020fae:	66 90                	xchg   ax,ax
c0020fb0:	b8 20 00 00 00       	mov    eax,0x20
c0020fb5:	29 d8                	sub    eax,ebx
c0020fb7:	88 d9                	mov    cl,bl
c0020fb9:	d3 e2                	shl    edx,cl
c0020fbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020fbf:	89 fa                	mov    edx,edi
c0020fc1:	88 c1                	mov    cl,al
c0020fc3:	d3 ea                	shr    edx,cl
c0020fc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020fc9:	09 d1                	or     ecx,edx
c0020fcb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020fcf:	88 d9                	mov    cl,bl
c0020fd1:	d3 e7                	shl    edi,cl
c0020fd3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020fd7:	89 f7                	mov    edi,esi
c0020fd9:	88 c1                	mov    cl,al
c0020fdb:	d3 ef                	shr    edi,cl
c0020fdd:	88 d9                	mov    cl,bl
c0020fdf:	d3 e6                	shl    esi,cl
c0020fe1:	89 ea                	mov    edx,ebp
c0020fe3:	88 c1                	mov    cl,al
c0020fe5:	d3 ea                	shr    edx,cl
c0020fe7:	09 d6                	or     esi,edx
c0020fe9:	89 f0                	mov    eax,esi
c0020feb:	89 fa                	mov    edx,edi
c0020fed:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020ff1:	89 d7                	mov    edi,edx
c0020ff3:	89 c6                	mov    esi,eax
c0020ff5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ff9:	39 d7                	cmp    edi,edx
c0020ffb:	72 13                	jb     c0021010 <__udivdi3+0xec>
c0020ffd:	74 09                	je     c0021008 <__udivdi3+0xe4>
c0020fff:	89 f0                	mov    eax,esi
c0021001:	31 db                	xor    ebx,ebx
c0021003:	e9 43 ff ff ff       	jmp    c0020f4b <__udivdi3+0x27>
c0021008:	88 d9                	mov    cl,bl
c002100a:	d3 e5                	shl    ebp,cl
c002100c:	39 c5                	cmp    ebp,eax
c002100e:	73 ef                	jae    c0020fff <__udivdi3+0xdb>
c0021010:	8d 46 ff             	lea    eax,[esi-0x1]
c0021013:	31 db                	xor    ebx,ebx
c0021015:	e9 31 ff ff ff       	jmp    c0020f4b <__udivdi3+0x27>
c002101a:	66 90                	xchg   ax,ax
c002101c:	31 c0                	xor    eax,eax
c002101e:	e9 28 ff ff ff       	jmp    c0020f4b <__udivdi3+0x27>
c0021023:	90                   	nop

c0021024 <__umoddi3>:
c0021024:	55                   	push   ebp
c0021025:	57                   	push   edi
c0021026:	56                   	push   esi
c0021027:	53                   	push   ebx
c0021028:	83 ec 1c             	sub    esp,0x1c
c002102b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002102f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021033:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021037:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002103b:	89 da                	mov    edx,ebx
c002103d:	85 c0                	test   eax,eax
c002103f:	75 37                	jne    c0021078 <__umoddi3+0x54>
c0021041:	39 df                	cmp    edi,ebx
c0021043:	76 13                	jbe    c0021058 <__umoddi3+0x34>
c0021045:	89 f0                	mov    eax,esi
c0021047:	f7 f7                	div    edi
c0021049:	89 d0                	mov    eax,edx
c002104b:	31 d2                	xor    edx,edx
c002104d:	83 c4 1c             	add    esp,0x1c
c0021050:	5b                   	pop    ebx
c0021051:	5e                   	pop    esi
c0021052:	5f                   	pop    edi
c0021053:	5d                   	pop    ebp
c0021054:	c3                   	ret    
c0021055:	8d 76 00             	lea    esi,[esi+0x0]
c0021058:	89 fd                	mov    ebp,edi
c002105a:	85 ff                	test   edi,edi
c002105c:	75 0b                	jne    c0021069 <__umoddi3+0x45>
c002105e:	b8 01 00 00 00       	mov    eax,0x1
c0021063:	31 d2                	xor    edx,edx
c0021065:	f7 f7                	div    edi
c0021067:	89 c5                	mov    ebp,eax
c0021069:	89 d8                	mov    eax,ebx
c002106b:	31 d2                	xor    edx,edx
c002106d:	f7 f5                	div    ebp
c002106f:	89 f0                	mov    eax,esi
c0021071:	f7 f5                	div    ebp
c0021073:	89 d0                	mov    eax,edx
c0021075:	eb d4                	jmp    c002104b <__umoddi3+0x27>
c0021077:	90                   	nop
c0021078:	89 f1                	mov    ecx,esi
c002107a:	39 d8                	cmp    eax,ebx
c002107c:	76 0a                	jbe    c0021088 <__umoddi3+0x64>
c002107e:	89 f0                	mov    eax,esi
c0021080:	83 c4 1c             	add    esp,0x1c
c0021083:	5b                   	pop    ebx
c0021084:	5e                   	pop    esi
c0021085:	5f                   	pop    edi
c0021086:	5d                   	pop    ebp
c0021087:	c3                   	ret    
c0021088:	0f bd e8             	bsr    ebp,eax
c002108b:	83 f5 1f             	xor    ebp,0x1f
c002108e:	75 1c                	jne    c00210ac <__umoddi3+0x88>
c0021090:	39 d8                	cmp    eax,ebx
c0021092:	72 04                	jb     c0021098 <__umoddi3+0x74>
c0021094:	39 f7                	cmp    edi,esi
c0021096:	77 08                	ja     c00210a0 <__umoddi3+0x7c>
c0021098:	89 da                	mov    edx,ebx
c002109a:	29 fe                	sub    esi,edi
c002109c:	19 c2                	sbb    edx,eax
c002109e:	89 f1                	mov    ecx,esi
c00210a0:	89 c8                	mov    eax,ecx
c00210a2:	83 c4 1c             	add    esp,0x1c
c00210a5:	5b                   	pop    ebx
c00210a6:	5e                   	pop    esi
c00210a7:	5f                   	pop    edi
c00210a8:	5d                   	pop    ebp
c00210a9:	c3                   	ret    
c00210aa:	66 90                	xchg   ax,ax
c00210ac:	ba 20 00 00 00       	mov    edx,0x20
c00210b1:	29 ea                	sub    edx,ebp
c00210b3:	89 e9                	mov    ecx,ebp
c00210b5:	d3 e0                	shl    eax,cl
c00210b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210bb:	89 f8                	mov    eax,edi
c00210bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210c1:	88 d1                	mov    cl,dl
c00210c3:	d3 e8                	shr    eax,cl
c00210c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00210c9:	09 c1                	or     ecx,eax
c00210cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00210cf:	89 e9                	mov    ecx,ebp
c00210d1:	d3 e7                	shl    edi,cl
c00210d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00210d7:	89 d8                	mov    eax,ebx
c00210d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210dd:	88 d1                	mov    cl,dl
c00210df:	d3 e8                	shr    eax,cl
c00210e1:	89 c7                	mov    edi,eax
c00210e3:	89 e9                	mov    ecx,ebp
c00210e5:	d3 e3                	shl    ebx,cl
c00210e7:	89 f0                	mov    eax,esi
c00210e9:	88 d1                	mov    cl,dl
c00210eb:	d3 e8                	shr    eax,cl
c00210ed:	09 d8                	or     eax,ebx
c00210ef:	89 e9                	mov    ecx,ebp
c00210f1:	d3 e6                	shl    esi,cl
c00210f3:	89 f3                	mov    ebx,esi
c00210f5:	89 fa                	mov    edx,edi
c00210f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00210fb:	89 d1                	mov    ecx,edx
c00210fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021101:	89 c6                	mov    esi,eax
c0021103:	89 d7                	mov    edi,edx
c0021105:	39 d1                	cmp    ecx,edx
c0021107:	72 27                	jb     c0021130 <__umoddi3+0x10c>
c0021109:	74 21                	je     c002112c <__umoddi3+0x108>
c002110b:	89 ca                	mov    edx,ecx
c002110d:	29 f3                	sub    ebx,esi
c002110f:	19 fa                	sbb    edx,edi
c0021111:	89 d0                	mov    eax,edx
c0021113:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021117:	d3 e0                	shl    eax,cl
c0021119:	89 e9                	mov    ecx,ebp
c002111b:	d3 eb                	shr    ebx,cl
c002111d:	09 d8                	or     eax,ebx
c002111f:	d3 ea                	shr    edx,cl
c0021121:	83 c4 1c             	add    esp,0x1c
c0021124:	5b                   	pop    ebx
c0021125:	5e                   	pop    esi
c0021126:	5f                   	pop    edi
c0021127:	5d                   	pop    ebp
c0021128:	c3                   	ret    
c0021129:	8d 76 00             	lea    esi,[esi+0x0]
c002112c:	39 c3                	cmp    ebx,eax
c002112e:	73 db                	jae    c002110b <__umoddi3+0xe7>
c0021130:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021134:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021138:	89 d7                	mov    edi,edx
c002113a:	89 c6                	mov    esi,eax
c002113c:	eb cd                	jmp    c002110b <__umoddi3+0xe7>

Disassembly of section .init:

c002113e <_init>:
c002113e:	55                   	push   ebp
c002113f:	89 e5                	mov    ebp,esp
c0021141:	e8 d2 ef fd ff       	call   c0000118 <frame_dummy>
c0021146:	e8 e5 fa ff ff       	call   c0020c30 <__do_global_ctors_aux>
c002114b:	5d                   	pop    ebp
c002114c:	c3                   	ret    

Disassembly of section .fini:

c002114d <_fini>:
c002114d:	55                   	push   ebp
c002114e:	89 e5                	mov    ebp,esp
c0021150:	e8 53 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021155:	5d                   	pop    ebp
c0021156:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021158 <Computer::~Computer()>:
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	ba 74 27 02 c0       	mov    edx,0xc0022774
c0021160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021164:	89 10                	mov    DWORD PTR [eax],edx
c0021166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116a:	83 ec 0c             	sub    esp,0xc
c002116d:	50                   	push   eax
c002116e:	e8 09 cc fe ff       	call   c000dd7c <Device::~Device()>
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	90                   	nop
c0021177:	83 c4 0c             	add    esp,0xc
c002117a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002117c <Computer::~Computer()>:
c002117c:	83 ec 0c             	sub    esp,0xc
c002117f:	83 ec 0c             	sub    esp,0xc
c0021182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021186:	e8 cd ff ff ff       	call   c0021158 <Computer::~Computer()>
c002118b:	83 c4 10             	add    esp,0x10
c002118e:	83 ec 08             	sub    esp,0x8
c0021191:	68 ec 01 00 00       	push   0x1ec
c0021196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002119a:	e8 e7 b7 fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	83 c4 0c             	add    esp,0xc
c00211a5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00211a6 <idleCommon()>:
c00211a6:	83 ec 0c             	sub    esp,0xc
c00211a9:	fa                   	cli    
c00211aa:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00211b0:	e8 47 6d ff ff       	call   c0017efc <schedule()>
c00211b5:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00211ba:	48                   	dec    eax
c00211bb:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00211c0:	75 01                	jne    c00211c3 <idleCommon()+0x1d>
c00211c2:	fb                   	sti    
c00211c3:	83 c4 0c             	add    esp,0xc
c00211c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00211c8 <LinkedList<UnixFile>::~LinkedList()>:
c00211c8:	90                   	nop
c00211c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00211ca <LinkedList<UnixFile>::LinkedList()>:
c00211ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021203:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002120a:	90                   	nop
c002120b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002120c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002120c:	83 ec 0c             	sub    esp,0xc
c002120f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021214:	75 10                	jne    c0021226 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021216:	83 ec 0c             	sub    esp,0xc
c0021219:	68 94 2a 02 c0       	push   0xc0022a94
c002121e:	e8 06 31 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021223:	83 c4 10             	add    esp,0x10
c0021226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002122a:	8b 00                	mov    eax,DWORD PTR [eax]
c002122c:	85 c0                	test   eax,eax
c002122e:	74 34                	je     c0021264 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021237:	85 c0                	test   eax,eax
c0021239:	74 29                	je     c0021264 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002123b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021246:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021251:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021258:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002125b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021262:	eb 65                	jmp    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021268:	8b 00                	mov    eax,DWORD PTR [eax]
c002126a:	85 c0                	test   eax,eax
c002126c:	75 4b                	jne    c00212b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021272:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021275:	85 c0                	test   eax,eax
c0021277:	75 40                	jne    c00212b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021281:	89 10                	mov    DWORD PTR [eax],edx
c0021283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021287:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002128b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021295:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212a3:	85 c0                	test   eax,eax
c00212a5:	74 22                	je     c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212a7:	83 ec 0c             	sub    esp,0xc
c00212aa:	68 b6 2a 02 c0       	push   0xc0022ab6
c00212af:	e8 75 30 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00212b4:	83 c4 10             	add    esp,0x10
c00212b7:	eb 10                	jmp    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212b9:	83 ec 0c             	sub    esp,0xc
c00212bc:	68 c0 2a 02 c0       	push   0xc0022ac0
c00212c1:	e8 63 30 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00212c6:	83 c4 10             	add    esp,0x10
c00212c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212d0:	8d 50 01             	lea    edx,[eax+0x1]
c00212d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212da:	90                   	nop
c00212db:	83 c4 0c             	add    esp,0xc
c00212de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00212e0 <LinkedList<UnixFile>::getFirstElement()>:
c00212e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00212e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00212e8 <LinkedList<UnixFile>::removeFirst()>:
c00212e8:	83 ec 0c             	sub    esp,0xc
c00212eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f1:	85 c0                	test   eax,eax
c00212f3:	75 12                	jne    c0021307 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	68 cc 2a 02 c0       	push   0xc0022acc
c00212fd:	e8 27 30 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021302:	83 c4 10             	add    esp,0x10
c0021305:	eb 7e                	jmp    c0021385 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002130e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021311:	85 c0                	test   eax,eax
c0021313:	74 10                	je     c0021325 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021315:	83 ec 0c             	sub    esp,0xc
c0021318:	68 17 2b 02 c0       	push   0xc0022b17
c002131d:	e8 07 30 ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021322:	83 c4 10             	add    esp,0x10
c0021325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021329:	8b 00                	mov    eax,DWORD PTR [eax]
c002132b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002132e:	85 c0                	test   eax,eax
c0021330:	75 33                	jne    c0021365 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021336:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002133c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021340:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002134e:	83 f8 01             	cmp    eax,0x1
c0021351:	74 21                	je     c0021374 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021353:	83 ec 0c             	sub    esp,0xc
c0021356:	68 f0 2a 02 c0       	push   0xc0022af0
c002135b:	e8 c9 2f ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021360:	83 c4 10             	add    esp,0x10
c0021363:	eb 0f                	jmp    c0021374 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021369:	8b 00                	mov    eax,DWORD PTR [eax]
c002136b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002136e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021372:	89 10                	mov    DWORD PTR [eax],edx
c0021374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021378:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002137b:	8d 50 ff             	lea    edx,[eax-0x1]
c002137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021382:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021385:	83 c4 0c             	add    esp,0xc
c0021388:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002138a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002138a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002138e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021391:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021392 <DriverlessDevice::~DriverlessDevice()>:
c0021392:	ba 7c 33 02 c0       	mov    edx,0xc002337c
c0021397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002139b:	89 10                	mov    DWORD PTR [eax],edx
c002139d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a1:	50                   	push   eax
c00213a2:	e8 d5 c9 fe ff       	call   c000dd7c <Device::~Device()>
c00213a7:	83 c4 04             	add    esp,0x4
c00213aa:	90                   	nop
c00213ab:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00213ac <DriverlessDevice::~DriverlessDevice()>:
c00213ac:	83 ec 0c             	sub    esp,0xc
c00213af:	83 ec 0c             	sub    esp,0xc
c00213b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213b6:	e8 d7 ff ff ff       	call   c0021392 <DriverlessDevice::~DriverlessDevice()>
c00213bb:	83 c4 10             	add    esp,0x10
c00213be:	83 ec 08             	sub    esp,0x8
c00213c1:	68 58 01 00 00       	push   0x158
c00213c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213ca:	e8 b7 b5 fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c00213cf:	83 c4 10             	add    esp,0x10
c00213d2:	83 c4 0c             	add    esp,0xc
c00213d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00213d6 <LinkedList<Device>::addElement(Device*)>:
c00213d6:	83 ec 0c             	sub    esp,0xc
c00213d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00213de:	75 10                	jne    c00213f0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	68 94 2a 02 c0       	push   0xc0022a94
c00213e8:	e8 3c 2f ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00213ed:	83 c4 10             	add    esp,0x10
c00213f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00213f6:	85 c0                	test   eax,eax
c00213f8:	74 3a                	je     c0021434 <LinkedList<Device>::addElement(Device*)+0x5e>
c00213fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021401:	85 c0                	test   eax,eax
c0021403:	74 2f                	je     c0021434 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021409:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002140c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021410:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002141a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002141e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021428:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021432:	eb 68                	jmp    c002149c <LinkedList<Device>::addElement(Device*)+0xc6>
c0021434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021438:	8b 00                	mov    eax,DWORD PTR [eax]
c002143a:	85 c0                	test   eax,eax
c002143c:	75 4e                	jne    c002148c <LinkedList<Device>::addElement(Device*)+0xb6>
c002143e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021445:	85 c0                	test   eax,eax
c0021447:	75 43                	jne    c002148c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021451:	89 10                	mov    DWORD PTR [eax],edx
c0021453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021457:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002145b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002145e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021465:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002146f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021473:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021476:	85 c0                	test   eax,eax
c0021478:	74 22                	je     c002149c <LinkedList<Device>::addElement(Device*)+0xc6>
c002147a:	83 ec 0c             	sub    esp,0xc
c002147d:	68 b6 2a 02 c0       	push   0xc0022ab6
c0021482:	e8 a2 2e ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021487:	83 c4 10             	add    esp,0x10
c002148a:	eb 10                	jmp    c002149c <LinkedList<Device>::addElement(Device*)+0xc6>
c002148c:	83 ec 0c             	sub    esp,0xc
c002148f:	68 c0 2a 02 c0       	push   0xc0022ac0
c0021494:	e8 90 2e ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021499:	83 c4 10             	add    esp,0x10
c002149c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214a3:	8d 50 01             	lea    edx,[eax+0x1]
c00214a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00214ad:	90                   	nop
c00214ae:	83 c4 0c             	add    esp,0xc
c00214b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00214b2 <LinkedList<Device>::LinkedList()>:
c00214b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214f2:	90                   	nop
c00214f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00214f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00214f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214fa:	85 c0                	test   eax,eax
c00214fc:	75 0e                	jne    c002150c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00214fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021505:	85 c0                	test   eax,eax
c0021507:	75 03                	jne    c002150c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021509:	b0 01                	mov    al,0x1
c002150b:	c3                   	ret    
c002150c:	b0 00                	mov    al,0x0
c002150e:	90                   	nop
c002150f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021510 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021514:	8b 00                	mov    eax,DWORD PTR [eax]
c0021516:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021518 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021518:	83 ec 0c             	sub    esp,0xc
c002151b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021521:	85 c0                	test   eax,eax
c0021523:	75 17                	jne    c002153c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021525:	83 ec 0c             	sub    esp,0xc
c0021528:	68 cc 2a 02 c0       	push   0xc0022acc
c002152d:	e8 f7 2d ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021532:	83 c4 10             	add    esp,0x10
c0021535:	e9 92 00 00 00       	jmp    c00215cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002153a:	66 90                	xchg   ax,ax
c002153c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021543:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021546:	85 c0                	test   eax,eax
c0021548:	0f 95 c0             	setne  al
c002154b:	84 c0                	test   al,al
c002154d:	74 11                	je     c0021560 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002154f:	83 ec 0c             	sub    esp,0xc
c0021552:	68 17 2b 02 c0       	push   0xc0022b17
c0021557:	e8 cd 2d ff ff       	call   c0014329 <Krnl::panic(char const*)>
c002155c:	83 c4 10             	add    esp,0x10
c002155f:	90                   	nop
c0021560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021564:	8b 00                	mov    eax,DWORD PTR [eax]
c0021566:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021569:	85 c0                	test   eax,eax
c002156b:	0f 94 c0             	sete   al
c002156e:	84 c0                	test   al,al
c0021570:	74 36                	je     c00215a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021576:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021580:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002158b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002158e:	83 f8 01             	cmp    eax,0x1
c0021591:	74 25                	je     c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021593:	83 ec 0c             	sub    esp,0xc
c0021596:	68 f0 2a 02 c0       	push   0xc0022af0
c002159b:	e8 89 2d ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00215a0:	83 c4 10             	add    esp,0x10
c00215a3:	eb 13                	jmp    c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215a5:	8d 76 00             	lea    esi,[esi+0x0]
c00215a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00215ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00215b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b5:	89 10                	mov    DWORD PTR [eax],edx
c00215b7:	90                   	nop
c00215b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215bf:	8d 50 ff             	lea    edx,[eax-0x1]
c00215c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00215c9:	8d 76 00             	lea    esi,[esi+0x0]
c00215cc:	83 c4 0c             	add    esp,0xc
c00215cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00215d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00215d0:	83 ec 0c             	sub    esp,0xc
c00215d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00215d8:	75 12                	jne    c00215ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00215da:	83 ec 0c             	sub    esp,0xc
c00215dd:	68 94 2a 02 c0       	push   0xc0022a94
c00215e2:	e8 42 2d ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	66 90                	xchg   ax,ax
c00215ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f2:	85 c0                	test   eax,eax
c00215f4:	74 36                	je     c002162c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00215f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215fd:	85 c0                	test   eax,eax
c00215ff:	74 2b                	je     c002162c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002160c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002160f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021617:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002161a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021621:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021628:	eb 6a                	jmp    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002162a:	66 90                	xchg   ax,ax
c002162c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021630:	8b 00                	mov    eax,DWORD PTR [eax]
c0021632:	85 c0                	test   eax,eax
c0021634:	75 4e                	jne    c0021684 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002163d:	85 c0                	test   eax,eax
c002163f:	75 43                	jne    c0021684 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021645:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021649:	89 10                	mov    DWORD PTR [eax],edx
c002164b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021653:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002165d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021668:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002166b:	85 c0                	test   eax,eax
c002166d:	74 25                	je     c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002166f:	83 ec 0c             	sub    esp,0xc
c0021672:	68 b6 2a 02 c0       	push   0xc0022ab6
c0021677:	e8 ad 2c ff ff       	call   c0014329 <Krnl::panic(char const*)>
c002167c:	83 c4 10             	add    esp,0x10
c002167f:	eb 13                	jmp    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021681:	8d 76 00             	lea    esi,[esi+0x0]
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	68 c0 2a 02 c0       	push   0xc0022ac0
c002168c:	e8 98 2c ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021691:	83 c4 10             	add    esp,0x10
c0021694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021698:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002169b:	8d 50 01             	lea    edx,[eax+0x1]
c002169e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216a5:	90                   	nop
c00216a6:	83 c4 0c             	add    esp,0xc
c00216a9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00216ac <ACPI::~ACPI()>:
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	ba 4c 3e 02 c0       	mov    edx,0xc0023e4c
c00216b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b8:	89 10                	mov    DWORD PTR [eax],edx
c00216ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216be:	83 ec 0c             	sub    esp,0xc
c00216c1:	50                   	push   eax
c00216c2:	e8 b5 c6 fe ff       	call   c000dd7c <Device::~Device()>
c00216c7:	83 c4 10             	add    esp,0x10
c00216ca:	90                   	nop
c00216cb:	83 c4 0c             	add    esp,0xc
c00216ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00216d0 <ACPI::~ACPI()>:
c00216d0:	83 ec 0c             	sub    esp,0xc
c00216d3:	83 ec 0c             	sub    esp,0xc
c00216d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216da:	e8 cd ff ff ff       	call   c00216ac <ACPI::~ACPI()>
c00216df:	83 c4 10             	add    esp,0x10
c00216e2:	83 ec 08             	sub    esp,0x8
c00216e5:	68 64 12 00 00       	push   0x1264
c00216ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ee:	e8 93 b2 fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c00216f3:	83 c4 10             	add    esp,0x10
c00216f6:	83 c4 0c             	add    esp,0xc
c00216f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00216fc <LinkedList<Device>::~LinkedList()>:
c00216fc:	90                   	nop
c00216fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021700 <LinkedList<Device>::isEmpty()>:
c0021700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021704:	8b 00                	mov    eax,DWORD PTR [eax]
c0021706:	85 c0                	test   eax,eax
c0021708:	75 0e                	jne    c0021718 <LinkedList<Device>::isEmpty()+0x18>
c002170a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002170e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021711:	85 c0                	test   eax,eax
c0021713:	75 03                	jne    c0021718 <LinkedList<Device>::isEmpty()+0x18>
c0021715:	b0 01                	mov    al,0x1
c0021717:	c3                   	ret    
c0021718:	b0 00                	mov    al,0x0
c002171a:	90                   	nop
c002171b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002171c <LinkedList<Device>::getFirstElement()>:
c002171c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021720:	8b 00                	mov    eax,DWORD PTR [eax]
c0021722:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021724 <LinkedList<Device>::removeFirst()>:
c0021724:	83 ec 0c             	sub    esp,0xc
c0021727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172b:	8b 00                	mov    eax,DWORD PTR [eax]
c002172d:	85 c0                	test   eax,eax
c002172f:	75 17                	jne    c0021748 <LinkedList<Device>::removeFirst()+0x24>
c0021731:	83 ec 0c             	sub    esp,0xc
c0021734:	68 cc 2a 02 c0       	push   0xc0022acc
c0021739:	e8 eb 2b ff ff       	call   c0014329 <Krnl::panic(char const*)>
c002173e:	83 c4 10             	add    esp,0x10
c0021741:	e9 92 00 00 00       	jmp    c00217d8 <LinkedList<Device>::removeFirst()+0xb4>
c0021746:	66 90                	xchg   ax,ax
c0021748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002174c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002174f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021755:	85 c0                	test   eax,eax
c0021757:	74 13                	je     c002176c <LinkedList<Device>::removeFirst()+0x48>
c0021759:	83 ec 0c             	sub    esp,0xc
c002175c:	68 17 2b 02 c0       	push   0xc0022b17
c0021761:	e8 c3 2b ff ff       	call   c0014329 <Krnl::panic(char const*)>
c0021766:	83 c4 10             	add    esp,0x10
c0021769:	8d 76 00             	lea    esi,[esi+0x0]
c002176c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021770:	8b 00                	mov    eax,DWORD PTR [eax]
c0021772:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021778:	85 c0                	test   eax,eax
c002177a:	75 34                	jne    c00217b0 <LinkedList<Device>::removeFirst()+0x8c>
c002177c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021795:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021798:	83 f8 01             	cmp    eax,0x1
c002179b:	74 27                	je     c00217c4 <LinkedList<Device>::removeFirst()+0xa0>
c002179d:	83 ec 0c             	sub    esp,0xc
c00217a0:	68 f0 2a 02 c0       	push   0xc0022af0
c00217a5:	e8 7f 2b ff ff       	call   c0014329 <Krnl::panic(char const*)>
c00217aa:	83 c4 10             	add    esp,0x10
c00217ad:	eb 15                	jmp    c00217c4 <LinkedList<Device>::removeFirst()+0xa0>
c00217af:	90                   	nop
c00217b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00217bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c0:	89 10                	mov    DWORD PTR [eax],edx
c00217c2:	66 90                	xchg   ax,ax
c00217c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00217ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217d5:	8d 76 00             	lea    esi,[esi+0x0]
c00217d8:	83 c4 0c             	add    esp,0xc
c00217db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00217dc <CPU::~CPU()>:
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	ba e8 41 02 c0       	mov    edx,0xc00241e8
c00217e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e8:	89 10                	mov    DWORD PTR [eax],edx
c00217ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ee:	83 ec 0c             	sub    esp,0xc
c00217f1:	50                   	push   eax
c00217f2:	e8 85 c5 fe ff       	call   c000dd7c <Device::~Device()>
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	90                   	nop
c00217fb:	83 c4 0c             	add    esp,0xc
c00217fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021800 <CPU::~CPU()>:
c0021800:	83 ec 0c             	sub    esp,0xc
c0021803:	83 ec 0c             	sub    esp,0xc
c0021806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002180a:	e8 cd ff ff ff       	call   c00217dc <CPU::~CPU()>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	83 ec 08             	sub    esp,0x8
c0021815:	68 98 11 00 00       	push   0x1198
c002181a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181e:	e8 63 b1 fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	83 c4 0c             	add    esp,0xc
c0021829:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002182c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002182c:	90                   	nop
c002182d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021830 <ThreadControlBlock::ThreadControlBlock()>:
c0021830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021834:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002183b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002183f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021855:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002185c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021860:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021867:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002186b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002186f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021873:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021877:	90                   	nop
c0021878:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002187c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002187c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021880:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021895:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002189c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218bc:	90                   	nop
c00218bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00218c0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00218c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218c7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00218c8 <Vm::_FPUState::_FPUState()>:
c00218c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218cc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00218d3:	90                   	nop
c00218d4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00218d6 <PCI::~PCI()>:
c00218d6:	83 ec 0c             	sub    esp,0xc
c00218d9:	ba 48 4f 02 c0       	mov    edx,0xc0024f48
c00218de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e2:	89 10                	mov    DWORD PTR [eax],edx
c00218e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e8:	83 ec 0c             	sub    esp,0xc
c00218eb:	50                   	push   eax
c00218ec:	e8 5b be fe ff       	call   c000d74c <Bus::~Bus()>
c00218f1:	83 c4 10             	add    esp,0x10
c00218f4:	90                   	nop
c00218f5:	83 c4 0c             	add    esp,0xc
c00218f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00218fa <PCI::~PCI()>:
c00218fa:	83 ec 0c             	sub    esp,0xc
c00218fd:	83 ec 0c             	sub    esp,0xc
c0021900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021904:	e8 cd ff ff ff       	call   c00218d6 <PCI::~PCI()>
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	83 ec 08             	sub    esp,0x8
c002190f:	68 5c 01 00 00       	push   0x15c
c0021914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021918:	e8 69 b0 fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	83 c4 0c             	add    esp,0xc
c0021923:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021924 <IDE::~IDE()>:
c0021924:	83 ec 0c             	sub    esp,0xc
c0021927:	ba fc 4f 02 c0       	mov    edx,0xc0024ffc
c002192c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021930:	89 10                	mov    DWORD PTR [eax],edx
c0021932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021936:	83 ec 0c             	sub    esp,0xc
c0021939:	50                   	push   eax
c002193a:	e8 55 c9 fe ff       	call   c000e294 <HardDiskController::~HardDiskController()>
c002193f:	83 c4 10             	add    esp,0x10
c0021942:	90                   	nop
c0021943:	83 c4 0c             	add    esp,0xc
c0021946:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021948 <IDE::~IDE()>:
c0021948:	83 ec 0c             	sub    esp,0xc
c002194b:	83 ec 0c             	sub    esp,0xc
c002194e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021952:	e8 cd ff ff ff       	call   c0021924 <IDE::~IDE()>
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	83 ec 08             	sub    esp,0x8
c002195d:	68 70 02 00 00       	push   0x270
c0021962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021966:	e8 1b b0 fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	83 c4 0c             	add    esp,0xc
c0021971:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021972 <SATABus::~SATABus()>:
c0021972:	83 ec 0c             	sub    esp,0xc
c0021975:	ba 74 50 02 c0       	mov    edx,0xc0025074
c002197a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197e:	89 10                	mov    DWORD PTR [eax],edx
c0021980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	50                   	push   eax
c0021988:	e8 07 c9 fe ff       	call   c000e294 <HardDiskController::~HardDiskController()>
c002198d:	83 c4 10             	add    esp,0x10
c0021990:	90                   	nop
c0021991:	83 c4 0c             	add    esp,0xc
c0021994:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021996 <SATABus::~SATABus()>:
c0021996:	83 ec 0c             	sub    esp,0xc
c0021999:	83 ec 0c             	sub    esp,0xc
c002199c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219a0:	e8 cd ff ff ff       	call   c0021972 <SATABus::~SATABus()>
c00219a5:	83 c4 10             	add    esp,0x10
c00219a8:	83 ec 08             	sub    esp,0x8
c00219ab:	68 64 01 00 00       	push   0x164
c00219b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b4:	e8 cd af fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c00219b9:	83 c4 10             	add    esp,0x10
c00219bc:	83 c4 0c             	add    esp,0xc
c00219bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00219c0 <ATA::~ATA()>:
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	ba ec 50 02 c0       	mov    edx,0xc00250ec
c00219c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219cc:	89 10                	mov    DWORD PTR [eax],edx
c00219ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d2:	83 ec 0c             	sub    esp,0xc
c00219d5:	50                   	push   eax
c00219d6:	e8 9b c9 fe ff       	call   c000e376 <PhysicalDisk::~PhysicalDisk()>
c00219db:	83 c4 10             	add    esp,0x10
c00219de:	90                   	nop
c00219df:	83 c4 0c             	add    esp,0xc
c00219e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00219e4 <ATA::~ATA()>:
c00219e4:	83 ec 0c             	sub    esp,0xc
c00219e7:	83 ec 0c             	sub    esp,0xc
c00219ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219ee:	e8 cd ff ff ff       	call   c00219c0 <ATA::~ATA()>
c00219f3:	83 c4 10             	add    esp,0x10
c00219f6:	83 ec 08             	sub    esp,0x8
c00219f9:	68 7c 01 00 00       	push   0x17c
c00219fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a02:	e8 7f af fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021a07:	83 c4 10             	add    esp,0x10
c0021a0a:	83 c4 0c             	add    esp,0xc
c0021a0d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a0e <ATAPI::~ATAPI()>:
c0021a0e:	83 ec 0c             	sub    esp,0xc
c0021a11:	ba 24 51 02 c0       	mov    edx,0xc0025124
c0021a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1a:	89 10                	mov    DWORD PTR [eax],edx
c0021a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	50                   	push   eax
c0021a24:	e8 4d c9 fe ff       	call   c000e376 <PhysicalDisk::~PhysicalDisk()>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	90                   	nop
c0021a2d:	83 c4 0c             	add    esp,0xc
c0021a30:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021a32 <ATAPI::~ATAPI()>:
c0021a32:	83 ec 0c             	sub    esp,0xc
c0021a35:	83 ec 0c             	sub    esp,0xc
c0021a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a3c:	e8 cd ff ff ff       	call   c0021a0e <ATAPI::~ATAPI()>
c0021a41:	83 c4 10             	add    esp,0x10
c0021a44:	83 ec 08             	sub    esp,0x8
c0021a47:	68 80 01 00 00       	push   0x180
c0021a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a50:	e8 31 af fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021a55:	83 c4 10             	add    esp,0x10
c0021a58:	83 c4 0c             	add    esp,0xc
c0021a5b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021a5c <SATA::~SATA()>:
c0021a5c:	83 ec 0c             	sub    esp,0xc
c0021a5f:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c0021a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a68:	89 10                	mov    DWORD PTR [eax],edx
c0021a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6e:	83 ec 0c             	sub    esp,0xc
c0021a71:	50                   	push   eax
c0021a72:	e8 ff c8 fe ff       	call   c000e376 <PhysicalDisk::~PhysicalDisk()>
c0021a77:	83 c4 10             	add    esp,0x10
c0021a7a:	90                   	nop
c0021a7b:	83 c4 0c             	add    esp,0xc
c0021a7e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a80 <SATA::~SATA()>:
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	83 ec 0c             	sub    esp,0xc
c0021a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a8a:	e8 cd ff ff ff       	call   c0021a5c <SATA::~SATA()>
c0021a8f:	83 c4 10             	add    esp,0x10
c0021a92:	83 ec 08             	sub    esp,0x8
c0021a95:	68 7c 01 00 00       	push   0x17c
c0021a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9e:	e8 e3 ae fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021aa3:	83 c4 10             	add    esp,0x10
c0021aa6:	83 c4 0c             	add    esp,0xc
c0021aa9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021aaa <SATAPI::~SATAPI()>:
c0021aaa:	83 ec 0c             	sub    esp,0xc
c0021aad:	ba b4 52 02 c0       	mov    edx,0xc00252b4
c0021ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab6:	89 10                	mov    DWORD PTR [eax],edx
c0021ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	50                   	push   eax
c0021ac0:	e8 b1 c8 fe ff       	call   c000e376 <PhysicalDisk::~PhysicalDisk()>
c0021ac5:	83 c4 10             	add    esp,0x10
c0021ac8:	90                   	nop
c0021ac9:	83 c4 0c             	add    esp,0xc
c0021acc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021ace <SATAPI::~SATAPI()>:
c0021ace:	83 ec 0c             	sub    esp,0xc
c0021ad1:	83 ec 0c             	sub    esp,0xc
c0021ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ad8:	e8 cd ff ff ff       	call   c0021aaa <SATAPI::~SATAPI()>
c0021add:	83 c4 10             	add    esp,0x10
c0021ae0:	83 ec 08             	sub    esp,0x8
c0021ae3:	68 80 01 00 00       	push   0x180
c0021ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aec:	e8 95 ae fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021af1:	83 c4 10             	add    esp,0x10
c0021af4:	83 c4 0c             	add    esp,0xc
c0021af7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021af8 <AVX::~AVX()>:
c0021af8:	83 ec 0c             	sub    esp,0xc
c0021afb:	ba f4 52 02 c0       	mov    edx,0xc00252f4
c0021b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b04:	89 10                	mov    DWORD PTR [eax],edx
c0021b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0a:	83 ec 0c             	sub    esp,0xc
c0021b0d:	50                   	push   eax
c0021b0e:	e8 e9 c8 fe ff       	call   c000e3fc <FPU::~FPU()>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	90                   	nop
c0021b17:	83 c4 0c             	add    esp,0xc
c0021b1a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b1c <AVX::~AVX()>:
c0021b1c:	83 ec 0c             	sub    esp,0xc
c0021b1f:	83 ec 0c             	sub    esp,0xc
c0021b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b26:	e8 cd ff ff ff       	call   c0021af8 <AVX::~AVX()>
c0021b2b:	83 c4 10             	add    esp,0x10
c0021b2e:	83 ec 08             	sub    esp,0x8
c0021b31:	68 58 01 00 00       	push   0x158
c0021b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b3a:	e8 47 ae fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021b3f:	83 c4 10             	add    esp,0x10
c0021b42:	83 c4 0c             	add    esp,0xc
c0021b45:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021b48 <MMX::~MMX()>:
c0021b48:	83 ec 0c             	sub    esp,0xc
c0021b4b:	ba 34 53 02 c0       	mov    edx,0xc0025334
c0021b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b54:	89 10                	mov    DWORD PTR [eax],edx
c0021b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5a:	83 ec 0c             	sub    esp,0xc
c0021b5d:	50                   	push   eax
c0021b5e:	e8 99 c8 fe ff       	call   c000e3fc <FPU::~FPU()>
c0021b63:	83 c4 10             	add    esp,0x10
c0021b66:	90                   	nop
c0021b67:	83 c4 0c             	add    esp,0xc
c0021b6a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021b6c <MMX::~MMX()>:
c0021b6c:	83 ec 0c             	sub    esp,0xc
c0021b6f:	83 ec 0c             	sub    esp,0xc
c0021b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b76:	e8 cd ff ff ff       	call   c0021b48 <MMX::~MMX()>
c0021b7b:	83 c4 10             	add    esp,0x10
c0021b7e:	83 ec 08             	sub    esp,0x8
c0021b81:	68 58 01 00 00       	push   0x158
c0021b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b8a:	e8 f7 ad fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021b8f:	83 c4 10             	add    esp,0x10
c0021b92:	83 c4 0c             	add    esp,0xc
c0021b95:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021b98 <SSE::~SSE()>:
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	ba 74 53 02 c0       	mov    edx,0xc0025374
c0021ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba4:	89 10                	mov    DWORD PTR [eax],edx
c0021ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021baa:	83 ec 0c             	sub    esp,0xc
c0021bad:	50                   	push   eax
c0021bae:	e8 49 c8 fe ff       	call   c000e3fc <FPU::~FPU()>
c0021bb3:	83 c4 10             	add    esp,0x10
c0021bb6:	90                   	nop
c0021bb7:	83 c4 0c             	add    esp,0xc
c0021bba:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021bbc <SSE::~SSE()>:
c0021bbc:	83 ec 0c             	sub    esp,0xc
c0021bbf:	83 ec 0c             	sub    esp,0xc
c0021bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bc6:	e8 cd ff ff ff       	call   c0021b98 <SSE::~SSE()>
c0021bcb:	83 c4 10             	add    esp,0x10
c0021bce:	83 ec 08             	sub    esp,0x8
c0021bd1:	68 58 01 00 00       	push   0x158
c0021bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bda:	e8 a7 ad fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021bdf:	83 c4 10             	add    esp,0x10
c0021be2:	83 c4 0c             	add    esp,0xc
c0021be5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021be8 <x87::~x87()>:
c0021be8:	83 ec 0c             	sub    esp,0xc
c0021beb:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c0021bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf4:	89 10                	mov    DWORD PTR [eax],edx
c0021bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bfa:	83 ec 0c             	sub    esp,0xc
c0021bfd:	50                   	push   eax
c0021bfe:	e8 f9 c7 fe ff       	call   c000e3fc <FPU::~FPU()>
c0021c03:	83 c4 10             	add    esp,0x10
c0021c06:	90                   	nop
c0021c07:	83 c4 0c             	add    esp,0xc
c0021c0a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c0c <x87::~x87()>:
c0021c0c:	83 ec 0c             	sub    esp,0xc
c0021c0f:	83 ec 0c             	sub    esp,0xc
c0021c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c16:	e8 cd ff ff ff       	call   c0021be8 <x87::~x87()>
c0021c1b:	83 c4 10             	add    esp,0x10
c0021c1e:	83 ec 08             	sub    esp,0x8
c0021c21:	68 58 01 00 00       	push   0x158
c0021c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c2a:	e8 57 ad fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	83 c4 0c             	add    esp,0xc
c0021c35:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021c36 <IOAPIC::~IOAPIC()>:
c0021c36:	83 ec 0c             	sub    esp,0xc
c0021c39:	ba 0c 55 02 c0       	mov    edx,0xc002550c
c0021c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c42:	89 10                	mov    DWORD PTR [eax],edx
c0021c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c48:	83 ec 0c             	sub    esp,0xc
c0021c4b:	50                   	push   eax
c0021c4c:	e8 2b c1 fe ff       	call   c000dd7c <Device::~Device()>
c0021c51:	83 c4 10             	add    esp,0x10
c0021c54:	90                   	nop
c0021c55:	83 c4 0c             	add    esp,0xc
c0021c58:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021c5a <IOAPIC::~IOAPIC()>:
c0021c5a:	83 ec 0c             	sub    esp,0xc
c0021c5d:	83 ec 0c             	sub    esp,0xc
c0021c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c64:	e8 cd ff ff ff       	call   c0021c36 <IOAPIC::~IOAPIC()>
c0021c69:	83 c4 10             	add    esp,0x10
c0021c6c:	83 ec 08             	sub    esp,0x8
c0021c6f:	68 68 01 00 00       	push   0x168
c0021c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c78:	e8 09 ad fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	83 c4 0c             	add    esp,0xc
c0021c83:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c84 <APIC::~APIC()>:
c0021c84:	83 ec 0c             	sub    esp,0xc
c0021c87:	ba c4 54 02 c0       	mov    edx,0xc00254c4
c0021c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c90:	89 10                	mov    DWORD PTR [eax],edx
c0021c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	50                   	push   eax
c0021c9a:	e8 31 cc fe ff       	call   c000e8d0 <InterruptController::~InterruptController()>
c0021c9f:	83 c4 10             	add    esp,0x10
c0021ca2:	90                   	nop
c0021ca3:	83 c4 0c             	add    esp,0xc
c0021ca6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021ca8 <APIC::~APIC()>:
c0021ca8:	83 ec 0c             	sub    esp,0xc
c0021cab:	83 ec 0c             	sub    esp,0xc
c0021cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cb2:	e8 cd ff ff ff       	call   c0021c84 <APIC::~APIC()>
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	83 ec 08             	sub    esp,0x8
c0021cbd:	68 58 21 00 00       	push   0x2158
c0021cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc6:	e8 bb ac fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021ccb:	83 c4 10             	add    esp,0x10
c0021cce:	83 c4 0c             	add    esp,0xc
c0021cd1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021cd2 <PIC::~PIC()>:
c0021cd2:	83 ec 0c             	sub    esp,0xc
c0021cd5:	ba 5c 55 02 c0       	mov    edx,0xc002555c
c0021cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cde:	89 10                	mov    DWORD PTR [eax],edx
c0021ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce4:	83 ec 0c             	sub    esp,0xc
c0021ce7:	50                   	push   eax
c0021ce8:	e8 e3 cb fe ff       	call   c000e8d0 <InterruptController::~InterruptController()>
c0021ced:	83 c4 10             	add    esp,0x10
c0021cf0:	90                   	nop
c0021cf1:	83 c4 0c             	add    esp,0xc
c0021cf4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021cf6 <PIC::~PIC()>:
c0021cf6:	83 ec 0c             	sub    esp,0xc
c0021cf9:	83 ec 0c             	sub    esp,0xc
c0021cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d00:	e8 cd ff ff ff       	call   c0021cd2 <PIC::~PIC()>
c0021d05:	83 c4 10             	add    esp,0x10
c0021d08:	83 ec 08             	sub    esp,0x8
c0021d0b:	68 58 21 00 00       	push   0x2158
c0021d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d14:	e8 6d ac fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021d19:	83 c4 10             	add    esp,0x10
c0021d1c:	83 c4 0c             	add    esp,0xc
c0021d1f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d20 <APICTimer::~APICTimer()>:
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	ba b0 55 02 c0       	mov    edx,0xc00255b0
c0021d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2c:	89 10                	mov    DWORD PTR [eax],edx
c0021d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	50                   	push   eax
c0021d36:	e8 a1 e9 fe ff       	call   c00106dc <Timer::~Timer()>
c0021d3b:	83 c4 10             	add    esp,0x10
c0021d3e:	90                   	nop
c0021d3f:	83 c4 0c             	add    esp,0xc
c0021d42:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021d44 <APICTimer::~APICTimer()>:
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	83 ec 0c             	sub    esp,0xc
c0021d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d4e:	e8 cd ff ff ff       	call   c0021d20 <APICTimer::~APICTimer()>
c0021d53:	83 c4 10             	add    esp,0x10
c0021d56:	83 ec 08             	sub    esp,0x8
c0021d59:	68 60 01 00 00       	push   0x160
c0021d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d62:	e8 1f ac fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021d67:	83 c4 10             	add    esp,0x10
c0021d6a:	83 c4 0c             	add    esp,0xc
c0021d6d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021d70 <PIT::~PIT()>:
c0021d70:	83 ec 0c             	sub    esp,0xc
c0021d73:	ba 00 56 02 c0       	mov    edx,0xc0025600
c0021d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7c:	89 10                	mov    DWORD PTR [eax],edx
c0021d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d82:	83 ec 0c             	sub    esp,0xc
c0021d85:	50                   	push   eax
c0021d86:	e8 51 e9 fe ff       	call   c00106dc <Timer::~Timer()>
c0021d8b:	83 c4 10             	add    esp,0x10
c0021d8e:	90                   	nop
c0021d8f:	83 c4 0c             	add    esp,0xc
c0021d92:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021d94 <PIT::~PIT()>:
c0021d94:	83 ec 0c             	sub    esp,0xc
c0021d97:	83 ec 0c             	sub    esp,0xc
c0021d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d9e:	e8 cd ff ff ff       	call   c0021d70 <PIT::~PIT()>
c0021da3:	83 c4 10             	add    esp,0x10
c0021da6:	83 ec 08             	sub    esp,0x8
c0021da9:	68 5c 01 00 00       	push   0x15c
c0021dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021db2:	e8 cf ab fe ff       	call   c000c986 <operator delete(void*, unsigned long)>
c0021db7:	83 c4 10             	add    esp,0x10
c0021dba:	83 c4 0c             	add    esp,0xc
c0021dbd:	c3                   	ret    
